################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki (sw143@wp.pl)                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

function open(path, mode) -> rv
  if mode is 'r'
    # Open existing file for view only.
    rv = __mold_syscall(1, path)

  elif mode is 'w'
    # Open existing file for edit.
    rv = __mold_syscall(2, path)

  elif mode is 'w+'
    # Create new file from scratch or overwrite existing one.
    rv = __mold_syscall(3, path)

  else
    # Error - unsupported open mode.
    rv = -1
  endif

  if rv is -1
    die("error: could not open file: '" + str(path) + "' (" + str(mode) + ")")
  endif
endfunction

function close(f)
  # Close file handle.
  __mold_syscall(4, f)
endfunction

function readByte(f) -> rv
  # Read one byte from file.
  rv = __mold_syscall(8, f)
endfunction

function readWord(f) -> rv
  # Read one word (2 bytes) from file.
  rv = __mold_syscall(9, f)
endfunction

function readDword(f) -> rv
  # Read one double word (4 bytes) from file.
  rv = __mold_syscall(10, f)
endfunction

function readQword(f) -> rv
  # Read one quad word (8 bytes) from file.
  rv = __mold_syscall(11, f)
endfunction

function readChar(f) -> rv
  # Read one byte from file.
  rv = __mold_syscall(20, f)
endfunction

function writeByte(f, data)
  # Write one byte to file.
  __mold_syscall(21, f, data)
endfunction

function writeWord(f, data)
  # Write one word to file.
  __mold_syscall(22, f, data)
endfunction

function writeDword(f, data)
  # Write one double word to file.
  __mold_syscall(23, f, data)
endfunction

function writeQword(f, data)
  # Write one quad word to file.
  __mold_syscall(24, f, data)
endfunction

function ord(x) -> rv
  rv = __mold_syscall(31, x)
endfunction

function asc(x) -> rv
  rv = __mold_syscall(32, x)
endfunction

function readLine(f) -> rv
  rv   = ''
  goOn = true

  while goOn is true
    c = readChar(f)

    if c is ''
      # End of file.
      goOn = false

      if rv is ''
        rv = -1
      endif

    elif (ord(c) is 13) or (ord(c) is 10)
      # TODO: Avoid generating empty line on windows.
      # End of line.
      goOn = false

    else
      # We're in the middle of the line.
      # Go on.
      rv = rv + c
    endif
  endwhile
endfunction

function parseInteger(x) -> rv
  rv = __mold_syscall(33, x)
endfunction

function parseFloat(x) -> rv
  rv = __mold_syscall(34, x)
endfunction

function bitand(x, y) -> rv
  rv = __mold_syscall(35, x, y)
endfunction

function bitor(x, y) -> rv
  rv = __mold_syscall(36, x, y)
endfunction

function bitxor(x, y) -> rv
  rv = __mold_syscall(37, x, y)
endfunction

function bitnot(x) -> rv
  rv = __mold_syscall(38, x)
endfunction
