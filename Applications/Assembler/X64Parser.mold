################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'X64.mold'
import 'AbstractDescentParser.mold'
import '../../Libs/BitwiseHack.mold'

PARSER_X64_ADDRESS_SIZE_MAP = {
  'byte': 1,
  'word': 2,
  'dword': 4,
  'qword': 8,
  'tword': 10
}

PARSER_X64_DEFINE_DATA_MAP = {
  'db': 1,
  'dw': 2,
  'dd': 4,
  'dq': 8
}

class X64Parser extends AbstractDescentParser
  method constructor()
    super()
    this.reset()
  endmethod

  method reset()
    this.constantsMap         = {}
    this.labelsMap            = {}
    this.constantsMap         = {}
    this.arrayOfLabelsAndRefs = []
    this.currentLabelName     = ''
  endmethod

  method _emitLabel(name) -> labelObj
    if name[0] is '.'
      name = this.currentLabelName + name
    else
      this.currentLabelName = name
    endif

    offset   = this.outputObject.getCurrentPosition()
    labelObj = this.labelsMap[name]

    if labelObj is undefined
      labelObj = {
        'type': 'label',
        'name': name,
        'codeSize': 0
      }
      this.labelsMap[name] = labelObj
    endif

    labelObj.offset         = offset
    labelObj.originalOffset = offset

    this.arrayOfLabelsAndRefs[len(this.arrayOfLabelsAndRefs)] = labelObj
    #print 'Emited label [', name, '] at [', offset, ']'
  endmethod

  method _getToken() -> rv
    this._skipWhites()

    if this.lookupBuffer is ','
      rv = '' + this._getChar()

    else
      # TODO: Crash without concatenation.
      if (this.lookupBuffer is '.') or (this.lookupBuffer is '_') or (this.lookupBuffer is '-')
        rv = '' + this._getChar()
      else
        rv = '' + this._matchLetterOrDigit()
      endif

      while (this._isLetterOrDigit(this.lookupBuffer) is true) or (this.lookupBuffer is '_')
        rv = rv + this._getChar()
      endwhile
    endif

    # Is it constant?
    constantValue = this.constantsMap[rv]
    if constantValue is defined
      #print 'resolved constant [', rv, '] to [', constantValue, ']'
      rv = constantValue
    endif

    #print 'pop token [', rv, ']'

    this._skipWhites()
  endmethod

  method _matchMemory(instruction)
    global X64_RIP

    this._skipWhites()

    disp  = 0
    scale = -1
    index = -1
    base  = -1

    this._matchChar('[')
    token = this._getToken()

    # TODO: Clean up this mess.
    if this._isDigit(token[0]) is true
      if this.lookupBuffer is '*'
        # [ scale * index ]
        this._getChar()
        scale = parseInteger(token)
        index = X64_ParseRegisterName(this._getToken())

        if this.lookupBuffer is '+'
          # [ scale * index + ... ]
          this._getChar()
          token = this._getToken()

          if this._isDigit(token[0]) is true
            # [ scale * index + disp ]
            disp = parseInteger(token)
          else
            base = X64_ParseRegisterName(token)
          endif
        endif
      else
        # [ disp ]
        disp = parseInteger(token)
      endif

    elif this.lookupBuffer is ']'
      # [ base ]
      base = X64_ParseRegisterName(token)

      if base is -1
        # Treat as RIP relative label.
        # Convert to [rip + label - $]
        # TODO: Clean up this mess.
        labelObj = this.labelsMap[token]

        if labelObj is undefined
          labelObj = {
            'type': 'label',
            'name': token,
            'offset': -1
          }
          this.labelsMap[token] = labelObj
        endif

        #print 'reference [', token, '] at [', this.outputObject.getCurrentPosition(), ']'
        # TODO: Clean up this mess.
        # TODO: Fix int64 mess.
        base = X64_RIP
        disp = instruction.offset + 1000

        instruction.labelObjForDisp = labelObj
        instruction.originalOffset  = instruction.offset
        this.arrayOfLabelsAndRefs[len(this.arrayOfLabelsAndRefs)] = instruction
      endif

    elif this.lookupBuffer is '-'
      # [ base - disp ]
      this._getChar()
      base = X64_ParseRegisterName(token)
      disp = - parseInteger(this._getToken())

    elif this.lookupBuffer is '+'
      # [ base + ... ]
      this._getChar()
      base  = X64_ParseRegisterName(token)
      token = this._getToken()

      if this.lookupBuffer is '*'
        # [ base + scale * index ]
        this._getChar()
        scale = parseInteger(token)
        index = X64_ParseRegisterName(this._getToken())

        if this.lookupBuffer is '+'
          # [ base + scale * index + disp ]
          this._getChar()
          disp = parseInteger(this._getToken())

        elif this.lookupBuffer is '-'
          # [ base + scale * index - disp ]
          this._getChar()
          disp = - parseInteger(this._getToken())
        endif

      elif this._isDigit(token[0]) is true
        # [ base + disp ]
        disp = parseInteger(token)

      else
        # [ base + index ]
        index = X64_ParseRegisterName(token)
        scale = 1

        if this.lookupBuffer is '+'
          # [ base + index + disp ]
          this._getChar()
          disp = parseInteger(this._getToken())

        elif this.lookupBuffer is '-'
          # [ base + index - disp ]
          this._getChar()
          disp = - parseInteger(this._getToken())
        endif
      endif
    endif

    this._skipWhites()
    this._matchChar(']')
    this._skipWhites()

    instruction.base  = base
    instruction.scale = scale
    instruction.index = index
    instruction.disp  = disp

    if instruction.reg is -1
      # This is the first operand, so we write to memory.
      instruction.isWriteToMemory = true
    endif
  endmethod

  method _setImmediate(instruction, value)
    # TODO: Clean up this mess.
    if instruction.imm is undefined
      instruction.imm = value
    else
      instruction.imm2 = value
    endif
  endmethod

  method _matchOperand(instruction)
    global PARSER_X64_ADDRESS_SIZE_MAP
    global PARSER_X64_DEFINE_DATA_MAP

    this._skipWhites()

    if this.lookupBuffer is '['
      # Just memory address without size specification.
      # Example: cmpxchg16b [rax]
      this._matchMemory(instruction)

    else
      token = this._getToken()

      if (token[0] is '-') or (this._isDigit(token[0]) is true)
        # Immediate value.
        # TODO: Handle float numbers.
        this._setImmediate(instruction, parseInteger(token))

      elif token is 'EQU'
        # Constant definition: name EQU value
        this.constantsMap[instruction.mnemonic] = this._getToken()
        instruction.type = 'constant'

      else
        defineDataSize = PARSER_X64_DEFINE_DATA_MAP[token]

        if defineDataSize is defined
          # name db ...
          labelObj = this._emitLabel(instruction.mnemonic)
          this._matchData(defineDataSize)
          instruction.type = 'none'

        else
          addressSize = PARSER_X64_ADDRESS_SIZE_MAP[token]

          if addressSize is defined
            # Memory address with size prefix.
            # Example: inc dword [rax]
            instruction.dataSize = addressSize
            this._matchMemory(instruction)

          else
            regId = X64_ParseRegisterName(token)

            if regId isnt -1
              # Token recognized as register.
              if instruction.reg is -1
                # First operand.
                instruction.reg = regId
              else
                # Second operand.
                instruction.rm = regId
              endif

            else
              # Neither immediate nor register.
              # Treat as label.
              # TODO: Optimize it.
              labelObj = this.labelsMap[token]

              if labelObj is undefined
                labelObj = {
                  'type': 'label',
                  'name': token,
                  'offset': -1
                }
                this.labelsMap[token] = labelObj
              endif

              #print 'reference [', token, '] at [', this.outputObject.getCurrentPosition(), ']'
              # TODO: Clean up this mess.
              # TODO: Fix int64 mess.
              instruction.imm            = instruction.offset + 1000
              instruction.labelObj       = labelObj
              instruction.originalOffset = instruction.offset
              this.arrayOfLabelsAndRefs[len(this.arrayOfLabelsAndRefs)] = instruction
            endif
          endif
        endif
      endif
    endif

    this._skipWhites()
  endmethod

  method _matchEndOfLine()
    this._skipWhites()

    if this._isEndOfLine(this.lookupBuffer) is true
      # Eat end of line.
      this._getChar()
    else
      # Error - new line expected, but something different found.
      this._error('unexpected content')
    endif
  endmethod

  method _parseFirstOperand(instruction)
    if this._isEndOfLine(this.lookupBuffer) is false
      this._matchOperand(instruction)
    endif
  endmethod

  method _parseSecondOperand(instruction)
    if this.lookupBuffer is ','
      this._getChar()
      this._matchOperand(instruction)
    endif
  endmethod

  method _matchCodeLine(mnemonic)
    global X64_RIP, X64_RBP, X64_RSP, X64_AL, X64_AX, X64_EAX

    newItem = {
      'type': 'instruction',
      'mnemonic': mnemonic,
      'reg': -1,
      'rm': -1,
      'offset': this.outputObject.getCurrentPosition()
    }

    this._parseFirstOperand(newItem)
    this._parseSecondOperand(newItem)
    this._emitOneItem(newItem)

    # TODO: Clean up this mess.
    if (newItem.mnemonic[0] is 'j') and (newItem.labelObj is undefined) and (newItem.imm is defined)
      newItem.absoluteAddress = newItem.imm
      this.arrayOfLabelsAndRefs[len(this.arrayOfLabelsAndRefs)] = newItem
    endif

    newItem.codeSize = this.outputObject.getCurrentPosition() - newItem.offset
  endmethod

  method _skipComment()
    this._skipWhites()

    c = this.lookupBuffer
    if c is ';'
      this._getChar()
      # Eat all input until end of line.
      while this._isEndOfLine(c) is false
        c = this._getChar()
      endwhile
    endif
  endmethod

  method _matchNumber() -> rv
    this._skipWhites()

    if this.lookupBuffer is '-'
      sign = this._getChar()
    else
      sign = ''
    endif

    token = this._getToken()
    if this._isDigit(token[0]) is false
      this._error('number expected')
    endif
    rv = parseInteger(sign + token)
  endmethod

  method _matchData(size)
    this._skipWhites()

    goOn = true
    # TODO: Don't send data byte-by-byte.
    while goOn is true
      if this.lookupBuffer is "'"

        this._getChar()
        c = this._getChar()

        while c isnt "'"
          this._emitOneItem({
            'type': 'data',
            'dataSize': size,
            'imm': ord(c)
          })

          c = this._getChar()
        endwhile

      else
        # TODO: Clean up this mess.
        token = this._getToken()

        if token is '-'
          # TODO: Fix crash if there is no concatenation to ''
          token = '-' + this._getToken()
        endif

        if (this._isDigit(token[0]) is true) or (token[0] is '-')
          value = parseInteger(token)
          cnt   = 1

          if this.lookupBuffer is 'd'
            token = this._getToken()

            if token is 'dup'
              cnt  = value
              value = this._matchNumber()
            endif
          endif

          for idx in 0 .. cnt
            this._emitOneItem({
              'type': 'data',
              'dataSize': size,
              'imm': value
            })
          endfor

        else
          # TODO: LABEL
          # TODO: Clean up this mess.
          labelObj = this.labelsMap[token]

          if labelObj is undefined
            labelObj = {
             'type': 'label',
             'name': token,
             'offset': -1
            }
            this.labelsMap[token] = labelObj
          endif

          #print 'reference [', token, '] at [', this.outputObject.getCurrentPosition(), ']'
          offset = this.outputObject.getCurrentPosition()

          newInstruction = {
            'type': 'data',
            'dataSize': size,
            'imm': 0,
            'labelObj': labelObj,
            'offset': offset,
            'originalOffset': offset,
            'codeSize': size
          }
          this._emitOneItem(newInstruction)
          this.arrayOfLabelsAndRefs[len(this.arrayOfLabelsAndRefs)] = newInstruction
        endif
      endif

      # Check for another data in the same line.
      # value1, value2, value3, ...
      if this.lookupBuffer is ','
        this._matchChar(',')
        this._skipWhites()
      else
        goOn = false
      endif
    endwhile
  endmethod

  method _parseLine()
    global PARSER_X64_DEFINE_DATA_MAP

    this._skipWhites()
    this._skipComment()

    if this._isEndOfLine(this.lookupBuffer) is true
      # Empty line.
      # Do nothing.

    else
      # Non-empty line.
      # Get one token first to check what to do next.
      token          = this._getToken()
      defineDataSize = PARSER_X64_DEFINE_DATA_MAP[token]

      if defineDataSize is defined
        this._matchData(defineDataSize)

      elif token is 'align'
        # align <boundInBytes>
        offset      = this.outputObject.getCurrentPosition()
        bound       = this._matchNumber()
        newLabelObj = this._emitLabel('align' + str(offset))
        newLabelObj.alignTo = bound

      elif this.lookupBuffer is ':'
        # Label line.
        this._getChar()
        labelObj = this._emitLabel(token)

      else
        # Code line.
        this._matchCodeLine(token)
      endif
    endif

    # Go to next line.
    this._skipComment()
    this._matchEndOfLine()
  endmethod

  method _parseSource()
    this.reset()
    while ord(this.lookupBuffer) isnt 0
      this._parseLine()
    endwhile
  endmethod

  method getArrayOfLabelsAndRefs() -> rv
    rv = this.arrayOfLabelsAndRefs
  endmethod
endclass

