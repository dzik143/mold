################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'X64Parser.mold'
import 'X64Translator.mold'
import 'X64Encoder.mold'
import 'PEWriter.mold'
import 'Buffer.mold'

class X64Compiler
  method constructor()
    this.parser     = new X64Parser()
    this.translator = new X64Translator()
    this.encoder    = new X64Encoder()
    this.tempBuffer = new Buffer()
    this.peWriter   = new PEWriter()

    # Set up toolchain.
    # We want to catch generated code to temporary buffer before
    # emit to caller.
    this.parser.connectTo(this.translator).connectTo(this.encoder).connectTo(this.tempBuffer)
  endmethod

  method compileToFile(targetBinPath, sourceAsmPath)
    this.peWriter.create(targetBinPath)
    this.compile(this.peWriter, sourceAsmPath)
    this.peWriter.close()
  endmethod

  method compile(outputObject, pathAsm)
    parser     = this.parser
    tempBuffer = this.tempBuffer
    translator = this.translator
    parser     = this.parser

    # Compile source into temporary buffer.
    tempBuffer.clear()
    parser.parseFile(pathAsm)

    #print ''
    #print 'Buffer before patches:'
    #for values v in buffer.data
    #  __mold_printToStdOutput(hex(v))
    #  __mold_printToStdOutput(' ')
    #  peWriter.emitByte(v)
    #endfor
    #print ''

    # Patch generated code to handle unresolved references
    # and changes related to various jmp length (rel8 vs rel32).
    codeSizeDiffTotal = -1
    refs              = parser.getArrayOfLabelsAndRefs()
    passIdx           = 1

    # TODO: Clean up this mess.
    for values item in refs
      item.originalCodeSize = item.codeSize
      item.originalOffset   = item.offset
    endfor

    while codeSizeDiffTotal isnt 0
      #print 'pass', passIdx
      #print '----------------------'
      codeSizeDiffTotal = 0

      for values item in refs
        item.offset = item.offset + codeSizeDiffTotal

        if (item.type is 'instruction') or (item.type is 'data')
          codeSizeBefore = item.codeSize

          # TODO: Clean up this mess.
          if item.labelObj is defined
            # jxx rel
            item.imm = item.labelObj.offset

          elif item.labelObjForDisp is defined
            # [rip + disp]
            item.disp = item.labelObjForDisp.offset - item.offset - item.codeSize

          elif item.absoluteAddress is defined
            # jxx <absolute address>
            item.imm = item.absoluteAddress
          endif

          # Go to current referencing instruction.
          tempBuffer.setCurrentPosition(item.originalOffset, 0)

          # Translate the same instruction once again, but using updated
          # label offset.
          translator.processOneItem(item)

          codeSizeAfter     = tempBuffer.getCurrentPosition() - item.originalOffset
          codeSizeDiff      = codeSizeAfter - codeSizeBefore
          codeSizeDiffTotal = codeSizeDiffTotal + codeSizeDiff

          if codeSizeDiff > 0
            # Fatal - instruction is longer after patch.
            # Should never happen on production.
            die('error: code overwrite after patch')

          elif codeSizeDiff < 0
            item.codeSize = codeSizeAfter
          endif

        elif (item.type is 'label') and (item.alignTo is defined)
          codeSizeAfter = (item.offset // item.alignTo + 1) * item.alignTo - item.offset
          codeSizeDiff  = codeSizeAfter - item.codeSize
          item.codeSize  = codeSizeAfter
          codeSizeDiffTotal = codeSizeDiffTotal + codeSizeDiff
        endif
      endfor

      passIdx = passIdx + 1
    endwhile

    # Emit final code taking into account new instruction sizes after patch.
    # We skip cutted out bytes if some instructions are shorter after patch.
    # Example (jmp): eb ii ii ii ii => e9 ii
    # TODO: Optimize it.
    readPos = 0
    for values item in refs
      if (item.type is 'instruction') or (item.type is 'data')
        for pos in readPos .. item.originalOffset + item.codeSize
          outputObject.emitByte(tempBuffer.data[pos])
        endfor
        readPos = item.originalOffset + item.originalCodeSize

      elif (item.type is 'label') and (item.alignTo is defined)
        for pos in readPos .. item.originalOffset
          outputObject.emitByte(tempBuffer.data[pos])
        endfor

        readPos = item.originalOffset + item.originalCodeSize
        for idx in 0 .. item.codeSize
          outputObject.emitByte(0)
        endfor
      endif
    endfor

    for pos in readPos .. tempBuffer.getSize()
      outputObject.emitByte(tempBuffer.data[pos])
    endfor

    # Clean up temporary buffer.
    tempBuffer.clear()
  endmethod
endclass
