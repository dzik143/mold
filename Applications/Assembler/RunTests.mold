################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'X64Compiler.mold'

arrayOfTests = [
/*
 TODO: 'core/shld',
 TODO: 'core/shrd',
*/
  'common/common_align',
  'common/common_data',
  'common/common_equ',
  'common/common_jumps',
  'common/common_no_operands',
  'common/common_ports',
  'common/common_proc',
  'core/adc',
  'core/add',
  'core/and',
  'core/bsf',
  'core/bsr',
  'core/bswap',
  'core/bt',
  'core/btc',
  'core/btr',
  'core/bts',
  'core/cbw',
  'core/cdq',
  'core/cdqe',
  'core/clc',
  'core/cld',
  'core/cli',
  'core/clts',
  'core/cmc',
  'core/cmova',
  'core/cmovae',
  'core/cmovb',
  'core/cmovbe',
  'core/cmovc',
  'core/cmove',
  'core/cmovg',
  'core/cmovge',
  'core/cmovl',
  'core/cmovle',
  'core/cmovna',
  'core/cmovnae',
  'core/cmovnb',
  'core/cmovnbe',
  'core/cmovnc',
  'core/cmovne',
  'core/cmovng',
  'core/cmovnge',
  'core/cmovnl',
  'core/cmovnle',
  'core/cmovno',
  'core/cmovnp',
  'core/cmovns',
  'core/cmovnz',
  'core/cmovo',
  'core/cmovp',
  'core/cmovpe',
  'core/cmovpo',
  'core/cmovs',
  'core/cmovz',
  'core/cmp',
  'core/cmpsb',
  'core/cmpsd',
  'core/cmpsq',
  'core/cmpsw',
  'core/cmpxchg',
  'core/cmpxchg16b',
  'core/cmpxchg8b',
  'core/cpuid',
  'core/cqo',
  'core/cwd',
  'core/cwde',
  'core/dec',
  'core/div',
  'core/enter',
  'core/hlt',
  'core/idiv',
  'core/in',
  'core/inc',
  'core/insd',
  'core/int',
  'core/invd',
  'core/invlpg',
  'core/iret',
  'core/iretd',
  'core/iretq',
  'core/lar',
  'core/lea',
  'core/leave',
  'core/lfs',
  'core/lgdt',
  'core/lgs',
  'core/lidt',
  'core/lldt',
  'core/lmsw',
  'core/lock',
  'core/lodsb',
  'core/lodsd',
  'core/lodsq',
  'core/lodsw',
  'core/lsl',
  'core/lss',
  'core/ltr',
  'core/mov',
  'core/movsb',
  'core/movsd',
  'core/movsw',
  'core/movsx',
  'core/movsxd',
  'core/movzx',
  'core/neg',
  'core/nop',
  'core/not',
  'core/or',
  'core/out',
  'core/outsd',
  'core/pop',
  'core/popf',
  'core/popfq',
  'core/push',
  'core/pushf',
  'core/pushfq',
  'core/rcl',
  'core/rcr',
  'core/rdmsr',
  'core/rdpmc',
  'core/rdtsc',
  'core/rdtscp',
  'core/rep',
  'core/repe',
  'core/repne',
  'core/ret',
  'core/retf',
  'core/rol',
  'core/ror',
  'core/rsm',
  'core/sal',
  'core/sar',
  'core/sbb',
  'core/scasb',
  'core/scasd',
  'core/scasq',
  'core/scasw',
  'core/seta',
  'core/setae',
  'core/setb',
  'core/setbe',
  'core/setc',
  'core/sete',
  'core/setg',
  'core/setge',
  'core/setl',
  'core/setle',
  'core/setna',
  'core/setnae',
  'core/setnb',
  'core/setnbe',
  'core/setnc',
  'core/setne',
  'core/setng',
  'core/setnge',
  'core/setnl',
  'core/setnle',
  'core/setno',
  'core/setnp',
  'core/setns',
  'core/setnz',
  'core/seto',
  'core/setp',
  'core/setpe',
  'core/setpo',
  'core/sets',
  'core/setz',
  'core/sgdt',
  'core/shl',
  'core/shr',
  'core/sidt',
  'core/sldt',
  'core/smsw',
  'core/stc',
  'core/std',
  'core/sti',
  'core/stosb',
  'core/stosd',
  'core/stosq',
  'core/stosw',
  'core/str',
  'core/sub',
  'core/swapgs',
  'core/syscall',
  'core/sysenter',
  'core/sysexit',
  'core/sysret',
  'core/test',
  'core/ud2',
  'core/verr',
  'core/verw',
  'core/wait',
  'core/wbinvd',
  'core/wrmsr',
  'core/xadd',
  'core/xchg',
  'core/xlatb',
  'core/xor'
]

class X64Tester
  method constructor()
    this.compiler = new X64Compiler()
  endmethod

  method compare(x, y)
    if x isnt y
      die(' FAIL! (data mismatch, got: ' + hex(x) + ', expected: ' + hex(y) + ')')
    endif
  endmethod

  method emitByte(x)
    this.compare(x, readByte(this.f))
  endmethod

  method emitWord(x)
    this.compare(x, readWord(this.f))
  endmethod

  method emitDword(x)
    this.compare(x, readDword(this.f))
  endmethod

  method emitQword(x)
    this.compare(x, readQword(this.f))
  endmethod

  method compileSourceFile(pathAsm, pathBin)
    # Open reference file to compare result.
    __mold_printToStdOutput(pathAsm + '...')
    this.f = open('tests/' + pathBin, 'r')

    # Redirect compiler result to this object and
    # compare content byte-by-byte with reference file.
    this.compiler.compile(this, 'tests/' + pathAsm)

    # TODO: Compare number of bytes emited.
    if ord(readChar(this.f)) isnt 0
      die('FAIL! (too less data)')
    endif

    close(this.f)

    print ' OK'
    endmethod
endclass

tester = new X64Tester()

for values testName in arrayOfTests
  pathAsm = testName + '.asm'
  pathBin = testName + '.bin'
  tester.compileSourceFile(pathAsm, pathBin)
endfor
