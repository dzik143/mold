################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'X64Compiler.mold'

arrayOfTests = [
/*
 TODO: 'core/shld',
 TODO: 'core/shrd',
*/
/*
  'common/common_align',
  'common/common_data',
  'common/common_equ',
  'common/common_jumps',
  'common/common_no_operands',
  'common/common_ports',
  'common/common_proc',

  'core/adc',
  'core/add',
  'core/and',
  'core/bsf',
  'core/bsr',
  'core/bswap',
  'core/bt',
  'core/btc',
  'core/btr',
  'core/bts',
  'core/cbw',
  'core/cdq',
  'core/cdqe',
  'core/clc',
  'core/cld',
  'core/cli',
  'core/clts',
  'core/cmc',
  'core/cmova',
  'core/cmovae',
  'core/cmovb',
  'core/cmovbe',
  'core/cmovc',
  'core/cmove',
  'core/cmovg',
  'core/cmovge',
  'core/cmovl',
  'core/cmovle',
  'core/cmovna',
  'core/cmovnae',
  'core/cmovnb',
  'core/cmovnbe',
  'core/cmovnc',
  'core/cmovne',
  'core/cmovng',
  'core/cmovnge',
  'core/cmovnl',
  'core/cmovnle',
  'core/cmovno',
  'core/cmovnp',
  'core/cmovns',
  'core/cmovnz',
  'core/cmovo',
  'core/cmovp',
  'core/cmovpe',
  'core/cmovpo',
  'core/cmovs',
  'core/cmovz',
  'core/cmp',
  'core/cmpsb',
  'core/cmpsd',
  'core/cmpsq',
  'core/cmpsw',
  'core/cmpxchg',
  'core/cmpxchg16b',
  'core/cmpxchg8b',
  'core/cpuid',
  'core/cqo',
  'core/cwd',
  'core/cwde',
  'core/dec',
  'core/div',
  'core/enter',
  'core/hlt',
  'core/idiv',
  'core/in',
  'core/inc',
  'core/insd',
  'core/int',
  'core/invd',
  'core/invlpg',
  'core/iret',
  'core/iretd',
  'core/iretq',
  'core/lar',
  'core/lea',
  'core/leave',
  'core/lfs',
  'core/lgdt',
  'core/lgs',
  'core/lidt',
  'core/lldt',
  'core/lmsw',
  'core/lock',
  'core/lodsb',
  'core/lodsd',
  'core/lodsq',
  'core/lodsw',
  'core/lsl',
  'core/lss',
  'core/ltr',
  'core/mov',
  'core/movsb',
  'core/movsd',
  'core/movsw',
  'core/movsx',
  'core/movsxd',
  'core/movzx',
  'core/neg',
  'core/nop',
  'core/not',
  'core/or',
  'core/out',
  'core/outsd',
  'core/pop',
  'core/popf',
  'core/popfq',
  'core/push',
  'core/pushf',
  'core/pushfq',
  'core/rcl',
  'core/rcr',
  'core/rdmsr',
  'core/rdpmc',
  'core/rdtsc',
  'core/rdtscp',
  'core/rep',
  'core/repe',
  'core/repne',
  'core/ret',
  'core/retf',
  'core/rol',
  'core/ror',
  'core/rsm',
  'core/sal',
  'core/sar',
  'core/sbb',
  'core/scasb',
  'core/scasd',
  'core/scasq',
  'core/scasw',
  'core/seta',
  'core/setae',
  'core/setb',
  'core/setbe',
  'core/setc',
  'core/sete',
  'core/setg',
  'core/setge',
  'core/setl',
  'core/setle',
  'core/setna',
  'core/setnae',
  'core/setnb',
  'core/setnbe',
  'core/setnc',
  'core/setne',
  'core/setng',
  'core/setnge',
  'core/setnl',
  'core/setnle',
  'core/setno',
  'core/setnp',
  'core/setns',
  'core/setnz',
  'core/seto',
  'core/setp',
  'core/setpe',
  'core/setpo',
  'core/sets',
  'core/setz',
  'core/sgdt',
  'core/shl',
  'core/shr',
  'core/sidt',
  'core/sldt',
  'core/smsw',
  'core/stc',
  'core/std',
  'core/sti',
  'core/stosb',
  'core/stosd',
  'core/stosq',
  'core/stosw',
  'core/str',
  'core/sub',
  'core/swapgs',
  'core/syscall',
  'core/sysenter',
  'core/sysexit',
  'core/sysret',
  'core/test',
  'core/ud2',
  'core/verr',
  'core/verw',
  'core/wait',
  'core/wbinvd',
  'core/wrmsr',
  'core/xadd',
  'core/xchg',
  'core/xlatb',
  'core/xor',
  'core-jumps/call',
  'core-jumps/jmp',
  'core-jumps/jo',
  'core-jumps/jno',
  'core-jumps/jb',
  'core-jumps/jae',
  'core-jumps/jz',
  'core-jumps/jnz',
  'core-jumps/jbe',
  'core-jumps/ja',
  'core-jumps/js',
  'core-jumps/jns',
  'core-jumps/jp',
  'core-jumps/jnp',
  'core-jumps/jl',
  'core-jumps/jge',
  'core-jumps/jle',
  'core-jumps/jg',
  'core-jumps/loop',
  'core-jumps/loope',
  'core-jumps/loopne',
  'core-jumps/jecxz',
  'core-jumps/looped',
  'core-jumps/loopned',
  'core-jumps/jrcxz',

  'x87/fadd',
  'x87/faddp',
  'x87/fiadd',
  'x87/ficom',
  'x87/ficomp',
  'x87/fidiv',
  'x87/fidivr',
  'x87/fimul',
  'x87/fisub',
  'x87/fisubr',
  'x87/fmul',
  'x87/fmulp',
  'x87/fdiv',
  'x87/fdivp',
  'x87/fdivr',
  'x87/fdivrp',
  'x87/fsub',
  'x87/fsubp',
  'x87/fsubr',
  'x87/fsubrp',
  'x87/f2xm1',
  'x87/fabs',
  'x87/fchs',
  'x87/fcompp',
  'x87/fcos',
  'x87/fdecstp',
  'x87/fincstp',
  'x87/fld1',
  'x87/fldl2e',
  'x87/fldl2t',
  'x87/fldlg2',
  'x87/fldln2',
  'x87/fldpi',
  'x87/fldz',
  'x87/fnclex',
  'x87/fninit',
  'x87/fnop',
  'x87/fpatan',
  'x87/fprem',
  'x87/fprem1',
  'x87/fptan',
  'x87/frndint',
  'x87/fscale',
  'x87/fsin',
  'x87/fsincos',
  'x87/fsqrt',
  'x87/fucompp',
  'x87/fwait',
  'x87/fxam',
  'x87/fxtract',
  'x87/fyl2x',
  'x87/fyl2xp1',
  'x87/fbld',
  'x87/fbstp',
  'x87/fldenv',
  'x87/fldenvd',
  'x87/fnsave',
  'x87/fnstcw',
  'x87/fnstenv',
  'x87/frstor',
  'x87/frstord',
  'x87/fcmovb',
  'x87/fcmovbe',
  'x87/fcmove',
  'x87/fcmovnb',
  'x87/fcmovnbe',
  'x87/fcmovne',
  'x87/fcmovnu',
  'x87/fcmovu',
  'x87/fcom',
  'x87/fcomp',
  'x87/fcomi',
  'x87/fcomip',
  'x87/fucom',
  'x87/fucomi',
  'x87/fucomip',
  'x87/fucomp',
  'x87/ffree',
  'x87/fstenv',
  'x87/fstenvd',
  'x87/fsave',
  'x87/fsaved',
  'x87/fxch',
  'x87/fxrstor',
  'x87/fxsave',
  'x87/fld',
  'x87/fst',
  'x87/fstp',
  'x87/ftst',
  'x87/fild',
  'x87/fisttp',
  'x87/fist',
  'x87/fistp',
  'x87/fclex',
  'x87/finit',
  'x87/fldenvw',
  'x87/fnstenvw',
  'x87/fnstsw',
  'x87/frstorw',
  'x87/fsavew',
  'x87/fstcw',
  'x87/fstenvw',
  'x87/fstsw',
  'x87/fnsavew',
  'x87/fnstsw',

  'mmx/emms',
  'mmx/packssdw',
  'mmx/packsswb',
  'mmx/packuswb',
  'mmx/paddb',
  'mmx/paddd',
  'mmx/paddq',
  'mmx/paddsb',
  'mmx/paddsw',
  'mmx/paddusb',
  'mmx/paddusw',
  'mmx/paddw',
  'mmx/pand',
  'mmx/pandn',
  'mmx/pavgb',
  'mmx/pavgw',
  'mmx/pcmpeqb',
  'mmx/pcmpeqd',
  'mmx/pcmpeqw',
  'mmx/pcmpgtb',
  'mmx/pcmpgtd',
  'mmx/pcmpgtw',
  'mmx/pmaddwd',
  'mmx/pmaxsw',
  'mmx/pmaxub',
  'mmx/pminsw',
  'mmx/pminub',
  'mmx/pmulhuw',
  'mmx/pmulhw',
  'mmx/pmullw',
  'mmx/pmuludq',
  'mmx/por',
  'mmx/psadbw',
  'mmx/psubb',
  'mmx/psubd',
  'mmx/psubq',
  'mmx/psubsb',
  'mmx/psubsw',
  'mmx/psubusb',
  'mmx/psubusw',
  'mmx/psubw',
  'mmx/punpckhbw',
  'mmx/punpckhdq',
  'mmx/punpckhwd',
  'mmx/pxor',
  'mmx/pabsb',
  'mmx/pabsd',
  'mmx/pabsw',
  'mmx/phaddd',
  'mmx/phaddsw',
  'mmx/phaddw',
  'mmx/phsubd',
  'mmx/phsubsw',
  'mmx/phsubw',
  'mmx/pmaddubsw',
  'mmx/pmulhrsw',
  'mmx/psignb',
  'mmx/psignd',
  'mmx/psignw',
  'mmx/punpcklbw',
  'mmx/punpckldq',
  'mmx/punpcklwd',
  'mmx/movd',
  'mmx/movq',
  'mmx/palignr',
  'mmx/pextrw',
  'mmx/pinsrw',
  'mmx/pmovmskb',
  'mmx/pshufw',
  'mmx/pshufb',
  'mmx/psrad',
  'mmx/psraw',
  'mmx/psrld',
  'mmx/psrlq',
  'mmx/psrlw',
*/

  'sse/addps',
  'sse/addss',
  'sse/andnps',
  'sse/andps',
  'sse/cmpps',
  'sse/cmpss',
  'sse/comiss',
  'sse/cvtpi2ps',
  'sse/cvtps2pi',
  'sse/cvtsi2ss',
  'sse/cvtss2si',
  'sse/cvttps2pi',
  'sse/cvttss2si',

  'sse/divps',
  'sse/divss',
  'sse/ldmxcsr',
  'sse/maxps',
  'sse/maxss',
  'sse/minps',
  'sse/minss',
  'sse/movaps',
  'sse/movhlps',
  'sse/movhps',
  'sse/movlhps',
  'sse/movlps',
  'sse/movmskps',
  'sse/movntps',
  'sse/movss',
  'sse/movups',
  'sse/mulps',
  'sse/mulss',
  'sse/orps',
  'sse/rcpps',
  'sse/rcpss',
  'sse/rsqrtps',
  'sse/rsqrtss',
  'sse/shufps',
  'sse/sqrtps',
  'sse/sqrtss',
  'sse/stmxcsr',
  'sse/subps',
  'sse/subss',
  'sse/ucomiss',
  'sse/unpckhps',
  'sse/unpcklps',
  'sse/xorps'
]

class X64Tester
  method constructor()
    this.compiler = new X64Compiler()
  endmethod

  method compare(x, y)
    if x isnt y
      die(' FAIL! (data mismatch, got: ' ~ hex(x) ~ ', expected: ' ~ hex(y) ~ ')')
    endif
  endmethod

  method emitByte(x)
    this.compare(x, FileReadInt8(this.f))
  endmethod

  method emitWord(x)
    this.compare(x, FileReadInt16(this.f))
  endmethod

  method emitDword(x)
    this.compare(x, FileReadInt32(this.f))
  endmethod

  method emitQword(x)
    this.compare(x, FileReadInt64(this.f))
  endmethod

  method compileSourceFile(pathAsm, pathBin)
    # Open reference file to compare result.
    __mold_printToStdOutput(pathAsm ~ '...')
    this.f = FileOpenForRead('tests/' ~ pathBin)

    # Redirect compiler result to this object and
    # compare content byte-by-byte with reference file.
    this.compiler.compile(this, 'tests/' ~ pathAsm)

    # TODO: Compare number of bytes emited.
    if ord(FileReadChar(this.f)) isnt 0
      die('FAIL! (too less data)')
    endif

    FileClose(this.f)

    print ' OK'
    endmethod
endclass

tester = new X64Tester()

for values testName in arrayOfTests
  pathAsm = testName ~ '.asm'
  pathBin = testName ~ '.bin'
  tester.compileSourceFile(pathAsm, pathBin)
endfor
