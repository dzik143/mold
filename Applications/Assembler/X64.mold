################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

# ------------------------------------------------------------------------------
#                           Core: one byte opcodes
# ------------------------------------------------------------------------------

X64_ADD                     = 0x00 # 00-05 add
X64_PUSH_ES                 = 0x06 # 06    push es
X64_POP_ES                  = 0x07 # 07    pop es
X64_OR                      = 0x08 # 08-0d or
X64_PUSH_CS                 = 0x0e # 0e    push cs
X64_PREFIX_TWO_BYTES_OPCODE = 0x0f # 0f    2-byte opcode prefix
X64_ADC                     = 0x10 # 10-15 adc
X64_PUSH_SS                 = 0x16 # 16    push ss
X64_POP_SS                  = 0x17 # 17    pop ss
X64_SBB                     = 0x18 # 18-1d sbb
X64_PUSH_DS                 = 0x1e # 1e    push ds
X64_POP_DS                  = 0x1f # 1f    pop ds
X64_AND                     = 0x20 # 20-25 and
X64_SUB                     = 0x28 # 28-2d sub
X64_PREFIX_SEG_CS           = 0x2e # 2e    seg=cs prefix
X64_DAS                     = 0x2f # 2f    das (invalid in 64-bit)
X64_XOR                     = 0x30 # 30-35 xor
X64_CMP                     = 0x38 # 38-3d cmp
X64_PREFIX_SEG_DS           = 0x3e # 3e    seg=ds prefix
X64_AAS                     = 0x3f # 3f    aas (invalid in 64-bit)
X64_INC_R32                 = 0x40 # 40-47 inc r32 (invalid in 64-bit)
X64_PREFIX_REX_W            = 0x48 # 48    prefix for 64-bit operand(s)
X64_DEC_R32                 = 0x48 # 48-4f dec r32 (invalid in 64-bit)
X64_PUSH_R64                = 0x50 # 50-57 push r64
X64_POP_R64                 = 0x58 # 58-5f pop r64
X64_PUSHA                   = 0x60 # 60    pusha / pushad
X64_POPA                    = 0x61 # 61    popa / popad
X64_BOUND                   = 0x62 # 62    bound (invalid in 64-bit)
X64_MOVSXD                  = 0x63 # 63    arpl / movsxd r64, r/m32
X64_PREFIX_SEG_FS           = 0x64 # 64    seg fs prefix
X64_PREFIX_SEG_GS           = 0x65 # 65    seg gs prefix
X64_PREFIX_OPERAND_SIZE     = 0x66 # 66    operand size prefix
X64_PREFIX_ADDRESS_SIZE     = 0x67 # 67    address size prefix
X64_PUSH_IMM32              = 0x68 # 68    push imm32
X64_IMUL_R32_RM32_IMM32     = 0x69 # 69    imul r32, r/m32, imm32
X64_PUSH_IMM8               = 0x6a # 6a    push imm8
X64_IMUL_R32_RM32_IMM8      = 0x6b # 6b    imul r32, r/m32, imm8
X64_INSB                    = 0x6c # 6c    insb
X64_INSD                    = 0x6d # 6d    insw/d/q
X64_OUTSB                   = 0x6e # 6e    outsb
X64_OUTSD                   = 0x6f # 6f    outsw/d/q
X64_JXX                     = 0x70 # 70-7f jxx
X64_JO                      = 0x70 # 70    jo
X64_JNO                     = 0x71 # 71    jno
X64_JB                      = 0x72 # 72    jb, jnae, jc
X64_JAE                     = 0x73 # 73    jnb, jae, jnc
X64_JZ                      = 0x74 # 74    jz, je
X64_JNZ                     = 0x75 # 75    jnz, jne
X64_JBE                     = 0x76 # 76    jbe, jna
X64_JA                      = 0x77 # 77    jnbe, ja
X64_JS                      = 0x78 # 78    js
X64_JNS                     = 0x79 # 79    jns
X64_JP                      = 0x7a # 7a    jp, jpe
X64_JNP                     = 0x7b # 7b    jnp, jpo
X64_JL                      = 0x7c # 7c    jl, jnge
X64_JGE                     = 0x7d # 7d    jnl, jge
X64_JLE                     = 0x7e # 7e    jle, jng
X64_JG                      = 0x7f # 7f    jnle, jg
X64_ALU_RM8_IMM8_GROUP      = 0x80 # 80    add/or/adc/sbb/and/sub/xor/cmp r/m8, imm8
X64_ALU_RM32_IMM32_GROUP    = 0x81 # 81    add/or/adc/sbb/and/sub/xor/cmp r/m32, imm32
X64_INVALID_OPCODE_82       = 0x82 # 82    invalid opcode
X64_ALU_RM32_IMM8_GROUP     = 0x83 # 83    add/or/adc/sbb/and/sub/xor/cmp r/m32, imm8
X64_TEST                    = 0x84 # 84    test r/m8, r8
X64_TEST_RM8_R8             = 0x84 # 84    test r/m8, r8
X64_TEST_RM32_R32           = 0x85 # 85    test r/m32, r32
X64_XCHG                    = 0x86 # 86    xchg r/m8, r8
X64_XCHG_RM8_R8             = 0x86 # 86    xchg r/m8, r8
X64_XCHG_RM32_R32           = 0x87 # 87    xchg r/m32, r32
X64_MOV                     = 0x88 # 88    mov r/m8, r8
X64_MOV_RM8_R8              = 0x88 # 88    mov r/m8, r8
X64_MOV_RM32_R32            = 0x89 # 89    mov r/m32, r32
X64_MOV_R8_RM8              = 0x8a # 8a    mov r8, r/m8
X64_MOV_R32_RM32            = 0x8b # 8b    mov r32, r/m32
X64_MOV_RM16_SEG            = 0x8c # 8c    mov r/m16, seg
X64_LEA                     = 0x8d # 8d    lea r32, m64
X64_MOV_SEG_RM16            = 0x8e # 8e    mov seg, r/m16
X64_POP_RM64                = 0x8f # 8f    pop r/m64
X64_NOP                     = 0x90 # 90    nop
X64_XCHG_EAX_R32            = 0x90 # 90-97 xchg eax, r32
X64_CWDE                    = 0x98 # 98    cbw / cwde / cdqe
X64_CDQ                     = 0x99 # 99    cwd / cdq / cqo
X64_CALLF                   = 0x9a # 9a    call ptr16:32 (invalid in 64-bit)
X64_WAIT                    = 0x9b # 9b    wait / fwait
X64_PUSHF                   = 0x9c # 9c    pushf
X64_POPF                    = 0x9d # 9d    popf
X64_SAHF                    = 0x9e # 9e    sahf (invalid in 64-bit)
X64_LAHF                    = 0x9f # 9f    lahf (invalid in 64-bit)
X64_MOV_AL_M8               = 0xa0 # a0    mov al, moffs8
X64_MOV_EAX_M32             = 0xa1 # a1    mov eax, moffs32
X64_MOV_M8_AL               = 0xa2 # a2    mov moffs8, al
X64_MOV_M32_EAX             = 0xa3 # a3    mov moffs32, eax
X64_MOVSB                   = 0xa4 # a4    movsb
X64_MOVSD                   = 0xa5 # a5    movsw/d/q
X64_CMPSB                   = 0xa6 # a6    cmpsb
X64_CMPSD                   = 0xa7 # a7    cmpsw/d/q
X64_TEST_AL_IMM8            = 0xa8 # a8    test al, imm8
X64_TEST_EAX_IMM32          = 0xa9 # a9    test eax, imm32
X64_STOSB                   = 0xaa # aa    stosb
X64_STOSD                   = 0xab # ab    stosw/d/q
X64_LODSB                   = 0xac # ac    lodsb
X64_LODSD                   = 0xad # ad    lodsw/d/q
X64_SCASB                   = 0xae # ae    scasb
X64_SCASD                   = 0xaf # af    scasw/d/q
X64_MOV_R8_IMM8             = 0xb0 # b0-b7 mov r8, imm8
X64_MOV_R32_IMM32           = 0xb8 # b8-bf mov r32, imm32
X64_SHIFT_RM8_IMM8_GROUP    = 0xc0 # c0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, imm8
X64_SHIFT_RM32_IMM32_GROUP  = 0xc1 # c1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, imm8
X64_RET_IMM16               = 0xc2 # c2    near ret imm16
X64_RET                     = 0xc3 # c3    near ret
X64_LES_R32_MFAR32          = 0xc4 # c4    les r32, m16:32 (invalid in 64-bit)
X64_LDS_R32_MFAR32          = 0xc5 # c5    lds r32, m16:32 (invalid in 64-bit)
X64_MOV_RM8_IMM8            = 0xc6 # c6    mov r/m8, imm8
X64_MOV_RM32_IMM32          = 0xc7 # c7    mov r/m32, imm32
X64_ENTER                   = 0xc8 # c8    enter imm16, imm8
X64_LEAVE                   = 0xc9 # c9    leave
X64_RETF_IMM16              = 0xca # ca    far ret imm16
X64_RETF                    = 0xcb # cb    far ret
X64_INT3                    = 0xcc # cc    int3
X64_INT                     = 0xcd # cd    int imm8
X64_INTO                    = 0xce # ce    into (invalid in 64-bit)
X64_IRET                    = 0xcf # cf    iret
X64_SHIFT_RM8_1_GROUP       = 0xd0 # d0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, 1
X64_SHIFT_RM32_1_GROUP      = 0xd1 # d1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, 1
X64_SHIFT_RM8_CL_GROUP      = 0xd2 # d2    rol/ror/rcl/rcr/shl/rhr/sar r/m8, cl
X64_SHIFT_RM32_CL_GROUP     = 0xd3 # d3    rol/ror/rcl/rcr/shl/rhr/sar r/m32, cl
X64_AAM                     = 0xd4 # d4    aam (invalid in 64-bit)
X64_AAD                     = 0xd5 # d5    aad (invalid in 64-bit)
X64_INVALID_OPCODE_D6       = 0xd6 # d6    invalid opcode
X64_XLATB                   = 0xd7 # d7    xlatb
X64_ESC_X87                 = 0xd8 # d8-df esc (escape to x87)
X64_LOOPNZ_REL8             = 0xe0 # e0    loopnz rel8
X64_LOOPZ_REL8              = 0xe1 # e1    loopz rel8
X64_LOOP_REL8               = 0xe2 # e2    loop rel8
X64_JRCXZ_REL8              = 0xe3 # e3    jrcxz rel8
X64_IN                      = 0xe4 # e4    in al, imm8
X64_IN_AL_IMM8              = 0xe4 # e4    in al, imm8
X64_IN_EAX_IMM8             = 0xe5 # e5    in eax, imm8
X64_OUT_IMM8_AL             = 0xe6 # e6    out imm8, al
X64_OUT                     = 0xe6 # e6    out imm8, al
X64_OUT_IMM8_EAX            = 0xe7 # e7    out imm8, eax
X64_CALL_REL32              = 0xe8 # e8    call rel32
X64_JMP_REL32               = 0xe9 # e9    jmp rel32
X64_JMP_PTR32_FAR           = 0xea # ea    jmp ptr16:32 (invalid in 64-bit)
X64_JMP_REL8                = 0xeb # eb    jmp rel8
X64_IN_AL_DX                = 0xec # ec    in al, dx
X64_IN_EAX_DX               = 0xed # ed    in eax, dx
X64_OUT_DX_AL               = 0xee # ee    out dx, al
X64_OUT_DX_EAX              = 0xef # ef    out dx, eax
X64_PREFIX_LOCK             = 0xf0 # f0    lock prefix
X64_INT1                    = 0xf1 # f1    int1
X64_PREFIX_REPNE            = 0xf2 # f2    repne prefix
X64_PREFIX_REPE             = 0xf3 # f3    repe prefix
X64_HLT                     = 0xf4 # f4    hlt
X64_CMC                     = 0xf5 # f5    cmc
X64_UNARY8_GROUP            = 0xf6 # f6    test/not/neg/mul/imul/div/idiv (8-bit)
X64_UNARY32_GROUP           = 0xf7 # f7    test/not/neg/mul/imul/div/idiv (32-bit)
X64_CLC                     = 0xf8 # f8    clc
X64_STC                     = 0xf9 # f9    stc
X64_CLI                     = 0xfa # fa    cli
X64_STI                     = 0xfb # fb    sti
X64_CLD                     = 0xfc # fc    cld
X64_STD                     = 0xfd # fd    std
X64_INC_DEC_RM8_GROUP       = 0xfe # fe    inc/dec r/m8
X64_INC_DEC_RM32_GROUP      = 0xff # ff    inc/dec r/m32
X64_CALL_GROUP              = 0xff # ff    call

# ------------------------------------------------------------------------------
#               Core: One byte opcodes with hardcoded prefix
# ------------------------------------------------------------------------------

# Most opcodes works on 32-bit operands in long mode (native x64)
# as default. To achieve 16 or 64-bit version extra prefix byte is
# needed. Below values are not really new opcodes, but existing
# one byte opcodes combined with REX.W (0x48, raise to 64-bit) or
# size (0x66, decrease to 16-bit) prefix.

# Raise operand(s) width to 64-bit.
X64_CDQE   = X64_CWDE  * 256 + X64_PREFIX_REX_W
X64_CQO    = X64_CDQ   * 256 + X64_PREFIX_REX_W
X64_IRETQ  = X64_IRET  * 256 + X64_PREFIX_REX_W
X64_CMPSQ  = X64_CMPSD * 256 + X64_PREFIX_REX_W
X64_LODSQ  = X64_LODSD * 256 + X64_PREFIX_REX_W
X64_STOSQ  = X64_STOSD * 256 + X64_PREFIX_REX_W
X64_SCASQ  = X64_SCASD * 256 + X64_PREFIX_REX_W
X64_MOVSQ  = X64_MOVSD * 256 + X64_PREFIX_REX_W
X64_RETFQ  = X64_RETF  * 256 + X64_PREFIX_REX_W
X64_PUSHFQ = X64_PUSHF * 256 + X64_PREFIX_REX_W
X64_POPFQ  = X64_POPF  * 256 + X64_PREFIX_REX_W

# Decrease operand(s) width to 16-bit.
X64_CBW    = X64_CWDE  * 256 + X64_PREFIX_OPERAND_SIZE
X64_CWD    = X64_CDQ   * 256 + X64_PREFIX_OPERAND_SIZE
X64_PUSHFW = X64_PUSHF * 256 + X64_PREFIX_OPERAND_SIZE
X64_IRETW  = X64_IRET  * 256 + X64_PREFIX_OPERAND_SIZE
X64_POPFW  = X64_POPF  * 256 + X64_PREFIX_OPERAND_SIZE
X64_CMPSW  = X64_CMPSD * 256 + X64_PREFIX_OPERAND_SIZE
X64_LODSW  = X64_LODSD * 256 + X64_PREFIX_OPERAND_SIZE
X64_STOSW  = X64_STOSD * 256 + X64_PREFIX_OPERAND_SIZE
X64_SCASW  = X64_SCASD * 256 + X64_PREFIX_OPERAND_SIZE
X64_MOVSW  = X64_MOVSD * 256 + X64_PREFIX_OPERAND_SIZE
X64_INSW   = X64_INSD  * 256 + X64_PREFIX_OPERAND_SIZE
X64_OUTSW  = X64_OUTSD * 256 + X64_PREFIX_OPERAND_SIZE

# Decrease width of tested register from RCX to ECX.
X64_JECXZ_REL8   = X64_JRCXZ_REL8  * 256 + X64_PREFIX_ADDRESS_SIZE
X64_LOOPD_REL8   = X64_LOOP_REL8   * 256 + X64_PREFIX_ADDRESS_SIZE
X64_LOOPZD_REL8  = X64_LOOPZ_REL8  * 256 + X64_PREFIX_ADDRESS_SIZE
X64_LOOPNZD_REL8 = X64_LOOPNZ_REL8 * 256 + X64_PREFIX_ADDRESS_SIZE

# ------------------------------------------------------------------------------
#                           Core: Two byte opcodes
# ------------------------------------------------------------------------------

X64_GROUP_0F_00      = 0x000f # 0f 00 /0 sldt
                              # 0f 00 /1 str
                              # 0f 00 /2 lldt
                              # 0f 00 /3 ltr
                              # 0f 00 /4 verr
                              # 0f 00 /5 verw

X64_GROUP_0F_01      = 0x010f # 0f 01 /0 sgdt
                              # 0f 01 /1 sidt
                              # 0f 01 /2 lgdt
                              # 0f 01 /3 lidt
                              # 0f 01 /4 smsw
                              # 0f 01 /6 lmsw
                              # 0f 01 /7 invlpg

X64_LAR              = 0x020f # 0f 02 lar        r16,r16 | r32,r32 | r16,m16 | r32,m16
X64_LSL              = 0x030f # 0f 03 lsl        rd,rd   | rd,md
X64_SYSCALL          = 0x050f # 0f 05 syscall    -
X64_CLTS             = 0x060f # 0f 06 clts       -
X64_SYSRET           = 0x070f # 0f 07 sysret     -
X64_INVD             = 0x080f # 0f 08 invd       -
X64_WBINVD           = 0x090f # 0f 09 wbinvd     -
X64_UD2              = 0x0b0f # 0f 0b ud2        -
X64_NOP_RM           = 0x1f0f # 0f 1f nop        rd | md
X64_WRMSR            = 0x300f # 0f 30 wrmsr      -
X64_RDTSC            = 0x310f # 0f 31 rdtsc      -
X64_RDMSR            = 0x320f # 0f 32 rdmsr      -
X64_RDPMC            = 0x330f # 0f 33 rdpmc      -
X64_SYSENTER         = 0x340f # 0f 34 sysenter   -
X64_SYSEXIT          = 0x350f # 0f 35 sysexit    -

X64_CMOVO            = 0x400f # 0f 40 cmovo      rd,rd | rd,md
X64_CMOVNO           = 0x410f # 0f 41 cmovno     rd,rd | rd,md
X64_CMOVB            = 0x420f # 0f 42 cmovb      rd,rd | rd,md
X64_CMOVAE           = 0x430f # 0f 43 cmovae     rd,rd | rd,md
X64_CMOVE            = 0x440f # 0f 44 cmove      rd,rd | rd,md
X64_CMOVNE           = 0x450f # 0f 45 cmovne     rd,rd | rd,md
X64_CMOVBE           = 0x460f # 0f 46 cmovbe     rd,rd | rd,md
X64_CMOVA            = 0x470f # 0f 47 cmova      rd,rd | rd,md
X64_CMOVS            = 0x480f # 0f 48 cmovs      rd,rd | rd,md
X64_CMOVNS           = 0x490f # 0f 49 cmovns     rd,rd | rd,md
X64_CMOVP            = 0x4a0f # 0f 4a cmovp      rd,rd | rd,md
X64_CMOVNP           = 0x4b0f # 0f 4b cmovnp     rd,rd | rd,md
X64_CMOVL            = 0x4c0f # 0f 4c cmovl      rd,rd | rd,md
X64_CMOVGE           = 0x4d0f # 0f 4d cmovge     rd,rd | rd,md
X64_CMOVLE           = 0x4e0f # 0f 4e cmovle     rd,rd | rd,md
X64_CMOVG            = 0x4f0f # 0f 4f cmovg      rd,rd | rd,md

X64_SETO             = 0x900f # 0f 90 seto       r8 | m8
X64_SETNO            = 0x910f # 0f 91 setno      r8 | m8
X64_SETB             = 0x920f # 0f 92 setb       r8 | m8
X64_SETAE            = 0x930f # 0f 93 setae      r8 | m8
X64_SETE             = 0x940f # 0f 94 sete       r8 | m8
X64_SETNE            = 0x950f # 0f 95 setne      r8 | m8
X64_SETBE            = 0x960f # 0f 96 setbe      r8 | m8
X64_SETA             = 0x970f # 0f 97 seta       r8 | m8
X64_SETS             = 0x980f # 0f 98 sets       r8 | m8
X64_SETNS            = 0x990f # 0f 99 setns      r8 | m8
X64_SETP             = 0x9a0f # 0f 9a setp       r8 | m8
X64_SETNP            = 0x9b0f # 0f 9b setnp      r8 | m8
X64_SETL             = 0x9c0f # 0f 9c setl       r8 | m8
X64_SETGE            = 0x9d0f # 0f 9d setge      r8 | m8
X64_SETLE            = 0x9e0f # 0f 9e setle      r8 | m8
X64_SETG             = 0x9f0f # 0f 9f setg       r8 | m8

X64_CPUID            = 0xa20f # 0f a2 cpuid      -
X64_RSM              = 0xaa0f # 0f aa rsm        -

X64_CMPXCHG_RM8_R8   = 0xb00f # 0f b0 cmpxchg    r8,r8 | m8,r8
X64_CMPXCHG_RM32_R32 = 0xb10f # 0f b1 cmpxchg    rd,rd | md,rd

X64_LSS              = 0xb20f # 0f b2 lss        rd,md
X64_LFS              = 0xb40f # 0f b4 lfs        rd,md
X64_LGS              = 0xb50f # 0f b5 lgs        rd,md

X64_BT_RM_R          = 0xa30f # 0f a3 bt         rd,rd | md,rd
X64_BTS_RM_R         = 0xab0f # 0f ab bts        rd,rd | md,rd
X64_BTC_RM_R         = 0xbb0f # 0f bb btc        rd,rd | md,rd
X64_BTR_RM_R         = 0xb30f # 0f b3 btr        rd,rd | md,rd

X64_BT_GROUP         = 0xba0f # 0f ba /4 bt      rd,i8 | md|i8
                              # 0f ba /5 bts     rd,i8 | md|i8
                              # 0f ba /6 btr     rd,i8 | md|i8
                              # 0f ba /7 btc     rd,i8 | md|i8

X64_BSF              = 0xbc0f # 0f bc bsf        rd,rd | rd,md
X64_BSR              = 0xbd0f # 0f bd bsr        rd,rd | rd,md

X64_MOVZX_R_RM8      = 0xb60f # 0f b6 movzx      rd,r8   | rd,m8
X64_MOVZX_R_RM16     = 0xb70f # 0f b7 movzx      r32,r16 | r32,m16 | r64,r16 | r64,m16
X64_MOVSX_R_RM8      = 0xbe0f # 0f be movsx      rd,r8   | rd,m8
X64_MOVSX_R_RM16     = 0xbf0f # 0f bf movsx      r32,r16 | r32,m16 | r64,r16 | r64,m16

X64_XADD_RM8_R8      = 0xc00f # 0f c0 xadd       r8,r8   | m8,r8
X64_XADD_RM32_R32    = 0xc10f # 0f c1 xadd       rd,rd   | md,rd
X64_CMPXCHG8B        = 0xc70f # 0f c7 cmpxchg8b  m64
X64_BSWAP            = 0xc80f # 0f c8 bswap      r32     | r64

# ------------------------------------------------------------------------------
#                          Core: Three bytes opcodes
# ------------------------------------------------------------------------------

# 0f xx yy (0f is skipped)
X64_SWAPGS = 0xf801 # 0f 01 f8 swapgs -
X64_RDTSCP = 0xf901 # 0f 01 f9 rdtscp -

# 48 xx yy
X64_CMPXCHG16B = 0xc70f # 48 0f c7 cmpxchg16b m128

# ------------------------------------------------------------------------------
#                              FPU opcodes (x87)
# ------------------------------------------------------------------------------

# Opcodes without operands (opcode only).
# We may emit them as is.

X64_FNOP    = 0xd0d9  # d9 d0 fnop    -
X64_FCHS    = 0xe0d9  # d9 e0 fchs    -
X64_FABS    = 0xe1d9  # d9 e1 fabs    -
X64_FXAM    = 0xe5d9  # d9 e5 fxam    -
X64_FLD1    = 0xe8d9  # d9 e8 fld1    -
X64_FLDL2T  = 0xe9d9  # d9 e9 fldl2t  -
X64_FLDL2E  = 0xead9  # d9 ea fldl2e  -
X64_FLDPI   = 0xebd9  # d9 eb fldpi   -
X64_FLDLG2  = 0xecd9  # d9 ec fldlg2  -
X64_FLDLN2  = 0xedd9  # d9 ed fldln2  -
X64_FLDZ    = 0xeed9  # d9 ee fldz    -

X64_FTST    = 0xe4d9  # d9 e4 ftst    -
X64_F2XM1   = 0xf0d9  # d9 f0 f2xm1   -
X64_FYL2X   = 0xf1d9  # d9 f1 fyl2x   -
X64_FPTAN   = 0xf2d9  # d9 f2 fptan   -
X64_FPATAN  = 0xf3d9  # d9 f3 fnop    -
X64_FXTRACT = 0xf4d9  # d9 f4 fxtract -
X64_FPREM1  = 0xf5d9  # d9 f5 fprem1  -
X64_FDECSTP = 0xf6d9  # d9 f6 fdecstp -
X64_FINCSTP = 0xf7d9  # d9 f7 fincstp -
X64_FPREM   = 0xf8d9  # d9 f8 fprem   -
X64_FYL2XP1 = 0xf9d9  # d9 f9 fyl2xp1 -
X64_FSQRT   = 0xfad9  # d9 fa fsqrt   -
X64_FSINCOS = 0xfbd9  # d9 fb fsincos -
X64_FRNDINT = 0xfcd9  # d9 fc frndint -
X64_FSCALE  = 0xfdd9  # d9 fd fscale  -
X64_FSIN    = 0xfed9  # d9 fe fsin    -
X64_FCOS    = 0xffd9  # d9 ff fcos    -

X64_FUCOMPP = 0xe9da  # da e9 fucompp -
X64_FNCLEX  = 0xe2db  # db e2 fnclex  -
X64_FNINIT  = 0xe3db  # db e3 fninit  -
X64_FCOMPP  = 0xd9de  # de d9 fcompp  -

# Opcodes with one memory operand: xx /y
# Reg-Mod-R/M stores operation id in Mod part.
# Below values are not really opcodes, but masks conaining
# primary opcode and Mod part combined together.

X64_FLDENV         = 0x04d9   # d9 /4   fldenv  m224
X64_FLDCW          = 0x05d9   # d9 /5   fldcw   m16
X64_FNSTENV        = 0x06d9   # d9 /6   fnstenv m112/224
X64_FNSTCW         = 0x07d9   # d9 /7   fnstcw  m16
X64_FRSTOR         = 0x04dd   # dd /4   frstor  m864
X64_FNSAVE         = 0x06dd   # dd /6   fnsave  m864
X64_FBLD           = 0x04df   # df /4   fbld    m80
X64_FBSTP          = 0x06df   # df /6   fbstp   m80

X64_FLD            = 0x00d9   # d9 /0   fld     m32
X64_FLD_M32        = 0x00d9   # d9 /0   fld     m32
X64_FLD_M64        = 0x00dd   # dd /0   fld     m64
X64_FLD_M80        = 0x05db   # db /5   fld     m80

X64_FST            = 0x02d9   # d9 /2   fst     m32
X64_FST_M32        = 0x02d9   # d9 /2   fst     m32
X64_FST_M64        = 0x02dd   # dd /2   fst     m64

X64_FSTP           = 0x03d9   # d9 /3   fstp    m32
X64_FSTP_M32       = 0x03d9   # d9 /3   fstp    m32
X64_FSTP_M64       = 0x03dd   # dd /3   fstp    m64
X64_FSTP_M80       = 0x07db   # d9 /3   fstp    m80

X64_FILD_M16       = 0x00df   # df /0   fild    m16
X64_FILD_M32       = 0x00db   # db /0   fild    m32
X64_FILD_M64       = 0x05df   # df /5   fild    m64

X64_FISTTP_M16     = 0x01df   # df /1   fisttp  m16
X64_FISTTP_M32     = 0x01db   # db /1   fisttp  m32
X64_FISTTP_M64     = 0x01dd   # dd /1   fisttp  m64

X64_FIST_M16       = 0x02df   # df /2   fist    m16
X64_FIST_M32       = 0x02db   # db /2   fist    m32

X64_FISTP_M16      = 0x03df   # df /3   fistp   m16
X64_FISTP_M32      = 0x03db   # db /3   fistp   m32
X64_FISTP_M64      = 0x07df   # df /7   fistp   m64

X64_FIADD_M16      = 0x00de   # de /0   fiadd   m16
X64_FIMUL_M16      = 0x01de   # de /1   fimul   m16
X64_FICOM_M16      = 0x02de   # de /2   ficom   m16
X64_FICOMP_M16     = 0x03de   # de /3   ficomp  m16
X64_FISUB_M16      = 0x04de   # de /4   fisub   m16
X64_FISUBR_M16     = 0x05de   # de /5   fisubr  m16
X64_FIDIV_M16      = 0x06de   # de /6   fidiv   m16
X64_FIDIVR_M16     = 0x07de   # de /7   fidivr  m16

X64_FIADD_M32      = 0x00da   # da /0   fiadd   m32
X64_FIMUL_M32      = 0x01da   # da /1   fimul   m32
X64_FICOM_M32      = 0x02da   # da /2   ficom   m32
X64_FICOMP_M32     = 0x03da   # da /3   ficomp  m32
X64_FISUB_M32      = 0x04da   # da /4   fisub   m32
X64_FISUBR_M32     = 0x05da   # da /5   fisubr  m32
X64_FIDIV_M32      = 0x06da   # da /6   fidiv   m32
X64_FIDIVR_M32     = 0x07da   # da /7   fidivr  m32

X64_FADD_ST0_STI   = 0xc0d8   # d8 c0+i fadd  st0,sti
X64_FADD_STI_ST0   = 0xc0dc   # dc c0+i fadd  sti,st0
X64_FADD_M32       = 0x00d8   # d8 /0   fadd  m32
X64_FADD_M64       = 0x00dc   # dc /0   fadd  m64

X64_FMUL_ST0_STI   = 0xc8d8   # d8 c8+i fmul  st0,sti
X64_FMUL_STI_ST0   = 0xc8dc   # dc c8+i fmul  sti,st0
X64_FMUL_M32       = 0x01d8   # d8 /1   fmul  m32
X64_FMUL_M64       = 0x01dc   # dc /1   fmul  m64

X64_FSUB_ST0_STI   = 0xe0d8   # d8 e0+i fsub  st0,sti
X64_FSUB_STI_ST0   = 0xe8dc   # dc e8+i fsub  sti,st0
X64_FSUB_M32       = 0x04d8   # d8 /4   fsub  m32
X64_FSUB_M64       = 0x04dc   # dc /4   fsub  m64

X64_FSUBR_ST0_STI  = 0xe8d8   # d8 e8+i fsubr st0,sti
X64_FSUBR_STI_ST0  = 0xe0dc   # dc e0+i fsubr sti,st0
X64_FSUBR_M32      = 0x05d8   # d8 /5   fsubr m32
X64_FSUBR_M64      = 0x05dc   # dc /5   fsubr m64

X64_FDIV_ST0_STI   = 0xf0d8   # d8 f0+i fdiv  st0,sti
X64_FDIV_STI_ST0   = 0xf8dc   # dc f8+i fdiv  sti,st0
X64_FDIV_M32       = 0x06d8   # d8 /6   fdiv  m32
X64_FDIV_M64       = 0x06dc   # dc /6   fdiv  m64

X64_FDIVR_ST0_STI  = 0xf8d8   # d8 f8+i fdivr st0,sti
X64_FDIVR_STI_ST0  = 0xf0dc   # dc f0+i fdivr sti,st0
X64_FDIVR_M32      = 0x07d8   # d8 /7   fdivr m32
X64_FDIVR_M64      = 0x07dc   # dc /7   fdivr m64

X64_FADDP_STI_ST0  = 0xc0de   # de c0+i faddp  sti,st0
X64_FADDP_ST1_ST0  = 0xc1de   # de c1   faddp  -

X64_FMULP_STI_ST0  = 0xc8de   # de c8+i fmulp  sti,st0
X64_FMULP_ST1_ST0  = 0xc9de   # de c9   fmulp  -

X64_FSUBRP_STI_ST0 = 0xe0de   # de e0+i fsubrp sti,st0
X64_FSUBRP_ST1_ST0 = 0xe1de   # de e1   fsubrp -

X64_FSUBP_STI_ST0  = 0xe8de   # de e8+i fsubp  sti,st0
X64_FSUBP_ST1_ST0  = 0xe9de   # de e9   fsubp  -

X64_FDIVRP_STI_ST0 = 0xf0de   # de f0+i fdivrp sti,st0
X64_FDIVRP_ST1_ST0 = 0xf1de   # de f1   fdivrp -

X64_FDIVP_STI_ST0  = 0xf8de   # de f8+i fdivp  sti,st0
X64_FDIVP_ST1_ST0  = 0xf9de   # de f9   fdivp  -

X64_FCMOVB         = 0xc0da   # da c0+i fcmovb   st0, sti
X64_FCMOVE         = 0xc8da   # da c8+i fcmove   st0, sti
X64_FCMOVBE        = 0xd0da   # da d0+i fcmovbe  st0, sti
X64_FCMOVU         = 0xd8da   # da d8+i fcmovu   st0, sti
X64_FCMOVNB        = 0xc0db   # db c0+i fcmovnb  st0, sti
X64_FCMOVNE        = 0xc8db   # db c8+i fcmovne  st0, sti
X64_FCMOVNBE       = 0xd0db   # db d0+i fcmovnbe st0, sti
X64_FCMOVNU        = 0xd8db   # db d8+i fcmovnu  st0, sti

X64_FCOM_M32       = 0x02d8   # d8 /2   fcom    m32
X64_FCOM_M64       = 0x02dc   # dc /2   fcom    m64
X64_FCOM_STI       = 0xd0d8   # d8 d0+i fcom    sti
X64_FCOM_ST1       = 0xd1d8   # d8 d1   fcom    -

X64_FCOMP_M32      = 0x03d8   # d8 /3   fcomp   m32
X64_FCOMP_M64      = 0x03dc   # dc /3   fcomp   m64
X64_FCOMP_STI      = 0xd8d8   # d8 d8+i fcomp   sti
X64_FCOMP_ST1      = 0xd9d8   # d8 d9   fcomp   -

X64_FUCOM_STI      = 0xe0dd   # dd e0+i fucom   sti
X64_FUCOM_ST1      = 0xe1dd   # dd e1   fucom   -

X64_FUCOMP_STI     = 0xe8dd   # dd e8+i fucomp  sti
X64_FUCOMP_ST1     = 0xe9dd   # dd e9   fucomp  -

X64_FXCH_STI       = 0xc8d9   # d9 c8+i fxch    sti
X64_FXCH_ST1       = 0xc9d9   # d9 c9   fxch    -

X64_FLD_STI        = 0xc0d9   # df f0+i fld     sti
X64_FCOMI          = 0xf0db   # db f0+i fcomi   st0,sti
X64_FUCOMI         = 0xe8db   # db e8+i fucomi  st0,sti
X64_FFREE_STI      = 0xc0dd   # dd c0+i ffree   sti
X64_FST_STI        = 0xd0dd   # dd d0+i fst     sti
X64_FSTP_STI       = 0xd8dd   # dd d8+i fstp    sti
X64_FUCOMIP        = 0xe8df   # df e8+i fucomip st0,sti
X64_FCOMIP         = 0xf0df   # df f0+i fcomip  st0,sti

X64_FNSTSW_M16     = 0x07dd   # dd 07   fnstsw m16
X64_FNSTSW_AX      = 0xe0df   # df e0   fnstsw ax

X64_GROUP_STATE    = 0xae0f   # 0f ae
X64_FXSAVE         = 0xf0ae0f # 0f ae /0 fxsave  m4096
X64_FXRSTOR        = 0x01ae0f # 0f ae /1 fxrstor m4096

X64_GROUP_ST0_STI  = 0xd8
X64_GROUP_STI_ST0  = 0xdc
X64_GROUP_M32REAL  = 0xd8
X64_GROUP_M64REAL  = 0xdc

# ------------------------------------------------------------------------------
#                    FPU: Opcodes with hardcoded prefix
# ------------------------------------------------------------------------------

# FWAIT prefix (it's the same opcode as WAIT).
# Used to check pending unmasked floating-point exceptions.
# FWAIT + fnxxx gives fxxx.
# fnxxx means fpu no-wait xxx opcode.
# fxxx  means the same opcode prefixed with FWAIT.
#
# EXAMPLE:
#   fnclex    db e2 (no-wait)
#   fclex  9b db e2 (wait and then fnclex)

X64_FWAIT = 0x9b

# Add fwait before opcode.
# Example:
#   fnsave - store FPU state (no-wait)          : dd /6
#   fsave  - wait (9b) and then store FPU state : 9b dd /6

X64_FSTENV    = X64_FWAIT + 256 * X64_FNSTENV    # fstenv m224
X64_FSAVE     = X64_FWAIT + 256 * X64_FNSAVE     # fsave  m864
X64_FSTCW     = X64_FWAIT + 256 * X64_FNSTCW     # fstcw  m16
X64_FCLEX     = X64_FWAIT + 256 * X64_FNCLEX     # fclex  -
X64_FINIT     = X64_FWAIT + 256 * X64_FNINIT     # finit  -
X64_FSTSW_M16 = X64_FWAIT + 256 * X64_FNSTSW_M16 # fstsw m16
X64_FSTSW_AX  = X64_FWAIT + 256 * X64_FNSTSW_AX  # fstsw ax

# Some FPU opcodes have two memory variants ("smaller" and "larger").
# Operand size prefix is used to select, which version we want to use.
# Example:
#   fldenv  m224 :    d9 /4
#   fldenvw m112 : 66 d9 /4

X64_FLDENVW   = X64_PREFIX_OPERAND_SIZE + 256 * X64_FLDENV  # fldenvw  m112
X64_FNSTENVW  = X64_PREFIX_OPERAND_SIZE + 256 * X64_FNSTENV # fnstepnw m112
X64_FRSTORW   = X64_PREFIX_OPERAND_SIZE + 256 * X64_FRSTOR  # frstorw  m752
X64_FNSAVEW   = X64_PREFIX_OPERAND_SIZE + 256 * X64_FNSAVE  # fnsavew  m752

# Both fwait (9b) and operand size prefix (66).
X64_FSTENVW   = X64_FWAIT + 256 * X64_PREFIX_OPERAND_SIZE + 65536 * X64_FNSTENV # fstenvw m112
X64_FSAVEW    = X64_FWAIT + 256 * X64_PREFIX_OPERAND_SIZE + 65536 * X64_FNSAVE  # fstenvw m752

# ------------------------------------------------------------------------------
#                                 MMX opcodes
# ------------------------------------------------------------------------------

X64_PSHUFB        = 0x00380f  # 0f 38 00 /r  pshufb    mm,mm   | mm,m64
X64_PHADDW        = 0x01380f  # 0f 38 01 /r  phaddw    mm,mm   | mm,m64
X64_PHADDD        = 0x02380f  # 0f 38 02 /r  phaddd    mm,mm   | mm,m64
X64_PHADDSW       = 0x03380f  # 0f 38 03 /r  phaddsw   mm,mm   | mm,m64
X64_PMADDUBSW     = 0x04380f  # 0f 38 04 /r  pmaddubsw mm,mm   | mm,m64
X64_PHSUBW        = 0x05380f  # 0f 38 05 /r  phsubw    mm,mm   | mm,m64
X64_PHSUBD        = 0x06380f  # 0f 38 06 /r  phsubd    mm,mm   | mm,m64
X64_PHSUBSW       = 0x07380f  # 0f 38 07 /r  phsubsw   mm,mm   | mm,m64
X64_PSIGNB        = 0x08380f  # 0f 38 08 /r  psignb    mm,mm   | mm,m64
X64_PSIGNW        = 0x09380f  # 0f 38 09 /r  psignw    mm,mm   | mm,m64
X64_PSIGND        = 0x0a380f  # 0f 38 0a /r  psignd    mm,mm   | mm,m64
X64_PMULHRSW      = 0x0b380f  # 0f 38 0b /r  pmulhrsw  mm,mm   | mm,m64
X64_PABSB         = 0x1c380f  # 0f 38 1c /r  pabsb     mm,mm   | mm,m64
X64_PABSW         = 0x1d380f  # 0f 38 1d /r  pabsw     mm,mm   | mm,m64
X64_PABSD         = 0x1e380f  # 0f 38 1e /r  pabsd     mm,mm   | mm,m64

X64_PUNPCKLBW     = 0x600f    # 0f 60 /r     punpcklbw mm,mm   | mm,m64
X64_PUNPCKLWD     = 0x610f    # 0f 61 /r     punpcklwd mm,mm   | mm,m64
X64_PUNPCKLDQ     = 0x620f    # 0f 62 /r     punpckldq mm,mm   | mm,m64
X64_PACKSSWB      = 0x630f    # 0f 63 /r     packsswb  mm,mm   | mm,m64
X64_PCMPGTB       = 0x640f    # 0f 64 /r     pcmpgtb   mm,mm   | mm,m64
X64_PCMPGTW       = 0x650f    # 0f 65 /r     pcmpgtw   mm,mm   | mm,m64
X64_PCMPGTD       = 0x660f    # 0f 66 /r     pcmpgtd   mm,mm   | mm,m64
X64_PACKUSWB      = 0x670f    # 0f 67 /r     packuswb  mm,mm   | mm,m64
X64_PUNPCKHBW     = 0x680f    # 0f 68 /r     punpckhbw mm,mm   | mm,m64
X64_PUNPCKHWD     = 0x690f    # 0f 69 /r     punpckhwd mm,mm   | mm,m64
X64_PUNPCKHDQ     = 0x6a0f    # 0f 6a /r     punpckhdq mm,mm   | mm,m64
X64_PACKSSDW      = 0x6b0f    # 0f 6b /r     packssdw  mm,mm   | mm,m64
X64_MOVD_MM_RM32  = 0x6e0f    # 0f 6e /r     movd              | mm,m32 | mm,r32
X64_MOVQ_MM_M64   = 0x6f0f    # 0f 6f /r     movq      mm,mm   | mm,m64
X64_PSRLW_MM_IMM8 = 0x02710f  # 0f 71 /2     psrlw     mm,imm8
X64_PSRAW_MM_IMM8 = 0x04710f  # 0f 71 /4     psraw     mm,imm8
X64_PSLLW_MM_IMM8 = 0x06710f  # 0f 71 /6     psllw     mm,imm8
X64_PSRLD_MM_IMM8 = 0x02720f  # 0f 72 /2     psrld     mm,imm8
X64_PSRAD_MM_IMM8 = 0x04720f  # 0f 72 /4     psrad     mm,imm8
X64_PSLLD_MM_IMM8 = 0x06720f  # 0f 72 /6     pslld     mm,imm8
X64_PSRLQ_MM_IMM8 = 0x02730f  # 0f 73 /2     psrlq     mm,imm8
X64_PSLLQ_MM_IMM8 = 0x06730f  # 0f 73 /6     psllq     mm,imm8
X64_PCMPEQB       = 0x740f    # 0f 74 /r     pcmpeqb   mm,mm   | mm,m64
X64_PCMPEQW       = 0x750f    # 0f 75 /r     pcmpeqw   mm,mm   | mm,m64
X64_PCMPEQD       = 0x760f    # 0f 76 /r     pcmpeqd   mm,mm   | mm,m64
X64_EMMS          = 0x770f    # 0f 77        emms      -
X64_MOVD_RM32_MM  = 0x7e0f    # 0f 7e /r     movd                r32,mm | m32,mm
X64_MOVQ_M64_MM   = 0x7f0f    # 0f 7f /r     movq      mm,mm   | m64,mm
X64_PSRLW_MM_M64  = 0xd10f    # 0f d1 /r     psrlw     mm,mm   | mm,m64
X64_PSRLD_MM_M64  = 0xd20f    # 0f d2 /r     psrld     mm,mm   | mm,m64
X64_PSRLQ_MM_M64  = 0xd30f    # 0f d3 /r     psrlq     mm,mm   | mm,m64
X64_PADDQ         = 0xd40f    # 0f d4 /r     paddq     mm,mm   | mm,m64
X64_PMULLW        = 0xd50f    # 0f d5 /r     pmullw    mm,mm   | mm,m64
X64_PSUBUSB       = 0xd80f    # 0f d8 /r     psubusb   mm,mm   | mm,m64
X64_PSUBUSW       = 0xd90f    # 0f d9 /r     psubusw   mm,mm   | mm,m64
X64_PMINUB        = 0xda0f    # 0f da /r     pminub    mm,mm   | mm,m64
X64_PAND          = 0xdb0f    # 0f db /r     pand      mm,mm   | mm,m64
X64_PADDUSB       = 0xdc0f    # 0f dc /r     paddusb   mm,mm   | mm,m64
X64_PADDUSW       = 0xdd0f    # 0f dd /r     paddusw   mm,mm   | mm,m64
X64_PMAXUB        = 0xde0f    # 0f de /r     pmaxub    mm,mm   | mm,m64
X64_PANDN         = 0xdf0f    # 0f df /r     pandn     mm,mm   | mm,m64
X64_PAVGB         = 0xe00f    # 0f e0 /r     pavgb     mm,mm   | mm,m64
X64_PAVGW         = 0xe30f    # 0f e3 /r     pavgw     mm,mm   | mm,m64
X64_PMULHUW       = 0xe40f    # 0f e4 /r     pmulhuw   mm,mm   | mm,m64
X64_PSRAW_MM_M64  = 0xe10f    # 0f e1 /r     psraw     mm,mm   | mm,m64
X64_PSRAD_MM_M64  = 0xe20f    # 0f e2 /r     psrad     mm,mm   | mm,m64
X64_PMULHW        = 0xe50f    # 0f e5 /r     pmulhw    mm,mm   | mm,m64
X64_PSUBSB        = 0xe80f    # 0f e8 /r     psubsb    mm,mm   | mm,m64
X64_PSUBSW        = 0xe90f    # 0f e9 /r     psubsw    mm,mm   | mm,m64
X64_PMINSW        = 0xea0f    # 0f ea /r     pminsw    mm,mm   | mm,m64
X64_POR           = 0xeb0f    # 0f eb /r     por       mm,mm   | mm,m64
X64_PADDSB        = 0xec0f    # 0f ec /r     paddsb    mm,mm   | mm,m64
X64_PADDSW        = 0xed0f    # 0f ed /r     paddsw    mm,mm   | mm,m64
X64_PMAXSW        = 0xee0f    # 0f ee /r     pmaxsw    mm,mm   | mm,m64
X64_PXOR          = 0xef0f    # 0f ef /r     pxor      mm,mm   | mm,m64
X64_PSLLW         = 0xf10f    # 0f f1 /r     psllw     mm,mm   | mm,m64
X64_PSLLD         = 0xf20f    # 0f f2 /r     pslld     mm,mm   | mm,m64
X64_PSLLQ         = 0xf30f    # 0f f3 /r     psllq     mm,mm   | mm,m64
X64_PMULUDQ       = 0xf40f    # 0f f4 /r     pmuludq   mm,mm   | mm,m64
X64_PMADDWD       = 0xf50f    # 0f f5 /r     pmaddwd   mm,mm   | mm,m64
X64_PSADBW        = 0xf60f    # 0f f6 /r     psadbw    mm,mm   | mm,m64
X64_PSUBB         = 0xf80f    # 0f f8 /r     psubb     mm,mm   | mm,m64
X64_PSUBW         = 0xf90f    # 0f f9 /r     psubw     mm,mm   | mm,m64
X64_PSUBD         = 0xfa0f    # 0f fa /r     psubd     mm,mm   | mm,m64
X64_PSUBQ         = 0xfb0f    # 0f fb /r     psubq     mm,mm   | mm,m64
X64_PADDB         = 0xfc0f    # 0f fc /r     paddb     mm,mm   | mm,m64
X64_PADDW         = 0xfd0f    # 0f fd /r     paddw     mm,mm   | mm,m64
X64_PADDD         = 0xfe0f    # 0f fe /r     paddd     mm,mm   | mm,m64

# ------------------------------------------------------------------------------
#                                  Registers
# ------------------------------------------------------------------------------

# Registers: 8-bit
X64_AL   = 0
X64_CL   = 1
X64_DL   = 2
X64_BL   = 3
X64_AH   = 4
X64_CH   = 5
X64_DH   = 6
X64_BH   = 7
X64_R8B  = 8
X64_R9B  = 9
X64_R10B = 10
X64_R11B = 11
X64_R12B = 12
X64_R13B = 13
X64_R14B = 14
X64_R15B = 15

# Registers: 16-bit
X64_AX   = 16 + 0
X64_CX   = 16 + 1
X64_DX   = 16 + 2
X64_BX   = 16 + 3
X64_SP   = 16 + 4
X64_BP   = 16 + 5
X64_SI   = 16 + 6
X64_DI   = 16 + 7
X64_R8W  = 16 + 8
X64_R9W  = 16 + 9
X64_R10W = 16 + 10
X64_R11W = 16 + 11
X64_R12W = 16 + 12
X64_R13W = 16 + 13
X64_R14W = 16 + 14
X64_R15W = 16 + 15

# Registers: 32-bit
X64_EAX  = 16 * 2 + 0
X64_ECX  = 16 * 2 + 1
X64_EDX  = 16 * 2 + 2
X64_EBX  = 16 * 2 + 3
X64_ESP  = 16 * 2 + 4
X64_EBP  = 16 * 2 + 5
X64_ESI  = 16 * 2 + 6
X64_EDI  = 16 * 2 + 7
X64_R8D  = 16 * 2 + 8
X64_R9D  = 16 * 2 + 9
X64_R10D = 16 * 2 + 10
X64_R11D = 16 * 2 + 11
X64_R12D = 16 * 2 + 12
X64_R13D = 16 * 2 + 13
X64_R14D = 16 * 2 + 14
X64_R15D = 16 * 2 + 15

# Registers: 64-bit
X64_RAX = 16 * 3 + 0
X64_RCX = 16 * 3 + 1
X64_RDX = 16 * 3 + 2
X64_RBX = 16 * 3 + 3
X64_RSP = 16 * 3 + 4
X64_RBP = 16 * 3 + 5
X64_RSI = 16 * 3 + 6
X64_RDI = 16 * 3 + 7
X64_R8  = 16 * 3 + 8
X64_R9  = 16 * 3 + 9
X64_R10 = 16 * 3 + 10
X64_R11 = 16 * 3 + 11
X64_R12 = 16 * 3 + 12
X64_R13 = 16 * 3 + 13
X64_R14 = 16 * 3 + 14
X64_R15 = 16 * 3 + 15

# Registers: ST0-ST7 (FPU)
X64_ST0 = 16 * 4 + 0
X64_ST1 = 16 * 4 + 1
X64_ST2 = 16 * 4 + 2
X64_ST3 = 16 * 4 + 3
X64_ST4 = 16 * 4 + 4
X64_ST5 = 16 * 4 + 5
X64_ST6 = 16 * 4 + 6
X64_ST7 = 16 * 4 + 7

X64_RIP = 100

# ------------------------------------------------------------------------------
#                              Mod-Reg-R/M byte
# ------------------------------------------------------------------------------

# http://www.c-jump.com/CIS77/CPU/x86/lecture.html
X64_MOD_INDIRECT = 0
X64_MOD_DISP8    = 1
X64_MOD_DISP32   = 2
X64_MOD_REGISTER = 3

X64_DIRECTION_SRC_DST      = 0
X64_DIRECTION_DST_SRC      = 1
X64_DIRECTION_WRITE_MEMORY = 0
X64_DIRECTION_READ_MEMORY  = 1

X64_SIZE8        = 0
X64_SIZE16_32_64 = 1

# R/M = RSP = 100 = Scaled Index Base (SIB) mode
# R/M = RBP = 101 = [rip + disp32]
X64_RM_SIB_MODE      = 4
X64_RM_RIP_DISP_MODE = 5
X64_SIB_BASE_NONE    = 5

# ------------------------------------------------------------------------------
#                          Scaled Index Byte (SIB)
# ------------------------------------------------------------------------------

X64_SCALE1 = 0
X64_SCALE2 = 1
X64_SCALE4 = 2
X64_SCALE8 = 3

# ------------------------------------------------------------------------------
#                            Names of registers
# ------------------------------------------------------------------------------

const X64_REGISTER_NAMES = [
  'al'  , 'cl'  , 'dl'   , 'bl'   , 'ah'   , 'ch'   , 'dh'   , 'bh',   # 00-07
  'r8l' , 'r9l' , 'r10l' , 'r11l' , 'r12l' , 'r13l' , 'r14l' , 'r15l', # 08-0f
  'ax'  , 'cx'  , 'dx'   , 'bx'   , 'sp'   , 'bp'   , 'si'   , 'di',   # 10-17
  'r8w' , 'r9w' , 'r10w' , 'r11w' , 'r12w' , 'r13w' , 'r14w' , 'r15w', # 18-1f
  'eax' , 'ecx' , 'edx'  , 'ebx'  , 'esp'  , 'ebp'  , 'esi'  , 'edi',  # 20-27
  'r8d' , 'r9d' , 'r10d' , 'r11d' , 'r12d' , 'r13d' , 'r14d' , 'r15d', # 28-2f
  'rax' , 'rcx' , 'rdx'  , 'rbx'  , 'rsp'  , 'rbp'  , 'rsi'  , 'rdi',  # 30-37
  'r8'  , 'r9'  , 'r10'  , 'r11'  , 'r12'  , 'r13'  , 'r14'  , 'r15',  # 38-3f
  'st0' , 'st1' , 'st2'  , 'st3'  , 'st4'  , 'st5'  , 'st6'  , 'st7',  # 40-47
  'mm0' , 'mm1' , 'mm2'  , 'mm3'  , 'mm4'  , 'mm5'  , 'mm6'  , 'mm7'   # 48-4f
]

# TODO: Don't build this map at runtime.
# TODO: Use for indexes.
X64_REGISTER_NAMES_MAP = {}
regId = 0
for values regName in X64_REGISTER_NAMES
  X64_REGISTER_NAMES_MAP[regName] = regId
  regId = regId + 1
endfor
X64_REGISTER_NAMES_MAP['rip'] = X64_RIP

# Special case: map 'st' to st0.
X64_REGISTER_NAMES_MAP['st'] = X64_ST0

# ------------------------------------------------------------------------------
#                                Util functions
# ------------------------------------------------------------------------------

function X64_ParseRegisterName(name) -> regId
  global X64_REGISTER_NAMES_MAP
  regId = -1
  if typeof(name) is 'string'
    regId = X64_REGISTER_NAMES_MAP[name]
    if regId is undefined
      regId = -1
    endif
  endif
endfunction

function X64_IsReg8(regId) -> rv
  rv = (regId // 16) is 0
endfunction

function X64_IsReg16(regId) -> rv
  rv = (regId // 16) is 1
endfunction

function X64_IsReg32(regId) -> rv
  rv = (regId // 16) is 2
endfunction

function X64_IsReg64(regId) -> rv
  rv = (regId // 16) is 3
endfunction

function X64_IsRegSTI(regId) -> rv
  rv = (regId // 8) is 8
endfunction

function X64_IsRegMM(regId) -> rv
  rv = (regId // 8) is 9
endfunction
