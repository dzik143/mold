################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'x86.mold'
import 'AbstractDescentParser.mold'
import '../../Libs/BitwiseHack.mold'

const ParserAssemblerX86_PoolOfMnemonics = [
  'call',
  'callf',
  'enter',
  'fwait',
  'in',
  'insb',
  'insd',
  'insq',
  'insw',
  'int',
  'jmp',
  'jrcxz',
  'jxx',
  'lea',
  'leave',
  'loop',
  'loopnz',
  'loopz',
  'rcl',
  'rcr',
  'ret',
  'retn',
  'rhr',
  'rol',
  'ror',
  'sar',
  'shl',
  'test',
  'xchg',
  'xlat'
]

PARSER_X64_DATA_SIZE_MAP = {
  'byte': 1,
  'word': 2,
  'dword': 4,
  'qword': 8
}

class ParserAssemblerX64 extends AbstractDescentParser
  method constructor()
    super()
    this.labelsMap = {}
    this.numberOfUnresolvedLabels = 0
  endmethod

  method _emitLabel(name)
    this.labelsMap[name] = str(this.outputObject.getCurrentPosition())
    print 'Collected label [', name, ']'
    #this._emitOneItem({
    #  'type': 'label',
    #  'name': name
    #})
  endmethod

  method _getToken() -> rv
    this._skipWhites()

    # TODO: Crash without concatenation.
    rv = '' + this._matchLetterOrDigit()

    while this._isLetterOrDigit(this.lookupBuffer) is true
      rv = rv + this._getChar()
    endwhile

    # TODO: Clean up this mess.
    # Resolve label if any.
    resolvedLabel = this.labelsMap[rv]
    if resolvedLabel is defined
      rv = resolvedLabel
    endif

    this._skipWhites()
  endmethod

  method _matchMemory(instruction)
    this._skipWhites()

    disp  = 0
    scale = -1
    index = -1
    base  = -1

    this._matchChar('[')
    token = this._getToken()

    # TODO: Clean up this mess.
    if this._isDigit(token[0]) is true
      if this.lookupBuffer is '*'
        # [ scale * index ]
        this._getChar()
        scale = parseInteger(token)
        index = this._getToken()

        if this.lookupBuffer is '+'
          # [ scale * index + ... ]
          this._getChar()
          token = this._getToken()

          if this._isDigit(token[0]) is true
            # [ scale * index + disp ]
            disp = parseInteger(token)
          else
            base = token
          endif
        endif
      else
        # [ disp ]
        disp = parseInteger(token)
      endif

    elif this.lookupBuffer is ']'
      # [ base ]
      base = token

    elif this.lookupBuffer is '-'
      # [ base - disp ]
      this._getChar()
      base = token
      disp = - parseInteger(this._getToken())

    elif this.lookupBuffer is '+'
      # [ base + ... ]
      this._getChar()
      base  = token
      token = this._getToken()

      if this.lookupBuffer is '*'
        # [ base + scale * index ]
        this._getChar()
        scale = parseInteger(token)
        index = this._getToken()

        if this.lookupBuffer is '+'
          # [ base + scale * index + disp ]
          this._getChar()
          disp = parseInteger(this._getToken())

        elif this.lookupBuffer is '-'
          # [ base + scale * index - disp ]
          this._getChar()
          disp = - parseInteger(this._getToken())
        endif

      elif this._isDigit(token[0]) is true
        # [ base + disp ]
        disp = parseInteger(token)

      else
        # [ base + index ]
        index = token
        scale = 1

        if this.lookupBuffer is '+'
          # [ base + index + disp ]
          this._getChar()
          disp = parseInteger(this._getToken())

        elif this.lookupBuffer is '-'
          # [ base + index - disp ]
          this._getChar()
          disp = - parseInteger(this._getToken())
        endif
      endif
    endif

    this._skipWhites()
    this._matchChar(']')
    this._skipWhites()

    instruction.base  = base
    instruction.scale = scale
    instruction.index = index
    instruction.disp  = disp

    if instruction.reg is undefined
      # This is the first operand, so we write to memory.
      instruction.isWriteToMemory = true
    endif
  endmethod

  method _matchOperand(instruction)
    global PARSER_X64_DATA_SIZE_MAP

    # TODO: Handle float numbers.
    rv = {}

    token = this._getToken()

    if this._isDigit(token[0]) is true
      # Immediate value.
      instruction.imm = parseInteger(token)

    else
      dataSize = PARSER_X64_DATA_SIZE_MAP[token]

      if dataSize is defined
        # Memory access.
        instruction.dataSize = dataSize
        this._matchMemory(instruction)

      else
        # Treat as register.
        if instruction.reg is defined
          # Second operand.
          instruction.rm = token
        else
          # First operand.
          instruction.reg = token
        endif
      endif
    endif
  endmethod

  method _matchEndOfLine()
    this._skipWhites()

    # Eat comment if any.
    if this._isEndOfLine(this.lookupBuffer) is true
      # Eat end of line.
      this._getChar()
    else
      # Error - new line expected, but something different found.
      this._error('unexpected content')
    endif
  endmethod

  method _parseFirstOperand(instruction)
    if this._isEndOfLine(this.lookupBuffer) is false
      this._matchOperand(instruction)
    endif
  endmethod

  method _parseSecondOperand(instruction)
    if this.lookupBuffer is ','
      this._getChar()
      this._matchOperand(instruction)
    endif
  endmethod

  method _matchCodeLine(mnemonic)
    newItem = {
      'type': 'instruction',
      'mnemonic': mnemonic
    }

    this._parseFirstOperand(newItem)
    this._parseSecondOperand(newItem)
    this._emitOneItem(newItem)
  endmethod

  method _skipComment()
    c = this.lookupBuffer
    if c is ';'
      this._getChar()
      #comment = ''
      #c       = ''
      # Eat all input until end of line.
      while this._isEndOfLine(c) is false
        #comment = comment + c
        c = this._getChar()
      endwhile

      #print '[COMMENT:', comment, ']'
    endif
  endmethod

  method _parseLine()
    this._skipWhites()
    this._skipComment()

    if this._isEndOfLine(this.lookupBuffer) is true
      # Empty line.
      # Do nothing.

    else
      # Non-empty line.
      # Get one token first to check what to do next.
      token = this._getToken()

      if this.lookupBuffer is ':'
        # Label line.
        this._getChar()
        this._emitLabel(token)

      else
        # Code line.
        this._matchCodeLine(token)
      endif
    endif

    # Go to next line.
    this._skipWhites()
    this._skipComment()
    this._matchEndOfLine()
  endmethod

  method _parseSource()
    while ord(this.lookupBuffer) isnt 0
      this._parseLine()
    endwhile
  endmethod
endclass
