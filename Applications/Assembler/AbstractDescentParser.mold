################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

class AbstractDescentParser
  # ----------------------------------------------------------------------------
  #                                  Init code
  # ----------------------------------------------------------------------------

  method constructor()
    this.outputObject = false
    this.lookupBuffer = ' '
    this.f            = 0
  endmethod

  # ----------------------------------------------------------------------------
  #                Internal implementation: error handling
  # ----------------------------------------------------------------------------

  method _error(msg) -> rv
    die('error: ' ~ this.path ~ ': ' ~ str(msg))
    rv = -1
  endmethod

  # ----------------------------------------------------------------------------
  #           Internal implementation: lookup one-character buffer
  # ----------------------------------------------------------------------------

  method _getChar() -> rv
    rv = this.lookupBuffer
    this.lookupBuffer = FileReadChar(this.f)
  endmethod

  method _skipWhites()
    while this.lookupBuffer is ' '
      this._getChar()
    endwhile
  endmethod

  method _isLetter(x) -> rv
    v  = ord(x)
    rv = ((v >= 65) and (v <= 90)) or ((v >= 97) and (v <= 122))
  endmethod

  method _isEndOfLine(x) -> rv
    v  = ord(x)
    rv = (v is 13) or (v is 10) or (v is 0)
  endmethod

  method _isDigit(x) -> rv
    v  = ord(x)
    rv = (v >= 48) and (v <= 57)
  endmethod

  method _isLetterOrDigit(x) -> rv
    rv = (this._isLetter(x) is true) or (this._isDigit(x) is true)
  endmethod

  # ----------------------------------------------------------------------------
  #             Internal implementation: match common sequences
  # ----------------------------------------------------------------------------

  method _matchChar(x)
    if this.lookupBuffer is x
      this._getChar()
    else
      this._error("'" ~ x + "' expected, but '" ~ str(this.lookupBuffer) ~ '" found')
    endif
  endmethod

  method _matchLetter() -> rv
    if this._isLetter(this.lookupBuffer) is true
      # Big (A-Z) or small letter (a-z).
      rv = this._getChar()
    else
      # Error - letter expected.
      rv = this._error('letter A-Z or a-z expected')
    endif
  endmethod

  method _matchLetterOrDigit() -> rv
    if this._isLetterOrDigit(this.lookupBuffer) is true
      # Big (A-Z), small letter (a-z) or digit (0-9).
      rv = this._getChar()
    else
      # Error - letter expected.
      rv = this._error('letter A-Z, a-z or digit 0-9 expected')
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #             Internal implementation: emit result tokens
  # ----------------------------------------------------------------------------

  method _emitOneItem(token)
    this.outputObject.processOneItem(token)
  endmethod

  # ----------------------------------------------------------------------------
  #                Should be overloaded in derived class
  # ----------------------------------------------------------------------------

  method _parseSource()
    this._error('AbstractDescentParser::_parseSource() not implemented')
  endmethod

  # ----------------------------------------------------------------------------
  #                               Public API
  # ----------------------------------------------------------------------------

  method parseFile(path)
    this.path         = path
    this.f            = FileOpenForRead(this.path)
    this.lookupBuffer = ' '

    this._parseSource()
  endmethod

  method connectTo(outputObject) -> rv
    this.outputObject = outputObject
    rv = outputObject
  endmethod
endclass
