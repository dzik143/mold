One byte opcodes
----------------

00-05 add
06    push es (invalid in 64-bit)
07    pop es  (invalid in 64-bit)
08-0d or
0e    push cs (invalid in 64-bit)
0f    2-byte opcode prefix

10-15 adc
16    push ss (invalid in 64-bit)
17    pop ss  (invalid in 64-bit)
18-1d sbb
1e    push ds (invalid in 64-bit)
1f    pop ds  (invalid in 64-bit)

20-25 and
26-27 invalid opcode
28-2d sub
2e    seg=cs prefix
2f    das (invalid in 64-bit)

30-35 xor
36-37 invalid opcode
38-3d cmp
3e    seg=ds prefix
3f    aas (invalid in 64-bit)

40-47 inc r32 (invalid in 64-bit)
48-4f dec r32 (invalid in 64-bit)

50-57 push r64
58-5f pop r64

60    pusha / pushad (invalid in 64-bit)
61    popa / popad   (invalid in 64-bit)
62    bound          (invalid in 64-bit)
63    arpl / movsxd
64    seg fs prefix
65    seg gs prefix
66    operand size prefix
67    address size prefix
68    push imm32
69    imul r32, r/m32, imm32
6a    push imm8
6b    imul r32, r/m32, imm8
6c    insb
6d    insw/d/q
6e    outsb
6f    outsw/d/q

70-7f jxx rel8

80    add/or/adc/sbb/and/sub/xor/cmp r/m8, imm8
81    add/or/adc/sbb/and/sub/xor/cmp r/m32, imm32
82    invalid opcode
83    add/or/adc/sbb/and/sub/xor/cmp r/m32, imm8
84    test r/m8, r8
85    test r/m32, r32
86    xchg r8, r/m8
87    xchg r32, r/m32
88    mov r/m8, r8
89    mov r/m32, r32
8a    mov r8, r/m8
8b    mov r32, r/m32
8c    mov r/m16, seg
8d    lea r/m32
8e    mov seg, r/m16
8f    pop r/m64

90    nop
90-97 xchg eax, r32
98    cbw / cwde / cdqe
99    cwd / cdq / cqo
9a    far call (invalid in 64-bit)
9b    fwait
9c    pushf
9d    popf
9e    sahf (invalid in 64-bit)
9f    lahf (invalid in 64-bit)

a0    mov al, moffs8
a1    mov eax, moffs32
a2    mov moffs8, al
a3    mov moffs32, eax
a4    movsb
a5    movsw/d/q
a6    cmpsb
a7    cmpsw/d/q
a8    test al, imm8
a9    test eax, imm32
aa    stosb
ab    stosw/d/q
ac    lodsb
ad    lodsw/d/q
ae    scasb
af    scasw/d/q

b0-b7 mov r8, imm8
b8-bf mov r32, imm32

c0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, imm8
c1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, imm8
c2    near retn imm16
c3    near ret imm16
c4    les r32, m16:32 (invalid in 64-bit)
c5    lds r32, m16:32 (invalid in 64-bit)
c6    mov r/m8, imm8
c7    mov r/m32, imm32
c8    enter imm16, imm8
c9    leave
ca    far retn
cb    far ret
cc    int3
cd    int imm8
ce    into
cf    iret

d0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, 1
d1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, 1
d2    rol/ror/rcl/rcr/shl/rhr/sar r/m8, cl
d3    rol/ror/rcl/rcr/shl/rhr/sar r/m32, cl
d4    aam (invalid in 64-bit)
d5    aad (invalid in 64-bit)
d6    invalid opcode
d7    xlat
d8-df esc (escape to x87)

e0    loopnz rel8
e1    loopz rel8
e2    loop rel8
e3    jrcxz rel8
e4    in al, imm8
e5    in eax, imm8
e6    out imm8, al
e7    out imm8, eax
e8    call rel32
e9    jmp rel32
ea    jmp ptr16:32 (invalid in 64-bit)
eb    jmp rel8
ec    in al, dx
ed    in eax, dx
ee    out dx, al
ef    out dx, eax

f0    lock prefix
f1    int1
f2    repne prefix
f3    repe prefix
f4    hlt
f5    cmc
f6    test/not/neg/mul/imul/div/idiv (8-bit)
f7    test/not/neg/mul/imul/div/idiv (16-bit)
f8    clc
f9    stc
fa    cli
fb    sti
fc    cld
fd    std
fe    inc/dec r/m8
ff    inc/dec r/m16/32/64
ff    call(f) r/m64
ff    push r/m64
