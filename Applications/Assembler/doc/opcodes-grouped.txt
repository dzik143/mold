Prefixes:
---------
0f    2-byte opcode prefix
2e    seg=cs prefix
3e    seg=ds prefix
64    seg fs prefix
65    seg gs prefix
66    operand size prefix
67    address size prefix
f0    lock prefix
f2    repne prefix
f3    repe prefix

push:
-----
06    push es        (invalid in 64-bit)
0e    push cs        (invalid in 64-bit)
16    push ss        (invalid in 64-bit)
1e    push ds        (invalid in 64-bit)
50-57 push r64
60    pusha / pushad (invalid in 64-bit)
68    push imm32
6a    push imm8
9c    pushf
ff    push r/m64

pop:
----
07    pop es       (invalid in 64-bit)
17    pop ss       (invalid in 64-bit)
1f    pop ds       (invalid in 64-bit)
58-5f pop r64
61    popa / popad (invalid in 64-bit)
8f    pop r/m64
9d    popf

alu:
----
00-05 add
08-0d or
10-15 adc
18-1d sbb
20-25 and
28-2d sub
30-35 xor
38-3d cmp

69    imul r32, r/m32, imm32
6b    imul r32, r/m32, imm8
f6    test/not/neg/mul/imul/div/idiv (8-bit)
f7    test/not/neg/mul/imul/div/idiv (16-bit)
80    add/or/adc/sbb/and/sub/xor/cmp r/m8, imm8
81    add/or/adc/sbb/and/sub/xor/cmp r/m32, imm32
83    add/or/adc/sbb/and/sub/xor/cmp r/m32, imm8
84    test r/m8, r8
85    test r/m32, r32
a8    test al, imm8
a9    test eax, imm32
f6    test/not/neg/mul/imul/div/idiv (8-bit)
f7    test/not/neg/mul/imul/div/idiv (16-bit)
fe    inc/dec r/m8
ff    inc/dec r/m16/32/64

in:
---
6c    insb
6d    insw/d/q
e4    in al, imm8
e5    in eax, imm8
ec    in al, dx
ed    in eax, dx

out:
----
6e    outsb
6f    outsw/d/q
e6    out imm8, al
e7    out imm8, eax
ee    out dx, al
ef    out dx, eax

mov:
----
88    mov r/m8, r8
89    mov r/m32, r32
8a    mov r8, r/m8
8b    mov r32, r/m32
8c    mov r/m16, seg
8e    mov seg, r/m16
a0    mov al, moffs8
a1    mov eax, moffs32
a2    mov moffs8, al
a3    mov moffs32, eax
b0-b7 mov r8, imm8
b8-bf mov r32, imm32
c6    mov r/m8, imm8
c7    mov r/m32, imm32

xchg:
-----
86    xchg r8, r/m8
87    xchg r32, r/m32
90    nop (the same as xchg eax, eax)
90-97 xchg eax, r32

bit shifts:
-----------
c0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, imm8
c1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, imm8
d0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, 1
d1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, 1
d2    rol/ror/rcl/rcr/shl/rhr/sar r/m8, cl
d3    rol/ror/rcl/rcr/shl/rhr/sar r/m32, cl

conditional jumps:
------------------
70-7f jxx rel8
e0    loopnz rel8
e1    loopz rel8
e2    loop rel8
e3    jrcxz rel8

unconditional jumps:
--------------------
e9    jmp rel32
eb    jmp rel8

call:
-----
e8    call rel32
ff    call(f) r/m64

ret:
----
c2    retn imm16
c3    ret
ca    far retn imm16
cb    far ret

enter/leave:
------------
c8    enter imm16, imm8
c9    leave

strings:
a4    movsb
a5    movsw/d/q
a6    cmpsb
a7    cmpsw/d/q
aa    stosb
ab    stosw/d/q
ac    lodsb
ad    lodsw/d/q
ae    scasb
af    scasw/d/q

int:
----
cc    int3
cd    int imm8
ce    into
cf    iret
f1    int1

invalid in 64-bit:
------------------
2f    das             (invalid in 64-bit)
3f    aas             (invalid in 64-bit)
40-47 inc r32         (invalid in 64-bit)
48-4f dec r32         (invalid in 64-bit)
82    invalid opcode
62    bound           (invalid in 64-bit)
9a    call ptr16:32   (invalid in 64-bit)
9e    sahf            (invalid in 64-bit)
9f    lahf            (invalid in 64-bit)
c4    les r32, m16:32 (invalid in 64-bit)
c5    lds r32, m16:32 (invalid in 64-bit)
d4    aam             (invalid in 64-bit)
d5    aad             (invalid in 64-bit)
d6    invalid opcode
ea    jmp ptr16:32    (invalid in 64-bit)

x87:
----
9b    fwait
d8-df esc (escape to x87)
f4    hlt
f5    cmc
f8    clc
f9    stc
fa    cli
fb    sti
fc    cld
fd    std

convert:
--------
63    movsxd r32/64, r/m32
98    cbw / cwde / cdqe
99    cwd / cdq / cqo

other:
------
8d    lea r/m32
d7    xlat
