;###############################################################################
;#                                                                             #
;# This file is part of Mold project.                                          #
;# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                    #
;#                                                                             #
;# This program is free software: you can redistribute it and/or modify        #
;# it under the terms of the GNU General Public License as published by        #
;# the Free Software Foundation, either version 3 of the License, or           #
;# (at your option) any later version.                                         #
;#                                                                             #
;# This program is distributed in the hope that it will be useful,             #
;# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
;# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
;# GNU General Public License for more details.                                #
;#                                                                             #
;# You should have received a copy of the GNU General Public License           #
;# along with this program. If not, see <http://www.gnu.org/licenses/>         #
;#                                                                             #
;###############################################################################

; ------------------------------------------------------------------------------
; Original mnemonics from 8086 processor.
; Please note that this is mnemonics, not a opcodes list.
; For example, with a few exceptions, only 16-bit operands were
; available in original 8086.
; Jumps and calls are moved to core-jumps group.
; ------------------------------------------------------------------------------

;aaa     invalid in 64-bit mode
;aad     invalid in 64-bit mode
;aam     invalid in 64-bit mode
;lahf    invalid in 64-bit mode
;aas     invalid in 64-bit mode
;das     invalid in 64-bit mode
;sahf    invalid in 64-bit mode
;lds     invalid in 64-bit mode
;les     invalid in 64-bit mode
;daa     invalid in 64-bit mode
;into    invalid in 64-bit mode

adc        r,r | r,m | m,r | r,imm | m,imm
add        r,r | r,m | m,r | r,imm | m,imm
and        r,r | r,m | m,r | r,imm | m,imm
cmp        r,r | r,m | m,r | r,imm | m,imm
or         r,r | r,m | m,r | r,imm | m,imm
sbb        r,r | r,m | m,r | r,imm | m,imm
sub        r,r | r,m | m,r | r,imm | m,imm
test       r,r | r,m | m,r | r,imm | m,imm
xor        r,r | r,m | m,r | r,imm | m,imm

rcl        r,cl | r,imm8 | m,cl | m,imm8
rcr        r,cl | r,imm8 | m,cl | m,imm8
rol        r,cl | r,imm8 | m,cl | m,imm8
ror        r,cl | r,imm8 | m,cl | m,imm8
sal        r,cl | r,imm8 | m,cl | m,imm8
sar        r,cl | r,imm8 | m,cl | m,imm8
shl        r,cl | r,imm8 | m,cl | m,imm8
shr        r,cl | r,imm8 | m,cl | m,imm8

dec        r | m
inc        r | m
div        r | m
idiv       r | m
neg        r | m
not        r | m

push       r16 | m16 | r64 | m64 | imm8 | imm16
pop        r16 | m16 | r64 | m64

mov        r,r | r,m | m,r | r,imm | m,imm | r64,imm64
xchg       r,r | r,m | m,r

;mul        r | m | rd,rd | rd,md | rd,md,imm
;imul       r | m | rd,rd | rd,md | rd,md,imm

in         al,imm8 | ax,imm8 | eax,imm8 | al,dx | ax,dx | eax,dx
out        imm8,al | imm8,ax | imm8,eax | dx,al | dx,ax | dx,eax

lea        rd,m8 | rd,m16 | rd,m32 | rd,m64
int        imm8 

nop        - | rd | md
ret        - | imm16
retf       - | imm16
             
cbw        -
cwd        - 
clc        -
cld        -
cli        -                 
cmc        -
cmpsb      -
cmpsw      -
hlt        -
iret       -
lock       -
lodsb      -
lodsw      -
movsb      -
movsw      -
popf       -
pushf      -
rep        -
repe       -
repne      -
scasb      -
scasw      -
stc        -
std        -
sti        -
stosb      -
stosw      -
wait       -
xlatb      -

; ------------------------------------------------------------------------------
; Mnemonics added with 80186 processor:
; ------------------------------------------------------------------------------

;bound invalid in 64-bit mode
;popa  invalid in 64-bit mode
;pusha invalid in 64-bit mode
;push imm (already handled)
;imul imm (already handled)
;shl  imm (already handled)
;shr  imm (already handled)
;sal  imm (already handled)
;sar  imm (already handled)
;rol  imm (already handled)
;ror  imm (already handled)
;rcl  imm (already handled)
;rcr  imm (already handled)

; Only [edi/rdi] or [esi/rsi] addresses are available.
; Tests are handled manually.
;ins        m8,dx | m32,dx | m32,dx
;outs       dx,m8 | dx,m16 | dx,m32

enter      imm16,imm8
leave      -

; ------------------------------------------------------------------------------
; Mnemonics added with 80286 processor:
; ------------------------------------------------------------------------------

;arpl    invalid in 64-bit mode
;loadall 80286 only

sldt       r16 | r64 | m16

lar        rd,r16 | rd,m16
lsl        rd,r16 | rd,m16

smsw       rd | m16
str        rd | m16

lldt       r16 | m16
lmsw       r16 | m16
ltr        r16 | m16
verr       r16 | m16
verw       r16 | m16

lgdt       m48
lidt       m48
sgdt       m80
sidt       m80

clts       -

; ------------------------------------------------------------------------------
; Mnemonics added with 80386 processor:
; ------------------------------------------------------------------------------

;pushad   invalid in 64-bit mode
;popad    invalid in 64-bit mode
;pushfd   invalid in 64-bit mode
;popfd    invalid in 64-bit mode
;loadalld 80386 only
;ibts     80386 before B1 step only
;xbts     80386 before B1 step only
;mov to/from CR/DR/TR (already handled)

bsf        rd,rd | rd,md 
bsr        rd,rd | rd,md 

bt         rd,rd | md,rd 
btc        rd,rd | md,rd 
btr        rd,rd | md,rd 
bts        rd,rd | md,rd 

lfs        rd,md-far
lgs        rd,md-far
lss        rd,md-far

movsx      rd,r8 | rd,m8 | r32,r16 | r32,m16 | r64,r16 | r64,m16
movzx      rd,r8 | rd,m8 | r32,r16 | r32,m16 | r64,r16 | r64,m16

shld       rd,rd,cl | rd,rd,imm8 | md,rd,cl | md,rd,imm8
shrd       rd,rd,cl | rd,rd,imm8 | md,rd,cl | md,rd,imm8

seta       r8 | m8
setae      r8 | m8
setb       r8 | m8
setbe      r8 | m8
setc       r8 | m8
sete       r8 | m8
setg       r8 | m8
setge      r8 | m8
setl       r8 | m8
setle      r8 | m8
setna      r8 | m8
setnae     r8 | m8
setnb      r8 | m8
setnbe     r8 | m8
setnc      r8 | m8
setne      r8 | m8
setng      r8 | m8
setnge     r8 | m8
setnl      r8 | m8
setnle     r8 | m8
setno      r8 | m8
setnp      r8 | m8
setns      r8 | m8
setnz      r8 | m8
seto       r8 | m8
setp       r8 | m8
setpe      r8 | m8
setpo      r8 | m8
sets       r8 | m8
setz       r8 | m8

cwde       -
cdq        -
iretd      -
lodsd      -
stosd      -
cmpsd      -
movsd      - 
scasd      -
insd       -
outsd      -

; ------------------------------------------------------------------------------
; Mnemonics added with 80486 processor:
; ------------------------------------------------------------------------------
           
bswap      r32 | r64
cmpxchg    r,r | m,r
xadd       r,r | m,r
invlpg     m
invd       -
wbinvd     -

; ------------------------------------------------------------------------------
; Mnemonics added with Pentium processor: 
; ------------------------------------------------------------------------------

cmpxchg8b  m64
cpuid      -
rdmsr      -
rdtsc      -
wrmsr      -
rsm        -

; ------------------------------------------------------------------------------
; Mnemonics added with Penitum Pro processor:
; ------------------------------------------------------------------------------

cmova      rd,rd | rd,md
cmovae     rd,rd | rd,md
cmovb      rd,rd | rd,md
cmovbe     rd,rd | rd,md
cmovc      rd,rd | rd,md
cmove      rd,rd | rd,md
cmovg      rd,rd | rd,md
cmovge     rd,rd | rd,md
cmovl      rd,rd | rd,md
cmovle     rd,rd | rd,md
cmovna     rd,rd | rd,md
cmovnae    rd,rd | rd,md
cmovnb     rd,rd | rd,md
cmovnbe    rd,rd | rd,md
cmovnc     rd,rd | rd,md
cmovne     rd,rd | rd,md
cmovng     rd,rd | rd,md
cmovnge    rd,rd | rd,md
cmovnl     rd,rd | rd,md
cmovnle    rd,rd | rd,md
cmovno     rd,rd | rd,md
cmovnp     rd,rd | rd,md
cmovns     rd,rd | rd,md
cmovnz     rd,rd | rd,md
cmovo      rd,rd | rd,md
cmovp      rd,rd | rd,md
cmovpe     rd,rd | rd,md
cmovpo     rd,rd | rd,md
cmovs      rd,rd | rd,md
cmovz      rd,rd | rd,md
ud2        -

; ------------------------------------------------------------------------------
; Mnemonics added with Penium MMX processor:
; ------------------------------------------------------------------------------

rdpmc     -

; ------------------------------------------------------------------------------
; Mnemonics added with AMD K6 processor:
; ------------------------------------------------------------------------------

syscall    -
sysret     -

; ------------------------------------------------------------------------------
; Mnemonics added with Penitum II:
; ------------------------------------------------------------------------------

sysenter   -
sysexit    -

; ------------------------------------------------------------------------------
; Mnemonics added with Amd64:
; ------------------------------------------------------------------------------

movsxd     r64,r32 | r64,m32
cmpxchg16b m128
cdqe       -
cqo        -
cmpsq      -
iretq      -
lodsq      -
popfq      -
pushfq     -
rdtscp     -
scasq      -
stosq      -
swapgs     -
