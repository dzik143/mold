# Parser module generated by unicc from test.par.
# DO NOT EDIT THIS FILE MANUALLY, IT WILL GO AWAY!


################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        #
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         #
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

# -----------------------------------------------------------------------------
#                                Constants
# -----------------------------------------------------------------------------

UNICC_ERROR  = 0
UNICC_REDUCE = 1
UNICC_SHIFT  = 2
UNICC_EOF    = 0

UNICC_DEBUG = false

SYMBOL_NAME_IDX       = 0
SYMBOL_EMIT_IDX       = 1
SYMBOL_TYPE_IDX       = 2
SYMBOL_LEXEM_IDX      = 3
SYMBOL_WHITESPACE_IDX = 4
SYMBOL_GREEDY_IDX     = 5

PRODUCTION_DEFINITION_IDX = 0
PRODUCTION_EMIT_IDX       = 1
PRODUCTION_LENGTH_IDX     = 2
PRODUCTION_LHS_IDX        = 3

# -----------------------------------------------------------------------------
#                              Helper functions
# -----------------------------------------------------------------------------

null = 0

function debug(msg)
endfunction

# -----------------------------------------------------------------------------
#                                Parse tables
# -----------------------------------------------------------------------------

# Action Table
const _act = [
  [ 1, 1,3,4  ],
  [ 1, 0,3,0  ],
  [ 4, 5,3,5 , 4,3,6 , 3,3,7 , 2,3,8  ],
  [ 1, 1,3,4  ],
  [ 1, 0,1,1  ]
]

# GoTo Table
const _go = [
  [ 3, 9,2,1 , 8,2,2 , 6,3,3  ],
  [ 0 ],
  [ 1, 7,2,3  ],
  [ 1, 6,2,4  ],
  [ 0 ]
]

# Default productions per state
const _def_prod = [
  -1, -1, -1, -1, 2
]

# DFA selection table
const _dfa_select = [
  0, -1, 1, 0, 1 - 0
]

# DFA index table
const _dfa_idx = [
  [ 0 * 2, 2 * 2 ],
  [ 4 * 2, 9 * 2, 10 * 2, 11 * 2, 12 * 2 ]
]

# DFA transition chars
const _dfa_chars = [
  48, 57, -1, -1, 48, 57, -1, -1, 42, 42, 43, 43, 45, 45, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
]

# DFA transitions
const _dfa_trans = [
  1, -1, 1, -1, 1, 2, 3, 4, -1, -1, -1, -1, -1
]

# DFA acception states
const _dfa_accept = [
  [ 0, 2 ],
  [ 0, 4, 6, 5, 3 ]
]

# Symbol information table
const _symbols = [
  [ /* 0 */ "&eof", "", 3, 0, 0, 1 ],
  [ /* 1 */ "num", "", 2, 0, 0, 1 ],
  [ /* 2 */ "/", "", 1, 0, 0, 1 ],
  [ /* 3 */ "*", "", 1, 0, 0, 1 ],
  [ /* 4 */ "-", "", 1, 0, 0, 1 ],
  [ /* 5 */ "+", "", 1, 0, 0, 1 ],
  [ /* 6 */ "num", "", 0, 0, 0, 1 ],
  [ /* 7 */ "operation", "", 0, 0, 0, 1 ],
  [ /* 8 */ "recbin", "", 0, 0, 0, 1 ],
  [ /* 9 */ "binop", "", 0, 0, 0, 1 ],
  [ /* 10 */ "start", "", 0, 0, 0, 1 ]
]

# Production information table
const _productions = [
  [ /* 0 */ "start -> binop ~&eof", "expr", 2, 10 ],
  [ /* 1 */ "binop -> recbin operation num", "binop", 3, 9 ],
  [ /* 2 */ "recbin -> recbin operation num", "binop", 3, 8 ],
  [ /* 3 */ "recbin -> num", "", 1, 8 ],
  [ /* 4 */ "num -> @num", "num", 1, 6 ],
  [ /* 5 */ "operation -> '+'", "", 1, 7 ],
  [ /* 6 */ "operation -> '-'", "", 1, 7 ],
  [ /* 7 */ "operation -> '*'", "", 1, 7 ],
  [ /* 8 */ "operation -> '/'", "", 1, 7 ]
]

# -----------------------------------------------------------------------------
#                                Helper classes
# -----------------------------------------------------------------------------

#
# Abstract Syntax Tree
#

NodeId = 0

class AST
  method constructor(emit, token)
    global null
    global NodeId

    this.parent = null
    this.child  = null
    this.prev   = null
    this.next   = null

    this.emit  = emit
    this.token = token
    this.id    = NodeId

    NodeId = NodeId + 1
  endmethod

  method _printInternal(node, deepIdx)
    global null

    while node isnt null
      prefix = ''
      for i in 0 .. deepIdx
        prefix = prefix + '..'
      endfor

      if (node.token isnt null)
        print prefix + node.emit, node.token
      else
        print prefix + node.emit
      endif

      this._printInternal(node.child, deepIdx + 1)

      node = node.next
    endwhile
  endmethod

  method print()
    print '----------------------------------'
    print ' Abstract Syntax Tree'
    print '----------------------------------'
    this._printInternal(this, 0)
  endmethod

  method _convertInternal(node, deepIdx) -> rv
    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_REFERENCE, AST_OPCODE_CALL, AST_OPCODE_BOOL_NOT
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV, AST_OPCODE_INC, AST_OPCODE_DEC
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_INVOKE_METHOD

    global AST_OPCODE_PROGRAM, AST_OPCODE_BLOCK, AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_FOR_VALUES_RANGE, AST_OPCODE_WHILE
    global AST_OPCODE_CALL, AST_OPCODE_FUNCTION, AST_OPCODE_IF, AST_OPCODE_SWITCH
    global AST_OPCODE_VARIABLE, AST_OPCODE_REFERENCE
    global AST_OPCODE_CLASS, AST_OPCODE_CLASS_METHOD, AST_OPCODE_INVOKE_METHOD
    global AST_OPCODE_NOP, AST_DATA_STRING, AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_CALL_DELETE

    global AST_OPCODE_FOR_VALUES
    global AST_OPCODE_FOR_INDEXES
    global AST_OPCODE_FOR_INDEXES_VALUES
    global AST_OPCODE_FOR_KEYS
    global AST_OPCODE_FOR_KEYS_VALUES

    global null

    rv          = {}
    children    = []
    childrenCnt = 0
    emit        = node.emit
    value       = node.token

    if emit is 'int'
      opcode = AST_DATA_INTEGER

    elif emit is 'float'
      opcode = AST_DATA_DOUBLE

    elif emit is 'string'
      opcode = AST_DATA_STRING

    elif emit is 'bool'
      opcode = AST_DATA_BOOL

    elif emit is 'unused'
      opcode = AST_DATA_OBJECT

    elif emit is 'null'
      opcode = AST_DATA_NULL

    elif emit is 'undefined'
      opcode = AST_DATA_UNDEFINED

    elif emit is 'array'
      opcode = AST_DATA_ARRAY

    elif emit is 'map'
      opcode = AST_DATA_MAP

    elif emit is 'program'
      opcode = AST_OPCODE_PROGRAM

    elif emit is 'block'
      opcode = AST_OPCODE_BLOCK

    elif emit is 'print'
      opcode = AST_OPCODE_CALL

    elif emit is 'call'
      opcode = AST_OPCODE_CALL

    elif emit is 'neg'
      opcode = AST_OPCODE_NEG

    elif emit is 'add'
      opcode = AST_OPCODE_ADD

    elif emit is 'sub'
      opcode = AST_OPCODE_SUB

    elif emit is 'mul'
      opcode = AST_OPCODE_MUL

    elif emit is 'div'
      opcode = AST_OPCODE_DIV

    elif emit is 'inc'
      opcode = AST_OPCODE_INC

    elif emit is 'dec'
      opcode = AST_OPCODE_DEC

    elif emit is 'idiv'
      opcode = AST_OPCODE_IDIV

    elif emit is 'store'
      opcode = AST_OPCODE_DECLARE_OR_ASSIGN

    elif emit is 'var'
      opcode = AST_OPCODE_VARIABLE

    elif emit is 'index'
      opcode = AST_OPCODE_REFERENCE

    elif emit is 'member'
      opcode = AST_DATA_STRING

    elif emit is 'for'
      opcode = AST_OPCODE_FOR_VALUES_RANGE

    elif emit is 'for_values'
      opcode = AST_OPCODE_FOR_VALUES

    elif emit is 'for_indexes'
      opcode = AST_OPCODE_FOR_INDEXES

    elif emit is 'for_keys'
      opcode = AST_OPCODE_FOR_KEYS

    elif emit is 'for_keys_values'
      opcode = AST_OPCODE_FOR_KEYS_VALUES

    elif emit is 'for_keys_indexes_values'
      opcode = AST_OPCODE_FOR_INDEXES_VALUES

    elif emit is 'while'
      opcode = AST_OPCODE_WHILE

    elif emit is 'cmpeq'
      opcode = AST_OPCODE_COMPARE_EQ

    elif emit is 'cmpne'
      opcode = AST_OPCODE_COMPARE_NEQ

    elif emit is 'cmpgt'
      opcode = AST_OPCODE_COMPARE_GT

    elif emit is 'cmpge'
      opcode = AST_OPCODE_COMPARE_GE

    elif emit is 'cmplt'
      opcode = AST_OPCODE_COMPARE_LT

    elif emit is 'cmple'
      opcode = AST_OPCODE_COMPARE_LE

    elif emit is 'bor'
      opcode = AST_OPCODE_BOOL_OR

    elif emit is 'band'
      opcode = AST_OPCODE_BOOL_AND

    elif emit is 'not'
      opcode = AST_OPCODE_BOOL_NOT

    elif emit is 'function'
      opcode = AST_OPCODE_FUNCTION
      rv['name']      = value['name']
      rv['params']    = value['parameters']
      rv['paramsCnt'] = len(value['parameters'])
      rv['rv']        = value['rv']

    elif emit is 'if'
      opcode = AST_OPCODE_IF

    elif emit is 'elif'
      opcode = AST_OPCODE_IF

    elif emit is 'class'
      opcode = AST_OPCODE_CLASS
      rv['name']     = value['name']
      rv['baseName'] = value['baseName']

    elif emit is 'method'
      opcode = AST_OPCODE_CLASS_METHOD

      newParams = ['this']
      params    = value['parameters']
      paramsCnt = len(params)

      for idx in 0 .. paramsCnt
        newParams[idx + 1] = params[idx]
      endfor

      rv['name']      = value['name']
      rv['params']    = newParams
      rv['paramsCnt'] = len(newParams)
      rv['rv']        = value['rv']

    elif emit is 'vcall'
      opcode = AST_OPCODE_INVOKE_METHOD

    elif emit is 'new'
      opcode = AST_OPCODE_CALL_NEW

    elif emit is 'delete'
      opcode = AST_OPCODE_CALL_DELETE

    else
      # TODO: Remove opcode assign.
      opcode = -1
      die('Unrecognized opcode ' + emit)
    endif

    rv['opcode'] = opcode
    rv['value']  = value
    rv['id']     = node.id

    node = node.child

    while node isnt null
      newChild              = this._convertInternal(node, deepIdx + 1)
      children[childrenCnt] = newChild
      childrenCnt           = childrenCnt + 1
      node                  = node.next

      newChild.parent = node
    endwhile

    rv['children']    = children
    rv['childrenCnt'] = childrenCnt
  endmethod

  method convert() -> rv
    #print '----------------------------------'
    #print ' Convert Abstract Syntax Tree'
    #print '----------------------------------'

    rv = this._convertInternal(this, 0)
  endmethod

endclass

#
# Stack token.
#

class Token
  method constructor()
    global null

    this.value  = null
    this.node   = null
    this.symbol = null

    this.state  = 0
    this.line   = 0
    this.column = 0
  endmethod

  method print()
    print '[', this.value, this.node, this.symbol, this.state, ']'
  endmethod

endclass

# -----------------------------------------------------------------------------
#                                Parser class
# -----------------------------------------------------------------------------

class Parser
  method constructor()
    global null

    # Input buffering
    this.buf     = []
    this.bufSize = 0

    this.line   = 1
    this.column = 1

    this.inputIdx = 0
    this.inputLen = 0
    this.input    = null

    debug('created parser object')
  endmethod

  method _getInput(offset) -> rv
    global UNICC_EOF
    #debug('going to get input, bufSize=[' + str(this.bufSize) + '], offset=[' + str(offset) + ']')
    #print this.buf

    while offset >= this.bufSize
      # Get next character from input stream
      if this.inputIdx < this.inputLen
        nextChar      = this.input[this.inputIdx]
        this.inputIdx = this.inputIdx + 1
      else
        nextChar = UNICC_EOF
      endif

      # debug('pop char [' + nextChar + '] from input')

      this.buf[this.bufSize] = nextChar
      this.bufSize           = this.bufSize + 1
    endwhile

    rv = this.buf[offset]
    debug('got input [' + str(rv) + ']')
  endmethod

  method _clearInput(currentLen)
    debug('going to clear input: len=[' + str(currentLen) + '], bufSize=[' + str(this.bufSize) + ']')

    if currentLen > 0
      # Update counters for line and column
      for idx in 0 .. currentLen
        if ord(this.buf[idx]) is 10
          this.line   = this.line + 1
          this.column = 1
        else
          this.column = this.column + 1
        endif
      endfor

      # TODO: Optimize it,
      newBufCnt = this.bufSize - currentLen
      for idx in 0 .. newBufCnt
        this.buf[idx] = this.buf[idx + currentLen]
      endfor

      this.bufSize = newBufCnt
    else
      this.bufSize = 0
    endif

    debug('clear input done: bufSize=[' + str(this.bufSize) + ']')
  endmethod

  method _handleError(msg)
    die(this.filePath + ':' + str(this.line) + ':' + str(this.column) + ': error: ' + str(msg))
  endmethod

  method _parseInternal(text) -> ast
    global null
    global UNICC_ERROR, UNICC_REDUCE, UNICC_SHIFT
    global SYMBOL_EMIT_IDX
    global PRODUCTION_LHS_IDX
    global PRODUCTION_LENGTH_IDX
    global PRODUCTION_EMIT_IDX
    global SYMBOL_GREEDY_IDX
    global SYMBOL_WHITESPACE_IDX
    global UNICC_EOF

    global _symbols, _productions, _act, _def_prod
    global _dfa_idx, _dfa_chars, _dfa_trans, _dfa_accept, _dfa_select, _go

    ast        = null
    goOn       = true
    innerGoOn  = true
    masterIter = 1

    #
    # Initialize Parser Control Block.
    #

    debug('going to parse [' + str(len(text)) + '] bytes')

    this.input    = text
    this.inputIdx = 0
    this.inputLen = len(text)
    this.line     = 1
    this.column   = 1

    # State
    currentAct = 0
    currentIdx = 0
    currentLhs = 0
    currentRet = null

    stack    = []
    stackIdx = 0
    stack[0] = new Token()

    #
    # Begin of main parser loop
    #

    debug('falling into main parser loop')

    while goOn is true
      debug('')
      debug('------------------------------')
      debug('MASTER ITER #' + str(masterIter))

      #
      # GET SYMBOL
      #

      currentSym = -1
      currentLen = 0

      if _dfa_select[stack[stackIdx].state] > -1
        #
        # LEX
        # this._lex()
        #

        dfa_st = 0
        length = 0
        chr    = 0

        debug('starting lex...')

        mach = _dfa_select[stack[stackIdx].state]
        next = ord(this._getInput(length))

        if next is UNICC_EOF
          currentSym = 0

        else
          lexGoOn = true

          while lexGoOn is true
            # debug('_lex(): outer loop, chr=[' + str(chr) + ']\n')

            lexInnerGoOn = true
            chr          = _dfa_idx[mach][dfa_st]
            dfa_st       = -1

            while (lexInnerGoOn is true) and (_dfa_chars[chr] > -1)
              #debug('_lex(): inner loop, chr=[' + str(chr) + ']')

              if (next >= _dfa_chars[chr]) and (next <= _dfa_chars[chr + 1])
                dfa_st =  _dfa_trans[chr // 2]

                if _dfa_accept[mach][dfa_st] > 0
                  currentLen = length + 1
                  currentSym = _dfa_accept[mach][dfa_st] - 1

                  if currentSym is 0
                    # test!
                    dfa_st       = -1
                    lexInnerGoOn = false

                  elif _symbols[currentSym][SYMBOL_GREEDY_IDX] is 0
                    # Stop if matched symbol should be parsed nongreedy
                    dfa_st       = -1
                    lexInnerGoOn = false
                  endif
                endif

                if lexInnerGoOn is true
                  length       = length + 1
                  next         = ord(this._getInput(length))
                  lexInnerGoOn = false
                endif
              endif

              chr = chr + 2
            endwhile

            if (dfa_st < 0) or (next is UNICC_EOF)
              lexGoOn = false
            endif
          endwhile
        endif

        debug('lex done: sym=[' + str(currentSym) + ']')

        #
        # END OF LEX
        #

        #
        # If there is no DFA state machine,
        # try to identify the end-of-file symbol.
        # If this also fails, a parse error will
        # raise.
        #

      elif this._getInput(0) is UNICC_EOF
        currentSym = 0
      endif

      debug('got symbol: sym=[' + str(currentSym) + ']' + ', len=[' + str(currentLen) + ']')

      #
      # END OF GET SYMBOL
      #

      #
      # GET ACT
      #

      actionIdx = 1
      rv        = -1

      state = stack[stackIdx].state

      act = _act[state]
      cnt = act[0] * 3

      while (rv is -1) and (actionIdx < cnt)
        if act[actionIdx] is currentSym
          currentAct = act[actionIdx + 1]

          if currentAct is UNICC_ERROR
            # Force parse error!
            rv = 0
          else
            currentIdx = act[actionIdx + 2]
            rv = 1
          endif
        endif

        actionIdx = actionIdx + 3
      endwhile

      if rv is -1
        # Default production
        currentIdx = _def_prod[state]
        if currentIdx > -1
          # Reduce
          currentAct = 1
          rv = 1
        else
          rv = 0
        endif
      endif

      debug('got action: rv=[' + str(rv) + '], act=[' + str(currentAct) + '], idx=[' + str(currentIdx) + ']')

      if rv is 0
        this._handleError('syntax error')
      endif

      #
      # END OF GET ACT
      #

      #
      # Shift
      #

      if bitand(currentAct, UNICC_SHIFT) isnt 0
        debug('going to shift...')
        nextChar = this.buf[currentLen]
        this.buf[currentLen] = 0

        stackIdx = stackIdx + 1

        stack[stackIdx] = new Token()

        #
        #  Execute scanner actions, if existing.
        #  Here, UNICC_ON_SHIFT is set to 1, so that shifting-
        #  related operations will be performed.
        #

        #
        # Scan actions.
        # TODO: switch(currentSym)
        #

        if false



        else
          stack[stackIdx - 0].value = this._getInput(0)
        endif

        #
        # End of scan actions.
        #

        if bitand(currentAct, UNICC_REDUCE) isnt 0
          stack[stackIdx].state = -1
        else
          stack[stackIdx].state = currentIdx
        endif

        stack[stackIdx].symbol = _symbols[currentSym]
        stack[stackIdx].line   = this.line
        stack[stackIdx].column = this.column

        newValue = ''
        for idx in 0 .. currentLen
          newValue = newValue + this.buf[idx]
        endfor
        stack[stackIdx - 0].value = newValue

        stack[stackIdx].node = null
        this.buf[currentLen] = nextChar

        # Perform the shift on input
        if (currentSym isnt 0) and (currentSym isnt stack[stackIdx - 0].value)
          this._clearInput(currentLen)
          currentSym = -1
          currentLen = 0
        endif

        debug('shifted')
      endif

      #
      # Reduce
      #

      innerGoOn  = true
      reduceIter = 1

      while (innerGoOn is true) and (bitand(currentAct, UNICC_REDUCE) isnt 0)
        debug('')
        debug('------------------------------')
        debug('REDUCE ITER #' + str(masterIter) + '.' + str(reduceIter))

        # Set default left-hand side
        currentLhs = _productions[currentIdx][PRODUCTION_LHS_IDX]

        # Run reduction code
        # TODO: switch( pcb->idx )
        if false
                  elif currentIdx is 0
            currentRet = stack[stackIdx - 1].value 

        elif currentIdx is 1
            currentRet = stack[stackIdx - 1].value 

        elif currentIdx is 2
            currentRet = stack[stackIdx - 1].value 

        elif currentIdx is 3
            currentRet = stack[stackIdx - 0].value 

        elif currentIdx is 4
            currentRet = stack[stackIdx - 0].value 

        elif currentIdx is 5
            currentRet = stack[stackIdx - 0].value 

        elif currentIdx is 6
            currentRet = stack[stackIdx - 0].value 

        elif currentIdx is 7
            currentRet = stack[stackIdx - 0].value 

        elif currentIdx is 8
            currentRet = stack[stackIdx - 0].value 


        endif

        currentProduction       = _productions[currentIdx]
        currentProductionLength = currentProduction[PRODUCTION_LENGTH_IDX]
        emit                    = currentProduction[PRODUCTION_EMIT_IDX]

        # Drop right-hand side
        # TODO: Destructor callbacks?
        node = null

        for i in 0 .. currentProductionLength

          if stack[stackIdx].node isnt null

            if node isnt null
              while (node.prev isnt null)
                node = node.prev
              endwhile

              node.prev = stack[stackIdx].node

              stack[stackIdx].node.next = node
            endif

            node = stack[stackIdx].node

            stack[stackIdx].node = null

          endif

          stackIdx = stackIdx - 1
        endfor

        if node isnt null
          lnode = stack[stackIdx].node

          if lnode isnt null
            while lnode.next isnt null
              lnode = lnode.next
            endwhile

            lnode.next = node
            node .prev = lnode
          else
            stack[stackIdx].node = node
          endif
        endif

        if emit isnt ''
          node       = new AST(_productions[currentIdx][PRODUCTION_EMIT_IDX], currentRet)
          node.child = stack[stackIdx].node
          stack[stackIdx].node = node
          print node.emit, node.token, node.child          
        endif

        debug('goal symbol? (lhs=[' + str(currentLhs) + '], goal=[' + str(10) + '], stackIdx=[' + str(stackIdx) + '])')
        # Goal symbol reduced, and stack is empty?
        if (currentLhs is 10) and (stackIdx is 0)
          stack[stackIdx].value = currentRet
          ast = stack[stackIdx].node

          this._clearInput(currentLen)
          currentSym = -1
          currentLen = 0
          innerGoOn  = false

        else
          #
          # GET GO
          #

          rv    = 0
          goIdx = 1
          state = stack[stackIdx].state
          go    = _go[state]
          cnt   = go[0] * 3

          while (rv is 0) and (goIdx < cnt)
            if (go[goIdx] is currentLhs)
              currentAct = go[goIdx + 1]
              currentIdx = go[goIdx + 2]

              rv = 1
            endif

            goIdx = goIdx + 3
          endwhile

          #
          # END OF GET GO
          #

          stackIdx = stackIdx + 1

          stack[stackIdx]        = new Token()
          stack[stackIdx].value  = currentRet
          stack[stackIdx].symbol = _symbols[currentLhs]
          stack[stackIdx].line   = this.line
          stack[stackIdx].column = this.column

          if bitand(currentAct, UNICC_REDUCE) isnt 0
            stack[stackIdx].state = -1
          else
            stack[stackIdx].state = currentIdx
          endif
        endif

        reduceIter = reduceIter + 1

        debug('reduced')
      endwhile

      debug('END CONDITION: reduce=[' + str(bitand(currentAct, UNICC_REDUCE)) + '], idx=[' + str(currentIdx) +'], goalIdx=[' + str(0) + ']')

      if (bitand(currentAct, UNICC_REDUCE) isnt 0) and (currentIdx is 0)
        goOn = false
      endif

      masterIter = masterIter + 1

      if masterIter > 1000000
        die('MAX ITERS reached!')
      endif
    endwhile
  endmethod

  method parseFile(path) -> ast
    # Load source code from file.
    source        = FileLoad(path)
    this.filePath = path

    # Parse source into AST tree.
    ast = this._parseInternal(source)
  endmethod

  method parseText(text) -> ast
    this.filePath = ''
    ast           = this._parseInternal(text)
  endmethod

endclass
