X64_SYNTAX_NONE     = 0  # no operands (opcode only)
X64_SYNTAX_RM8_R8   = 1  # r/m8, r8
X64_SYNTAX_RMD_RD   = 2  # r/m16/32/64, r16/32/64
X64_SYNTAX_R8_RM8   = 3  # r8, r/m8
X64_SYNTAX_RD_RMD   = 4  # r16/32/64, r/m16/32/64
X64_SYNTAX_AL_I8    = 5  # al, imm8
X64_SYNTAX_RAX_IWD  = 6  # ax/eax/rax, imm16/32
X64_SYNTAX_RWQ      = 7  # r16/64
X64_SYNTAX_R64_RM32 = 8  # r64, r/m32
X64_SYNTAX_CUSTOM   = 9  # need custom, opcode specific code
X64_SYNTAX_INVALID  = 15 # invalid in 64-bit

# One byte opcodes
syntax = [
  X64_SYNTAX_RM8_R8,       # 00 add r/m8, r8
  X64_SYNTAX_RMD_RD,       # 01 add r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 02 add r8, r/m8
  X64_SYNTAX_RD_RMD,       # 03 add r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 04 add al, imm8
  X64_SYNTAX_RAX_IWD,      # 05 add ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 06 push es (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 07 pop es  (invalid in 64-bit)

  X64_SYNTAX_RM8_R8,       # 08 or r/m8, r8
  X64_SYNTAX_RMD_RD,       # 09 or r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 0a or r8, r/m8
  X64_SYNTAX_RD_RMD,       # 0b or r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 0c or al, imm8
  X64_SYNTAX_RAX_IWD,      # 0d or ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 0e push cs (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 0f 2-byte opcode prefix

  X64_SYNTAX_RM8_R8,       # 10 adc r/m8, r8
  X64_SYNTAX_RMD_RD,       # 11 adc r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 12 adc r8, r/m8
  X64_SYNTAX_RD_RMD,       # 13 adc r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 14 adc al, imm8
  X64_SYNTAX_RAX_IWD,      # 15 adc ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 16 push ss (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 17 pop ss  (invalid in 64-bit)

  X64_SYNTAX_RM8_R8,       # 18 sbb r/m8, r8
  X64_SYNTAX_RMD_RD,       # 19 sbb r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 1a sbb r8, r/m8
  X64_SYNTAX_RD_RMD,       # 1b sbb r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 1c sbb al, imm8
  X64_SYNTAX_RAX_IWD,      # 1d sbb ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 1e push ds (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 1f pop ds  (invalid in 64-bit)

  X64_SYNTAX_RM8_R8,       # 20 and r/m8, r8
  X64_SYNTAX_RMD_RD,       # 21 and r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 22 and r8, r/m8
  X64_SYNTAX_RD_RMD,       # 23 and r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 24 and al, imm8
  X64_SYNTAX_RAX_IWD,      # 25 and ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 26 invalid opcode
  X64_SYNTAX_INVALID,      # 27 invalid opcode

  X64_SYNTAX_RM8_R8,       # 28 sub r/m8, r8
  X64_SYNTAX_RMD_RD,       # 29 sub r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 2a sub r8, r/m8
  X64_SYNTAX_RD_RMD,       # 2b sub r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 2c sub al, imm8
  X64_SYNTAX_RAX_IWD,      # 2d sub ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 2e seg=cs prefix
  X64_SYNTAX_INVALID,      # 2f das (invalid in 64-bit)

  X64_SYNTAX_RM8_R8,       # 30 xor r/m8, r8
  X64_SYNTAX_RMD_RD,       # 31 xor r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 32 xor r8, r/m8
  X64_SYNTAX_RD_RMD,       # 33 xor r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 34 xor al, imm8
  X64_SYNTAX_RAX_IWD,      # 35 xor ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 36 invalid opcode
  X64_SYNTAX_INVALID,      # 37 invalid opcode

  X64_SYNTAX_RM8_R8,       # 38 cmp r/m8, r8
  X64_SYNTAX_RMD_RD,       # 39 cmp r/m16/32/64, r16/32/64
  X64_SYNTAX_R8_RM8,       # 3a cmp r8, r/m8
  X64_SYNTAX_RD_RMD,       # 3b cmp r16/32/64, r/m16/32/64
  X64_SYNTAX_AL_I8,        # 3c cmp al, imm8
  X64_SYNTAX_RAX_IWD,      # 3d cmp ax/eax/rax, imm16/32

  X64_SYNTAX_INVALID,      # 3e seg=ds prefix
  X64_SYNTAX_INVALID,      # 3f aas (invalid in 64-bit)

  X64_SYNTAX_INVALID,      # 40 inc eax (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 41 inc ecx (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 42 inc edx (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 43 inc ebx (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 44 inc esp (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 45 inc ebp (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 46 inc esi (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 47 inc edi (invalid in 64-bit)

  X64_SYNTAX_INVALID,      # 48 dec eax (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 49 dec ecx (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 4a dec edx (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 4b dec ebx (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 4c dec esp (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 4d dec ebp (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 4e dec esi (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 4f dec edi (invalid in 64-bit)

  X64_SYNTAX_RWQ,          # 50 push ax/rax
  X64_SYNTAX_RWQ,          # 51 push cx/rcx
  X64_SYNTAX_RWQ,          # 52 push dx/rdx
  X64_SYNTAX_RWQ,          # 53 push bx/rbx
  X64_SYNTAX_RWQ,          # 54 push sp/rsp
  X64_SYNTAX_RWQ,          # 55 push bp/rbp
  X64_SYNTAX_RWQ,          # 56 push si/rsi
  X64_SYNTAX_RWQ,          # 57 push di/rdi

  X64_SYNTAX_RWQ,          # 58 pop ax/rax
  X64_SYNTAX_RWQ,          # 59 pop cx/rcx
  X64_SYNTAX_RWQ,          # 5a pop dx/rdx
  X64_SYNTAX_RWQ,          # 5b pop bx/rbx
  X64_SYNTAX_RWQ,          # 5c pop sp/rsp
  X64_SYNTAX_RWQ,          # 5d pop bp/rbp
  X64_SYNTAX_RWQ,          # 5e pop si/rsi
  X64_SYNTAX_RWQ,          # 5f pop di/rdi

  X64_SYNTAX_INVALID,      # 60 pusha / pushad (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 61 popa / popad   (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 62 bound          (invalid in 64-bit)

  X64_SYNTAX_R64_RM32,     # 63 movsxd

  X64_SYNTAX_INVALID,      # 64 seg=fs prefix
  X64_SYNTAX_INVALID,      # 65 seg=gs prefix

  X64_SYNTAX_INVALID,      # 66 operand size override prefix
  X64_SYNTAX_INVALID,      # 67 address size override prefix

  X64_SYNTAX_I32,          # 68 push imm32
  X64_SYNTAX_R32_RM32_I32, # 69 imul r32, r/m32, imm32
  X64_SYNTAX_I8,           # 6a push imm8
  X64_SYNTAX_R32_RM32_I8,  # 6b imul r32, r/m32, imm8 
 
  X64_SYNTAX_NONE,         # 6c insb
  X64_SYNTAX_NONE,         # 6c insb
  X64_SYNTAX_NONE,         # 6d insw/d/q
  X64_SYNTAX_NONE,         # 6e outsb
  X64_SYNTAX_NONE,         # 6f outsw/d/q

  X64_SYNTAX_REL8,         # 70 jxx rel8
  X64_SYNTAX_REL8,         # 71 jxx rel8
  X64_SYNTAX_REL8,         # 72 jxx rel8
  X64_SYNTAX_REL8,         # 73 jxx rel8
  X64_SYNTAX_REL8,         # 74 jxx rel8
  X64_SYNTAX_REL8,         # 75 jxx rel8
  X64_SYNTAX_REL8,         # 76 jxx rel8
  X64_SYNTAX_REL8,         # 77 jxx rel8
  X64_SYNTAX_REL8,         # 78 jxx rel8
  X64_SYNTAX_REL8,         # 79 jxx rel8
  X64_SYNTAX_REL8,         # 7a jxx rel8
  X64_SYNTAX_REL8,         # 7b jxx rel8
  X64_SYNTAX_REL8,         # 7c jxx rel8
  X64_SYNTAX_REL8,         # 7d jxx rel8
  X64_SYNTAX_REL8,         # 7e jxx rel8
  X64_SYNTAX_REL8,         # 7f jxx rel8

  X64_SYNTAX_RM8_I8,       # 80 add/or/adc/sbb/and/sub/xor/cmp r/m8, imm8
  X64_SYNTAX_RD_I32,       # 81 add/or/adc/sbb/and/sub/xor/cmp r/m32, imm32
  
  X64_SYNTAX_INVALID       # 82 invalid opcode
  X64_SYNTAX_RD_I8,        # 83 add/or/adc/sbb/and/sub/xor/cmp r/m32, imm8

  X64_SYNTAX_RM8_R8,       # 84 test r/m8, r8
  X64_SYNTAX_RM32_R32,     # 85 test r/m32, r32

  X64_SYNTAX_R8_RM8,       # 86 xchg r8, r/m8
  X64_SYNTAX_R32_RM32,     # 87 xchg r32, r/m32
  
  X64_SYNTAX_RM8_R8,       # 88 mov r/m8, r8
  X64_SYNTAX_RM32_R32,     # 89 mov r/m32, r32
  X64_SYNTAX_R8_RM8,       # 8a mov r8, r/m8
  X64_SYNTAX_R32_RM32,     # 8b mov r32, r/m32
  X64_SYNTAX_RM16_SEG,     # 8c mov r/m16, seg
  X64_SYNTAX_CUSTOM,       # 8d lea 
  
  X64_SYNTAX_SEG_RM16,     # 8e mov seg, r/m16
  X64_SYNTAX_RMWQ,         # 8f pop r/m16/64

  X64_SYNTAX_NONE,         # 90 nop
  
  X64_SYNTAX_RAX_R32,      # 91 xchg eax, r32
  X64_SYNTAX_RAX_R32,      # 92 xchg eax, r32
  X64_SYNTAX_RAX_R32,      # 93 xchg eax, r32
  X64_SYNTAX_RAX_R32,      # 94 xchg eax, r32
  X64_SYNTAX_RAX_R32,      # 95 xchg eax, r32
  X64_SYNTAX_RAX_R32,      # 96 xchg eax, r32
  X64_SYNTAX_RAX_R32,      # 97 xchg eax, r32
  
  X64_SYNTAX_NONE,         # 98 cbw / cwde / cdqe
  X64_SYNTAX_NONE,         # 99 cwd / cdq / cqo
  X64_SYNTAX_INVALID,      # 9a far call (invalid in 64-bit)
  X64_SYNTAX_NONE,         # 9b    fwait
  X64_SYNTAX_NONE,         # 9c    pushf
  X64_SYNTAX_NONE,         # 9d    popf
  X64_SYNTAX_INVALID,      # 9e    sahf (invalid in 64-bit)
  X64_SYNTAX_INVALID,      # 9f    lahf (invalid in 64-bit)
  
  # a0    mov al, moffs8
  # a1    mov eax, moffs32
  # a2    mov moffs8, al
  # a3    mov moffs32, eax
  # a4    movsb
  # a5    movsw/d/q
  # a6    cmpsb
  # a7    cmpsw/d/q
  # a8    test al, imm8
  # a9    test eax, imm32
  # aa    stosb
  # ab    stosw/d/q
  # ac    lodsb
  # ad    lodsw/d/q
  # ae    scasb
  # af    scasw/d/q
  #
  # b0-b7 mov r8, imm8
  # b8-bf mov r32, imm32
  #
  # c0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, imm8
  # c1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, imm8
  # c2    near retn imm16
  # c3    near ret imm16
  # c4    les r32, m16:32 (invalid in 64-bit)
  # c5    lds r32, m16:32 (invalid in 64-bit)
  # c6    mov r/m8, imm8
  # c7    mov r/m32, imm32
  # c8    enter imm16, imm8
  # c9    leave
  # ca    far retn
  # cb    far ret
  # cc    int3
  # cd    int imm8
  # ce    into
  # cf    iret
  #
  # d0    rol/ror/rcl/rcr/shl/rhr/sar r/m8, 1
  # d1    rol/ror/rcl/rcr/shl/rhr/sar r/m32, 1
  # d2    rol/ror/rcl/rcr/shl/rhr/sar r/m8, cl
  # d3    rol/ror/rcl/rcr/shl/rhr/sar r/m32, cl
  # d4    aam (invalid in 64-bit)
  # d5    aad (invalid in 64-bit)
  # d6    invalid opcode
  # d7    xlat
  # d8-df esc (escape to x87)
  #
  # e0    loopnz rel8
  # e1    loopz rel8
  # e2    loop rel8
  # e3    jrcxz rel8
  # e4    in al, imm8
  # e5    in eax, imm8
  # e6    out imm8, al
  # e7    out imm8, eax
  # e8    call rel32
  # e9    jmp rel32
  # ea    jmp ptr16:32 (invalid in 64-bit)
  # eb    jmp rel8
  # ec    in al, dx
  # ed    in eax, dx
  # ee    out dx, al
  # ef    out dx, eax
  #
  # f0    lock prefix
  # f1    int1
  # f2    repne prefix
  # f3    repe prefix
  # f4    hlt
  # f5    cmc
  # f6    test/not/neg/mul/imul/div/idiv (8-bit)
  # f7    test/not/neg/mul/imul/div/idiv (16-bit)
  # f8    clc
  # f9    stc
  # fa    cli
  # fb    sti
  # fc    cld
  # fd    std
  # fe    inc/dec r/m8
  # ff    inc/dec r/m16/32/64
  # ff    call(f) r/m64
  # ff    push r/m64
]
