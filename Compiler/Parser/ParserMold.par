/******************************************************************************/
/*                                                                            */
/* This file is part of Mold project.                                         */
/* Copyright (C) 2015, 2019 Sylwester Wysocki (sw143@wp.pl)                   */
/*                                                                            */
/* This program is free software: you can redistribute it and/or modify       */
/* it under the terms of the GNU General Public License as published by       */
/* the Free Software Foundation, either version 3 of the License, or          */
/* (at your option) any later version.                                        */
/*                                                                            */
/* This program is distributed in the hope that it will be useful,            */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of             */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              */
/* GNU General Public License for more details.                               */
/*                                                                            */
/* You should have received a copy of the GNU General Public License          */
/* along with this program. If not, see <http://www.gnu.org/licenses/>        */
/*                                                                            */
/******************************************************************************/

#!language "mold";
#default action [* @@ = @1 *];
#whitespaces @WHITE;

@WHITE   ' ' | "/*" .* "*/" | '#' .* '\r\n'+;
@EOL     '\r\n'+;
@IDENT   'A-Za-z_' 'A-Za-z0-9_'* ;

@STRING              '"' !'"\r\n'* '"'    | '\'' !'\'\r\n'* '\'' ;
@UNTERMINATED_STRING '"' !'"'*     '\r\n' | '\'' !'\''*     '\r\n' ;

@FLOAT   '0-9'+ '.' '0-9'+;
@INTEGER '0-9'+ | "0x" '0-9a-fA-F'+;
@TRUE    "true";
@FALSE   "false";

#left '=';
#left '+' '-';
#left '*' '/' "//";
#left "is" "isnt" '<' '>' "<=" ">=";
#left "and" "or";
#left "not";

//
// Defining the grammar
//

program$ : stmt_list =program;

stmt_list : stmt* [* @@ = null *] =block;

stmt
  : lval '=' rval @EOL                   =store
  | "const" var '=' rval_imm_array @EOL  =store
  | function_call @EOL
  | method_call @EOL
  | stmt_import @EOL
  | function_declaration @EOL     =function
  | class_declaration @EOL        =class
  | stmt_if @EOL                  =if
  | stmt_for @EOL                 =for
  | stmt_while @EOL               =while
//TODO  | stmt_switch @EOL              =switch
  | stmt_for_values @EOL          =for_values
  | stmt_for_keys @EOL            =for_keys
  | stmt_for_keys_values @EOL     =for_keys_values
  | stmt_for_indexes @EOL         =for_indexes
  | stmt_for_indexes_values @EOL  =for_indexes_values
//  | stmt_read @EOL
//  | stmt_write @EOL
  | @EOL
  ;

//
// Import module.
//

stmt_import
  : "import" module_name [* @@ = 'import' *] =call;

module_name
  : string =string;

//
// Functions.
//

function_call
  : @IDENT '(' ')'           [* @@ = @1 *]       =call //[* @@ = {'name': @1, 'parameters': []} *]
  | @IDENT '(' call_list ')' [* @@ = @1 *]       =call //[* @@ = {'name': @1, 'parameters': @3} *]
  | "print" call_list_line   [* @@ = 'print' *]  =call //[* @@ = {'name': 'print', 'parameters': @2} *]
  | "global" call_list_line  [* @@ = 'global' *] =call //[* @@ = {'name': 'print', 'parameters': @2} *]
  ;

function_begin
  : "function" @IDENT '(' ')'                            [* @@ = {'name': @2, 'parameters': []} *]
  | "function" @IDENT '(' ')' "->" @IDENT                [* @@ = {'name': @2, 'parameters': [], 'rv': @6} *]
  | "function" @IDENT '(' parameter_list ')'             [* @@ = {'name': @2, 'parameters': @4} *]
  | "function" @IDENT '(' parameter_list ')' "->" @IDENT [* @@ = {'name': @2, 'parameters': @4, 'rv': @7} *]
  ;

function_end
  : "endfunction";

function_body
  : stmt_list
  ;

function_declaration
  : function_begin @EOL function_body function_end
  ;

//
// Comma separated lists.
//

parameter_list
  : parameter_list ',' @IDENT      [* @1[len(@1)] = @3
                                      @@ =@1 *]

  | parameter_list ',' @EOL @IDENT [* @1[len(@1)] = @4
                                      @@ = @1 *]

  | @EOL parameter_list            [* @@ = @2 *]
  | @IDENT                         [* @@ = [@1] *]
  | @EOL
  ;

call_list
  : call_list ',' rval        [* @1[len(@1)] = @3
                                 @@ =@1 *]

  | call_list ',' @EOL rval   [* @1[len(@1)] = @4
                                 @@ = @1 *]

  | @EOL call_list            [* @@ = @2 *]
  | call_list @EOL            [* @@ = @1 *]
  | rval                      [* @@ = [@1] *]
  | @EOL
  ;

call_list_line
  : call_list_line ',' rval [* @1[len(@1)] = @3
                               @@ =@1 *]

  | rval                    [* @@ = [@1] *]
  ;

//
// Key:value list.
//

key_value_list
  : key_value_list ',' map_key ':' map_val
  | key_value_list ',' @EOL map_key ':' map_val
  | key_value_list @EOL
  | @EOL key_value_list
  | map_key ':' map_val
  | @EOL
  ;

map_key : string =string;
map_val : rval;

value_list
  : value_list ',' rval
  | value_list ',' @EOL rval
  | value_list @EOL
  | @EOL value_list
  | rval
  | @EOL
  ;

// TODO: Handle strings and bool too.
imm_list
  : imm_list ',' expr_imm    [* @1[len(@1)] = @3
                                @@ = @1 *]

  | imm_list ',' @EOL expr_imm [* @1[len(@1)] = @4
                                  @@ = @1 *]

  | imm_list @EOL [* @@ = @1 *]
  | @EOL imm_list [* @@ = @2 *]
  | expr_imm      [* @@ = [@1] *]
  | @EOL
  ;

//
// Comma separated identifiers list.
//

ident_list
  : ident_list ',' @IDENT
  | @IDENT
  ;


//
// I/O
// write to stdout values x,y,z
// read from stdin values x,y,z
//

stmt_read
  : "read" "from" rval "values" call_list_line [* @@ = 'read' *] =call
  ;

stmt_write
  : "write" "to" rval "values" call_list_line  [* @@ = 'write' *] =call
  ;

//
// Classes.
//

class_begin
  : "class" @IDENT                  [* @@ = {'name': @2} *]
  | "class" @IDENT "extends" @IDENT [* @@ = {'name': @2, 'baseName': @4} *]
  ;

class_end
  : "endclass";

class_body
  : class_body_item*;

class_body_item
  : method_declaration | @EOL;

class_declaration
  : class_begin @EOL class_body class_end;

method_call
  : expr '.' @IDENT '(' ')'           [* @@ = @3 *] =vcall
  | expr '.' @IDENT '(' call_list ')' [* @@ = @3 *] =vcall
  ;

method_begin
  : "method" @IDENT '(' ')'                            [* @@ = {'name': @2, 'parameters': []} *]
  | "method" @IDENT '(' ')' "->" @IDENT                [* @@ = {'name': @2, 'parameters': [], 'rv': @6} *]
  | "method" @IDENT '(' parameter_list ')'             [* @@ = {'name': @2, 'parameters': @4} *]
  | "method" @IDENT '(' parameter_list ')' "->" @IDENT [* @@ = {'name': @2, 'parameters': @4, 'rv': @7} *]
  ;

method_end
  : "endmethod";

method_body
  : stmt_list;

method_declaration
  : method_begin @EOL method_body method_end =method;

//
// Constructor call.
//

new_call
  : new_begin @IDENT '(' ')'          [* @@ =  @2 *] =new
  | new_begin @IDENT '('call_list ')' [* @@ =  @2 *] =new
  ;

new_begin
 : "new" [* @@ = '__this_placeholder__' *] =var;

//
// Expressions.
//

expr
  : expr '+' expr     =add
  | expr '-' expr     =sub
  | expr '*' expr     =mul
  | expr '/' expr     =div
  | expr "//" expr    =idiv
  | '(' expr ')'
  | '-' expr          =neg
  | expr '[' expr ']' =index
  | expr '.' member   =index
  | imm
  | logic
  | expr_logic
  | var
  ;

//
// Logical.
//

// Logical primitive: true, false, x o y
logic
  : "not" logic       =not
  | rval "is" rval    =cmpeq
  | rval "isnt" rval  =cmpne
  | rval "<" rval     =cmplt
  | rval "<=" rval    =cmple
  | rval '>' rval     =cmpgt
  | rval ">=" rval    =cmpge
  | function_call
  | method_call
  | bool              =bool
  ;

// Complex logical expression built from primitves.
expr_logic
  : bool =bool
  | '(' logic ')'      [* @@ = @2 *]
  | '(' expr_logic ')' [* @@ = @2 *]
  | expr_logic "and" expr_logic =band
  | expr_logic "or"  expr_logic =bor
  ;

expr_logic_multiline
  : expr_logic "and" @EOL (expr_logic | expr_logic_multiline) =band
  | expr_logic "or"  @EOL (expr_logic | expr_logic_multiline) =bor
  ;

condition
  : logic
  | expr_logic
  | '(' expr_logic_multiline ')' [* @@ = @2 *]
  ;

//
// IF-ELSE-ENDIF
//

stmt_if
  : "if" condition @EOL stmt_list "endif"
  | "if" condition @EOL stmt_list "else" stmt_list "endif"
  | "if" condition @EOL stmt_list stmt_elif
  ;

stmt_elif
  : "elif" condition @EOL stmt_list "endif"                   =elif
  | "elif" condition @EOL stmt_list "else" stmt_list "endif"  =elif
  | "elif" condition @EOL stmt_list stmt_elif                 =elif
  ;

/*
TODO
//
// switch x
//   case 1
//     ...
//   case 2, 3, 4
//     ...
//   othwerwise
//     ..
// endswitch
//

stmt_switch
  : "switch" rval @EOL stmt_switch_case+ stmt_switch_otherwise? "endswitch"
  ;

stmt_switch_case
  : "case" imm_list @EOL stmt_list
  ;

stmt_switch_otherwise
  : "otherwise" @EOL stmt_list
  ;
*/

//
// For loop.
//

stmt_for
  : "for" var "in" rval ".." rval step?  stmt_list "endfor";

step
  : @EOL [* @@ = 1 *] =int
  | "step" rval
  ;

//
// for values v in box              (generic iteration over values)
// for keys k in box                (map iteration over keys)
// for keys k values v in box       (map iteration over key:value pairs)
// for indexes idx in box           (array iteration over indexes)
// for indexes idx values v in box  (array iteration over index:value pairs)
//

stmt_for_values
  : "for" "values" var "in" rval stmt_list "endfor";

stmt_for_keys
  : "for" "keys" var "in" rval stmt_list "endfor";

stmt_for_indexes
  : "for" "indexes" var "in" rval stmt_list "endfor";

stmt_for_keys_values
  : "for" "keys" var "values" var "in" rval stmt_list "endfor";

stmt_for_indexes_values
  : "for" "indexes" var "values" var "in" rval stmt_list "endfor";

//
// While loop.
//

stmt_while
  : "while" condition @EOL stmt_list "endwhile";

//
// Array initializers.
//

rval_array
  : '[' ']'
  | '[' value_list ']'
  ;

rval_imm_array
  : imm_array =array
  ;

rval_map
  : '{' '}'
  | '{' key_value_list '}'
  ;

imm_array
  : '[' imm_list ']' [* @@ = @2 *]
  ;

//
// L-value and R-value.
//

lval
  : var               //=loadr
  | expr '[' expr ']' =index
  | expr '.' member   =index
  ;

rval
  : expr
  | expr '[' expr ']' =index
  | expr '.' member   =index
  | var               //=load
  | new_call
  | function_call
  | method_call
  | imm
  | rval_array        =array
  | rval_map          =map
  | logic
  ;

//
// Basic leafs.
//

var : @IDENT =var;

member : @IDENT =member;

expr_imm
  : expr_imm '+'  expr_imm [* @@ = @1 + @3 *]
  | expr_imm '-'  expr_imm [* @@ = @1 - @3 *]
  | expr_imm '*'  expr_imm [* @@ = @1 * @3 *]
  | expr_imm '/'  expr_imm [* @@ = @1 / @3 *]
  | expr_imm "//" expr_imm [* @@ = @1 // @3 *]
  | '-' expr_imm           [* @@ = -@2 *]
  | '(' expr_imm ')'       [* @@ = @2 *]
  | integer
  | float
  | string
  | imm_array
  ;

imm : integer   =int
    | float     =float
    | string    =string
    ;

number
  : float
  | integer
  ;

integer
  : @INTEGER [* @@ = ParseInteger(@1) *]
  ;

float
  : @FLOAT [* @@ = ParseFloat(@1) *]
  ;

string
  : @STRING [* @@ = ''
               # Remove quotas.
               stringLen = len(@1)
               for idx in 1 .. stringLen - 1
                 @@ = @@ + @1[idx]
               endfor
            *]
  | error_unterminated_string
  ;

bool
  : @TRUE   [* @@ = true *]
  | @FALSE  [* @@ = false *]
  ;

//
// Common syntax errors.
//

error_unterminated_string
  : @UNTERMINATED_STRING [* this._handleError(line, column, 'unterminated string') *]
  ;
