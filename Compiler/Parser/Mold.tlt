<?xml version="1.0" standalone="yes"?>
<generator name="Mold">
  <code_localization />

  <!--
################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki (sw143@wp.pl)                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################
  -->

  <!--
  ****************************************************************************
  Escape sequences
  ****************************************************************************
  -->

  <!-- FIXME -->
  <!-- Backslash must be double-quoted -->
  <escape-sequence for="\" do= />
  <!-- Escape double quotation marks -->
  <escape-sequence for="&#x22;" do= />
  <!-- END OF FIXME -->

  <!--
  ****************************************************************************
  Value-stack templates
  ****************************************************************************
  -->

  <vstack_def_type>any</vstack_def_type>
  <vstack_term_type>any</vstack_term_type>
  <vstack_union_att>@@value-type-id</vstack_union_att>
  <vstack_union_def>@@attribute: null, </vstack_union_def>
  <vstack_single>value: null</vstack_single>
  <vstack_union_start>value: {</vstack_union_start>
  <vstack_union_end>}</vstack_union_end>

  <!--
  ****************************************************************************
  Semantic action templates
  ****************************************************************************
  -->
  <action_start>        elif currentIdx is @@production-number
      </action_start>
  <action_end>

</action_end>

  <action_single>stackValues[stackIdx - @@offset]</action_single>

  <action_union>stackValues[stackIdx - @@offset].@@attribute</action_union>
  <action_lhs_single>     currentRet</action_lhs_single>
  <action_lhs_union>     currentRet.@@attribute</action_lhs_union>

  <action_set_lhs>     currentLhs = @@sym</action_set_lhs>

  <!--
  ****************************************************************************
  Semantic terminal action templates
  ****************************************************************************
  -->

  <scan_action_start>&#x09;&#x09;&#x09;&#x09;case @@symbol-number:&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;</scan_action_start>
  <scan_action_end>&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x09;&#x09;&#x09;&#x09;break;
  </scan_action_end>

  <scan_action_begin_offset>@@prefix_lexem( pcb )</scan_action_begin_offset>
  <scan_action_end_offset>currentLen</scan_action_end_offset>

  <scan_action_ret_single>stackValues[stackIdx]</scan_action_ret_single>

  <!-- TODO: Is it needed?
    <scan_action_ret_union>stack[stackIdx].@@attribute</scan_action_ret_union>
  -->

  <scan_action_set_symbol>currentSym = @@sym</scan_action_set_symbol>

  <!--
  ****************************************************************************
  Parse table templates
  ****************************************************************************
  -->

  <defprod>
    <col>@@production-number</col>
    <col_sep>, </col_sep>
  </defprod>

  <acttab>
    <row_start>  [ @@number-of-columns</row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>, @@symbol,@@action,@@index </col>
    <col_sep></col_sep>
  </acttab>

  <gotab>
    <row_start>  [ @@number-of-columns</row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>, @@symbol,@@action,@@index </col>
    <col_sep></col_sep>
  </gotab>

  <!--
  ****************************************************************************
  Lexer
  ****************************************************************************
  -->

  <dfa_select>
    <col>@@machine</col>
    <col_sep>, </col_sep>
  </dfa_select>

  <dfa_char>
    <col>@@from, @@to</col>
    <col_sep>, </col_sep>
  </dfa_char>

  <dfa_trans>
    <col>@@goto</col>
    <col_sep>, </col_sep>
  </dfa_trans>

  <dfa_idx>
    <row_start>  [ </row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>@@index * 2</col>
    <col_sep>, </col_sep>
  </dfa_idx>

  <dfa_accept>
    <row_start>  [ </row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>@@accept</col>
    <col_sep>, </col_sep>
  </dfa_accept>

  <!--
  ****************************************************************************
  Symbol and production information tables
  ****************************************************************************
  -->

  <symbols>
    <col>  @@greedy /* @@type | @@lexem | @@whitespace | @@symbol |' @@emit' | '@@symbol-name' */</col>
    <col_sep>,&#x0A;</col_sep>
  </symbols>

  <productions>
    <col>  '@@emit', @@length, @@lhs /* @@production-number | '@@production' */</col>
    <col_sep>,&#x0A;</col_sep>
  </productions>

  <!--
  ****************************************************************************
  Parser program
  ****************************************************************************
  -->

<file filename="@@basename.mold"># Parser module generated by unicc from @@filename.
# DO NOT EDIT THIS FILE MANUALLY, IT WILL GO AWAY!
@@prologue

################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        #
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         #
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

# -----------------------------------------------------------------------------
#                                Constants
# -----------------------------------------------------------------------------

UNICC_ERROR  = 0
UNICC_REDUCE = 1
UNICC_SHIFT  = 2
UNICC_EOF    = 0

UNICC_DEBUG = false

PRODUCTION_EMIT_IDX       = 0
PRODUCTION_LENGTH_IDX     = 1
PRODUCTION_LHS_IDX        = 2
PRODUCTION_DEFINITION_IDX = 3 # Unused, comment off when needed

# -----------------------------------------------------------------------------
#                              Helper functions
# -----------------------------------------------------------------------------

null = 0

function debug(msg)
  global UNICC_DEBUG
  if UNICC_DEBUG is true
    print 'debug:', msg
  endif
endfunction

# -----------------------------------------------------------------------------
#                                Parse tables
# -----------------------------------------------------------------------------

# Action Table
const @@prefix_act = [
@@action-table
]

# GoTo Table
const @@prefix_go = [
@@goto-table
]

# Default productions per state
const @@prefix_def_prod = [
  @@default-productions
]

# DFA selection table
const @@prefix_dfa_select = [
  @@dfa-select - 0
]

# DFA index table
const @@prefix_dfa_idx = [
@@dfa-index
]

# DFA transition chars
const @@prefix_dfa_chars = [
  @@dfa-char
]

# DFA transitions
const @@prefix_dfa_trans = [
  @@dfa-trans
]

# DFA acception states
const @@prefix_dfa_accept = [
@@dfa-accept
]

# Symbol information table
const @@prefix_symbolsGreedy = [
@@symbols
]

# Production information table
const @@prefix_productions = [
@@productions
]

# -----------------------------------------------------------------------------
#                                Helper classes
# -----------------------------------------------------------------------------

#
# Abstract Syntax Tree
#

NodeId = 0

class AST
  method constructor(emit, token)
    global null
    global NodeId

    this.parent = null
    this.child  = null
    this.prev   = null
    this.next   = null

    this.emit  = emit
    this.token = token
    this.id    = NodeId

    NodeId = NodeId + 1
  endmethod

  method _printInternal(node, deepIdx)
    global null

    while node isnt null
      prefix = ''
      for i in 0 .. deepIdx
        prefix = prefix + '..'
      endfor

      if (node.token isnt null)
        print prefix + node.emit, node.token
      else
        print prefix + node.emit
      endif

      this._printInternal(node.child, deepIdx + 1)

      node = node.next
    endwhile
  endmethod

  method print()
    print '----------------------------------'
    print ' Abstract Syntax Tree'
    print '----------------------------------'
    this._printInternal(this, 0)
  endmethod

  method _convertInternal(node, deepIdx) -> rv
    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_REFERENCE, AST_OPCODE_CALL, AST_OPCODE_BOOL_NOT
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV, AST_OPCODE_INC, AST_OPCODE_DEC
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_INVOKE_METHOD

    global AST_OPCODE_PROGRAM, AST_OPCODE_BLOCK, AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_FOR_VALUES_RANGE, AST_OPCODE_WHILE
    global AST_OPCODE_CALL, AST_OPCODE_FUNCTION, AST_OPCODE_IF, AST_OPCODE_SWITCH
    global AST_OPCODE_VARIABLE, AST_OPCODE_REFERENCE
    global AST_OPCODE_CLASS, AST_OPCODE_CLASS_METHOD, AST_OPCODE_INVOKE_METHOD
    global AST_OPCODE_NOP, AST_DATA_STRING, AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_CALL_DELETE

    global AST_OPCODE_FOR_VALUES
    global AST_OPCODE_FOR_INDEXES
    global AST_OPCODE_FOR_INDEXES_VALUES
    global AST_OPCODE_FOR_KEYS
    global AST_OPCODE_FOR_KEYS_VALUES

    global null

    rv          = {}
    children    = []
    childrenCnt = 0
    emit        = node.emit
    value       = node.token

    if emit is 'int'
      opcode = AST_DATA_INTEGER

    elif emit is 'float'
      opcode = AST_DATA_DOUBLE

    elif emit is 'string'
      opcode = AST_DATA_STRING

    elif emit is 'bool'
      opcode = AST_DATA_BOOL

    elif emit is 'unused'
      opcode = AST_DATA_OBJECT

    elif emit is 'null'
      opcode = AST_DATA_NULL

    elif emit is 'undefined'
      opcode = AST_DATA_UNDEFINED

    elif emit is 'array'
      opcode = AST_DATA_ARRAY

    elif emit is 'map'
      opcode = AST_DATA_MAP

    elif emit is 'program'
      opcode = AST_OPCODE_PROGRAM

    elif emit is 'block'
      opcode = AST_OPCODE_BLOCK

    elif emit is 'print'
      opcode = AST_OPCODE_CALL

    elif emit is 'call'
      opcode = AST_OPCODE_CALL

    elif emit is 'neg'
      opcode = AST_OPCODE_NEG

    elif emit is 'add'
      opcode = AST_OPCODE_ADD

    elif emit is 'sub'
      opcode = AST_OPCODE_SUB

    elif emit is 'mul'
      opcode = AST_OPCODE_MUL

    elif emit is 'div'
      opcode = AST_OPCODE_DIV

    elif emit is 'inc'
      opcode = AST_OPCODE_INC

    elif emit is 'dec'
      opcode = AST_OPCODE_DEC

    elif emit is 'idiv'
      opcode = AST_OPCODE_IDIV

    elif emit is 'store'
      opcode = AST_OPCODE_DECLARE_OR_ASSIGN

    elif emit is 'var'
      opcode = AST_OPCODE_VARIABLE

    elif emit is 'index'
      opcode = AST_OPCODE_REFERENCE

    elif emit is 'member'
      opcode = AST_DATA_STRING

    elif emit is 'for'
      opcode = AST_OPCODE_FOR_VALUES_RANGE

    elif emit is 'for_values'
      opcode = AST_OPCODE_FOR_VALUES

    elif emit is 'for_indexes'
      opcode = AST_OPCODE_FOR_INDEXES

    elif emit is 'for_keys'
      opcode = AST_OPCODE_FOR_KEYS

    elif emit is 'for_keys_values'
      opcode = AST_OPCODE_FOR_KEYS_VALUES

    elif emit is 'for_keys_indexes_values'
      opcode = AST_OPCODE_FOR_INDEXES_VALUES

    elif emit is 'while'
      opcode = AST_OPCODE_WHILE

    elif emit is 'cmpeq'
      opcode = AST_OPCODE_COMPARE_EQ

    elif emit is 'cmpne'
      opcode = AST_OPCODE_COMPARE_NEQ

    elif emit is 'cmpgt'
      opcode = AST_OPCODE_COMPARE_GT

    elif emit is 'cmpge'
      opcode = AST_OPCODE_COMPARE_GE

    elif emit is 'cmplt'
      opcode = AST_OPCODE_COMPARE_LT

    elif emit is 'cmple'
      opcode = AST_OPCODE_COMPARE_LE

    elif emit is 'bor'
      opcode = AST_OPCODE_BOOL_OR

    elif emit is 'band'
      opcode = AST_OPCODE_BOOL_AND

    elif emit is 'not'
      opcode = AST_OPCODE_BOOL_NOT

    elif emit is 'function'
      opcode = AST_OPCODE_FUNCTION
      rv['name']      = value['name']
      rv['params']    = value['parameters']
      rv['paramsCnt'] = len(value['parameters'])
      rv['rv']        = value['rv']

    elif emit is 'if'
      opcode = AST_OPCODE_IF

    elif emit is 'elif'
      opcode = AST_OPCODE_IF

    elif emit is 'class'
      opcode = AST_OPCODE_CLASS
      rv['name']     = value['name']
      rv['baseName'] = value['baseName']

    elif emit is 'method'
      opcode = AST_OPCODE_CLASS_METHOD

      newParams = ['this']
      params    = value['parameters']
      paramsCnt = len(params)

      for idx in 0 .. paramsCnt
        newParams[idx + 1] = params[idx]
      endfor

      rv['name']      = value['name']
      rv['params']    = newParams
      rv['paramsCnt'] = len(newParams)
      rv['rv']        = value['rv']

    elif emit is 'vcall'
      opcode = AST_OPCODE_INVOKE_METHOD

    elif emit is 'new'
      opcode = AST_OPCODE_CALL_NEW

    elif emit is 'delete'
      opcode = AST_OPCODE_CALL_DELETE

    else
      # TODO: Remove opcode assign.
      opcode = -1
      die('Unrecognized opcode ' + emit)
    endif

    rv['opcode'] = opcode
    rv['value']  = value
    rv['id']     = node.id

    # TODO: Review it.
    rv.line     = node.line
    rv.column   = node.column
    rv.filePath = node.filePath

    node = node.child

    while node isnt null
      newChild              = this._convertInternal(node, deepIdx + 1)
      children[childrenCnt] = newChild
      childrenCnt           = childrenCnt + 1
      node                  = node.next

      newChild.parent = node
    endwhile

    rv['children']    = children
    rv['childrenCnt'] = childrenCnt
  endmethod

  method convert() -> rv
    #print '----------------------------------'
    #print ' Convert Abstract Syntax Tree'
    #print '----------------------------------'

    rv = this._convertInternal(this, 0)
  endmethod

endclass

# -----------------------------------------------------------------------------
#                                Parser class
# -----------------------------------------------------------------------------

class Parser
  method constructor()
    # Map of collected explicit constants.
    # TODO: Handle per module constants.
    this.constantsMap = {}
  endmethod

  method _handleError(line, column, msg)
    die(this.filePath + ':' + str(line) + ':' + str(column) + ': error: ' + msg)
  endmethod

  method _parseInternal(text) -> ast
    global null
    global UNICC_ERROR, UNICC_REDUCE, UNICC_SHIFT
    global PRODUCTION_LHS_IDX
    global PRODUCTION_LENGTH_IDX
    global PRODUCTION_EMIT_IDX
    global UNICC_EOF

    global _symbolsGreedy, _productions, _act, _def_prod
    global _dfa_idx, _dfa_chars, _dfa_trans, _dfa_accept, _dfa_select, _go

    ast        = null
    goOn       = true
    innerGoOn  = true
    masterIter = 1

    #
    # Initialize Parser Control Block.
    #

    debug('going to parse [' + str(len(text)) + '] bytes')

    input    = text
    inputIdx = 0
    inputLen = len(text)
    line     = 1
    column   = 1

    # Buffer first lookup byte.
    # TODO: Clean up this mess.
    lookupByte = UNICC_EOF
    if inputLen > 0
      lookupByte = input[0]
    endif

    buf      = [lookupByte]
    bufSize  = 1
    inputIdx = 1

    # Map of collected explicit constants.
    constantsMap = this.constantsMap

    # Current parser state.
    currentAct = 0
    currentIdx = 0
    currentLhs = 0
    currentRet = null

    stackIdx     = 0
    stackValues  = [0]
    stackNodes   = [0]
    stackStates  = [0]
    stackLines   = [0]
    stackColumns = [0]

    # Begin of main parser loop
    debug('falling into main parser loop')

    while goOn is true
      debug('')
      debug('------------------------------')
      debug('MASTER ITER #' + str(masterIter))

      # Get symbol.
      currentSym = -1
      currentLen = 0

      if _dfa_select[stackStates[stackIdx]] > -1
        debug('starting lex...')

        dfa_st = 0
        length = 0
        chr    = 0
        mach   = @@prefix_dfa_select[stackStates[stackIdx]]
        next   = ord(buf[0])

        if next is UNICC_EOF
          # End of file - no more data.
          currentSym = @@eof

        else
          # The are still some input data to read.
          # Read next token.
          while (dfa_st &gt;= 0) and (next isnt UNICC_EOF)
            lexInnerGoOn = true
            chr          = _dfa_idx[mach][dfa_st]
            dfa_st       = -1

            while (lexInnerGoOn is true) and (_dfa_chars[chr] &gt; -1)
              if (next &gt;= _dfa_chars[chr]) and (next &lt;= _dfa_chars[chr + 1])
                dfa_st =  _dfa_trans[chr // 2]

                if _dfa_accept[mach][dfa_st] &gt; 0
                  currentLen = length + 1
                  currentSym = _dfa_accept[mach][dfa_st] - 1

                  if (currentSym is @@eof) or (_symbolsGreedy[currentSym] is 0)
                    # End of file or non-greedy symbol.
                    dfa_st = -1
                  endif
                endif

                # Get next char from input.
                length              = length + 1
                numberOfBytesToRead = length - bufSize + 2

                for idx in 0 .. numberOfBytesToRead
                  # Get next character from input stream
                  if inputIdx &lt; inputLen
                    nextChar = input[inputIdx]
                    inputIdx = inputIdx + 1
                  else
                    nextChar = UNICC_EOF
                  endif

                  buf[bufSize] = nextChar
                  bufSize      = bufSize + 1
                endfor

                next         = ord(buf[length])
                lexInnerGoOn = false
              endif

              chr = chr + 2
            endwhile
          endwhile
        endif

        debug('lex done: sym=[' + str(currentSym) + ']')

      elif buf[0] is UNICC_EOF
        currentSym = @@eof
      endif

      debug('got symbol: sym=[' + str(currentSym) + ']' + ', len=[' + str(currentLen) + ']')

      # Get action.
      rv        = -1
      actionIdx = 1
      state     = stackStates[stackIdx]
      act       = _act[state]
      cnt       = act[0] * 3

      while (rv is -1) and (actionIdx &lt; cnt)
        if act[actionIdx] is currentSym
          currentAct = act[actionIdx + 1]

          if currentAct is UNICC_ERROR
            # Force parse error!
            rv = 0
          else
            currentIdx = act[actionIdx + 2]
            rv = 1
          endif
        endif

        actionIdx = actionIdx + 3
      endwhile

      if rv is -1
        # Default production.
        currentIdx = _def_prod[state]
        if currentIdx &gt; -1
          # Reduce.
          currentAct = 1
          rv = 1
        else
          rv = 0
        endif
      endif

      debug('got action: rv=[' + str(rv) + '], act=[' + str(currentAct) + '], idx=[' + str(currentIdx) + ']')

      if rv is 0
        this._handleError(line, column, 'syntax error')
      endif

      # Shift
      if bitand(currentAct, UNICC_SHIFT) isnt 0
        debug('going to shift...')
        nextChar = buf[currentLen]
        stackIdx = stackIdx + 1

        # Execute scanner actions, if existing.
        # Here, UNICC_ON_SHIFT is set to 1, so that shifting-
        # related operations will be performed.
        # Scan actions.
        if false
@@scan_actions
        else
          @@top-value = buf[0]
        endif

        if bitand(currentAct, UNICC_REDUCE) isnt 0
          stackStates[stackIdx] = -1
        else
          stackStates[stackIdx] = currentIdx
        endif

        stackLines[stackIdx]   = line
        stackColumns[stackIdx] = column

        # Pop value from buffer.
        # TODO: Optimize it.
        newValue = ''
        for idx in 0 .. currentLen
          newValue = newValue + buf[idx]
        endfor
        @@top-value = newValue

        stackNodes[stackIdx] = null
        buf[currentLen] = nextChar

        # Perform the shift on input
        if (currentSym isnt @@eof) and (currentSym isnt @@goal-value)

          #
          # BEGIN OF CLEAR INPUT
          #

          if currentLen &gt; 0
            # Update counters for line and column
            for idx in 0 .. currentLen
              if ord(buf[idx]) is 10
                line   = line + 1
                column = 1
              else
                column = column + 1
              endif
            endfor

            # TODO: Optimize it,
            newBufCnt = bufSize - currentLen
            for idx in 0 .. newBufCnt
              buf[idx] = buf[idx + currentLen]
            endfor

            bufSize = newBufCnt
          else
            bufSize  = 0
          endif

          if bufSize is 0
            # Reload one lookup byte.
            buf[0]   = input[inputIdx]
            bufSize  = 1
            inputIdx = inputIdx + 1
          endif

          #
          # END OF CLEAR INPUT
          #

          currentSym = -1
          currentLen = 0
        endif

        debug('shifted')
      endif

      # Reduce
      innerGoOn  = true
      reduceIter = 1

      while (innerGoOn is true) and (bitand(currentAct, UNICC_REDUCE) isnt 0)
        debug('')
        debug('------------------------------')
        debug('REDUCE ITER #' + str(masterIter) + '.' + str(reduceIter))

        # Set default left-hand side
        # Run reduction code
        # TODO: Use switch
        if false
          @@actions
        endif

        currentLhs              = _productions[3 * currentIdx + PRODUCTION_LHS_IDX]
        currentProductionLength = _productions[3 * currentIdx + PRODUCTION_LENGTH_IDX]
        emit                    = _productions[3 * currentIdx + PRODUCTION_EMIT_IDX]

        # Drop right-hand side
        node = null

        for i in 0 .. currentProductionLength
          if stackNodes[stackIdx] isnt null
            if node isnt null
              while (node.prev isnt null)
                node = node.prev
              endwhile

              node.prev = stackNodes[stackIdx]
              stackNodes[stackIdx].next = node
            endif

            node = stackNodes[stackIdx]
            stackNodes[stackIdx] = null
          endif

          stackIdx = stackIdx - 1
        endfor

        if node isnt null
          lnode = stackNodes[stackIdx]

          if lnode isnt null
            while lnode.next isnt null
              lnode = lnode.next
            endwhile

            lnode.next = node
            node.prev  = lnode
          else
            stackNodes[stackIdx] = node
          endif
        endif

        if emit isnt ''
          node                 = new AST(emit, currentRet)
          node.child           = stackNodes[stackIdx]
          stackNodes[stackIdx] = node

          # TODO: Review it.
          node.line     = line
          node.column   = column
          node.filePath = this.filePath
        endif

        debug('goal symbol? (lhs=[' + str(currentLhs) + '], goal=[' + str(@@goal) + '], stackIdx=[' + str(stackIdx) + '])')

        # Goal symbol reduced, and stack is empty?
        if (currentLhs is @@goal) and (stackIdx is 0)
          #
          # BEGIN OF CLEAR INPUT
          #

          if currentLen &gt; 0
            # Update counters for line and column
            for idx in 0 .. currentLen
              if ord(buf[idx]) is 10
                line   = line + 1
                column = 1
              else
                column = column + 1
              endif
            endfor

            # TODO: Optimize it,
            newBufCnt = bufSize - currentLen
            for idx in 0 .. newBufCnt
              buf[idx] = buf[idx + currentLen]
            endfor

            bufSize = newBufCnt
          else
            bufSize  = 0
          endif

          if bufSize is 0
            # Reload one lookup byte.
            buf[0]   = input[inputIdx]
            bufSize  = 1
            inputIdx = inputIdx + 1
          endif

          #
          # END OF CLEAR INPUT
          #

          stackValues[stackIdx] = currentRet

          ast        = stackNodes[stackIdx]
          currentSym = -1
          currentLen = 0
          innerGoOn  = false

        else
          # Get goto.
          rv    = 0
          goIdx = 1
          state = stackStates[stackIdx]
          go    = _go[state]
          cnt   = go[0] * 3

          while (rv is 0) and (goIdx &lt; cnt)
            if go[goIdx] is currentLhs
              currentAct = go[goIdx + 1]
              currentIdx = go[goIdx + 2]
              rv         = 1
            endif

            goIdx = goIdx + 3
          endwhile

          # Push new item to state stack.
          stackIdx               = stackIdx + 1
          stackNodes[stackIdx]   = null
          stackValues[stackIdx]  = currentRet
          stackLines[stackIdx]   = line
          stackColumns[stackIdx] = column

          if bitand(currentAct, UNICC_REDUCE) isnt 0
            stackStates[stackIdx] = -1
          else
            stackStates[stackIdx] = currentIdx
          endif
        endif

        # Count reduce iters for debug purposes.
        reduceIter = reduceIter + 1

        debug('reduced')
      endwhile

      debug('END CONDITION: reduce=[' + str(bitand(currentAct, UNICC_REDUCE)) + '], idx=[' + str(currentIdx) +'], goalIdx=[' + str(@@goal-production) + ']')

      if (bitand(currentAct, UNICC_REDUCE) isnt 0) and (currentIdx is @@goal-production)
        goOn = false
      endif

      masterIter = masterIter + 1

      if masterIter > 1000000
        die('MAX ITERS reached!')
      endif
    endwhile
  endmethod

  method parseFile(path) -> ast
    # Load source code from file.
    source        = FileLoad(path)
    this.filePath = path

    # Parse source into AST tree.
    ast = this._parseInternal(source)
  endmethod

  method parseText(text) -> ast
    this.filePath = ''
    ast           = this._parseInternal(text)
  endmethod

endclass

</file>
</generator>
