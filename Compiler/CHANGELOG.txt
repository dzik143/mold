0.5.20201020 (released on 2020-10-20):
--------------------------------------

  Internal maintain:
    - MIR: Addded cmp_is_typeof and cmp_is_not_typeof opcodes,
    - MIR: Simplify code for unimplemented methods,
    - MIR: Use integer for MIR1 opcodes,
    - Translator: Skip unused call params,
    - Translator: Removed obsolete _loadImmAsVariant() call,
    - X64: Split code into routine-sorted files,
    - X64: Don't use proc/endp macros,
    - X64: Don't use library/import macros (imports section).

  Dropped syntax:
    - Function parameters can not be overwritten anymore.

0.4.20200831 (released on 2020-08-31):
--------------------------------------

  New syntax:
    - Built-in conditions x is/isnt typename:
      - x is/isnt undefined,
      - x is/isnt defined,
      - x is/isnt integer,
      - x is/isnt float,
      - x is/isnt boolean,
      - x is/isnt string,
      - x is/isnt array,
      - x is/isnt map,
      - x is/isnt object.

  Dropped syntax:
    - Negative array indexes x[-1] generate runtime error from now.

  Bug fixes:
    - Crash on one-character string join,
    - Crash if one-character string is used as map key,
    - Crash on overlapped join: y = x ~ y.

  Internal maintain:
    - X64: Create map/array from init list,
    - X64: Non-variant params and return value in ordinary calls,
    - X64: Skip vtable entries for methods used only as ordinary calls,
    - X64: Simplified passing return value,
    - X64: Format driven print (internal only),
    - Translator: Better type guess,
    - Translator: Better temp vars allocation,
    - Translator: Simpler AST node creation.

0.3.20200720 (released on 2020-07-20):
--------------------------------------

  Dropped syntax:
    - x[key] is not allowed for maps anymore, use x{key} instead.

  New language syntax:
    - unimplemented method foo(x,y,z) -> rv

  Implemented:
    - Build-in null variable

    - Relative array selectors:
      x[@last]        - the last item in the array            (lval, rval)
      x[@first]       - the first item in the array           (lval, rval)
      x[@afterlast]   - placeholder for new item at the end   (lval)
      x[@beforefirst] - placeholder for new item at the begin (lval)

   - AST optimizer: remove calls to empty functions
   - X64 optimizer: stub for x[i] load with native type

  Internal maintain:
    - Core: Major clean up around error handling
    - Parser: Removed AST convert step
    - Parser: Use built-in substr internally
    - Parser: Rewritten code building AST tree
    - Translator: Better static type adjustment
    - Translator: More static errors with source line presented

0.2.20200706 (released on 2020-07-06)
-------------------------------------
  Implemented:
    - RDTSC based profiler (--profiler option)

  Improved:
    - Faster x64 code (load/store indexes with int32 pointers)
    - Avoid creating multiple Parser() objects per each module load
    - Distinguish variant and string types while generating code

  New language syntax:
    - Distinguish reference by index (integer) and by key (string):
      x = [1,2,3,4]
      print x[0]

      y = {'key': 1234}
      print y{'key'}

    - Stub for relative array indexes (x[@selector]).

    - x ~ y for string concatenation, x + y is not correct anymore.

  Internal maintain:
    - Major clean up the parser code

0.1.20191126 (released on 2019-11-26)
-------------------------------------

  First release with assigned version.

  Implemented:
    - Self-hosted interpreter,
    - Self-hosted X64 compiler,
    - Tests,
    - Intermediate MIR language,
    - Basic -O1 optimizations.

  Dropped functionalities:
    - No more C bootstrap, code is self-hosted,
    - No more C target, only MIR and X64 assembler are supported.

unnamed version (around 2015)
-----------------------------

  - Init bootstrap in C
  - Interpreter
  - Compiler to C target
