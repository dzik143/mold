DEBUG_AST_OPTIMIZER = true
NodeId = 1000

import 'AppMold.mold'
import 'AST/ASTSymbolsCollector.mold'
import 'AST/ASTPrinterText.mold'
import 'AST/ASTPrinterHtml.mold'

SHOW_TYPE_CAST_NODES_ENABLED = false #true
DEBUG_MOLD = true

x = []
undefined = x[0]
object = 0
import '1.ast'
#import 'Parser/ParserMold.mold'

#parser = new Parser()
#ast    = parser.parseFile(argv[1])

print '<pre>'

app                 = new AppMold()
astSymbolsCollector = app.getAstSymbolsCollector()
astPrinterText      = new ASTPrinterText()
astPrinterHtml      = new ASTPrinterHtml()

app.logDebug('Building symbol table...')
astSymbolsCollector.buildSymbolTable(ast)

# ------------------------------------------------------------------------------

# TODO: More generic way to apply selected optimizations.
app.logDebug('VCall optimization...')
app.getAstOptimizerVCall().processNode(ast)

#app.logDebug('Inline optimization...')
#app.getAstOptimizerInline().processNode(ast)

# Common preprocess before go-on with further AST optimization.
app.logDebug('Evaluating AST nodes...')
app.getAstEvaluator().processNode(ast)

app.logDebug('Constant folding...')
app.getAstOptimizerConstantFolding().processNode(ast)

app.logDebug('If optimization...')
app.getAstOptimizerIf().processNode(ast)

app.logDebug('Dead code elimination...')
app.getAstOptimizerDeadCodeRemove().processNode(ast)

app.logDebug('Common subexpression elimination (CSE)...')
app.getAstOptimizerCSE().processNode(ast)

# ------------------------------------------------------------------------------

app.logDebug('Type cast...')
app.getAstTypeCast().processNode(ast)


app.logDebug('Printing source code...')
astPrinterText.printNode(ast)

print '</pre>'

app.logDebug('Emmiting HTML...')
astPrinterHtml.printNode(ast)
