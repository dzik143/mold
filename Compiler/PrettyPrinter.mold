DEBUG_AST_OPTIMIZER = true
NodeId = 1000

import 'AppMold.mold'
import 'AST/ASTSymbolsCollector.mold'
import 'AST/ASTPrinterText.mold'
import 'AST/ASTPrinterHtml.mold'

SHOW_TYPE_CAST_NODES_ENABLED = true

x = []
undefined = [0]
object = 0
import '1.ast'
#import 'Parser/ParserMold.mold'

#parser = new Parser()
#ast    = parser.parseFile(argv[1])

# Convert AST to form understood by translator.
# TODO: Remove this step.
#ast = ast.convert()

print '<pre>'

app                         = new AppMold()
astSymbolsCollector         = app.getAstSymbolsCollector()
astOptimizerConstantFolding = app.getAstOptimizerConstantFolding()
astEvaluator                = app.getAstEvaluator()
astOptimizerCSE             = app.getAstOptimizerCSE()
astOptimizerDeadCodeRemove  = app.getAstOptimizerDeadCodeRemove()
astOptimizerVCall           = app.getAstOptimizerVCall()
astPrinterText              = new ASTPrinterText()
astPrinterHtml              = new ASTPrinterHtml()

print 'Building symbol table...'
astSymbolsCollector.buildSymbolTable(ast)

print 'Evaluating node...'
astEvaluator.processNode(ast)

print 'Constant folding...'
astOptimizerConstantFolding.processNode(ast)

print 'If optimization...'
app.getAstOptimizerIf().processNode(ast)

print 'Dead code elimination...'
astOptimizerDeadCodeRemove.processNode(ast)

print 'Common subexpression elimination...'
astOptimizerCSE.processNode(ast)

print 'VCall optimization...'
astOptimizerVCall.processNode(ast)

print 'Type cast...'
app.getAstTypeCast().processNode(ast)

astPrinterText.printNode(ast)

print '</pre>'

astPrinterHtml.printNode(ast)
