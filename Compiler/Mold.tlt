<?xml version="1.0" standalone="yes"?>
<generator name="Mold">
  <code_localization />

  <!--
################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        # 
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         # 
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################
  -->

  <!--
  ****************************************************************************
  Escape sequences
  ****************************************************************************
  -->

  <!-- FIXME -->
  <!-- Backslash must be double-quoted -->
  <escape-sequence for="\" do= />
  <!-- Escape double quotation marks -->
  <escape-sequence for="&#x22;" do= />
  <!-- END OF FIXME -->

  <!--
  ****************************************************************************
  Value-stack templates
  ****************************************************************************
  -->

  <vstack_def_type>any</vstack_def_type>
  <vstack_term_type>any</vstack_term_type>
  <vstack_union_att>@@value-type-id</vstack_union_att>
  <vstack_union_def>@@attribute: null, </vstack_union_def>
  <vstack_single>value: null</vstack_single>
  <vstack_union_start>value: {</vstack_union_start>
  <vstack_union_end>}</vstack_union_end>

  <!--
  ****************************************************************************
  Semantic action templates
  ****************************************************************************
  -->
  <action_start>        elif this.idx is @@production-number
      </action_start>
  <action_end>

</action_end>

  <action_single>this.stack[this.stackIdx - @@offset].value</action_single>

  <action_union>this.stack[this.stackIdx - @@offset].value.@@attribute</action_union>
  <action_lhs_single>     this.ret</action_lhs_single>
  <action_lhs_union>     this.ret.@@attribute</action_lhs_union>

  <action_set_lhs>     this.lhs = @@sym</action_set_lhs>

  <!--
  ****************************************************************************
  Semantic terminal action templates
  ****************************************************************************
  -->

  <scan_action_start>&#x09;&#x09;&#x09;&#x09;case @@symbol-number:&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;</scan_action_start>
  <scan_action_end>&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x09;&#x09;&#x09;&#x09;break;
  </scan_action_end>

  <scan_action_begin_offset>@@prefix_lexem( pcb )</scan_action_begin_offset>
  <scan_action_end_offset>this.len</scan_action_end_offset>

  <scan_action_ret_single>this.stack[this.stackIdx].value</scan_action_ret_single>
  <scan_action_ret_union>this.stack[this.stackIdx].@@attribute</scan_action_ret_union>

  <scan_action_set_symbol>this.sym = @@sym</scan_action_set_symbol>

  <!--
  ****************************************************************************
  Parse table templates
  ****************************************************************************
  -->

  <defprod>
    <col>@@production-number</col>
    <col_sep>, </col_sep>
  </defprod>

  <acttab>
    <row_start>  [ @@number-of-columns</row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>, @@symbol,@@action,@@index </col>
    <col_sep></col_sep>
  </acttab>

  <gotab>
    <row_start>  [ @@number-of-columns</row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>, @@symbol,@@action,@@index </col>
    <col_sep></col_sep>
  </gotab>

  <!--
  ****************************************************************************
  Lexer
  ****************************************************************************
  -->

  <dfa_select>
    <col>@@machine</col>
    <col_sep>, </col_sep>
  </dfa_select>

  <dfa_char>
    <col>@@from, @@to</col>
    <col_sep>, </col_sep>
  </dfa_char>

  <dfa_trans>
    <col>@@goto</col>
    <col_sep>, </col_sep>
  </dfa_trans>

  <dfa_idx>
    <row_start>  [ </row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>@@index * 2</col>
    <col_sep>, </col_sep>
  </dfa_idx>

  <dfa_accept>
    <row_start>  [ </row_start>
    <row_end> ]</row_end>
    <row_sep>,&#x0A;</row_sep>
    <col>@@accept</col>
    <col_sep>, </col_sep>
  </dfa_accept>

  <!--
  ****************************************************************************
  Symbol and production information tables
  ****************************************************************************
  -->

  <symbols>
    <col>  [ /* @@symbol */ "@@symbol-name", "@@emit", @@type, @@lexem, @@whitespace, @@greedy ]</col>
    <col_sep>,&#x0A;</col_sep>
  </symbols>

  <productions>
    <col>  [ /* @@production-number */ "@@production", "@@emit", @@length, @@lhs ]</col>
    <col_sep>,&#x0A;</col_sep>
  </productions>

  <!--
  ****************************************************************************
  Parser program
  ****************************************************************************
  -->

<file filename="@@basename.mold"># Parser module generated by unicc from @@filename.
# DO NOT EDIT THIS FILE MANUALLY, IT WILL GO AWAY!
@@prologue

################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        # 
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         # 
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

# -----------------------------------------------------------------------------
#                                Constants
# -----------------------------------------------------------------------------

UNICC_ERROR       = 0
UNICC_REDUCE      = 1
UNICC_SHIFT       = 2
UNICC_ERROR_DELAY = 3

UNICC_MALLOCSTEP = 128

UNICC_DEBUG             = false
UNICC_SYNTAXTREE        = false
UNICC_UTF8              = false
UNICC_STACKDEBUG        = false
UNICC_SEMANTIC_TERM_SEL = false

SYMBOL_NAME_IDX       = 0
SYMBOL_EMIT_IDX       = 1
SYMBOL_TYPE_IDX       = 2
SYMBOL_LEXEM_IDX      = 3
SYMBOL_WHITESPACE_IDX = 4
SYMBOL_GREEDY_IDX     = 5

PRODUCTION_DEFINITION_IDX = 0
PRODUCTION_EMIT_IDX       = 1
PRODUCTION_LENGTH_IDX     = 2
PRODUCTION_LHS_IDX        = 3

# -----------------------------------------------------------------------------
#                              Helper functions
# -----------------------------------------------------------------------------

null = 0

function debug(msg)
  global UNICC_DEBUG
  if UNICC_DEBUG is true
    print 'debug:', msg
  endif
endfunction

function modulo(x, y) -> rv
  rv = x - (x // y) * y
endfunction

function bitwiseAnd(n1, n2) -> rv
  val = 1
  rv  = 0

  while (n1 > 0) or (n2 > 0)
    if (modulo(n1, 2) is 1) and (modulo(n2, 2) is 1)
      rv = rv + val
    endif

    n1  = n1 // 2
    n2  = n2 // 2
    val = val * 2
  endwhile
endfunction

function ord(ch) -> rv
  if typeof(ch) is 'string'
    rv = __mold_peek(ch, 0)
  else
    rv = ch
  endif
endfunction

function parseFloat(text) -> rv
  textLen        = len(text)
  integerPart    = 0
  fractionalPart = 0
  idx            = 0

  # Collect integer part.
  while (idx &lt; textLen) and (text[idx] isnt '.')
    integerPart = 10 * integerPart + ord(text[idx]) - 48
    idx = idx + 1
  endwhile

  # Collect fractional part if any.
  if text[idx] is '.'
    idx = textLen - 1
    while text[idx] isnt '.'
      fractionalPart = 0.1 * fractionalPart + ord(text[idx]) - 48
      idx = idx - 1
    endwhile
  endif

  rv =  integerPart + 0.1 * fractionalPart
endfunction

# -----------------------------------------------------------------------------
#                                Parse tables
# -----------------------------------------------------------------------------

# Action Table
const @@prefix_act = [
@@action-table
]

# GoTo Table
const @@prefix_go = [
@@goto-table
]

# Default productions per state
const @@prefix_def_prod = [
  @@default-productions
]

# DFA selection table
const @@prefix_dfa_select = [
  @@dfa-select - 0
]

# DFA index table
const @@prefix_dfa_idx = [
@@dfa-index
]

# DFA transition chars
const @@prefix_dfa_chars = [
  @@dfa-char
]

# DFA transitions
const @@prefix_dfa_trans = [
  @@dfa-trans
]

# DFA acception states
const @@prefix_dfa_accept = [
@@dfa-accept
]

# Symbol information table
const @@prefix_symbols = [
@@symbols
]

# Production information table
const @@prefix_productions = [
@@productions
]

# -----------------------------------------------------------------------------
#                                Helper classes
# -----------------------------------------------------------------------------

#
# Abstract Syntax Tree
#

class AST
  method constructor(emit, token)
    global null

    this.parent = null
    this.child  = null
    this.prev   = null
    this.next   = null

    this.emit  = emit
    this.token = token
  endmethod

  method _printInternal(node, deepIdx)
    global null

    while node isnt null
      prefix = ''
      for i in 0 .. deepIdx
        prefix = prefix + '..'
      endfor

      if (node.token isnt null)
        print prefix + node.emit, node.token
      else
        print prefix + node.emit
      endif

      this._printInternal(node.child, deepIdx + 1)

      node = node.next
    endwhile
  endmethod

  method print()
    print '----------------------------------'
    print ' Abstract Syntax Tree'
    print '----------------------------------'
    this._printInternal(this, 0)
  endmethod

  method _convertInternal(node, deepIdx) -> rv
    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_PTR, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_REFERENCE, AST_OPCODE_CALL, AST_OPCODE_BOOL_NOT
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV, AST_OPCODE_INC, AST_OPCODE_DEC
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_INVOKE_METHOD

    global AST_OPCODE_PROGRAM, AST_OPCODE_BLOCK, AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_FOR_VALUES_RANGE, AST_OPCODE_WHILE, AST_OPCODE_FOR
    global AST_OPCODE_CALL, AST_OPCODE_FUNCTION, AST_OPCODE_IF, AST_OPCODE_SWITCH
    global AST_OPCODE_VARIABLE, AST_OPCODE_REFERENCE, AST_OPCODE_SWITCH_CASE_OTHERWISE
    global AST_OPCODE_CLASS, AST_OPCODE_CLASS_METHOD, AST_OPCODE_INVOKE_METHOD
    global AST_OPCODE_NOP, AST_DATA_STRING, AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_ELIF, AST_OPCODE_CALL_DELETE

    global null

    rv          = {}
    children    = []
    childrenCnt = 0
    emit        = node.emit
    value       = node.token

    if emit is 'int'
      opcode = AST_DATA_INTEGER

    elif emit is 'float'
      opcode = AST_DATA_DOUBLE

    elif emit is 'string'
      opcode = AST_DATA_STRING

    elif emit is 'bool'
      opcode = AST_DATA_BOOL

    elif emit is 'unused'
      opcode = AST_DATA_PTR

    elif emit is 'null'
      opcode = AST_DATA_NULL

    elif emit is 'undefined'
      opcode = AST_DATA_UNDEFINED

    elif emit is 'array'
      opcode = AST_DATA_ARRAY

    elif emit is 'map'
      opcode = AST_DATA_MAP

    elif emit is 'program'
      opcode = AST_OPCODE_PROGRAM

    elif emit is 'block'
      opcode = AST_OPCODE_BLOCK

    elif emit is 'print'
      opcode = AST_OPCODE_CALL

    elif emit is 'call'
      opcode = AST_OPCODE_CALL

    elif emit is 'neg'
      opcode = AST_OPCODE_NEG

    elif emit is 'add'
      opcode = AST_OPCODE_ADD

    elif emit is 'sub'
      opcode = AST_OPCODE_SUB

    elif emit is 'mul'
      opcode = AST_OPCODE_MUL

    elif emit is 'div'
      opcode = AST_OPCODE_DIV

    elif emit is 'inc'
      opcode = AST_OPCODE_INC

    elif emit is 'dec'
      opcode = AST_OPCODE_DEC

    elif emit is 'idiv'
      opcode = AST_OPCODE_IDIV

    elif emit is 'store'
      opcode = AST_OPCODE_DECLARE_OR_ASSIGN

    elif emit is 'var'
      opcode = AST_OPCODE_VARIABLE

    elif emit is 'index'
      opcode = AST_OPCODE_REFERENCE

    elif emit is 'member'
      opcode = AST_DATA_STRING

    elif emit is 'for'
      opcode = AST_OPCODE_FOR_VALUES_RANGE

    elif emit is 'while'
      opcode = AST_OPCODE_WHILE

    elif emit is 'cmpeq'
      opcode = AST_OPCODE_COMPARE_EQ
     
    elif emit is 'cmpne'
      opcode = AST_OPCODE_COMPARE_NEQ
      
    elif emit is 'cmpgt'
      opcode = AST_OPCODE_COMPARE_GT

    elif emit is 'cmpge'
      opcode = AST_OPCODE_COMPARE_GE
    
    elif emit is 'cmplt'
      opcode = AST_OPCODE_COMPARE_LT
    
    elif emit is 'cmple'
      opcode = AST_OPCODE_COMPARE_LE

    elif emit is 'bor'
      opcode = AST_OPCODE_BOOL_OR

    elif emit is 'band'
      opcode = AST_OPCODE_BOOL_AND

    elif emit is 'not'
      opcode = AST_OPCODE_BOOL_NOT
      
    elif emit is 'function'
      opcode = AST_OPCODE_FUNCTION
      rv['name']      = value['name']
      rv['params']    = value['parameters']
      rv['paramsCnt'] = len(value['parameters'])
      rv['rv']        = value['rv']

    elif emit is 'if'
      opcode = AST_OPCODE_IF

    elif emit is 'elif'
      opcode = AST_OPCODE_IF

    elif emit is 'class'
      opcode = AST_OPCODE_CLASS
      rv['name']     = value['name']
      rv['baseName'] = value['baseName']

    elif emit is 'method'
      opcode = AST_OPCODE_CLASS_METHOD

      newParams = ['this']
      params    = value['parameters']
      paramsCnt = len(params)
      
      for idx in 0 .. paramsCnt
        newParams[idx + 1] = params[idx]
      endfor
      
      rv['name']      = value['name']
      rv['params']    = newParams
      rv['paramsCnt'] = len(newParams)
      rv['rv']        = value['rv']
      
    elif emit is 'vcall'
      opcode = AST_OPCODE_INVOKE_METHOD
      
    elif emit is 'new'
      opcode = AST_OPCODE_CALL_NEW
      
    elif emit is 'delete'
      opcode = AST_OPCODE_CALL_DELETE
    
    else
      die('Unrecognized opcode ' + emit)
    endif

    rv['opcode'] = opcode
    rv['value']  = value

    node = node.child

    while node isnt null
      children[childrenCnt] = this._convertInternal(node, deepIdx + 1)
      childrenCnt           = childrenCnt + 1
      node                  = node.next
    endwhile

    rv['children']    = children
    rv['childrenCnt'] = childrenCnt
  endmethod

  method convert() -> rv
    #print '----------------------------------'
    #print ' Convert Abstract Syntax Tree'
    #print '----------------------------------'

    rv = this._convertInternal(this, 0)
  endmethod

endclass

#
# Stack token.
#

class Token
  method constructor()
    global null

    this.value  = null
    this.node   = null
    this.symbol = null

    this.state  = 0
    this.line   = 0
    this.column = 0
  endmethod

  method print()
    print '[', this.value, this.node, this.symbol, this.state, ']'
  endmethod

endclass

# -----------------------------------------------------------------------------
#                                Parser class
# -----------------------------------------------------------------------------

class Parser
  method constructor()
    global null

    # Values
    this.ret  = null
    this.test = null

    # State
    this.act = 0
    this.idx = 0
    this.lhs = 0

    # Lookahead
    this.sym     = 0
    this.old_sym = 0
    this.len     = 0

    # Input buffering
    this.lexem = null

    this.buf     = []
    this.bufSize = 0

    # Lexical analysis
    this.next   = 0
    this.eof    = 0
    this.is_eof = false

    # Error handling
    this.error_delay = 0
    this.error_count = 0

    this.line   = 1
    this.column = 1

    this.ast = null

    this.stack    = []
    this.stackIdx = 0

    this.inputIdx = 0
    this.inputLen = 0
    this.input    = null

    debug('created parser object')
  endmethod

  method getAst() -> rv
    rv = this.ast
  endmethod

  method _getChar() -&gt; rv
    # Get next character from input stream
    if this.inputIdx &lt; this.inputLen
      rv            = this.input[this.inputIdx]
      this.inputIdx = this.inputIdx + 1
    else
      rv = this.eof
    endif

    # debug('pop char [' + rv + '] from input')
  endmethod

  method _getInput(offset) -&gt; rv
    #debug('going to get input, bufSize=[' + str(this.bufSize) + '], offset=[' + str(offset) + ']')
    #print this.buf

    while (this.is_eof is false) and (offset &gt;= this.bufSize)

      nextChar = this._getChar()

      # TODO: Review is it needed?
      #if nextChar is this.eof
      #  this.is_eof = true
      #endif

      this.buf[this.bufSize] = nextChar
      this.bufSize           = this.bufSize + 1
      this.buf[this.bufSize] = 0
    endwhile

    if this.is_eof is true
      rv = this.eof
      debug('got input [EOF]')

    else
      rv = this.buf[offset]
      debug('got input [' + str(rv) + ']')
    endif

    #print this.buf
  endmethod

  method _clearInput()
    global null

    debug('going to clear input: len=[' + str(this.len) + '], bufSize=[' + str(this.bufSize) + ']')

    if this.buf isnt null
      if this.len &gt; 0
        # Update counters for line and column
        for idx in 0 .. this.len
          if ord(this.buf[idx]) is 10
            this.line   = this.line + 1
            this.column = 1
          else
            this.column = this.column + 1
          endif
        endfor

        newBuf    = []
        newBufCnt = this.bufSize - this.len + 1 + 1

        for idx in 0 .. newBufCnt
          newBuf[idx] = this.buf[idx + this.len]
        endfor

        this.buf     = newBuf
        this.bufSize = this. bufSize - this.len
      else
        this.bufSize = 0
        this.buf[0]  = 0
      endif
    endif

    this.len = 0
    this.sym = -1

    debug('clear input done: len=[' + str(this.len) + '], bufSize=[' + str(this.bufSize) + ']')

  endmethod

  method _lexem() -&gt; rv
    this.lexem = this.buf
    rv         = this.lexem
  endmethod

  method _getAct() -&gt; rv
    global _act, _def_prod
    global UNICC_ERROR

    i  = 1
    rv = -1

    state = this.stack[this.stackIdx].state

    act = _act[state]
    cnt = act[0] * 3

    while (rv is -1) and (i &lt; cnt)
      if act[i] is this.sym
        this.act = act[i + 1]

        if this.act is UNICC_ERROR
          # Force parse error!
          rv = 0
        else
          this.idx = act[i + 2]
          rv = 1
        endif
      endif

      i = i + 3
    endwhile

    if rv is -1
      # Default production
      this.idx = _def_prod[state]
      if this.idx &gt; -1
        # Reduce
        this.act = 1
        rv = 1
      else
        rv = 0
      endif
    endif

    debug('got action: rv=[' + str(rv) + '], act=[' + str(this.act) + '], idx=[' + str(this.idx) + ']')

    if rv is 0
      this._handleError('syntax error')
    endif
  endmethod

  method _getGo() -&gt; rv
    global _go

    rv    = 0
    i     = 1
    state = this.stack[this.stackIdx].state
    go    = _go[state]
    cnt   = go[0] * 3

    while (rv is 0) and (i &lt; cnt)
      if (go[i] is this.lhs)
        this.act = go[i + 1]
        this.idx = go[i + 2]

        rv = 1
      endif

      i = i + 3
    endwhile
  endmethod

  method _lex()
    global _dfa_idx
    global _dfa_chars
    global _dfa_trans
    global _dfa_accept
    global _dfa_select
    global _symbols
    global SYMBOL_GREEDY_IDX
    global SYMBOL_WHITESPACE_IDX

    dfa_st = 0
    length = 0
    chr    = 0

    debug('starting lex...')

    if @@mode is 1
      mach = 0
    else
      mach = @@prefix_dfa_select[this.stack[this.stackIdx].state]
    endif

    next = ord(this._getInput(length))

    if next is this.eof
      this.sym = @@eof

    else
      goOn = true

      while goOn is true
        # debug('_lex(): outer loop, chr=[' + str(chr) + ']\n')

        innerGoOn = true
        chr       = _dfa_idx[mach][dfa_st]
        dfa_st    = -1

        while (innerGoOn is true) and (_dfa_chars[chr] &gt; -1)
          #debug('_lex(): inner loop, chr=[' + str(chr) + ']')

          if (next &gt;= _dfa_chars[chr]) and (next &lt;= _dfa_chars[chr + 1])
            dfa_st =  _dfa_trans[chr // 2]

            if _dfa_accept[mach][dfa_st] &gt; 0
              this.len = length + 1
              this.sym = _dfa_accept[mach][dfa_st] - 1

              if this.sym is @@eof
                # test!
                dfa_st    = -1
                innerGoOn = false

              elif _symbols[this.sym][SYMBOL_GREEDY_IDX] is 0
                # Stop if matched symbol should be parsed nongreedy
                dfa_st = -1
                innerGoOn = false
              endif
            endif

            if innerGoOn is true
              length    = length + 1
              next      = ord(this._getInput(length))
              innerGoOn = false
            endif
          endif

          chr = chr + 2
        endwhile

        if (dfa_st &lt; 0) or (next is this.eof)
          goOn = false
        endif
        #print 'LEX ITER DONE', this.stackIdx, this.stack

      endwhile
    endif

    if this.sym is @@eof
      symText = 'EOF'
    elif this.sym > -1
      symEntry = _symbols[this.sym]
      isWhite  = symEntry[SYMBOL_WHITESPACE_IDX]
      symText  = str(this.sym)
    else
      isWhite = 0
      symText = str(this.sym)
    endif

    debug('lex done: sym=[' + symText + '], whitespace=[' + str(isWhite) + ']')
  endmethod

  method _getSym() -&gt; rv
    global _symbols
    global _dfa_select
    global SYMBOL_WHITESPACE_IDX

    this.sym = -1
    this.len = 0

    if @@mode is 1
      #
      # mode = 1
      #

      goOn = true

      while goOn is true
        this._lex()
        if (this.sym &gt; -1) and (_symbols[this.sym][SYMBOL_WHITESPACE_IDX] is 1)
          this._clearInput()
        else
          goOn = false
        endif
      endwhile

    else
      #
      # mode = 0
      #

      if _dfa_select[this.stack[this.stackIdx].state] > -1
        this._lex()

        #
        # If there is no DFA state machine,
        # try to identify the end-of-file symbol.
        # If this also fails, a parse error will
        # raise.
        #

      elif this._getInput(0) is this.eof
        this.sym = @@eof
      endif
    endif

    if this.sym &gt; -1
      rv = 1
    else
      rv = 0
    endif

    if this.sym is @@eof
      symText = 'EOF'
    else
      symText = str(this.sym)
    endif

    debug('got symbol: rv=[' + str(rv) + '], sym=[' + symText + ']' + ', len=[' + str(this.len) + ']')
  endmethod

  method _handleError(msg)
    die(this.filePath + ':' + str(this.line) + ':' + str(this.column) + ': error: ' + str(msg))
  endmethod

  method _parseInternal(text) -> ast
    global null
    global UNICC_ERROR
    global UNICC_REDUCE
    global UNICC_SHIFT
    global UNICC_ERROR_DELAY
    global SYMBOL_EMIT_IDX
    global PRODUCTION_LHS_IDX
    global PRODUCTION_LENGTH_IDX
    global PRODUCTION_EMIT_IDX
    global _symbols
    global _productions

    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_PTR, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_REFERENCE, AST_OPCODE_CALL
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_INVOKE_METHOD

    global AST_OPCODE_BLOCK, AST_OPCODE_PROGRAM
    global AST_OPCODE_DECLARE_OR_ASSIGN

    goOn       = true
    innerGoOn  = 1
    masterIter = 1

    #
    # Initialize Parser Control Block.
    #

    debug('going to parse [' + str(len(text)) + '] bytes')

    this.input    = text
    this.inputIdx = 0
    this.inputLen = len(text)

    this.stack[0] = new Token()

    this.stackIdx = 0
    this.sym      = -1
    this.old_sym  = -1
    this.line     = 1
    this.column   = 1

    this.test = null

    #
    # Begin of main parser loop
    #

    debug('falling into main parser loop')

    while goOn is true
      debug('')
      debug('------------------------------')
      debug('MASTER ITER #' + str(masterIter))

      this._getSym()
      this._getAct()

      #
      # Shift
      #

      if bitwiseAnd(this.act, UNICC_SHIFT) isnt 0
        debug('going to shift...')
        this.next          = this.buf[this.len]
        this.buf[this.len] = 0

        this.stackIdx = this.stackIdx + 1
        
        #print 'PUSH TO STACK (shift)', this.stackIdx
        
        this.stack[this.stackIdx] = new Token()

        #
        #  Execute scanner actions, if existing.
        #  Here, UNICC_ON_SHIFT is set to 1, so that shifting-
        #  related operations will be performed.
        #

        #
        # Scan actions.
        # TODO: switch(this.sym)
        #

        if false

@@scan_actions

        else
          @@top-value = this._getInput(0)
        endif

        #
        # End of scan actions.
        #

        if bitwiseAnd(this.act, UNICC_REDUCE) isnt 0
          this.stack[this.stackIdx].state = -1
        else
          this.stack[this.stackIdx].state = this.idx
        endif

        this.stack[this.stackIdx].symbol = _symbols[this.sym]
        this.stack[this.stackIdx].line   = this.line
        this.stack[this.stackIdx].column = this.column

        newValue = ''
        for idx in 0 .. this.len
          newValue = newValue + this.buf[idx]
        endfor
        @@top-value = newValue

        #if this.stack[this.stackIdx].symbol[SYMBOL_EMIT_IDX] isnt ''
        #  print 'CREATING #1:', this.stack[this.stackIdx].symbol[SYMBOL_EMIT_IDX]
        #  this.stack[this.stackIdx].node = new AST(this.stack[this.stackIdx].symbol[SYMBOL_EMIT_IDX], null)
        #else
          this.stack[this.stackIdx].node = null
        #endif

        this.buf[this.len] = this.next

        # Perform the shift on input
        if (this.sym isnt @@eof) and (this.sym isnt @@goal-value)
          this._clearInput()
          this.old_sym = -1
        endif

        if this.error_delay &gt; 0
          this.error_delay = this.error_delay - 1
        endif

        debug('shifted')
      endif

      #
      # Reduce
      #

      innerGoOn  = true
      reduceIter = 1

      while (innerGoOn is true) and (bitwiseAnd(this.act, UNICC_REDUCE) isnt 0)
        debug('')
        debug('------------------------------')
        debug('REDUCE ITER #' + str(masterIter) + '.' + str(reduceIter))

        # Set default left-hand side
        this.lhs = _productions[this.idx][PRODUCTION_LHS_IDX]

        # Run reduction code
        # this.ret = null

        # TODO: switch( pcb-&gt;idx )
        if false
          @@actions
        endif

        emit = _productions[this.idx][PRODUCTION_EMIT_IDX]

        #print this.ret, _productions[this.idx]

        #if emit isnt ''
        #  print emit, this.ret
        #endif

        #token = this.stack[this.stackIdx]
        #token.print()

        # Drop right-hand side
        # TODO: Destructor callbacks?
        node = null

        for i in 0 .. _productions[this.idx][PRODUCTION_LENGTH_IDX]

          if this.stack[this.stackIdx].node isnt null

            if node isnt null
              while (node.prev isnt null)
                node = node.prev
              endwhile

              node.prev = this.stack[this.stackIdx].node

              this.stack[this.stackIdx].node.next = node
            endif
            
            node = this.stack[this.stackIdx].node
  
            this.stack[this.stackIdx].node = null

          endif
          
          this.stackIdx = this.stackIdx - 1
        endfor

        # pcb-&gt;tos -= _productions[ pcb-&gt;idx ].length

        if node isnt null
          lnode = this.stack[this.stackIdx].node

          if lnode isnt null
            while lnode.next isnt null
              lnode = lnode.next
            endwhile

            lnode.next = node
            node .prev = lnode
          else
            this.stack[this.stackIdx].node = node
          endif
        endif

        if _productions[this.idx][PRODUCTION_EMIT_IDX] isnt ''
          node       = new AST(_productions[this.idx][PRODUCTION_EMIT_IDX], this.ret)
          node.child = this.stack[this.stackIdx].node
          this.stack[this.stackIdx].node = node
        endif

        debug('goal symbol? (lhs=[' + str(this.lhs) + '], goal=[' + str(@@goal) + '], stackIdx=[' + str(this.stackIdx) + '])')
        # Goal symbol reduced, and stack is empty?
        if (this.lhs is @@goal) and (this.stackIdx is 0)
          this.stack[this.stackIdx].value = this.ret
          this.ast = this.stack[this.stackIdx].node

          this._clearInput()
          innerGoOn = false

        else
          this._getGo()

          this.stackIdx = this.stackIdx + 1
          
          this.stack[this.stackIdx]        = new Token()
          this.stack[this.stackIdx].value  = this.ret
          this.stack[this.stackIdx].symbol = _symbols[this.lhs]
          this.stack[this.stackIdx].line   = this.line
          this.stack[this.stackIdx].column = this.column

          if bitwiseAnd(this.act, UNICC_REDUCE) isnt 0
            this.stack[this.stackIdx].state = -1
          else
            this.stack[this.stackIdx].state = this.idx
          endif
        endif

        reduceIter = reduceIter + 1

        debug('reduced')
      endwhile

      debug('END CONDITION: reduce=[' + str(bitwiseAnd(this.act, UNICC_REDUCE)) + '], idx=[' + str(this.idx) +'], goalIdx=[' + str(@@goal-production) + ']')

      if bitwiseAnd(this.act, UNICC_REDUCE) and (this.idx is @@goal-production)
        goOn = false
      endif

      masterIter = masterIter + 1

      if masterIter > 1000000
        die('MAX ITERS reached!')
      endif
    endwhile
    
    ast = this.getAst()
  endmethod
  
  method parseFile(path) -> ast
    # Load source code from file.
    source        = __mold_loadFile(path)
    this.filePath = path
    
    # Parse source into AST tree.    
    ast = this._parseInternal(source)
  endmethod
                  
  method parseText(text) -> ast
    this.filePath = ''
    ast           = this._parseInternal(text)
  endmethod

endclass

</file>
</generator>
