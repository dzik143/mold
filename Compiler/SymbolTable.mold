################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        #
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         #
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

SYMBOL_KIND_VAR_LOCAL  = 1
SYMBOL_KIND_VAR_GLOBAL = 2
SYMBOL_KIND_VAR_PARAM  = 3
SYMBOL_KIND_VAR_RETVAL = 4
SYMBOL_KIND_CONST      = 5
SYMBOL_KIND_LABEL      = 6

SYMBOL_KIND_FUNCTION   = 7
SYMBOL_KIND_CLASS      = 8
SYMBOL_KIND_METHOD     = 9

SYMBOL_KIND_AS_TEXT = [
  '[error]',
  '.loc',
  'global',
  '.param',
  'rv',
  'const',
  'label',
  'function',
  'class',
  'method'
]

SYMBOL_TYPE_VARIANT = 0
SYMBOL_TYPE_INTEGER = 1
SYMBOL_TYPE_FLOAT   = 2
SYMBOL_TYPE_BOOLEAN = 3
SYMBOL_TYPE_STRING  = 4
SYMBOL_TYPE_ARRAY   = 5
SYMBOL_TYPE_MAP     = 6
SYMBOL_TYPE_OBJECT  = 7

SYMBOL_TYPE_MACHINE_INT8    = 32 + 0
SYMBOL_TYPE_MACHINE_INT16   = 32 + 1
SYMBOL_TYPE_MACHINE_INT32   = 32 + 2
SYMBOL_TYPE_MACHINE_INT64   = 32 + 3
SYMBOL_TYPE_MACHINE_UINT8   = 32 + 4
SYMBOL_TYPE_MACHINE_UINT16  = 32 + 5
SYMBOL_TYPE_MACHINE_UINT32  = 32 + 6
SYMBOL_TYPE_MACHINE_UINT64  = 32 + 7
SYMBOL_TYPE_MACHINE_NONE1   = 32 + 8
SYMBOL_TYPE_MACHINE_NONE2   = 32 + 9
SYMBOL_TYPE_MACHINE_FLOAT32 = 32 + 10
SYMBOL_TYPE_MACHINE_FLOAT64 = 32 + 11

SYMBOL_TYPE_VARIANT_CONST   = 128 + SYMBOL_TYPE_VARIANT
SYMBOL_TYPE_INTEGER_CONST   = 128 + SYMBOL_TYPE_INTEGER
SYMBOL_TYPE_FLOAT_CONST     = 128 + SYMBOL_TYPE_FLOAT
SYMBOL_TYPE_BOOLEAN_CONST   = 128 + SYMBOL_TYPE_BOOLEAN
SYMBOL_TYPE_STRING_CONST    = 128 + SYMBOL_TYPE_STRING
SYMBOL_TYPE_ARRAY_CONST     = 128 + SYMBOL_TYPE_ARRAY
SYMBOL_TYPE_MAP_CONST       = 128 + SYMBOL_TYPE_MAP
SYMBOL_TYPE_OBJECT_CONST    = 128 + SYMBOL_TYPE_OBJECT


class SymbolTable
  method constructor()
    this.deepIdx   = 0
    this.deepMax   = 128
    this.symbols   = [{}]
    this.localCnt  = 0
    this.globalCnt = 0
    this.constCnt  = 0
    this.paramCnt  = 0
    this.labelCnt  = 0
    this.tempCnt   = 0

    # TODO: Remove it when map iteration ready.
    this.symbols = [{'_index': []}]
  endmethod

  # ----------------------------------------------------------------------------
  #                               Generic calls
  # ----------------------------------------------------------------------------

  method getDeep() -> rv
    rv = this.deepIdx
  endmethod

  method exportSymbols() -> rv
    rv = this.symbols[this.deepIdx]
  endmethod

  method insert(name, entry)
    if typeof(this.symbols[this.deepIdx][name]) isnt 'undefined'
      die("error: redeclaration of '" + name + "'")
    else
      this.symbols[this.deepIdx][name] = entry
      entry.writeHits      = 0
      entry.readHits       = 0
      entry.undefinedForks = 0

      # TODO: Remove it when map iteration ready.
      cnt = len(this.symbols[this.deepIdx]['_index'])
      this.symbols[this.deepIdx]['_index'][cnt] = entry
    endif
  endmethod

  method importExternalGlobal(name)
    global SYMBOL_KIND_VAR_GLOBAL

    if typeof(this.symbols[0][name]) isnt 'undefined'
      die("error: redeclaration of global '" + name + "'")
    else
      this.symbols[0][name] = {
        'name': name,
        'kind': SYMBOL_KIND_VAR_GLOBAL,
        'writeHits': 0,
        'readHits': 0
      }
    endif
  endmethod

  method insertGlobal(name, entry)
    global SYMBOL_KIND_VAR_GLOBAL
    global SYMBOL_KIND_CONST

    if typeof(this.symbols[0][name]) isnt 'undefined'
      die("error: redeclaration of global '" + name + "'")
    else
      this.symbols[0][name] = entry
      entry.writeHits = 0
      entry.readHits  = 0

      # TODO: Remove it when map iteration ready.
      cnt = len(this.symbols[0]['_index'])
      this.symbols[0]['_index'][cnt] = entry
    endif
  endmethod

  method lookup(name) -> rv
    rv = this.symbols[this.deepIdx][name]
    if typeof(rv) is 'undefined'
      die("error: '" + name + "' was not declared in this scope")
    endif
  endmethod

  method lookupForRead(name) -> rv
    rv          = this.lookup(name)
    rv.readHits = rv.readHits + 1
  endmethod

  method lookupForWrite(name) -> rv
    rv           = this.lookup(name)
    rv.writeHits = rv.writeHits + 1
  endmethod

  method lookupForReadAndWrite(name) -> rv
    rv           = this.lookup(name)
    rv.readHits  = rv.readHits  + 1
    rv.writeHits = rv.writeHits + 1
  endmethod

  method lookupGlobal(name) -> rv
    rv = this.symbols[0][name]
    if typeof(rv) is 'undefined'
      die("error: '" + name + "' was not declared in this scope")
    endif
  endmethod

  method isset(name) -> rv
    rv = typeof(this.symbols[this.deepIdx][name]) isnt 'undefined'
  endmethod

  # ----------------------------------------------------------------------------
  #                   Scopes (0=global, 1,2,3...=local)
  # ----------------------------------------------------------------------------

  method enterScope()
    this.deepIdx = this.deepIdx + 1
    this.symbols[this.deepIdx] = {}

    # TODO: Remove it when map iteration ready.
    this.symbols[this.deepIdx] = {'_index': []}

    # TODO: Review it, we want more than 2 scopes... ?
    this.localCnt = 0
    this.paramCnt = 0
    this.tempCnt  = 0

    if this.deepIdx > this.deepMax
      die('error: too deep (' + str(this.deepIdx) + ')')
    endif
  endmethod

  method leaveScope()
    this.deepIdx = this.deepIdx - 1

    if this.deepIdx < 0
      die('error: unmatched scope leave')
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                              Function helpers
  # ----------------------------------------------------------------------------

  method insertFunction(name, proto)
    global SYMBOL_KIND_FUNCTION
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_FUNCTION,
      'proto': proto
    }
    this.insertGlobal(name, newEntry)
  endmethod

  method lookupFunction(name, paramsCnt) -> rv
    global SYMBOL_KIND_FUNCTION
    rv = this.lookupGlobal(name)
    if rv['kind'] isnt SYMBOL_KIND_FUNCTION
      die("error: '" + name + "' is not a function")
    elif rv['proto']['paramsCnt'] isnt paramsCnt
      die("error: function '" + name + "' requires exactly " + str(rv['proto']['paramsCnt']) + ' parameters, but ' + str(paramsCnt) + ' were passed')
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                               Class helpers
  # ----------------------------------------------------------------------------

  method insertClass(name, proto)
    global SYMBOL_KIND_CLASS
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_CLASS,
      'proto': proto
    }
    this.insert(name, newEntry)
  endmethod

  method lookupClass(name) -> rv
    global SYMBOL_KIND_CLASS
    rv = this.lookupGlobal(name)
    if rv['kind'] isnt SYMBOL_KIND_CLASS
      die("error: '" + name + "' is not a class")
    endif
  endmethod

  method lookupMethod(className, methodName, paramsCnt) -> rv
    rv = this.lookupClass(className)['proto']['vtable'][methodName]

    if typeof(rv) is 'undefined'
      die("error: class '" + className + "' has no method '" + methodName + "'")

    elif rv['paramsCnt'] isnt paramsCnt
      die("error: method '" + methodName + "' requires exactly " + str(rv['paramsCnt']) + ' parameters, but ' + str(paramsCnt) + ' were passed')
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                               Variable helper
  # ----------------------------------------------------------------------------

  method insertLocal(name)
    global SYMBOL_KIND_VAR_LOCAL
    global SYMBOL_KIND_VAR_GLOBAL

    if this.deepIdx is 0
      kind  = SYMBOL_KIND_VAR_GLOBAL
      newId = this.globalCnt
      this.globalCnt = this.globalCnt + 1
    else
      kind  = SYMBOL_KIND_VAR_LOCAL
      newId = this.localCnt
      this.localCnt = this.localCnt + 1
    endif

    newEntry = {
      'name': name,
      'kind': kind,
      'id': newId
    }
    this.insert(name, newEntry)

  endmethod

  method insertLocalVolatile(name)
    global SYMBOL_KIND_VAR_LOCAL

    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_VAR_LOCAL,
      'id': this.localCnt
    }
    this.insert(name, newEntry)
    this.localCnt = this.localCnt + 1
  endmethod

  method importGlobal(name)
    global SYMBOL_KIND_VAR_GLOBAL

    if this.deepIdx is 0
      die('error: global directive used in global space')

    elif this.isset(name) is true
      # Symbol already declared in current scope.
      # Check is it global.
      symbolInfo = this.lookup(name)

      if symbolInfo['kind'] is SYMBOL_KIND_VAR_GLOBAL
        # It's already imported global. Do nothing.
      else
        # It's already declared as another kind.
        die("error: conflicting declaration 'global " + name + "'")
      endif

    else
      # Find symbol in global scope.
      symbolInfo = this.lookupGlobal(name)
      this.insert(name, symbolInfo)
      
      # Add entry in current scope.
      #newEntry = {
      #  'name': name,
      #  'kind': SYMBOL_KIND_VAR_GLOBAL,
      #  'id': symbolInfo['id']
      #}
      #this.insert(name, newEntry)
    endif
  endmethod

  method insertParam(name, id)
    global SYMBOL_KIND_VAR_PARAM
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_VAR_PARAM,
      'id': id
    }
    this.insert(name, newEntry)
  endmethod

  method insertRetVal(name)
    global SYMBOL_KIND_VAR_RETVAL
    newEntry = {
      'name': '__rv',
      'kind': SYMBOL_KIND_VAR_RETVAL,
      'alias': name
    }
    this.insert('__rv', newEntry)
    this.symbols[this.deepIdx][name] = newEntry
  endmethod

  method insertConst(name, value)
    global SYMBOL_KIND_CONST
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_CONST,
      'value': value,
      'type': 'variant'
    }

    # TODO: Don't add to two scopes.
    this.insertGlobal(name, newEntry)

    if this.deepIdx > 0
      this.insert(name, newEntry)
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                               Label helpers
  # ----------------------------------------------------------------------------

  method createLabel() -> rv
    global SYMBOL_KIND_LABEL

    # TODO: Store labels in symbol table too.
    rv = 'l' + str(this.labelCnt)
    this.labelCnt = this.labelCnt + 1

    newEntry = {
      'name': rv,
      'kind': SYMBOL_KIND_LABEL
    }
    this.insert(rv, newEntry)
  endmethod

  # ----------------------------------------------------------------------------
  #                               Constant helpers
  # ----------------------------------------------------------------------------

  method createConst(value) -> rv
    rv = 'const' + str(this.constCnt)
    this.constCnt = this.constCnt + 1
    this.insertConst(rv, value)
  endmethod

  method setValue(name, value)
    symbolInfo = this.lookup(name)
    symbolInfo.value = value
  endmethod

  # ----------------------------------------------------------------------------
  #                        Temporary variable helpers
  # ----------------------------------------------------------------------------

  method createTempVar() -> rv
    rv = 'tmp' + str(this.tempCnt)
    this.tempCnt = this.tempCnt + 1
    this.insertLocal(rv)
  endmethod

  method createTempVarForWrite() -> rv
    rv = this.createTempVar()
    this.lookupForWrite(rv)
  endmethod

  method createTempVarForReadAndWrite() -> rv
    rv = this.createTempVar()
    this.lookupForRead(rv)
    this.lookupForWrite(rv)
  endmethod

  # ----------------------------------------------------------------------------
  #                               Types track
  # ----------------------------------------------------------------------------

  method setType(name, type)
    symbolInfo = this.lookup(name)
    symbolInfo.type = type
  endmethod
endclass
