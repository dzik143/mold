################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import '../MIR/MIR.mold'
import '../Utils/Stack.mold'

# Clean up this mess.
# Move into class.
_vm_dataStack = [[]]
_vm_locals    = _vm_dataStack[0]
_vm_heap      = []

_vm_deepIdx        = 0
_vm_paramBaseStack = []
_vm_retValStack    = []

class VMachineStackObject
  method constructor(classProto)
    this.classProto = classProto
  endmethod
endclass

class VMachineStack
  method constructor()
    this.codeObj = null
    this.stack   = new Stack()
  endmethod

  method loadCode(code)
    this.code = code
  endmethod

  method _call(entryPointIp)
    global MIR_OPCODE_NOP, MIR_OPCODE_NEG, MIR_OPCODE_ADD, MIR_OPCODE_SUB
    global MIR_OPCODE_MUL, MIR_OPCODE_DIV, MIR_OPCODE_IDIV, MIR_OPCODE_LOAD_IMM
    global MIR_OPCODE_LOAD_ARRAY, MIR_OPCODE_LOAD_MAP, MIR_OPCODE_CMP_EQ
    global MIR_OPCODE_CMP_NEQ, MIR_OPCODE_CMP_GT, MIR_OPCODE_CMP_GE
    global MIR_OPCODE_CMP_LT, MIR_OPCODE_CMP_LE, MIR_OPCODE_LOAD_LOCAL
    global MIR_OPCODE_LOAD_PARAMN, MIR_OPCODE_LOAD_GLOBAL, MIR_OPCODE_LOAD_RETVAL
    global MIR_OPCODE_LOAD_BY_INDEX, MIR_OPCODE_LOAD_BY_KEY
    global MIR_OPCODE_STORE_LOCAL, MIR_OPCODE_STORE_PARAMN
    global MIR_OPCODE_STORE_GLOBAL, MIR_OPCODE_STORE_RETVAL
    global MIR_OPCODE_STORE_BY_INDEX, MIR_OPCODE_STORE_BY_KEY
    global MIR_OPCODE_DROP, MIR_OPCODE_DROP_N, MIR_OPCODE_DUP, MIR_OPCODE_OVER
    global MIR_OPCODE_CREATE_OBJECT
    global MIR_OPCODE_VCALL, MIR_OPCODE_JMP, MIR_OPCODE_JMP_IF_TRUE
    global MIR_OPCODE_JMP_IF_FALSE, MIR_OPCODE_CALL, MIR_OPCODE_RET
    global MIR_OPCODE_PRINT, MIR_OPCODE_INIT_FRAME, MIR_OPCODE_RETVAL_GUARD
    global MIR_OPCODE_CREATE_OBJECT
    global MIR_OPCODE_LOAD_ARGC, MIR_OPCODE_LOAD_ARGV
    global MIR_OPCODE_MOVE_BACK
    global MIR_OPCODE_FOR_EACH_INDEXES
    global MIR_OPCODE_FOR_EACH_KEYS
    global MIR_OPCODE_INNER_RET
    global MIR_OPCODE_SYSCALL
    global MIR_OPCODE_STRING_JOIN
    global MIR_OPCODE_STRING_BUILD
    global MIR_OPCODE_LOAD_NULL
    global argc, argv

    # TODO: Optimize it.
    codeObj = this.code
    code    = codeObj.code
    codeCnt = codeObj.codeCnt
    stack   = this.stack

    # Clean up this mess.
    global _vm_dataStack
    global _vm_locals
    global _vm_heap
    global _vm_deepIdx
    global _vm_paramBaseStack
    global _vm_retValStack

    # Dirty hack: push return address out of code to know when
    # whole desired code was executed.
    stack.push(codeCnt)

    # Start execution at entry point passed by caller.
    ip = entryPointIp

    while ip < codeCnt
      # Fetch instruction
      item   = code[ip]
      opcode = item[0]

      # print 'ENTER', ip, opcode

      # Dispatch opcode.
      if opcode is MIR_OPCODE_NOP
        # Do nothing.

      elif opcode is MIR_OPCODE_LOAD_NULL
        stack.push(null)

      elif opcode is MIR_OPCODE_LOAD_IMM
        stack.push(item[1])

      elif opcode is MIR_OPCODE_LOAD_ARRAY
        # TODO: Allow [] in call list.
        newArray = []
        stack.push(newArray)

      elif opcode is MIR_OPCODE_LOAD_MAP
        # TODO: Allow {} in call list.
        newMap = {}
        stack.push(newMap)

      elif opcode is MIR_OPCODE_NEG
        stack.push(-stack.pop())

      elif opcode is MIR_OPCODE_ADD
        last = stack.pop()
        stack.push(stack.pop() + last)

      elif opcode is MIR_OPCODE_STRING_JOIN
        last = stack.pop()
        stack.push(stack.pop() ~ last)

      elif opcode is MIR_OPCODE_MUL
        last = stack.pop()
        stack.push(stack.pop() * last)

      elif opcode is MIR_OPCODE_SUB
        last = stack.pop()
        stack.push(stack.pop() - last)

      elif opcode is MIR_OPCODE_DIV
        last = stack.pop()
        stack.push(stack.pop() / last)

      elif opcode is MIR_OPCODE_IDIV
        last = stack.pop()
        stack.push(stack.pop() // last)

      elif opcode is MIR_OPCODE_CMP_EQ
        last = stack.pop()
        stack.push(stack.pop() is last)

      elif opcode is MIR_OPCODE_CMP_NEQ
        last = stack.pop()
        stack.push(stack.pop() isnt last)

      elif opcode is MIR_OPCODE_CMP_LT
        last = stack.pop()
        stack.push(stack.pop() < last)

      elif opcode is MIR_OPCODE_CMP_LE
        last = stack.pop()
        stack.push(stack.pop() <= last)

      elif opcode is MIR_OPCODE_CMP_GT
        last = stack.pop()
        stack.push(stack.pop() > last)

      elif opcode is MIR_OPCODE_CMP_GE
        last = stack.pop()
        stack.push(stack.pop() >= last)

      elif opcode is MIR_OPCODE_DROP
        stack.eat()

      elif opcode is MIR_OPCODE_DROP_N
        stack.eatN(item[1])

      elif opcode is MIR_OPCODE_DUP
        stack.dup()

      elif opcode is MIR_OPCODE_OVER
        stack.over()

      elif opcode is MIR_OPCODE_LOAD_LOCAL
        stack.push(_vm_locals[item[1]])

      elif opcode is MIR_OPCODE_LOAD_GLOBAL
        stack.push(_vm_heap[item[1]])

      elif opcode is MIR_OPCODE_LOAD_BY_INDEX
        idx = stack.pop()
        box = stack.pop()
        stack.push(box[idx])

      elif opcode is MIR_OPCODE_LOAD_BY_KEY
        key = stack.pop()
        box = stack.pop()
        stack.push(box{key})

      elif opcode is MIR_OPCODE_LOAD_PARAMN
        paramBase  = _vm_paramBaseStack[_vm_deepIdx]
        paramIdx   = item[1]
        paramValue = stack.getByAbsoluteIdx(paramBase + paramIdx)
        stack.push(paramValue)

      elif opcode is MIR_OPCODE_STORE_LOCAL
        _vm_locals[item[1]] = stack.pop()

      elif opcode is MIR_OPCODE_STORE_GLOBAL
        _vm_heap[item[1]] = stack.pop()

      elif opcode is MIR_OPCODE_STORE_PARAMN
        paramBase = _vm_paramBaseStack[_vm_deepIdx]
        paramIdx  = item[1]
        stack.setByAbsoluteIdx(paramBase + paramIdx, stack.pop())

      elif opcode is MIR_OPCODE_STORE_BY_INDEX
        value = stack.pop()
        index = stack.pop()
        box   = stack.pop()

        # TODO: Why we need to check it here?
        if index isnt integer
          # Emulate the same beheavior as compiled version.
          # TODO: Handle source line.
          die('runtime error: integer expected')
        endif

        box[index] = value
        stack.push(box)

      elif opcode is MIR_OPCODE_STORE_BY_KEY
        val = stack.pop()
        key = stack.pop()
        box = stack.pop()

        box{key} = val
        stack.push(box)

      elif opcode is MIR_OPCODE_JMP
        ip = item[1] - 1

      elif opcode is MIR_OPCODE_JMP_IF_TRUE
        if stack.pop() is true
          ip = item[1] - 1
        endif

      elif opcode is MIR_OPCODE_JMP_IF_FALSE
        if stack.pop() is false
          ip = item[1] - 1
        endif

      elif opcode is MIR_OPCODE_MOVE_BACK
        src = stack.pop()
        dst = stack.pop()
        stack.push(src)

      elif opcode is MIR_OPCODE_CALL
        stack.push(ip)

        proto       = item[1]
        ip          = proto.ptr - 1
        _vm_deepIdx = _vm_deepIdx + 1
        # TODO: Better handling here?
        _vm_locals                 = []
        _vm_dataStack[_vm_deepIdx] = _vm_locals

        if ((proto.isConstructor is defined) and
            (proto.isConstructor is true))
          # TODO: Handle it in better way.
          # We need it to avoid eating new result (this pointer)
          # when constructor called just after.
          _vm_retValStack[_vm_deepIdx] = stack.peekN(len(proto.params) + 2)
        endif

      elif opcode is MIR_OPCODE_INIT_FRAME
        _vm_paramBaseStack[_vm_deepIdx] = stack.size - item[1] - 1

      elif opcode is MIR_OPCODE_RET
        ip = stack.pop()
        stack.eatN(item[1])
        stack.push(_vm_retValStack[_vm_deepIdx])
        _vm_deepIdx = _vm_deepIdx - 1

        if _vm_deepIdx >= 0
          _vm_locals  = _vm_dataStack[_vm_deepIdx]
        endif

      elif opcode is MIR_OPCODE_INNER_RET
        ip = stack.pop()

      elif opcode is MIR_OPCODE_LOAD_RETVAL
        stack.push(_vm_retValStack[_vm_deepIdx])

      elif opcode is MIR_OPCODE_STORE_RETVAL
        _vm_retValStack[_vm_deepIdx] = stack.pop()

      elif opcode is MIR_OPCODE_CREATE_OBJECT
        classProto              = item[1]
        newObject               = new VMachineStackObject(classProto)
        newObject.__mold_vtable = classProto.vtable

        stack.push(newObject)

      elif opcode is MIR_OPCODE_VCALL
        # TODO: Remove arg2.
        methodName  = item[1]
        paramsCnt   = item[2]
        thiz        = stack.peekN(paramsCnt)

        if @any(thiz is undefined,
                thiz.__mold_vtable is undefined) is true
          die('runtime error: virtual call on non-object')
        endif

        methodProto = thiz.__mold_vtable{methodName}

        if methodProto is undefined
          die(`error: object has no method '${methodName}'`)
        endif

        if len(methodProto.params) isnt paramsCnt - 1
          die('error: ' ~ methodName ~ ' function requires exactly ' ~ str(len(methodProto.params)) ~ ' parameter(s), but ' ~ str(paramsCnt) ~ ' were passed')
        endif

        stack.push(ip)
        ip          = methodProto.ptr - 1
        _vm_deepIdx = _vm_deepIdx + 1
        # TODO: Better handling here?
        _vm_locals                 = []
        _vm_dataStack[_vm_deepIdx] = _vm_locals

      elif opcode is MIR_OPCODE_PRINT
        # Built-in print
        paramsCnt = item[1]
        msg       = ''
        sep       = ''

        # TODO: Optimize it.
        # TODO: Clean up this mess.
        for idx in 0 .. paramsCnt
          __mold_printToStdOutput(sep)
          __mold_printToStdOutput(stack.peekN(paramsCnt - idx))
          sep = ' '
        endfor
        print ''

        stack.eatN(paramsCnt)

      elif opcode is MIR_OPCODE_STRING_BUILD
        # TODO: Review it.
        # TODO: Do we really need opcode for it (syscall vs opcode) ?
        # TODO: Why paramsCnt generates integer vs variant type conflict?
        paramsCnt = item[1]
        rv        = ''

        for idx in 0 .. paramsCnt
          rv = rv ~ str(stack.peekN(paramsCnt - idx))
        endfor

        stack.eatN(paramsCnt)
        stack.push(rv)

      elif opcode is MIR_OPCODE_SYSCALL
        # TODO: Clean up this mess.
        # TODO: Review it.
        # TODO: Optimize it.
        id        = item[1]
        paramsCnt = item[2]

        if paramsCnt is 0
          rv = __mold_syscall(id)

        elif paramsCnt is 1
          arg1 = stack.peekN(paramsCnt)
          rv   = __mold_syscall(id, arg1)

        elif paramsCnt is 2
          arg1 = stack.peekN(paramsCnt)
          arg2 = stack.peekN(paramsCnt - 1)
          rv   = __mold_syscall(id, arg1, arg2)

        elif paramsCnt is 3
          arg1 = stack.peekN(paramsCnt)
          arg2 = stack.peekN(paramsCnt - 1)
          arg3 = stack.peekN(paramsCnt - 2)
          rv   = __mold_syscall(id, arg1, arg2, arg3)

        else
          # TODO: Remove it after dead code detection.
          rv = null
          die(`error: unsupported number of syscall params: ${paramsCnt}`)
        endif

        stack.eatN(paramsCnt)
        stack.push(rv)

      elif opcode is MIR_OPCODE_LOAD_ARGC
        stack.push(argc)

      elif opcode is MIR_OPCODE_LOAD_ARGV
        stack.push(argv)

      elif opcode is MIR_OPCODE_FOR_EACH_KEYS
        box     = stack.pop()
        keyId   = item[1]
        valueId = item[2]
        bodyIp  = item[3]

        if (box isnt map) and (box isnt object)
          die('runtime error: map or object expected')
        endif

        # TODO: Optimize id.
        for keys k values v in box
          # Update key iterator.
          if keyId is defined
            _vm_locals[keyId] = k
          endif

          # Update value iterator.
          if valueId is defined
            _vm_locals[valueId] = v
          endif

          # Call function body.
          this._call(bodyIp)
        endfor

      elif opcode is MIR_OPCODE_FOR_EACH_INDEXES
        box     = stack.pop()
        idxId   = item[1]
        valueId = item[2]
        bodyIp  = item[3]

        # TODO: Optimize it.
        # TODO: Clean up this mess.
        if idxId is defined
          if (box isnt array) and (box isnt string)
            die('runtime error: array or string expected')
          endif

          for indexes i values v in box
            # Update key iterator.
            if idxId is defined
              _vm_locals[idxId] = i
            endif

            # Update value iterator.
            if valueId is defined
              _vm_locals[valueId] = v
            endif

            # Call function body.
            this._call(bodyIp)
          endfor

        else
          for values v in box
            # Update value iterator.
            if valueId is defined
              _vm_locals[valueId] = v
            endif

            # Call function body.
            this._call(bodyIp)
          endfor
        endif

      else
        die("unknown opcode '" ~ str(opcode) ~ "'")
      endif

      # print 'LEAVE', ip, opcode

      ip = ip + 1
    endwhile
  endmethod

  method run()
    this._call(0)
  endmethod

  method dumpCode()
    global MIR_OPCODE_NOP, MIR_OPCODE_NEG, MIR_OPCODE_ADD, MIR_OPCODE_SUB
    global MIR_OPCODE_MUL, MIR_OPCODE_DIV, MIR_OPCODE_IDIV, MIR_OPCODE_LOAD_IMM
    global MIR_OPCODE_LOAD_ARRAY, MIR_OPCODE_LOAD_MAP, MIR_OPCODE_CMP_EQ
    global MIR_OPCODE_CMP_NEQ, MIR_OPCODE_CMP_GT, MIR_OPCODE_CMP_GE
    global MIR_OPCODE_CMP_LT, MIR_OPCODE_CMP_LE, MIR_OPCODE_LOAD_LOCAL
    global MIR_OPCODE_LOAD_PARAMN, MIR_OPCODE_LOAD_GLOBAL, MIR_OPCODE_LOAD_RETVAL
    global MIR_OPCODE_LOAD_BY_INDEX, MIR_OPCODE_LOAD_BY_KEY
    global MIR_OPCODE_STORE_LOCAL, MIR_OPCODE_STORE_PARAMN
    global MIR_OPCODE_STORE_GLOBAL, MIR_OPCODE_STORE_RETVAL
    global MIR_OPCODE_STORE_BY_INDEX, MIR_OPCODE_STORE_BY_KEY
    global MIR_OPCODE_DROP, MIR_OPCODE_DROP_N, MIR_OPCODE_DUP, MIR_OPCODE_OVER
    global MIR_OPCODE_CREATE_OBJECT
    global MIR_OPCODE_VCALL, MIR_OPCODE_JMP, MIR_OPCODE_JMP_IF_TRUE
    global MIR_OPCODE_JMP_IF_FALSE, MIR_OPCODE_CALL, MIR_OPCODE_RET
    global MIR_OPCODE_PRINT, MIR_OPCODE_INIT_FRAME, MIR_OPCODE_RETVAL_GUARD
    global MIR_OPCODE_MOVE_BACK
    global MIR_OPCODE_LOAD_ARGC, MIR_OPCODE_LOAD_ARGV
    global MIR_OPCODE_FOR_EACH_INDEXES
    global MIR_OPCODE_FOR_EACH_KEYS
    global MIR_OPCODE_INNER_RET
    global MIR_OPCODE_SYSCALL
    global MIR_OPCODE_STRING_JOIN
    global MIR_OPCODE_STRING_BUILD
    global MIR_OPCODE_LOAD_NULL

    codeObj     = this.code
    code        = codeObj.code
    codeCnt     = codeObj.codeCnt
    labels      = codeObj.targetIps
    labelsCnt   = codeObj.targetIpsCnt
    comments    = codeObj.comments
    commentsCnt = codeObj.commentsCnt
    commentIdx  = 0
    labelIdx    = 0

    # TODO: It should works without this declaration, but after
    # compilation does not.
    txt = '[error]'

    for ip in 0 .. codeCnt
      # Fetch instruction
      item   = code[ip]
      opcode = item[0]

      arg1 = str(item[1])
      arg2 = str(item[2])
      arg3 = str(item[3])
      arg  = arg1

      # Emit comments if any.
      while (commentIdx < commentsCnt) and (comments[commentIdx][0] is ip)
        print ';', comments[commentIdx][1]
        commentIdx = commentIdx + 1
      endwhile

      # Emit label if any.
      #while (labelIdx < labelsCnt) and (labels[labelIdx] is ip)
      #  # TODO
      #  labelIdAsText = str(labels[labelIdx])
      #  print labelIdAsText ~ ':'
      #  labelIdx = labelIdx + 1
      #endwhile

      # Dispatch opcode.
      if opcode is MIR_OPCODE_NOP
        txt = 'nop'

      elif opcode is MIR_OPCODE_LOAD_NULL
        txt = 'load.null'

      elif opcode is MIR_OPCODE_LOAD_IMM
        value = typeof(item[1])

        if value is string
          if arg[0] is '"'
            txt = `load.string '${arg}'`
          else
            txt = `load.string '${arg}'`
          endif

        elif value is boolean
          txt = `load.boolean ${arg}`

        elif value is integer
          txt = `load.integer ${arg}`

        elif value is float
          txt = `load.float ${arg}`

        else
          die('error: unhandled imm type')
        endif

      elif opcode is MIR_OPCODE_LOAD_ARRAY
        txt = 'load.array'

      elif opcode is MIR_OPCODE_LOAD_MAP
        txt = 'load.map'

      elif opcode is MIR_OPCODE_NEG
        txt = 'neg'

      elif opcode is MIR_OPCODE_ADD
        txt = 'add'

      elif opcode is MIR_OPCODE_STRING_JOIN
        txt = 'string.join'

      elif opcode is MIR_OPCODE_STRING_BUILD
        txt = `string.build ${arg}`

      elif opcode is MIR_OPCODE_MUL
        txt = 'mul'

      elif opcode is MIR_OPCODE_SUB
        txt = 'sub'

      elif opcode is MIR_OPCODE_DIV
        txt = 'div'

      elif opcode is MIR_OPCODE_IDIV
        txt = 'idiv'

      elif opcode is MIR_OPCODE_CMP_EQ
        txt = 'cmp.eq'

      elif opcode is MIR_OPCODE_CMP_NEQ
        txt = 'cmp.neq'

      elif opcode is MIR_OPCODE_CMP_LT
        txt = 'cmp.lt'

      elif opcode is MIR_OPCODE_CMP_LE
        txt = 'cmp.le'

      elif opcode is MIR_OPCODE_CMP_GT
        txt = 'cmp.gt'

      elif opcode is MIR_OPCODE_CMP_GE
        txt = 'cmp.ge'

      elif opcode is MIR_OPCODE_PRINT
        txt = `print ${arg}`

      elif opcode is MIR_OPCODE_LOAD_LOCAL
        txt = `load.local ${arg}`

      elif opcode is MIR_OPCODE_LOAD_BY_INDEX
        txt = 'load.by.index'

      elif opcode is MIR_OPCODE_LOAD_BY_KEY
        txt = 'load.by.key'

      elif opcode is MIR_OPCODE_LOAD_PARAMN
        txt = `load.param ${arg}`

      elif opcode is MIR_OPCODE_LOAD_GLOBAL
        txt = `load.global ${arg}`

      elif opcode is MIR_OPCODE_LOAD_RETVAL
        txt = 'load.retval'

      elif opcode is MIR_OPCODE_STORE_LOCAL
        txt = `store.local ${arg}`

      elif opcode is MIR_OPCODE_STORE_PARAMN
        txt = `store.param ${arg}`

      elif opcode is MIR_OPCODE_STORE_GLOBAL
        txt = `store.global ${arg}`

      elif opcode is MIR_OPCODE_STORE_RETVAL
        txt = 'store.retval'

      elif opcode is MIR_OPCODE_STORE_BY_INDEX
        txt = 'store.by.index'

      elif opcode is MIR_OPCODE_STORE_BY_KEY
        txt = 'store.by.key'

      elif opcode is MIR_OPCODE_JMP
        txt = `jmp ${arg}`

      elif opcode is MIR_OPCODE_JMP_IF_TRUE
        txt = `jmp.if.true ${arg}`

      elif opcode is MIR_OPCODE_JMP_IF_FALSE
        txt = `jmp.if.false {arg}`

      elif opcode is MIR_OPCODE_CALL
        txt = 'call ' ~ str(item[1].ptr)

      elif opcode is MIR_OPCODE_INIT_FRAME
        txt = `init.frame ${arg}`

      elif opcode is MIR_OPCODE_RET
        txt = `ret ${arg}`

      elif opcode is MIR_OPCODE_INNER_RET
        txt = 'inner.ret'

      elif opcode is MIR_OPCODE_DROP
        txt = 'drop'

      elif opcode is MIR_OPCODE_DROP_N
        txt = `dropn ${arg}`

      elif opcode is MIR_OPCODE_DUP
        txt = 'dup'

      elif opcode is MIR_OPCODE_OVER
        txt = 'over'

      elif opcode is MIR_OPCODE_VCALL
        txt = `vcall ${arg1}`

      #elif opcode is MIR_OPCODE_RETVAL_GUARD
      #  txt = 'retval.guard'

      elif opcode is MIR_OPCODE_CREATE_OBJECT
        txt = 'create.object ' ~ item[1].name

      elif opcode is MIR_OPCODE_MOVE_BACK
        txt = 'move.back'

      elif opcode is MIR_OPCODE_LOAD_ARGC
        txt = 'load.argc'

      elif opcode is MIR_OPCODE_LOAD_ARGV
        txt = 'load.argv'

      elif opcode is MIR_OPCODE_SYSCALL
        txt = `syscall ${arg1}, ${arg2}`

      elif opcode is MIR_OPCODE_FOR_EACH_INDEXES
        txt = `for.each.indexes ${arg1}, ${arg2}, ${arg3}`

      elif opcode is MIR_OPCODE_FOR_EACH_KEYS
        txt = `for.each.keys ${arg1}, ${arg2}, ${arg3}`

      else
        # TODO: Remove unneded assign.
        txt = '[error]'
        die(`unknown opcode '${opcode}`)
      endif

      labelPrefix = `${ip}:`
      spacesCnt   = 5 - len(labelPrefix)

      for spaceIdx in 0 .. spacesCnt
        labelPrefix = labelPrefix ~ ' '
      endfor

      print labelPrefix, txt
    endfor
  endmethod
endclass
