################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        #
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         #
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

import 'PipeAbstract.mold'

class MIRQuadOptimizer extends PipeAbstract

  # ----------------------------------------------------------------------------
  #                         Init functions (constructor)
  # ----------------------------------------------------------------------------

  method constructor()
    super()
    this.bufferingEnabled = true
    this.lastOpcode       = 'nop'
    this.lastDst          = '[error]'
  endmethod

  # ----------------------------------------------------------------------------
  #                        Internal helpers (private)
  # ----------------------------------------------------------------------------

  # ----------------------------------------------------------------------------
  #                                  Public API
  # ----------------------------------------------------------------------------

  method processOneItem(item)
    opcode = item[0]
    dst    = item[1]
    src    = item[2]

    #print 'MIRQuadOptimizer::processOneItem', item

    if this.lastOpcode is 'store_index_variant'
      this._emitOneItem(item)

    elif this.lastOpcode is 'call'
      # Temporary fix for x = foo(x).
      this._emitOneItem(item)

    elif this.lastOpcode is 'vcall'
      # Temporary fix for x = x.foo().
      this._emitOneItem(item)

    elif (opcode is 'move_variant') and (this.lastOpcode isnt 'move_variant') and (this.lastDst is src)
      # tmp := x + y
      # z   := tmp
      buffer      = this.buffer
      lastItem    = buffer[len(buffer) - 1]
      lastItem[1] = dst

    else
      this._emitOneItem(item)
    endif

    if opcode is 'endp'
      this.flush()
    endif

    this.lastOpcode = opcode
    this.lastDst    = dst
  endmethod

endclass
