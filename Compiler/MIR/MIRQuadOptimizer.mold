################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import '../Utils/PipeAbstract.mold'

class MIRQuadOptimizer extends PipeAbstract

  # ----------------------------------------------------------------------------
  #                         Init functions (constructor)
  # ----------------------------------------------------------------------------

  method constructor()
    super()
    this.bufferingEnabled = true
    this.lastOpcode       = -1
    this.lastDst          = '[error]'
    this.lastSrc1         = '[error]'
    this.lastSrc2         = '[error]'
    this.currentFrame     = {}
  endmethod

  # ----------------------------------------------------------------------------
  #                        Internal helpers (private)
  # ----------------------------------------------------------------------------

  method _decreaseReadAndWriteHits(src)
    srcInfo = this.currentFrame.symbols{src}
    srcInfo.writeHits = srcInfo.writeHits - 1
    srcInfo.readHits  = srcInfo.readHits - 1
  endmethod

  # ----------------------------------------------------------------------------
  #                                  Public API
  # ----------------------------------------------------------------------------

  method processOneItem(item)
    global MIR1_OPCODE_STORE_INDEX
    global MIR1_OPCODE_STORE_KEY
    global MIR1_OPCODE_CALL
    global MIR1_OPCODE_VCALL
    global MIR1_OPCODE_PRINT
    global MIR1_OPCODE_MOVE
    global MIR1_OPCODE_JMP_IF_FALSE
    global MIR1_OPCODE_JMP_IF_TRUE
    global MIR1_OPCODE_PROC
    global MIR1_OPCODE_ENDP
    global MIR1_OPCODE_CMP_CC_GROUP
    global MIR1_OPCODE_JMP_IF_TYPEOF
    global MIR1_OPCODE_JMP_IF_NOT_TYPEOF
    global MIR1_OPCODE_CMP_IS_TYPEOF
    global MIR1_OPCODE_CMP_IS_NOT_TYPEOF

    opcode = item[0]
    dst    = item[1]
    src    = item[2]

    # print '[ MIRQuadOptimizer ]', opcode

    if ((this.lastOpcode is MIR1_OPCODE_STORE_INDEX) or
        (this.lastOpcode is MIR1_OPCODE_STORE_KEY))
      this._emitOneItem(item)

    elif this.lastOpcode is MIR1_OPCODE_CALL
      # Temporary fix for x = foo(x).
      this._emitOneItem(item)

    elif this.lastOpcode is MIR1_OPCODE_VCALL
      # Temporary fix for x = x.foo().
      this._emitOneItem(item)

    elif ((opcode is MIR1_OPCODE_PRINT) and
          (this.lastOpcode is MIR1_OPCODE_PRINT))
      # TODO: Use if x,y are ... ?
      this.lastDst[@afterlast] = '__EOL'
      for values oneItem in dst
        this.lastDst[@afterlast] = oneItem
      endfor

      dst = this.lastDst
/*
    TODO: Review it.
    What to do if both variables are used somewhere?
    Example:
    tmp := x + y
    z   := tmp

    print tmp, z <- BUG, tmp is removed after optimization

    elif ((opcode is MIR1_OPCODE_MOVE) and
          (this.lastOpcode isnt MIR1_OPCODE_MOVE) and
          (this.lastDst is string) and
          (src is string) and
          (this.lastDst is src))

      # tmp := x + y
      # z   := tmp
      buffer      = this.buffer
      lastItem    = buffer[@last]
      lastItem[1] = dst
*/
    elif ((opcode is MIR1_OPCODE_JMP_IF_FALSE) or
          (opcode is MIR1_OPCODE_JMP_IF_TRUE))

      lastOpcode      = this.lastOpcode
      lastOpcodeMajor = bitand(lastOpcode, 0xf8)
      newOpcode       = -1

      if lastOpcodeMajor is MIR1_OPCODE_CMP_CC_GROUP
        # cmp_xx       tmp, x, y
        # jmp_if_false label
        newOpcode = lastOpcode + 8

      elif lastOpcode is MIR1_OPCODE_CMP_IS_TYPEOF
        newOpcode = MIR1_OPCODE_JMP_IF_TYPEOF

      elif lastOpcode is MIR1_OPCODE_CMP_IS_NOT_TYPEOF
        newOpcode = MIR1_OPCODE_JMP_IF_NOT_TYPEOF
      endif

      if newOpcode isnt -1
        # this._decreaseReadAndWriteHits(src)
        # Invert condition if needed.
        if opcode is MIR1_OPCODE_JMP_IF_FALSE
          newOpcode = bitxor(newOpcode, 1)
        endif

        this._replaceLastItem([newOpcode, dst, this.lastSrc1, this.lastSrc2])
      else
        # Not a cmp/jmp pattern. Do nothing.
        this._emitOneItem(item)
      endif

    else
      this._emitOneItem(item)
    endif

    if opcode is MIR1_OPCODE_PROC
      this.currentFrame = item[1]

    elif opcode is MIR1_OPCODE_ENDP
      this.flush()
    endif

    this.lastOpcode = opcode
    this.lastDst    = dst
    this.lastSrc1   = item[2]
    this.lastSrc2   = item[3]
  endmethod
endclass
