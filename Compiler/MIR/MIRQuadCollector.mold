################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'Utils/PipeAbstract.mold'

class MIRQuadCollector extends PipeAbstract

  # ----------------------------------------------------------------------------
  #                         Init functions (constructor)
  # ----------------------------------------------------------------------------

  method constructor()
    this.quads        = []
    this.currentFrame = {'symbols': {}}
  endmethod

  # ----------------------------------------------------------------------------
  #                        Internal helpers (private)
  # ----------------------------------------------------------------------------

  method _pad(originalItem, desiredLen) -> rv
    if originalItem is undefined
      # Undefined (probably unused) operand.
      # Show nothing.
      item = '-'
    else
      item = originalItem
    endif

    if item is array
      # Operand is an array.
      # Render item-by-item.
      # TODO: Handle complex data in built-in str().
      rv  = '['
      sep = ''

      for values v in item
        rv  = rv ~ sep ~ str(v)
        sep = ', '
      endfor
      rv = rv ~ ']'

    else
      # Default way.
      rv      = str(item)
      padCnt  = desiredLen - len(rv)

      for idx in 0 .. padCnt
        rv = rv ~ ' '
      endfor
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                                  Public API
  # ----------------------------------------------------------------------------

  method processOneItem(item)
    cnt             = len(this.quads)
    this.quads[cnt] = item
  endmethod

  method getQuads() -> rv
    rv = this.quads
  endmethod

  method _printSymbolInfoRow(name, readHits, writeHits, type, kind)
    namePad      = this._pad(name, 10)
    readHitsPad  = this._pad(readHits, 4)
    writeHitsPad = this._pad(writeHits, 4)
    typePad      = this._pad(type, 9)
    kindPad      = this._pad(kind, 8)
    print '    ;', namePad, readHitsPad, writeHitsPad, typePad, kindPad
  endmethod

  method _dumpFrameInfo(frameInfo)
    global SYMBOL_KIND_AS_TEXT

    this._printSymbolInfoRow('var', 'W', 'R', 'data type', 'kind')
    this._printSymbolInfoRow('----------', '----', '----', '---------', '--------')

    for values item in frameInfo
      this._printSymbolInfoRow(item.name, item.writeHits, item.readHits, item.type, SYMBOL_KIND_AS_TEXT[item.kind])
    endfor
    print ''
  endmethod

#  method _getType(x) -> rv
#    xInfo = this.currentFrame.symbols[x]
#    if xInfo is undefined
#      die('error: symbol not found: ' ~ str(x))
#    else
#      rv = this.currentFrame.symbols[x].type
#      if rv is undefined
#        rv = 'variant'
#      endif
#    endif
#  endmethod

  method printQuads()
    code = this.quads

    for values item in code
      opcode = item[0]

      # print '[ MIRQuadCollector ]', item

      if opcode is 'proc'
        print 'proc', item[1].name
        this._dumpFrameInfo(item[1].symbols)
        this.currentFrame = item[1]

      elif opcode is 'init_frame'
        print '    init_frame'

      elif opcode is 'endp'
        print 'endp'

      elif opcode is 'comment'
        print ';', item[1]

      elif opcode is 'label'
        print item[1] ~ ':'

      elif opcode is 'print_array_of_variants_ln'
        print '   ', this._pad(opcode, 28), item[1]

      elif opcode is 'call'
        print '   ', this._pad(opcode, 28), this._pad(item[1], 8), this._pad(item[2], 8), item[3]

      else
        dst = item[1]
        x   = item[2]
        y   = item[3]

        #if (opcode is 'move')# or (opcode is 'conv')
        #  dstType = this._getType(dst)
        #  srcType = this._getType(x)

        #  if dstType isnt srcType
          #  opcode = opcode ~ '_' ~ srcType
          #else
          #  opcode = 'conv_' ~ srcType ~ '_to_' ~ dstType
        #  endif
        #else

/*
        if opcode[0] isnt 'c'
          xType = -1

          if x is string
            xType  = this._getType(x)
            opcode = opcode ~ '_' ~ xType
          endif

          if y is string
            yType  = this._getType(y)
            if xType isnt yType
              opcode = opcode ~ '_' ~ yType
            endif
          endif
        endif
*/
        paddedOpcode = this._pad(opcode, 28)
        paddedDst    = this._pad(dst, 8)
        paddedX      = this._pad(x, 8)
        paddedY      = this._pad(y, 8)

        print '   ', paddedOpcode, paddedDst, paddedX, paddedY
      endif
    endfor
  endmethod
endclass
