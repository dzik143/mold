################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

MIR_OPCODE_NOP = 0

MIR_OPCODE_NEG  = 1
MIR_OPCODE_ADD  = 2
MIR_OPCODE_SUB  = 3
MIR_OPCODE_MUL  = 4
MIR_OPCODE_DIV  = 5
MIR_OPCODE_IDIV = 6

MIR_OPCODE_LOAD_IMM   = 7
MIR_OPCODE_LOAD_ARRAY = 8
MIR_OPCODE_LOAD_MAP   = 9

MIR_OPCODE_CMP_EQ   = 10
MIR_OPCODE_CMP_NEQ  = 11
MIR_OPCODE_CMP_GT   = 12
MIR_OPCODE_CMP_GE   = 13
MIR_OPCODE_CMP_LT   = 14
MIR_OPCODE_CMP_LE   = 15

MIR_OPCODE_LOAD_LOCAL  = 16
MIR_OPCODE_LOAD_PARAMN = 17
MIR_OPCODE_LOAD_GLOBAL = 18
MIR_OPCODE_LOAD_RETVAL = 19
MIR_OPCODE_LOAD_INDEX  = 20
MIR_OPCODE_LOAD_CONST  = 21

MIR_OPCODE_STORE_LOCAL  = 22
MIR_OPCODE_STORE_PARAMN = 23
MIR_OPCODE_STORE_GLOBAL = 24
MIR_OPCODE_STORE_RETVAL = 25
MIR_OPCODE_STORE_INDEX  = 26

MIR_OPCODE_DROP      = 27
MIR_OPCODE_DROP_N    = 28
MIR_OPCODE_DUP       = 29
MIR_OPCODE_OVER      = 30
MIR_OPCODE_MOVE_BACK = 31

MIR_OPCODE_PRINT         = 32
MIR_OPCODE_PRINT_ERROR   = 33
MIR_OPCODE_PRINT_STDOUT  = 34
MIR_OPCODE_TYPEOF        = 35
MIR_OPCODE_CREATE_OBJECT = 36
MIR_OPCODE_GET_CLASSNAME = 37
MIR_OPCODE_VCALL         = 38

MIR_OPCODE_JMP          = 39
MIR_OPCODE_JMP_IF_TRUE  = 40
MIR_OPCODE_JMP_IF_FALSE = 41

MIR_OPCODE_CALL         = 42
MIR_OPCODE_RET          = 43
MIR_OPCODE_INNER_RET    = 44
MIR_OPCODE_RETVAL_GUARD = 45
MIR_OPCODE_INIT_FRAME   = 46
MIR_OPCODE_CONV2STR     = 47
MIR_OPCODE_SYSCALL      = 48

MIR_OPCODE_FOR_EACH = 100

MIR_OPCODE_GETLEN           = 251
MIR_OPCODE_LOAD_ARGC        = 252
MIR_OPCODE_LOAD_ARGV        = 253
MIR_OPCODE_LOAD_MOLD_SOURCE = 254

class MIRCode
  method constructor()
    # Store instructions list.
    this.code    = []
    this.codeCnt = 0

    # Store label to instruction id map.
    this.labels       = []
    this.labelsCnt    = 0
    this.targetIps    = []
    this.targetIpsCnt = 0

    # Store procedure metas.
    this.procedures    = []
    this.proceduresCnt = 0
    this.tmpMax        = 0
    this.localMax      = -1
    this.globalMax     = -1

    # Store class metas.
    this.classMap       = {}
    this.classList      = []
    this.classListCnt   = 0

    this.methodsMap     = {}
    this.methodsList    = []
    this.methodsListCnt = 0

    # Store comments in emit order [ip, comment]
    this.comments    = []
    this.commentsCnt = 0

    # Store list of jmp instructions to quick resolve.
    this.unresolvedJmps    = []
    this.unresolvedJmpsCnt = 0
  endmethod

  method beginProc(name, params, paramsCnt, rv)
    this.procedures[this.proceduresCnt] = {
      'name': name,
      'startAddr': this.codeCnt,
      'params': params,
      'paramsCnt': paramsCnt,
      'rv': rv
    }
    this.tmpMax   = -1
    this.localMax = -1
  endmethod

  method endProc()
    proto = this.procedures[this.proceduresCnt]

    proto['endAddr']   = this.codeCnt
    proto['localsCnt'] = this.localMax + 1
    proto['tempsCnt']  = this.codeCnt - proto['startAddr']

    this.proceduresCnt = this.proceduresCnt + 1
  endmethod

  method resolveLabel(labelId) -> rv
    rv = this.labels[labelId]
  endmethod

  method _resolveJmps()
    unresolvedJmps       = this.unresolvedJmps
    unresolvedJmpsCnt    = this.unresolvedJmpsCnt
    newUnresolvedJmps    = []
    newUnresolvedJmpsCnt = 0
    labels               = this.labels
    code                 = this.code

    for idx in 0 .. unresolvedJmpsCnt
      sourceIp = unresolvedJmps[idx]
      labelId  = code[sourceIp][1]
      targetIp = labels[labelId]

      if targetIp >= 0
        # Jump resolved, edit code and remove it from list.
        code[sourceIp][1] = targetIp
      else
        # Still unresolved - do nothing.
        newUnresolvedJmps[newUnresolvedJmpsCnt] = sourceIp
        newUnresolvedJmpsCnt = newUnresolvedJmpsCnt + 1
      endif
    endfor

    this.unresolvedJmps    = newUnresolvedJmps
    this.unresolvedJmpsCnt = newUnresolvedJmpsCnt
  endmethod

  method comment(msg)
    this.comments[this.commentsCnt] = [this.codeCnt, msg]
    this.commentsCnt = this.commentsCnt + 1
  endmethod

  method push0(op)
    this.code[this.codeCnt] = [op]
    this.codeCnt = this.codeCnt + 1
  endmethod

  method push1(op, arg)
    this.code[this.codeCnt] = [op, arg]
    this.codeCnt = this.codeCnt + 1
  endmethod

  method push2(op, arg1, arg2)
    this.code[this.codeCnt] = [op, arg1, arg2]
    this.codeCnt = this.codeCnt + 1
  endmethod

  method push3(op, arg1, arg2, arg3)
    this.code[this.codeCnt] = [op, arg1, arg2, arg3]
    this.codeCnt = this.codeCnt + 1
  endmethod

  method conv2str()
    global MIR_OPCODE_CONV2STR
    this.push0(MIR_OPCODE_CONV2STR)
  endmethod

  method nop()
    global MIR_OPCODE_NOP
    this.push0(MIR_OPCODE_NOP)
  endmethod

  method neg()
    global MIR_OPCODE_NEG
    this.push0(MIR_OPCODE_NEG)
  endmethod

  method add()
    global MIR_OPCODE_ADD
    this.push0(MIR_OPCODE_ADD)
  endmethod

  method sub()
    global MIR_OPCODE_SUB
    this.push0(MIR_OPCODE_SUB)
  endmethod

  method mul()
    global MIR_OPCODE_MUL
    this.push0(MIR_OPCODE_MUL)
  endmethod

  method div()
    global MIR_OPCODE_DIV
    this.push0(MIR_OPCODE_DIV)
  endmethod

  method idiv()
    global MIR_OPCODE_IDIV
    this.push0(MIR_OPCODE_IDIV)
  endmethod

  method loadArray()
    global MIR_OPCODE_LOAD_ARRAY
    this.push0(MIR_OPCODE_LOAD_ARRAY)
  endmethod

  method loadMap()
    global MIR_OPCODE_LOAD_MAP
    this.push0(MIR_OPCODE_LOAD_MAP)
  endmethod

  method loadImm(value)
    global MIR_OPCODE_LOAD_IMM
    this.push1(MIR_OPCODE_LOAD_IMM, value)
  endmethod

  method cmpEQ()
    global MIR_OPCODE_CMP_EQ
    this.push0(MIR_OPCODE_CMP_EQ)
  endmethod

  method cmpNEQ()
    global MIR_OPCODE_CMP_NEQ
    this.push0(MIR_OPCODE_CMP_NEQ)
  endmethod

  method cmpGT()
    global MIR_OPCODE_CMP_GT
    this.push0(MIR_OPCODE_CMP_GT)
  endmethod

  method cmpGE()
    global MIR_OPCODE_CMP_GE
    this.push0(MIR_OPCODE_CMP_GE)
  endmethod

  method cmpLT()
    global MIR_OPCODE_CMP_LT
    this.push0(MIR_OPCODE_CMP_LT)
  endmethod

  method cmpLE()
    global MIR_OPCODE_CMP_LE
    this.push0(MIR_OPCODE_CMP_LE)
  endmethod

  method loadLocal(id)
    global MIR_OPCODE_LOAD_LOCAL
    this.push1(MIR_OPCODE_LOAD_LOCAL, id)

    if id > this.localMax
      this.localMax = id
    endif
  endmethod

  method loadParamN(id)
    global MIR_OPCODE_LOAD_PARAMN
    this.push1(MIR_OPCODE_LOAD_PARAMN, id)
  endmethod

  method loadGlobal(id)
    global MIR_OPCODE_LOAD_GLOBAL
    this.push1(MIR_OPCODE_LOAD_GLOBAL, id)
  endmethod

  method loadRetVal()
    global MIR_OPCODE_LOAD_RETVAL
    this.push0(MIR_OPCODE_LOAD_RETVAL)
  endmethod

  method loadIndex()
    global MIR_OPCODE_LOAD_INDEX
    this.push0(MIR_OPCODE_LOAD_INDEX)
  endmethod

  method allocateLocalId() -> newId
    # TODO: Review it.
    newId = this.localMax + 1
    this.localMax = newId
  endmethod

  method storeLocal(id) -> newId
    global MIR_OPCODE_STORE_LOCAL

    if id is undefined
      newId = this.localMax + 1
      this.localMax = newId
    else
      newId = id
    endif

    this.push1(MIR_OPCODE_STORE_LOCAL, newId)
  endmethod

  method storeParamN(id)
    global MIR_OPCODE_STORE_PARAMN
    this.push1(MIR_OPCODE_STORE_PARAMN, id)
  endmethod

  method storeGlobal(id) -> newId
    global MIR_OPCODE_STORE_GLOBAL

    if id is undefined
      newId = this.globalMax + 1
      this.globalMax = newId
    else
      newId = id
    endif

    this.push1(MIR_OPCODE_STORE_GLOBAL, newId)
  endmethod

  method storeRetVal()
    global MIR_OPCODE_STORE_RETVAL
    this.push0(MIR_OPCODE_STORE_RETVAL)
  endmethod

  method storeIndex()
    global MIR_OPCODE_STORE_INDEX
    this.push0(MIR_OPCODE_STORE_INDEX)
  endmethod

  method moveBack()
    global MIR_OPCODE_MOVE_BACK
    this.push0(MIR_OPCODE_MOVE_BACK)
  endmethod

  method drop()
    global MIR_OPCODE_DROP
    this.push0(MIR_OPCODE_DROP)
  endmethod

  method dropN(n)
    global MIR_OPCODE_DROP_N
    this.push1(MIR_OPCODE_DROP_N, n)
  endmethod

  method dup()
    global MIR_OPCODE_DUP
    this.push0(MIR_OPCODE_DUP)
  endmethod

  method over()
    global MIR_OPCODE_OVER
    this.push0(MIR_OPCODE_OVER)
  endmethod

  method loadArgc()
    global MIR_OPCODE_LOAD_ARGC
    this.push0(MIR_OPCODE_LOAD_ARGC)
  endmethod

  method loadArgv()
    global MIR_OPCODE_LOAD_ARGV
    this.push0(MIR_OPCODE_LOAD_ARGV)
  endmethod

  method getTypeOf()
    global MIR_OPCODE_TYPEOF
    this.push0(MIR_OPCODE_TYPEOF)
  endmethod

  method getLen()
    global MIR_OPCODE_GETLEN
    this.push0(MIR_OPCODE_GETLEN)
  endmethod

  method createObject(classProto)
    global MIR_OPCODE_CREATE_OBJECT
    this.push1(MIR_OPCODE_CREATE_OBJECT, classProto)
  endmethod

  method _jmpInternal(labelId, opcode)
    if labelId is undefined
      die("error: jmp to undefined label")
    endif

    addr = this.labels[labelId]
    if addr is undefined
      # Error - jump to invalid label id.
      die("error: invalid label id '" + str(labelId) + "'")

    elif addr is -1
      # Unresolved label, we're still waiting for emit.
      this.unresolvedJmps[this.unresolvedJmpsCnt] = this.codeCnt
      this.unresolvedJmpsCnt = this.unresolvedJmpsCnt + 1
      this.push1(opcode, labelId)

    else
      # Target label is already emited, just convert it by address (ip).
      this.push1(opcode, addr)
    endif
  endmethod

  method jmp(labelId)
    global MIR_OPCODE_JMP
    this._jmpInternal(labelId, MIR_OPCODE_JMP)
  endmethod

  method jmpIfTrue(labelId)
    global MIR_OPCODE_JMP_IF_TRUE
    this._jmpInternal(labelId, MIR_OPCODE_JMP_IF_TRUE)
  endmethod

  method jmpIfFalse(labelId)
    global MIR_OPCODE_JMP_IF_FALSE
    this._jmpInternal(labelId, MIR_OPCODE_JMP_IF_FALSE)
  endmethod

  method ret(frameSize)
    global MIR_OPCODE_RET
    this.push1(MIR_OPCODE_RET, frameSize)
  endmethod

  method innerRet()
    global MIR_OPCODE_INNER_RET
    this.push0(MIR_OPCODE_INNER_RET)
  endmethod

  method call(proto)
    global MIR_OPCODE_CALL
    this.push1(MIR_OPCODE_CALL, proto)
  endmethod

  method vcall(name, paramsCnt)
    # TODO: Remove paramsCnt
    global MIR_OPCODE_VCALL
    this.push2(MIR_OPCODE_VCALL, name, paramsCnt)
  endmethod

  method callPrint(paramsCnt)
    global MIR_OPCODE_PRINT
    this.push1(MIR_OPCODE_PRINT, paramsCnt)
  endmethod

  method callPrintError(msg)
    global MIR_OPCODE_PRINT_ERROR
    this.push1(MIR_OPCODE_PRINT_ERROR, msg)
  endmethod

  method callPrintToStdOut(msg)
    global MIR_OPCODE_PRINT_STDOUT
    this.push1(MIR_OPCODE_PRINT_STDOUT, msg)
  endmethod

  method loadMoldSource()
    global MIR_OPCODE_LOAD_MOLD_SOURCE
    this.push0(MIR_OPCODE_LOAD_MOLD_SOURCE)
  endmethod

  method initFrame(paramsCnt)
    global MIR_OPCODE_INIT_FRAME
    this.push1(MIR_OPCODE_INIT_FRAME, paramsCnt)
  endmethod

  method createLabel() -> rv
    rv = this.labelsCnt
    this.labels[this.labelsCnt] = -1
    this.labelsCnt = this.labelsCnt + 1
  endmethod

  method emitLabel(labelId)
    targetId = this.labels[labelId]
    if targetId is undefined
      die("error: invalid label id '" + str(targetId) + "'")
    elif targetId >= 0
      die("error: label id '" + str(targetId) + "' is already emited")
    else
      this.labels[labelId] = this.codeCnt
      this.targetIps[this.targetIpsCnt] = this.codeCnt
      this.targetIpsCnt = this.targetIpsCnt + 1
      this._resolveJmps()
    endif
  endmethod

  method createAndEmitLabel() -> rv
    rv = this.createLabel()
    this.emitLabel(rv)
  endmethod

  method createMethod(name) -> id
    id          = this.methodsListCnt
    methodsMap  = this.methodsMap
    methodsList = this.methodsList

    if methodsMap[name] is undefined
      methodsMap[name]    = id
      methodsList[id]     = name
      this.methodsListCnt = id + 1
    endif
  endmethod

  method createClass(proto) -> id
    id           = this.classListCnt
    className    = proto['name']
    classMap     = this.classMap
    classList    = this.classList

    classMap[className] = id
    classList[id]       = proto

    methodsList    = proto['methodsAsFlatArray']
    methodsListCnt = proto['methodsAsFlatArrayCnt']

    for idx in 0 .. methodsListCnt
      this.createMethod(methodsList[idx])
    endfor

    this.classListCnt = id + 1
  endmethod

  method getClassProtoById(classId) -> proto
    classList = this.classList
    proto     = classList[classId]
  endmethod

  method retValGuard(rvName, funcName)
    global MIR_OPCODE_RETVAL_GUARD
    this.push2(MIR_OPCODE_RETVAL_GUARD, rvName, funcName)
  endmethod

  method forEach(keyId, valueId, cb)
    global MIR_OPCODE_FOR_EACH
    this.push3(MIR_OPCODE_FOR_EACH, keyId, valueId, cb)
  endmethod

  method syscall(id, paramsCnt)
    global MIR_OPCODE_SYSCALL
    this.push2(MIR_OPCODE_SYSCALL, id, paramsCnt)
  endmethod
endclass
