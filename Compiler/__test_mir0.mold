x = []
undefined = x[0]
object = 0

DEBUG_AST_OPTIMIZER = true
DEBUG_MOLD = true
NodeId = 1000

DEBUG_AST_OPTIMIZER = true
UNICC_DEBUG         = true

import 'Utils/SymbolTable.mold'
import 'AppMold.mold'
import 'AST/ASTSymbolsCollector.mold'
import 'AST/ASTPrinterText.mold'
import 'AST/ASTPrinterHtml.mold'
import 'AST/ASTTranslatorMIR0.mold'

import 'AST/ASTTranslatorMIR1.mold'
import 'MIR/MIRQuadCollector.mold'
import 'MIR/MIRQuadOptimizer.mold'
import 'CodeGenerator/CodeGeneratorX64.mold'
import 'VM/VMachineStack.mold'

import '1.ast'
#import 'Parser/ParserMold.mold'

#parser = new Parser()
#ast    = parser.parseFile(argv[1])

# Convert AST to form understood by translator.
# TODO: Remove this step.
#ast = ast.convert()


#print '<pre>'

app                 = new AppMold()
astSymbolsCollector = app.getAstSymbolsCollector()
astModuleResolver   = app.getAstModuleResolver()
astPrinterText      = new ASTPrinterText()
astPrinterHtml      = new ASTPrinterHtml()

if typeof(astModuleResolver) isnt 'undefined'
  print 'Resolving imports...'
  astModuleResolver.resolveImports(ast)
endif

print 'Building symbol table...'
astSymbolsCollector.buildSymbolTable(ast)

# ------------------------------------------------------------------------------

# TODO: More generic way to apply selected optimizations.
#app._debug('VCall optimization...')
#app.getAstOptimizerVCall().processNode(ast)

#app._debug('Inline optimization... (TEMPORARY DISABLED!)')
#app.getAstOptimizerInline().processNode(ast)

# Common preprocess before go-on with further AST optimization.
app._debug('Evaluating AST nodes...')
app.getAstEvaluator().processNode(ast)

#app._debug('Constant folding...')
#app.getAstOptimizerConstantFolding().processNode(ast)

#app._debug('If optimization...')
#app.getAstOptimizerIf().processNode(ast)

#app._debug('Dead code elimination...')
#app.getAstOptimizerDeadCodeRemove().processNode(ast)

#app._debug('Common subexpression elimination (CSE)...')
#app.getAstOptimizerCSE().processNode(ast)

# ------------------------------------------------------------------------------

#print 'Type cast...'
#app.getAstTypeCast().processNode(ast)

#astPrinterText.printNode(ast)

#print '</pre>'


#astPrinterHtml.printNode(ast)

print 'Going to translate AST (init)...'
astTranslatorMIR0 = new ASTTranslatorMIR0(app)
vm                = new VMachineStack()

# TODO: MIR0 (stack based)
print 'Going to translate AST to MIR0...'
astTranslatorMIR0.run(ast)

print 'Loading MIR0 code...'
vm.loadCode(astTranslatorMIR0.code)

print 'Dumping MIR0 code....'
vm.dumpCode()

print 'Running MIR0 code...'
vm.run()

/*

# MIR1 (register based)
print 'Going to translate AST to MIR1...'
mirCollector = new MIRQuadCollector()
mirOptimizer = new MIRQuadOptimizer()
#astTranslator.connectTo(mirCollector)
astTranslator.connectTo(mirOptimizer).connectTo(mirCollector)

astTranslator.run(ast)
mirCollector.printQuads()

# TODO: Better way to pass quads + meta + symbolTable.
code = astTranslator.code
code.quads = mirCollector.getQuads()
code.symbolTable = app.getSymbolTable()

# Generate x64 code.
codeGenerator = new CodeGeneratorX64()
codeGenerator.run(code)
*/
