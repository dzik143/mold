################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki (sw143@wp.pl)                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'Utils/SymbolTable.mold'
import 'AST/ASTModuleResolver.mold'
import 'AST/ASTSymbolsCollector.mold'
import 'AST/ASTEvaluator.mold'
import 'AST/ASTPreprocessor.mold'
import 'AST/ASTOptimizerConstantFolding.mold'
import 'AST/ASTOptimizerCSE.mold'
import 'AST/ASTOptimizerDeadCodeRemove.mold'
import 'AST/ASTOptimizerVCall.mold'
import 'AST/ASTOptimizerIf.mold'
import 'AST/ASTOptimizerInline.mold'
import 'AST/ASTTypeCast.mold'

# TODO: Clean up this mess.
import 'MIR/MIR.mold'

DEBUG_MOLD = false

class AppMold
  method constructor()
    this.logDebug('Created new object')

    this.symbolTable                 = new SymbolTable(this)
    this.astOptimizerConstantFolding = new ASTOptimizerConstantFolding(this)
    this.astSymbolsCollector         = new ASTSymbolsCollector(this)
    this.astEvaluator                = new ASTEvaluator(this)
    this.astPreprocessor             = new ASTPreprocessor(this)
    this.astOptimizerCSE             = new ASTOptimizerCSE(this)
    this.astOptimizerDeadCodeRemove  = new ASTOptimizerDeadCodeRemove(this)
    this.astOptimizerVCall           = new ASTOptimizerVCall(this)
    this.astOptimizerIf              = new ASTOptimizerIf(this)
    this.astOptimizerInline          = new ASTOptimizerInline(this)
    this.astTypeCast                 = new ASTTypeCast(this)
    this.astModuleResolver           = new ASTModuleResolver(this)

    # TODO: Clean up this mess.
    # TODO: Better way to pass current line/column to error
    # handler.
    this.clearLogContext()

    this.code = new MIRCode()
    this.logDebug('Ready to work')
  endmethod

  method clearLogContext()
    # TODO: Clean up this mess.
    # TODO: Better way to pass current line/column to error
    # handler.
    this.logCtx = {
      'filePath': '',
      'column': -1,
      'line': -1
    }
  endmethod

  method setLogContext(ctx)
    # TODO: Clean up this mess.
    # TODO: Better way to pass current line/column to error
    # handler.
    this.logCtx = ctx
  endmethod

  method logDebug(msg)
    global DEBUG_MOLD
    if DEBUG_MOLD is true
      print '[ AppMold ]', msg
    endif
  endmethod

  method logError(msg)
    logCtx    = this.logCtx
    msgPrefix = str(logCtx.filePath) ~ ':' ~ str(logCtx.line) ~ ':' ~ str(logCtx.column) ~ ': error: '
    die(msgPrefix ~ msg)
  endmethod

  method getMir1Code() -> rv
    rv = this.code
  endmethod

  method getSymbolTable() -> rv
    rv = this.symbolTable
  endmethod

  method getAstSymbolsCollector() -> rv
    rv = this.astSymbolsCollector
  endmethod

  method getAstOptimizerConstantFolding() -> rv
    rv = this.astOptimizerConstantFolding
  endmethod

  method getAstPreprocessor() -> rv
    rv = this.astPreprocessor
  endmethod

  method getAstEvaluator() -> rv
    rv = this.astEvaluator
  endmethod

  method getAstOptimizerCSE() -> rv
    rv = this.astOptimizerCSE
  endmethod

  method getAstOptimizerDeadCodeRemove() -> rv
    rv = this.astOptimizerDeadCodeRemove
  endmethod

  method getAstOptimizerVCall() -> rv
    rv = this.astOptimizerVCall
  endmethod

  method getAstOptimizerIf() -> rv
    rv = this.astOptimizerIf
  endmethod

  method getAstOptimizerInline() -> rv
    rv = this.astOptimizerInline
  endmethod

  method getAstModuleResolver() -> rv
    rv = this.astModuleResolver
  endmethod

  method getAstTypeCast() -> rv
    rv = this.astTypeCast
  endmethod
endclass
