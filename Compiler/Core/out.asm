format PE64 console 5.0
entry __MOLD_Main
include 'win64a.inc'
; ------------------------------------------------------------------------------
;                                 Code section
; ------------------------------------------------------------------------------
section '.text' code readable executable
stack 1024*1024*4, 1024*1024*4
include 'x64\Variant.asm'
; -----------------------------------------------
; function X64_ParseRegisterName
; -----------------------------------------------
X64_ParseRegisterName:

  ; init frame
  ; ----------
  regId EQU rdi
  name EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp983 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp989 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp982 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp986 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp990 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp983 + Variant_t.type], eax
  mov [tmp989 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ regId ], -1

  ; __mold_syscall( 44 )
  lea rcx , [ name ]
  lea rdx , [ tmp983 ]
  call qword [rbx + 8 * 44 ]

  lea rcx, [ tmp983 ]
  lea rdx, [ __literal2 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l984

  lea  rcx , [ X64_REGISTER_NAMES_MAP ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp983 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp983  + Variant_t.type], 0
  jz l987

  lea  rcx , [ X64_REGISTER_NAMES_MAP ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp989 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp989 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp989 + Variant_t.value]
  mov dword [ regId ], eax

l987:

l988:

l984:

l985:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp983 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp989 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore name
  restore regId
  restore tmp982
  restore tmp983
  restore tmp986
  restore tmp989
  restore tmp990

; -----------------------------------------------
; function X64_IsReg8
; -----------------------------------------------
X64_IsReg8:

  ; init frame
  ; ----------
  rv EQU rdi
  regId EQU rbp - 12 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp991 EQU rbp - 16 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp992 EQU rbp - 20 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48

  mov dword [ regId ], ecx

  ; code
  ; ----

  mov dword [ tmp992 ], 16

  mov  eax, dword [ regId ]
  mov  ecx, dword [ tmp992 ]
  cdq
  idiv ecx
  mov  dword [ tmp991 ], eax

  mov dword [ tmp992 ], 0

  mov dword [ rv ], 0
  mov ecx, dword [ tmp991 ]
  cmp ecx, dword [ tmp992 ]
  setz byte [ rv ]


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore regId
  restore rv
  restore tmp991
  restore tmp992

; -----------------------------------------------
; function X64_IsReg16
; -----------------------------------------------
X64_IsReg16:

  ; init frame
  ; ----------
  rv EQU rdi
  regId EQU rbp - 12 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp993 EQU rbp - 16 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp994 EQU rbp - 20 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48

  mov dword [ regId ], ecx

  ; code
  ; ----

  mov dword [ tmp994 ], 16

  mov  eax, dword [ regId ]
  mov  ecx, dword [ tmp994 ]
  cdq
  idiv ecx
  mov  dword [ tmp993 ], eax

  mov dword [ tmp994 ], 1

  mov dword [ rv ], 0
  mov ecx, dword [ tmp993 ]
  cmp ecx, dword [ tmp994 ]
  setz byte [ rv ]


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore regId
  restore rv
  restore tmp993
  restore tmp994

; -----------------------------------------------
; function X64_IsReg32
; -----------------------------------------------
X64_IsReg32:

  ; init frame
  ; ----------
  rv EQU rdi
  regId EQU rbp - 12 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp995 EQU rbp - 16 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp996 EQU rbp - 20 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48

  mov dword [ regId ], ecx

  ; code
  ; ----

  mov dword [ tmp996 ], 16

  mov  eax, dword [ regId ]
  mov  ecx, dword [ tmp996 ]
  cdq
  idiv ecx
  mov  dword [ tmp995 ], eax

  mov dword [ tmp996 ], 2

  mov dword [ rv ], 0
  mov ecx, dword [ tmp995 ]
  cmp ecx, dword [ tmp996 ]
  setz byte [ rv ]


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore regId
  restore rv
  restore tmp995
  restore tmp996

; -----------------------------------------------
; function X64_IsReg64
; -----------------------------------------------
X64_IsReg64:

  ; init frame
  ; ----------
  rv EQU rdi
  regId EQU rbp - 12 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp997 EQU rbp - 16 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp998 EQU rbp - 20 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48

  mov dword [ regId ], ecx

  ; code
  ; ----

  mov dword [ tmp998 ], 16

  mov  eax, dword [ regId ]
  mov  ecx, dword [ tmp998 ]
  cdq
  idiv ecx
  mov  dword [ tmp997 ], eax

  mov dword [ tmp998 ], 3

  mov dword [ rv ], 0
  mov ecx, dword [ tmp997 ]
  cmp ecx, dword [ tmp998 ]
  setz byte [ rv ]


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore regId
  restore rv
  restore tmp997
  restore tmp998

; -----------------------------------------------
; function X64_IsRegSTI
; -----------------------------------------------
X64_IsRegSTI:

  ; init frame
  ; ----------
  rv EQU rdi
  regId EQU rbp - 12 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp999 EQU rbp - 16 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1000 EQU rbp - 20 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48

  mov dword [ regId ], ecx

  ; code
  ; ----

  mov dword [ tmp1000 ], 8

  mov  eax, dword [ regId ]
  mov  ecx, dword [ tmp1000 ]
  cdq
  idiv ecx
  mov  dword [ tmp999 ], eax

  mov dword [ tmp1000 ], 8

  mov dword [ rv ], 0
  mov ecx, dword [ tmp999 ]
  cmp ecx, dword [ tmp1000 ]
  setz byte [ rv ]


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore regId
  restore rv
  restore tmp999
  restore tmp1000

; -----------------------------------------------
; function X64_IsRegMM
; -----------------------------------------------
X64_IsRegMM:

  ; init frame
  ; ----------
  rv EQU rdi
  regId EQU rbp - 12 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp1001 EQU rbp - 16 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1002 EQU rbp - 20 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48

  mov dword [ regId ], ecx

  ; code
  ; ----

  mov dword [ tmp1002 ], 8

  mov  eax, dword [ regId ]
  mov  ecx, dword [ tmp1002 ]
  cdq
  idiv ecx
  mov  dword [ tmp1001 ], eax

  mov dword [ tmp1002 ], 9

  mov dword [ rv ], 0
  mov ecx, dword [ tmp1001 ]
  cmp ecx, dword [ tmp1002 ]
  setz byte [ rv ]


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore regId
  restore rv
  restore tmp1001
  restore tmp1002

; -----------------------------------------------
; function __AbstractDescentParser_constructor$0
; -----------------------------------------------
__AbstractDescentParser_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 4 , readHits= 3 )
  tmp1004 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1003 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1005 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1004 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1003 ], 0

  mov eax, dword [ tmp1003 ]
  mov [ tmp1004 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1004 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1004 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ __literal5 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1005 ], 0

  mov [ tmp1004 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1005 ]
  mov [ tmp1004 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp1004 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1004 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp1003
  restore tmp1004
  restore tmp1005

; -----------------------------------------------
; function __AbstractDescentParser__error$1
; -----------------------------------------------
__AbstractDescentParser__error$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  msg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1006 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1007 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1008 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1009 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  xor eax, eax
  mov [tmp1006 + Variant_t.type], eax
  mov [tmp1007 + Variant_t.type], eax
  mov [tmp1008 + Variant_t.type], eax
  mov [tmp1009 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp1009 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1008 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal7 ]
  lea  rdx , [ tmp1009 ]
  lea  r8 , [ tmp1008 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1007 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1008 ]
  lea  rdx , [ __literal9 ]
  lea  r8 , [ tmp1007 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ msg ]
  lea rdx , [ tmp1009 ]
  call qword [rbx + 8 * 42 ]

  lea  rcx, [ tmp1006 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1007 ]
  lea  rdx , [ tmp1009 ]
  lea  r8 , [ tmp1006 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp1006 ]
  call qword [rbx + 8 * 41 ]


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1006 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1007 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1008 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1009 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore msg
  restore tmp1006
  restore tmp1007
  restore tmp1008
  restore tmp1009

; -----------------------------------------------
; function __AbstractDescentParser__eatChar$0
; -----------------------------------------------
__AbstractDescentParser__eatChar$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  tmp1010 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1011 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1010 + Variant_t.type], eax
  mov [tmp1011 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp1011 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 20 )
  lea rcx , [ tmp1011 ]
  lea rdx , [ tmp1010 ]
  call qword [rbx + 8 * 20 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1010 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1010 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1011 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp1010
  restore tmp1011

; -----------------------------------------------
; function __AbstractDescentParser__getChar$0
; -----------------------------------------------
__AbstractDescentParser__getChar$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  tmp1012 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1013 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1012 + Variant_t.type], eax
  mov [tmp1013 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp1013 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 20 )
  lea rcx , [ tmp1013 ]
  lea rdx , [ tmp1012 ]
  call qword [rbx + 8 * 20 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1012 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1012 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1013 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp1012
  restore tmp1013

; -----------------------------------------------
; function __AbstractDescentParser__skipWhites$0
; -----------------------------------------------
__AbstractDescentParser__skipWhites$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  tmp1017 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1016 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1017 + Variant_t.type], eax

  ; code
  ; ----

; 
; -----------------------------
; BEGIN: while
; 
l1014:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1017 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1017 ]
  lea rdx, [ __literal5 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1015

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  jmp l1014

l1015:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1017 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp1016
  restore tmp1017

; -----------------------------------------------
; function __AbstractDescentParser__isLetter$1
; -----------------------------------------------
__AbstractDescentParser__isLetter$1:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1018 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  v EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )
  tmp1019 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp1021 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1023 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1018 + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 31 )
  lea rcx , [ x ]
  lea rdx , [ tmp1018 ]
  call qword [rbx + 8 * 31 ]

  cmp [ tmp1018 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1018 + Variant_t.value]
  mov dword [ v ], eax

  mov dword [ rv ], 1

  mov dword [ tmp1021 ], 0

  mov dword [ tmp1019 ], 65

  mov eax, dword [ v ]
  cmp eax, dword [ tmp1019 ]
  jl l1022

  mov dword [ tmp1019 ], 90

  mov dword [ tmp1021 ], 0
  mov ecx, dword [ v ]
  cmp ecx, dword [ tmp1019 ]
  setle byte [ tmp1021 ]

l1022:

  cmp dword [ tmp1021 ], 0
  jnz l1020

  mov dword [ tmp1021 ], 0

  mov dword [ tmp1019 ], 97

  mov eax, dword [ v ]
  cmp eax, dword [ tmp1019 ]
  jl l1024

  mov dword [ tmp1019 ], 122

  mov dword [ tmp1021 ], 0
  mov ecx, dword [ v ]
  cmp ecx, dword [ tmp1019 ]
  setle byte [ tmp1021 ]

l1024:

  mov eax, dword [ tmp1021 ]
  mov dword [ rv ], eax

l1020:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1018 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore x
  restore v
  restore rv
  restore tmp1018
  restore tmp1019
  restore tmp1021
  restore tmp1023

; -----------------------------------------------
; function __AbstractDescentParser__isEndOfLine$1
; -----------------------------------------------
__AbstractDescentParser__isEndOfLine$1:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1025 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  v EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp1026 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp1028 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1030 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1025 + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 31 )
  lea rcx , [ x ]
  lea rdx , [ tmp1025 ]
  call qword [rbx + 8 * 31 ]

  cmp [ tmp1025 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1025 + Variant_t.value]
  mov dword [ v ], eax

  mov dword [ rv ], 1

  mov dword [ tmp1028 ], 1

  mov dword [ tmp1026 ], 13

  mov eax, dword [ v ]
  cmp eax, dword [ tmp1026 ]
  jz l1029

  mov dword [ tmp1026 ], 10

  mov dword [ tmp1028 ], 0
  mov ecx, dword [ v ]
  cmp ecx, dword [ tmp1026 ]
  setz byte [ tmp1028 ]

l1029:

  cmp dword [ tmp1028 ], 0
  jnz l1027

  mov dword [ tmp1026 ], 0

  mov dword [ rv ], 0
  mov ecx, dword [ v ]
  cmp ecx, dword [ tmp1026 ]
  setz byte [ rv ]

l1027:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1025 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore x
  restore v
  restore rv
  restore tmp1025
  restore tmp1026
  restore tmp1028
  restore tmp1030

; -----------------------------------------------
; function __AbstractDescentParser__isDigit$1
; -----------------------------------------------
__AbstractDescentParser__isDigit$1:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1031 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  v EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp1032 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp1034 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1031 + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 31 )
  lea rcx , [ x ]
  lea rdx , [ tmp1031 ]
  call qword [rbx + 8 * 31 ]

  cmp [ tmp1031 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1031 + Variant_t.value]
  mov dword [ v ], eax

  mov dword [ rv ], 0

  mov dword [ tmp1032 ], 48

  mov eax, dword [ v ]
  cmp eax, dword [ tmp1032 ]
  jl l1033

  mov dword [ tmp1032 ], 57

  mov dword [ rv ], 0
  mov ecx, dword [ v ]
  cmp ecx, dword [ tmp1032 ]
  setle byte [ rv ]

l1033:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1031 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore x
  restore v
  restore rv
  restore tmp1031
  restore tmp1032
  restore tmp1034

; -----------------------------------------------
; function __AbstractDescentParser__isLetterOrDigit$1
; -----------------------------------------------
__AbstractDescentParser__isLetterOrDigit$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1036 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1037 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1038 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0

  ; code
  ; ----

  mov dword [ rv ], 1

  lea rcx , [ this ]
  lea rdx , [ x ]
  lea  rax , [ tmp1037 ]
  call  __AbstractDescentParser__isLetter$1

  mov dword [ tmp1038 ], 1

  mov eax, dword [ tmp1037 ]
  cmp eax, dword [ tmp1038 ]
  jz l1035

  lea rcx , [ this ]
  lea rdx , [ x ]
  lea  rax , [ tmp1038 ]
  call  __AbstractDescentParser__isDigit$1

  mov dword [ tmp1037 ], 1

  mov dword [ rv ], 0
  mov ecx, dword [ tmp1038 ]
  cmp ecx, dword [ tmp1037 ]
  setz byte [ rv ]

l1035:


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore x
  restore rv
  restore tmp1036
  restore tmp1037
  restore tmp1038

; -----------------------------------------------
; function __AbstractDescentParser__matchChar$1
; -----------------------------------------------
__AbstractDescentParser__matchChar$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1040 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1043 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1044 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1045 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1046 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1039 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1040 + Variant_t.type], eax
  mov [tmp1043 + Variant_t.type], eax
  mov [tmp1044 + Variant_t.type], eax
  mov [tmp1045 + Variant_t.type], eax
  mov [tmp1046 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1040 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1040 ]
  lea rdx, [ x ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1041

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  jmp l1042

l1041:

  lea  rcx , [ x ]
  lea  rdx , [ __literal11 ]
  lea  r8 , [ tmp1040 ]
  call  __MOLD_VariantAdd

  lea  rcx, [ tmp1045 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal10 ]
  lea  rdx , [ tmp1040 ]
  lea  r8 , [ tmp1045 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1046 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1046 ]
  lea rdx , [ tmp1040 ]
  call qword [rbx + 8 * 42 ]

  lea  rcx, [ tmp1044 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1045 ]
  lea  rdx , [ tmp1040 ]
  lea  r8 , [ tmp1044 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1043 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1044 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1043 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1043 ]
  call  __AbstractDescentParser__error$1

l1042:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1040 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1043 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1044 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1045 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1046 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore x
  restore tmp1039
  restore tmp1040
  restore tmp1043
  restore tmp1044
  restore tmp1045
  restore tmp1046

; -----------------------------------------------
; function __AbstractDescentParser__matchLetter$0
; -----------------------------------------------
__AbstractDescentParser__matchLetter$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  tmp1049 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1047 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1048 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1050 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1053 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1049 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1049 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp1049 ]
  lea  rax , [ tmp1048 ]
  call  __AbstractDescentParser__isLetter$1

  mov dword [ tmp1050 ], 1

  mov eax, dword [ tmp1048 ]
  cmp eax, dword [ tmp1050 ]
  jnz l1051

  lea rcx , [ this ]
  lea  rax , [ rv ]
  call  __AbstractDescentParser__getChar$0

  jmp l1052

l1051:

  mov dword [ tmp1053 ], -1

  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1053 ]
  mov [ rv + Variant_t.value], rax

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal13
  lea rdx , [ __literal13 ]
  call  __AbstractDescentParser__error$1

l1052:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1049 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp1047
  restore tmp1048
  restore tmp1049
  restore tmp1050
  restore tmp1053

; -----------------------------------------------
; function __AbstractDescentParser__matchLetterOrDigit$0
; -----------------------------------------------
__AbstractDescentParser__matchLetterOrDigit$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  tmp1056 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1054 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1055 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1057 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1060 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1056 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1056 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp1056 ]
  lea  rax , [ tmp1055 ]
  call  __AbstractDescentParser__isLetterOrDigit$1

  mov dword [ tmp1057 ], 1

  mov eax, dword [ tmp1055 ]
  cmp eax, dword [ tmp1057 ]
  jnz l1058

  lea rcx , [ this ]
  lea  rax , [ rv ]
  call  __AbstractDescentParser__getChar$0

  jmp l1059

l1058:

  mov dword [ tmp1060 ], -1

  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1060 ]
  mov [ rv + Variant_t.value], rax

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal14
  lea rdx , [ __literal14 ]
  call  __AbstractDescentParser__error$1

l1059:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1056 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp1054
  restore tmp1055
  restore tmp1056
  restore tmp1057
  restore tmp1060

; -----------------------------------------------
; function __AbstractDescentParser__emitOneItem$1
; -----------------------------------------------
__AbstractDescentParser__emitOneItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  token EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1061 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1062 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ token ], xmm0
  xor eax, eax
  mov [tmp1061 + Variant_t.type], eax
  mov [tmp1062 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1062 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1062 ]
  lea rdx , [ token ]
  lea  rax , [ tmp1061 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3955
  movsxd rax, dword [ tmp1061 + Variant_t.value ]
  mov    qword [ tmp1061 + Variant_t.value ], rax
l3955:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp1061 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1062 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore token
  restore tmp1061
  restore tmp1062

; -----------------------------------------------
; function __AbstractDescentParser__parseSource$0
; -----------------------------------------------
__AbstractDescentParser__parseSource$0_vcall:
__AbstractDescentParser__parseSource$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal15
  lea rdx , [ __literal15 ]
  call  __AbstractDescentParser__error$1


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __AbstractDescentParser_parseFile$1
; -----------------------------------------------
__AbstractDescentParser_parseFile$1_vcall:
__AbstractDescentParser_parseFile$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 6 )
  path EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1063 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1064 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ path ], xmm0
  xor eax, eax
  mov [tmp1063 + Variant_t.type], eax
  mov [tmp1064 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ path ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp1064 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 1 )
  lea rcx , [ tmp1064 ]
  lea rdx , [ tmp1063 ]
  call qword [rbx + 8 * 1 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp1063 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ __literal5 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea  rax , [ tmp1063 ]
  mov  r10d, 1
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3956
  movsxd rax, dword [ tmp1063 + Variant_t.value ]
  mov    qword [ tmp1063 + Variant_t.value ], rax
l3956:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp1063 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1064 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore path
  restore tmp1063
  restore tmp1064

; -----------------------------------------------
; function __AbstractDescentParser_connectTo$1
; -----------------------------------------------
__AbstractDescentParser_connectTo$1_vcall:
__AbstractDescentParser_connectTo$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  outputObject EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ outputObject ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ outputObject ]
  call __MOLD_VariantMove


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore outputObject
  restore rv

; -----------------------------------------------
; function hex
; -----------------------------------------------
hex:

  ; init frame
  ; ----------
  rv EQU rdi
  value EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 11 )
  digits EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  tmp1067 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  tmp1079 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp1065 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1066 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 13 , readHits= 13 )
  tmp1070 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1073 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1076 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1084 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  d EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  r EQU rbp - 120 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [x + Variant_t.type], eax
  mov [digits + Variant_t.type], eax
  mov [tmp1067 + Variant_t.type], eax
  mov [tmp1079 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  lea  rcx, [ digits ]
  call __MOLD_VariantDestroy
  lea rcx, [ digits ]
  lea rdx, [ __literal16 ]
  call __MOLD_VariantMove

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantMove

  mov dword [ tmp1066 ], 0

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea rcx, [ tmp1067 ]
  lea rdx, [ x ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1068

  mov dword [ tmp1066 ], -127

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp1067 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1071

  mov dword [ tmp1066 ], 256

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea  rcx , [ tmp1067 ]
  lea  rdx , [ x ]
  lea  r8 , [ x ]
  call  __MOLD_VariantAdd

  jmp l1072

l1071:

  mov dword [ tmp1066 ], -32767

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp1067 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1074

  mov dword [ tmp1066 ], 65536

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea  rcx , [ tmp1067 ]
  lea  rdx , [ x ]
  lea  r8 , [ x ]
  call  __MOLD_VariantAdd

  jmp l1075

l1074:

  mov dword [ tmp1066 ], -2147483647

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp1067 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1077

  mov rax, 4294967295
  mov [ tmp1079 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1079 + Variant_t.value], rax

  lea  rcx , [ tmp1079 ]
  lea  rdx , [ x ]
  lea  r8 , [ tmp1067 ]
  call  __MOLD_VariantAdd

  mov dword [ tmp1066 ], 1

  mov [ tmp1079 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1079 + Variant_t.value], rax

  lea  rcx , [ tmp1067 ]
  lea  rdx , [ tmp1079 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantAdd

l1077:

l1078:

l1075:

l1072:

l1068:

l1069:

  mov dword [ tmp1066 ], 0

  mov [ tmp1079 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1079 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp1079 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1080

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal18 ]
  call __MOLD_VariantMove

  jmp l1081

l1080:

; 
; -----------------------------
; BEGIN: while
; 
l1082:

  mov dword [ tmp1066 ], 0

  mov [ tmp1079 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1079 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp1079 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1083

  mov dword [ tmp1066 ], 16

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea  rcx , [ x ]
  lea  rdx , [ tmp1067 ]
  lea  r8 , [ tmp1079 ]
  call  __MOLD_VariantDivAsInteger

  cmp [ tmp1079 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1079 + Variant_t.value]
  mov dword [ d ], eax

  mov dword [ tmp1084 ], 16

  mov eax, dword [ d ]
  imul eax, dword [ tmp1084 ]
  mov dword [ tmp1066 ], eax

  mov [ tmp1067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1066 ]
  mov [ tmp1067 + Variant_t.value], rax

  lea  rcx , [ x ]
  lea  rdx , [ tmp1067 ]
  lea  r8 , [ tmp1079 ]
  call  __MOLD_VariantSub

  cmp [ tmp1079 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1079 + Variant_t.value]
  mov dword [ r ], eax

  lea  rcx , [ digits ]
  lea  rdx , [ r ]
  lea  r8 , [ tmp1079 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1079 ]
  lea  rdx , [ rv ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  mov [ x + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ d ]
  mov [ x + Variant_t.value], rax

  jmp l1082

l1083:

; 
; END: while
; -----------------------------
; 
l1081:


  ; clean frame
  ; -----------
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ digits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1067 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1079 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore value
  restore x
  restore digits
  restore rv
  restore tmp1065
  restore tmp1066
  restore tmp1067
  restore tmp1070
  restore tmp1073
  restore tmp1076
  restore tmp1079
  restore tmp1084
  restore d
  restore r

; -----------------------------------------------
; function __X64Parser_constructor$0
; -----------------------------------------------
__X64Parser_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser_constructor$0

  lea rcx , [ this ]
  call  __X64Parser_reset$0


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __X64Parser_reset$0
; -----------------------------------------------
__X64Parser_reset$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1085 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1085 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp1085 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1085 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal28 ]
  lea  r8 , [ tmp1085 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1085 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1085 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1085 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1085 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1085 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1085 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ __literal17 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1085 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp1085

; -----------------------------------------------
; function __X64Parser__emitLabel$1
; -----------------------------------------------
__X64Parser__emitLabel$1:

  ; init frame
  ; ----------
  labelObj EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 11 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 7 )
  offset EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp1087 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp1091 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1096 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1097 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1086 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1088 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [offset + Variant_t.type], eax
  mov [tmp1087 + Variant_t.type], eax
  mov [tmp1091 + Variant_t.type], eax
  mov [tmp1096 + Variant_t.type], eax
  mov [tmp1097 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1088 ], 0

  lea  rcx , [ name ]
  lea  rdx , [ tmp1088 ]
  lea  r8 , [ tmp1087 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp1087 ]
  lea rdx, [ __literal32 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1089

  lea  rcx , [ this ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ tmp1087 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1087 ]
  lea  rdx , [ name ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin

  jmp l1090

l1089:

  lea  rcx , [ this ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStoreAtKey

l1090:

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1087 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1087 ]
  lea  rax , [ offset ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3957
  movsxd rax, dword [ offset + Variant_t.value ]
  mov    qword [ offset + Variant_t.value ], rax
l3957:


  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1087 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1087 ]
  lea  rdx , [ name ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantLoadFromKey

  cmp [ labelObj + Variant_t.type ], 0
  jnz l1092

  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ labelObj ]
  lea  rdx , [ __const1094 ]
  lea  r8 , [ __const1095 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1087 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1087 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ labelObj ]
  lea  rdx , [ __literal35 ]
  lea  r8 , [ tmp1087 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1087 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1087 ]
  lea  rdx , [ name ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantStoreAtKey

l1092:

l1093:

  lea  rcx , [ labelObj ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ offset ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ labelObj ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ offset ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1087 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1097 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp1097 ]
  lea rdx , [ tmp1096 ]
  call qword [rbx + 8 * 43 ]

  cmp [ tmp1096 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1096 + Variant_t.value]
  mov dword [ tmp1088 ], eax

  lea  rcx , [ tmp1087 ]
  lea  rdx , [ tmp1088 ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantStoreAtIndex_int32


  ; clean frame
  ; -----------
  lea  rcx, [ offset ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1087 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1091 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1096 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1097 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore offset
  restore labelObj
  restore tmp1086
  restore tmp1087
  restore tmp1088
  restore tmp1091
  restore tmp1096
  restore tmp1097

; -----------------------------------------------
; function __X64Parser__getToken$0
; -----------------------------------------------
__X64Parser__getToken$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 21 )
  constantValue EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp1099 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 11 , readHits= 11 )
  tmp1098 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1102 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1104 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1106 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1112 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [constantValue + Variant_t.type], eax
  mov [tmp1099 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1099 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1099 ]
  lea rdx, [ __literal39 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1100

  lea rcx , [ this ]
  lea  rax , [ tmp1099 ]
  call  __AbstractDescentParser__getChar$0

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal17 ]
  lea  rdx , [ tmp1099 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1101

l1100:

  mov dword [ tmp1102 ], 1

  mov dword [ tmp1104 ], 1

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1099 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1099 ]
  lea rdx, [ __literal32 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1105

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1099 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1099 ]
  lea  rdx , [ __literal40 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1104 ], eax

l1105:

  cmp dword [ tmp1104 ], 0
  jnz l1103

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1099 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1099 ]
  lea  rdx , [ __literal41 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1102 ], eax

l1103:

  cmp dword [ tmp1102 ], 0
  jz l1107

  lea rcx , [ this ]
  lea  rax , [ tmp1099 ]
  call  __AbstractDescentParser__getChar$0

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal17 ]
  lea  rdx , [ tmp1099 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1108

l1107:

  lea rcx , [ this ]
  lea  rax , [ tmp1099 ]
  call  __AbstractDescentParser__matchLetterOrDigit$0

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal17 ]
  lea  rdx , [ tmp1099 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

l1108:

; 
; -----------------------------
; BEGIN: while
; 
l1109:

  mov dword [ tmp1102 ], 1

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1099 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp1099 ]
  lea  rax , [ tmp1106 ]
  call  __AbstractDescentParser__isLetterOrDigit$1

  mov dword [ tmp1112 ], 1

  mov eax, dword [ tmp1106 ]
  cmp eax, dword [ tmp1112 ]
  jz l1111

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1099 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1099 ]
  lea  rdx , [ __literal40 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1102 ], eax

l1111:

  cmp dword [ tmp1102 ], 0
  jz l1110

  lea rcx , [ this ]
  lea  rax , [ tmp1099 ]
  call  __AbstractDescentParser__getChar$0

  lea  rcx , [ rv ]
  lea  rdx , [ tmp1099 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1109

l1110:

; 
; END: while
; -----------------------------
; 
l1101:

  lea  rcx , [ this ]
  lea  rdx , [ __literal28 ]
  lea  r8 , [ tmp1099 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1099 ]
  lea  rdx , [ rv ]
  lea  r8 , [ constantValue ]
  call  __MOLD_VariantLoadFromKey

  cmp [ constantValue  + Variant_t.type], 0
  jz l1113

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ constantValue ]
  call __MOLD_VariantMove

l1113:

l1114:

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0


  ; clean frame
  ; -----------
  lea  rcx, [ constantValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1099 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore constantValue
  restore tmp1098
  restore tmp1099
  restore tmp1102
  restore tmp1104
  restore tmp1106
  restore tmp1112

; -----------------------------------------------
; function __X64Parser__matchMemory$1
; -----------------------------------------------
__X64Parser__matchMemory$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 54 )
  instruction EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 8 , readHits= 17 )
  token EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 19 )
  tmp1116 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1119 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 10 , readHits= 10 )
  tmp1121 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 34 , readHits= 34 )
  tmp1143 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1144 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  labelObj EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  disp EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 10 , readHits= 1 )
  scale EQU rbp - 160 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 1 )
  index EQU rbp - 164 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 1 )
  base EQU rbp - 168 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 2 )
  tmp1115 EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1120 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1122 EQU rbp - 180 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 18 , readHits= 18 )
  tmp1123 EQU rbp - 184 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1130 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1131 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1132 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1153 EQU rbp - 200 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1156 EQU rbp - 204 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ instruction ], xmm0
  xor eax, eax
  mov [token + Variant_t.type], eax
  mov [tmp1116 + Variant_t.type], eax
  mov [tmp1119 + Variant_t.type], eax
  mov [tmp1121 + Variant_t.type], eax
  mov [tmp1143 + Variant_t.type], eax
  mov [tmp1144 + Variant_t.type], eax
  mov [labelObj + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ tmp1116 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1116  + Variant_t.type], 0
  jz l1117

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal43
  lea rdx , [ __literal43 ]
  call  __AbstractDescentParser__error$1

l1117:

l1118:

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  mov dword [ disp ], 0

  mov dword [ scale ], -1

  mov dword [ index ], -1

  mov dword [ base ], -1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal44
  lea rdx , [ __literal44 ]
  call  __AbstractDescentParser__matchChar$1

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea rcx, [ token ]
  lea rdx, [ tmp1119 ]
  call __MOLD_VariantMove

  mov dword [ tmp1122 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1122 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp1121 ]
  lea  rax , [ tmp1120 ]
  call  __AbstractDescentParser__isDigit$1

  mov dword [ tmp1123 ], 1

  mov eax, dword [ tmp1120 ]
  cmp eax, dword [ tmp1123 ]
  jnz l1124

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal45 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1126

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  ; __mold_syscall( 33 )
  lea rcx , [ token ]
  lea rdx , [ tmp1121 ]
  call qword [rbx + 8 * 33 ]

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ scale ], eax

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  lea rcx , [ tmp1119 ]
  lea  rax , [ index ]
  call  X64_ParseRegisterName

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1128

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea rcx, [ token ]
  lea rdx, [ tmp1119 ]
  call __MOLD_VariantMove

  mov dword [ tmp1122 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1122 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp1121 ]
  lea  rax , [ tmp1131 ]
  call  __AbstractDescentParser__isDigit$1

  mov dword [ tmp1132 ], 1

  mov eax, dword [ tmp1131 ]
  cmp eax, dword [ tmp1132 ]
  jnz l1133

  ; __mold_syscall( 33 )
  lea rcx , [ token ]
  lea rdx , [ tmp1121 ]
  call qword [rbx + 8 * 33 ]

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

  jmp l1134

l1133:

  lea rcx , [ token ]
  lea  rax , [ base ]
  call  X64_ParseRegisterName

l1134:

l1128:

l1129:

  jmp l1127

l1126:

  ; __mold_syscall( 33 )
  lea rcx , [ token ]
  lea rdx , [ tmp1121 ]
  call qword [rbx + 8 * 33 ]

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

l1127:

  jmp l1125

l1124:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal47 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1135

  lea rcx , [ token ]
  lea  rax , [ base ]
  call  X64_ParseRegisterName

  mov dword [ tmp1122 ], -1

  mov eax, dword [ base ]
  cmp eax, dword [ tmp1122 ]
  jnz l1137

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1121 ]
  lea  rdx , [ token ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantLoadFromKey

  cmp [ labelObj + Variant_t.type ], 0
  jnz l1139

  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ labelObj ]
  lea  rdx , [ __const1141 ]
  lea  r8 , [ __const1142 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1121 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1121 ]
  lea rdx, [ token ]
  call __MOLD_VariantMove

  lea  rcx , [ labelObj ]
  lea  rdx , [ __literal35 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1121 ]
  lea  rdx , [ token ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantStoreAtKey

l1139:

l1140:

  mov dword [ base ], 100

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1143 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1122 ], 1000

  mov [ tmp1144 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1122 ]
  mov [ tmp1144 + Variant_t.value], rax

  lea  rcx , [ tmp1143 ]
  lea  rdx , [ tmp1144 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantAdd

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal48 ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1143 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp1143 ]
  lea rdx , [ tmp1144 ]
  call qword [rbx + 8 * 43 ]

  cmp [ tmp1144 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1144 + Variant_t.value]
  mov dword [ tmp1122 ], eax

  lea  rcx , [ tmp1121 ]
  lea  rdx , [ tmp1122 ]
  lea  r8 , [ instruction ]
  call  __MOLD_VariantStoreAtIndex_int32

l1137:

l1138:

  jmp l1136

l1135:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1145

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ token ]
  lea  rax , [ base ]
  call  X64_ParseRegisterName

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  ; __mold_syscall( 33 )
  lea rcx , [ tmp1119 ]
  lea rdx , [ tmp1144 ]
  call qword [rbx + 8 * 33 ]

  lea  rcx , [ tmp1144 ]
  lea  rdx , [ tmp1121 ]
  call  __MOLD_VariantNeg

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

  jmp l1146

l1145:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1147

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ token ]
  lea  rax , [ base ]
  call  X64_ParseRegisterName

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea rcx, [ token ]
  lea rdx, [ tmp1119 ]
  call __MOLD_VariantMove

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal45 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1149

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  ; __mold_syscall( 33 )
  lea rcx , [ token ]
  lea rdx , [ tmp1121 ]
  call qword [rbx + 8 * 33 ]

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ scale ], eax

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  lea rcx , [ tmp1119 ]
  lea  rax , [ index ]
  call  X64_ParseRegisterName

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1151

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  ; __mold_syscall( 33 )
  lea rcx , [ tmp1119 ]
  lea rdx , [ tmp1121 ]
  call qword [rbx + 8 * 33 ]

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

  jmp l1152

l1151:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1154

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  ; __mold_syscall( 33 )
  lea rcx , [ tmp1119 ]
  lea rdx , [ tmp1144 ]
  call qword [rbx + 8 * 33 ]

  lea  rcx , [ tmp1144 ]
  lea  rdx , [ tmp1121 ]
  call  __MOLD_VariantNeg

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

l1154:

l1155:

l1152:

  jmp l1150

l1149:

  mov dword [ tmp1122 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1122 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp1121 ]
  lea  rax , [ tmp1153 ]
  call  __AbstractDescentParser__isDigit$1

  mov dword [ tmp1156 ], 1

  mov eax, dword [ tmp1153 ]
  cmp eax, dword [ tmp1156 ]
  jnz l1157

  ; __mold_syscall( 33 )
  lea rcx , [ token ]
  lea rdx , [ tmp1121 ]
  call qword [rbx + 8 * 33 ]

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

  jmp l1158

l1157:

  lea rcx , [ token ]
  lea  rax , [ index ]
  call  X64_ParseRegisterName

  mov dword [ scale ], 1

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1159

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  ; __mold_syscall( 33 )
  lea rcx , [ tmp1119 ]
  lea rdx , [ tmp1121 ]
  call qword [rbx + 8 * 33 ]

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

  jmp l1160

l1159:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1121 ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1161

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea  rax , [ tmp1119 ]
  call  __X64Parser__getToken$0

  ; __mold_syscall( 33 )
  lea rcx , [ tmp1119 ]
  lea rdx , [ tmp1144 ]
  call qword [rbx + 8 * 33 ]

  lea  rcx , [ tmp1144 ]
  lea  rdx , [ tmp1121 ]
  call  __MOLD_VariantNeg

  cmp [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1121 + Variant_t.value]
  mov dword [ disp ], eax

l1161:

l1162:

l1160:

l1158:

l1150:

l1147:

l1148:

l1146:

l1136:

l1125:

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal47
  lea rdx , [ __literal47 ]
  call  __AbstractDescentParser__matchChar$1

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  mov [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ base ]
  mov [ tmp1121 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal49 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ scale ]
  mov [ tmp1121 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ index ]
  mov [ tmp1121 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp1121 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ disp ]
  mov [ tmp1121 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal51 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1121 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1122 ], -1

  mov [ tmp1144 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1122 ]
  mov [ tmp1144 + Variant_t.value], rax

  lea  rcx , [ tmp1121 ]
  lea  rdx , [ tmp1144 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1115 ], eax

  mov eax, dword [ tmp1115 ]
  mov [ tmp1144 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1144 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1144 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1115 ], 1

  mov eax, dword [ tmp1115 ]
  mov [ tmp1144 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1144 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal54 ]
  lea  r8 , [ tmp1144 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1116 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1119 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1121 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1143 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1144 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret


  restore this
  restore instruction
  restore disp
  restore scale
  restore index
  restore base
  restore token
  restore tmp1115
  restore tmp1116
  restore tmp1119
  restore tmp1120
  restore tmp1121
  restore tmp1122
  restore tmp1123
  restore tmp1130
  restore tmp1131
  restore tmp1132
  restore tmp1143
  restore tmp1144
  restore labelObj
  restore tmp1153
  restore tmp1156

; -----------------------------------------------
; function __X64Parser__setImmediate$2
; -----------------------------------------------
__X64Parser__setImmediate$2:

  ; init frame
  ; ----------
  instruction EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 2 , readHits= 4 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1164 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1163 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ instruction ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp1164 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1164 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1164 + Variant_t.type ], 0
  jnz l1165

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey

  jmp l1166

l1165:

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal56 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey

l1166:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1164 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore instruction
  restore value
  restore tmp1163
  restore tmp1164

; -----------------------------------------------
; function __X64Parser__matchOperand$1
; -----------------------------------------------
__X64Parser__matchOperand$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 19 )
  instruction EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 8 , readHits= 22 )
  tmp1168 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 14 , readHits= 14 )
  tmp1171 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp1182 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1197 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  token EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 12 )
  defineDataSize EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  labelObj EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  addressSize EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp1167 EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1172 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1174 EQU rbp - 180 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1175 EQU rbp - 184 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp1176 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1177 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1187 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1190 EQU rbp - 200 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  regId EQU rbp - 204 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ instruction ], xmm0
  xor eax, eax
  mov [tmp1168 + Variant_t.type], eax
  mov [tmp1171 + Variant_t.type], eax
  mov [tmp1182 + Variant_t.type], eax
  mov [tmp1197 + Variant_t.type], eax
  mov [token + Variant_t.type], eax
  mov [defineDataSize + Variant_t.type], eax
  mov [labelObj + Variant_t.type], eax
  mov [addressSize + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1168 ]
  lea rdx, [ __literal44 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1169

  lea rcx , [ this ]
  lea rdx , [ instruction ]
  call  __X64Parser__matchMemory$1

  jmp l1170

l1169:

  lea rcx , [ this ]
  lea  rax , [ tmp1171 ]
  call  __X64Parser__getToken$0

  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea rcx, [ token ]
  lea rdx, [ tmp1171 ]
  call __MOLD_VariantMove

  mov dword [ tmp1172 ], 1

  mov dword [ tmp1175 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1175 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp1168 ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1173

  mov dword [ tmp1175 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1175 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp1168 ]
  lea  rax , [ tmp1176 ]
  call  __AbstractDescentParser__isDigit$1

  mov dword [ tmp1177 ], 1

  mov dword [ tmp1172 ], 0
  mov ecx, dword [ tmp1176 ]
  cmp ecx, dword [ tmp1177 ]
  setz byte [ tmp1172 ]

l1173:

  cmp dword [ tmp1172 ], 0
  jz l1178

  ; __mold_syscall( 33 )
  lea rcx , [ token ]
  lea rdx , [ tmp1168 ]
  call qword [rbx + 8 * 33 ]

  lea rcx , [ this ]
  lea rdx , [ instruction ]
  lea r8 , [ tmp1168 ]
  call  __X64Parser__setImmediate$2

  jmp l1179

l1178:

  lea rcx, [ token ]
  lea rdx, [ __literal57 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1180

  lea  rcx , [ this ]
  lea  rdx , [ __literal28 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1182 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea  rax , [ tmp1171 ]
  call  __X64Parser__getToken$0

  lea  rcx , [ tmp1168 ]
  lea  rdx , [ tmp1182 ]
  lea  r8 , [ tmp1171 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ __literal59 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1181

l1180:

  lea  rcx , [ PARSER_X64_DEFINE_DATA_MAP ]
  lea  rdx , [ token ]
  lea  r8 , [ defineDataSize ]
  call  __MOLD_VariantLoadFromKey

  cmp [ defineDataSize  + Variant_t.type], 0
  jz l1183

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1182 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp1182 ]
  lea  rax , [ labelObj ]
  call  __X64Parser__emitLabel$1

  lea rcx , [ this ]
  lea rdx , [ defineDataSize ]
  call  __X64Parser__matchData$1

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ __literal60 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1184

l1183:

  lea  rcx , [ PARSER_X64_ADDRESS_SIZE_MAP ]
  lea  rdx , [ token ]
  lea  r8 , [ addressSize ]
  call  __MOLD_VariantLoadFromKey

  cmp [ addressSize  + Variant_t.type], 0
  jz l1185

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ addressSize ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ instruction ]
  call  __X64Parser__matchMemory$1

  jmp l1186

l1185:

  lea rcx , [ token ]
  lea  rax , [ regId ]
  call  X64_ParseRegisterName

  mov dword [ tmp1175 ], -1

  mov eax, dword [ regId ]
  cmp eax, dword [ tmp1175 ]
  jz l1188

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1182 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1175 ], -1

  mov [ tmp1168 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1175 ]
  mov [ tmp1168 + Variant_t.value], rax

  lea rcx, [ tmp1182 ]
  lea rdx, [ tmp1168 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1191

  mov [ tmp1168 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ regId ]
  mov [ tmp1168 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1192

l1191:

  mov [ tmp1168 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ regId ]
  mov [ tmp1168 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantStoreAtKey

l1192:

  jmp l1189

l1188:

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1168 ]
  lea  rdx , [ token ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantLoadFromKey

  cmp [ labelObj + Variant_t.type ], 0
  jnz l1193

  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ labelObj ]
  lea  rdx , [ __const1195 ]
  lea  r8 , [ __const1196 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1168 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1168 ]
  lea rdx, [ token ]
  call __MOLD_VariantMove

  lea  rcx , [ labelObj ]
  lea  rdx , [ __literal35 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1168 ]
  lea  rdx , [ token ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantStoreAtKey

l1193:

l1194:

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1182 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1175 ], 1000

  mov [ tmp1197 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1175 ]
  mov [ tmp1197 + Variant_t.value], rax

  lea  rcx , [ tmp1182 ]
  lea  rdx , [ tmp1197 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal63 ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1168 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1182 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp1182 ]
  lea rdx , [ tmp1197 ]
  call qword [rbx + 8 * 43 ]

  cmp [ tmp1197 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1197 + Variant_t.value]
  mov dword [ tmp1175 ], eax

  lea  rcx , [ tmp1168 ]
  lea  rdx , [ tmp1175 ]
  lea  r8 , [ instruction ]
  call  __MOLD_VariantStoreAtIndex_int32

l1189:

l1186:

l1184:

l1181:

l1179:

l1170:

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1168 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1171 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1182 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1197 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defineDataSize ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ addressSize ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret


  restore this
  restore instruction
  restore tmp1167
  restore tmp1168
  restore tmp1171
  restore tmp1172
  restore tmp1174
  restore tmp1175
  restore tmp1176
  restore tmp1177
  restore tmp1182
  restore tmp1187
  restore tmp1190
  restore tmp1197
  restore token
  restore defineDataSize
  restore labelObj
  restore addressSize
  restore regId

; -----------------------------------------------
; function __X64Parser__matchEndOfLine$0
; -----------------------------------------------
__X64Parser__matchEndOfLine$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  tmp1200 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1198 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1199 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1201 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1200 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1200 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp1200 ]
  lea  rax , [ tmp1199 ]
  call  __AbstractDescentParser__isEndOfLine$1

  mov dword [ tmp1201 ], 1

  mov eax, dword [ tmp1199 ]
  cmp eax, dword [ tmp1201 ]
  jnz l1202

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  jmp l1203

l1202:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal64
  lea rdx , [ __literal64 ]
  call  __AbstractDescentParser__error$1

l1203:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1200 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp1198
  restore tmp1199
  restore tmp1200
  restore tmp1201

; -----------------------------------------------
; function __X64Parser__parseFirstOperand$1
; -----------------------------------------------
__X64Parser__parseFirstOperand$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  instruction EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp1206 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1204 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1205 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1207 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1210 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ instruction ], xmm0
  xor eax, eax
  mov [tmp1206 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1206 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp1206 ]
  lea  rax , [ tmp1205 ]
  call  __AbstractDescentParser__isEndOfLine$1

  mov dword [ tmp1207 ], 0

  mov eax, dword [ tmp1205 ]
  cmp eax, dword [ tmp1207 ]
  jnz l1208

  mov dword [ tmp1210 ], 1

  mov [ tmp1206 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1210 ]
  mov [ tmp1206 + Variant_t.value], rax

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal65 ]
  lea  r8 , [ tmp1206 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ instruction ]
  call  __X64Parser__matchOperand$1

l1208:

l1209:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1206 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore instruction
  restore tmp1204
  restore tmp1205
  restore tmp1206
  restore tmp1207
  restore tmp1210

; -----------------------------------------------
; function __X64Parser__parseSecondOperand$1
; -----------------------------------------------
__X64Parser__parseSecondOperand$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  instruction EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 10 )
  tmp1212 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1220 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1223 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1225 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1211 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1215 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1217 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1219 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1224 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ instruction ], xmm0
  xor eax, eax
  mov [tmp1212 + Variant_t.type], eax
  mov [tmp1220 + Variant_t.type], eax
  mov [tmp1223 + Variant_t.type], eax
  mov [tmp1225 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1212 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1212 ]
  lea rdx, [ __literal39 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1213

  mov dword [ tmp1215 ], 0

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1212 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1212  + Variant_t.type], 0
  jz l1216

  mov dword [ tmp1217 ], 0

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1220 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1220 ]
  lea rdx, [ __literal66 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1218

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1220 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1220 ]
  lea  rdx , [ __literal67 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp1217 ], eax

l1218:

  mov eax, dword [ tmp1217 ]
  mov dword [ tmp1215 ], eax

l1216:

  cmp dword [ tmp1215 ], 0
  jz l1221

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal68
  lea rdx , [ __literal68 ]
  call  __AbstractDescentParser__error$1

l1221:

l1222:

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal65 ]
  lea  r8 , [ tmp1223 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1224 ], 1

  mov [ tmp1225 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1224 ]
  mov [ tmp1225 + Variant_t.value], rax

  lea  rcx , [ tmp1223 ]
  lea  rdx , [ tmp1225 ]
  lea  r8 , [ tmp1220 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ instruction ]
  lea  rdx , [ __literal65 ]
  lea  r8 , [ tmp1220 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea rdx , [ instruction ]
  call  __X64Parser__matchOperand$1

l1213:

l1214:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1212 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1220 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1223 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1225 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore instruction
  restore tmp1211
  restore tmp1212
  restore tmp1215
  restore tmp1217
  restore tmp1219
  restore tmp1220
  restore tmp1223
  restore tmp1224
  restore tmp1225

; -----------------------------------------------
; function __X64Parser__matchCodeLine$1
; -----------------------------------------------
__X64Parser__matchCodeLine$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 11 )
  mnemonic EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newItem EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 17 )
  tmp1228 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1229 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1230 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1239 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1240 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1231 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1233 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1235 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1236 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mnemonic ], xmm0
  xor eax, eax
  mov [newItem + Variant_t.type], eax
  mov [tmp1228 + Variant_t.type], eax
  mov [tmp1229 + Variant_t.type], eax
  mov [tmp1230 + Variant_t.type], eax
  mov [tmp1239 + Variant_t.type], eax
  mov [tmp1240 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newItem ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newItem ]
  lea  rdx , [ __const1226 ]
  lea  r8 , [ __const1227 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1228 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1228 ]
  lea rdx, [ mnemonic ]
  call __MOLD_VariantMove

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1228 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1230 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1230 ]
  lea  rax , [ tmp1229 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3958
  movsxd rax, dword [ tmp1229 + Variant_t.value ]
  mov    qword [ tmp1229 + Variant_t.value ], rax
l3958:


  lea  rcx, [ tmp1228 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1228 ]
  lea rdx, [ tmp1229 ]
  call __MOLD_VariantMove

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1228 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ newItem ]
  call  __X64Parser__parseFirstOperand$1

  lea rcx , [ this ]
  lea rdx , [ newItem ]
  call  __X64Parser__parseSecondOperand$1

  lea rcx , [ this ]
  lea rdx , [ newItem ]
  call  __X64Parser__parseSecondOperand$1

  lea rcx , [ this ]
  lea rdx , [ newItem ]
  call  __AbstractDescentParser__emitOneItem$1

  mov dword [ tmp1231 ], 0

  mov dword [ tmp1233 ], 0

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1229 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1236 ], 0

  lea  rcx , [ tmp1229 ]
  lea  rdx , [ tmp1236 ]
  lea  r8 , [ tmp1228 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp1228 ]
  lea rdx, [ __literal70 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1234

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal63 ]
  lea  r8 , [ tmp1228 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1228  + Variant_t.type], 0
  setz al
  mov dword [ tmp1233 ], eax

l1234:

  cmp dword [ tmp1233 ], 0
  jz l1232

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1229 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1229  + Variant_t.type], 0
  setnz al
  mov dword [ tmp1231 ], eax

l1232:

  cmp dword [ tmp1231 ], 0
  jz l1237

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1230 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal71 ]
  lea  r8 , [ tmp1230 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1230 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1240 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp1240 ]
  lea rdx , [ tmp1239 ]
  call qword [rbx + 8 * 43 ]

  cmp [ tmp1239 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1239 + Variant_t.value]
  mov dword [ tmp1236 ], eax

  lea  rcx , [ tmp1230 ]
  lea  rdx , [ tmp1236 ]
  lea  r8 , [ newItem ]
  call  __MOLD_VariantStoreAtIndex_int32

l1237:

l1238:

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1240 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1240 ]
  lea  rax , [ tmp1239 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3959
  movsxd rax, dword [ tmp1239 + Variant_t.value ]
  mov    qword [ tmp1239 + Variant_t.value ], rax
l3959:


  lea  rcx , [ newItem ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1240 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1239 ]
  lea  rdx , [ tmp1240 ]
  lea  r8 , [ tmp1230 ]
  call  __MOLD_VariantSub

  lea  rcx , [ newItem ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ tmp1230 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ newItem ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1228 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1229 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1230 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1239 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1240 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore mnemonic
  restore newItem
  restore tmp1228
  restore tmp1229
  restore tmp1230
  restore tmp1231
  restore tmp1233
  restore tmp1235
  restore tmp1236
  restore tmp1239
  restore tmp1240

; -----------------------------------------------
; function __X64Parser__skipComment$0
; -----------------------------------------------
__X64Parser__skipComment$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  c EQU rbp - 40 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp1241 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1242 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1247 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1248 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1249 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [c + Variant_t.type], eax
  mov [tmp1241 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ c ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ c ]
  lea rdx, [ __literal72 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1243

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

; 
; -----------------------------
; BEGIN: while
; 
l1245:

  lea rcx , [ this ]
  lea rdx , [ c ]
  lea  rax , [ tmp1248 ]
  call  __AbstractDescentParser__isEndOfLine$1

  mov dword [ tmp1249 ], 0

  mov eax, dword [ tmp1248 ]
  cmp eax, dword [ tmp1249 ]
  jnz l1246

  lea rcx , [ this ]
  lea  rax , [ tmp1241 ]
  call  __AbstractDescentParser__getChar$0

  lea  rcx, [ c ]
  call __MOLD_VariantDestroy
  lea rcx, [ c ]
  lea rdx, [ tmp1241 ]
  call __MOLD_VariantMove

  jmp l1245

l1246:

; 
; END: while
; -----------------------------
; 
l1243:

l1244:


  ; clean frame
  ; -----------
  lea  rcx, [ c ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1241 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore c
  restore tmp1241
  restore tmp1242
  restore tmp1247
  restore tmp1248
  restore tmp1249

; -----------------------------------------------
; function __X64Parser__matchNumber$0
; -----------------------------------------------
__X64Parser__matchNumber$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 7 )
  sign EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  token EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp1251 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1254 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp1250 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1255 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1256 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1257 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [sign + Variant_t.type], eax
  mov [token + Variant_t.type], eax
  mov [tmp1251 + Variant_t.type], eax
  mov [tmp1254 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1251 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1251 ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1252

  lea rcx , [ this ]
  lea  rax , [ sign ]
  call  __AbstractDescentParser__getChar$0

  jmp l1253

l1252:

  lea  rcx, [ sign ]
  call __MOLD_VariantDestroy
  lea rcx, [ sign ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantMove

l1253:

  lea rcx , [ this ]
  lea  rax , [ tmp1254 ]
  call  __X64Parser__getToken$0

  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea rcx, [ token ]
  lea rdx, [ tmp1254 ]
  call __MOLD_VariantMove

  mov dword [ tmp1256 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1256 ]
  lea  r8 , [ tmp1251 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp1251 ]
  lea  rax , [ tmp1255 ]
  call  __AbstractDescentParser__isDigit$1

  mov dword [ tmp1257 ], 0

  mov eax, dword [ tmp1255 ]
  cmp eax, dword [ tmp1257 ]
  jnz l1258

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal73
  lea rdx , [ __literal73 ]
  call  __AbstractDescentParser__error$1

l1258:

l1259:

  lea  rcx, [ tmp1254 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ sign ]
  lea  rdx , [ token ]
  lea  r8 , [ tmp1254 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 33 )
  lea rcx , [ tmp1254 ]
  lea rdx , [ rv ]
  call qword [rbx + 8 * 33 ]


  ; clean frame
  ; -----------
  lea  rcx, [ sign ]
  call __MOLD_VariantDestroy
  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1251 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1254 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore this
  restore sign
  restore token
  restore rv
  restore tmp1250
  restore tmp1251
  restore tmp1254
  restore tmp1255
  restore tmp1256
  restore tmp1257

; -----------------------------------------------
; function __X64Parser__matchData$1
; -----------------------------------------------
__X64Parser__matchData$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 28 )
  size EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  tmp1264 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 15 , readHits= 15 )
  tmp1272 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1273 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1277 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  c EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  token EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 10 )
  value EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  labelObj EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  offset EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  newInstruction EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  goOn EQU rbp - 204 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  tmp1262 EQU rbp - 208 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1263 EQU rbp - 212 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1269 EQU rbp - 216 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1274 EQU rbp - 220 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1279 EQU rbp - 224 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1280 EQU rbp - 228 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1281 EQU rbp - 232 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp1282 EQU rbp - 236 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1289 EQU rbp - 240 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  cnt EQU rbp - 244 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  idx EQU rbp - 248 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ size ], xmm0
  xor eax, eax
  mov [tmp1264 + Variant_t.type], eax
  mov [tmp1272 + Variant_t.type], eax
  mov [tmp1273 + Variant_t.type], eax
  mov [tmp1277 + Variant_t.type], eax
  mov [c + Variant_t.type], eax
  mov [token + Variant_t.type], eax
  mov [value + Variant_t.type], eax
  mov [labelObj + Variant_t.type], eax
  mov [offset + Variant_t.type], eax
  mov [newInstruction + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  mov dword [ goOn ], 1

; 
; -----------------------------
; BEGIN: while
; 
l1260:

  mov dword [ tmp1263 ], 1

  mov eax, dword [ goOn ]
  cmp eax, dword [ tmp1263 ]
  jnz l1261

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1264 ]
  lea rdx, [ __literal10 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1265

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea  rax , [ tmp1264 ]
  call  __AbstractDescentParser__getChar$0

  lea  rcx, [ c ]
  call __MOLD_VariantDestroy
  lea rcx, [ c ]
  lea rdx, [ tmp1264 ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: while
; 
l1267:

  lea rcx, [ c ]
  lea rdx, [ __literal10 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1268

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1264 ]
  lea  rdx , [ __const1270 ]
  lea  r8 , [ __const1271 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1272 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1272 ]
  lea rdx, [ size ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1272 ]
  call  __MOLD_VariantStoreAtKey

  ; __mold_syscall( 31 )
  lea rcx , [ c ]
  lea rdx , [ tmp1272 ]
  call qword [rbx + 8 * 31 ]

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1272 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ tmp1264 ]
  call  __AbstractDescentParser__emitOneItem$1

  lea rcx , [ this ]
  lea  rax , [ tmp1264 ]
  call  __AbstractDescentParser__getChar$0

  lea  rcx, [ c ]
  call __MOLD_VariantDestroy
  lea rcx, [ c ]
  lea rdx, [ tmp1264 ]
  call __MOLD_VariantMove

  jmp l1267

l1268:

; 
; END: while
; -----------------------------
; 
  jmp l1266

l1265:

  lea rcx , [ this ]
  lea  rax , [ token ]
  call  __X64Parser__getToken$0

  lea rcx, [ token ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1275

  lea rcx , [ this ]
  lea  rax , [ tmp1277 ]
  call  __X64Parser__getToken$0

  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal41 ]
  lea  rdx , [ tmp1277 ]
  lea  r8 , [ token ]
  call  __MOLD_VariantStringJoin

l1275:

l1276:

  mov dword [ tmp1274 ], 1

  mov dword [ tmp1281 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp1264 ]
  lea  rax , [ tmp1280 ]
  call  __AbstractDescentParser__isDigit$1

  mov dword [ tmp1282 ], 1

  mov eax, dword [ tmp1280 ]
  cmp eax, dword [ tmp1282 ]
  jz l1278

  mov dword [ tmp1281 ], 0

  lea  rcx , [ token ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ __literal41 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1274 ], eax

l1278:

  cmp dword [ tmp1274 ], 0
  jz l1283

  ; __mold_syscall( 33 )
  lea rcx , [ token ]
  lea rdx , [ value ]
  call qword [rbx + 8 * 33 ]

  mov dword [ cnt ], 1

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1264 ]
  lea rdx, [ __literal75 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1285

  lea rcx , [ this ]
  lea  rax , [ token ]
  call  __X64Parser__getToken$0

  lea rcx, [ token ]
  lea rdx, [ __literal76 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1287

  cmp [ value + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ value + Variant_t.value]
  mov dword [ cnt ], eax

  lea rcx , [ this ]
  lea  rax , [ value ]
  call  __X64Parser__matchNumber$0

l1287:

l1288:

l1285:

l1286:

  mov dword [ tmp1281 ], 1

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp1289 .. cnt
; 
l1290:

  mov eax, dword [ idx ]
  cmp eax, dword [ cnt ]
  jge l1291

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1264 ]
  lea  rdx , [ __const1292 ]
  lea  r8 , [ __const1293 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1272 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1272 ]
  lea rdx, [ size ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1272 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1272 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1272 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1272 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ tmp1264 ]
  call  __AbstractDescentParser__emitOneItem$1

  mov eax, dword [ idx ]
  add eax, dword [ tmp1281 ]
  mov dword [ idx ], eax

  jmp l1290

l1291:

; 
; END: for idx in tmp1289 .. cnt step tmp1281
; -----------------------------
; 
  jmp l1284

l1283:

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ token ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantLoadFromKey

  cmp [ labelObj + Variant_t.type ], 0
  jnz l1294

  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ labelObj ]
  lea  rdx , [ __const1296 ]
  lea  r8 , [ __const1297 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1264 ]
  lea rdx, [ token ]
  call __MOLD_VariantMove

  lea  rcx , [ labelObj ]
  lea  rdx , [ __literal35 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ token ]
  lea  r8 , [ labelObj ]
  call  __MOLD_VariantStoreAtKey

l1294:

l1295:

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1264 ]
  lea  rax , [ offset ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3960
  movsxd rax, dword [ offset + Variant_t.value ]
  mov    qword [ offset + Variant_t.value ], rax
l3960:


  lea  rcx, [ newInstruction ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newInstruction ]
  lea  rdx , [ __const1298 ]
  lea  r8 , [ __const1299 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1264 ]
  lea rdx, [ size ]
  call __MOLD_VariantMove

  lea  rcx , [ newInstruction ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1264 ]
  lea rdx, [ labelObj ]
  call __MOLD_VariantMove

  lea  rcx , [ newInstruction ]
  lea  rdx , [ __literal63 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1264 ]
  lea rdx, [ offset ]
  call __MOLD_VariantMove

  lea  rcx , [ newInstruction ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1264 ]
  lea rdx, [ offset ]
  call __MOLD_VariantMove

  lea  rcx , [ newInstruction ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1264 ]
  lea rdx, [ size ]
  call __MOLD_VariantMove

  lea  rcx , [ newInstruction ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ newInstruction ]
  call  __AbstractDescentParser__emitOneItem$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1273 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp1273 ]
  lea rdx , [ tmp1272 ]
  call qword [rbx + 8 * 43 ]

  cmp [ tmp1272 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1272 + Variant_t.value]
  mov dword [ tmp1289 ], eax

  lea  rcx , [ tmp1264 ]
  lea  rdx , [ tmp1289 ]
  lea  r8 , [ newInstruction ]
  call  __MOLD_VariantStoreAtIndex_int32

l1284:

l1266:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1264 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1264 ]
  lea rdx, [ __literal39 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1300

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal39
  lea rdx , [ __literal39 ]
  call  __AbstractDescentParser__matchChar$1

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  jmp l1301

l1300:

  mov dword [ goOn ], 0

l1301:

  jmp l1260

l1261:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1264 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1272 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1273 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1277 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ c ]
  call __MOLD_VariantDestroy
  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ offset ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newInstruction ]
  call __MOLD_VariantDestroy

  add  rsp, 288
  pop  rbp
  ret


  restore this
  restore size
  restore goOn
  restore tmp1262
  restore tmp1263
  restore tmp1264
  restore tmp1269
  restore tmp1272
  restore tmp1273
  restore tmp1274
  restore tmp1277
  restore tmp1279
  restore tmp1280
  restore tmp1281
  restore tmp1282
  restore tmp1289
  restore c
  restore token
  restore value
  restore cnt
  restore idx
  restore labelObj
  restore offset
  restore newInstruction

; -----------------------------------------------
; function __X64Parser_parseOneLine$0
; -----------------------------------------------
__X64Parser_parseOneLine$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 18 )
  tmp1304 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1312 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  token EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 4 )
  defineDataSize EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  offset EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  bound EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  newLabelObj EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  labelObj EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  tmp1302 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1303 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1305 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1313 EQU rbp - 168 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1304 + Variant_t.type], eax
  mov [tmp1312 + Variant_t.type], eax
  mov [token + Variant_t.type], eax
  mov [defineDataSize + Variant_t.type], eax
  mov [offset + Variant_t.type], eax
  mov [bound + Variant_t.type], eax
  mov [newLabelObj + Variant_t.type], eax
  mov [labelObj + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __AbstractDescentParser__skipWhites$0

  lea rcx , [ this ]
  call  __X64Parser__skipComment$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1304 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp1304 ]
  lea  rax , [ tmp1303 ]
  call  __AbstractDescentParser__isEndOfLine$1

  mov dword [ tmp1305 ], 1

  mov eax, dword [ tmp1303 ]
  cmp eax, dword [ tmp1305 ]
  jz l1306

  lea rcx , [ this ]
  lea  rax , [ token ]
  call  __X64Parser__getToken$0

  lea  rcx , [ PARSER_X64_DEFINE_DATA_MAP ]
  lea  rdx , [ token ]
  lea  r8 , [ defineDataSize ]
  call  __MOLD_VariantLoadFromKey

  cmp [ defineDataSize  + Variant_t.type], 0
  jz l1308

  lea rcx , [ this ]
  lea rdx , [ defineDataSize ]
  call  __X64Parser__matchData$1

  jmp l1309

l1308:

  lea rcx, [ token ]
  lea rdx, [ __literal77 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1310

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1304 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1304 ]
  lea  rax , [ offset ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3961
  movsxd rax, dword [ offset + Variant_t.value ]
  mov    qword [ offset + Variant_t.value ], rax
l3961:


  lea rcx , [ this ]
  lea  rax , [ bound ]
  call  __X64Parser__matchNumber$0

  ; __mold_syscall( 42 )
  lea rcx , [ offset ]
  lea rdx , [ tmp1304 ]
  call qword [rbx + 8 * 42 ]

  lea  rcx, [ tmp1312 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal77 ]
  lea  rdx , [ tmp1304 ]
  lea  r8 , [ tmp1312 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1312 ]
  lea  rax , [ newLabelObj ]
  call  __X64Parser__emitLabel$1

  lea  rcx , [ newLabelObj ]
  lea  rdx , [ __literal78 ]
  lea  r8 , [ bound ]
  call  __MOLD_VariantStoreAtKey

  jmp l1311

l1310:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1304 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1304 ]
  lea rdx, [ __literal79 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1314

  lea rcx , [ this ]
  call  __AbstractDescentParser__eatChar$0

  lea rcx , [ this ]
  lea rdx , [ token ]
  lea  rax , [ labelObj ]
  call  __X64Parser__emitLabel$1

  jmp l1315

l1314:

  lea rcx , [ this ]
  lea rdx , [ token ]
  call  __X64Parser__matchCodeLine$1

l1315:

l1311:

l1309:

l1306:

l1307:

  lea rcx , [ this ]
  call  __X64Parser__skipComment$0

  lea rcx , [ this ]
  call  __X64Parser__matchEndOfLine$0


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1304 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1312 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ token ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defineDataSize ]
  call __MOLD_VariantDestroy
  lea  rcx, [ offset ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bound ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newLabelObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelObj ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore this
  restore tmp1302
  restore tmp1303
  restore tmp1304
  restore tmp1305
  restore tmp1312
  restore tmp1313
  restore token
  restore defineDataSize
  restore offset
  restore bound
  restore newLabelObj
  restore labelObj

; -----------------------------------------------
; function __X64Parser__parseSource$0
; -----------------------------------------------
__X64Parser__parseSource$0_vcall:
__X64Parser__parseSource$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  tmp1319 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1320 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1318 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1321 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1319 + Variant_t.type], eax
  mov [tmp1320 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Parser_reset$0

; 
; -----------------------------
; BEGIN: while
; 
l1316:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1320 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 31 )
  lea rcx , [ tmp1320 ]
  lea rdx , [ tmp1319 ]
  call qword [rbx + 8 * 31 ]

  mov dword [ tmp1321 ], 0

  mov [ tmp1320 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1321 ]
  mov [ tmp1320 + Variant_t.value], rax

  lea rcx, [ tmp1319 ]
  lea rdx, [ tmp1320 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1317

  lea rcx , [ this ]
  call  __X64Parser_parseOneLine$0

  jmp l1316

l1317:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1319 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1320 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp1318
  restore tmp1319
  restore tmp1320
  restore tmp1321

; -----------------------------------------------
; function __X64Parser_getArrayOfLabelsAndRefs$0
; -----------------------------------------------
__X64Parser_getArrayOfLabelsAndRefs$0_vcall:
__X64Parser_getArrayOfLabelsAndRefs$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __PipeAbstract_constructor$0
; -----------------------------------------------
__PipeAbstract_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 4 , readHits= 3 )
  tmp1322 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1323 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1322 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp1322 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1322 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1322 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal80 ]
  lea  r8 , [ tmp1322 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1323 ], 0

  mov eax, dword [ tmp1323 ]
  mov [ tmp1322 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1322 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal81 ]
  lea  r8 , [ tmp1322 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1322 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp1322
  restore tmp1323

; -----------------------------------------------
; function __PipeAbstract__emitOneItem$1
; -----------------------------------------------
__PipeAbstract__emitOneItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1325 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1327 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  buffer EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  outputObject EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1324 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1326 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1330 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  cnt EQU rbp - 120 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1325 + Variant_t.type], eax
  mov [tmp1327 + Variant_t.type], eax
  mov [buffer + Variant_t.type], eax
  mov [outputObject + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal81 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1326 ], 1

  mov eax, dword [ tmp1326 ]
  mov [ tmp1327 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1327 + Variant_t.value], rax

  lea rcx, [ tmp1325 ]
  lea rdx, [ tmp1327 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1328

  lea  rcx , [ this ]
  lea  rdx , [ __literal80 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ buffer ]
  lea rdx , [ tmp1327 ]
  call qword [rbx + 8 * 43 ]

  cmp [ tmp1327 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1327 + Variant_t.value]
  mov dword [ cnt ], eax

  lea  rcx , [ buffer ]
  lea  rdx , [ cnt ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l1329

l1328:

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ outputObject ]
  lea rdx , [ item ]
  lea  rax , [ tmp1327 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3962
  movsxd rax, dword [ tmp1327 + Variant_t.value ]
  mov    qword [ tmp1327 + Variant_t.value ], rax
l3962:


l1329:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1325 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1327 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1324
  restore tmp1325
  restore tmp1326
  restore tmp1327
  restore tmp1330
  restore buffer
  restore cnt
  restore outputObject

; -----------------------------------------------
; function __PipeAbstract__replaceLastItem$1
; -----------------------------------------------
__PipeAbstract__replaceLastItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1332 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1334 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  buffer EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1331 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1333 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1337 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp1338 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  cnt EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1332 + Variant_t.type], eax
  mov [tmp1334 + Variant_t.type], eax
  mov [buffer + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal81 ]
  lea  r8 , [ tmp1332 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1333 ], 1

  mov eax, dword [ tmp1333 ]
  mov [ tmp1334 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1334 + Variant_t.value], rax

  lea rcx, [ tmp1332 ]
  lea rdx, [ tmp1334 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1335

  lea  rcx , [ this ]
  lea  rdx , [ __literal80 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ buffer ]
  lea rdx , [ tmp1334 ]
  call qword [rbx + 8 * 43 ]

  cmp [ tmp1334 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1334 + Variant_t.value]
  mov dword [ cnt ], eax

  mov dword [ tmp1338 ], 1

  mov eax, dword [ cnt ]
  sub eax, dword [ tmp1338 ]
  mov dword [ tmp1337 ], eax

  lea  rcx , [ buffer ]
  lea  rdx , [ tmp1337 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l1336

l1335:

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal82
  lea rcx , [ __literal82 ]
  call qword [rbx + 8 * 41 ]

l1336:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1332 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1334 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1331
  restore tmp1332
  restore tmp1333
  restore tmp1334
  restore tmp1337
  restore tmp1338
  restore buffer
  restore cnt

; -----------------------------------------------
; function __PipeAbstract_connectTo$1
; -----------------------------------------------
__PipeAbstract_connectTo$1_vcall:
__PipeAbstract_connectTo$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  outputObject EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ outputObject ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ outputObject ]
  call __MOLD_VariantMove


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore outputObject
  restore rv

; -----------------------------------------------
; function __PipeAbstract_processOneItem$1
; -----------------------------------------------
__PipeAbstract_processOneItem$1_vcall:
  ; skipped unused parameter [ item ]
__PipeAbstract_processOneItem$1:

  ret


  restore this
  restore outputObject
  restore rv

; -----------------------------------------------
; function __PipeAbstract_processArrayOfItems$1
; -----------------------------------------------
__PipeAbstract_processArrayOfItems$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  arrayOfItems EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1341 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oneItem EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ arrayOfItems ], xmm0
  xor eax, eax
  mov [tmp1341 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l1340

l1339:

  lea rcx , [ this ]
  lea rdx , [ oneItem ]
  lea  rax , [ tmp1341 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3963
  movsxd rax, dword [ tmp1341 + Variant_t.value ]
  mov    qword [ tmp1341 + Variant_t.value ], rax
l3963:


  ret

l1340:

  lea  rcx , [ arrayOfItems ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l1339 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1341 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore arrayOfItems
  restore tmp1341
  restore oneItem

; -----------------------------------------------
; function __PipeAbstract_flush$0
; -----------------------------------------------
__PipeAbstract_flush$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  buffer EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  outputObject EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1344 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  oneItem EQU rbp - 88 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [buffer + Variant_t.type], eax
  mov [outputObject + Variant_t.type], eax
  mov [tmp1344 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal80 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l1343

l1342:

  lea rcx , [ outputObject ]
  lea rdx , [ oneItem ]
  lea  rax , [ tmp1344 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3964
  movsxd rax, dword [ tmp1344 + Variant_t.value ]
  mov    qword [ tmp1344 + Variant_t.value ], rax
l3964:


  ret

l1343:

  lea  rcx , [ buffer ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l1342 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx, [ tmp1344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1344 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal80 ]
  lea  r8 , [ tmp1344 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1344 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore buffer
  restore outputObject
  restore tmp1344
  restore oneItem

; -----------------------------------------------
; function __X64Translator_emitCore_x_y$2
; -----------------------------------------------
__X64Translator_emitCore_x_y$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  item EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 30 )
  emiter EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  regBase EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  regIndex EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  disp EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  scale EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmp1345 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1353 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1354 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1355 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1367 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  regSrc EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  reg EQU rbp - 236 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 6 )
  tmp1346 EQU rbp - 240 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp1347 EQU rbp - 244 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1350 EQU rbp - 248 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1358 EQU rbp - 252 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1361 EQU rbp - 256 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1364 EQU rbp - 260 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1368 EQU rbp - 264 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1369 EQU rbp - 268 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [emiter + Variant_t.type], eax
  mov [regBase + Variant_t.type], eax
  mov [regIndex + Variant_t.type], eax
  mov [disp + Variant_t.type], eax
  mov [scale + Variant_t.type], eax
  mov [tmp1345 + Variant_t.type], eax
  mov [tmp1353 + Variant_t.type], eax
  mov [tmp1354 + Variant_t.type], eax
  mov [tmp1355 + Variant_t.type], eax
  mov [tmp1367 + Variant_t.type], eax
  mov [regSrc + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ emiter ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1345 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1345 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1345 + Variant_t.value]
  mov dword [ reg ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal49 ]
  lea  r8 , [ regBase ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ regIndex ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal51 ]
  lea  r8 , [ disp ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ scale ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1345 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1345  + Variant_t.type], 0
  jz l1348

  mov dword [ tmp1346 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1346 ]
  jz l1351

  mov [ tmp1354 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1354 + Variant_t.value], rax

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1355 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ emiter ]
  lea rdx , [ opcode ]
  lea r8 , [ tmp1354 ]
  lea r9 , [ tmp1355 ]
  lea  rax , [ tmp1353 ]
  mov  r10d, 3
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3965
  movsxd rax, dword [ tmp1353 + Variant_t.value ]
  mov    qword [ tmp1353 + Variant_t.value ], rax
l3965:


  jmp l1352

l1351:

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1355 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1354 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ emiter ]
  lea rdx , [ opcode ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1355 ]
  push rax
  lea rax, [ tmp1354 ]
  push rax
  lea  rax , [ tmp1353 ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3966
  movsxd rax, dword [ tmp1353 + Variant_t.value ]
  mov    qword [ tmp1353 + Variant_t.value ], rax
l3966:

  add rsp, 32

l1352:

  jmp l1349

l1348:

  mov dword [ tmp1346 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1346 ]
  jz l1356

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1353 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1346 ], -1

  mov [ tmp1354 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1346 ]
  mov [ tmp1354 + Variant_t.value], rax

  lea rcx, [ tmp1353 ]
  lea rdx, [ tmp1354 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1359

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ regSrc ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp1353 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1353 + Variant_t.value], rax

  lea rcx , [ emiter ]
  lea rdx , [ opcode ]
  lea r8 , [ tmp1353 ]
  lea r9 , [ regSrc ]
  lea  rax , [ tmp1354 ]
  mov  r10d, 5
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3967
  movsxd rax, dword [ tmp1354 + Variant_t.value ]
  mov    qword [ tmp1354 + Variant_t.value ], rax
l3967:


  jmp l1360

l1359:

  lea  rcx , [ item ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ tmp1354 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1354  + Variant_t.type], 0
  jz l1362

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1353 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1353  + Variant_t.type], 0
  jz l1365

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1367 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ emiter ]
  lea rdx , [ opcode ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1367 ]
  push rax
  lea  rax , [ tmp1355 ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3968
  movsxd rax, dword [ tmp1355 + Variant_t.value ]
  mov    qword [ tmp1355 + Variant_t.value ], rax
l3968:

  add rsp, 24

  jmp l1366

l1365:

  lea  rcx , [ item ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1355 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1369 ], 1

  mov eax, dword [ tmp1369 ]
  mov [ tmp1367 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1367 + Variant_t.value], rax

  lea rcx, [ tmp1355 ]
  lea rdx, [ tmp1367 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1370

  mov [ tmp1355 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1355 + Variant_t.value], rax

  lea rcx , [ emiter ]
  lea rdx , [ opcode ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1355 ]
  push rax
  lea  rax , [ tmp1367 ]
  mov  r10d, 6
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3969
  movsxd rax, dword [ tmp1367 + Variant_t.value ]
  mov    qword [ tmp1367 + Variant_t.value ], rax
l3969:

  add rsp, 24

  jmp l1371

l1370:

  mov [ tmp1355 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1355 + Variant_t.value], rax

  lea rcx , [ emiter ]
  lea rdx , [ opcode ]
  lea r8 , [ tmp1355 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1367 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3970
  movsxd rax, dword [ tmp1367 + Variant_t.value ]
  mov    qword [ tmp1367 + Variant_t.value ], rax
l3970:

  add rsp, 24

l1371:

l1366:

l1362:

l1363:

l1360:

l1356:

l1357:

l1349:


  ; clean frame
  ; -----------
  lea  rcx, [ emiter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regBase ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regIndex ]
  call __MOLD_VariantDestroy
  lea  rcx, [ disp ]
  call __MOLD_VariantDestroy
  lea  rcx, [ scale ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1345 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1353 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1354 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1355 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1367 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regSrc ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret


  restore this
  restore opcode
  restore item
  restore emiter
  restore reg
  restore regBase
  restore regIndex
  restore disp
  restore scale
  restore tmp1345
  restore tmp1346
  restore tmp1347
  restore tmp1350
  restore tmp1353
  restore tmp1354
  restore tmp1355
  restore tmp1358
  restore tmp1361
  restore tmp1364
  restore tmp1367
  restore tmp1368
  restore tmp1369
  restore regSrc

; -----------------------------------------------
; function __X64Translator_emitCoreALU2$2
; -----------------------------------------------
__X64Translator_emitCoreALU2$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 2 , readHits= 21 )
  rm EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1372 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1377 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1387 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1392 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 2 , readHits= 4 )
  reg EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp1373 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp1374 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1376 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1380 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp1384 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1385 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1386 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcode ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [rm + Variant_t.type], eax
  mov [tmp1372 + Variant_t.type], eax
  mov [tmp1377 + Variant_t.type], eax
  mov [tmp1387 + Variant_t.type], eax
  mov [tmp1392 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1372 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1372 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1372 + Variant_t.value]
  mov dword [ reg ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ rm ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1374 ], 0

  mov dword [ tmp1373 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1373 ]
  jz l1375

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1372 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1373 ], -1

  mov [ tmp1377 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1373 ]
  mov [ tmp1377 + Variant_t.value], rax

  lea  rcx , [ tmp1372 ]
  lea  rdx , [ tmp1377 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp1374 ], eax

l1375:

  cmp dword [ tmp1374 ], 0
  jz l1378

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1377 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1377 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp1377 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1377 + Variant_t.value], rax

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1377 ]
  call  __MOLD_VariantStoreAtKey

l1378:

l1379:

  cmp [ rm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rm + Variant_t.value]
  mov dword [ tmp1373 ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1377 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1377 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1377 + Variant_t.value]
  mov dword [ tmp1380 ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1377 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  mov edx , dword [ reg ]
  mov r8d , dword [ tmp1373 ]
  mov r9d , dword [ tmp1380 ]
  lea rax, [ tmp1377 ]
  push rax
  call  __X64Translator__validateOperandSizes$4
  add rsp, 8

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1377 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1377 + Variant_t.type ], 0
  jnz l1381

  mov dword [ tmp1376 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1372 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1372 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1372 + Variant_t.value]
  mov dword [ tmp1380 ], eax

  mov ecx , dword [ tmp1380 ]
  lea  rax , [ tmp1385 ]
  call  X64_IsReg8

  mov dword [ tmp1386 ], 1

  mov eax, dword [ tmp1385 ]
  cmp eax, dword [ tmp1386 ]
  jz l1383

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1372 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1380 ], 1

  mov [ tmp1387 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1380 ]
  mov [ tmp1387 + Variant_t.value], rax

  lea  rcx , [ tmp1372 ]
  lea  rdx , [ tmp1387 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp1376 ], eax

l1383:

  cmp dword [ tmp1376 ], 0
  jz l1388

  mov dword [ tmp1380 ], 256

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1380 ]
  jge l1390

  mov dword [ tmp1380 ], 1

  mov eax, dword [ opcode ]
  add eax, dword [ tmp1380 ]
  mov dword [ opcode ], eax

  jmp l1391

l1390:

  mov [ tmp1372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1372 + Variant_t.value], rax

  mov dword [ tmp1380 ], 256

  mov [ tmp1392 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1380 ]
  mov [ tmp1392 + Variant_t.value], rax

  ; __mold_syscall( 36 )
  lea rcx , [ tmp1372 ]
  lea rdx , [ tmp1392 ]
  lea r8 , [ tmp1387 ]
  call qword [rbx + 8 * 36 ]

  cmp [ tmp1387 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1387 + Variant_t.value]
  mov dword [ opcode ], eax

l1391:

l1388:

l1389:

l1381:

l1382:

  mov [ tmp1387 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1387 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1387 ]
  lea r8 , [ item ]
  call  __X64Translator_emitCore_x_y$2


  ; clean frame
  ; -----------
  lea  rcx, [ rm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1372 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1377 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1387 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1392 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore opcode
  restore item
  restore reg
  restore rm
  restore tmp1372
  restore tmp1373
  restore tmp1374
  restore tmp1376
  restore tmp1377
  restore tmp1380
  restore tmp1384
  restore tmp1385
  restore tmp1386
  restore tmp1387
  restore tmp1392

; -----------------------------------------------
; function __X64Translator__error$1
; -----------------------------------------------
__X64Translator__error$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1393 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  xor eax, eax
  mov [tmp1393 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp1393 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal7 ]
  lea  rdx , [ msg ]
  lea  r8 , [ tmp1393 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp1393 ]
  call qword [rbx + 8 * 41 ]


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1393 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore msg
  restore tmp1393

; -----------------------------------------------
; function __X64Translator__validateNumberOfOperands$2
; -----------------------------------------------
__X64Translator__validateNumberOfOperands$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  cnt EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  expectedCnt EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1394 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1397 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ cnt ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ expectedCnt ], xmm0

  ; code
  ; ----

  lea rcx, [ expectedCnt ]
  lea rdx, [ cnt ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1395

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal526
  lea rdx , [ __literal526 ]
  call  __X64Translator__error$1

  jmp l1396

l1395:

  lea rcx, [ cnt ]
  lea rdx, [ expectedCnt ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1398

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal527
  lea rdx , [ __literal527 ]
  call  __X64Translator__error$1

l1398:

l1399:

l1396:


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore cnt
  restore expectedCnt
  restore tmp1394
  restore tmp1397

; -----------------------------------------------
; function __X64Translator__validateOperandSizes$4
; -----------------------------------------------
__X64Translator__validateOperandSizes$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1404 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  reg EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  rm EQU rbp - 64 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  dataSize EQU rbp - 68 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 4 )
  regSizeId EQU rbp - 72 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  rmSizeId EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  dataSizeId EQU rbp - 80 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  tmp1400 EQU rbp - 84 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp1401 EQU rbp - 88 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1407 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1409 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1411 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ reg ], edx
  mov dword [ rm ], r8d
  mov dword [ dataSize ], r9d
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp1404 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1400 ], 16

  mov  eax, dword [ reg ]
  mov  ecx, dword [ tmp1400 ]
  cdq
  idiv ecx
  mov  dword [ regSizeId ], eax

  mov dword [ tmp1400 ], 16

  mov  eax, dword [ rm ]
  mov  ecx, dword [ tmp1400 ]
  cdq
  idiv ecx
  mov  dword [ rmSizeId ], eax

  mov dword [ dataSizeId ], -1

  mov dword [ tmp1400 ], -1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1400 ]
  jz l1402

  lea  rcx , [ X64_DATA_SIZE_ID ]
  lea  rdx , [ dataSize ]
  lea  r8 , [ tmp1404 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1404 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1404 + Variant_t.value]
  mov dword [ dataSizeId ], eax

l1402:

l1403:

  cmp [ imm + Variant_t.type ], 0
  jnz l1405

  mov dword [ tmp1407 ], 1

  mov dword [ tmp1409 ], 0

  mov dword [ tmp1400 ], -1

  mov eax, dword [ rm ]
  cmp eax, dword [ tmp1400 ]
  jz l1410

  mov dword [ tmp1409 ], 0
  mov ecx, dword [ regSizeId ]
  cmp ecx, dword [ rmSizeId ]
  setnz byte [ tmp1409 ]

l1410:

  cmp dword [ tmp1409 ], 0
  jnz l1408

  mov dword [ tmp1409 ], 0

  mov dword [ tmp1400 ], -1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1400 ]
  jz l1412

  mov dword [ tmp1409 ], 0
  mov ecx, dword [ regSizeId ]
  cmp ecx, dword [ dataSizeId ]
  setnz byte [ tmp1409 ]

l1412:

  mov eax, dword [ tmp1409 ]
  mov dword [ tmp1407 ], eax

l1408:

  cmp dword [ tmp1407 ], 0
  jz l1413

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal528
  lea rdx , [ __literal528 ]
  call  __X64Translator__error$1

l1413:

l1414:

  jmp l1406

l1405:

  lea rcx , [ this ]
  mov edx , dword [ reg ]
  mov r8d , dword [ rm ]
  mov r9d , dword [ dataSize ]
  lea rax, [ imm ]
  push rax
  call  __X64Translator__validateImmRange$4
  add rsp, 8

l1406:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1404 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore reg
  restore rm
  restore dataSize
  restore imm
  restore regSizeId
  restore rmSizeId
  restore dataSizeId
  restore tmp1400
  restore tmp1401
  restore tmp1404
  restore tmp1407
  restore tmp1409
  restore tmp1411

; -----------------------------------------------
; function __X64Translator__validateImmRange$4
; -----------------------------------------------
__X64Translator__validateImmRange$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  tmp1427 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1428 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  reg EQU rbp - 76 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 4 )
  rm EQU rbp - 80 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 84 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  tmp1415 EQU rbp - 88 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1418 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1419 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 12 , readHits= 12 )
  tmp1422 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1423 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1424 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1429 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ reg ], edx
  mov dword [ rm ], r8d
  mov dword [ dataSize ], r9d
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp1427 + Variant_t.type], eax
  mov [tmp1428 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ imm  + Variant_t.type], 0
  jz l1416

  mov dword [ tmp1419 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1419 ]
  jz l1420

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1423 ]
  call  X64_IsReg8

  mov dword [ tmp1424 ], 1

  mov eax, dword [ tmp1423 ]
  cmp eax, dword [ tmp1424 ]
  jnz l1425

  mov dword [ tmp1419 ], -127

  mov [ tmp1427 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1427 + Variant_t.value], rax

  mov dword [ tmp1419 ], 255

  mov [ tmp1428 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1428 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1427 ]
  lea r9 , [ tmp1428 ]
  call  __X64Translator__failIfOutOfRange$3

  jmp l1426

l1425:

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1423 ]
  call  X64_IsReg16

  mov dword [ tmp1429 ], 1

  mov eax, dword [ tmp1423 ]
  cmp eax, dword [ tmp1429 ]
  jnz l1430

  mov dword [ tmp1419 ], -32767

  mov [ tmp1428 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1428 + Variant_t.value], rax

  mov dword [ tmp1419 ], 65535

  mov [ tmp1427 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1427 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1428 ]
  lea r9 , [ tmp1427 ]
  call  __X64Translator__failIfOutOfRange$3

l1430:

l1431:

l1426:

  jmp l1421

l1420:

  mov dword [ tmp1419 ], -1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1419 ]
  jz l1432

  mov dword [ tmp1419 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1419 ]
  jnz l1434

  mov dword [ tmp1419 ], -127

  mov [ tmp1427 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1427 + Variant_t.value], rax

  mov dword [ tmp1419 ], 255

  mov [ tmp1428 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1428 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1427 ]
  lea r9 , [ tmp1428 ]
  call  __X64Translator__failIfOutOfRange$3

  jmp l1435

l1434:

  mov dword [ tmp1419 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1419 ]
  jnz l1436

  mov dword [ tmp1419 ], -32767

  mov [ tmp1428 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1428 + Variant_t.value], rax

  mov dword [ tmp1419 ], 65535

  mov [ tmp1427 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1419 ]
  mov [ tmp1427 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1428 ]
  lea r9 , [ tmp1427 ]
  call  __X64Translator__failIfOutOfRange$3

l1436:

l1437:

l1435:

l1432:

l1433:

l1421:

l1416:

l1417:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1427 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1428 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore reg
  restore rm
  restore dataSize
  restore imm
  restore tmp1415
  restore tmp1418
  restore tmp1419
  restore tmp1422
  restore tmp1423
  restore tmp1424
  restore tmp1427
  restore tmp1428
  restore tmp1429

; -----------------------------------------------
; function __X64Translator__failIf8BitOperandIsUsed$1
; -----------------------------------------------
__X64Translator__failIf8BitOperandIsUsed$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 12 )
  tmp1441 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1443 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1448 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1452 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1453 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1438 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1440 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1442 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp1445 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1447 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1441 + Variant_t.type], eax
  mov [tmp1443 + Variant_t.type], eax
  mov [tmp1448 + Variant_t.type], eax
  mov [tmp1452 + Variant_t.type], eax
  mov [tmp1453 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1438 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1441 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1442 ], 1

  mov [ tmp1443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1442 ]
  mov [ tmp1443 + Variant_t.value], rax

  lea rcx, [ tmp1441 ]
  lea rdx, [ tmp1443 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1439

  mov dword [ tmp1440 ], 1

  mov dword [ tmp1445 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1443 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1442 ], -1

  mov [ tmp1441 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1442 ]
  mov [ tmp1441 + Variant_t.value], rax

  lea rcx, [ tmp1443 ]
  lea rdx, [ tmp1441 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1446

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1443 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1442 ], 16

  mov [ tmp1448 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1442 ]
  mov [ tmp1448 + Variant_t.value], rax

  lea  rcx , [ tmp1443 ]
  lea  rdx , [ tmp1448 ]
  lea  r8 , [ tmp1441 ]
  call  __MOLD_VariantDivAsInteger

  mov dword [ tmp1442 ], 0

  mov [ tmp1448 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1442 ]
  mov [ tmp1448 + Variant_t.value], rax

  lea  rcx , [ tmp1441 ]
  lea  rdx , [ tmp1448 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1445 ], eax

l1446:

  cmp dword [ tmp1445 ], 0
  jnz l1444

  mov dword [ tmp1445 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1448 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1442 ], -1

  mov [ tmp1441 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1442 ]
  mov [ tmp1441 + Variant_t.value], rax

  lea rcx, [ tmp1448 ]
  lea rdx, [ tmp1441 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1449

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1448 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1442 ], 16

  mov [ tmp1443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1442 ]
  mov [ tmp1443 + Variant_t.value], rax

  lea  rcx , [ tmp1448 ]
  lea  rdx , [ tmp1443 ]
  lea  r8 , [ tmp1441 ]
  call  __MOLD_VariantDivAsInteger

  mov dword [ tmp1442 ], 0

  mov [ tmp1443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1442 ]
  mov [ tmp1443 + Variant_t.value], rax

  lea  rcx , [ tmp1441 ]
  lea  rdx , [ tmp1443 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1445 ], eax

l1449:

  mov eax, dword [ tmp1445 ]
  mov dword [ tmp1440 ], eax

l1444:

  mov eax, dword [ tmp1440 ]
  mov dword [ tmp1438 ], eax

l1439:

  cmp dword [ tmp1438 ], 0
  jz l1450

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1443 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1453 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal529 ]
  lea  rdx , [ tmp1443 ]
  lea  r8 , [ tmp1453 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1452 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1453 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1452 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1452 ]
  call  __X64Translator__error$1

l1450:

l1451:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1441 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1443 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1448 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1452 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1453 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1438
  restore tmp1440
  restore tmp1441
  restore tmp1442
  restore tmp1443
  restore tmp1445
  restore tmp1447
  restore tmp1448
  restore tmp1452
  restore tmp1453

; -----------------------------------------------
; function __X64Translator__failIfNon8BitOperandIsUsed$1
; -----------------------------------------------
__X64Translator__failIfNon8BitOperandIsUsed$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 14 )
  tmp1459 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1460 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1462 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1466 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1470 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1471 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1454 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1456 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1458 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1461 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp1465 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1459 + Variant_t.type], eax
  mov [tmp1460 + Variant_t.type], eax
  mov [tmp1462 + Variant_t.type], eax
  mov [tmp1466 + Variant_t.type], eax
  mov [tmp1470 + Variant_t.type], eax
  mov [tmp1471 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1454 ], 1

  mov dword [ tmp1456 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ tmp1459 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1459  + Variant_t.type], 0
  jz l1457

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1460 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1461 ], 1

  mov [ tmp1462 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1461 ]
  mov [ tmp1462 + Variant_t.value], rax

  lea  rcx , [ tmp1462 ]
  lea  rdx , [ tmp1460 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1456 ], eax

l1457:

  cmp dword [ tmp1456 ], 0
  jnz l1455

  mov dword [ tmp1456 ], 1

  mov dword [ tmp1458 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1462 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1461 ], -1

  mov [ tmp1460 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1461 ]
  mov [ tmp1460 + Variant_t.value], rax

  lea rcx, [ tmp1462 ]
  lea rdx, [ tmp1460 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1464

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1462 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1461 ], 16

  mov [ tmp1466 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1461 ]
  mov [ tmp1466 + Variant_t.value], rax

  lea  rcx , [ tmp1462 ]
  lea  rdx , [ tmp1466 ]
  lea  r8 , [ tmp1460 ]
  call  __MOLD_VariantDivAsInteger

  mov dword [ tmp1461 ], 0

  mov [ tmp1466 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1461 ]
  mov [ tmp1466 + Variant_t.value], rax

  lea  rcx , [ tmp1466 ]
  lea  rdx , [ tmp1460 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1458 ], eax

l1464:

  cmp dword [ tmp1458 ], 0
  jnz l1463

  mov dword [ tmp1458 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1466 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1461 ], -1

  mov [ tmp1460 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1461 ]
  mov [ tmp1460 + Variant_t.value], rax

  lea rcx, [ tmp1466 ]
  lea rdx, [ tmp1460 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1467

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1466 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1461 ], 16

  mov [ tmp1462 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1461 ]
  mov [ tmp1462 + Variant_t.value], rax

  lea  rcx , [ tmp1466 ]
  lea  rdx , [ tmp1462 ]
  lea  r8 , [ tmp1460 ]
  call  __MOLD_VariantDivAsInteger

  mov dword [ tmp1461 ], 0

  mov [ tmp1462 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1461 ]
  mov [ tmp1462 + Variant_t.value], rax

  lea  rcx , [ tmp1462 ]
  lea  rdx , [ tmp1460 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1458 ], eax

l1467:

  mov eax, dword [ tmp1458 ]
  mov dword [ tmp1456 ], eax

l1463:

  mov eax, dword [ tmp1456 ]
  mov dword [ tmp1454 ], eax

l1455:

  cmp dword [ tmp1454 ], 0
  jz l1468

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1462 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1471 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal530 ]
  lea  rdx , [ tmp1462 ]
  lea  r8 , [ tmp1471 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1471 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1470 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1470 ]
  call  __X64Translator__error$1

l1468:

l1469:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1459 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1460 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1462 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1466 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1470 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1471 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1454
  restore tmp1456
  restore tmp1458
  restore tmp1459
  restore tmp1460
  restore tmp1461
  restore tmp1462
  restore tmp1465
  restore tmp1466
  restore tmp1470
  restore tmp1471

; -----------------------------------------------
; function __X64Translator__failIfNon16BitOperandIsUsed$1
; -----------------------------------------------
__X64Translator__failIfNon16BitOperandIsUsed$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 14 )
  tmp1477 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1478 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1480 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1484 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1488 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1489 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1472 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1474 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1476 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1479 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp1483 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1477 + Variant_t.type], eax
  mov [tmp1478 + Variant_t.type], eax
  mov [tmp1480 + Variant_t.type], eax
  mov [tmp1484 + Variant_t.type], eax
  mov [tmp1488 + Variant_t.type], eax
  mov [tmp1489 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1472 ], 1

  mov dword [ tmp1474 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ tmp1477 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1477  + Variant_t.type], 0
  jz l1475

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1478 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1479 ], 2

  mov [ tmp1480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1480 + Variant_t.value], rax

  lea  rcx , [ tmp1478 ]
  lea  rdx , [ tmp1480 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp1474 ], eax

l1475:

  cmp dword [ tmp1474 ], 0
  jnz l1473

  mov dword [ tmp1474 ], 1

  mov dword [ tmp1476 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1480 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1479 ], -1

  mov [ tmp1478 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1478 + Variant_t.value], rax

  lea rcx, [ tmp1480 ]
  lea rdx, [ tmp1478 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1482

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1480 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1479 ], 16

  mov [ tmp1484 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1484 + Variant_t.value], rax

  lea  rcx , [ tmp1480 ]
  lea  rdx , [ tmp1484 ]
  lea  r8 , [ tmp1478 ]
  call  __MOLD_VariantDivAsInteger

  mov dword [ tmp1479 ], 1

  mov [ tmp1484 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1484 + Variant_t.value], rax

  lea  rcx , [ tmp1484 ]
  lea  rdx , [ tmp1478 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1476 ], eax

l1482:

  cmp dword [ tmp1476 ], 0
  jnz l1481

  mov dword [ tmp1476 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1484 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1479 ], -1

  mov [ tmp1478 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1478 + Variant_t.value], rax

  lea rcx, [ tmp1484 ]
  lea rdx, [ tmp1478 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1485

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1484 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1479 ], 16

  mov [ tmp1480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1480 + Variant_t.value], rax

  lea  rcx , [ tmp1484 ]
  lea  rdx , [ tmp1480 ]
  lea  r8 , [ tmp1478 ]
  call  __MOLD_VariantDivAsInteger

  mov dword [ tmp1479 ], 1

  mov [ tmp1480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1480 + Variant_t.value], rax

  lea  rcx , [ tmp1480 ]
  lea  rdx , [ tmp1478 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1476 ], eax

l1485:

  mov eax, dword [ tmp1476 ]
  mov dword [ tmp1474 ], eax

l1481:

  mov eax, dword [ tmp1474 ]
  mov dword [ tmp1472 ], eax

l1473:

  cmp dword [ tmp1472 ], 0
  jz l1486

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1480 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1489 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal531 ]
  lea  rdx , [ tmp1480 ]
  lea  r8 , [ tmp1489 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1488 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1489 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1488 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1488 ]
  call  __X64Translator__error$1

l1486:

l1487:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1477 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1478 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1480 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1484 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1488 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1489 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1472
  restore tmp1474
  restore tmp1476
  restore tmp1477
  restore tmp1478
  restore tmp1479
  restore tmp1480
  restore tmp1483
  restore tmp1484
  restore tmp1488
  restore tmp1489

; -----------------------------------------------
; function __X64Translator__failIfMemoryWrite$1
; -----------------------------------------------
__X64Translator__failIfMemoryWrite$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  tmp1493 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1495 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1498 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1499 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1490 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1492 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1494 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1493 + Variant_t.type], eax
  mov [tmp1495 + Variant_t.type], eax
  mov [tmp1498 + Variant_t.type], eax
  mov [tmp1499 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1490 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal54 ]
  lea  r8 , [ tmp1493 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1494 ], 1

  mov eax, dword [ tmp1494 ]
  mov [ tmp1495 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1495 + Variant_t.value], rax

  lea rcx, [ tmp1493 ]
  lea rdx, [ tmp1495 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1491

  lea  rcx , [ item ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1495 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1494 ], 1

  mov eax, dword [ tmp1494 ]
  mov [ tmp1493 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1493 + Variant_t.value], rax

  lea  rcx , [ tmp1495 ]
  lea  rdx , [ tmp1493 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1490 ], eax

l1491:

  cmp dword [ tmp1490 ], 0
  jz l1496

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1493 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1499 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal532 ]
  lea  rdx , [ tmp1493 ]
  lea  r8 , [ tmp1499 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1498 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1499 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1498 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1498 ]
  call  __X64Translator__error$1

l1496:

l1497:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1493 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1495 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1498 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1499 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1490
  restore tmp1492
  restore tmp1493
  restore tmp1494
  restore tmp1495
  restore tmp1498
  restore tmp1499

; -----------------------------------------------
; function __X64Translator__failIfMemoryRead$1
; -----------------------------------------------
__X64Translator__failIfMemoryRead$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  tmp1503 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1505 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1508 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1509 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1500 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1502 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1504 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1503 + Variant_t.type], eax
  mov [tmp1505 + Variant_t.type], eax
  mov [tmp1508 + Variant_t.type], eax
  mov [tmp1509 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1500 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal54 ]
  lea  r8 , [ tmp1503 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1504 ], 1

  mov eax, dword [ tmp1504 ]
  mov [ tmp1505 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1505 + Variant_t.value], rax

  lea rcx, [ tmp1503 ]
  lea rdx, [ tmp1505 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1501

  lea  rcx , [ item ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1505 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1504 ], 0

  mov eax, dword [ tmp1504 ]
  mov [ tmp1503 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1503 + Variant_t.value], rax

  lea  rcx , [ tmp1505 ]
  lea  rdx , [ tmp1503 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1500 ], eax

l1501:

  cmp dword [ tmp1500 ], 0
  jz l1506

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1503 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1509 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal533 ]
  lea  rdx , [ tmp1503 ]
  lea  r8 , [ tmp1509 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1508 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1509 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1508 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1508 ]
  call  __X64Translator__error$1

l1506:

l1507:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1503 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1505 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1508 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1509 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1500
  restore tmp1502
  restore tmp1503
  restore tmp1504
  restore tmp1505
  restore tmp1508
  restore tmp1509

; -----------------------------------------------
; function __X64Translator__failIfImmIsUsed$1
; -----------------------------------------------
__X64Translator__failIfImmIsUsed$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  tmp1511 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1514 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1515 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1516 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1510 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1511 + Variant_t.type], eax
  mov [tmp1514 + Variant_t.type], eax
  mov [tmp1515 + Variant_t.type], eax
  mov [tmp1516 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1511 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1511  + Variant_t.type], 0
  jz l1512

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1516 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1515 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal534 ]
  lea  rdx , [ tmp1516 ]
  lea  r8 , [ tmp1515 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1514 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1515 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1514 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1514 ]
  call  __X64Translator__error$1

l1512:

l1513:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1511 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1514 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1515 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1516 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1510
  restore tmp1511
  restore tmp1514
  restore tmp1515
  restore tmp1516

; -----------------------------------------------
; function __X64Translator__failIfMemoryReadOrWrite$1
; -----------------------------------------------
__X64Translator__failIfMemoryReadOrWrite$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  tmp1518 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1520 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1523 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1524 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1517 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1519 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1518 + Variant_t.type], eax
  mov [tmp1520 + Variant_t.type], eax
  mov [tmp1523 + Variant_t.type], eax
  mov [tmp1524 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal54 ]
  lea  r8 , [ tmp1518 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1519 ], 1

  mov eax, dword [ tmp1519 ]
  mov [ tmp1520 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1520 + Variant_t.value], rax

  lea rcx, [ tmp1518 ]
  lea rdx, [ tmp1520 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1521

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1520 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1524 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal535 ]
  lea  rdx , [ tmp1520 ]
  lea  r8 , [ tmp1524 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1523 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1524 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1523 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1523 ]
  call  __X64Translator__error$1

l1521:

l1522:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1518 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1520 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1523 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1524 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1517
  restore tmp1518
  restore tmp1519
  restore tmp1520
  restore tmp1523
  restore tmp1524

; -----------------------------------------------
; function __X64Translator__failIfRegsAreUsed$1
; -----------------------------------------------
__X64Translator__failIfRegsAreUsed$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  tmp1528 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1530 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1533 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1534 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1525 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1527 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1529 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1528 + Variant_t.type], eax
  mov [tmp1530 + Variant_t.type], eax
  mov [tmp1533 + Variant_t.type], eax
  mov [tmp1534 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1525 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1528 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1529 ], -1

  mov [ tmp1530 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1529 ]
  mov [ tmp1530 + Variant_t.value], rax

  lea rcx, [ tmp1528 ]
  lea rdx, [ tmp1530 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1526

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1530 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1529 ], -1

  mov [ tmp1528 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1529 ]
  mov [ tmp1528 + Variant_t.value], rax

  lea  rcx , [ tmp1530 ]
  lea  rdx , [ tmp1528 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp1525 ], eax

l1526:

  cmp dword [ tmp1525 ], 0
  jz l1531

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1528 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal536 ]
  lea  rdx , [ tmp1528 ]
  lea  r8 , [ tmp1534 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1533 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1534 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1533 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1533 ]
  call  __X64Translator__error$1

l1531:

l1532:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1528 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1530 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1533 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1525
  restore tmp1527
  restore tmp1528
  restore tmp1529
  restore tmp1530
  restore tmp1533
  restore tmp1534

; -----------------------------------------------
; function __X64Translator__failIfImmIsMissing$1
; -----------------------------------------------
__X64Translator__failIfImmIsMissing$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  tmp1536 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1539 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1540 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1541 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1535 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1536 + Variant_t.type], eax
  mov [tmp1539 + Variant_t.type], eax
  mov [tmp1540 + Variant_t.type], eax
  mov [tmp1541 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1536 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1536 + Variant_t.type ], 0
  jnz l1537

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1541 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1540 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal537 ]
  lea  rdx , [ tmp1541 ]
  lea  r8 , [ tmp1540 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1539 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1540 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1539 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1539 ]
  call  __X64Translator__error$1

l1537:

l1538:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1536 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1539 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1540 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1541 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1535
  restore tmp1536
  restore tmp1539
  restore tmp1540
  restore tmp1541

; -----------------------------------------------
; function __X64Translator__failIfOutOfRange$3
; -----------------------------------------------
__X64Translator__failIfOutOfRange$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  valueMin EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  valueMax EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1542 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1544 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ valueMin ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ valueMax ], xmm0

  ; code
  ; ----

  mov dword [ tmp1542 ], 1

  lea rcx, [ x ]
  lea rdx, [ valueMin ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l1543

  lea  rcx , [ valueMax ]
  lea  rdx , [ x ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1542 ], eax

l1543:

  cmp dword [ tmp1542 ], 0
  jz l1545

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal538
  lea rdx , [ __literal538 ]
  call  __X64Translator__error$1

l1545:

l1546:


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore valueMin
  restore valueMax
  restore tmp1542
  restore tmp1544

; -----------------------------------------------
; function __X64Translator__failIfNonMMReg$2
; -----------------------------------------------
__X64Translator__failIfNonMMReg$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1547 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1548 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1549 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1550 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ reg ], xmm0

  ; code
  ; ----

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp1549 ], eax

  mov ecx , dword [ tmp1549 ]
  lea  rax , [ tmp1548 ]
  call  X64_IsRegMM

  mov dword [ tmp1550 ], 0

  mov eax, dword [ tmp1548 ]
  cmp eax, dword [ tmp1550 ]
  jnz l1551

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1551:

l1552:


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore item
  restore reg
  restore tmp1547
  restore tmp1548
  restore tmp1549
  restore tmp1550

; -----------------------------------------------
; function __X64Translator__failIfNon64Data$1
; -----------------------------------------------
__X64Translator__failIfNon64Data$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  tmp1554 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1556 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1559 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1560 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1553 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1555 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1554 + Variant_t.type], eax
  mov [tmp1556 + Variant_t.type], eax
  mov [tmp1559 + Variant_t.type], eax
  mov [tmp1560 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1554 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1555 ], 8

  mov [ tmp1556 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1555 ]
  mov [ tmp1556 + Variant_t.value], rax

  lea rcx, [ tmp1554 ]
  lea rdx, [ tmp1556 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1557

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1556 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1560 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal539 ]
  lea  rdx , [ tmp1556 ]
  lea  r8 , [ tmp1560 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1559 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1560 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1559 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1559 ]
  call  __X64Translator__error$1

l1557:

l1558:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1554 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1556 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1559 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1560 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1553
  restore tmp1554
  restore tmp1555
  restore tmp1556
  restore tmp1559
  restore tmp1560

; -----------------------------------------------
; function __X64Translator__errorBadSyntax$1
; -----------------------------------------------
__X64Translator__errorBadSyntax$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1561 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1562 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1563 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1561 + Variant_t.type], eax
  mov [tmp1562 + Variant_t.type], eax
  mov [tmp1563 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1563 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1562 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal540 ]
  lea  rdx , [ tmp1563 ]
  lea  r8 , [ tmp1562 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1561 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1562 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1561 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1561 ]
  call  __X64Translator__error$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1561 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1562 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1563 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1561
  restore tmp1562
  restore tmp1563

; -----------------------------------------------
; function __X64Translator__errorUnrecognizedInstruction$1
; -----------------------------------------------
__X64Translator__errorUnrecognizedInstruction$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1564 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1565 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1566 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp1564 + Variant_t.type], eax
  mov [tmp1565 + Variant_t.type], eax
  mov [tmp1566 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1566 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1565 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal541 ]
  lea  rdx , [ tmp1566 ]
  lea  r8 , [ tmp1565 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1564 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1565 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1564 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1564 ]
  call  __X64Translator__error$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1564 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1565 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1566 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore item
  restore tmp1564
  restore tmp1565
  restore tmp1566

; -----------------------------------------------
; function __X64Translator__errorGenericFPU$1
; -----------------------------------------------
__X64Translator__errorGenericFPU$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  numberOfOperands EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  mnemonic EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 3 )
  opcode0 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcode1 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  opcode2 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp1567 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp1568 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp1569 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1572 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1574 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [numberOfOperands + Variant_t.type], eax
  mov [mnemonic + Variant_t.type], eax
  mov [opcode0 + Variant_t.type], eax
  mov [opcode1 + Variant_t.type], eax
  mov [opcode2 + Variant_t.type], eax
  mov [tmp1567 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ item ]
  lea  rdx , [ __literal65 ]
  lea  r8 , [ numberOfOperands ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ mnemonic ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1568 ], 0

  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  lea  rdx , [ tmp1568 ]
  lea  r8 , [ tmp1567 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1567 ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ opcode0 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1568 ], 1

  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  lea  rdx , [ tmp1568 ]
  lea  r8 , [ tmp1567 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1567 ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ opcode1 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1568 ], 2

  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  lea  rdx , [ tmp1568 ]
  lea  r8 , [ tmp1567 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1567 ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ opcode2 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ opcode0  + Variant_t.type], 0
  jz l1570

  mov dword [ tmp1572 ], 0

  cmp [ opcode1 + Variant_t.type ], 0
  jnz l1573

  xor eax, eax
  cmp [ opcode2  + Variant_t.type], 0
  setz al
  mov dword [ tmp1572 ], eax

l1573:

  cmp dword [ tmp1572 ], 0
  jz l1575

  mov dword [ tmp1568 ], 0

  mov [ tmp1567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1568 ]
  mov [ tmp1567 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ numberOfOperands ]
  lea r8 , [ tmp1567 ]
  call  __X64Translator__validateNumberOfOperands$2

l1575:

l1576:

  jmp l1571

l1570:

  cmp [ opcode1  + Variant_t.type], 0
  jz l1577

  mov dword [ tmp1568 ], 1

  mov [ tmp1567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1568 ]
  mov [ tmp1567 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ numberOfOperands ]
  lea r8 , [ tmp1567 ]
  call  __X64Translator__validateNumberOfOperands$2

  jmp l1578

l1577:

  cmp [ opcode2  + Variant_t.type], 0
  jz l1579

  mov dword [ tmp1568 ], 2

  mov [ tmp1567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1568 ]
  mov [ tmp1567 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ numberOfOperands ]
  lea r8 , [ tmp1567 ]
  call  __X64Translator__validateNumberOfOperands$2

  jmp l1580

l1579:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorUnrecognizedInstruction$1

l1580:

l1578:

l1571:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1


  ; clean frame
  ; -----------
  lea  rcx, [ numberOfOperands ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mnemonic ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode0 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1567 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore item
  restore numberOfOperands
  restore mnemonic
  restore opcode0
  restore opcode1
  restore opcode2
  restore tmp1567
  restore tmp1568
  restore tmp1569
  restore tmp1572
  restore tmp1574

; -----------------------------------------------
; function __X64Translator__emitVariableLengthOpcode$1
; -----------------------------------------------
__X64Translator__emitVariableLengthOpcode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  encoder EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmp1585 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1586 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1587 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1588 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 108 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 6 )
  tmp1581 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1582 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp1589 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1590 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcode ], edx
  xor eax, eax
  mov [encoder + Variant_t.type], eax
  mov [tmp1585 + Variant_t.type], eax
  mov [tmp1586 + Variant_t.type], eax
  mov [tmp1587 + Variant_t.type], eax
  mov [tmp1588 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ encoder ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1582 ], 65535

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1582 ]
  jle l1583

  mov [ tmp1587 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1587 + Variant_t.value], rax

  mov dword [ tmp1582 ], 255

  mov [ tmp1588 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1582 ]
  mov [ tmp1588 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1587 ]
  lea rdx , [ tmp1588 ]
  lea r8 , [ tmp1586 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ encoder ]
  lea rdx , [ tmp1586 ]
  lea  rax , [ tmp1585 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3971
  movsxd rax, dword [ tmp1585 + Variant_t.value ]
  mov    qword [ tmp1585 + Variant_t.value ], rax
l3971:


  mov dword [ tmp1589 ], 256

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp1589 ]
  cdq
  idiv ecx
  mov  dword [ tmp1582 ], eax

  mov [ tmp1586 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1582 ]
  mov [ tmp1586 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1586 ]
  lea  rax , [ tmp1585 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3972
  movsxd rax, dword [ tmp1585 + Variant_t.value ]
  mov    qword [ tmp1585 + Variant_t.value ], rax
l3972:


  jmp l1584

l1583:

  mov dword [ tmp1582 ], 255

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1582 ]
  jle l1591

  mov [ tmp1586 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1586 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1586 ]
  lea  rax , [ tmp1585 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3973
  movsxd rax, dword [ tmp1585 + Variant_t.value ]
  mov    qword [ tmp1585 + Variant_t.value ], rax
l3973:


  jmp l1592

l1591:

  mov [ tmp1586 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1586 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1586 ]
  lea  rax , [ tmp1585 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3974
  movsxd rax, dword [ tmp1585 + Variant_t.value ]
  mov    qword [ tmp1585 + Variant_t.value ], rax
l3974:


l1592:

l1584:


  ; clean frame
  ; -----------
  lea  rcx, [ encoder ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1585 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1586 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1587 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1588 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore opcode
  restore encoder
  restore tmp1581
  restore tmp1582
  restore tmp1585
  restore tmp1586
  restore tmp1587
  restore tmp1588
  restore tmp1589
  restore tmp1590

; -----------------------------------------------
; function __X64Translator__processFPU$1
; -----------------------------------------------
__X64Translator__processFPU$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 8 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 20 )
  encoder EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  mnemonic EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 5 )
  scale EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  opcodesMapFPU EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  opcodeInfoFPU EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 26 )
  tmp1593 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 16 , readHits= 16 )
  tmp1614 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp1615 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp1622 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 14 , readHits= 14 )
  tmp1652 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1653 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1660 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  reg EQU rbp - 236 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 6 )
  rm EQU rbp - 240 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )
  dataSize EQU rbp - 244 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  numberOfOperands EQU rbp - 248 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )
  opcode EQU rbp - 252 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 12 , readHits= 12 )
  tmp1594 EQU rbp - 256 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 44 , readHits= 44 )
  tmp1595 EQU rbp - 260 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1602 EQU rbp - 264 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1605 EQU rbp - 268 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1608 EQU rbp - 272 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp1611 EQU rbp - 276 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp1617 EQU rbp - 280 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp1621 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp1624 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1626 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1628 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  dataSizeId EQU rbp - 300 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 336

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [encoder + Variant_t.type], eax
  mov [mnemonic + Variant_t.type], eax
  mov [scale + Variant_t.type], eax
  mov [opcodesMapFPU + Variant_t.type], eax
  mov [opcodeInfoFPU + Variant_t.type], eax
  mov [tmp1593 + Variant_t.type], eax
  mov [tmp1614 + Variant_t.type], eax
  mov [tmp1615 + Variant_t.type], eax
  mov [tmp1622 + Variant_t.type], eax
  mov [tmp1652 + Variant_t.type], eax
  mov [tmp1653 + Variant_t.type], eax
  mov [tmp1660 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ encoder ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ mnemonic ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1593 + Variant_t.value]
  mov dword [ reg ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1593 + Variant_t.value]
  mov dword [ rm ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ scale ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1593 + Variant_t.value]
  mov dword [ dataSize ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal65 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1593 + Variant_t.value]
  mov dword [ numberOfOperands ], eax

  mov dword [ tmp1594 ], 2

  mov eax, dword [ numberOfOperands ]
  cmp eax, dword [ tmp1594 ]
  jle l1596

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal527
  lea rdx , [ __literal527 ]
  call  __X64Translator__error$1

l1596:

l1597:

  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  lea  rdx , [ numberOfOperands ]
  lea  r8 , [ opcodesMapFPU ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ opcodesMapFPU ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ opcodeInfoFPU ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ opcode ], 0

  cmp [ opcodeInfoFPU + Variant_t.type ], 0
  jnz l1598

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorGenericFPU$1

l1598:

l1599:

  mov dword [ tmp1594 ], 0

  mov eax, dword [ numberOfOperands ]
  cmp eax, dword [ tmp1594 ]
  jnz l1600

  cmp [ opcodeInfoFPU + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ opcodeInfoFPU + Variant_t.value]
  mov dword [ tmp1594 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp1594 ]
  call  __X64Translator__emitVariableLengthOpcode$1

  jmp l1601

l1600:

  mov dword [ tmp1594 ], 1

  mov eax, dword [ numberOfOperands ]
  cmp eax, dword [ tmp1594 ]
  jnz l1603

  cmp [ scale  + Variant_t.type], 0
  jz l1606

  mov dword [ tmp1594 ], -1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1594 ]
  jnz l1609

  mov dword [ tmp1594 ], 5

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1593 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp1594 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1594 ]
  jnz l1612

  lea  rcx, [ tmp1615 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal542 ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ tmp1615 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1615 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1614 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1614 ]
  call  __X64Translator__error$1

l1612:

l1613:

  jmp l1610

l1609:

  lea  rcx , [ X64_DATA_SIZE_ID ]
  lea  rdx , [ dataSize ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1593 + Variant_t.value]
  mov dword [ dataSizeId ], eax

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ dataSizeId ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1593 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp1611 ], 1

  mov dword [ tmp1594 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1594 ]
  jz l1616

  mov dword [ tmp1594 ], 1

  mov dword [ tmp1611 ], 0
  mov ecx, dword [ dataSize ]
  cmp ecx, dword [ tmp1594 ]
  setz byte [ tmp1611 ]

l1616:

  cmp dword [ tmp1611 ], 0
  jz l1618

  mov dword [ tmp1617 ], 1

  mov dword [ tmp1594 ], 1

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1594 ], 0

  mov [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1594 ]
  mov [ tmp1622 + Variant_t.value], rax

  lea rcx, [ tmp1593 ]
  lea rdx, [ tmp1622 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1620

  mov dword [ tmp1621 ], 1

  mov dword [ tmp1594 ], 2

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1622 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1594 ], 0

  mov [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1594 ]
  mov [ tmp1593 + Variant_t.value], rax

  lea rcx, [ tmp1622 ]
  lea rdx, [ tmp1593 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1623

  mov dword [ tmp1624 ], 1

  mov dword [ tmp1594 ], 3

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1594 ], 0

  mov [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1594 ]
  mov [ tmp1622 + Variant_t.value], rax

  lea rcx, [ tmp1593 ]
  lea rdx, [ tmp1622 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1625

  mov dword [ tmp1626 ], 1

  mov dword [ tmp1594 ], 4

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1622 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1594 ], 0

  mov [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1594 ]
  mov [ tmp1593 + Variant_t.value], rax

  lea rcx, [ tmp1622 ]
  lea rdx, [ tmp1593 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1627

  mov dword [ tmp1594 ], 5

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1593 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1594 ], 0

  mov [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1594 ]
  mov [ tmp1622 + Variant_t.value], rax

  lea  rcx , [ tmp1593 ]
  lea  rdx , [ tmp1622 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp1626 ], eax

l1627:

  mov eax, dword [ tmp1626 ]
  mov dword [ tmp1624 ], eax

l1625:

  mov eax, dword [ tmp1624 ]
  mov dword [ tmp1621 ], eax

l1623:

  mov eax, dword [ tmp1621 ]
  mov dword [ tmp1617 ], eax

l1620:

  cmp dword [ tmp1617 ], 0
  jz l1629

  lea  rcx, [ tmp1615 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal543 ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ tmp1615 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1615 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1614 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1614 ]
  call  __X64Translator__error$1

l1629:

l1630:

l1618:

l1619:

l1610:

  jmp l1607

l1606:

  mov eax, dword [ reg ]
  cmp eax, dword [ X64_AX ]
  jnz l1631

  lea rcx, [ mnemonic ]
  lea rdx, [ __literal491 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1633

  mov dword [ opcode ], 57567

  jmp l1634

l1633:

  lea rcx, [ mnemonic ]
  lea rdx, [ __literal492 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1635

  mov eax, dword [ X64_FSTSW_AX ]
  mov dword [ opcode ], eax

l1635:

l1636:

l1634:

  jmp l1632

l1631:

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1617 ]
  call  X64_IsRegSTI

  mov dword [ tmp1621 ], 1

  mov eax, dword [ tmp1617 ]
  cmp eax, dword [ tmp1621 ]
  jnz l1637

  mov dword [ tmp1594 ], 0

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1622 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1622 + Variant_t.value]
  mov dword [ opcode ], eax

l1637:

l1638:

l1632:

l1607:

  jmp l1604

l1603:

  mov dword [ tmp1605 ], 0

  mov eax, dword [ reg ]
  cmp eax, dword [ X64_ST0 ]
  jnz l1639

  mov dword [ tmp1605 ], 0
  mov ecx, dword [ rm ]
  cmp ecx, dword [ X64_ST0 ]
  setz byte [ tmp1605 ]

l1639:

  cmp dword [ tmp1605 ], 0
  jz l1640

  mov dword [ tmp1594 ], 0

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1622 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1622 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp1594 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1594 ]
  jnz l1642

  mov dword [ tmp1594 ], 1

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1622 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1622 + Variant_t.value]
  mov dword [ opcode ], eax

l1642:

l1643:

  jmp l1641

l1640:

  mov dword [ tmp1608 ], 0

  mov eax, dword [ rm ]
  cmp eax, dword [ X64_ST0 ]
  jnz l1644

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1621 ]
  call  X64_IsRegSTI

  mov dword [ tmp1617 ], 1

  mov dword [ tmp1608 ], 0
  mov ecx, dword [ tmp1621 ]
  cmp ecx, dword [ tmp1617 ]
  setz byte [ tmp1608 ]

l1644:

  cmp dword [ tmp1608 ], 0
  jz l1645

  mov dword [ tmp1594 ], 1

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1622 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1622 + Variant_t.value]
  mov dword [ opcode ], eax

  jmp l1646

l1645:

  mov dword [ tmp1611 ], 0

  mov eax, dword [ reg ]
  cmp eax, dword [ X64_ST0 ]
  jnz l1647

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1621 ]
  call  X64_IsRegSTI

  mov dword [ tmp1624 ], 1

  mov dword [ tmp1611 ], 0
  mov ecx, dword [ tmp1621 ]
  cmp ecx, dword [ tmp1624 ]
  setz byte [ tmp1611 ]

l1647:

  cmp dword [ tmp1611 ], 0
  jz l1648

  mov dword [ tmp1594 ], 0

  lea  rcx , [ opcodeInfoFPU ]
  lea  rdx , [ tmp1594 ]
  lea  r8 , [ tmp1622 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1622 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1622 + Variant_t.value]
  mov dword [ opcode ], eax

  mov eax, dword [ rm ]
  mov dword [ reg ], eax

l1648:

l1649:

l1646:

l1641:

l1604:

  mov dword [ tmp1594 ], 16777215

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1594 ]
  jle l1650

  mov [ tmp1652 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1652 + Variant_t.value], rax

  mov dword [ tmp1594 ], 65535

  mov [ tmp1653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1594 ]
  mov [ tmp1653 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1652 ]
  lea rdx , [ tmp1653 ]
  lea r8 , [ tmp1593 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ encoder ]
  lea rdx , [ tmp1593 ]
  lea  rax , [ tmp1622 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3975
  movsxd rax, dword [ tmp1622 + Variant_t.value ]
  mov    qword [ tmp1622 + Variant_t.value ], rax
l3975:


  mov dword [ tmp1594 ], 65536

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp1594 ]
  cdq
  idiv ecx
  mov  dword [ opcode ], eax

  jmp l1651

l1650:

  mov dword [ tmp1594 ], 65535

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1594 ]
  jle l1654

  mov [ tmp1653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1653 + Variant_t.value], rax

  mov dword [ tmp1594 ], 255

  mov [ tmp1652 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1594 ]
  mov [ tmp1652 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1653 ]
  lea rdx , [ tmp1652 ]
  lea r8 , [ tmp1593 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ encoder ]
  lea rdx , [ tmp1593 ]
  lea  rax , [ tmp1622 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3976
  movsxd rax, dword [ tmp1622 + Variant_t.value ]
  mov    qword [ tmp1622 + Variant_t.value ], rax
l3976:


  mov dword [ tmp1594 ], 256

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp1594 ]
  cdq
  idiv ecx
  mov  dword [ opcode ], eax

  jmp l1655

l1654:

  mov dword [ tmp1594 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1594 ]
  jnz l1656

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1656:

l1657:

l1655:

l1651:

  cmp [ scale  + Variant_t.type], 0
  jz l1658

  mov [ tmp1593 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1593 + Variant_t.value], rax

  lea  rcx , [ item ]
  lea  rdx , [ __literal49 ]
  lea  r8 , [ tmp1652 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1653 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal51 ]
  lea  r8 , [ tmp1660 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ encoder ]
  lea rdx , [ tmp1593 ]
  lea r8 , [ tmp1652 ]
  lea r9 , [ scale ]
  lea rax, [ tmp1653 ]
  push rax
  lea rax, [ tmp1660 ]
  push rax
  lea  rax , [ tmp1622 ]
  mov  r10d, 10
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3977
  movsxd rax, dword [ tmp1622 + Variant_t.value ]
  mov    qword [ tmp1622 + Variant_t.value ], rax
l3977:

  add rsp, 16

  jmp l1659

l1658:

  mov [ tmp1660 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1660 + Variant_t.value], rax

  mov [ tmp1653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1653 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1660 ]
  lea r8 , [ tmp1653 ]
  lea  rax , [ tmp1622 ]
  mov  r10d, 11
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3978
  movsxd rax, dword [ tmp1622 + Variant_t.value ]
  mov    qword [ tmp1622 + Variant_t.value ], rax
l3978:


l1659:

l1601:


  ; clean frame
  ; -----------
  lea  rcx, [ encoder ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mnemonic ]
  call __MOLD_VariantDestroy
  lea  rcx, [ scale ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcodesMapFPU ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcodeInfoFPU ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1593 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1614 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1615 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1622 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1652 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1653 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1660 ]
  call __MOLD_VariantDestroy

  add  rsp, 336
  pop  rbp
  ret


  restore this
  restore item
  restore encoder
  restore mnemonic
  restore reg
  restore rm
  restore scale
  restore dataSize
  restore numberOfOperands
  restore opcodesMapFPU
  restore opcodeInfoFPU
  restore opcode
  restore tmp1593
  restore tmp1594
  restore tmp1595
  restore tmp1602
  restore tmp1605
  restore tmp1608
  restore tmp1611
  restore tmp1614
  restore tmp1615
  restore tmp1617
  restore tmp1621
  restore tmp1622
  restore tmp1624
  restore tmp1626
  restore tmp1628
  restore tmp1652
  restore tmp1653
  restore tmp1660
  restore dataSizeId

; -----------------------------------------------
; function __X64Translator_processOneItem$1
; -----------------------------------------------
__X64Translator_processOneItem$1_vcall:
__X64Translator_processOneItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 143 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 2 , readHits= 169 )
  opcodeInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 4 )
  handlerId EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 26 )
  syntaxId EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 5 )
  encoder EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 92 )
  tmp1662 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 126 , readHits= 126 )
  tmp1672 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 48 , readHits= 48 )
  tmp1697 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 8 , readHits= 8 )
  tmp1698 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 59 , readHits= 59 )
  tmp1699 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 89 , readHits= 89 )
  tmp1736 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 6 , readHits= 6 )
  tmp1929 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 43 , readHits= 43 )
  mnemonic EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  regBase EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 29 )
  regIndex EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 29 )
  disp EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 29 )
  scale EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 46 )
  imm EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 59 )
  rel8 EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  finalOpcode EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  __cse0 EQU rbp - 360 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp1661 EQU rbp - 364 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1665 EQU rbp - 368 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1666 EQU rbp - 372 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 159 , readHits= 159 )
  tmp1669 EQU rbp - 376 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1673 EQU rbp - 380 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1676 EQU rbp - 384 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1679 EQU rbp - 388 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1682 EQU rbp - 392 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1685 EQU rbp - 396 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1700 EQU rbp - 400 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp1705 EQU rbp - 404 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1710 EQU rbp - 408 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1713 EQU rbp - 412 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1716 EQU rbp - 416 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1719 EQU rbp - 420 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1722 EQU rbp - 424 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1725 EQU rbp - 428 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1728 EQU rbp - 432 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp1743 EQU rbp - 436 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1746 EQU rbp - 440 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1748 EQU rbp - 444 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp1749 EQU rbp - 448 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp1763 EQU rbp - 452 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1766 EQU rbp - 456 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1769 EQU rbp - 460 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1772 EQU rbp - 464 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp1777 EQU rbp - 468 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp1778 EQU rbp - 472 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 9 , readHits= 9 )
  tmp1790 EQU rbp - 476 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 16 , readHits= 16 )
  tmp1797 EQU rbp - 480 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 14 , readHits= 14 )
  tmp1804 EQU rbp - 484 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 16 , readHits= 16 )
  tmp1810 EQU rbp - 488 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 15 , readHits= 15 )
  tmp1816 EQU rbp - 492 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp1817 EQU rbp - 496 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 16 , readHits= 16 )
  tmp1818 EQU rbp - 500 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp1821 EQU rbp - 504 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 15 , readHits= 15 )
  tmp1822 EQU rbp - 508 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 16 , readHits= 16 )
  tmp1835 EQU rbp - 512 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 15 , readHits= 15 )
  tmp1844 EQU rbp - 516 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp1859 EQU rbp - 520 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1863 EQU rbp - 524 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  opcode EQU rbp - 528 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 73 )
  reg EQU rbp - 532 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 90 )
  rm EQU rbp - 536 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 42 )
  dataSize EQU rbp - 540 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 30 )
  numberOfOperands EQU rbp - 544 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 17 )
  regCL EQU rbp - 548 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 2 )
  operationId EQU rbp - 552 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 592

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [opcodeInfo + Variant_t.type], eax
  mov [handlerId + Variant_t.type], eax
  mov [syntaxId + Variant_t.type], eax
  mov [encoder + Variant_t.type], eax
  mov [tmp1662 + Variant_t.type], eax
  mov [tmp1672 + Variant_t.type], eax
  mov [tmp1697 + Variant_t.type], eax
  mov [tmp1698 + Variant_t.type], eax
  mov [tmp1699 + Variant_t.type], eax
  mov [tmp1736 + Variant_t.type], eax
  mov [tmp1929 + Variant_t.type], eax
  mov [mnemonic + Variant_t.type], eax
  mov [regBase + Variant_t.type], eax
  mov [regIndex + Variant_t.type], eax
  mov [disp + Variant_t.type], eax
  mov [scale + Variant_t.type], eax
  mov [imm + Variant_t.type], eax
  mov [rel8 + Variant_t.type], eax
  mov [finalOpcode + Variant_t.type], eax
  mov [__cse0 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ opcodeInfo ]
  call __MOLD_VariantDestroy

  lea  rcx, [ handlerId ]
  call __MOLD_VariantDestroy

  lea  rcx, [ syntaxId ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ encoder ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1662 ]
  lea rdx, [ __literal69 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1663

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ mnemonic ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1666 ], 0

  lea  rcx , [ mnemonic ]
  lea  rdx , [ tmp1666 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp1662 ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1667

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__processFPU$1

  jmp l1668

l1667:

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ opcodeInfo ]
  call  __MOLD_VariantLoadFromKey

  cmp [ opcodeInfo  + Variant_t.type], 0
  jz l1670

  mov dword [ tmp1666 ], 16777215

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ opcodeInfo ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ tmp1662 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1662 + Variant_t.value]
  mov dword [ opcode ], eax

  mov rax, 4278190080
  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1662 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ opcodeInfo ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ handlerId ]
  call qword [rbx + 8 * 35 ]

  mov rax, 4026531840
  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1662 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ opcodeInfo ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ syntaxId ]
  call qword [rbx + 8 * 35 ]

  lea  rcx , [ item ]
  lea  rdx , [ __literal53 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1662 + Variant_t.value]
  mov dword [ reg ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal62 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1662 + Variant_t.value]
  mov dword [ rm ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal49 ]
  lea  r8 , [ regBase ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ regIndex ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal51 ]
  lea  r8 , [ disp ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal42 ]
  lea  r8 , [ scale ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ imm ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1662 + Variant_t.value]
  mov dword [ dataSize ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal65 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1662 + Variant_t.value]
  mov dword [ numberOfOperands ], eax

  mov dword [ tmp1666 ], 0

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ syntaxId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1674

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 0

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1672 ]
  call  __X64Translator__validateNumberOfOperands$2

  jmp l1675

l1674:

  mov dword [ tmp1666 ], 268435456

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx, [ syntaxId ]
  lea rdx, [ tmp1672 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1677

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1672 + Variant_t.value], rax

  mov dword [ tmp1666 ], 1

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ tmp1662 ]
  call  __X64Translator__validateNumberOfOperands$2

  jmp l1678

l1677:

  mov dword [ tmp1666 ], 1073741824

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ syntaxId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1680

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 1

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1672 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  jmp l1681

l1680:

  mov dword [ tmp1666 ], 536870912

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx, [ syntaxId ]
  lea rdx, [ tmp1672 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1683

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1672 + Variant_t.value], rax

  mov dword [ tmp1666 ], 2

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ tmp1662 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  mov edx , dword [ reg ]
  mov r8d , dword [ rm ]
  mov r9d , dword [ dataSize ]
  lea rax, [ imm ]
  push rax
  call  __X64Translator__validateOperandSizes$4
  add rsp, 8

  lea rcx , [ this ]
  mov edx , dword [ reg ]
  mov r8d , dword [ rm ]
  mov r9d , dword [ dataSize ]
  lea rax, [ imm ]
  push rax
  call  __X64Translator__validateImmRange$4
  add rsp, 8

  jmp l1684

l1683:

  mov dword [ tmp1666 ], 805306368

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ syntaxId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1686

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 2

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1672 ]
  call  __X64Translator__validateNumberOfOperands$2

l1686:

l1687:

l1684:

l1681:

l1678:

l1675:

  mov dword [ tmp1673 ], 0

  cmp [ imm  + Variant_t.type], 0
  jz l1688

  mov dword [ tmp1666 ], 136

  mov dword [ tmp1673 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1666 ]
  setnz byte [ tmp1673 ]

l1688:

  cmp dword [ tmp1673 ], 0
  jz l1689

  mov dword [ tmp1666 ], -2147483647

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  mov rax, 4294967295
  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1672 ]
  lea r9 , [ tmp1662 ]
  call  __X64Translator__failIfOutOfRange$3

l1689:

l1690:

  mov dword [ tmp1666 ], 0

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1691

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3979
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3979:


  jmp l1692

l1691:

  mov dword [ tmp1666 ], 16777216

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1693

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3980
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3980:


  jmp l1694

l1693:

  mov dword [ tmp1666 ], 33554432

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1695

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ tmp1662 ]
  lea  rax , [ tmp1697 ]
  call  hex

  lea rcx, [__fmt0 ]
  call __MOLD_PrintFormatFromMemory

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1698 ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1672 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3981
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3981:


  mov dword [ tmp1700 ], 256

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp1700 ]
  cdq
  idiv ecx
  mov  dword [ tmp1666 ], eax

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3982
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3982:


  jmp l1696

l1695:

  mov dword [ tmp1666 ], 50331648

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1701

  mov dword [ tmp1666 ], 15

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3983
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3983:


  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3984
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3984:


  jmp l1702

l1701:

  mov dword [ tmp1666 ], 1073741824

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1703

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jnz l1706

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 12
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3985
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3985:

  add rsp, 24

  jmp l1707

l1706:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 13
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3986
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3986:


l1707:

  jmp l1704

l1703:

  mov dword [ tmp1666 ], 536870912

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1708

  lea rcx , [ this ]
  mov edx , dword [ opcode ]
  lea r8 , [ item ]
  call  __X64Translator_emitCoreALU2$2

  jmp l1709

l1708:

  mov dword [ tmp1666 ], 553648128

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1711

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIf8BitOperandIsUsed$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ item ]
  call  __X64Translator_emitCore_x_y$2

  jmp l1712

l1711:

  mov dword [ tmp1666 ], 268435456

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1714

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1698 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ imm ]
  lea  rdx , [ tmp1698 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantSub

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 14
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3987
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3987:


  jmp l1715

l1714:

  mov dword [ tmp1666 ], 285212672

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1717

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ imm ]
  lea  rdx , [ tmp1699 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantSub

  mov dword [ tmp1666 ], 2

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea  rcx , [ tmp1662 ]
  lea  rdx , [ tmp1699 ]
  lea  r8 , [ rel8 ]
  call  __MOLD_VariantSub

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ rel8 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 15
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3988
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l3988:


  jmp l1718

l1717:

  mov dword [ tmp1666 ], 301989888

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1699 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1720

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ imm ]
  lea  rdx , [ tmp1662 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantSub

  mov dword [ tmp1666 ], 3

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea  rcx , [ tmp1699 ]
  lea  rdx , [ tmp1662 ]
  lea  r8 , [ rel8 ]
  call  __MOLD_VariantSub

  mov dword [ tmp1666 ], 103

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3989
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3989:


  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ rel8 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 15
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3990
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3990:


  jmp l1721

l1720:

  mov dword [ tmp1666 ], 805306368

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1723

  mov dword [ regCL ], -1

  cmp [ scale  + Variant_t.type], 0
  jz l1726

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryRead$1

  cmp [ imm  + Variant_t.type], 0
  jz l1729

  mov dword [ tmp1666 ], -127

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ tmp1699 ]
  call  __X64Translator__failIfOutOfRange$3

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  lea rax, [ tmp1672 ]
  push rax
  lea  rax , [ tmp1699 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3991
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l3991:

  add rsp, 32

  jmp l1730

l1729:

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1662 ]
  push rax
  lea  rax , [ tmp1699 ]
  mov  r10d, 17
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3992
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l3992:

  add rsp, 24

  mov eax, dword [ reg ]
  mov dword [ regCL ], eax

l1730:

  jmp l1727

l1726:

  cmp [ imm  + Variant_t.type], 0
  jz l1731

  mov dword [ tmp1666 ], -127

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1699 ]
  lea r9 , [ tmp1662 ]
  call  __X64Translator__failIfOutOfRange$3

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1672 ]
  lea r9 , [ imm ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 18
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3993
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3993:


  jmp l1732

l1731:

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 19
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3994
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3994:


  mov eax, dword [ rm ]
  mov dword [ regCL ], eax

l1732:

l1727:

  mov dword [ tmp1725 ], 0

  mov dword [ tmp1666 ], -1

  mov eax, dword [ regCL ]
  cmp eax, dword [ tmp1666 ]
  jz l1733

  mov dword [ tmp1666 ], 1

  mov dword [ tmp1725 ], 0
  mov ecx, dword [ regCL ]
  cmp ecx, dword [ tmp1666 ]
  setnz byte [ tmp1725 ]

l1733:

  cmp dword [ tmp1725 ], 0
  jz l1734

  lea  rcx, [ tmp1736 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal544 ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ tmp1736 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1736 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1697 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1697 ]
  call  __X64Translator__error$1

l1734:

l1735:

  jmp l1724

l1723:

  mov dword [ tmp1666 ], 1124073472

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1737

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfNon8BitOperandIsUsed$1

  cmp [ scale  + Variant_t.type], 0
  jz l1739

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3995
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3995:

  add rsp, 16

  jmp l1740

l1739:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1672 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 21
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3996
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l3996:


l1740:

  jmp l1738

l1737:

  mov dword [ tmp1666 ], 822083584

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1741

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  cmp [ scale  + Variant_t.type], 0
  jz l1744

  mov dword [ tmp1746 ], 1

  mov dword [ tmp1666 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1666 ]
  jg l1747

  mov dword [ tmp1700 ], 16

  mov  eax, dword [ reg ]
  mov  ecx, dword [ tmp1700 ]
  cdq
  idiv ecx
  mov  dword [ tmp1666 ], eax

  mov dword [ tmp1749 ], 1

  mov eax, dword [ dataSize ]
  sub eax, dword [ tmp1749 ]
  mov dword [ tmp1700 ], eax

  mov dword [ tmp1746 ], 0
  mov ecx, dword [ tmp1666 ]
  cmp ecx, dword [ tmp1700 ]
  setle byte [ tmp1746 ]

l1747:

  cmp dword [ tmp1746 ], 0
  jz l1750

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1750:

l1751:

  mov dword [ tmp1700 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1700 ]
  jnz l1752

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1700 ], 256

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1700 ]
  mov [ tmp1672 + Variant_t.value], rax

  ; __mold_syscall( 36 )
  lea rcx , [ tmp1662 ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ finalOpcode ]
  call qword [rbx + 8 * 36 ]

  jmp l1753

l1752:

  mov [ finalOpcode + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ finalOpcode + Variant_t.value], rax

l1753:

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ finalOpcode ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1672 ]
  mov  r10d, 22
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3997
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l3997:

  add rsp, 24

  jmp l1745

l1744:

  mov dword [ tmp1746 ], 1

  mov dword [ tmp1700 ], 32

  mov eax, dword [ rm ]
  cmp eax, dword [ tmp1700 ]
  jge l1754

  mov dword [ tmp1666 ], 16

  mov  eax, dword [ reg ]
  mov  ecx, dword [ tmp1666 ]
  cdq
  idiv ecx
  mov  dword [ tmp1700 ], eax

  mov dword [ tmp1749 ], 16

  mov  eax, dword [ rm ]
  mov  ecx, dword [ tmp1749 ]
  cdq
  idiv ecx
  mov  dword [ tmp1666 ], eax

  mov dword [ tmp1746 ], 0
  mov ecx, dword [ tmp1700 ]
  cmp ecx, dword [ tmp1666 ]
  setle byte [ tmp1746 ]

l1754:

  cmp dword [ tmp1746 ], 0
  jz l1755

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1755:

l1756:

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1699 ]
  lea r9 , [ tmp1698 ]
  lea  rax , [ tmp1672 ]
  mov  r10d, 23
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3998
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l3998:


l1745:

  jmp l1742

l1741:

  mov dword [ tmp1666 ], 570425344

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1672 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1757

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIf8BitOperandIsUsed$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryRead$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  lea rcx , [ this ]
  mov edx , dword [ opcode ]
  lea r8 , [ item ]
  call  __X64Translator_emitCoreALU2$2

  jmp l1758

l1757:

  mov dword [ tmp1666 ], 587202560

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1672 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1759

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryRead$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  lea rcx , [ this ]
  mov edx , dword [ opcode ]
  lea r8 , [ item ]
  call  __X64Translator_emitCoreALU2$2

  jmp l1760

l1759:

  mov rax, 4261412864
  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1672 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1761

  mov dword [ tmp1666 ], 855638016

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1672 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1764

  mov dword [ tmp1666 ], 136

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1767

  cmp [ imm  + Variant_t.type], 0
  jz l1770

  lea rcx , [ this ]
  mov edx , dword [ reg ]
  mov r8d , dword [ rm ]
  mov r9d , dword [ dataSize ]
  lea rax, [ imm ]
  push rax
  call  __X64Translator__validateImmRange$4
  add rsp, 8

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1773

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ imm ]
  lea  rax , [ tmp1672 ]
  mov  r10d, 24
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l3999
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l3999:


  jmp l1774

l1773:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  lea rax, [ tmp1698 ]
  push rax
  lea  rax , [ tmp1672 ]
  mov  r10d, 25
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4000
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l4000:

  add rsp, 24

l1774:

  jmp l1771

l1770:

  lea rcx , [ this ]
  mov edx , dword [ opcode ]
  lea r8 , [ item ]
  call  __X64Translator_emitCoreALU2$2

l1771:

  jmp l1768

l1767:

  mov dword [ tmp1666 ], 141

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1775

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1777 ]
  call  X64_IsReg8

  mov dword [ tmp1778 ], 1

  mov eax, dword [ tmp1777 ]
  cmp eax, dword [ tmp1778 ]
  jnz l1779

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1779:

l1780:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1672 ]
  mov  r10d, 26
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4001
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l4001:

  add rsp, 16

  jmp l1776

l1775:

  mov dword [ tmp1666 ], 132

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1781

  cmp [ imm  + Variant_t.type], 0
  jz l1783

  lea rcx , [ this ]
  mov edx , dword [ reg ]
  mov r8d , dword [ rm ]
  mov r9d , dword [ dataSize ]
  lea rax, [ imm ]
  push rax
  call  __X64Translator__validateImmRange$4
  add rsp, 8

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1785

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ imm ]
  lea  rax , [ tmp1672 ]
  mov  r10d, 27
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4002
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l4002:


  jmp l1786

l1785:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  lea rax, [ tmp1698 ]
  push rax
  lea  rax , [ tmp1672 ]
  mov  r10d, 28
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4003
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l4003:

  add rsp, 24

l1786:

  jmp l1784

l1783:

  mov dword [ tmp1777 ], 1

  mov eax, dword [ tmp1777 ]
  mov [ tmp1672 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1672 + Variant_t.value], rax

  lea  rcx , [ item ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  mov edx , dword [ opcode ]
  lea r8 , [ item ]
  call  __X64Translator_emitCoreALU2$2

l1784:

  jmp l1782

l1781:

  mov dword [ tmp1666 ], 134

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1787

  lea rcx , [ this ]
  mov edx , dword [ reg ]
  mov r8d , dword [ rm ]
  mov r9d , dword [ dataSize ]
  lea rax, [ imm ]
  push rax
  call  __X64Translator__validateOperandSizes$4
  add rsp, 8

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1777 ], 0

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1789

  mov dword [ tmp1666 ], -1

  mov dword [ tmp1777 ], 0
  mov ecx, dword [ rm ]
  cmp ecx, dword [ tmp1666 ]
  setnz byte [ tmp1777 ]

l1789:

  cmp dword [ tmp1777 ], 0
  jz l1791

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1699 ]
  lea  rax , [ tmp1672 ]
  mov  r10d, 29
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4004
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l4004:


  jmp l1792

l1791:

  mov dword [ tmp1790 ], 0

  mov eax, dword [ tmp1790 ]
  mov [ tmp1672 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1672 + Variant_t.value], rax

  lea  rcx , [ item ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  mov edx , dword [ opcode ]
  lea r8 , [ item ]
  call  __X64Translator_emitCoreALU2$2

l1792:

  jmp l1788

l1787:

  mov dword [ tmp1666 ], 230

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1793

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryReadOrWrite$1

  cmp [ imm  + Variant_t.type], 0
  jz l1795

  mov dword [ tmp1666 ], 0

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1672 ]
  lea r9 , [ tmp1699 ]
  call  __X64Translator__failIfOutOfRange$3

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1672 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 30
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4005
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4005:


  jmp l1796

l1795:

  mov eax, dword [ reg ]
  cmp eax, dword [ X64_DX ]
  jnz l1798

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1672 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4006
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4006:


  jmp l1799

l1798:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal545
  lea rdx , [ __literal545 ]
  call  __X64Translator__error$1

l1799:

l1796:

  jmp l1794

l1793:

  mov dword [ tmp1666 ], 228

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1800

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryReadOrWrite$1

  cmp [ imm  + Variant_t.type], 0
  jz l1802

  mov dword [ tmp1666 ], 0

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1699 ]
  lea r9 , [ tmp1672 ]
  call  __X64Translator__failIfOutOfRange$3

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ imm ]
  lea  rax , [ tmp1672 ]
  mov  r10d, 32
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4007
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l4007:


  jmp l1803

l1802:

  mov eax, dword [ rm ]
  cmp eax, dword [ X64_DX ]
  jnz l1805

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1672 ]
  mov  r10d, 33
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4008
  movsxd rax, dword [ tmp1672 + Variant_t.value ]
  mov    qword [ tmp1672 + Variant_t.value ], rax
l4008:


  jmp l1806

l1805:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal546
  lea rdx , [ __literal546 ]
  call  __X64Translator__error$1

l1806:

l1803:

  jmp l1801

l1800:

  mov dword [ tmp1666 ], 783

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1807

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIf8BitOperandIsUsed$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1804 ], 0

  cmp [ scale  + Variant_t.type], 0
  jz l1809

  mov dword [ tmp1666 ], 2

  mov dword [ tmp1804 ], 0
  mov ecx, dword [ dataSize ]
  cmp ecx, dword [ tmp1666 ]
  setnz byte [ tmp1804 ]

l1809:

  cmp dword [ tmp1804 ], 0
  jz l1811

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1811:

l1812:

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ item ]
  call  __X64Translator_emitCore_x_y$2

  jmp l1808

l1807:

  mov dword [ tmp1666 ], 99

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1813

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1810 ], 1

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1817 ]
  call  X64_IsReg64

  mov dword [ tmp1818 ], 0

  mov eax, dword [ tmp1817 ]
  cmp eax, dword [ tmp1818 ]
  jz l1815

  mov dword [ tmp1816 ], 1

  mov dword [ tmp1818 ], 0

  mov dword [ tmp1666 ], -1

  mov eax, dword [ rm ]
  cmp eax, dword [ tmp1666 ]
  jz l1820

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1821 ]
  call  X64_IsReg32

  mov dword [ tmp1822 ], 0

  mov dword [ tmp1818 ], 0
  mov ecx, dword [ tmp1821 ]
  cmp ecx, dword [ tmp1822 ]
  setz byte [ tmp1818 ]

l1820:

  cmp dword [ tmp1818 ], 0
  jnz l1819

  mov dword [ tmp1818 ], 0

  mov dword [ tmp1666 ], -1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1666 ]
  jz l1823

  mov dword [ tmp1666 ], 4

  mov dword [ tmp1818 ], 0
  mov ecx, dword [ dataSize ]
  cmp ecx, dword [ tmp1666 ]
  setnz byte [ tmp1818 ]

l1823:

  mov eax, dword [ tmp1818 ]
  mov dword [ tmp1816 ], eax

l1819:

  mov eax, dword [ tmp1816 ]
  mov dword [ tmp1810 ], eax

l1815:

  cmp dword [ tmp1810 ], 0
  jz l1824

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1824:

l1825:

  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1672 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1672 ]
  lea r8 , [ item ]
  call  __X64Translator_emitCore_x_y$2

  jmp l1814

l1813:

  mov dword [ tmp1666 ], 200

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1826

  mov dword [ tmp1816 ], 1

  cmp [ imm  + Variant_t.type], 0
  jz l1828

  lea  rcx , [ item ]
  lea  rdx , [ __literal56 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1672  + Variant_t.type], 0
  setz al
  mov dword [ tmp1816 ], eax

l1828:

  cmp dword [ tmp1816 ], 0
  jz l1829

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal547
  lea rdx , [ __literal547 ]
  call  __X64Translator__error$1

l1829:

l1830:

  mov dword [ tmp1666 ], 0

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  mov dword [ tmp1666 ], 65535

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1699 ]
  lea r9 , [ tmp1698 ]
  call  __X64Translator__failIfOutOfRange$3

  lea  rcx , [ item ]
  lea  rdx , [ __literal56 ]
  lea  r8 , [ __cse0 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1666 ], 0

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ __cse0 ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ tmp1699 ]
  call  __X64Translator__failIfOutOfRange$3

  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea r8 , [ __cse0 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 34
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4009
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4009:


  jmp l1827

l1826:

  mov dword [ tmp1666 ], 28175

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1831

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1818 ], 0

  mov dword [ tmp1817 ], 0

  cmp [ scale  + Variant_t.type], 0
  jz l1834

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1821 ]
  call  X64_IsRegMM

  mov dword [ tmp1835 ], 1

  mov dword [ tmp1817 ], 0
  mov ecx, dword [ tmp1821 ]
  cmp ecx, dword [ tmp1835 ]
  setz byte [ tmp1817 ]

l1834:

  cmp dword [ tmp1817 ], 0
  jz l1833

  mov dword [ tmp1666 ], 4

  mov dword [ tmp1818 ], 0
  mov ecx, dword [ dataSize ]
  cmp ecx, dword [ tmp1666 ]
  setz byte [ tmp1818 ]

l1833:

  cmp dword [ tmp1818 ], 0
  jz l1836

  lea  rcx , [ item ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1822 ], 1

  mov eax, dword [ tmp1822 ]
  mov [ tmp1698 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx, [ tmp1699 ]
  lea rdx, [ tmp1698 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1838

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1698 ]
  mov  r10d, 35
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4010
  movsxd rax, dword [ tmp1698 + Variant_t.value ]
  mov    qword [ tmp1698 + Variant_t.value ], rax
l4010:

  add rsp, 16

  jmp l1839

l1838:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1698 ]
  mov  r10d, 36
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4011
  movsxd rax, dword [ tmp1698 + Variant_t.value ]
  mov    qword [ tmp1698 + Variant_t.value ], rax
l4011:

  add rsp, 16

l1839:

  jmp l1837

l1836:

  mov dword [ tmp1817 ], 0

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1835 ]
  call  X64_IsReg32

  mov dword [ tmp1821 ], 1

  mov eax, dword [ tmp1835 ]
  cmp eax, dword [ tmp1821 ]
  jnz l1840

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1821 ]
  call  X64_IsRegMM

  mov dword [ tmp1835 ], 1

  mov dword [ tmp1817 ], 0
  mov ecx, dword [ tmp1821 ]
  cmp ecx, dword [ tmp1835 ]
  setz byte [ tmp1817 ]

l1840:

  cmp dword [ tmp1817 ], 0
  jz l1841

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1662 ]
  lea  rax , [ tmp1698 ]
  mov  r10d, 37
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4012
  movsxd rax, dword [ tmp1698 + Variant_t.value ]
  mov    qword [ tmp1698 + Variant_t.value ], rax
l4012:


  jmp l1842

l1841:

  mov dword [ tmp1822 ], 0

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1821 ]
  call  X64_IsRegMM

  mov dword [ tmp1844 ], 1

  mov eax, dword [ tmp1821 ]
  cmp eax, dword [ tmp1844 ]
  jnz l1843

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1844 ]
  call  X64_IsReg32

  mov dword [ tmp1821 ], 1

  mov dword [ tmp1822 ], 0
  mov ecx, dword [ tmp1844 ]
  cmp ecx, dword [ tmp1821 ]
  setz byte [ tmp1822 ]

l1843:

  cmp dword [ tmp1822 ], 0
  jz l1845

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1699 ]
  lea  rax , [ tmp1698 ]
  mov  r10d, 38
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4013
  movsxd rax, dword [ tmp1698 + Variant_t.value ]
  mov    qword [ tmp1698 + Variant_t.value ], rax
l4013:


  jmp l1846

l1845:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1846:

l1842:

l1837:

  jmp l1832

l1831:

  mov dword [ tmp1666 ], 28431

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1847

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1817 ], 0

  mov dword [ tmp1822 ], 0

  cmp [ scale  + Variant_t.type], 0
  jz l1850

  mov dword [ tmp1666 ], 8

  mov dword [ tmp1822 ], 0
  mov ecx, dword [ dataSize ]
  cmp ecx, dword [ tmp1666 ]
  setz byte [ tmp1822 ]

l1850:

  cmp dword [ tmp1822 ], 0
  jz l1849

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1835 ]
  call  X64_IsRegMM

  mov dword [ tmp1821 ], 1

  mov dword [ tmp1817 ], 0
  mov ecx, dword [ tmp1835 ]
  cmp ecx, dword [ tmp1821 ]
  setz byte [ tmp1817 ]

l1849:

  cmp dword [ tmp1817 ], 0
  jz l1851

  lea  rcx , [ item ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1698 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1821 ], 1

  mov eax, dword [ tmp1821 ]
  mov [ tmp1699 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx, [ tmp1698 ]
  lea rdx, [ tmp1699 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1853

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1698 ]
  push rax
  lea  rax , [ tmp1699 ]
  mov  r10d, 39
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4014
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4014:

  add rsp, 16

  jmp l1854

l1853:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1699 ]
  mov  r10d, 40
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4015
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4015:

  add rsp, 16

l1854:

  jmp l1852

l1851:

  mov dword [ tmp1822 ], 0

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1835 ]
  call  X64_IsRegMM

  mov dword [ tmp1844 ], 1

  mov eax, dword [ tmp1835 ]
  cmp eax, dword [ tmp1844 ]
  jnz l1855

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1844 ]
  call  X64_IsRegMM

  mov dword [ tmp1835 ], 1

  mov dword [ tmp1822 ], 0
  mov ecx, dword [ tmp1844 ]
  cmp ecx, dword [ tmp1835 ]
  setz byte [ tmp1822 ]

l1855:

  cmp dword [ tmp1822 ], 0
  jz l1856

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1662 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 41
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4016
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4016:


  jmp l1857

l1856:

  mov dword [ tmp1821 ], 0

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1844 ]
  call  X64_IsReg64

  mov dword [ tmp1859 ], 1

  mov eax, dword [ tmp1844 ]
  cmp eax, dword [ tmp1859 ]
  jnz l1858

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1859 ]
  call  X64_IsRegMM

  mov dword [ tmp1844 ], 1

  mov dword [ tmp1821 ], 0
  mov ecx, dword [ tmp1859 ]
  cmp ecx, dword [ tmp1844 ]
  setz byte [ tmp1821 ]

l1858:

  cmp dword [ tmp1821 ], 0
  jz l1860

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1698 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 42
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4017
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4017:


  jmp l1861

l1860:

  mov dword [ tmp1835 ], 0

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1859 ]
  call  X64_IsRegMM

  mov dword [ tmp1863 ], 1

  mov eax, dword [ tmp1859 ]
  cmp eax, dword [ tmp1863 ]
  jnz l1862

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1863 ]
  call  X64_IsReg64

  mov dword [ tmp1859 ], 1

  mov dword [ tmp1835 ], 0
  mov ecx, dword [ tmp1863 ]
  cmp ecx, dword [ tmp1859 ]
  setz byte [ tmp1835 ]

l1862:

  cmp dword [ tmp1835 ], 0
  jz l1864

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1662 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 43
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4018
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4018:


  jmp l1865

l1864:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1865:

l1861:

l1857:

l1852:

l1847:

l1848:

l1832:

l1827:

l1814:

l1808:

l1801:

l1794:

l1788:

l1782:

l1776:

l1768:

  jmp l1765

l1764:

  mov dword [ tmp1666 ], 318767104

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1699 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1866

  mov dword [ tmp1666 ], 80

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1868

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1870

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 44
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4019
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4019:


  jmp l1871

l1870:

  cmp [ imm  + Variant_t.type], 0
  jz l1872

  mov dword [ tmp1777 ], 0

  mov dword [ tmp1666 ], -127

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx, [ imm ]
  lea rdx, [ tmp1699 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l1874

  mov dword [ tmp1666 ], 128

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea  rcx , [ imm ]
  lea  rdx , [ tmp1699 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp1777 ], eax

l1874:

  cmp dword [ tmp1777 ], 0
  jz l1875

  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 45
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4020
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4020:


  jmp l1876

l1875:

  mov dword [ tmp1666 ], -32767

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  mov dword [ tmp1666 ], 65535

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1699 ]
  lea r9 , [ tmp1662 ]
  call  __X64Translator__failIfOutOfRange$3

  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 46
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4021
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4021:


l1876:

  jmp l1873

l1872:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 47
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4022
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4022:

  add rsp, 16

l1873:

l1871:

  jmp l1869

l1868:

  mov dword [ tmp1666 ], 88

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1877

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1879

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 48
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4023
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4023:


  jmp l1880

l1879:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 49
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4024
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4024:

  add rsp, 16

l1880:

  jmp l1878

l1877:

  mov dword [ tmp1666 ], 232

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1881

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1883

  mov dword [ tmp1790 ], 1

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1804 ]
  call  X64_IsReg8

  mov dword [ tmp1810 ], 1

  mov eax, dword [ tmp1804 ]
  cmp eax, dword [ tmp1810 ]
  jz l1885

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1810 ]
  call  X64_IsReg32

  mov dword [ tmp1804 ], 1

  mov dword [ tmp1790 ], 0
  mov ecx, dword [ tmp1810 ]
  cmp ecx, dword [ tmp1804 ]
  setz byte [ tmp1790 ]

l1885:

  cmp dword [ tmp1790 ], 0
  jz l1886

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1736 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal548 ]
  lea  rdx , [ tmp1662 ]
  lea  r8 , [ tmp1736 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1736 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1697 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1697 ]
  call  __X64Translator__error$1

l1886:

l1887:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 50
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4025
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4025:


  jmp l1884

l1883:

  cmp [ scale  + Variant_t.type], 0
  jz l1888

  mov dword [ tmp1797 ], 1

  mov dword [ tmp1666 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1666 ]
  jz l1890

  mov dword [ tmp1666 ], 4

  mov dword [ tmp1797 ], 0
  mov ecx, dword [ dataSize ]
  cmp ecx, dword [ tmp1666 ]
  setz byte [ tmp1797 ]

l1890:

  cmp dword [ tmp1797 ], 0
  jz l1891

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1736 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal548 ]
  lea  rdx , [ tmp1662 ]
  lea  r8 , [ tmp1736 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1736 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1697 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1697 ]
  call  __X64Translator__error$1

l1891:

l1892:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 51
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4026
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4026:

  add rsp, 16

  jmp l1889

l1888:

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1698 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ imm ]
  lea  rdx , [ tmp1698 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantSub

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 52
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4027
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4027:


l1889:

l1884:

  jmp l1882

l1881:

  mov dword [ tmp1666 ], 233

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1893

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1895

  mov dword [ tmp1797 ], 1

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1810 ]
  call  X64_IsReg8

  mov dword [ tmp1816 ], 1

  mov eax, dword [ tmp1810 ]
  cmp eax, dword [ tmp1816 ]
  jz l1897

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1816 ]
  call  X64_IsReg32

  mov dword [ tmp1810 ], 1

  mov dword [ tmp1797 ], 0
  mov ecx, dword [ tmp1816 ]
  cmp ecx, dword [ tmp1810 ]
  setz byte [ tmp1797 ]

l1897:

  cmp dword [ tmp1797 ], 0
  jz l1898

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1736 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal548 ]
  lea  rdx , [ tmp1662 ]
  lea  r8 , [ tmp1736 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1736 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1697 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1697 ]
  call  __X64Translator__error$1

l1898:

l1899:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 53
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4028
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4028:


  jmp l1896

l1895:

  cmp [ scale  + Variant_t.type], 0
  jz l1900

  mov dword [ tmp1804 ], 1

  mov dword [ tmp1666 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1666 ]
  jz l1902

  mov dword [ tmp1666 ], 4

  mov dword [ tmp1804 ], 0
  mov ecx, dword [ dataSize ]
  cmp ecx, dword [ tmp1666 ]
  setz byte [ tmp1804 ]

l1902:

  cmp dword [ tmp1804 ], 0
  jz l1903

  lea  rcx , [ item ]
  lea  rdx , [ __literal58 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1736 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal548 ]
  lea  rdx , [ tmp1662 ]
  lea  r8 , [ tmp1736 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1736 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1697 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1697 ]
  call  __X64Translator__error$1

l1903:

l1904:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 54
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4029
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4029:

  add rsp, 16

  jmp l1901

l1900:

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp1698 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ imm ]
  lea  rdx , [ tmp1698 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantSub

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 55
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4030
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4030:


l1901:

l1896:

  jmp l1894

l1893:

  mov dword [ tmp1666 ], 51215

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1905

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryReadOrWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1666 ], 32

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jge l1907

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1907:

l1908:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 56
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4031
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4031:


  jmp l1906

l1905:

  mov dword [ tmp1666 ], 50959

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1909

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfRegsAreUsed$1

  lea rcx, [ mnemonic ]
  lea rdx, [ __literal335 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1911

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 57
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4032
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4032:

  add rsp, 8

  jmp l1912

l1911:

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 58
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4033
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4033:

  add rsp, 8

l1912:

  jmp l1910

l1909:

  mov dword [ tmp1666 ], 64

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1913

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1915

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 59
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4034
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4034:


  jmp l1916

l1915:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 60
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4035
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4035:

  add rsp, 16

l1916:

  jmp l1914

l1913:

  mov dword [ tmp1666 ], 72

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1917

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1919

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 61
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4036
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4036:


  jmp l1920

l1919:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1699 ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 62
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4037
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4037:

  add rsp, 16

l1920:

  jmp l1918

l1917:

  mov dword [ tmp1666 ], 205

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1921

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov dword [ tmp1666 ], 0

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ tmp1699 ]
  call  __X64Translator__failIfOutOfRange$3

  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 63
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4038
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4038:


l1921:

l1922:

l1918:

l1914:

l1910:

l1906:

l1894:

l1882:

l1878:

l1869:

  jmp l1867

l1866:

  mov dword [ tmp1666 ], 872415232

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1699 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1923

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1699 ]
  call  __X64Translator__failIfNonMMReg$2

  cmp [ scale  + Variant_t.type], 0
  jz l1925

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfNon64Data$1

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1699 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4039
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4039:

  add rsp, 24

  jmp l1926

l1925:


  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1699 ]
  call  __X64Translator__failIfNonMMReg$2

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ tmp1929 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 5
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4040
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4040:


l1927:

l1928:

l1926:

  jmp l1924

l1923:

  mov dword [ tmp1666 ], 889192448

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1699 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1930

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1699 ]
  call  __X64Translator__failIfNonMMReg$2

  cmp [ imm  + Variant_t.type], 0
  jz l1932

  mov dword [ tmp1666 ], 0

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1699 ]
  lea r9 , [ tmp1929 ]
  call  __X64Translator__failIfOutOfRange$3

  mov dword [ tmp1666 ], 65536

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp1666 ]
  cdq
  idiv ecx
  mov  dword [ operationId ], eax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 4095

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1662 ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1699 ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp1666 ], 28672

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea  rcx , [ tmp1699 ]
  lea  rdx , [ tmp1698 ]
  lea  r8 , [ tmp1929 ]
  call  __MOLD_VariantAdd

  cmp [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1929 + Variant_t.value]
  mov dword [ opcode ], eax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ operationId ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1699 ]
  lea r9 , [ tmp1662 ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 5
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4041
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4041:


  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4042
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4042:


  jmp l1933

l1932:

  cmp [ scale  + Variant_t.type], 0
  jz l1934

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfNon64Data$1

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 65535

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1662 ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1929 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1929 + Variant_t.value]
  mov dword [ opcode ], eax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1929 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4043
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4043:

  add rsp, 24

  jmp l1935

l1934:


  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1929 ]
  call  __X64Translator__failIfNonMMReg$2

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 65535

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1699 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1662 ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1929 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1929 + Variant_t.value]
  mov dword [ opcode ], eax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ tmp1698 ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 5
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4044
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4044:


l1936:

l1937:

l1935:

l1933:

  jmp l1931

l1930:

  mov rax, 4244635648
  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1929 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1938

  mov dword [ tmp1666 ], 195

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1940

  mov dword [ tmp1666 ], 0

  mov eax, dword [ numberOfOperands ]
  cmp eax, dword [ tmp1666 ]
  jnz l1942

  lea rcx , [ encoder ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 64
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4045
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4045:


  jmp l1943

l1942:

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1929 + Variant_t.value], rax

  mov dword [ tmp1666 ], 1

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov dword [ tmp1666 ], 0

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 65535

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ tmp1929 ]
  call  __X64Translator__failIfOutOfRange$3

  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 65
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4046
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4046:


l1943:

  jmp l1941

l1940:

  mov dword [ tmp1666 ], 203

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1944

  mov dword [ tmp1666 ], 0

  mov eax, dword [ numberOfOperands ]
  cmp eax, dword [ tmp1666 ]
  jnz l1946

  lea rcx , [ encoder ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 66
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4047
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4047:


  jmp l1947

l1946:

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1929 + Variant_t.value], rax

  mov dword [ tmp1666 ], 1

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov dword [ tmp1666 ], 0

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 65535

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ tmp1929 ]
  call  __X64Translator__failIfOutOfRange$3

  lea rcx , [ encoder ]
  lea rdx , [ imm ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 67
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4048
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4048:


l1947:

  jmp l1945

l1944:

  mov dword [ tmp1666 ], 144

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1948

  mov dword [ tmp1666 ], 0

  mov eax, dword [ numberOfOperands ]
  cmp eax, dword [ tmp1666 ]
  jnz l1950

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1929 + Variant_t.value], rax

  mov dword [ tmp1666 ], 0

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ encoder ]
  lea  rax , [ tmp1698 ]
  mov  r10d, 68
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4049
  movsxd rax, dword [ tmp1698 + Variant_t.value ]
  mov    qword [ tmp1698 + Variant_t.value ], rax
l4049:


  jmp l1951

l1950:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 1

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1929 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIf8BitOperandIsUsed$1

  cmp [ scale  + Variant_t.type], 0
  jz l1952

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dataSize ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ tmp1698 ]
  push rax
  lea  rax , [ tmp1929 ]
  mov  r10d, 69
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4050
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4050:

  add rsp, 16

  jmp l1953

l1952:

  mov dword [ tmp1666 ], -1

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp1666 ]
  jz l1954

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 70
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4051
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4051:


l1954:

l1955:

l1953:

l1951:

  jmp l1949

l1948:

  mov dword [ tmp1666 ], 997903

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1956

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1929 + Variant_t.value], rax

  mov dword [ tmp1666 ], 3

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__failIfNonMMReg$2

  mov dword [ tmp1666 ], 0

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ tmp1929 ]
  call  __X64Translator__failIfOutOfRange$3

  cmp [ scale  + Variant_t.type], 0
  jz l1958

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfNon64Data$1

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  lea  rax , [ tmp1929 ]
  mov  r10d, 71
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4052
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4052:

  add rsp, 24

  jmp l1959

l1958:

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1929 ]
  call  __X64Translator__failIfNonMMReg$2

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ imm ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 72
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4053
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4053:


l1959:

  jmp l1957

l1956:

  mov dword [ tmp1666 ], 50447

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1960

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1929 + Variant_t.value], rax

  mov dword [ tmp1666 ], 3

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1662 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryReadOrWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1662 ]
  call  __X64Translator__failIfNonMMReg$2

  mov dword [ tmp1666 ], 0

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ tmp1929 ]
  call  __X64Translator__failIfOutOfRange$3

  mov dword [ tmp1816 ], 0

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1817 ]
  call  X64_IsReg32

  mov dword [ tmp1822 ], 0

  mov eax, dword [ tmp1817 ]
  cmp eax, dword [ tmp1822 ]
  jnz l1962

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1822 ]
  call  X64_IsReg64

  mov dword [ tmp1817 ], 0

  mov dword [ tmp1816 ], 0
  mov ecx, dword [ tmp1822 ]
  cmp ecx, dword [ tmp1817 ]
  setz byte [ tmp1816 ]

l1962:

  cmp dword [ tmp1816 ], 0
  jz l1963

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1963:

l1964:

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1662 + Variant_t.value], rax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ imm ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 73
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4054
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4054:


  jmp l1961

l1960:

  mov dword [ tmp1666 ], 50191

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1965

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1929 + Variant_t.value], rax

  mov dword [ tmp1666 ], 3

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__failIfNonMMReg$2

  mov dword [ tmp1666 ], 0

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ tmp1929 ]
  call  __X64Translator__failIfOutOfRange$3

  cmp [ scale  + Variant_t.type], 0
  jz l1967

  mov dword [ tmp1666 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp1666 ]
  jz l1969

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1969:

l1970:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  lea  rax , [ tmp1929 ]
  mov  r10d, 74
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4055
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4055:

  add rsp, 24

  jmp l1968

l1967:

  mov ecx , dword [ rm ]
  lea  rax , [ tmp1822 ]
  call  X64_IsReg32

  mov dword [ tmp1821 ], 0

  mov eax, dword [ tmp1822 ]
  cmp eax, dword [ tmp1821 ]
  jnz l1971

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1971:

l1972:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1662 ]
  lea r9 , [ imm ]
  lea  rax , [ tmp1929 ]
  mov  r10d, 75
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4056
  movsxd rax, dword [ tmp1929 + Variant_t.value ]
  mov    qword [ tmp1929 + Variant_t.value ], rax
l4056:


l1968:

  jmp l1966

l1965:

  mov dword [ tmp1666 ], 55055

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1973

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1929 + Variant_t.value], rax

  mov dword [ tmp1666 ], 2

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1662 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryReadOrWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  mov dword [ tmp1817 ], 0

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1822 ]
  call  X64_IsReg32

  mov dword [ tmp1835 ], 0

  mov eax, dword [ tmp1822 ]
  cmp eax, dword [ tmp1835 ]
  jnz l1975

  mov ecx , dword [ reg ]
  lea  rax , [ tmp1835 ]
  call  X64_IsReg64

  mov dword [ tmp1822 ], 0

  mov dword [ tmp1817 ], 0
  mov ecx, dword [ tmp1835 ]
  cmp ecx, dword [ tmp1822 ]
  setz byte [ tmp1817 ]

l1975:

  cmp dword [ tmp1817 ], 0
  jz l1976

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorBadSyntax$1

l1976:

l1977:

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1662 ]
  call  __X64Translator__failIfNonMMReg$2

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1929 + Variant_t.value], rax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1698 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 76
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4057
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4057:


  jmp l1974

l1973:

  mov dword [ tmp1666 ], 28687

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1666 ]
  jnz l1978

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ numberOfOperands ]
  mov [ tmp1662 + Variant_t.value], rax

  mov dword [ tmp1666 ], 3

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1662 ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__validateNumberOfOperands$2

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsMissing$1

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1698 ]
  call  __X64Translator__failIfNonMMReg$2

  mov dword [ tmp1666 ], 0

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1698 + Variant_t.value], rax

  mov dword [ tmp1666 ], 255

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ imm ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ tmp1662 ]
  call  __X64Translator__failIfOutOfRange$3

  cmp [ scale  + Variant_t.type], 0
  jz l1980

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfNon64Data$1

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 77
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4058
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4058:

  add rsp, 24

  jmp l1981

l1980:

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ tmp1662 ]
  call  __X64Translator__failIfNonMMReg$2

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1929 ]
  lea r9 , [ imm ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 78
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4059
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4059:


l1981:

l1978:

l1979:

l1974:

l1966:

l1961:

l1957:

l1949:

l1945:

l1941:

  jmp l1939

l1938:

  mov dword [ tmp1666 ], 838860800

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1982

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfMemoryWrite$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIf8BitOperandIsUsed$1

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIfImmIsUsed$1

  cmp [ scale  + Variant_t.type], 0
  jz l1984

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1929 + Variant_t.value], rax

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1698 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1698 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 79
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4060
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4060:

  add rsp, 24

  jmp l1985

l1984:

  mov [ tmp1698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1698 + Variant_t.value], rax

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1929 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1698 ]
  lea r8 , [ tmp1929 ]
  lea r9 , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 80
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4061
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4061:


l1985:

  jmp l1983

l1982:

  mov dword [ tmp1666 ], 1090519040

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1986

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__failIf8BitOperandIsUsed$1

  cmp [ scale  + Variant_t.type], 0
  jz l1988

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 81
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4062
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4062:

  add rsp, 16

  jmp l1989

l1988:

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1699 + Variant_t.value], rax

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1699 ]
  lea r8 , [ tmp1929 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 82
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4063
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4063:


l1989:

  jmp l1987

l1986:

  mov dword [ tmp1666 ], 1107296256

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1666 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1990

  cmp [ scale  + Variant_t.type], 0
  jz l1992

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1929 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea  rax , [ tmp1662 ]
  mov  r10d, 83
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4064
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4064:

  add rsp, 16

  jmp l1993

l1992:

  mov [ tmp1929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1929 + Variant_t.value], rax

  mov [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp1699 + Variant_t.value], rax

  lea rcx , [ encoder ]
  lea rdx , [ tmp1929 ]
  lea r8 , [ tmp1699 ]
  lea  rax , [ tmp1662 ]
  mov  r10d, 84
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4065
  movsxd rax, dword [ tmp1662 + Variant_t.value ]
  mov    qword [ tmp1662 + Variant_t.value ], rax
l4065:


l1993:

  jmp l1991

l1990:

  mov rax, 4278190080
  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1662 + Variant_t.value], rax

  lea rcx, [ handlerId ]
  lea rdx, [ tmp1662 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1994

  lea  rcx, [ tmp1736 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal549 ]
  lea  rdx , [ mnemonic ]
  lea  r8 , [ tmp1736 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1736 ]
  lea  rdx , [ __literal10 ]
  lea  r8 , [ tmp1697 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1697 ]
  call  __X64Translator__error$1

  jmp l1995

l1994:

  ; __mold_syscall( 42 )
  lea rcx , [ handlerId ]
  lea rdx , [ tmp1662 ]
  call qword [rbx + 8 * 42 ]

  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal550 ]
  lea  rdx , [ tmp1662 ]
  lea  r8 , [ tmp1697 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1697 ]
  call  __X64Translator__error$1

l1995:

l1991:

l1987:

l1983:

l1939:

l1931:

l1924:

l1867:

l1765:

l1761:

l1762:

l1760:

l1758:

l1742:

l1738:

l1724:

l1721:

l1718:

l1715:

l1712:

l1709:

l1704:

l1702:

l1696:

l1694:

l1692:

  jmp l1671

l1670:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __X64Translator__errorUnrecognizedInstruction$1

l1671:

l1668:

  jmp l1664

l1663:

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1662 ]
  lea rdx, [ __literal34 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1996

  lea  rcx , [ this ]
  lea  rdx , [ __literal29 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal35 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1699 + Variant_t.value]
  mov dword [ tmp1666 ], eax

  lea rcx , [ encoder ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4066
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4066:


  lea  rcx , [ tmp1662 ]
  lea  rdx , [ tmp1666 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l1997

l1996:

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1699 ]
  lea rdx, [ __literal74 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1998

  lea  rcx , [ item ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1699 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1699 + Variant_t.value]
  mov dword [ tmp1666 ], eax

; 
; -----------------------------
; BEGIN: switch tmp1666
; 
  mov eax, dword [ tmp1666 ]
  sub eax, 1
  cmp eax, 7
  ja l2001
  movsx rax, word [ __jmptable2002 + rax * 2]
  lea rax, [ l2001 + rax]
  jmp rax

l2003:

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4067
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4067:


  jmp l2000

l2004:

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4068
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4068:


  jmp l2000

l2005:

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 85
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4069
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4069:


  jmp l2000

l2006:

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ encoder ]
  lea rdx , [ tmp1662 ]
  lea  rax , [ tmp1699 ]
  mov  r10d, 86
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4070
  movsxd rax, dword [ tmp1699 + Variant_t.value ]
  mov    qword [ tmp1699 + Variant_t.value ], rax
l4070:


  jmp l2000

l2001:

l2000:

; 
; END: switch tmp1666
; -----------------------------
; 
l1998:

l1999:

l1997:

l1664:


  ; clean frame
  ; -----------
  lea  rcx, [ opcodeInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ handlerId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ syntaxId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ encoder ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1662 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1698 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1699 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1736 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1929 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mnemonic ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regBase ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regIndex ]
  call __MOLD_VariantDestroy
  lea  rcx, [ disp ]
  call __MOLD_VariantDestroy
  lea  rcx, [ scale ]
  call __MOLD_VariantDestroy
  lea  rcx, [ imm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rel8 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ finalOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse0 ]
  call __MOLD_VariantDestroy

  add  rsp, 592
  pop  rbp
  ret


  restore this
  restore item
  restore opcodeInfo
  restore handlerId
  restore syntaxId
  restore encoder
  restore tmp1661
  restore tmp1662
  restore tmp1665
  restore tmp1666
  restore tmp1669
  restore tmp1672
  restore tmp1673
  restore tmp1676
  restore tmp1679
  restore tmp1682
  restore tmp1685
  restore tmp1697
  restore tmp1698
  restore tmp1699
  restore tmp1700
  restore tmp1705
  restore tmp1710
  restore tmp1713
  restore tmp1716
  restore tmp1719
  restore tmp1722
  restore tmp1725
  restore tmp1728
  restore tmp1736
  restore tmp1743
  restore tmp1746
  restore tmp1748
  restore tmp1749
  restore tmp1763
  restore tmp1766
  restore tmp1769
  restore tmp1772
  restore tmp1777
  restore tmp1778
  restore tmp1790
  restore tmp1797
  restore tmp1804
  restore tmp1810
  restore tmp1816
  restore tmp1817
  restore tmp1818
  restore tmp1821
  restore tmp1822
  restore tmp1835
  restore tmp1844
  restore tmp1859
  restore tmp1863
  restore tmp1929
  restore mnemonic
  restore opcode
  restore reg
  restore rm
  restore regBase
  restore regIndex
  restore disp
  restore scale
  restore imm
  restore dataSize
  restore numberOfOperands
  restore rel8
  restore regCL
  restore finalOpcode
  restore __cse0
  restore operationId

; -----------------------------------------------
; function __X64Translator_getCurrentPosition$0
; -----------------------------------------------
__X64Translator_getCurrentPosition$0_vcall:
__X64Translator_getCurrentPosition$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp2007 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2007 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2007 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2007 ]
  lea  rax , [ rv ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4071
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l4071:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp2007 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp2007

; -----------------------------------------------
; function __X64Encoder_constructor$0
; -----------------------------------------------
__X64Encoder_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  tmp2009 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2008 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2009 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2008 ], 0

  mov eax, dword [ tmp2008 ]
  mov [ tmp2009 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2009 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2009 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2009 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2008
  restore tmp2009

; -----------------------------------------------
; function __X64Encoder_emitByte$1
; -----------------------------------------------
__X64Encoder_emitByte$1_vcall:
__X64Encoder_emitByte$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2010 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2011 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp2010 + Variant_t.type], eax
  mov [tmp2011 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2011 ]
  lea rdx , [ x ]
  lea  rax , [ tmp2010 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4072
  movsxd rax, dword [ tmp2010 + Variant_t.value ]
  mov    qword [ tmp2010 + Variant_t.value ], rax
l4072:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp2010
  restore tmp2011

; -----------------------------------------------
; function __X64Encoder_emitWord$1
; -----------------------------------------------
__X64Encoder_emitWord$1_vcall:
__X64Encoder_emitWord$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2012 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2013 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp2012 + Variant_t.type], eax
  mov [tmp2013 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2013 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2013 ]
  lea rdx , [ x ]
  lea  rax , [ tmp2012 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4073
  movsxd rax, dword [ tmp2012 + Variant_t.value ]
  mov    qword [ tmp2012 + Variant_t.value ], rax
l4073:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp2012 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp2012
  restore tmp2013

; -----------------------------------------------
; function __X64Encoder_emitDword$1
; -----------------------------------------------
__X64Encoder_emitDword$1_vcall:
__X64Encoder_emitDword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2014 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2015 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp2014 + Variant_t.type], eax
  mov [tmp2015 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2015 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2015 ]
  lea rdx , [ x ]
  lea  rax , [ tmp2014 ]
  mov  r10d, 85
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4074
  movsxd rax, dword [ tmp2014 + Variant_t.value ]
  mov    qword [ tmp2014 + Variant_t.value ], rax
l4074:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp2014 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2015 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp2014
  restore tmp2015

; -----------------------------------------------
; function __X64Encoder_emitQword$1
; -----------------------------------------------
__X64Encoder_emitQword$1_vcall:
__X64Encoder_emitQword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2016 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2017 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp2016 + Variant_t.type], eax
  mov [tmp2017 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2017 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2017 ]
  lea rdx , [ x ]
  lea  rax , [ tmp2016 ]
  mov  r10d, 86
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4075
  movsxd rax, dword [ tmp2016 + Variant_t.value ]
  mov    qword [ tmp2016 + Variant_t.value ], rax
l4075:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp2016 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2017 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp2016
  restore tmp2017

; -----------------------------------------------
; function __X64Encoder_emitModRegRM$3
; -----------------------------------------------
__X64Encoder_emitModRegRM$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2018 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2019 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2021 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  addressMode EQU rbp - 76 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 80 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 1 , readHits= 2 )
  rm EQU rbp - 84 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp2020 EQU rbp - 88 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp2022 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2023 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2024 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2025 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ addressMode ], edx
  mov dword [ reg ], r8d
  mov dword [ rm ], r9d
  xor eax, eax
  mov [tmp2018 + Variant_t.type], eax
  mov [tmp2019 + Variant_t.type], eax
  mov [tmp2021 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2019 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp2019 + Variant_t.value], rax

  mov dword [ tmp2020 ], 7

  mov [ tmp2021 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2020 ]
  mov [ tmp2021 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2019 ]
  lea rdx , [ tmp2021 ]
  lea r8 , [ tmp2018 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp2018 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2018 + Variant_t.value]
  mov dword [ reg ], eax

  mov [ tmp2021 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp2021 + Variant_t.value], rax

  mov dword [ tmp2020 ], 7

  mov [ tmp2019 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2020 ]
  mov [ tmp2019 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2021 ]
  lea rdx , [ tmp2019 ]
  lea r8 , [ tmp2018 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp2018 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2018 + Variant_t.value]
  mov dword [ rm ], eax

  mov dword [ tmp2024 ], 64

  mov eax, dword [ addressMode ]
  imul eax, dword [ tmp2024 ]
  mov dword [ tmp2023 ], eax

  mov dword [ tmp2025 ], 8

  mov eax, dword [ reg ]
  imul eax, dword [ tmp2025 ]
  mov dword [ tmp2024 ], eax

  mov eax, dword [ tmp2023 ]
  add eax, dword [ tmp2024 ]
  mov dword [ tmp2022 ], eax

  mov eax, dword [ tmp2022 ]
  add eax, dword [ rm ]
  mov dword [ tmp2020 ], eax

  mov [ tmp2018 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2020 ]
  mov [ tmp2018 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2018 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2018 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2019 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2021 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore addressMode
  restore reg
  restore rm
  restore tmp2018
  restore tmp2019
  restore tmp2020
  restore tmp2021
  restore tmp2022
  restore tmp2023
  restore tmp2024
  restore tmp2025

; -----------------------------------------------
; function __X64Encoder_emitPrimaryOpcode$3
; -----------------------------------------------
__X64Encoder_emitPrimaryOpcode$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2030 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcodeMask EQU rbp - 44 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  direct EQU rbp - 48 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  size EQU rbp - 52 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2026 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2027 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2028 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2029 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcodeMask ], edx
  mov dword [ direct ], r8d
  mov dword [ size ], r9d
  xor eax, eax
  mov [tmp2030 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2029 ], 2

  mov eax, dword [ direct ]
  imul eax, dword [ tmp2029 ]
  mov dword [ tmp2028 ], eax

  mov eax, dword [ opcodeMask ]
  add eax, dword [ tmp2028 ]
  mov dword [ tmp2027 ], eax

  mov eax, dword [ tmp2027 ]
  add eax, dword [ size ]
  mov dword [ tmp2026 ], eax

  mov [ tmp2030 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2026 ]
  mov [ tmp2030 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2030 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2030 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore opcodeMask
  restore direct
  restore size
  restore tmp2026
  restore tmp2027
  restore tmp2028
  restore tmp2029
  restore tmp2030

; -----------------------------------------------
; function __X64Encoder_emitPrefix16$0
; -----------------------------------------------
__X64Encoder_emitPrefix16$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2032 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2031 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2032 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2031 ], 102

  mov [ tmp2032 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2031 ]
  mov [ tmp2032 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2032 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2032 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2031
  restore tmp2032

; -----------------------------------------------
; function __X64Encoder_emitPrefix64$0
; -----------------------------------------------
__X64Encoder_emitPrefix64$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2034 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2033 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2034 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2033 ], 72

  mov [ tmp2034 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2033 ]
  mov [ tmp2034 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2034 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2034 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2033
  restore tmp2034

; -----------------------------------------------
; function __X64Encoder_emitSizePrefixIfNeeded$1
; -----------------------------------------------
__X64Encoder_emitSizePrefixIfNeeded$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2035 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2036 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2037 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2038 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2041 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0

  ; code
  ; ----

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2037 ], eax

  mov ecx , dword [ tmp2037 ]
  lea  rax , [ tmp2036 ]
  call  X64_IsReg16

  mov dword [ tmp2038 ], 1

  mov eax, dword [ tmp2036 ]
  cmp eax, dword [ tmp2038 ]
  jnz l2039

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2040

l2039:

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2037 ], eax

  mov ecx , dword [ tmp2037 ]
  lea  rax , [ tmp2036 ]
  call  X64_IsReg64

  mov dword [ tmp2041 ], 1

  mov eax, dword [ tmp2036 ]
  cmp eax, dword [ tmp2041 ]
  jnz l2042

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

l2042:

l2043:

l2040:


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2035
  restore tmp2036
  restore tmp2037
  restore tmp2038
  restore tmp2041

; -----------------------------------------------
; function __X64Encoder_emitCore$4
; -----------------------------------------------
__X64Encoder_emitCore$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 7 )
  mode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  rm EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2048 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp2049 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2050 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  opcode EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 7 )
  tmp2044 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2045 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 8 , readHits= 8 )
  tmp2051 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2052 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2055 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2058 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcode ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ mode ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ reg ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ rm ], xmm0
  xor eax, eax
  mov [tmp2048 + Variant_t.type], eax
  mov [tmp2049 + Variant_t.type], eax
  mov [tmp2050 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ reg ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2045 ], 65535

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2045 ]
  jle l2046

  mov [ tmp2049 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2049 + Variant_t.value], rax

  mov dword [ tmp2045 ], 65535

  mov [ tmp2050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2045 ]
  mov [ tmp2050 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2049 ]
  lea rdx , [ tmp2050 ]
  lea r8 , [ tmp2048 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  lea rdx , [ tmp2048 ]
  call  __X64Encoder_emitWord$1

  mov dword [ tmp2051 ], 65536

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp2051 ]
  cdq
  idiv ecx
  mov  dword [ tmp2045 ], eax

  mov [ tmp2048 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2045 ]
  mov [ tmp2048 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2048 ]
  call  __X64Encoder_emitByte$1

  jmp l2047

l2046:

  mov dword [ tmp2045 ], 255

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2045 ]
  jle l2053

  mov [ tmp2050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2050 + Variant_t.value], rax

  mov dword [ tmp2045 ], 65535

  mov [ tmp2049 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2045 ]
  mov [ tmp2049 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2050 ]
  lea rdx , [ tmp2049 ]
  lea r8 , [ tmp2048 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  lea rdx , [ tmp2048 ]
  call  __X64Encoder_emitWord$1

  mov dword [ tmp2045 ], 14351

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2045 ]
  jnz l2056

  mov dword [ tmp2045 ], 0

  mov [ tmp2048 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2045 ]
  mov [ tmp2048 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2048 ]
  call  __X64Encoder_emitByte$1

l2056:

l2057:

  jmp l2054

l2053:

  mov [ tmp2048 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2048 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2048 ]
  call  __X64Encoder_emitByte$1

l2054:

l2047:

  cmp [ mode + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ mode + Variant_t.value]
  mov dword [ tmp2045 ], eax

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2051 ], eax

  cmp [ rm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rm + Variant_t.value]
  mov dword [ tmp2058 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2045 ]
  mov r8d , dword [ tmp2051 ]
  mov r9d , dword [ tmp2058 ]
  call  __X64Encoder_emitModRegRM$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2048 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2050 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore opcode
  restore mode
  restore reg
  restore rm
  restore tmp2044
  restore tmp2045
  restore tmp2048
  restore tmp2049
  restore tmp2050
  restore tmp2051
  restore tmp2052
  restore tmp2055
  restore tmp2058

; -----------------------------------------------
; function __X64Encoder_emitCore_r_r$3
; -----------------------------------------------
__X64Encoder_emitCore_r_r$3_vcall:
__X64Encoder_emitCore_r_r$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2061 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2059 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2060 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2061 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ opcode + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp2059 ], eax

  mov dword [ tmp2060 ], 3

  mov [ tmp2061 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2060 ]
  mov [ tmp2061 + Variant_t.value], rax

  lea rcx , [ this ]
  mov edx , dword [ tmp2059 ]
  lea r8 , [ tmp2061 ]
  lea r9 , [ regDst ]
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore$4
  add rsp, 8


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2061 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore opcode
  restore regDst
  restore regSrc
  restore tmp2059
  restore tmp2060
  restore tmp2061

; -----------------------------------------------
; function __X64Encoder_emitCore_m_r$6
; -----------------------------------------------
__X64Encoder_emitCore_m_r$6_vcall:
  cmp [r8 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r8, [r8 + Variant_t.value]

  cmp [r9 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r9, [r9 + Variant_t.value]

  mov r10, [rsp + 24 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 24 ], r10

  mov r10, [rsp + 16 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 16 ], r10

__X64Encoder_emitCore_m_r$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 9 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp2076 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp2077 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  tmp2108 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2109 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  regBase EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 1 , readHits= 9 )
  scale EQU rbp - 128 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 2 , readHits= 9 )
  regIndex EQU rbp - 132 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 1 , readHits= 4 )
  disp EQU rbp - 136 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 7 )
  tmp2062 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2066 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2067 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 30 , readHits= 30 )
  tmp2075 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp2079 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp2081 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp2086 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2100 EQU rbp - 168 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2103 EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  mode EQU rbp - 176 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 3 )
  rm EQU rbp - 180 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  scaleMask EQU rbp - 184 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 1 )
  regBaseMask EQU rbp - 188 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  regIndexMask EQU rbp - 192 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  mov dword [ regBase ], r8d
  mov dword [ scale ], r9d
  mov eax, dword [rbp + 16 + 8 * 2 ]
  mov dword [ regIndex ], eax
  mov eax, dword [rbp + 16 + 8 * 1 ]
  mov dword [ disp ], eax
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2076 + Variant_t.type], eax
  mov [tmp2077 + Variant_t.type], eax
  mov [tmp2108 + Variant_t.type], eax
  mov [tmp2109 + Variant_t.type], eax

  ; code
  ; ----

  mov eax, dword [ regIndex ]
  cmp eax, dword [ X64_RSP ]
  jnz l2063

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal551
  lea rcx , [ __literal551 ]
  call qword [rbx + 8 * 41 ]

l2063:

l2064:

  mov dword [ tmp2062 ], 0

  mov dword [ tmp2067 ], 2

  mov eax, dword [ scale ]
  cmp eax, dword [ tmp2067 ]
  jnz l2065

  mov dword [ tmp2067 ], -1

  mov dword [ tmp2062 ], 0
  mov ecx, dword [ regBase ]
  cmp ecx, dword [ tmp2067 ]
  setz byte [ tmp2062 ]

l2065:

  cmp dword [ tmp2062 ], 0
  jz l2068

  mov eax, dword [ regIndex ]
  mov dword [ regBase ], eax

  mov dword [ scale ], 1

l2068:

l2069:

  mov dword [ tmp2062 ], 0

  mov eax, dword [ regBase ]
  cmp eax, dword [ X64_RSP ]
  jnz l2070

  mov dword [ tmp2067 ], -1

  mov dword [ tmp2062 ], 0
  mov ecx, dword [ scale ]
  cmp ecx, dword [ tmp2067 ]
  setz byte [ tmp2062 ]

l2070:

  cmp dword [ tmp2062 ], 0
  jz l2071

  mov eax, dword [ X64_RSP ]
  mov dword [ regIndex ], eax

  mov dword [ scale ], 1

l2071:

l2072:

  mov dword [ tmp2067 ], 100

  mov eax, dword [ regBase ]
  cmp eax, dword [ tmp2067 ]
  jnz l2073

  cmp [ opcode + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp2067 ], eax

  mov dword [ tmp2075 ], 0

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2075 ]
  mov [ tmp2076 + Variant_t.value], rax

  mov dword [ tmp2075 ], 5

  mov [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2075 ]
  mov [ tmp2077 + Variant_t.value], rax

  lea rcx , [ this ]
  mov edx , dword [ tmp2067 ]
  lea r8 , [ tmp2076 ]
  lea r9 , [ regSrc ]
  lea rax, [ tmp2077 ]
  push rax
  call  __X64Encoder_emitCore$4
  add rsp, 8

  mov [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ disp ]
  mov [ tmp2077 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2077 ]
  call  __X64Encoder_emitDword$1

  jmp l2074

l2073:

  mov dword [ tmp2066 ], 0

  mov dword [ tmp2079 ], 0

  mov dword [ tmp2067 ], -1

  mov eax, dword [ regBase ]
  cmp eax, dword [ tmp2067 ]
  jnz l2080

  mov dword [ tmp2067 ], -1

  mov dword [ tmp2079 ], 0
  mov ecx, dword [ scale ]
  cmp ecx, dword [ tmp2067 ]
  setz byte [ tmp2079 ]

l2080:

  cmp dword [ tmp2079 ], 0
  jz l2078

  mov dword [ tmp2067 ], -1

  mov dword [ tmp2066 ], 0
  mov ecx, dword [ regIndex ]
  cmp ecx, dword [ tmp2067 ]
  setz byte [ tmp2066 ]

l2078:

  cmp dword [ tmp2066 ], 0
  jz l2082

  cmp [ opcode + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp2067 ], eax

  mov dword [ tmp2075 ], 0

  mov [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2075 ]
  mov [ tmp2077 + Variant_t.value], rax

  mov dword [ tmp2075 ], 4

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2075 ]
  mov [ tmp2076 + Variant_t.value], rax

  lea rcx , [ this ]
  mov edx , dword [ tmp2067 ]
  lea r8 , [ tmp2077 ]
  lea r9 , [ regSrc ]
  lea rax, [ tmp2076 ]
  push rax
  call  __X64Encoder_emitCore$4
  add rsp, 8

  mov dword [ tmp2067 ], 37

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2067 ]
  mov [ tmp2076 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2076 ]
  call  __X64Encoder_emitByte$1

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ disp ]
  mov [ tmp2076 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2076 ]
  call  __X64Encoder_emitDword$1

  jmp l2083

l2082:

  mov dword [ tmp2079 ], 0

  mov eax, dword [ regBase ]
  cmp eax, dword [ X64_RBP ]
  jz l2084

  mov dword [ tmp2081 ], 1

  mov dword [ tmp2067 ], 0

  mov eax, dword [ disp ]
  cmp eax, dword [ tmp2067 ]
  jz l2085

  mov dword [ tmp2067 ], -1

  mov dword [ tmp2081 ], 0
  mov ecx, dword [ regBase ]
  cmp ecx, dword [ tmp2067 ]
  setz byte [ tmp2081 ]

l2085:

  mov eax, dword [ tmp2081 ]
  mov dword [ tmp2079 ], eax

l2084:

  cmp dword [ tmp2079 ], 0
  jz l2087

  mov dword [ mode ], 0

  jmp l2088

l2087:

  mov dword [ tmp2081 ], 0

  mov dword [ tmp2067 ], -127

  mov eax, dword [ disp ]
  cmp eax, dword [ tmp2067 ]
  jl l2089

  mov dword [ tmp2067 ], 128

  mov dword [ tmp2081 ], 0
  mov ecx, dword [ disp ]
  cmp ecx, dword [ tmp2067 ]
  setle byte [ tmp2081 ]

l2089:

  cmp dword [ tmp2081 ], 0
  jz l2090

  mov dword [ mode ], 1

  jmp l2091

l2090:

  mov dword [ mode ], 2

l2091:

l2088:

  mov dword [ tmp2067 ], 0

  mov eax, dword [ scale ]
  cmp eax, dword [ tmp2067 ]
  jle l2092

  mov dword [ rm ], 4

  jmp l2093

l2092:

  mov eax, dword [ regBase ]
  mov dword [ rm ], eax

l2093:

  cmp [ opcode + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp2067 ], eax

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ mode ]
  mov [ tmp2076 + Variant_t.value], rax

  mov [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rm ]
  mov [ tmp2077 + Variant_t.value], rax

  lea rcx , [ this ]
  mov edx , dword [ tmp2067 ]
  lea r8 , [ tmp2076 ]
  lea r9 , [ regSrc ]
  lea rax, [ tmp2077 ]
  push rax
  call  __X64Encoder_emitCore$4
  add rsp, 8

  mov dword [ tmp2067 ], 0

  mov eax, dword [ scale ]
  cmp eax, dword [ tmp2067 ]
  jle l2094

  mov dword [ tmp2067 ], 1

  mov eax, dword [ scale ]
  cmp eax, dword [ tmp2067 ]
  jnz l2096

  mov dword [ scaleMask ], 0

  jmp l2097

l2096:

  mov dword [ tmp2067 ], 2

  mov eax, dword [ scale ]
  cmp eax, dword [ tmp2067 ]
  jnz l2098

  mov dword [ scaleMask ], 64

  jmp l2099

l2098:

  mov dword [ tmp2067 ], 4

  mov eax, dword [ scale ]
  cmp eax, dword [ tmp2067 ]
  jnz l2101

  mov dword [ scaleMask ], 128

  jmp l2102

l2101:

  mov dword [ tmp2067 ], 8

  mov eax, dword [ scale ]
  cmp eax, dword [ tmp2067 ]
  jnz l2104

  mov dword [ scaleMask ], 192

  jmp l2105

l2104:

  mov dword [ scaleMask ], -1

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal552
  lea rcx , [ __literal552 ]
  call qword [rbx + 8 * 41 ]

l2105:

l2102:

l2099:

l2097:

  mov dword [ tmp2067 ], -1

  mov eax, dword [ regBase ]
  cmp eax, dword [ tmp2067 ]
  jnz l2106

  mov dword [ regBaseMask ], 5

  mov dword [ mode ], 2

  jmp l2107

l2106:

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ regBase ]
  mov [ tmp2076 + Variant_t.value], rax

  mov dword [ tmp2067 ], 7

  mov [ tmp2108 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2067 ]
  mov [ tmp2108 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2076 ]
  lea rdx , [ tmp2108 ]
  lea r8 , [ tmp2077 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2077 + Variant_t.value]
  mov dword [ regBaseMask ], eax

l2107:

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ regIndex ]
  mov [ tmp2076 + Variant_t.value], rax

  mov dword [ tmp2067 ], 7

  mov [ tmp2109 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2067 ]
  mov [ tmp2109 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2076 ]
  lea rdx , [ tmp2109 ]
  lea r8 , [ tmp2108 ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp2067 ], 8

  mov [ tmp2109 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2067 ]
  mov [ tmp2109 + Variant_t.value], rax

  lea  rcx , [ tmp2108 ]
  lea  rdx , [ tmp2109 ]
  lea  r8 , [ tmp2077 ]
  call  __MOLD_VariantMul

  cmp [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2077 + Variant_t.value]
  mov dword [ regIndexMask ], eax

  mov eax, dword [ scaleMask ]
  add eax, dword [ regIndexMask ]
  mov dword [ tmp2075 ], eax

  mov eax, dword [ tmp2075 ]
  add eax, dword [ regBaseMask ]
  mov dword [ tmp2067 ], eax

  mov [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2067 ]
  mov [ tmp2077 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2077 ]
  call  __X64Encoder_emitByte$1

l2094:

l2095:

  mov dword [ tmp2067 ], 1

  mov eax, dword [ mode ]
  cmp eax, dword [ tmp2067 ]
  jnz l2110

  mov [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ disp ]
  mov [ tmp2077 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2077 ]
  call  __X64Encoder_emitByte$1

  jmp l2111

l2110:

  mov dword [ tmp2067 ], 2

  mov eax, dword [ mode ]
  cmp eax, dword [ tmp2067 ]
  jnz l2112

  mov [ tmp2077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ disp ]
  mov [ tmp2077 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2077 ]
  call  __X64Encoder_emitDword$1

l2112:

l2113:

l2111:

l2083:

l2074:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2076 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2077 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2108 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2109 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret


  restore this
  restore opcode
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2062
  restore tmp2066
  restore tmp2067
  restore tmp2075
  restore tmp2076
  restore tmp2077
  restore tmp2079
  restore tmp2081
  restore tmp2086
  restore tmp2100
  restore tmp2103
  restore tmp2108
  restore tmp2109
  restore mode
  restore rm
  restore scaleMask
  restore regBaseMask
  restore regIndexMask

; -----------------------------------------------
; function __X64Encoder_emitCore_r_m$6
; -----------------------------------------------
__X64Encoder_emitCore_r_m$6_vcall:
__X64Encoder_emitCore_r_m$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2114 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2116 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2115 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2117 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2118 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2119 EQU rbp - 168 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regBase ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2114 + Variant_t.type], eax
  mov [tmp2116 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2115 ], 2

  mov [ tmp2116 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2115 ]
  mov [ tmp2116 + Variant_t.value], rax

  ; __mold_syscall( 36 )
  lea rcx , [ opcode ]
  lea rdx , [ tmp2116 ]
  lea r8 , [ opcode ]
  call qword [rbx + 8 * 36 ]

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2115 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2117 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2118 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2119 ], eax

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  mov r8d , dword [ tmp2115 ]
  mov r9d , dword [ tmp2117 ]
  mov  eax, dword [ tmp2118 ]
  push rax
  mov  eax, dword [ tmp2119 ]
  push rax
  lea rax, [ regDst ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2114 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2116 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore this
  restore opcode
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2114
  restore tmp2115
  restore tmp2116
  restore tmp2117
  restore tmp2118
  restore tmp2119

; -----------------------------------------------
; function __X64Encoder_emitCore_r$2
; -----------------------------------------------
__X64Encoder_emitCore_r$2_vcall:
__X64Encoder_emitCore_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2121 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2120 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2121 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2120 ], 0

  mov [ tmp2121 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2120 ]
  mov [ tmp2121 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ tmp2121 ]
  lea r9 , [ reg ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2121 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore opcode
  restore reg
  restore tmp2120
  restore tmp2121

; -----------------------------------------------
; function __X64Encoder_emitCore_m$5
; -----------------------------------------------
__X64Encoder_emitCore_m$5_vcall:
__X64Encoder_emitCore_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2127 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2122 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2123 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2124 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2125 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2126 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2127 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2122 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2123 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2124 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2125 ], eax

  mov dword [ tmp2126 ], 0

  mov [ tmp2127 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2126 ]
  mov [ tmp2127 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  mov r8d , dword [ tmp2122 ]
  mov r9d , dword [ tmp2123 ]
  mov  eax, dword [ tmp2124 ]
  push rax
  mov  eax, dword [ tmp2125 ]
  push rax
  lea rax, [ tmp2127 ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2127 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore opcode
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2122
  restore tmp2123
  restore tmp2124
  restore tmp2125
  restore tmp2126
  restore tmp2127

; -----------------------------------------------
; function __X64Encoder_emitCore_r_imm$3
; -----------------------------------------------
__X64Encoder_emitCore_r_imm$3_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

  cmp [r8 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r8, [r8 + Variant_t.value]

  cmp [r9 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r9, [r9 + Variant_t.value]

__X64Encoder_emitCore_r_imm$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 14 )
  tmp2133 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp2142 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2143 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  opcode EQU rbp - 76 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  regDst EQU rbp - 80 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 8 )
  imm EQU rbp - 84 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 7 )
  operationId EQU rbp - 88 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp2128 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 14 , readHits= 14 )
  tmp2129 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2132 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2134 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2135 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2136 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2146 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2147 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcode ], edx
  mov dword [ regDst ], r8d
  mov dword [ imm ], r9d
  xor eax, eax
  mov [tmp2133 + Variant_t.type], eax
  mov [tmp2142 + Variant_t.type], eax
  mov [tmp2143 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2128 ], 8

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp2128 ]
  cdq
  idiv ecx
  mov  dword [ operationId ], eax

  mov dword [ tmp2128 ], 0

  mov eax, dword [ regDst ]
  cmp eax, dword [ tmp2128 ]
  jnz l2130

  mov dword [ tmp2132 ], 4

  mov eax, dword [ opcode ]
  add eax, dword [ tmp2132 ]
  mov dword [ tmp2128 ], eax

  mov [ tmp2133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2128 ]
  mov [ tmp2133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2133 ]
  call  __X64Encoder_emitByte$1

  mov [ tmp2133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm ]
  mov [ tmp2133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2133 ]
  call  __X64Encoder_emitByte$1

  jmp l2131

l2130:

  mov ecx , dword [ regDst ]
  lea  rax , [ tmp2135 ]
  call  X64_IsReg8

  mov dword [ tmp2136 ], 1

  mov eax, dword [ tmp2135 ]
  cmp eax, dword [ tmp2136 ]
  jnz l2137

  mov dword [ tmp2128 ], 128

  mov [ tmp2133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2128 ]
  mov [ tmp2133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2133 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2128 ], 3

  lea rcx , [ this ]
  mov edx , dword [ tmp2128 ]
  mov r8d , dword [ operationId ]
  mov r9d , dword [ regDst ]
  call  __X64Encoder_emitModRegRM$3

  mov [ tmp2133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm ]
  mov [ tmp2133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2133 ]
  call  __X64Encoder_emitByte$1

  jmp l2138

l2137:

  mov [ tmp2133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ regDst ]
  mov [ tmp2133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2133 ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2136 ], 0

  mov dword [ tmp2128 ], -127

  mov eax, dword [ imm ]
  cmp eax, dword [ tmp2128 ]
  jl l2139

  mov dword [ tmp2128 ], 128

  mov dword [ tmp2136 ], 0
  mov ecx, dword [ imm ]
  cmp ecx, dword [ tmp2128 ]
  setle byte [ tmp2136 ]

l2139:

  cmp dword [ tmp2136 ], 0
  jz l2140

  mov dword [ tmp2128 ], 131

  mov [ tmp2133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2128 ]
  mov [ tmp2133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2133 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2128 ], 3

  lea rcx , [ this ]
  mov edx , dword [ tmp2128 ]
  mov r8d , dword [ operationId ]
  mov r9d , dword [ regDst ]
  call  __X64Encoder_emitModRegRM$3

  mov [ tmp2133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm ]
  mov [ tmp2133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2133 ]
  call  __X64Encoder_emitByte$1

  jmp l2141

l2140:

  mov [ tmp2142 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ regDst ]
  mov [ tmp2142 + Variant_t.value], rax

  mov dword [ tmp2128 ], 7

  mov [ tmp2143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2128 ]
  mov [ tmp2143 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2142 ]
  lea rdx , [ tmp2143 ]
  lea r8 , [ tmp2133 ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp2128 ], 0

  mov [ tmp2143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2128 ]
  mov [ tmp2143 + Variant_t.value], rax

  lea rcx, [ tmp2133 ]
  lea rdx, [ tmp2143 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2144

  mov dword [ tmp2132 ], 5

  mov eax, dword [ opcode ]
  add eax, dword [ tmp2132 ]
  mov dword [ tmp2128 ], eax

  mov [ tmp2143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2128 ]
  mov [ tmp2143 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2143 ]
  call  __X64Encoder_emitByte$1

  jmp l2145

l2144:

  mov dword [ tmp2128 ], 129

  mov [ tmp2143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2128 ]
  mov [ tmp2143 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2143 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2128 ], 3

  lea rcx , [ this ]
  mov edx , dword [ tmp2128 ]
  mov r8d , dword [ operationId ]
  mov r9d , dword [ regDst ]
  call  __X64Encoder_emitModRegRM$3

l2145:

  mov ecx , dword [ regDst ]
  lea  rax , [ tmp2146 ]
  call  X64_IsReg16

  mov dword [ tmp2147 ], 1

  mov eax, dword [ tmp2146 ]
  cmp eax, dword [ tmp2147 ]
  jnz l2148

  mov [ tmp2143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm ]
  mov [ tmp2143 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2143 ]
  call  __X64Encoder_emitWord$1

  jmp l2149

l2148:

  mov [ tmp2143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm ]
  mov [ tmp2143 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2143 ]
  call  __X64Encoder_emitDword$1

l2149:

l2141:

l2138:

l2131:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2133 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2142 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2143 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore opcode
  restore regDst
  restore imm
  restore operationId
  restore tmp2128
  restore tmp2129
  restore tmp2132
  restore tmp2133
  restore tmp2134
  restore tmp2135
  restore tmp2136
  restore tmp2142
  restore tmp2143
  restore tmp2146
  restore tmp2147

; -----------------------------------------------
; function __X64Encoder_emitCore_m_imm$7
; -----------------------------------------------
__X64Encoder_emitCore_m_imm$7_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_emitCore_m_imm$7:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp2174 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2178 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 140 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 2 , readHits= 11 )
  dataSize EQU rbp - 144 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 5 )
  operationId EQU rbp - 148 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  tmp2150 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2151 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 14 , readHits= 14 )
  tmp2154 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2159 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2161 EQU rbp - 168 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2163 EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2165 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2167 EQU rbp - 180 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2169 EQU rbp - 184 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2175 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2176 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2177 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcode ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 3 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2174 + Variant_t.type], eax
  mov [tmp2178 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2151 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2151 ]
  jnz l2152

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2153

l2152:

  mov dword [ tmp2151 ], 8

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2151 ]
  jnz l2155

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

l2155:

l2156:

l2153:

  mov dword [ tmp2150 ], 1

  mov dword [ tmp2151 ], 16

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2151 ]
  jz l2157

  mov dword [ tmp2154 ], 1

  mov dword [ tmp2151 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2151 ]
  jz l2158

  mov dword [ tmp2159 ], 1

  mov dword [ tmp2151 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2151 ]
  jz l2160

  mov dword [ tmp2161 ], 1

  mov dword [ tmp2151 ], 56

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2151 ]
  jz l2162

  mov dword [ tmp2163 ], 1

  mov dword [ tmp2151 ], 24

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2151 ]
  jz l2164

  mov dword [ tmp2165 ], 1

  mov dword [ tmp2151 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2151 ]
  jz l2166

  mov dword [ tmp2167 ], 1

  mov dword [ tmp2151 ], 8

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2151 ]
  jz l2168

  mov dword [ tmp2151 ], 48

  mov dword [ tmp2167 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2151 ]
  setz byte [ tmp2167 ]

l2168:

  mov eax, dword [ tmp2167 ]
  mov dword [ tmp2165 ], eax

l2166:

  mov eax, dword [ tmp2165 ]
  mov dword [ tmp2163 ], eax

l2164:

  mov eax, dword [ tmp2163 ]
  mov dword [ tmp2161 ], eax

l2162:

  mov eax, dword [ tmp2161 ]
  mov dword [ tmp2159 ], eax

l2160:

  mov eax, dword [ tmp2159 ]
  mov dword [ tmp2154 ], eax

l2158:

  mov eax, dword [ tmp2154 ]
  mov dword [ tmp2150 ], eax

l2157:

  cmp dword [ tmp2150 ], 0
  jz l2170

  mov dword [ tmp2151 ], 8

  mov  eax, dword [ opcode ]
  mov  ecx, dword [ tmp2151 ]
  cdq
  idiv ecx
  mov  dword [ operationId ], eax

  mov dword [ opcode ], 128

  jmp l2171

l2170:

  mov dword [ operationId ], 0

l2171:

  mov dword [ tmp2151 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2151 ]
  jle l2172

  mov dword [ tmp2151 ], 1

  mov eax, dword [ opcode ]
  add eax, dword [ tmp2151 ]
  mov dword [ opcode ], eax

l2172:

l2173:

  mov [ tmp2174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2174 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2151 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2175 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2176 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2177 ], eax

  mov [ tmp2178 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ operationId ]
  mov [ tmp2178 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2174 ]
  mov r8d , dword [ tmp2151 ]
  mov r9d , dword [ tmp2175 ]
  mov  eax, dword [ tmp2176 ]
  push rax
  mov  eax, dword [ tmp2177 ]
  push rax
  lea rax, [ tmp2178 ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24

  mov dword [ tmp2177 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2177 ]
  jnz l2179

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1

  jmp l2180

l2179:

  mov dword [ tmp2177 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2177 ]
  jnz l2181

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitWord$1

  jmp l2182

l2181:

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitDword$1

l2182:

l2180:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2174 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2178 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret


  restore this
  restore opcode
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore operationId
  restore tmp2150
  restore tmp2151
  restore tmp2154
  restore tmp2159
  restore tmp2161
  restore tmp2163
  restore tmp2165
  restore tmp2167
  restore tmp2169
  restore tmp2174
  restore tmp2175
  restore tmp2176
  restore tmp2177
  restore tmp2178

; -----------------------------------------------
; function __X64Encoder_emitCore_group_r$3
; -----------------------------------------------
__X64Encoder_emitCore_group_r$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp2189 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  opcodeBase EQU rbp - 76 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2183 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2184 EQU rbp - 84 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2185 EQU rbp - 88 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2186 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2190 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2191 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcodeBase ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2189 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2185 ], eax

  mov ecx , dword [ tmp2185 ]
  lea  rax , [ tmp2184 ]
  call  X64_IsReg8

  mov dword [ tmp2186 ], 1

  mov eax, dword [ tmp2184 ]
  cmp eax, dword [ tmp2186 ]
  jnz l2187

  mov [ tmp2189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcodeBase ]
  mov [ tmp2189 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2189 ]
  call  __X64Encoder_emitByte$1

  jmp l2188

l2187:

  lea rcx , [ this ]
  lea rdx , [ reg ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2190 ], 1

  mov eax, dword [ opcodeBase ]
  add eax, dword [ tmp2190 ]
  mov dword [ tmp2185 ], eax

  mov [ tmp2189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2185 ]
  mov [ tmp2189 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2189 ]
  call  __X64Encoder_emitByte$1

l2188:

  mov dword [ tmp2185 ], 3

  cmp [ operationId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ operationId + Variant_t.value]
  mov dword [ tmp2190 ], eax

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2191 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2185 ]
  mov r8d , dword [ tmp2190 ]
  mov r9d , dword [ tmp2191 ]
  call  __X64Encoder_emitModRegRM$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2189 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore opcodeBase
  restore operationId
  restore reg
  restore tmp2183
  restore tmp2184
  restore tmp2185
  restore tmp2186
  restore tmp2189
  restore tmp2190
  restore tmp2191

; -----------------------------------------------
; function __X64Encoder_emitCore_group_m$6
; -----------------------------------------------
__X64Encoder_emitCore_group_m$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcodeBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  base EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2192 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2193 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2194 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2195 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcodeBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ base ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  cmp [ base + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ base + Variant_t.value]
  mov dword [ tmp2192 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2193 ], eax

  cmp [ index + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ index + Variant_t.value]
  mov dword [ tmp2194 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2195 ], eax

  lea rcx , [ this ]
  lea rdx , [ opcodeBase ]
  mov r8d , dword [ tmp2192 ]
  mov r9d , dword [ tmp2193 ]
  mov  eax, dword [ tmp2194 ]
  push rax
  mov  eax, dword [ tmp2195 ]
  push rax
  lea rax, [ operationId ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore opcodeBase
  restore operationId
  restore base
  restore scale
  restore index
  restore disp
  restore tmp2192
  restore tmp2193
  restore tmp2194
  restore tmp2195

; -----------------------------------------------
; function __X64Encoder_emitCore_unaryGroup_r$2
; -----------------------------------------------
__X64Encoder_emitCore_unaryGroup_r$2_vcall:
__X64Encoder_emitCore_unaryGroup_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2196 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ reg ], xmm0

  ; code
  ; ----

  mov dword [ tmp2196 ], 246

  lea rcx , [ this ]
  mov edx , dword [ tmp2196 ]
  lea r8 , [ operationId ]
  lea r9 , [ reg ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore operationId
  restore reg
  restore tmp2196

; -----------------------------------------------
; function __X64Encoder_emitCore_unaryGroup_m$6
; -----------------------------------------------
__X64Encoder_emitCore_unaryGroup_m$6_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_emitCore_unaryGroup_m$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  base EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2204 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2205 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  operationId EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 3 , readHits= 4 )
  dataSize EQU rbp - 128 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  opcode EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  tmp2201 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ operationId ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ base ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2204 + Variant_t.type], eax
  mov [tmp2205 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ opcode ], 247

; 
; -----------------------------
; BEGIN: switch dataSize
; 
  mov eax, dword [ dataSize ]
  sub eax, 2
  cmp eax, 6
  ja l2198
  movsx rax, word [ __jmptable2199 + rax * 2]
  lea rax, [ l2198 + rax]
  jmp rax

l2200:

  mov dword [ tmp2201 ], 16

  mov eax, dword [ operationId ]
  add eax, dword [ tmp2201 ]
  mov dword [ operationId ], eax

  jmp l2197

l2202:

  mov dword [ tmp2201 ], 32

  mov eax, dword [ operationId ]
  add eax, dword [ tmp2201 ]
  mov dword [ operationId ], eax

  jmp l2197

l2203:

  mov dword [ tmp2201 ], 48

  mov eax, dword [ operationId ]
  add eax, dword [ tmp2201 ]
  mov dword [ operationId ], eax

  jmp l2197

l2198:

  mov dword [ opcode ], 246

l2197:

; 
; END: switch dataSize
; -----------------------------
; 
  mov [ tmp2204 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2204 + Variant_t.value], rax

  mov [ tmp2205 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ operationId ]
  mov [ tmp2205 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2204 ]
  lea r8 , [ tmp2205 ]
  lea r9 , [ base ]
  lea rax, [ scale ]
  push rax
  lea rax, [ index ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2205 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore operationId
  restore base
  restore scale
  restore index
  restore disp
  restore dataSize
  restore opcode
  restore tmp2201
  restore tmp2204
  restore tmp2205

; -----------------------------------------------
; function __X64Encoder_emitCore_shiftGroup_r_imm8$3
; -----------------------------------------------
__X64Encoder_emitCore_shiftGroup_r_imm8$3_vcall:
  cmp [r9 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r9, [r9 + Variant_t.value]

__X64Encoder_emitCore_shiftGroup_r_imm8$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2210 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  imm8 EQU rbp - 76 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2206 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2207 EQU rbp - 84 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0
  mov dword [ imm8 ], r9d
  xor eax, eax
  mov [tmp2210 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2207 ], 1

  mov eax, dword [ imm8 ]
  cmp eax, dword [ tmp2207 ]
  jnz l2208

  mov dword [ tmp2207 ], 208

  lea rcx , [ this ]
  mov edx , dword [ tmp2207 ]
  lea r8 , [ operationId ]
  lea r9 , [ regDst ]
  call  __X64Encoder_emitCore_group_r$3

  jmp l2209

l2208:

  mov dword [ tmp2207 ], 192

  lea rcx , [ this ]
  mov edx , dword [ tmp2207 ]
  lea r8 , [ operationId ]
  lea r9 , [ regDst ]
  call  __X64Encoder_emitCore_group_r$3

  mov [ tmp2210 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm8 ]
  mov [ tmp2210 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2210 ]
  call  __X64Encoder_emitByte$1

l2209:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2210 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore operationId
  restore regDst
  restore imm8
  restore tmp2206
  restore tmp2207
  restore tmp2210

; -----------------------------------------------
; function __X64Encoder_emitCore_shiftGroup_r_cl$2
; -----------------------------------------------
__X64Encoder_emitCore_shiftGroup_r_cl$2_vcall:
__X64Encoder_emitCore_shiftGroup_r_cl$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2211 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0

  ; code
  ; ----

  mov dword [ tmp2211 ], 210

  lea rcx , [ this ]
  mov edx , dword [ tmp2211 ]
  lea r8 , [ operationId ]
  lea r9 , [ regDst ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore operationId
  restore regDst
  restore tmp2211

; -----------------------------------------------
; function __X64Encoder_emitCore_shiftGroup_m_imm8$7
; -----------------------------------------------
__X64Encoder_emitCore_shiftGroup_m_imm8$7_vcall:
  mov r10, [rsp + 16 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 16 ], r10

  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_emitCore_shiftGroup_m_imm8$7:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2225 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  imm8 EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  dataSize EQU rbp - 128 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  opcodeShift EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2212 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2213 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp2216 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2219 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2224 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 3 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 1 ]
  mov dword [ imm8 ], eax
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2225 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2213 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2213 ]
  jnz l2214

  mov dword [ opcodeShift ], 0

  jmp l2215

l2214:

  mov dword [ opcodeShift ], 1

  mov dword [ tmp2213 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2213 ]
  jnz l2217

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2218

l2217:

  mov dword [ tmp2213 ], 8

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2213 ]
  jnz l2220

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

l2220:

l2221:

l2218:

l2215:

  mov dword [ tmp2213 ], 1

  mov eax, dword [ imm8 ]
  cmp eax, dword [ tmp2213 ]
  jnz l2222

  mov dword [ tmp2224 ], 208

  mov eax, dword [ tmp2224 ]
  add eax, dword [ opcodeShift ]
  mov dword [ tmp2213 ], eax

  mov [ tmp2225 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2213 ]
  mov [ tmp2225 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2225 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24

  jmp l2223

l2222:

  mov dword [ tmp2224 ], 192

  mov eax, dword [ tmp2224 ]
  add eax, dword [ opcodeShift ]
  mov dword [ tmp2213 ], eax

  mov [ tmp2225 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2213 ]
  mov [ tmp2225 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2225 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24

  mov [ tmp2225 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm8 ]
  mov [ tmp2225 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2225 ]
  call  __X64Encoder_emitByte$1

l2223:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2225 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore operationId
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm8
  restore dataSize
  restore opcodeShift
  restore tmp2212
  restore tmp2213
  restore tmp2216
  restore tmp2219
  restore tmp2224
  restore tmp2225

; -----------------------------------------------
; function __X64Encoder_emitCore_shiftGroup_m_cl$6
; -----------------------------------------------
__X64Encoder_emitCore_shiftGroup_m_cl$6_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_emitCore_shiftGroup_m_cl$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2236 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dataSize EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  opcode EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  tmp2226 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2227 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2230 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2233 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2236 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2227 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2227 ]
  jnz l2228

  mov dword [ opcode ], 210

  jmp l2229

l2228:

  mov dword [ opcode ], 211

  mov dword [ tmp2227 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2227 ]
  jnz l2231

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2232

l2231:

  mov dword [ tmp2227 ], 8

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2227 ]
  jnz l2234

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

l2234:

l2235:

l2232:

l2229:

  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2236 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2236 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore operationId
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore opcode
  restore tmp2226
  restore tmp2227
  restore tmp2230
  restore tmp2233
  restore tmp2236

; -----------------------------------------------
; function __X64Encoder_add_r_r$2
; -----------------------------------------------
__X64Encoder_add_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2238 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2237 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2238 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2237 ], 0

  mov [ tmp2238 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2237 ]
  mov [ tmp2238 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2238 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2238 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2237
  restore tmp2238

; -----------------------------------------------
; function __X64Encoder_or_r_r$2
; -----------------------------------------------
__X64Encoder_or_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2240 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2239 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2240 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2239 ], 8

  mov [ tmp2240 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2239 ]
  mov [ tmp2240 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2240 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2240 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2239
  restore tmp2240

; -----------------------------------------------
; function __X64Encoder_adc_r_r$2
; -----------------------------------------------
__X64Encoder_adc_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2242 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2241 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2242 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2241 ], 16

  mov [ tmp2242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2241 ]
  mov [ tmp2242 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2242 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2242 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2241
  restore tmp2242

; -----------------------------------------------
; function __X64Encoder_sbb_r_r$2
; -----------------------------------------------
__X64Encoder_sbb_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2244 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2243 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2244 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2243 ], 24

  mov [ tmp2244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2243 ]
  mov [ tmp2244 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2244 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2244 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2243
  restore tmp2244

; -----------------------------------------------
; function __X64Encoder_and_r_r$2
; -----------------------------------------------
__X64Encoder_and_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2246 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2245 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2246 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2245 ], 32

  mov [ tmp2246 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2245 ]
  mov [ tmp2246 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2246 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2246 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2245
  restore tmp2246

; -----------------------------------------------
; function __X64Encoder_sub_r_r$2
; -----------------------------------------------
__X64Encoder_sub_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2248 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2247 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2248 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2247 ], 40

  mov [ tmp2248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2247 ]
  mov [ tmp2248 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2248 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2248 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2247
  restore tmp2248

; -----------------------------------------------
; function __X64Encoder_xor_r_r$2
; -----------------------------------------------
__X64Encoder_xor_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2250 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2249 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2250 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2249 ], 48

  mov [ tmp2250 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2249 ]
  mov [ tmp2250 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2250 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2250 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2249
  restore tmp2250

; -----------------------------------------------
; function __X64Encoder_cmp_r_r$2
; -----------------------------------------------
__X64Encoder_cmp_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2252 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2251 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2252 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2251 ], 56

  mov [ tmp2252 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2251 ]
  mov [ tmp2252 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2252 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2252 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2251
  restore tmp2252

; -----------------------------------------------
; function __X64Encoder_add_r_imm$2
; -----------------------------------------------
__X64Encoder_add_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2253 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2254 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2255 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2253 ], 0

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2254 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2255 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2253 ]
  mov r8d , dword [ tmp2254 ]
  mov r9d , dword [ tmp2255 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2253
  restore tmp2254
  restore tmp2255

; -----------------------------------------------
; function __X64Encoder_or_r_imm$2
; -----------------------------------------------
__X64Encoder_or_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2256 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2257 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2258 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2256 ], 8

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2257 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2258 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2256 ]
  mov r8d , dword [ tmp2257 ]
  mov r9d , dword [ tmp2258 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2256
  restore tmp2257
  restore tmp2258

; -----------------------------------------------
; function __X64Encoder_adc_r_imm$2
; -----------------------------------------------
__X64Encoder_adc_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2259 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2260 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2261 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2259 ], 16

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2260 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2261 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2259 ]
  mov r8d , dword [ tmp2260 ]
  mov r9d , dword [ tmp2261 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2259
  restore tmp2260
  restore tmp2261

; -----------------------------------------------
; function __X64Encoder_sbb_r_imm$2
; -----------------------------------------------
__X64Encoder_sbb_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2262 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2263 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2264 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2262 ], 24

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2263 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2264 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2262 ]
  mov r8d , dword [ tmp2263 ]
  mov r9d , dword [ tmp2264 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2262
  restore tmp2263
  restore tmp2264

; -----------------------------------------------
; function __X64Encoder_and_r_imm$2
; -----------------------------------------------
__X64Encoder_and_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2265 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2266 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2267 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2265 ], 32

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2266 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2267 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2265 ]
  mov r8d , dword [ tmp2266 ]
  mov r9d , dword [ tmp2267 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2265
  restore tmp2266
  restore tmp2267

; -----------------------------------------------
; function __X64Encoder_sub_r_imm$2
; -----------------------------------------------
__X64Encoder_sub_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2268 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2269 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2270 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2268 ], 40

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2269 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2270 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2268 ]
  mov r8d , dword [ tmp2269 ]
  mov r9d , dword [ tmp2270 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2268
  restore tmp2269
  restore tmp2270

; -----------------------------------------------
; function __X64Encoder_xor_r_imm$2
; -----------------------------------------------
__X64Encoder_xor_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2271 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2272 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2273 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2271 ], 48

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2272 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2273 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2271 ]
  mov r8d , dword [ tmp2272 ]
  mov r9d , dword [ tmp2273 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2271
  restore tmp2272
  restore tmp2273

; -----------------------------------------------
; function __X64Encoder_cmp_r_imm$2
; -----------------------------------------------
__X64Encoder_cmp_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2274 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2275 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2276 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2274 ], 56

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2275 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2276 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2274 ]
  mov r8d , dword [ tmp2275 ]
  mov r9d , dword [ tmp2276 ]
  call  __X64Encoder_emitCore_r_imm$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2274
  restore tmp2275
  restore tmp2276

; -----------------------------------------------
; function __X64Encoder_add_r_m$5
; -----------------------------------------------
__X64Encoder_add_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2278 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2277 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2278 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2277 ], 0

  mov [ tmp2278 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2277 ]
  mov [ tmp2278 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2278 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2278 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2277
  restore tmp2278

; -----------------------------------------------
; function __X64Encoder_or_r_m$5
; -----------------------------------------------
__X64Encoder_or_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2280 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2279 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2280 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2279 ], 8

  mov [ tmp2280 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2279 ]
  mov [ tmp2280 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2280 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2280 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2279
  restore tmp2280

; -----------------------------------------------
; function __X64Encoder_adc_r_m$5
; -----------------------------------------------
__X64Encoder_adc_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2282 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2281 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2282 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2281 ], 16

  mov [ tmp2282 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2281 ]
  mov [ tmp2282 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2282 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2282 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2281
  restore tmp2282

; -----------------------------------------------
; function __X64Encoder_sbb_r_m$5
; -----------------------------------------------
__X64Encoder_sbb_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2284 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2283 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2284 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2283 ], 24

  mov [ tmp2284 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2283 ]
  mov [ tmp2284 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2284 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2284 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2283
  restore tmp2284

; -----------------------------------------------
; function __X64Encoder_and_r_m$5
; -----------------------------------------------
__X64Encoder_and_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2286 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2285 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2286 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2285 ], 32

  mov [ tmp2286 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2285 ]
  mov [ tmp2286 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2286 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2286 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2285
  restore tmp2286

; -----------------------------------------------
; function __X64Encoder_sub_r_m$5
; -----------------------------------------------
__X64Encoder_sub_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2288 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2287 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2288 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2287 ], 40

  mov [ tmp2288 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2287 ]
  mov [ tmp2288 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2288 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2288 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2287
  restore tmp2288

; -----------------------------------------------
; function __X64Encoder_xor_r_m$5
; -----------------------------------------------
__X64Encoder_xor_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2290 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2289 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2290 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2289 ], 48

  mov [ tmp2290 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2289 ]
  mov [ tmp2290 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2290 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2290 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2289
  restore tmp2290

; -----------------------------------------------
; function __X64Encoder_cmp_r_m$5
; -----------------------------------------------
__X64Encoder_cmp_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2292 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2291 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2292 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2291 ], 56

  mov [ tmp2292 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2291 ]
  mov [ tmp2292 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2292 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2292 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2291
  restore tmp2292

; -----------------------------------------------
; function __X64Encoder_add_m_r$5
; -----------------------------------------------
__X64Encoder_add_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2294 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2293 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2294 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2293 ], 0

  mov [ tmp2294 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2293 ]
  mov [ tmp2294 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2294 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2294 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2293
  restore tmp2294

; -----------------------------------------------
; function __X64Encoder_or_m_r$5
; -----------------------------------------------
__X64Encoder_or_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2296 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2295 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2296 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2295 ], 8

  mov [ tmp2296 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2296 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2296 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2296 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2295
  restore tmp2296

; -----------------------------------------------
; function __X64Encoder_adc_m_r$5
; -----------------------------------------------
__X64Encoder_adc_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2298 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2297 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2298 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2297 ], 16

  mov [ tmp2298 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2297 ]
  mov [ tmp2298 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2298 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2298 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2297
  restore tmp2298

; -----------------------------------------------
; function __X64Encoder_sbb_m_r$5
; -----------------------------------------------
__X64Encoder_sbb_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2300 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2299 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2300 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2299 ], 24

  mov [ tmp2300 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2299 ]
  mov [ tmp2300 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2300 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2300 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2299
  restore tmp2300

; -----------------------------------------------
; function __X64Encoder_and_m_r$5
; -----------------------------------------------
__X64Encoder_and_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2302 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2301 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2302 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2301 ], 32

  mov [ tmp2302 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2301 ]
  mov [ tmp2302 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2302 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2302 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2301
  restore tmp2302

; -----------------------------------------------
; function __X64Encoder_sub_m_r$5
; -----------------------------------------------
__X64Encoder_sub_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2304 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2303 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2304 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2303 ], 40

  mov [ tmp2304 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2303 ]
  mov [ tmp2304 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2304 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2304 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2303
  restore tmp2304

; -----------------------------------------------
; function __X64Encoder_xor_m_r$5
; -----------------------------------------------
__X64Encoder_xor_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2306 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2305 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2306 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2305 ], 48

  mov [ tmp2306 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2305 ]
  mov [ tmp2306 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2306 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2306 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2305
  restore tmp2306

; -----------------------------------------------
; function __X64Encoder_cmp_m_r$5
; -----------------------------------------------
__X64Encoder_cmp_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2308 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2307 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2308 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2307 ], 56

  mov [ tmp2308 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2307 ]
  mov [ tmp2308 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2308 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2308 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2307
  restore tmp2308

; -----------------------------------------------
; function __X64Encoder_emitCore_incDec_m$6
; -----------------------------------------------
__X64Encoder_emitCore_incDec_m$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2319 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dataSize EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  opcode EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  tmp2309 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2310 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2313 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2316 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2319 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2310 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2310 ]
  jnz l2311

  mov dword [ opcode ], 254

  jmp l2312

l2311:

  mov dword [ opcode ], 255

  mov dword [ tmp2310 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2310 ]
  jnz l2314

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2315

l2314:

  mov dword [ tmp2310 ], 8

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2310 ]
  jnz l2317

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

l2317:

l2318:

l2315:

l2312:

  mov [ tmp2319 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2319 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2319 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2319 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore operationId
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore opcode
  restore tmp2309
  restore tmp2310
  restore tmp2313
  restore tmp2316
  restore tmp2319

; -----------------------------------------------
; function __X64Encoder_inc_r$1
; -----------------------------------------------
__X64Encoder_inc_r$1_vcall:
__X64Encoder_inc_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2322 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2320 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2321 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2322 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2320 ], 254

  mov dword [ tmp2321 ], 0

  mov [ tmp2322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2321 ]
  mov [ tmp2322 + Variant_t.value], rax

  lea rcx , [ this ]
  mov edx , dword [ tmp2320 ]
  lea r8 , [ tmp2322 ]
  lea r9 , [ reg ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2320
  restore tmp2321
  restore tmp2322

; -----------------------------------------------
; function __X64Encoder_inc_m$5
; -----------------------------------------------
__X64Encoder_inc_m$5_vcall:
__X64Encoder_inc_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2324 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2323 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2324 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2323 ], 0

  mov [ tmp2324 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2323 ]
  mov [ tmp2324 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2323 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2324 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2323 ]
  push rax
  call  __X64Encoder_emitCore_incDec_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2324 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2323
  restore tmp2324

; -----------------------------------------------
; function __X64Encoder_dec_r$1
; -----------------------------------------------
__X64Encoder_dec_r$1_vcall:
__X64Encoder_dec_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2327 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2325 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2326 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2327 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2325 ], 254

  mov dword [ tmp2326 ], 1

  mov [ tmp2327 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2326 ]
  mov [ tmp2327 + Variant_t.value], rax

  lea rcx , [ this ]
  mov edx , dword [ tmp2325 ]
  lea r8 , [ tmp2327 ]
  lea r9 , [ reg ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2327 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2325
  restore tmp2326
  restore tmp2327

; -----------------------------------------------
; function __X64Encoder_dec_m$5
; -----------------------------------------------
__X64Encoder_dec_m$5_vcall:
__X64Encoder_dec_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2329 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2328 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2329 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2328 ], 1

  mov [ tmp2329 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2328 ]
  mov [ tmp2329 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2328 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2329 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2328 ]
  push rax
  call  __X64Encoder_emitCore_incDec_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2329 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2328
  restore tmp2329

; -----------------------------------------------
; function __X64Encoder_test_r_r$2
; -----------------------------------------------
__X64Encoder_test_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg1 EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg2 EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2331 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2330 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg1 ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ reg2 ], xmm0
  xor eax, eax
  mov [tmp2331 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2330 ], 132

  mov [ tmp2331 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2330 ]
  mov [ tmp2331 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2331 ]
  lea r8 , [ reg1 ]
  lea r9 , [ reg2 ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2331 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore reg1
  restore reg2
  restore tmp2330
  restore tmp2331

; -----------------------------------------------
; function __X64Encoder_test_m_r$5
; -----------------------------------------------
__X64Encoder_test_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg2 EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2333 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2332 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2334 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2335 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2336 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ reg2 ], xmm0
  xor eax, eax
  mov [tmp2333 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2332 ], 132

  mov [ tmp2333 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2332 ]
  mov [ tmp2333 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2332 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2334 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2335 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2336 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2333 ]
  mov r8d , dword [ tmp2332 ]
  mov r9d , dword [ tmp2334 ]
  mov  eax, dword [ tmp2335 ]
  push rax
  mov  eax, dword [ tmp2336 ]
  push rax
  lea rax, [ reg2 ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2333 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore reg2
  restore tmp2332
  restore tmp2333
  restore tmp2334
  restore tmp2335
  restore tmp2336

; -----------------------------------------------
; function __X64Encoder_test_m_imm$6
; -----------------------------------------------
__X64Encoder_test_m_imm$6_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_test_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  dataSize EQU rbp - 108 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  tmp2337 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2338 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2341 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax

  ; code
  ; ----

  mov dword [ tmp2337 ], 0

  lea rcx , [ this ]
  mov edx , dword [ tmp2337 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ dataSize ]
  push rax
  call  __X64Encoder_emitCore_unaryGroup_m$6
  add rsp, 24

  mov dword [ tmp2337 ], 1

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2337 ]
  jnz l2339

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1

  jmp l2340

l2339:

  mov dword [ tmp2337 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2337 ]
  jnz l2342

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitWord$1

  jmp l2343

l2342:

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitDword$1

l2343:

l2340:


  ; clean frame
  ; -----------

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2337
  restore tmp2338
  restore tmp2341

; -----------------------------------------------
; function __X64Encoder_test_r_imm$2
; -----------------------------------------------
__X64Encoder_test_r_imm$2_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__X64Encoder_test_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 7 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp2345 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2346 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2348 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  reg EQU rbp - 92 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 6 )
  tmp2344 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2347 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp2351 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2354 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2357 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ reg ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2345 + Variant_t.type], eax
  mov [tmp2346 + Variant_t.type], eax
  mov [tmp2348 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2346 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp2346 + Variant_t.value], rax

  mov dword [ tmp2347 ], 15

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2347 ]
  mov [ tmp2348 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2346 ]
  lea rdx , [ tmp2348 ]
  lea r8 , [ tmp2345 ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp2347 ], 0

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2347 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx, [ tmp2345 ]
  lea rdx, [ tmp2348 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2349

  mov dword [ tmp2347 ], 0

  mov eax, dword [ reg ]
  cmp eax, dword [ tmp2347 ]
  jnz l2352

  mov dword [ tmp2347 ], 168

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2347 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2348 ]
  call  __X64Encoder_emitByte$1

  jmp l2353

l2352:

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2348 ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2347 ], 169

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2347 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2348 ]
  call  __X64Encoder_emitByte$1

l2353:

  jmp l2350

l2349:

  mov dword [ tmp2347 ], 0

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2347 ]
  mov [ tmp2348 + Variant_t.value], rax

  mov [ tmp2345 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg ]
  mov [ tmp2345 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2348 ]
  lea r8 , [ tmp2345 ]
  call  __X64Encoder_emitCore_unaryGroup_r$2

l2350:

  mov ecx , dword [ reg ]
  lea  rax , [ tmp2351 ]
  call  X64_IsReg8

  mov dword [ tmp2354 ], 1

  mov eax, dword [ tmp2351 ]
  cmp eax, dword [ tmp2354 ]
  jnz l2355

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1

  jmp l2356

l2355:

  mov ecx , dword [ reg ]
  lea  rax , [ tmp2351 ]
  call  X64_IsReg16

  mov dword [ tmp2357 ], 1

  mov eax, dword [ tmp2351 ]
  cmp eax, dword [ tmp2357 ]
  jnz l2358

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitWord$1

  jmp l2359

l2358:

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitDword$1

l2359:

l2356:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2345 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2346 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2348 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore reg
  restore imm
  restore tmp2344
  restore tmp2345
  restore tmp2346
  restore tmp2347
  restore tmp2348
  restore tmp2351
  restore tmp2354
  restore tmp2357

; -----------------------------------------------
; function __X64Encoder_not_r$1
; -----------------------------------------------
__X64Encoder_not_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2361 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2360 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2361 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2360 ], 2

  mov [ tmp2361 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2360 ]
  mov [ tmp2361 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2361 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_unaryGroup_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2361 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2360
  restore tmp2361

; -----------------------------------------------
; function __X64Encoder_neg_r$1
; -----------------------------------------------
__X64Encoder_neg_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2363 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2362 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2363 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2362 ], 3

  mov [ tmp2363 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2362 ]
  mov [ tmp2363 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2363 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_unaryGroup_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2363 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2362
  restore tmp2363

; -----------------------------------------------
; function __X64Encoder_mul_r$1
; -----------------------------------------------
__X64Encoder_mul_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2365 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2364 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2365 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2364 ], 4

  mov [ tmp2365 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2364 ]
  mov [ tmp2365 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2365 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_unaryGroup_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2365 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2364
  restore tmp2365

; -----------------------------------------------
; function __X64Encoder_imul_r$1
; -----------------------------------------------
__X64Encoder_imul_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2367 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2366 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2367 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2366 ], 5

  mov [ tmp2367 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2366 ]
  mov [ tmp2367 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2367 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_unaryGroup_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2367 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2366
  restore tmp2367

; -----------------------------------------------
; function __X64Encoder_div_r$1
; -----------------------------------------------
__X64Encoder_div_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2369 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2368 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2369 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2368 ], 6

  mov [ tmp2369 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2368 ]
  mov [ tmp2369 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2369 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_unaryGroup_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2369 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2368
  restore tmp2369

; -----------------------------------------------
; function __X64Encoder_idiv_r$1
; -----------------------------------------------
__X64Encoder_idiv_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2371 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2370 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2371 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2370 ], 7

  mov [ tmp2371 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2370 ]
  mov [ tmp2371 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2371 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_unaryGroup_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2371 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2370
  restore tmp2371

; -----------------------------------------------
; function __X64Encoder_not_m$5
; -----------------------------------------------
__X64Encoder_not_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  base EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2372 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2373 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ base ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  mov dword [ tmp2372 ], 2

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2373 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2372 ]
  lea r8 , [ base ]
  lea r9 , [ scale ]
  lea rax, [ index ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2373 ]
  push rax
  call  __X64Encoder_emitCore_unaryGroup_m$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore base
  restore scale
  restore index
  restore disp
  restore dataSize
  restore tmp2372
  restore tmp2373

; -----------------------------------------------
; function __X64Encoder_neg_m$5
; -----------------------------------------------
__X64Encoder_neg_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  base EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2374 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2375 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ base ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  mov dword [ tmp2374 ], 3

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2375 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2374 ]
  lea r8 , [ base ]
  lea r9 , [ scale ]
  lea rax, [ index ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2375 ]
  push rax
  call  __X64Encoder_emitCore_unaryGroup_m$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore base
  restore scale
  restore index
  restore disp
  restore dataSize
  restore tmp2374
  restore tmp2375

; -----------------------------------------------
; function __X64Encoder_mul_m$5
; -----------------------------------------------
__X64Encoder_mul_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  base EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2376 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2377 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ base ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  mov dword [ tmp2376 ], 4

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2377 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2376 ]
  lea r8 , [ base ]
  lea r9 , [ scale ]
  lea rax, [ index ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2377 ]
  push rax
  call  __X64Encoder_emitCore_unaryGroup_m$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore base
  restore scale
  restore index
  restore disp
  restore dataSize
  restore tmp2376
  restore tmp2377

; -----------------------------------------------
; function __X64Encoder_imul_m$5
; -----------------------------------------------
__X64Encoder_imul_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  base EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2378 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2379 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ base ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  mov dword [ tmp2378 ], 5

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2379 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2378 ]
  lea r8 , [ base ]
  lea r9 , [ scale ]
  lea rax, [ index ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2379 ]
  push rax
  call  __X64Encoder_emitCore_unaryGroup_m$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore base
  restore scale
  restore index
  restore disp
  restore dataSize
  restore tmp2378
  restore tmp2379

; -----------------------------------------------
; function __X64Encoder_div_m$5
; -----------------------------------------------
__X64Encoder_div_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  base EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2380 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2381 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ base ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  mov dword [ tmp2380 ], 6

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2381 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2380 ]
  lea r8 , [ base ]
  lea r9 , [ scale ]
  lea rax, [ index ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2381 ]
  push rax
  call  __X64Encoder_emitCore_unaryGroup_m$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore base
  restore scale
  restore index
  restore disp
  restore dataSize
  restore tmp2380
  restore tmp2381

; -----------------------------------------------
; function __X64Encoder_idiv_m$5
; -----------------------------------------------
__X64Encoder_idiv_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  base EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  index EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2382 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2383 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ base ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ index ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  mov dword [ tmp2382 ], 7

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2383 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2382 ]
  lea r8 , [ base ]
  lea r9 , [ scale ]
  lea rax, [ index ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2383 ]
  push rax
  call  __X64Encoder_emitCore_unaryGroup_m$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore base
  restore scale
  restore index
  restore disp
  restore dataSize
  restore tmp2382
  restore tmp2383

; -----------------------------------------------
; function __X64Encoder_emitCore_pushPop_r$2
; -----------------------------------------------
__X64Encoder_emitCore_pushPop_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp2393 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2394 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2395 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2384 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2385 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2386 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2387 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2390 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2393 + Variant_t.type], eax
  mov [tmp2394 + Variant_t.type], eax
  mov [tmp2395 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2386 ], eax

  mov ecx , dword [ tmp2386 ]
  lea  rax , [ tmp2385 ]
  call  X64_IsReg16

  mov dword [ tmp2387 ], 1

  mov eax, dword [ tmp2385 ]
  cmp eax, dword [ tmp2387 ]
  jnz l2388

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2389

l2388:

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2386 ], eax

  mov ecx , dword [ tmp2386 ]
  lea  rax , [ tmp2385 ]
  call  X64_IsReg64

  mov dword [ tmp2390 ], 1

  mov eax, dword [ tmp2385 ]
  cmp eax, dword [ tmp2390 ]
  jz l2391

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal553
  lea rcx , [ __literal553 ]
  call qword [rbx + 8 * 41 ]

l2391:

l2392:

l2389:

  mov dword [ tmp2386 ], 7

  mov [ tmp2395 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2386 ]
  mov [ tmp2395 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ reg ]
  lea rdx , [ tmp2395 ]
  lea r8 , [ tmp2394 ]
  call qword [rbx + 8 * 35 ]

  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2394 ]
  lea  r8 , [ tmp2393 ]
  call  __MOLD_VariantAdd

  lea rcx , [ this ]
  lea rdx , [ tmp2393 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2394 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2395 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore opcode
  restore reg
  restore tmp2384
  restore tmp2385
  restore tmp2386
  restore tmp2387
  restore tmp2390
  restore tmp2393
  restore tmp2394
  restore tmp2395

; -----------------------------------------------
; function __X64Encoder_push_r$1
; -----------------------------------------------
__X64Encoder_push_r$1_vcall:
__X64Encoder_push_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2397 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2396 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2397 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2396 ], 80

  mov [ tmp2397 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2396 ]
  mov [ tmp2397 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2397 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_pushPop_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2397 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2396
  restore tmp2397

; -----------------------------------------------
; function __X64Encoder_pop_r$1
; -----------------------------------------------
__X64Encoder_pop_r$1_vcall:
__X64Encoder_pop_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2399 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2398 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2399 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2398 ], 88

  mov [ tmp2399 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2398 ]
  mov [ tmp2399 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2399 ]
  lea r8 , [ reg ]
  call  __X64Encoder_emitCore_pushPop_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2399 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2398
  restore tmp2399

; -----------------------------------------------
; function __X64Encoder_pop_m$5
; -----------------------------------------------
__X64Encoder_pop_m$5_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_pop_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2407 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2408 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dataSize EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2400 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2401 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp2404 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2407 + Variant_t.type], eax
  mov [tmp2408 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2401 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2401 ]
  jnz l2402

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2403

l2402:

  mov dword [ tmp2401 ], 8

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2401 ]
  jz l2405

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal554
  lea rcx , [ __literal554 ]
  call qword [rbx + 8 * 41 ]

l2405:

l2406:

l2403:

  mov dword [ tmp2401 ], 143

  mov [ tmp2407 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2401 ]
  mov [ tmp2407 + Variant_t.value], rax

  mov dword [ tmp2401 ], 0

  mov [ tmp2408 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2401 ]
  mov [ tmp2408 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2407 ]
  lea r8 , [ tmp2408 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2407 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2408 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2400
  restore tmp2401
  restore tmp2404
  restore tmp2407
  restore tmp2408

; -----------------------------------------------
; function __X64Encoder_push_m$5
; -----------------------------------------------
__X64Encoder_push_m$5_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_push_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2416 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2417 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dataSize EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2409 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2410 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp2413 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2416 + Variant_t.type], eax
  mov [tmp2417 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2410 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2410 ]
  jnz l2411

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2412

l2411:

  mov dword [ tmp2410 ], 8

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2410 ]
  jz l2414

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal554
  lea rcx , [ __literal554 ]
  call qword [rbx + 8 * 41 ]

l2414:

l2415:

l2412:

  mov dword [ tmp2410 ], 255

  mov [ tmp2416 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2410 ]
  mov [ tmp2416 + Variant_t.value], rax

  mov dword [ tmp2410 ], 6

  mov [ tmp2417 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2410 ]
  mov [ tmp2417 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2416 ]
  lea r8 , [ tmp2417 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2417 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2409
  restore tmp2410
  restore tmp2413
  restore tmp2416
  restore tmp2417

; -----------------------------------------------
; function __X64Encoder_pushf$0
; -----------------------------------------------
__X64Encoder_pushf$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2419 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2418 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2419 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2418 ], 156

  mov [ tmp2419 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2418 ]
  mov [ tmp2419 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2419 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2419 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2418
  restore tmp2419

; -----------------------------------------------
; function __X64Encoder_popf$0
; -----------------------------------------------
__X64Encoder_popf$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2421 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2420 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2421 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2420 ], 157

  mov [ tmp2421 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2420 ]
  mov [ tmp2421 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2421 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2421 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2420
  restore tmp2421

; -----------------------------------------------
; function __X64Encoder_emitCore_inOut$3
; -----------------------------------------------
__X64Encoder_emitCore_inOut$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  tmp2426 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  opcode EQU rbp - 44 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  regData EQU rbp - 48 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  portNumber EQU rbp - 52 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2422 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2423 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp2427 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2430 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2431 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcode ], edx
  mov dword [ regData ], r8d
  mov dword [ portNumber ], r9d
  xor eax, eax
  mov [tmp2426 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2423 ], 0

  mov eax, dword [ regData ]
  cmp eax, dword [ tmp2423 ]
  jnz l2424

  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2426 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2426 ]
  call  __X64Encoder_emitByte$1

  jmp l2425

l2424:

  mov eax, dword [ regData ]
  cmp eax, dword [ X64_AX ]
  jnz l2428

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  mov dword [ tmp2430 ], 1

  mov eax, dword [ opcode ]
  add eax, dword [ tmp2430 ]
  mov dword [ tmp2423 ], eax

  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2423 ]
  mov [ tmp2426 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2426 ]
  call  __X64Encoder_emitByte$1

  jmp l2429

l2428:

  mov eax, dword [ regData ]
  cmp eax, dword [ X64_EAX ]
  jnz l2432

  mov dword [ tmp2430 ], 1

  mov eax, dword [ opcode ]
  add eax, dword [ tmp2430 ]
  mov dword [ tmp2423 ], eax

  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2423 ]
  mov [ tmp2426 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2426 ]
  call  __X64Encoder_emitByte$1

  jmp l2433

l2432:

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal555
  lea rcx , [ __literal555 ]
  call qword [rbx + 8 * 41 ]

l2433:

l2429:

l2425:

  mov dword [ tmp2423 ], 0

  mov eax, dword [ portNumber ]
  cmp eax, dword [ tmp2423 ]
  jl l2434

  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ portNumber ]
  mov [ tmp2426 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2426 ]
  call  __X64Encoder_emitByte$1

l2434:

l2435:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore opcode
  restore regData
  restore portNumber
  restore tmp2422
  restore tmp2423
  restore tmp2426
  restore tmp2427
  restore tmp2430
  restore tmp2431

; -----------------------------------------------
; function __X64Encoder_in_r_imm$2
; -----------------------------------------------
__X64Encoder_in_r_imm$2_vcall:
__X64Encoder_in_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2436 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2437 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2438 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  mov dword [ tmp2436 ], 228

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2437 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2438 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2436 ]
  mov r8d , dword [ tmp2437 ]
  mov r9d , dword [ tmp2438 ]
  call  __X64Encoder_emitCore_inOut$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2436
  restore tmp2437
  restore tmp2438

; -----------------------------------------------
; function __X64Encoder_out_imm_r$2
; -----------------------------------------------
__X64Encoder_out_imm_r$2_vcall:
__X64Encoder_out_imm_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2439 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2440 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2441 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ imm ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0

  ; code
  ; ----

  mov dword [ tmp2439 ], 230

  cmp [ regSrc + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regSrc + Variant_t.value]
  mov dword [ tmp2440 ], eax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2441 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2439 ]
  mov r8d , dword [ tmp2440 ]
  mov r9d , dword [ tmp2441 ]
  call  __X64Encoder_emitCore_inOut$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore imm
  restore regSrc
  restore tmp2439
  restore tmp2440
  restore tmp2441

; -----------------------------------------------
; function __X64Encoder_in_r_dx$1
; -----------------------------------------------
__X64Encoder_in_r_dx$1_vcall:
__X64Encoder_in_r_dx$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2442 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2443 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2444 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0

  ; code
  ; ----

  mov dword [ tmp2442 ], 236

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2443 ], eax

  mov eax, dword [ X64_DX ]
  neg eax
  mov dword [ tmp2444 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2442 ]
  mov r8d , dword [ tmp2443 ]
  mov r9d , dword [ tmp2444 ]
  call  __X64Encoder_emitCore_inOut$3


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2442
  restore tmp2443
  restore tmp2444

; -----------------------------------------------
; function __X64Encoder_out_dx_r$1
; -----------------------------------------------
__X64Encoder_out_dx_r$1_vcall:
__X64Encoder_out_dx_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2445 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2446 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2447 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regSrc ], xmm0

  ; code
  ; ----

  mov dword [ tmp2445 ], 238

  cmp [ regSrc + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regSrc + Variant_t.value]
  mov dword [ tmp2446 ], eax

  mov eax, dword [ X64_DX ]
  neg eax
  mov dword [ tmp2447 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2445 ]
  mov r8d , dword [ tmp2446 ]
  mov r9d , dword [ tmp2447 ]
  call  __X64Encoder_emitCore_inOut$3


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regSrc
  restore tmp2445
  restore tmp2446
  restore tmp2447

; -----------------------------------------------
; function __X64Encoder_insb$0
; -----------------------------------------------
__X64Encoder_insb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2449 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2448 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2449 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2448 ], 108

  mov [ tmp2449 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2448 ]
  mov [ tmp2449 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2449 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2449 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2448
  restore tmp2449

; -----------------------------------------------
; function __X64Encoder_insw$0
; -----------------------------------------------
__X64Encoder_insw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2450 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2450 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2450 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_INSW ]
  mov [ tmp2450 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2450 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2450 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2450

; -----------------------------------------------
; function __X64Encoder_outsb$0
; -----------------------------------------------
__X64Encoder_outsb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2452 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2451 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2452 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2451 ], 110

  mov [ tmp2452 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2451 ]
  mov [ tmp2452 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2452 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2452 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2451
  restore tmp2452

; -----------------------------------------------
; function __X64Encoder_outsw$0
; -----------------------------------------------
__X64Encoder_outsw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2453 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2453 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2453 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_OUTSW ]
  mov [ tmp2453 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2453 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2453 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2453

; -----------------------------------------------
; function __X64Encoder_movsb$0
; -----------------------------------------------
__X64Encoder_movsb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2455 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2454 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2455 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2454 ], 164

  mov [ tmp2455 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2454 ]
  mov [ tmp2455 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2455 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2455 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2454
  restore tmp2455

; -----------------------------------------------
; function __X64Encoder_movsw$0
; -----------------------------------------------
__X64Encoder_movsw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2456 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2456 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2456 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_MOVSW ]
  mov [ tmp2456 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2456 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2456 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2456

; -----------------------------------------------
; function __X64Encoder_movsq$0
; -----------------------------------------------
__X64Encoder_movsq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2457 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2457 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2457 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_MOVSQ ]
  mov [ tmp2457 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2457 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2457 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2457

; -----------------------------------------------
; function __X64Encoder_cmpsb$0
; -----------------------------------------------
__X64Encoder_cmpsb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2459 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2458 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2459 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2458 ], 166

  mov [ tmp2459 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2458 ]
  mov [ tmp2459 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2459 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2459 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2458
  restore tmp2459

; -----------------------------------------------
; function __X64Encoder_cmpsw$0
; -----------------------------------------------
__X64Encoder_cmpsw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2460 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2460 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2460 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_CMPSW ]
  mov [ tmp2460 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2460 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2460 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2460

; -----------------------------------------------
; function __X64Encoder_stosb$0
; -----------------------------------------------
__X64Encoder_stosb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2462 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2461 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2462 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2461 ], 170

  mov [ tmp2462 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2461 ]
  mov [ tmp2462 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2462 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2462 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2461
  restore tmp2462

; -----------------------------------------------
; function __X64Encoder_stosw$0
; -----------------------------------------------
__X64Encoder_stosw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2463 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2463 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2463 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_STOSW ]
  mov [ tmp2463 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2463 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2463 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2463

; -----------------------------------------------
; function __X64Encoder_lodsb$0
; -----------------------------------------------
__X64Encoder_lodsb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2465 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2464 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2465 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2464 ], 172

  mov [ tmp2465 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2464 ]
  mov [ tmp2465 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2465 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2465 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2464
  restore tmp2465

; -----------------------------------------------
; function __X64Encoder_lodsw$0
; -----------------------------------------------
__X64Encoder_lodsw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2466 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2466 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2466 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_LODSW ]
  mov [ tmp2466 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2466 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2466 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2466

; -----------------------------------------------
; function __X64Encoder_scasb$0
; -----------------------------------------------
__X64Encoder_scasb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2468 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2467 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2468 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2467 ], 174

  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2467 ]
  mov [ tmp2468 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2468 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2467
  restore tmp2468

; -----------------------------------------------
; function __X64Encoder_scasw$0
; -----------------------------------------------
__X64Encoder_scasw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2469 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2469 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2469 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_SCASW ]
  mov [ tmp2469 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2469 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2469 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2469

; -----------------------------------------------
; function __X64Encoder_repne$0
; -----------------------------------------------
__X64Encoder_repne$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2471 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2470 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2471 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2470 ], 242

  mov [ tmp2471 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2470 ]
  mov [ tmp2471 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2471 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2471 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2470
  restore tmp2471

; -----------------------------------------------
; function __X64Encoder_repe$0
; -----------------------------------------------
__X64Encoder_repe$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2473 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2472 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2473 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2472 ], 243

  mov [ tmp2473 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2472 ]
  mov [ tmp2473 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2473 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2473 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2472
  restore tmp2473

; -----------------------------------------------
; function __X64Encoder_emitCore_jmp_rel8$2
; -----------------------------------------------
__X64Encoder_emitCore_jmp_rel8$2_vcall:
__X64Encoder_emitCore_jmp_rel8$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ rel ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore opcode
  restore rel

; -----------------------------------------------
; function __X64Encoder_emitCore_jmp_rel32$2
; -----------------------------------------------
__X64Encoder_emitCore_jmp_rel32$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ rel ]
  call  __X64Encoder_emitDword$1


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore opcode
  restore rel

; -----------------------------------------------
; function __X64Encoder_emitCore_jcc_rel$2
; -----------------------------------------------
__X64Encoder_emitCore_jcc_rel$2_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

  cmp [r8 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r8, [r8 + Variant_t.value]

__X64Encoder_emitCore_jcc_rel$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  tmp2480 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  opcode EQU rbp - 44 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  rel EQU rbp - 48 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 4 )
  tmp2474 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2476 EQU rbp - 56 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2477 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp2481 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ opcode ], edx
  mov dword [ rel ], r8d
  xor eax, eax
  mov [tmp2480 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2474 ], 0

  mov dword [ tmp2477 ], -126

  mov eax, dword [ rel ]
  cmp eax, dword [ tmp2477 ]
  jl l2475

  mov dword [ tmp2477 ], 133

  mov dword [ tmp2474 ], 0
  mov ecx, dword [ rel ]
  cmp ecx, dword [ tmp2477 ]
  setle byte [ tmp2474 ]

l2475:

  cmp dword [ tmp2474 ], 0
  jz l2478

  mov [ tmp2480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2480 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2480 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2481 ], 2

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2481 ]
  mov dword [ tmp2477 ], eax

  mov [ tmp2480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2477 ]
  mov [ tmp2480 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2480 ]
  call  __X64Encoder_emitByte$1

  jmp l2479

l2478:

  mov dword [ tmp2477 ], 15

  mov [ tmp2480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2477 ]
  mov [ tmp2480 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2480 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2481 ], 16

  mov eax, dword [ opcode ]
  add eax, dword [ tmp2481 ]
  mov dword [ tmp2477 ], eax

  mov [ tmp2480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2477 ]
  mov [ tmp2480 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2480 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2481 ], 6

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2481 ]
  mov dword [ tmp2477 ], eax

  mov [ tmp2480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2477 ]
  mov [ tmp2480 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2480 ]
  call  __X64Encoder_emitDword$1

l2479:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2480 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore opcode
  restore rel
  restore tmp2474
  restore tmp2476
  restore tmp2477
  restore tmp2480
  restore tmp2481

; -----------------------------------------------
; function __X64Encoder_jmp_rel$1
; -----------------------------------------------
__X64Encoder_jmp_rel$1_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__X64Encoder_jmp_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp2488 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2490 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 4 )
  tmp2482 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2484 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2485 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp2489 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2488 + Variant_t.type], eax
  mov [tmp2490 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2482 ], 0

  mov dword [ tmp2485 ], -126

  mov eax, dword [ rel ]
  cmp eax, dword [ tmp2485 ]
  jl l2483

  mov dword [ tmp2485 ], 133

  mov dword [ tmp2482 ], 0
  mov ecx, dword [ rel ]
  cmp ecx, dword [ tmp2485 ]
  setle byte [ tmp2482 ]

l2483:

  cmp dword [ tmp2482 ], 0
  jz l2486

  mov dword [ tmp2485 ], 235

  mov [ tmp2488 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2485 ]
  mov [ tmp2488 + Variant_t.value], rax

  mov dword [ tmp2489 ], 2

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2489 ]
  mov dword [ tmp2485 ], eax

  mov [ tmp2490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2485 ]
  mov [ tmp2490 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2488 ]
  lea r8 , [ tmp2490 ]
  call  __X64Encoder_emitCore_jmp_rel8$2

  jmp l2487

l2486:

  mov dword [ tmp2485 ], 233

  mov [ tmp2490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2485 ]
  mov [ tmp2490 + Variant_t.value], rax

  mov dword [ tmp2489 ], 5

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2489 ]
  mov dword [ tmp2485 ], eax

  mov [ tmp2488 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2485 ]
  mov [ tmp2488 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2490 ]
  lea r8 , [ tmp2488 ]
  call  __X64Encoder_emitCore_jmp_rel32$2

l2487:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2488 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2490 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2482
  restore tmp2484
  restore tmp2485
  restore tmp2488
  restore tmp2489
  restore tmp2490

; -----------------------------------------------
; function __X64Encoder_jmp_r$1
; -----------------------------------------------
__X64Encoder_jmp_r$1_vcall:
__X64Encoder_jmp_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2498 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2499 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2500 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2491 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2492 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2493 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2494 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2497 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2498 + Variant_t.type], eax
  mov [tmp2499 + Variant_t.type], eax
  mov [tmp2500 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2493 ], eax

  mov ecx , dword [ tmp2493 ]
  lea  rax , [ tmp2492 ]
  call  X64_IsReg16

  mov dword [ tmp2494 ], 1

  mov eax, dword [ tmp2492 ]
  cmp eax, dword [ tmp2494 ]
  jnz l2495

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

l2495:

l2496:

  mov dword [ tmp2493 ], 255

  mov dword [ tmp2497 ], 4

  mov [ tmp2498 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2497 ]
  mov [ tmp2498 + Variant_t.value], rax

  mov dword [ tmp2497 ], 7

  mov [ tmp2500 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2497 ]
  mov [ tmp2500 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ reg ]
  lea rdx , [ tmp2500 ]
  lea r8 , [ tmp2499 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  mov edx , dword [ tmp2493 ]
  lea r8 , [ tmp2498 ]
  lea r9 , [ tmp2499 ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2498 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2499 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2500 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2491
  restore tmp2492
  restore tmp2493
  restore tmp2494
  restore tmp2497
  restore tmp2498
  restore tmp2499
  restore tmp2500

; -----------------------------------------------
; function __X64Encoder_jmp_m$5
; -----------------------------------------------
__X64Encoder_jmp_m$5_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_jmp_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2505 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2506 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dataSize EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2501 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2502 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2505 + Variant_t.type], eax
  mov [tmp2506 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2502 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2502 ]
  jnz l2503

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

l2503:

l2504:

  mov dword [ tmp2502 ], 255

  mov [ tmp2505 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2502 ]
  mov [ tmp2505 + Variant_t.value], rax

  mov dword [ tmp2502 ], 4

  mov [ tmp2506 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2502 ]
  mov [ tmp2506 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2505 ]
  lea r8 , [ tmp2506 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2505 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2506 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2501
  restore tmp2502
  restore tmp2505
  restore tmp2506

; -----------------------------------------------
; function __X64Encoder_jo_rel$1
; -----------------------------------------------
__X64Encoder_jo_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2507 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2508 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2507 ], 112

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2508 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2507 ]
  mov r8d , dword [ tmp2508 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2507
  restore tmp2508

; -----------------------------------------------
; function __X64Encoder_jno_rel$1
; -----------------------------------------------
__X64Encoder_jno_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2509 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2510 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2509 ], 113

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2510 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2509 ]
  mov r8d , dword [ tmp2510 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2509
  restore tmp2510

; -----------------------------------------------
; function __X64Encoder_jb_rel$1
; -----------------------------------------------
__X64Encoder_jb_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2511 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2512 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2511 ], 114

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2512 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2511 ]
  mov r8d , dword [ tmp2512 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2511
  restore tmp2512

; -----------------------------------------------
; function __X64Encoder_jae_rel$1
; -----------------------------------------------
__X64Encoder_jae_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2513 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2514 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2513 ], 115

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2514 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2513 ]
  mov r8d , dword [ tmp2514 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2513
  restore tmp2514

; -----------------------------------------------
; function __X64Encoder_jz_rel$1
; -----------------------------------------------
__X64Encoder_jz_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2515 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2516 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2515 ], 116

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2516 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2515 ]
  mov r8d , dword [ tmp2516 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2515
  restore tmp2516

; -----------------------------------------------
; function __X64Encoder_jnz_rel$1
; -----------------------------------------------
__X64Encoder_jnz_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2517 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2518 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2517 ], 117

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2518 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2517 ]
  mov r8d , dword [ tmp2518 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2517
  restore tmp2518

; -----------------------------------------------
; function __X64Encoder_jbe_rel$1
; -----------------------------------------------
__X64Encoder_jbe_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2519 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2520 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2519 ], 118

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2520 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2519 ]
  mov r8d , dword [ tmp2520 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2519
  restore tmp2520

; -----------------------------------------------
; function __X64Encoder_ja_rel$1
; -----------------------------------------------
__X64Encoder_ja_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2521 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2522 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2521 ], 119

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2522 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2521 ]
  mov r8d , dword [ tmp2522 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2521
  restore tmp2522

; -----------------------------------------------
; function __X64Encoder_js_rel$1
; -----------------------------------------------
__X64Encoder_js_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2523 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2524 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2523 ], 120

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2524 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2523 ]
  mov r8d , dword [ tmp2524 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2523
  restore tmp2524

; -----------------------------------------------
; function __X64Encoder_jns_rel$1
; -----------------------------------------------
__X64Encoder_jns_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2525 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2526 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2525 ], 121

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2526 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2525 ]
  mov r8d , dword [ tmp2526 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2525
  restore tmp2526

; -----------------------------------------------
; function __X64Encoder_jp_rel$1
; -----------------------------------------------
__X64Encoder_jp_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2527 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2528 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2527 ], 122

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2528 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2527 ]
  mov r8d , dword [ tmp2528 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2527
  restore tmp2528

; -----------------------------------------------
; function __X64Encoder_jnp_rel$1
; -----------------------------------------------
__X64Encoder_jnp_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2529 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2530 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2529 ], 123

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2530 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2529 ]
  mov r8d , dword [ tmp2530 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2529
  restore tmp2530

; -----------------------------------------------
; function __X64Encoder_jl_rel$1
; -----------------------------------------------
__X64Encoder_jl_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2531 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2532 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2531 ], 124

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2532 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2531 ]
  mov r8d , dword [ tmp2532 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2531
  restore tmp2532

; -----------------------------------------------
; function __X64Encoder_jge_rel$1
; -----------------------------------------------
__X64Encoder_jge_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2533 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2534 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2533 ], 125

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2534 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2533 ]
  mov r8d , dword [ tmp2534 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2533
  restore tmp2534

; -----------------------------------------------
; function __X64Encoder_jle_rel$1
; -----------------------------------------------
__X64Encoder_jle_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2535 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2536 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2535 ], 126

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2536 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2535 ]
  mov r8d , dword [ tmp2536 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2535
  restore tmp2536

; -----------------------------------------------
; function __X64Encoder_jg_rel$1
; -----------------------------------------------
__X64Encoder_jg_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rel EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2537 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2538 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rel ], xmm0

  ; code
  ; ----

  mov dword [ tmp2537 ], 127

  cmp [ rel + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rel + Variant_t.value]
  mov dword [ tmp2538 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2537 ]
  mov r8d , dword [ tmp2538 ]
  call  __X64Encoder_emitCore_jcc_rel$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2537
  restore tmp2538

; -----------------------------------------------
; function __X64Encoder_loopz_rel$1
; -----------------------------------------------
__X64Encoder_loopz_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2540 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2542 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2539 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2541 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2540 + Variant_t.type], eax
  mov [tmp2542 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2539 ], 225

  mov [ tmp2540 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2539 ]
  mov [ tmp2540 + Variant_t.value], rax

  mov dword [ tmp2541 ], 2

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2541 ]
  mov dword [ tmp2539 ], eax

  mov [ tmp2542 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2539 ]
  mov [ tmp2542 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2540 ]
  lea r8 , [ tmp2542 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2540 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2542 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2539
  restore tmp2540
  restore tmp2541
  restore tmp2542

; -----------------------------------------------
; function __X64Encoder_loopnz_rel$1
; -----------------------------------------------
__X64Encoder_loopnz_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2544 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2546 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2543 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2545 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2544 + Variant_t.type], eax
  mov [tmp2546 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2543 ], 224

  mov [ tmp2544 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2543 ]
  mov [ tmp2544 + Variant_t.value], rax

  mov dword [ tmp2545 ], 2

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2545 ]
  mov dword [ tmp2543 ], eax

  mov [ tmp2546 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2543 ]
  mov [ tmp2546 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2544 ]
  lea r8 , [ tmp2546 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2544 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2546 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2543
  restore tmp2544
  restore tmp2545
  restore tmp2546

; -----------------------------------------------
; function __X64Encoder_loop_rel$1
; -----------------------------------------------
__X64Encoder_loop_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2548 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2550 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2547 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2549 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2548 + Variant_t.type], eax
  mov [tmp2550 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2547 ], 226

  mov [ tmp2548 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2547 ]
  mov [ tmp2548 + Variant_t.value], rax

  mov dword [ tmp2549 ], 2

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2549 ]
  mov dword [ tmp2547 ], eax

  mov [ tmp2550 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2547 ]
  mov [ tmp2550 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2548 ]
  lea r8 , [ tmp2550 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2548 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2550 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2547
  restore tmp2548
  restore tmp2549
  restore tmp2550

; -----------------------------------------------
; function __X64Encoder_loopzd_rel$1
; -----------------------------------------------
__X64Encoder_loopzd_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp2552 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2554 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2551 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2553 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2552 + Variant_t.type], eax
  mov [tmp2554 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2551 ], 103

  mov [ tmp2552 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2551 ]
  mov [ tmp2552 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2552 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2551 ], 225

  mov [ tmp2552 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2551 ]
  mov [ tmp2552 + Variant_t.value], rax

  mov dword [ tmp2553 ], 3

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2553 ]
  mov dword [ tmp2551 ], eax

  mov [ tmp2554 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2551 ]
  mov [ tmp2554 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2552 ]
  lea r8 , [ tmp2554 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2552 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2554 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2551
  restore tmp2552
  restore tmp2553
  restore tmp2554

; -----------------------------------------------
; function __X64Encoder_loopnzd_rel$1
; -----------------------------------------------
__X64Encoder_loopnzd_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp2556 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2558 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2555 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2557 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2556 + Variant_t.type], eax
  mov [tmp2558 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2555 ], 103

  mov [ tmp2556 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2555 ]
  mov [ tmp2556 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2556 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2555 ], 224

  mov [ tmp2556 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2555 ]
  mov [ tmp2556 + Variant_t.value], rax

  mov dword [ tmp2557 ], 3

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2557 ]
  mov dword [ tmp2555 ], eax

  mov [ tmp2558 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2555 ]
  mov [ tmp2558 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2556 ]
  lea r8 , [ tmp2558 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2556 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2558 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2555
  restore tmp2556
  restore tmp2557
  restore tmp2558

; -----------------------------------------------
; function __X64Encoder_loopd_rel$1
; -----------------------------------------------
__X64Encoder_loopd_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp2560 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2562 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2559 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2561 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2560 + Variant_t.type], eax
  mov [tmp2562 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2559 ], 103

  mov [ tmp2560 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2559 ]
  mov [ tmp2560 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2560 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2559 ], 226

  mov [ tmp2560 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2559 ]
  mov [ tmp2560 + Variant_t.value], rax

  mov dword [ tmp2561 ], 3

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2561 ]
  mov dword [ tmp2559 ], eax

  mov [ tmp2562 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2559 ]
  mov [ tmp2562 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2560 ]
  lea r8 , [ tmp2562 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2560 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2562 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2559
  restore tmp2560
  restore tmp2561
  restore tmp2562

; -----------------------------------------------
; function __X64Encoder_jecxz_rel$1
; -----------------------------------------------
__X64Encoder_jecxz_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp2564 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2566 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2563 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2565 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2564 + Variant_t.type], eax
  mov [tmp2566 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2563 ], 103

  mov [ tmp2564 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2563 ]
  mov [ tmp2564 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2564 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2563 ], 227

  mov [ tmp2564 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2563 ]
  mov [ tmp2564 + Variant_t.value], rax

  mov dword [ tmp2565 ], 3

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2565 ]
  mov dword [ tmp2563 ], eax

  mov [ tmp2566 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2563 ]
  mov [ tmp2566 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2564 ]
  lea r8 , [ tmp2566 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2564 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2566 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2563
  restore tmp2564
  restore tmp2565
  restore tmp2566

; -----------------------------------------------
; function __X64Encoder_jrcxz_rel$1
; -----------------------------------------------
__X64Encoder_jrcxz_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2568 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2570 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2567 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2569 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2568 + Variant_t.type], eax
  mov [tmp2570 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2567 ], 227

  mov [ tmp2568 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2567 ]
  mov [ tmp2568 + Variant_t.value], rax

  mov dword [ tmp2569 ], 2

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2569 ]
  mov dword [ tmp2567 ], eax

  mov [ tmp2570 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2567 ]
  mov [ tmp2570 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2568 ]
  lea r8 , [ tmp2570 ]
  call  __X64Encoder_emitCore_jmp_rel8$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2568 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2570 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2567
  restore tmp2568
  restore tmp2569
  restore tmp2570

; -----------------------------------------------
; function __X64Encoder_call_rel$1
; -----------------------------------------------
__X64Encoder_call_rel$1_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__X64Encoder_call_rel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2572 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2574 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  rel EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2571 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2573 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ rel ], edx
  xor eax, eax
  mov [tmp2572 + Variant_t.type], eax
  mov [tmp2574 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2571 ], 232

  mov [ tmp2572 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2571 ]
  mov [ tmp2572 + Variant_t.value], rax

  mov dword [ tmp2573 ], 5

  mov eax, dword [ rel ]
  sub eax, dword [ tmp2573 ]
  mov dword [ tmp2571 ], eax

  mov [ tmp2574 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2571 ]
  mov [ tmp2574 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2572 ]
  lea r8 , [ tmp2574 ]
  call  __X64Encoder_emitCore_jmp_rel32$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2572 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2574 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rel
  restore tmp2571
  restore tmp2572
  restore tmp2573
  restore tmp2574

; -----------------------------------------------
; function __X64Encoder_call_r$1
; -----------------------------------------------
__X64Encoder_call_r$1_vcall:
__X64Encoder_call_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2582 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2583 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2584 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2575 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2576 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2577 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2578 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2581 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2582 + Variant_t.type], eax
  mov [tmp2583 + Variant_t.type], eax
  mov [tmp2584 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2577 ], eax

  mov ecx , dword [ tmp2577 ]
  lea  rax , [ tmp2576 ]
  call  X64_IsReg16

  mov dword [ tmp2578 ], 1

  mov eax, dword [ tmp2576 ]
  cmp eax, dword [ tmp2578 ]
  jnz l2579

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

l2579:

l2580:

  mov dword [ tmp2577 ], 255

  mov dword [ tmp2581 ], 2

  mov [ tmp2582 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2581 ]
  mov [ tmp2582 + Variant_t.value], rax

  mov dword [ tmp2581 ], 7

  mov [ tmp2584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2581 ]
  mov [ tmp2584 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ reg ]
  lea rdx , [ tmp2584 ]
  lea r8 , [ tmp2583 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  mov edx , dword [ tmp2577 ]
  lea r8 , [ tmp2582 ]
  lea r9 , [ tmp2583 ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2582 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2583 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2575
  restore tmp2576
  restore tmp2577
  restore tmp2578
  restore tmp2581
  restore tmp2582
  restore tmp2583
  restore tmp2584

; -----------------------------------------------
; function __X64Encoder_call_m$5
; -----------------------------------------------
__X64Encoder_call_m$5_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_call_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2589 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2590 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dataSize EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp2585 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2586 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2589 + Variant_t.type], eax
  mov [tmp2590 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2586 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2586 ]
  jnz l2587

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

l2587:

l2588:

  mov dword [ tmp2586 ], 255

  mov [ tmp2589 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2586 ]
  mov [ tmp2589 + Variant_t.value], rax

  mov dword [ tmp2586 ], 2

  mov [ tmp2590 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2586 ]
  mov [ tmp2590 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2589 ]
  lea r8 , [ tmp2590 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2589 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2590 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2585
  restore tmp2586
  restore tmp2589
  restore tmp2590

; -----------------------------------------------
; function __X64Encoder_ret$0
; -----------------------------------------------
__X64Encoder_ret$0_vcall:
__X64Encoder_ret$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2592 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2591 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2592 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2591 ], 195

  mov [ tmp2592 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2591 ]
  mov [ tmp2592 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2592 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2592 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2591
  restore tmp2592

; -----------------------------------------------
; function __X64Encoder_ret_imm$1
; -----------------------------------------------
__X64Encoder_ret_imm$1_vcall:
__X64Encoder_ret_imm$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2594 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2593 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2594 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2593 ], 194

  mov [ tmp2594 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2593 ]
  mov [ tmp2594 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2594 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2594 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore imm
  restore tmp2593
  restore tmp2594

; -----------------------------------------------
; function __X64Encoder_retf$0
; -----------------------------------------------
__X64Encoder_retf$0_vcall:
__X64Encoder_retf$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2595 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2595 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_RETFQ ]
  mov [ tmp2595 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2595 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2595 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2595

; -----------------------------------------------
; function __X64Encoder_retf_imm$1
; -----------------------------------------------
__X64Encoder_retf_imm$1_vcall:
__X64Encoder_retf_imm$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2597 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2596 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2597 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

  mov dword [ tmp2596 ], 202

  mov [ tmp2597 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2596 ]
  mov [ tmp2597 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2597 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2597 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore imm
  restore tmp2596
  restore tmp2597

; -----------------------------------------------
; function __X64Encoder_mov_r_r$2
; -----------------------------------------------
__X64Encoder_mov_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2599 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2598 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2599 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2598 ], 136

  mov [ tmp2599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2598 ]
  mov [ tmp2599 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2599 ]
  lea r8 , [ regSrc ]
  lea r9 , [ regDst ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2599 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2598
  restore tmp2599

; -----------------------------------------------
; function __X64Encoder_mov_r_m$5
; -----------------------------------------------
__X64Encoder_mov_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2601 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2600 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2601 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2600 ], 136

  mov [ tmp2601 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2601 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2601 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2601 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2600
  restore tmp2601

; -----------------------------------------------
; function __X64Encoder_mov_m_r$5
; -----------------------------------------------
__X64Encoder_mov_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2603 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2602 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2604 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2605 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2606 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2603 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2602 ], 136

  mov [ tmp2603 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2602 ]
  mov [ tmp2603 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2602 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2604 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2605 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2606 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2603 ]
  mov r8d , dword [ tmp2602 ]
  mov r9d , dword [ tmp2604 ]
  mov  eax, dword [ tmp2605 ]
  push rax
  mov  eax, dword [ tmp2606 ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2603 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2602
  restore tmp2603
  restore tmp2604
  restore tmp2605
  restore tmp2606

; -----------------------------------------------
; function __X64Encoder_mov_r_imm$2
; -----------------------------------------------
__X64Encoder_mov_r_imm$2_vcall:
__X64Encoder_mov_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 12 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 7 )
  tmp2607 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp2609 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  regDstId EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )
  tmp2608 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 10 , readHits= 10 )
  tmp2610 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2611 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2612 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2615 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp2616 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2619 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2607 + Variant_t.type], eax
  mov [tmp2609 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2608 ], 7

  mov [ tmp2609 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2608 ]
  mov [ tmp2609 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ regDst ]
  lea rdx , [ tmp2609 ]
  lea r8 , [ tmp2607 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp2607 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2607 + Variant_t.value]
  mov dword [ regDstId ], eax

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2608 ], eax

  mov ecx , dword [ tmp2608 ]
  lea  rax , [ tmp2611 ]
  call  X64_IsReg8

  mov dword [ tmp2612 ], 1

  mov eax, dword [ tmp2611 ]
  cmp eax, dword [ tmp2612 ]
  jnz l2613

  mov dword [ tmp2615 ], 176

  mov eax, dword [ tmp2615 ]
  add eax, dword [ regDstId ]
  mov dword [ tmp2608 ], eax

  mov [ tmp2607 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2608 ]
  mov [ tmp2607 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2607 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1

  jmp l2614

l2613:

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2608 ], eax

  mov ecx , dword [ tmp2608 ]
  lea  rax , [ tmp2611 ]
  call  X64_IsReg16

  mov dword [ tmp2616 ], 1

  mov eax, dword [ tmp2611 ]
  cmp eax, dword [ tmp2616 ]
  jnz l2617

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  mov dword [ tmp2615 ], 184

  mov eax, dword [ tmp2615 ]
  add eax, dword [ regDstId ]
  mov dword [ tmp2608 ], eax

  mov [ tmp2607 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2608 ]
  mov [ tmp2607 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2607 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitWord$1

  jmp l2618

l2617:

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2608 ], eax

  mov ecx , dword [ tmp2608 ]
  lea  rax , [ tmp2611 ]
  call  X64_IsReg32

  mov dword [ tmp2619 ], 1

  mov eax, dword [ tmp2611 ]
  cmp eax, dword [ tmp2619 ]
  jnz l2620

  mov dword [ tmp2615 ], 184

  mov eax, dword [ tmp2615 ]
  add eax, dword [ regDstId ]
  mov dword [ tmp2608 ], eax

  mov [ tmp2607 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2608 ]
  mov [ tmp2607 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2607 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitDword$1

  jmp l2621

l2620:

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

  mov dword [ tmp2619 ], 0

  mov rax, -2147483649
  mov [ tmp2607 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2607 + Variant_t.value], rax

  lea rcx, [ imm ]
  lea rdx, [ tmp2607 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2622

  mov rax, 2147483648
  mov [ tmp2607 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2607 + Variant_t.value], rax

  lea  rcx , [ imm ]
  lea  rdx , [ tmp2607 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp2619 ], eax

l2622:

  cmp dword [ tmp2619 ], 0
  jz l2623

  mov dword [ tmp2608 ], 199

  mov dword [ tmp2615 ], 3

  mov [ tmp2607 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2615 ]
  mov [ tmp2607 + Variant_t.value], rax

  mov dword [ tmp2615 ], 0

  mov [ tmp2609 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2615 ]
  mov [ tmp2609 + Variant_t.value], rax

  lea rcx , [ this ]
  mov edx , dword [ tmp2608 ]
  lea r8 , [ tmp2607 ]
  lea r9 , [ tmp2609 ]
  lea rax, [ regDst ]
  push rax
  call  __X64Encoder_emitCore$4
  add rsp, 8

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitDword$1

  jmp l2624

l2623:

  mov dword [ tmp2615 ], 184

  mov eax, dword [ tmp2615 ]
  add eax, dword [ regDstId ]
  mov dword [ tmp2608 ], eax

  mov [ tmp2609 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2608 ]
  mov [ tmp2609 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2609 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitQword$1

l2624:

l2621:

l2618:

l2614:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2607 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2609 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore regDstId
  restore tmp2607
  restore tmp2608
  restore tmp2609
  restore tmp2610
  restore tmp2611
  restore tmp2612
  restore tmp2615
  restore tmp2616
  restore tmp2619

; -----------------------------------------------
; function __X64Encoder_mov_m_imm$6
; -----------------------------------------------
__X64Encoder_mov_m_imm$6_vcall:
__X64Encoder_mov_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2625 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2626 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  mov dword [ tmp2625 ], 198

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2626 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2625 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  mov  eax, dword [ tmp2626 ]
  push rax
  call  __X64Encoder_emitCore_m_imm$7
  add rsp, 32


  ; clean frame
  ; -----------

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2625
  restore tmp2626

; -----------------------------------------------
; function __X64Encoder_xchg_r_r$2
; -----------------------------------------------
__X64Encoder_xchg_r_r$2_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

  cmp [r8 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r8, [r8 + Variant_t.value]

__X64Encoder_xchg_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 7 )
  tmp2633 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp2634 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp2635 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  reg1 EQU rbp - 76 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 7 )
  reg2 EQU rbp - 80 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 4 )
  tmp2627 EQU rbp - 84 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2628 EQU rbp - 88 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2629 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2632 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 11 , readHits= 11 )
  tmp2641 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2642 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  regMask1 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  regMask2 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ reg1 ], edx
  mov dword [ reg2 ], r8d
  xor eax, eax
  mov [tmp2633 + Variant_t.type], eax
  mov [tmp2634 + Variant_t.type], eax
  mov [tmp2635 + Variant_t.type], eax

  ; code
  ; ----

  mov ecx , dword [ reg1 ]
  lea  rax , [ tmp2628 ]
  call  X64_IsReg8

  mov dword [ tmp2629 ], 1

  mov eax, dword [ tmp2628 ]
  cmp eax, dword [ tmp2629 ]
  jnz l2630

  mov dword [ tmp2632 ], 134

  mov [ tmp2633 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2632 ]
  mov [ tmp2633 + Variant_t.value], rax

  mov [ tmp2634 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg1 ]
  mov [ tmp2634 + Variant_t.value], rax

  mov [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg2 ]
  mov [ tmp2635 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2633 ]
  lea r8 , [ tmp2634 ]
  lea r9 , [ tmp2635 ]
  call  __X64Encoder_emitCore_r_r$3

  jmp l2631

l2630:

  mov dword [ tmp2629 ], 0

  mov eax, dword [ reg1 ]
  cmp eax, dword [ X64_EAX ]
  jnz l2636

  mov dword [ tmp2629 ], 0
  mov ecx, dword [ reg2 ]
  cmp ecx, dword [ X64_EAX ]
  setz byte [ tmp2629 ]

l2636:

  cmp dword [ tmp2629 ], 0
  jz l2637

  mov dword [ tmp2632 ], 49287

  mov [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2632 ]
  mov [ tmp2635 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2635 ]
  call  __X64Encoder_emitWord$1

  jmp l2638

l2637:

  mov [ tmp2634 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg1 ]
  mov [ tmp2634 + Variant_t.value], rax

  mov dword [ tmp2632 ], 7

  mov [ tmp2633 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2632 ]
  mov [ tmp2633 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2634 ]
  lea rdx , [ tmp2633 ]
  lea r8 , [ tmp2635 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2635 + Variant_t.value]
  mov dword [ regMask1 ], eax

  mov [ tmp2633 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg2 ]
  mov [ tmp2633 + Variant_t.value], rax

  mov dword [ tmp2632 ], 7

  mov [ tmp2634 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2632 ]
  mov [ tmp2634 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp2633 ]
  lea rdx , [ tmp2634 ]
  lea r8 , [ tmp2635 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2635 + Variant_t.value]
  mov dword [ regMask2 ], eax

  mov dword [ tmp2632 ], 0

  mov eax, dword [ regMask1 ]
  cmp eax, dword [ tmp2632 ]
  jnz l2639

  mov [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg1 ]
  mov [ tmp2635 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2635 ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2641 ], 144

  mov eax, dword [ tmp2641 ]
  add eax, dword [ regMask2 ]
  mov dword [ tmp2632 ], eax

  mov [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2632 ]
  mov [ tmp2635 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2635 ]
  call  __X64Encoder_emitByte$1

  jmp l2640

l2639:

  mov dword [ tmp2632 ], 0

  mov eax, dword [ regMask2 ]
  cmp eax, dword [ tmp2632 ]
  jnz l2643

  mov [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg1 ]
  mov [ tmp2635 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2635 ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2641 ], 144

  mov eax, dword [ tmp2641 ]
  add eax, dword [ regMask1 ]
  mov dword [ tmp2632 ], eax

  mov [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2632 ]
  mov [ tmp2635 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2635 ]
  call  __X64Encoder_emitByte$1

  jmp l2644

l2643:

  mov dword [ tmp2632 ], 135

  mov [ tmp2635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2632 ]
  mov [ tmp2635 + Variant_t.value], rax

  mov [ tmp2634 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg1 ]
  mov [ tmp2634 + Variant_t.value], rax

  mov [ tmp2633 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reg2 ]
  mov [ tmp2633 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2635 ]
  lea r8 , [ tmp2634 ]
  lea r9 , [ tmp2633 ]
  call  __X64Encoder_emitCore_r_r$3

l2644:

l2640:

l2638:

l2631:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2633 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2634 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2635 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore reg1
  restore reg2
  restore tmp2627
  restore tmp2628
  restore tmp2629
  restore tmp2632
  restore tmp2633
  restore tmp2634
  restore tmp2635
  restore tmp2641
  restore tmp2642
  restore regMask1
  restore regMask2

; -----------------------------------------------
; function __X64Encoder_cbw$0
; -----------------------------------------------
__X64Encoder_cbw$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2645 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2645 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2645 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_CBW ]
  mov [ tmp2645 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2645 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2645 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2645

; -----------------------------------------------
; function __X64Encoder_cwd$0
; -----------------------------------------------
__X64Encoder_cwd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2646 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2646 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2646 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_CWD ]
  mov [ tmp2646 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2646 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2646 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2646

; -----------------------------------------------
; function __X64Encoder_int_imm$1
; -----------------------------------------------
__X64Encoder_int_imm$1_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__X64Encoder_int_imm$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  tmp2651 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  imm8 EQU rbp - 44 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2647 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2648 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ imm8 ], edx
  xor eax, eax
  mov [tmp2651 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2648 ], 3

  mov eax, dword [ imm8 ]
  cmp eax, dword [ tmp2648 ]
  jnz l2649

  mov dword [ tmp2648 ], 204

  mov [ tmp2651 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2648 ]
  mov [ tmp2651 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2651 ]
  call  __X64Encoder_emitByte$1

  jmp l2650

l2649:

  mov dword [ tmp2648 ], 205

  mov [ tmp2651 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2648 ]
  mov [ tmp2651 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2651 ]
  call  __X64Encoder_emitByte$1

  mov [ tmp2651 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ imm8 ]
  mov [ tmp2651 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2651 ]
  call  __X64Encoder_emitByte$1

l2650:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2651 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore imm8
  restore tmp2647
  restore tmp2648
  restore tmp2651

; -----------------------------------------------
; function __X64Encoder_iret$0
; -----------------------------------------------
__X64Encoder_iret$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2652 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2652 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp2652 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_IRETQ ]
  mov [ tmp2652 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2652 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2652 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2652

; -----------------------------------------------
; function __X64Encoder_clc$0
; -----------------------------------------------
__X64Encoder_clc$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2654 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2653 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2654 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2653 ], 248

  mov [ tmp2654 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2653 ]
  mov [ tmp2654 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2654 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2654 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2653
  restore tmp2654

; -----------------------------------------------
; function __X64Encoder_stc$0
; -----------------------------------------------
__X64Encoder_stc$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2656 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2655 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2656 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2655 ], 249

  mov [ tmp2656 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2655 ]
  mov [ tmp2656 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2656 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2655
  restore tmp2656

; -----------------------------------------------
; function __X64Encoder_cli$0
; -----------------------------------------------
__X64Encoder_cli$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2658 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2657 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2658 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2657 ], 250

  mov [ tmp2658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2657 ]
  mov [ tmp2658 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2658 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2658 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2657
  restore tmp2658

; -----------------------------------------------
; function __X64Encoder_sti$0
; -----------------------------------------------
__X64Encoder_sti$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2660 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2659 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2660 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2659 ], 251

  mov [ tmp2660 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2660 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2660 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2660 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2659
  restore tmp2660

; -----------------------------------------------
; function __X64Encoder_cld$0
; -----------------------------------------------
__X64Encoder_cld$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2662 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2661 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2662 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2661 ], 252

  mov [ tmp2662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2661 ]
  mov [ tmp2662 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2662 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2662 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2661
  restore tmp2662

; -----------------------------------------------
; function __X64Encoder_std$0
; -----------------------------------------------
__X64Encoder_std$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2664 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2663 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2664 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2663 ], 253

  mov [ tmp2664 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2663 ]
  mov [ tmp2664 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2664 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2664 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2663
  restore tmp2664

; -----------------------------------------------
; function __X64Encoder_lea_r_m$5
; -----------------------------------------------
__X64Encoder_lea_r_m$5_vcall:
__X64Encoder_lea_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2666 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2665 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2667 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2668 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2669 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2666 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2665 ], 141

  mov [ tmp2666 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2665 ]
  mov [ tmp2666 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2665 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2667 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2668 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2669 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2666 ]
  mov r8d , dword [ tmp2665 ]
  mov r9d , dword [ tmp2667 ]
  mov  eax, dword [ tmp2668 ]
  push rax
  mov  eax, dword [ tmp2669 ]
  push rax
  lea rax, [ regDst ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2666 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2665
  restore tmp2666
  restore tmp2667
  restore tmp2668
  restore tmp2669

; -----------------------------------------------
; function __X64Encoder_lock$0
; -----------------------------------------------
__X64Encoder_lock$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2671 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2670 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2671 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2670 ], 240

  mov [ tmp2671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2670 ]
  mov [ tmp2671 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2671 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2671 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2670
  restore tmp2671

; -----------------------------------------------
; function __X64Encoder_connectTo$1
; -----------------------------------------------
__X64Encoder_connectTo$1_vcall:
__X64Encoder_connectTo$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  outputObject EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ outputObject ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ outputObject ]
  call __MOLD_VariantMove


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore outputObject
  restore rv

; -----------------------------------------------
; function __X64Encoder_rol_r_cl$1
; -----------------------------------------------
__X64Encoder_rol_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2673 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2672 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2673 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2672 ], 0

  mov [ tmp2673 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2672 ]
  mov [ tmp2673 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2673 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_shiftGroup_r_cl$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2673 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2672
  restore tmp2673

; -----------------------------------------------
; function __X64Encoder_ror_r_cl$1
; -----------------------------------------------
__X64Encoder_ror_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2675 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2674 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2675 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2674 ], 1

  mov [ tmp2675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2674 ]
  mov [ tmp2675 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2675 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_shiftGroup_r_cl$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2675 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2674
  restore tmp2675

; -----------------------------------------------
; function __X64Encoder_rcl_r_cl$1
; -----------------------------------------------
__X64Encoder_rcl_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2677 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2676 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2677 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2676 ], 2

  mov [ tmp2677 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2676 ]
  mov [ tmp2677 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2677 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_shiftGroup_r_cl$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2677 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2676
  restore tmp2677

; -----------------------------------------------
; function __X64Encoder_rcr_r_cl$1
; -----------------------------------------------
__X64Encoder_rcr_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2679 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2678 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2679 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2678 ], 3

  mov [ tmp2679 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2678 ]
  mov [ tmp2679 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2679 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_shiftGroup_r_cl$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2679 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2678
  restore tmp2679

; -----------------------------------------------
; function __X64Encoder_shl_r_cl$1
; -----------------------------------------------
__X64Encoder_shl_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2681 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2680 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2681 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2680 ], 4

  mov [ tmp2681 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2680 ]
  mov [ tmp2681 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2681 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_shiftGroup_r_cl$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2681 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2680
  restore tmp2681

; -----------------------------------------------
; function __X64Encoder_sal_r_cl$1
; -----------------------------------------------
__X64Encoder_sal_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  call  __X64Encoder_shl_r_cl$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regDst

; -----------------------------------------------
; function __X64Encoder_shr_r_cl$1
; -----------------------------------------------
__X64Encoder_shr_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2683 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2682 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2683 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2682 ], 5

  mov [ tmp2683 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2682 ]
  mov [ tmp2683 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2683 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_shiftGroup_r_cl$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2683 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2682
  restore tmp2683

; -----------------------------------------------
; function __X64Encoder_sar_r_cl$1
; -----------------------------------------------
__X64Encoder_sar_r_cl$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2685 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2684 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2685 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2684 ], 7

  mov [ tmp2685 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2684 ]
  mov [ tmp2685 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2685 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_shiftGroup_r_cl$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2685 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2684
  restore tmp2685

; -----------------------------------------------
; function __X64Encoder_rol_m_imm$6
; -----------------------------------------------
__X64Encoder_rol_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2687 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2686 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2688 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2687 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2686 ], 0

  mov [ tmp2687 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2686 ]
  mov [ tmp2687 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2686 ], eax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2688 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2687 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2686 ]
  push rax
  mov  eax, dword [ tmp2688 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_imm8$7
  add rsp, 32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2687 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2686
  restore tmp2687
  restore tmp2688

; -----------------------------------------------
; function __X64Encoder_ror_m_imm$6
; -----------------------------------------------
__X64Encoder_ror_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2690 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2689 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2691 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2690 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2689 ], 1

  mov [ tmp2690 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2689 ]
  mov [ tmp2690 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2689 ], eax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2691 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2690 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2689 ]
  push rax
  mov  eax, dword [ tmp2691 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_imm8$7
  add rsp, 32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2690 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2689
  restore tmp2690
  restore tmp2691

; -----------------------------------------------
; function __X64Encoder_rcl_m_imm$6
; -----------------------------------------------
__X64Encoder_rcl_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2693 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2692 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2694 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2693 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2692 ], 2

  mov [ tmp2693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2692 ]
  mov [ tmp2693 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2692 ], eax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2694 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2693 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2692 ]
  push rax
  mov  eax, dword [ tmp2694 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_imm8$7
  add rsp, 32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2693 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2692
  restore tmp2693
  restore tmp2694

; -----------------------------------------------
; function __X64Encoder_rcr_m_imm$6
; -----------------------------------------------
__X64Encoder_rcr_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2696 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2695 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2697 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2696 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2695 ], 3

  mov [ tmp2696 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2695 ]
  mov [ tmp2696 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2695 ], eax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2697 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2696 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2695 ]
  push rax
  mov  eax, dword [ tmp2697 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_imm8$7
  add rsp, 32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2696 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2695
  restore tmp2696
  restore tmp2697

; -----------------------------------------------
; function __X64Encoder_shl_m_imm$6
; -----------------------------------------------
__X64Encoder_shl_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2699 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2698 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2700 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2699 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2698 ], 4

  mov [ tmp2699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2698 ]
  mov [ tmp2699 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2698 ], eax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2700 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2699 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2698 ]
  push rax
  mov  eax, dword [ tmp2700 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_imm8$7
  add rsp, 32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2699 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2698
  restore tmp2699
  restore tmp2700

; -----------------------------------------------
; function __X64Encoder_sal_m_imm$6
; -----------------------------------------------
__X64Encoder_sal_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ imm ]
  push rax
  lea rax, [ dataSize ]
  push rax
  call  __X64Encoder_shl_m_imm$6
  add rsp, 24


  ; clean frame
  ; -----------

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize

; -----------------------------------------------
; function __X64Encoder_shr_m_imm$6
; -----------------------------------------------
__X64Encoder_shr_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2702 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2701 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2703 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2702 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2701 ], 5

  mov [ tmp2702 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2701 ]
  mov [ tmp2702 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2701 ], eax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2703 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2702 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2701 ]
  push rax
  mov  eax, dword [ tmp2703 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_imm8$7
  add rsp, 32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2702 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2701
  restore tmp2702
  restore tmp2703

; -----------------------------------------------
; function __X64Encoder_sar_m_imm$6
; -----------------------------------------------
__X64Encoder_sar_m_imm$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2705 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2704 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2706 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2705 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2704 ], 7

  mov [ tmp2705 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2704 ]
  mov [ tmp2705 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2704 ], eax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2706 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2705 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2704 ]
  push rax
  mov  eax, dword [ tmp2706 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_imm8$7
  add rsp, 32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2705 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm
  restore dataSize
  restore tmp2704
  restore tmp2705
  restore tmp2706

; -----------------------------------------------
; function __X64Encoder_rol_m_cl$5
; -----------------------------------------------
__X64Encoder_rol_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2708 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2707 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2708 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2707 ], 0

  mov [ tmp2708 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2707 ]
  mov [ tmp2708 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2707 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2708 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2707 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_cl$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2708 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2707
  restore tmp2708

; -----------------------------------------------
; function __X64Encoder_ror_m_cl$5
; -----------------------------------------------
__X64Encoder_ror_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2710 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2709 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2710 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2709 ], 1

  mov [ tmp2710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2709 ]
  mov [ tmp2710 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2709 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2710 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2709 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_cl$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2710 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2709
  restore tmp2710

; -----------------------------------------------
; function __X64Encoder_rcl_m_cl$5
; -----------------------------------------------
__X64Encoder_rcl_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2712 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2711 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2712 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2711 ], 2

  mov [ tmp2712 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2711 ]
  mov [ tmp2712 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2711 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2712 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2711 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_cl$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2712 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2711
  restore tmp2712

; -----------------------------------------------
; function __X64Encoder_rcr_m_cl$5
; -----------------------------------------------
__X64Encoder_rcr_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2714 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2713 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2714 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2713 ], 3

  mov [ tmp2714 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2713 ]
  mov [ tmp2714 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2713 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2714 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2713 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_cl$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2714 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2713
  restore tmp2714

; -----------------------------------------------
; function __X64Encoder_shl_m_cl$5
; -----------------------------------------------
__X64Encoder_shl_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2716 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2715 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2716 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2715 ], 4

  mov [ tmp2716 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2715 ]
  mov [ tmp2716 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2715 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2716 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2715 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_cl$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2716 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2715
  restore tmp2716

; -----------------------------------------------
; function __X64Encoder_sal_m_cl$5
; -----------------------------------------------
__X64Encoder_sal_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  lea rax, [ dataSize ]
  push rax
  call  __X64Encoder_shl_m_cl$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize

; -----------------------------------------------
; function __X64Encoder_shr_m_cl$5
; -----------------------------------------------
__X64Encoder_shr_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2718 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2717 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2718 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2717 ], 5

  mov [ tmp2718 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2717 ]
  mov [ tmp2718 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2717 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2718 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2717 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_cl$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2718 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2717
  restore tmp2718

; -----------------------------------------------
; function __X64Encoder_sar_m_cl$5
; -----------------------------------------------
__X64Encoder_sar_m_cl$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dataSize EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2720 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2719 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dataSize ], xmm0
  xor eax, eax
  mov [tmp2720 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2719 ], 7

  mov [ tmp2720 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2719 ]
  mov [ tmp2720 + Variant_t.value], rax

  cmp [ dataSize + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataSize + Variant_t.value]
  mov dword [ tmp2719 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2720 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  mov  eax, dword [ tmp2719 ]
  push rax
  call  __X64Encoder_emitCore_shiftGroup_m_cl$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2720 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2719
  restore tmp2720

; -----------------------------------------------
; function __X64Encoder_nop$0
; -----------------------------------------------
__X64Encoder_nop$0_vcall:
__X64Encoder_nop$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2722 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2721 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2722 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2721 ], 144

  mov [ tmp2722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2721 ]
  mov [ tmp2722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2722 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2721
  restore tmp2722

; -----------------------------------------------
; function __X64Encoder_nop_r$1
; -----------------------------------------------
__X64Encoder_nop_r$1_vcall:
__X64Encoder_nop_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2724 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2723 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2725 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2726 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2724 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2723 ], 7951

  mov [ tmp2724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2723 ]
  mov [ tmp2724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2724 ]
  call  __X64Encoder_emitWord$1

  mov dword [ tmp2723 ], 3

  mov dword [ tmp2725 ], 0

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2726 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2723 ]
  mov r8d , dword [ tmp2725 ]
  mov r9d , dword [ tmp2726 ]
  call  __X64Encoder_emitModRegRM$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2724 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2723
  restore tmp2724
  restore tmp2725
  restore tmp2726

; -----------------------------------------------
; function __X64Encoder_nop_m$5
; -----------------------------------------------
__X64Encoder_nop_m$5_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__X64Encoder_nop_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2734 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2735 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dataSize EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2727 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2728 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp2731 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ dataSize ], eax
  xor eax, eax
  mov [tmp2734 + Variant_t.type], eax
  mov [tmp2735 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2728 ], 2

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2728 ]
  jnz l2729

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  jmp l2730

l2729:

  mov dword [ tmp2728 ], 8

  mov eax, dword [ dataSize ]
  cmp eax, dword [ tmp2728 ]
  jnz l2732

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

l2732:

l2733:

l2730:

  mov dword [ tmp2728 ], 7951

  mov [ tmp2734 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2728 ]
  mov [ tmp2734 + Variant_t.value], rax

  mov dword [ tmp2728 ], 0

  mov [ tmp2735 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2728 ]
  mov [ tmp2735 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2734 ]
  lea r8 , [ tmp2735 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2734 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore dataSize
  restore tmp2727
  restore tmp2728
  restore tmp2731
  restore tmp2734
  restore tmp2735

; -----------------------------------------------
; function __X64Encoder_cmc$0
; -----------------------------------------------
__X64Encoder_cmc$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2737 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2736 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2737 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2736 ], 245

  mov [ tmp2737 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2736 ]
  mov [ tmp2737 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2737 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2737 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2736
  restore tmp2737

; -----------------------------------------------
; function __X64Encoder_hlt$0
; -----------------------------------------------
__X64Encoder_hlt$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2739 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2738 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2739 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2738 ], 244

  mov [ tmp2739 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2738 ]
  mov [ tmp2739 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2739 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2739 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2738
  restore tmp2739

; -----------------------------------------------
; function __X64Encoder_wait$0
; -----------------------------------------------
__X64Encoder_wait$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2741 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2740 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2741 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2740 ], 155

  mov [ tmp2741 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2740 ]
  mov [ tmp2741 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2741 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2741 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2740
  restore tmp2741

; -----------------------------------------------
; function __X64Encoder_xlatb$0
; -----------------------------------------------
__X64Encoder_xlatb$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2743 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2742 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2743 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2742 ], 215

  mov [ tmp2743 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2742 ]
  mov [ tmp2743 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2743 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2743 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2742
  restore tmp2743

; -----------------------------------------------
; function __X64Encoder_enter_imm16_imm8$2
; -----------------------------------------------
__X64Encoder_enter_imm16_imm8$2_vcall:
__X64Encoder_enter_imm16_imm8$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  disp EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  level EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2745 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2744 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ disp ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ level ], xmm0
  xor eax, eax
  mov [tmp2745 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2744 ], 200

  mov [ tmp2745 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2744 ]
  mov [ tmp2745 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2745 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ disp ]
  call  __X64Encoder_emitWord$1

  lea rcx , [ this ]
  lea rdx , [ level ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2745 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore disp
  restore level
  restore tmp2744
  restore tmp2745

; -----------------------------------------------
; function __X64Encoder_leave$0
; -----------------------------------------------
__X64Encoder_leave$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2747 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2746 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2747 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2746 ], 201

  mov [ tmp2747 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2746 ]
  mov [ tmp2747 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2747 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2747 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2746
  restore tmp2747

; -----------------------------------------------
; function __X64Encoder_push_imm8$1
; -----------------------------------------------
__X64Encoder_push_imm8$1_vcall:
__X64Encoder_push_imm8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2749 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2748 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2749 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2748 ], 106

  mov [ tmp2749 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2748 ]
  mov [ tmp2749 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2749 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2749 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore imm
  restore tmp2748
  restore tmp2749

; -----------------------------------------------
; function __X64Encoder_push_imm32$1
; -----------------------------------------------
__X64Encoder_push_imm32$1_vcall:
__X64Encoder_push_imm32$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  imm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2751 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2750 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2751 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2750 ], 104

  mov [ tmp2751 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2750 ]
  mov [ tmp2751 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2751 ]
  call  __X64Encoder_emitByte$1

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitDword$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2751 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore imm
  restore tmp2750
  restore tmp2751

; -----------------------------------------------
; function __X64Encoder_rol_r_imm$2
; -----------------------------------------------
__X64Encoder_rol_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2753 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2752 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2753 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2752 ], 0

  mov [ tmp2753 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2752 ]
  mov [ tmp2753 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2752 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2753 ]
  lea r8 , [ regDst ]
  mov r9d , dword [ tmp2752 ]
  call  __X64Encoder_emitCore_shiftGroup_r_imm8$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2753 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2752
  restore tmp2753

; -----------------------------------------------
; function __X64Encoder_ror_r_imm$2
; -----------------------------------------------
__X64Encoder_ror_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2755 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2754 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2755 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2754 ], 1

  mov [ tmp2755 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2754 ]
  mov [ tmp2755 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2754 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2755 ]
  lea r8 , [ regDst ]
  mov r9d , dword [ tmp2754 ]
  call  __X64Encoder_emitCore_shiftGroup_r_imm8$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2755 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2754
  restore tmp2755

; -----------------------------------------------
; function __X64Encoder_rcl_r_imm$2
; -----------------------------------------------
__X64Encoder_rcl_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2757 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2756 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2757 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2756 ], 2

  mov [ tmp2757 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2756 ]
  mov [ tmp2757 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2756 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2757 ]
  lea r8 , [ regDst ]
  mov r9d , dword [ tmp2756 ]
  call  __X64Encoder_emitCore_shiftGroup_r_imm8$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2757 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2756
  restore tmp2757

; -----------------------------------------------
; function __X64Encoder_rcr_r_imm$2
; -----------------------------------------------
__X64Encoder_rcr_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2759 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2758 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2759 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2758 ], 3

  mov [ tmp2759 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2758 ]
  mov [ tmp2759 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2758 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2759 ]
  lea r8 , [ regDst ]
  mov r9d , dword [ tmp2758 ]
  call  __X64Encoder_emitCore_shiftGroup_r_imm8$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2759 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2758
  restore tmp2759

; -----------------------------------------------
; function __X64Encoder_shl_r_imm$2
; -----------------------------------------------
__X64Encoder_shl_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2761 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2760 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2761 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2760 ], 4

  mov [ tmp2761 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2760 ]
  mov [ tmp2761 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2760 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2761 ]
  lea r8 , [ regDst ]
  mov r9d , dword [ tmp2760 ]
  call  __X64Encoder_emitCore_shiftGroup_r_imm8$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2761 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2760
  restore tmp2761

; -----------------------------------------------
; function __X64Encoder_sal_r_imm$2
; -----------------------------------------------
__X64Encoder_sal_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  lea r8 , [ imm ]
  call  __X64Encoder_shl_r_imm$2


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm

; -----------------------------------------------
; function __X64Encoder_shr_r_imm$2
; -----------------------------------------------
__X64Encoder_shr_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2763 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2762 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2763 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2762 ], 5

  mov [ tmp2763 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2762 ]
  mov [ tmp2763 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2762 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2763 ]
  lea r8 , [ regDst ]
  mov r9d , dword [ tmp2762 ]
  call  __X64Encoder_emitCore_shiftGroup_r_imm8$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2763 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2762
  restore tmp2763

; -----------------------------------------------
; function __X64Encoder_sar_r_imm$2
; -----------------------------------------------
__X64Encoder_sar_r_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2765 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2764 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp2765 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2764 ], 7

  mov [ tmp2765 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2764 ]
  mov [ tmp2765 + Variant_t.value], rax

  cmp [ imm + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ imm + Variant_t.value]
  mov dword [ tmp2764 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2765 ]
  lea r8 , [ regDst ]
  mov r9d , dword [ tmp2764 ]
  call  __X64Encoder_emitCore_shiftGroup_r_imm8$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2765 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore imm
  restore tmp2764
  restore tmp2765

; -----------------------------------------------
; function __X64Encoder_emitCore286_r_r$3
; -----------------------------------------------
__X64Encoder_emitCore286_r_r$3_vcall:
__X64Encoder_emitCore286_r_r$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 3 )
  regSrc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2766 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2768 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2767 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2766 + Variant_t.type], eax
  mov [tmp2768 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2767 ], 7

  mov [ tmp2768 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2767 ]
  mov [ tmp2768 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ regDst ]
  lea rdx , [ tmp2768 ]
  lea r8 , [ regDst ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2766 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2768 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore opcode
  restore regDst
  restore regSrc
  restore tmp2766
  restore tmp2767
  restore tmp2768

; -----------------------------------------------
; function __X64Encoder_emitCore286_r_m$6
; -----------------------------------------------
__X64Encoder_emitCore286_r_m$6_vcall:
__X64Encoder_emitCore286_r_m$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 3 )
  regBase EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2769 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2771 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2770 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regBase ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2769 + Variant_t.type], eax
  mov [tmp2771 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2770 ], 7

  mov [ tmp2771 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2770 ]
  mov [ tmp2771 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ regDst ]
  lea rdx , [ tmp2771 ]
  lea r8 , [ regDst ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2769 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2771 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore opcode
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2769
  restore tmp2770
  restore tmp2771

; -----------------------------------------------
; function __X64Encoder_emitCore_group0f_00_m$5
; -----------------------------------------------
__X64Encoder_emitCore_group0f_00_m$5_vcall:
__X64Encoder_emitCore_group0f_00_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2773 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2772 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2773 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2772 ], 15

  mov [ tmp2773 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2772 ]
  mov [ tmp2773 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2773 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp2772 ], 0

  mov [ tmp2773 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2772 ]
  mov [ tmp2773 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2773 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2773 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore operationId
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2772
  restore tmp2773

; -----------------------------------------------
; function __X64Encoder_emitCore_group0f_00_r$2
; -----------------------------------------------
__X64Encoder_emitCore_group0f_00_r$2_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__X64Encoder_emitCore_group0f_00_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2778 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  operationId EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2774 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2775 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2779 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ operationId ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2778 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2775 ], 1

  mov eax, dword [ operationId ]
  cmp eax, dword [ tmp2775 ]
  jg l2776

  lea rcx , [ this ]
  lea rdx , [ reg ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

l2776:

l2777:

  mov dword [ tmp2775 ], 15

  mov [ tmp2778 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2775 ]
  mov [ tmp2778 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2778 ]
  call  __X64Encoder_emitWord$1

  mov dword [ tmp2775 ], 3

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2779 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2775 ]
  mov r8d , dword [ operationId ]
  mov r9d , dword [ tmp2779 ]
  call  __X64Encoder_emitModRegRM$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2778 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore operationId
  restore reg
  restore tmp2774
  restore tmp2775
  restore tmp2778
  restore tmp2779

; -----------------------------------------------
; function __X64Encoder_emitCore_group0f_01_m$5
; -----------------------------------------------
__X64Encoder_emitCore_group0f_01_m$5_vcall:
__X64Encoder_emitCore_group0f_01_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2781 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2780 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2781 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2780 ], 271

  mov [ tmp2781 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2780 ]
  mov [ tmp2781 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2781 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2781 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore operationId
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2780
  restore tmp2781

; -----------------------------------------------
; function __X64Encoder_emitCore_group0f_01_r$2
; -----------------------------------------------
__X64Encoder_emitCore_group0f_01_r$2_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__X64Encoder_emitCore_group0f_01_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2786 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  operationId EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp2782 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2783 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2787 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ operationId ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2786 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2783 ], 4

  mov eax, dword [ operationId ]
  cmp eax, dword [ tmp2783 ]
  jnz l2784

  lea rcx , [ this ]
  lea rdx , [ reg ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

l2784:

l2785:

  mov dword [ tmp2783 ], 271

  mov [ tmp2786 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2783 ]
  mov [ tmp2786 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2786 ]
  call  __X64Encoder_emitWord$1

  mov dword [ tmp2783 ], 3

  cmp [ reg + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ reg + Variant_t.value]
  mov dword [ tmp2787 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2783 ]
  mov r8d , dword [ operationId ]
  mov r9d , dword [ tmp2787 ]
  call  __X64Encoder_emitModRegRM$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2786 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore operationId
  restore reg
  restore tmp2782
  restore tmp2783
  restore tmp2786
  restore tmp2787

; -----------------------------------------------
; function __X64Encoder_sldt_m$4
; -----------------------------------------------
__X64Encoder_sldt_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2789 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2788 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2789 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2788 ], 0

  mov [ tmp2789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2788 ]
  mov [ tmp2789 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2789 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_00_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2789 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2788
  restore tmp2789

; -----------------------------------------------
; function __X64Encoder_str_m$4
; -----------------------------------------------
__X64Encoder_str_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2791 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2790 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2791 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2790 ], 1

  mov [ tmp2791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2790 ]
  mov [ tmp2791 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2791 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_00_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2791 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2790
  restore tmp2791

; -----------------------------------------------
; function __X64Encoder_lldt_m$4
; -----------------------------------------------
__X64Encoder_lldt_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2793 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2792 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2793 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2792 ], 2

  mov [ tmp2793 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2792 ]
  mov [ tmp2793 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2793 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_00_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2793 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2792
  restore tmp2793

; -----------------------------------------------
; function __X64Encoder_ltr_m$4
; -----------------------------------------------
__X64Encoder_ltr_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2795 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2794 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2795 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2794 ], 3

  mov [ tmp2795 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2794 ]
  mov [ tmp2795 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2795 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_00_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2795 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2794
  restore tmp2795

; -----------------------------------------------
; function __X64Encoder_verr_m$4
; -----------------------------------------------
__X64Encoder_verr_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2797 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2796 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2797 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2796 ], 4

  mov [ tmp2797 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2796 ]
  mov [ tmp2797 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2797 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_00_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2797 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2796
  restore tmp2797

; -----------------------------------------------
; function __X64Encoder_verw_m$4
; -----------------------------------------------
__X64Encoder_verw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2799 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2798 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2799 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2798 ], 5

  mov [ tmp2799 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2798 ]
  mov [ tmp2799 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2799 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_00_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2799 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2798
  restore tmp2799

; -----------------------------------------------
; function __X64Encoder_sldt_r$1
; -----------------------------------------------
__X64Encoder_sldt_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2800 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regSrc ], xmm0

  ; code
  ; ----

  mov dword [ tmp2800 ], 0

  lea rcx , [ this ]
  mov edx , dword [ tmp2800 ]
  lea r8 , [ regSrc ]
  call  __X64Encoder_emitCore_group0f_00_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regSrc
  restore tmp2800

; -----------------------------------------------
; function __X64Encoder_str_r$1
; -----------------------------------------------
__X64Encoder_str_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2801 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regSrc ], xmm0

  ; code
  ; ----

  mov dword [ tmp2801 ], 1

  lea rcx , [ this ]
  mov edx , dword [ tmp2801 ]
  lea r8 , [ regSrc ]
  call  __X64Encoder_emitCore_group0f_00_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regSrc
  restore tmp2801

; -----------------------------------------------
; function __X64Encoder_lldt_r$1
; -----------------------------------------------
__X64Encoder_lldt_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2802 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0

  ; code
  ; ----

  mov dword [ tmp2802 ], 2

  lea rcx , [ this ]
  mov edx , dword [ tmp2802 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_group0f_00_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2802

; -----------------------------------------------
; function __X64Encoder_ltr_r$1
; -----------------------------------------------
__X64Encoder_ltr_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2803 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0

  ; code
  ; ----

  mov dword [ tmp2803 ], 3

  lea rcx , [ this ]
  mov edx , dword [ tmp2803 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_group0f_00_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2803

; -----------------------------------------------
; function __X64Encoder_verr_r$1
; -----------------------------------------------
__X64Encoder_verr_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2804 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0

  ; code
  ; ----

  mov dword [ tmp2804 ], 4

  lea rcx , [ this ]
  mov edx , dword [ tmp2804 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_group0f_00_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2804

; -----------------------------------------------
; function __X64Encoder_verw_r$1
; -----------------------------------------------
__X64Encoder_verw_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2805 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regSrc ], xmm0

  ; code
  ; ----

  mov dword [ tmp2805 ], 5

  lea rcx , [ this ]
  mov edx , dword [ tmp2805 ]
  lea r8 , [ regSrc ]
  call  __X64Encoder_emitCore_group0f_00_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regSrc
  restore tmp2805

; -----------------------------------------------
; function __X64Encoder_sgdt_m$4
; -----------------------------------------------
__X64Encoder_sgdt_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2807 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2806 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2807 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2806 ], 0

  mov [ tmp2807 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2806 ]
  mov [ tmp2807 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2807 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_01_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2807 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2806
  restore tmp2807

; -----------------------------------------------
; function __X64Encoder_sidt_m$4
; -----------------------------------------------
__X64Encoder_sidt_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2809 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2808 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2809 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2808 ], 1

  mov [ tmp2809 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2808 ]
  mov [ tmp2809 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2809 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_01_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2809 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2808
  restore tmp2809

; -----------------------------------------------
; function __X64Encoder_lgdt_m$4
; -----------------------------------------------
__X64Encoder_lgdt_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2811 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2810 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2811 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2810 ], 2

  mov [ tmp2811 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2810 ]
  mov [ tmp2811 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2811 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_01_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2811 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2810
  restore tmp2811

; -----------------------------------------------
; function __X64Encoder_lidt_m$4
; -----------------------------------------------
__X64Encoder_lidt_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2813 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2812 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2813 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2812 ], 3

  mov [ tmp2813 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2812 ]
  mov [ tmp2813 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2813 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_01_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2813 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2812
  restore tmp2813

; -----------------------------------------------
; function __X64Encoder_smsw_m$4
; -----------------------------------------------
__X64Encoder_smsw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2815 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2814 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2815 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2814 ], 4

  mov [ tmp2815 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2814 ]
  mov [ tmp2815 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2815 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_01_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2815 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2814
  restore tmp2815

; -----------------------------------------------
; function __X64Encoder_lmsw_m$4
; -----------------------------------------------
__X64Encoder_lmsw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2817 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2816 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2817 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2816 ], 6

  mov [ tmp2817 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2816 ]
  mov [ tmp2817 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2817 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_01_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2817 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2816
  restore tmp2817

; -----------------------------------------------
; function __X64Encoder_smsw_r$1
; -----------------------------------------------
__X64Encoder_smsw_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2818 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regSrc ], xmm0

  ; code
  ; ----

  mov dword [ tmp2818 ], 4

  lea rcx , [ this ]
  mov edx , dword [ tmp2818 ]
  lea r8 , [ regSrc ]
  call  __X64Encoder_emitCore_group0f_01_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regSrc
  restore tmp2818

; -----------------------------------------------
; function __X64Encoder_lmsw_r$1
; -----------------------------------------------
__X64Encoder_lmsw_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2819 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0

  ; code
  ; ----

  mov dword [ tmp2819 ], 6

  lea rcx , [ this ]
  mov edx , dword [ tmp2819 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_group0f_01_r$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2819

; -----------------------------------------------
; function __X64Encoder_lar_r_r$2
; -----------------------------------------------
__X64Encoder_lar_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2821 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2820 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2821 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2820 ], 527

  mov [ tmp2821 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2820 ]
  mov [ tmp2821 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2821 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore286_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2821 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2820
  restore tmp2821

; -----------------------------------------------
; function __X64Encoder_lar_r_m16$5
; -----------------------------------------------
__X64Encoder_lar_r_m16$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2823 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2822 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2823 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2822 ], 527

  mov [ tmp2823 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2822 ]
  mov [ tmp2823 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2823 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore286_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2823 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2822
  restore tmp2823

; -----------------------------------------------
; function __X64Encoder_lsl_r_r$2
; -----------------------------------------------
__X64Encoder_lsl_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2825 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2824 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2825 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2824 ], 783

  mov [ tmp2825 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2824 ]
  mov [ tmp2825 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2825 ]
  lea r8 , [ regSrc ]
  lea r9 , [ regDst ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2825 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2824
  restore tmp2825

; -----------------------------------------------
; function __X64Encoder_lsl_r_m$5
; -----------------------------------------------
__X64Encoder_lsl_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2827 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2826 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2828 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2829 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2830 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2827 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2826 ], 783

  mov [ tmp2827 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2826 ]
  mov [ tmp2827 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2826 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2828 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2829 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2830 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2827 ]
  mov r8d , dword [ tmp2826 ]
  mov r9d , dword [ tmp2828 ]
  mov  eax, dword [ tmp2829 ]
  push rax
  mov  eax, dword [ tmp2830 ]
  push rax
  lea rax, [ regDst ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2827 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2826
  restore tmp2827
  restore tmp2828
  restore tmp2829
  restore tmp2830

; -----------------------------------------------
; function __X64Encoder_clts$0
; -----------------------------------------------
__X64Encoder_clts$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2832 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2831 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2832 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2831 ], 1551

  mov [ tmp2832 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2831 ]
  mov [ tmp2832 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2832 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2832 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2831
  restore tmp2832

; -----------------------------------------------
; function __X64Encoder_emitCore_bitTest_r_imm8$3
; -----------------------------------------------
__X64Encoder_emitCore_bitTest_r_imm8$3:

  ; init frame
  ; ----------

  push rbp
  mov  rbp, rsp
  sub  rsp, 32

  ; skipped unused param [ this ]
  ; skipped unused param [ opcode ]
  ; skipped unused param [ reg1 ]
  ; skipped unused param [ reg2 ]

  ; code
  ; ----

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal556
  lea rcx , [ __literal556 ]
  call qword [rbx + 8 * 41 ]


  ; clean frame
  ; -----------

  add  rsp, 32
  pop  rbp
  ret



; -----------------------------------------------
; function __X64Encoder_emitCore_bitTest_m_imm8$7
; -----------------------------------------------
__X64Encoder_emitCore_bitTest_m_imm8$7:

  ; init frame
  ; ----------

  push rbp
  mov  rbp, rsp
  sub  rsp, 32

  ; skipped unused param [ this ]
  ; skipped unused param [ opcode ]
  ; skipped unused param [ regBase ]
  ; skipped unused param [ scale ]
  ; skipped unused param [ regIndex ]
  ; skipped unused param [ disp ]
  ; skipped unused param [ reg ]
  ; skipped unused param [ dataSize ]

  ; code
  ; ----

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal557
  lea rcx , [ __literal557 ]
  call qword [rbx + 8 * 41 ]


  ; clean frame
  ; -----------

  add  rsp, 32
  pop  rbp
  ret



; -----------------------------------------------
; function __X64Encoder_bsf_r_r$2
; -----------------------------------------------
__X64Encoder_bsf_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2834 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2833 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2834 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2833 ], 48143

  mov [ tmp2834 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2833 ]
  mov [ tmp2834 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2834 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2834 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2833
  restore tmp2834

; -----------------------------------------------
; function __X64Encoder_bsf_r_m$5
; -----------------------------------------------
__X64Encoder_bsf_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2836 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2835 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2836 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2835 ], 48143

  mov [ tmp2836 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2835 ]
  mov [ tmp2836 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2836 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2836 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2835
  restore tmp2836

; -----------------------------------------------
; function __X64Encoder_bsr_r_r$2
; -----------------------------------------------
__X64Encoder_bsr_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2838 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2837 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2838 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2837 ], 48399

  mov [ tmp2838 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2837 ]
  mov [ tmp2838 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2838 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2838 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2837
  restore tmp2838

; -----------------------------------------------
; function __X64Encoder_bsr_r_m$5
; -----------------------------------------------
__X64Encoder_bsr_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2840 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2839 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2840 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2839 ], 48399

  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2839 ]
  mov [ tmp2840 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2840 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2839
  restore tmp2840

; -----------------------------------------------
; function __X64Encoder_bt_r_r$2
; -----------------------------------------------
__X64Encoder_bt_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2842 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2841 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2842 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2841 ], 41743

  mov [ tmp2842 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2841 ]
  mov [ tmp2842 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2842 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2842 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2841
  restore tmp2842

; -----------------------------------------------
; function __X64Encoder_btc_r_r$2
; -----------------------------------------------
__X64Encoder_btc_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2844 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2843 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2844 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2843 ], 47887

  mov [ tmp2844 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2843 ]
  mov [ tmp2844 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2844 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2844 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2843
  restore tmp2844

; -----------------------------------------------
; function __X64Encoder_btr_r_r$2
; -----------------------------------------------
__X64Encoder_btr_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2846 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2845 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2846 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2845 ], 45839

  mov [ tmp2846 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2845 ]
  mov [ tmp2846 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2846 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2846 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2845
  restore tmp2846

; -----------------------------------------------
; function __X64Encoder_bts_r_r$2
; -----------------------------------------------
__X64Encoder_bts_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2848 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2847 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2848 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2847 ], 43791

  mov [ tmp2848 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2848 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2848 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2848 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2847
  restore tmp2848

; -----------------------------------------------
; function __X64Encoder_bt_m_r$5
; -----------------------------------------------
__X64Encoder_bt_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2850 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2849 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2851 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2852 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2853 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2850 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2849 ], 41743

  mov [ tmp2850 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2849 ]
  mov [ tmp2850 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2849 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2851 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2852 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2853 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2850 ]
  mov r8d , dword [ tmp2849 ]
  mov r9d , dword [ tmp2851 ]
  mov  eax, dword [ tmp2852 ]
  push rax
  mov  eax, dword [ tmp2853 ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2850 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2849
  restore tmp2850
  restore tmp2851
  restore tmp2852
  restore tmp2853

; -----------------------------------------------
; function __X64Encoder_btc_m_r$5
; -----------------------------------------------
__X64Encoder_btc_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2855 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2854 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2856 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2857 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2858 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2855 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2854 ], 47887

  mov [ tmp2855 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2854 ]
  mov [ tmp2855 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2854 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2856 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2857 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2858 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2855 ]
  mov r8d , dword [ tmp2854 ]
  mov r9d , dword [ tmp2856 ]
  mov  eax, dword [ tmp2857 ]
  push rax
  mov  eax, dword [ tmp2858 ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2855 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2854
  restore tmp2855
  restore tmp2856
  restore tmp2857
  restore tmp2858

; -----------------------------------------------
; function __X64Encoder_btr_m_r$5
; -----------------------------------------------
__X64Encoder_btr_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2860 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2859 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2861 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2862 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2863 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2860 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2859 ], 45839

  mov [ tmp2860 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2859 ]
  mov [ tmp2860 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2859 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2861 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2862 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2863 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2860 ]
  mov r8d , dword [ tmp2859 ]
  mov r9d , dword [ tmp2861 ]
  mov  eax, dword [ tmp2862 ]
  push rax
  mov  eax, dword [ tmp2863 ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2860 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2859
  restore tmp2860
  restore tmp2861
  restore tmp2862
  restore tmp2863

; -----------------------------------------------
; function __X64Encoder_bts_m_r$5
; -----------------------------------------------
__X64Encoder_bts_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2865 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2864 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2866 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2867 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2868 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2865 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2864 ], 43791

  mov [ tmp2865 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2864 ]
  mov [ tmp2865 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2864 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2866 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2867 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2868 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2865 ]
  mov r8d , dword [ tmp2864 ]
  mov r9d , dword [ tmp2866 ]
  mov  eax, dword [ tmp2867 ]
  push rax
  mov  eax, dword [ tmp2868 ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2865 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2864
  restore tmp2865
  restore tmp2866
  restore tmp2867
  restore tmp2868

; -----------------------------------------------
; function __X64Encoder_lfs_r_m$5
; -----------------------------------------------
__X64Encoder_lfs_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2870 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2869 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2870 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2869 ], 46095

  mov [ tmp2870 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2869 ]
  mov [ tmp2870 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2870 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore286_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2870 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2869
  restore tmp2870

; -----------------------------------------------
; function __X64Encoder_lgs_r_m$5
; -----------------------------------------------
__X64Encoder_lgs_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2872 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2871 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2872 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2871 ], 46351

  mov [ tmp2872 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2871 ]
  mov [ tmp2872 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2872 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore286_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2872 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2871
  restore tmp2872

; -----------------------------------------------
; function __X64Encoder_lss_r_m$5
; -----------------------------------------------
__X64Encoder_lss_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2874 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2873 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2874 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2873 ], 45583

  mov [ tmp2874 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2873 ]
  mov [ tmp2874 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2874 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore286_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2874 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2873
  restore tmp2874

; -----------------------------------------------
; function __X64Encoder_seto_r8$1
; -----------------------------------------------
__X64Encoder_seto_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2876 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2875 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2876 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2875 ], 36879

  mov [ tmp2876 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2875 ]
  mov [ tmp2876 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2876 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2876 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2875
  restore tmp2876

; -----------------------------------------------
; function __X64Encoder_setno_r8$1
; -----------------------------------------------
__X64Encoder_setno_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2878 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2877 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2878 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2877 ], 37135

  mov [ tmp2878 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2877 ]
  mov [ tmp2878 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2878 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2878 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2877
  restore tmp2878

; -----------------------------------------------
; function __X64Encoder_setb_r8$1
; -----------------------------------------------
__X64Encoder_setb_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2880 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2879 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2880 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2879 ], 37391

  mov [ tmp2880 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2879 ]
  mov [ tmp2880 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2880 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2880 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2879
  restore tmp2880

; -----------------------------------------------
; function __X64Encoder_setae_r8$1
; -----------------------------------------------
__X64Encoder_setae_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2882 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2881 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2882 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2881 ], 37647

  mov [ tmp2882 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2881 ]
  mov [ tmp2882 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2882 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2882 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2881
  restore tmp2882

; -----------------------------------------------
; function __X64Encoder_sete_r8$1
; -----------------------------------------------
__X64Encoder_sete_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2884 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2883 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2884 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2883 ], 37903

  mov [ tmp2884 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2883 ]
  mov [ tmp2884 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2884 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2884 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2883
  restore tmp2884

; -----------------------------------------------
; function __X64Encoder_setne_r8$1
; -----------------------------------------------
__X64Encoder_setne_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2886 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2885 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2886 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2885 ], 38159

  mov [ tmp2886 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2885 ]
  mov [ tmp2886 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2886 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2886 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2885
  restore tmp2886

; -----------------------------------------------
; function __X64Encoder_setbe_r8$1
; -----------------------------------------------
__X64Encoder_setbe_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2888 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2887 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2888 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2887 ], 38415

  mov [ tmp2888 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2887 ]
  mov [ tmp2888 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2888 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2888 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2887
  restore tmp2888

; -----------------------------------------------
; function __X64Encoder_seta_r8$1
; -----------------------------------------------
__X64Encoder_seta_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2890 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2889 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2890 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2889 ], 38671

  mov [ tmp2890 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2889 ]
  mov [ tmp2890 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2890 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2890 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2889
  restore tmp2890

; -----------------------------------------------
; function __X64Encoder_sets_r8$1
; -----------------------------------------------
__X64Encoder_sets_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2892 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2891 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2892 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2891 ], 38927

  mov [ tmp2892 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2891 ]
  mov [ tmp2892 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2892 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2892 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2891
  restore tmp2892

; -----------------------------------------------
; function __X64Encoder_setns_r8$1
; -----------------------------------------------
__X64Encoder_setns_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2894 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2893 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2894 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2893 ], 39183

  mov [ tmp2894 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2893 ]
  mov [ tmp2894 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2894 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2894 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2893
  restore tmp2894

; -----------------------------------------------
; function __X64Encoder_setp_r8$1
; -----------------------------------------------
__X64Encoder_setp_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2896 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2895 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2896 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2895 ], 39439

  mov [ tmp2896 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2895 ]
  mov [ tmp2896 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2896 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2896 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2895
  restore tmp2896

; -----------------------------------------------
; function __X64Encoder_setnp_r8$1
; -----------------------------------------------
__X64Encoder_setnp_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2898 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2897 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2898 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2897 ], 39695

  mov [ tmp2898 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2897 ]
  mov [ tmp2898 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2898 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2898 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2897
  restore tmp2898

; -----------------------------------------------
; function __X64Encoder_setl_r8$1
; -----------------------------------------------
__X64Encoder_setl_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2900 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2899 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2900 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2899 ], 39951

  mov [ tmp2900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2899 ]
  mov [ tmp2900 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2900 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2899
  restore tmp2900

; -----------------------------------------------
; function __X64Encoder_setge_r8$1
; -----------------------------------------------
__X64Encoder_setge_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2902 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2901 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2902 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2901 ], 40207

  mov [ tmp2902 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2901 ]
  mov [ tmp2902 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2902 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2902 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2901
  restore tmp2902

; -----------------------------------------------
; function __X64Encoder_setle_r8$1
; -----------------------------------------------
__X64Encoder_setle_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2904 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2903 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2904 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2903 ], 40463

  mov [ tmp2904 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2903 ]
  mov [ tmp2904 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2904 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2904 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2903
  restore tmp2904

; -----------------------------------------------
; function __X64Encoder_setg_r8$1
; -----------------------------------------------
__X64Encoder_setg_r8$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2906 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2905 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  xor eax, eax
  mov [tmp2906 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2905 ], 40719

  mov [ tmp2906 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2905 ]
  mov [ tmp2906 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2906 ]
  lea r8 , [ regDst ]
  call  __X64Encoder_emitCore_r$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2906 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore tmp2905
  restore tmp2906

; -----------------------------------------------
; function __X64Encoder_seto_m8$4
; -----------------------------------------------
__X64Encoder_seto_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2908 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2907 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2908 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2907 ], 36879

  mov [ tmp2908 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2907 ]
  mov [ tmp2908 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2908 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2908 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2907
  restore tmp2908

; -----------------------------------------------
; function __X64Encoder_setno_m8$4
; -----------------------------------------------
__X64Encoder_setno_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2910 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2909 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2910 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2909 ], 37135

  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2909 ]
  mov [ tmp2910 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2910 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2909
  restore tmp2910

; -----------------------------------------------
; function __X64Encoder_setb_m8$4
; -----------------------------------------------
__X64Encoder_setb_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2912 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2911 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2912 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2911 ], 37391

  mov [ tmp2912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2911 ]
  mov [ tmp2912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2912 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2912 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2911
  restore tmp2912

; -----------------------------------------------
; function __X64Encoder_setae_m8$4
; -----------------------------------------------
__X64Encoder_setae_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2914 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2913 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2914 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2913 ], 37647

  mov [ tmp2914 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2913 ]
  mov [ tmp2914 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2914 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2914 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2913
  restore tmp2914

; -----------------------------------------------
; function __X64Encoder_sete_rm$4
; -----------------------------------------------
__X64Encoder_sete_rm$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2916 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2915 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2916 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2915 ], 37903

  mov [ tmp2916 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2915 ]
  mov [ tmp2916 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2916 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2916 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2915
  restore tmp2916

; -----------------------------------------------
; function __X64Encoder_setne_m8$4
; -----------------------------------------------
__X64Encoder_setne_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2918 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2917 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2918 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2917 ], 38159

  mov [ tmp2918 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2917 ]
  mov [ tmp2918 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2918 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2918 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2917
  restore tmp2918

; -----------------------------------------------
; function __X64Encoder_setbe_m8$4
; -----------------------------------------------
__X64Encoder_setbe_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2920 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2919 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2920 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2919 ], 38415

  mov [ tmp2920 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2919 ]
  mov [ tmp2920 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2920 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2920 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2919
  restore tmp2920

; -----------------------------------------------
; function __X64Encoder_seta_m8$4
; -----------------------------------------------
__X64Encoder_seta_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2922 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2921 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2922 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2921 ], 38671

  mov [ tmp2922 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2921 ]
  mov [ tmp2922 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2922 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2922 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2921
  restore tmp2922

; -----------------------------------------------
; function __X64Encoder_sets_m8$4
; -----------------------------------------------
__X64Encoder_sets_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2924 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2923 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2924 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2923 ], 38927

  mov [ tmp2924 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2923 ]
  mov [ tmp2924 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2924 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2924 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2923
  restore tmp2924

; -----------------------------------------------
; function __X64Encoder_setns_m8$4
; -----------------------------------------------
__X64Encoder_setns_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2926 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2925 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2926 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2925 ], 39183

  mov [ tmp2926 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2925 ]
  mov [ tmp2926 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2926 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2926 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2925
  restore tmp2926

; -----------------------------------------------
; function __X64Encoder_setp_m8$4
; -----------------------------------------------
__X64Encoder_setp_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2928 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2927 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2928 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2927 ], 39439

  mov [ tmp2928 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2927 ]
  mov [ tmp2928 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2928 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2928 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2927
  restore tmp2928

; -----------------------------------------------
; function __X64Encoder_setnp_m8$4
; -----------------------------------------------
__X64Encoder_setnp_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2930 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2929 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2930 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2929 ], 39695

  mov [ tmp2930 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2929 ]
  mov [ tmp2930 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2930 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2930 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2929
  restore tmp2930

; -----------------------------------------------
; function __X64Encoder_setl_m8$4
; -----------------------------------------------
__X64Encoder_setl_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2932 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2931 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2932 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2931 ], 39951

  mov [ tmp2932 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2931 ]
  mov [ tmp2932 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2932 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2932 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2931
  restore tmp2932

; -----------------------------------------------
; function __X64Encoder_setge_m8$4
; -----------------------------------------------
__X64Encoder_setge_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2934 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2933 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2934 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2933 ], 40207

  mov [ tmp2934 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2933 ]
  mov [ tmp2934 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2934 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2934 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2933
  restore tmp2934

; -----------------------------------------------
; function __X64Encoder_setle_m8$4
; -----------------------------------------------
__X64Encoder_setle_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2936 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2935 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2936 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2935 ], 40463

  mov [ tmp2936 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2935 ]
  mov [ tmp2936 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2936 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2936 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2935
  restore tmp2936

; -----------------------------------------------
; function __X64Encoder_setg_m8$4
; -----------------------------------------------
__X64Encoder_setg_m8$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2938 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2937 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2938 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2937 ], 40719

  mov [ tmp2938 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2937 ]
  mov [ tmp2938 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2938 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2938 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2937
  restore tmp2938

; -----------------------------------------------
; function __X64Encoder_cwde$0
; -----------------------------------------------
__X64Encoder_cwde$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2940 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2939 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2940 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2939 ], 152

  mov [ tmp2940 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2939 ]
  mov [ tmp2940 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2940 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2940 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2939
  restore tmp2940

; -----------------------------------------------
; function __X64Encoder_cdq$0
; -----------------------------------------------
__X64Encoder_cdq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2942 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2941 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2942 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2941 ], 153

  mov [ tmp2942 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2941 ]
  mov [ tmp2942 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2942 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2942 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2941
  restore tmp2942

; -----------------------------------------------
; function __X64Encoder_iretd$0
; -----------------------------------------------
__X64Encoder_iretd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_iret$0


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __X64Encoder_movsd$0
; -----------------------------------------------
__X64Encoder_movsd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2944 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2943 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2944 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2943 ], 165

  mov [ tmp2944 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2943 ]
  mov [ tmp2944 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2944 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2944 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2943
  restore tmp2944

; -----------------------------------------------
; function __X64Encoder_cmpsd$0
; -----------------------------------------------
__X64Encoder_cmpsd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2946 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2945 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2946 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2945 ], 167

  mov [ tmp2946 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2945 ]
  mov [ tmp2946 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2946 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2946 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2945
  restore tmp2946

; -----------------------------------------------
; function __X64Encoder_lodsd$0
; -----------------------------------------------
__X64Encoder_lodsd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2948 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2947 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2948 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2947 ], 173

  mov [ tmp2948 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2947 ]
  mov [ tmp2948 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2948 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2948 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2947
  restore tmp2948

; -----------------------------------------------
; function __X64Encoder_stosd$0
; -----------------------------------------------
__X64Encoder_stosd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2950 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2949 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2950 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2949 ], 171

  mov [ tmp2950 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2949 ]
  mov [ tmp2950 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2950 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2950 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2949
  restore tmp2950

; -----------------------------------------------
; function __X64Encoder_scasd$0
; -----------------------------------------------
__X64Encoder_scasd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2952 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2951 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2952 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2951 ], 175

  mov [ tmp2952 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2951 ]
  mov [ tmp2952 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2952 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2952 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2951
  restore tmp2952

; -----------------------------------------------
; function __X64Encoder_insd$0
; -----------------------------------------------
__X64Encoder_insd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2954 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2953 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2954 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2953 ], 109

  mov [ tmp2954 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2953 ]
  mov [ tmp2954 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2954 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2954 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2953
  restore tmp2954

; -----------------------------------------------
; function __X64Encoder_outsd$0
; -----------------------------------------------
__X64Encoder_outsd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2956 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2955 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2956 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2955 ], 111

  mov [ tmp2956 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2955 ]
  mov [ tmp2956 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2956 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2956 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp2955
  restore tmp2956

; -----------------------------------------------
; function __X64Encoder_emitCore_movExtend_r_r$3
; -----------------------------------------------
__X64Encoder_emitCore_movExtend_r_r$3_vcall:
__X64Encoder_emitCore_movExtend_r_r$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  regSrc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2963 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2964 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2957 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2958 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2959 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2960 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2965 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2966 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2963 + Variant_t.type], eax
  mov [tmp2964 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  cmp [ regSrc + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regSrc + Variant_t.value]
  mov dword [ tmp2959 ], eax

  mov ecx , dword [ tmp2959 ]
  lea  rax , [ tmp2958 ]
  call  X64_IsReg8

  mov dword [ tmp2960 ], 0

  mov eax, dword [ tmp2958 ]
  cmp eax, dword [ tmp2960 ]
  jnz l2961

  mov dword [ tmp2959 ], 256

  mov [ tmp2964 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2959 ]
  mov [ tmp2964 + Variant_t.value], rax

  ; __mold_syscall( 36 )
  lea rcx , [ opcode ]
  lea rdx , [ tmp2964 ]
  lea r8 , [ opcode ]
  call qword [rbx + 8 * 36 ]

l2961:

l2962:

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  call  __X64Encoder_emitWord$1

  mov dword [ tmp2959 ], 3

  cmp [ regDst + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regDst + Variant_t.value]
  mov dword [ tmp2965 ], eax

  cmp [ regSrc + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regSrc + Variant_t.value]
  mov dword [ tmp2966 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp2959 ]
  mov r8d , dword [ tmp2965 ]
  mov r9d , dword [ tmp2966 ]
  call  __X64Encoder_emitModRegRM$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2963 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2964 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore opcode
  restore regDst
  restore regSrc
  restore tmp2957
  restore tmp2958
  restore tmp2959
  restore tmp2960
  restore tmp2963
  restore tmp2964
  restore tmp2965
  restore tmp2966

; -----------------------------------------------
; function __X64Encoder_emitCore_movExtend_r_m$6
; -----------------------------------------------
__X64Encoder_emitCore_movExtend_r_m$6_vcall:
__X64Encoder_emitCore_movExtend_r_m$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regDstId EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2968 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2967 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regBase ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [regDstId + Variant_t.type], eax
  mov [tmp2968 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2967 ], 7

  mov [ tmp2968 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2967 ]
  mov [ tmp2968 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ regDst ]
  lea rdx , [ tmp2968 ]
  lea r8 , [ regDstId ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ regDstId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ regDstId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2968 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore opcode
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regDstId
  restore tmp2967
  restore tmp2968

; -----------------------------------------------
; function __X64Encoder_movsx_r_r$2
; -----------------------------------------------
__X64Encoder_movsx_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2970 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2969 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2970 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2969 ], 48655

  mov [ tmp2970 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2969 ]
  mov [ tmp2970 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2970 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_movExtend_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2970 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2969
  restore tmp2970

; -----------------------------------------------
; function __X64Encoder_movsx_r_m8$5
; -----------------------------------------------
__X64Encoder_movsx_r_m8$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2972 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2971 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2972 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2971 ], 48655

  mov [ tmp2972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2971 ]
  mov [ tmp2972 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2972 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_movExtend_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2972 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2971
  restore tmp2972

; -----------------------------------------------
; function __X64Encoder_movsx_r_m16$5
; -----------------------------------------------
__X64Encoder_movsx_r_m16$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2974 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2973 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2974 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2973 ], 48911

  mov [ tmp2974 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2973 ]
  mov [ tmp2974 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2974 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_movExtend_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2974 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2973
  restore tmp2974

; -----------------------------------------------
; function __X64Encoder_movzx_r_r$2
; -----------------------------------------------
__X64Encoder_movzx_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2976 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2975 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2976 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2975 ], 46607

  mov [ tmp2976 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2975 ]
  mov [ tmp2976 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2976 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_movExtend_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2975
  restore tmp2976

; -----------------------------------------------
; function __X64Encoder_movzx_r_m8$5
; -----------------------------------------------
__X64Encoder_movzx_r_m8$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2978 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2977 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2978 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2977 ], 46607

  mov [ tmp2978 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2977 ]
  mov [ tmp2978 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2978 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_movExtend_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2978 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2977
  restore tmp2978

; -----------------------------------------------
; function __X64Encoder_movzx_r_m16$5
; -----------------------------------------------
__X64Encoder_movzx_r_m16$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2980 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2979 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp2980 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2979 ], 46863

  mov [ tmp2980 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2979 ]
  mov [ tmp2980 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2980 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_movExtend_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2980 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp2979
  restore tmp2980

; -----------------------------------------------
; function __X64Encoder_bswap_r$1
; -----------------------------------------------
__X64Encoder_bswap_r$1_vcall:
__X64Encoder_bswap_r$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  reg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2981 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2983 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2984 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2985 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2986 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2987 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2982 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ reg ], xmm0
  xor eax, eax
  mov [tmp2981 + Variant_t.type], eax
  mov [tmp2983 + Variant_t.type], eax
  mov [tmp2984 + Variant_t.type], eax
  mov [tmp2985 + Variant_t.type], eax
  mov [tmp2986 + Variant_t.type], eax
  mov [tmp2987 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ reg ]
  call  __X64Encoder_emitSizePrefixIfNeeded$1

  mov dword [ tmp2982 ], 51215

  mov [ tmp2983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2982 ]
  mov [ tmp2983 + Variant_t.value], rax

  mov dword [ tmp2982 ], 256

  mov [ tmp2985 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2982 ]
  mov [ tmp2985 + Variant_t.value], rax

  mov dword [ tmp2982 ], 7

  mov [ tmp2987 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2982 ]
  mov [ tmp2987 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ reg ]
  lea rdx , [ tmp2987 ]
  lea r8 , [ tmp2986 ]
  call qword [rbx + 8 * 35 ]

  lea  rcx , [ tmp2985 ]
  lea  rdx , [ tmp2986 ]
  lea  r8 , [ tmp2984 ]
  call  __MOLD_VariantMul

  lea  rcx , [ tmp2983 ]
  lea  rdx , [ tmp2984 ]
  lea  r8 , [ tmp2981 ]
  call  __MOLD_VariantAdd

  lea rcx , [ this ]
  lea rdx , [ tmp2981 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2981 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2983 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2984 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2985 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2986 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2987 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore reg
  restore tmp2981
  restore tmp2982
  restore tmp2983
  restore tmp2984
  restore tmp2985
  restore tmp2986
  restore tmp2987

; -----------------------------------------------
; function __X64Encoder_cmpxchg_r_r$2
; -----------------------------------------------
__X64Encoder_cmpxchg_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2989 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2988 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2989 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2988 ], 45071

  mov [ tmp2989 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2988 ]
  mov [ tmp2989 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2989 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2989 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2988
  restore tmp2989

; -----------------------------------------------
; function __X64Encoder_cmpxchg_m_r$5
; -----------------------------------------------
__X64Encoder_cmpxchg_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2991 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2990 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2992 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2993 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2994 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2991 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2990 ], 45071

  mov [ tmp2991 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2990 ]
  mov [ tmp2991 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2990 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2992 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp2993 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp2994 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2991 ]
  mov r8d , dword [ tmp2990 ]
  mov r9d , dword [ tmp2992 ]
  mov  eax, dword [ tmp2993 ]
  push rax
  mov  eax, dword [ tmp2994 ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2991 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2990
  restore tmp2991
  restore tmp2992
  restore tmp2993
  restore tmp2994

; -----------------------------------------------
; function __X64Encoder_xadd_r_r$2
; -----------------------------------------------
__X64Encoder_xadd_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2996 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2995 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2996 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2995 ], 49167

  mov [ tmp2996 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2996 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp2996 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2996 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp2995
  restore tmp2996

; -----------------------------------------------
; function __X64Encoder_xadd_m_r$5
; -----------------------------------------------
__X64Encoder_xadd_m_r$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2998 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2997 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2999 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3000 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3001 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp2998 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2997 ], 49167

  mov [ tmp2998 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2997 ]
  mov [ tmp2998 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp2997 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp2999 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp3000 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp3001 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp2998 ]
  mov r8d , dword [ tmp2997 ]
  mov r9d , dword [ tmp2999 ]
  mov  eax, dword [ tmp3000 ]
  push rax
  mov  eax, dword [ tmp3001 ]
  push rax
  lea rax, [ regSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2998 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore regSrc
  restore tmp2997
  restore tmp2998
  restore tmp2999
  restore tmp3000
  restore tmp3001

; -----------------------------------------------
; function __X64Encoder_invlpg_m$4
; -----------------------------------------------
__X64Encoder_invlpg_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3003 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3002 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3003 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3002 ], 6

  mov [ tmp3003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3002 ]
  mov [ tmp3003 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3003 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group0f_01_m$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3003 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3002
  restore tmp3003

; -----------------------------------------------
; function __X64Encoder_invd$0
; -----------------------------------------------
__X64Encoder_invd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3005 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3004 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3005 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3004 ], 2063

  mov [ tmp3005 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3004 ]
  mov [ tmp3005 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3005 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3005 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3004
  restore tmp3005

; -----------------------------------------------
; function __X64Encoder_wbinvd$0
; -----------------------------------------------
__X64Encoder_wbinvd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3007 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3006 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3007 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3006 ], 2319

  mov [ tmp3007 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3006 ]
  mov [ tmp3007 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3007 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3007 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3006
  restore tmp3007

; -----------------------------------------------
; function __X64Encoder_cmpxchg8b_m$4
; -----------------------------------------------
__X64Encoder_cmpxchg8b_m$4_vcall:
__X64Encoder_cmpxchg8b_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3009 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3010 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3008 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3009 + Variant_t.type], eax
  mov [tmp3010 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3008 ], 50959

  mov [ tmp3009 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3008 ]
  mov [ tmp3009 + Variant_t.value], rax

  mov dword [ tmp3008 ], 1

  mov [ tmp3010 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3008 ]
  mov [ tmp3010 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3009 ]
  lea r8 , [ tmp3010 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3009 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3010 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3008
  restore tmp3009
  restore tmp3010

; -----------------------------------------------
; function __X64Encoder_cpuid$0
; -----------------------------------------------
__X64Encoder_cpuid$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3012 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3011 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3012 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3011 ], 41487

  mov [ tmp3012 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3011 ]
  mov [ tmp3012 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3012 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3012 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3011
  restore tmp3012

; -----------------------------------------------
; function __X64Encoder_rdmsr$0
; -----------------------------------------------
__X64Encoder_rdmsr$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3014 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3013 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3014 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3013 ], 12815

  mov [ tmp3014 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3013 ]
  mov [ tmp3014 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3014 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3014 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3013
  restore tmp3014

; -----------------------------------------------
; function __X64Encoder_rdtsc$0
; -----------------------------------------------
__X64Encoder_rdtsc$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3016 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3015 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3016 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3015 ], 12559

  mov [ tmp3016 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3015 ]
  mov [ tmp3016 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3016 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3016 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3015
  restore tmp3016

; -----------------------------------------------
; function __X64Encoder_wrmsr$0
; -----------------------------------------------
__X64Encoder_wrmsr$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3018 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3017 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3018 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3017 ], 12303

  mov [ tmp3018 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3017 ]
  mov [ tmp3018 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3018 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3018 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3017
  restore tmp3018

; -----------------------------------------------
; function __X64Encoder_rsm$0
; -----------------------------------------------
__X64Encoder_rsm$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3020 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3019 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3020 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3019 ], 43535

  mov [ tmp3020 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3019 ]
  mov [ tmp3020 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3020 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3020 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3019
  restore tmp3020

; -----------------------------------------------
; function __X64Encoder_cmovo_r_r$2
; -----------------------------------------------
__X64Encoder_cmovo_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3022 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3021 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3022 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3021 ], 16399

  mov [ tmp3022 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3021 ]
  mov [ tmp3022 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3022 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3022 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3021
  restore tmp3022

; -----------------------------------------------
; function __X64Encoder_cmovno_r_r$2
; -----------------------------------------------
__X64Encoder_cmovno_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3024 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3023 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3024 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3023 ], 16655

  mov [ tmp3024 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3023 ]
  mov [ tmp3024 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3024 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3024 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3023
  restore tmp3024

; -----------------------------------------------
; function __X64Encoder_cmovb_r_r$2
; -----------------------------------------------
__X64Encoder_cmovb_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3026 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3025 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3026 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3025 ], 16911

  mov [ tmp3026 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3025 ]
  mov [ tmp3026 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3026 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3026 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3025
  restore tmp3026

; -----------------------------------------------
; function __X64Encoder_cmove_r_r$2
; -----------------------------------------------
__X64Encoder_cmove_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3028 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3027 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3028 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3027 ], 17423

  mov [ tmp3028 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3027 ]
  mov [ tmp3028 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3028 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3028 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3027
  restore tmp3028

; -----------------------------------------------
; function __X64Encoder_cmovne_r_r$2
; -----------------------------------------------
__X64Encoder_cmovne_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3030 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3029 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3030 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3029 ], 17679

  mov [ tmp3030 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3029 ]
  mov [ tmp3030 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3030 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3030 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3029
  restore tmp3030

; -----------------------------------------------
; function __X64Encoder_cmovbe_r_r$2
; -----------------------------------------------
__X64Encoder_cmovbe_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3032 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3031 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3032 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3031 ], 17935

  mov [ tmp3032 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3031 ]
  mov [ tmp3032 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3032 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3032 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3031
  restore tmp3032

; -----------------------------------------------
; function __X64Encoder_cmova_r_r$2
; -----------------------------------------------
__X64Encoder_cmova_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3034 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3033 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3034 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3033 ], 18191

  mov [ tmp3034 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3033 ]
  mov [ tmp3034 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3034 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3034 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3033
  restore tmp3034

; -----------------------------------------------
; function __X64Encoder_cmovs_r_r$2
; -----------------------------------------------
__X64Encoder_cmovs_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3036 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3035 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3036 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3035 ], 18447

  mov [ tmp3036 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3035 ]
  mov [ tmp3036 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3036 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3036 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3035
  restore tmp3036

; -----------------------------------------------
; function __X64Encoder_cmovns_r_r$2
; -----------------------------------------------
__X64Encoder_cmovns_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3038 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3037 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3038 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3037 ], 18703

  mov [ tmp3038 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3037 ]
  mov [ tmp3038 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3038 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3038 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3037
  restore tmp3038

; -----------------------------------------------
; function __X64Encoder_cmovp_r_r$2
; -----------------------------------------------
__X64Encoder_cmovp_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3040 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3039 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3040 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3039 ], 18959

  mov [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3039 ]
  mov [ tmp3040 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3040 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3039
  restore tmp3040

; -----------------------------------------------
; function __X64Encoder_cmovnp_r_r$2
; -----------------------------------------------
__X64Encoder_cmovnp_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3042 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3041 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3042 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3041 ], 19215

  mov [ tmp3042 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3041 ]
  mov [ tmp3042 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3042 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3042 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3041
  restore tmp3042

; -----------------------------------------------
; function __X64Encoder_cmovl_r_r$2
; -----------------------------------------------
__X64Encoder_cmovl_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3044 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3043 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3044 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3043 ], 19471

  mov [ tmp3044 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3044 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3044 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3044 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3043
  restore tmp3044

; -----------------------------------------------
; function __X64Encoder_cmovge_r_r$2
; -----------------------------------------------
__X64Encoder_cmovge_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3046 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3045 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3046 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3045 ], 19727

  mov [ tmp3046 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3045 ]
  mov [ tmp3046 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3046 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3046 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3045
  restore tmp3046

; -----------------------------------------------
; function __X64Encoder_cmovg_r_r$2
; -----------------------------------------------
__X64Encoder_cmovg_r_r$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3048 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3047 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3048 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3047 ], 20239

  mov [ tmp3048 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3047 ]
  mov [ tmp3048 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3048 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3048 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3047
  restore tmp3048

; -----------------------------------------------
; function __X64Encoder_cmovo_r_m$5
; -----------------------------------------------
__X64Encoder_cmovo_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3050 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3049 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3050 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3049 ], 16399

  mov [ tmp3050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3049 ]
  mov [ tmp3050 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3050 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3050 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3049
  restore tmp3050

; -----------------------------------------------
; function __X64Encoder_cmovno_r_m$5
; -----------------------------------------------
__X64Encoder_cmovno_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3052 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3051 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3052 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3051 ], 16655

  mov [ tmp3052 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3052 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3052 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3052 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3051
  restore tmp3052

; -----------------------------------------------
; function __X64Encoder_cmovb_r_m$5
; -----------------------------------------------
__X64Encoder_cmovb_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3054 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3053 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3054 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3053 ], 16911

  mov [ tmp3054 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3053 ]
  mov [ tmp3054 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3054 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3054 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3053
  restore tmp3054

; -----------------------------------------------
; function __X64Encoder_cmove_r_m$5
; -----------------------------------------------
__X64Encoder_cmove_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3056 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3055 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3056 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3055 ], 17423

  mov [ tmp3056 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3055 ]
  mov [ tmp3056 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3056 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3055
  restore tmp3056

; -----------------------------------------------
; function __X64Encoder_cmovne_r_m$5
; -----------------------------------------------
__X64Encoder_cmovne_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3058 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3057 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3058 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3057 ], 17679

  mov [ tmp3058 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3057 ]
  mov [ tmp3058 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3058 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3058 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3057
  restore tmp3058

; -----------------------------------------------
; function __X64Encoder_cmovbe_r_m$5
; -----------------------------------------------
__X64Encoder_cmovbe_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3060 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3059 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3060 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3059 ], 17935

  mov [ tmp3060 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3059 ]
  mov [ tmp3060 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3060 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3060 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3059
  restore tmp3060

; -----------------------------------------------
; function __X64Encoder_cmova_r_m$5
; -----------------------------------------------
__X64Encoder_cmova_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3062 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3061 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3062 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3061 ], 18191

  mov [ tmp3062 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3061 ]
  mov [ tmp3062 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3062 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3062 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3061
  restore tmp3062

; -----------------------------------------------
; function __X64Encoder_cmovs_r_m$5
; -----------------------------------------------
__X64Encoder_cmovs_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3064 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3063 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3064 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3063 ], 18447

  mov [ tmp3064 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3063 ]
  mov [ tmp3064 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3064 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3064 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3063
  restore tmp3064

; -----------------------------------------------
; function __X64Encoder_cmovns_r_m$5
; -----------------------------------------------
__X64Encoder_cmovns_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3066 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3065 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3066 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3065 ], 18703

  mov [ tmp3066 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3065 ]
  mov [ tmp3066 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3066 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3066 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3065
  restore tmp3066

; -----------------------------------------------
; function __X64Encoder_cmovp_r_m$5
; -----------------------------------------------
__X64Encoder_cmovp_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3068 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3067 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3068 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3067 ], 18959

  mov [ tmp3068 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3067 ]
  mov [ tmp3068 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3068 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3068 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3067
  restore tmp3068

; -----------------------------------------------
; function __X64Encoder_cmovnp_r_m$5
; -----------------------------------------------
__X64Encoder_cmovnp_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3070 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3069 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3070 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3069 ], 19215

  mov [ tmp3070 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3069 ]
  mov [ tmp3070 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3070 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3070 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3069
  restore tmp3070

; -----------------------------------------------
; function __X64Encoder_cmovl_r_m$5
; -----------------------------------------------
__X64Encoder_cmovl_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3072 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3071 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3072 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3071 ], 19471

  mov [ tmp3072 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3071 ]
  mov [ tmp3072 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3072 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3072 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3071
  restore tmp3072

; -----------------------------------------------
; function __X64Encoder_cmovge_r_m$5
; -----------------------------------------------
__X64Encoder_cmovge_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3074 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3073 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3074 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3073 ], 19727

  mov [ tmp3074 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3073 ]
  mov [ tmp3074 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3074 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3074 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3073
  restore tmp3074

; -----------------------------------------------
; function __X64Encoder_cmovg_r_m$5
; -----------------------------------------------
__X64Encoder_cmovg_r_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3076 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3075 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3076 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3075 ], 20239

  mov [ tmp3076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3075 ]
  mov [ tmp3076 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3076 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3076 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3075
  restore tmp3076

; -----------------------------------------------
; function __X64Encoder_ud2$0
; -----------------------------------------------
__X64Encoder_ud2$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3078 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3077 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3078 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3077 ], 2831

  mov [ tmp3078 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3077 ]
  mov [ tmp3078 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3078 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3078 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3077
  restore tmp3078

; -----------------------------------------------
; function __X64Encoder_rdpmc$0
; -----------------------------------------------
__X64Encoder_rdpmc$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3080 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3079 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3080 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3079 ], 13071

  mov [ tmp3080 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3079 ]
  mov [ tmp3080 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3080 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3080 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3079
  restore tmp3080

; -----------------------------------------------
; function __X64Encoder_syscall$0
; -----------------------------------------------
__X64Encoder_syscall$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3082 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3081 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3082 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3081 ], 1295

  mov [ tmp3082 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3081 ]
  mov [ tmp3082 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3082 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3082 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3081
  restore tmp3082

; -----------------------------------------------
; function __X64Encoder_sysret$0
; -----------------------------------------------
__X64Encoder_sysret$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3084 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3083 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3084 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3083 ], 1807

  mov [ tmp3084 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3083 ]
  mov [ tmp3084 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3084 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3084 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3083
  restore tmp3084

; -----------------------------------------------
; function __X64Encoder_sysenter$0
; -----------------------------------------------
__X64Encoder_sysenter$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3086 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3085 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3086 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3085 ], 13327

  mov [ tmp3086 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3085 ]
  mov [ tmp3086 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3086 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3086 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3085
  restore tmp3086

; -----------------------------------------------
; function __X64Encoder_sysexit$0
; -----------------------------------------------
__X64Encoder_sysexit$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3088 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3087 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3088 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3087 ], 13583

  mov [ tmp3088 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3087 ]
  mov [ tmp3088 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3088 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3088 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3087
  restore tmp3088

; -----------------------------------------------
; function __X64Encoder_movsxd_r64_r32$2
; -----------------------------------------------
__X64Encoder_movsxd_r64_r32$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3090 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3089 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3090 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3089 ], 99

  mov [ tmp3090 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3089 ]
  mov [ tmp3090 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3090 ]
  lea r8 , [ regDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3090 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore regSrc
  restore tmp3089
  restore tmp3090

; -----------------------------------------------
; function __X64Encoder_movsxd_r64_m32$5
; -----------------------------------------------
__X64Encoder_movsxd_r64_m32$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3092 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3091 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3092 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3091 ], 99

  mov [ tmp3092 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3091 ]
  mov [ tmp3092 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3092 ]
  lea r8 , [ regDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3091
  restore tmp3092

; -----------------------------------------------
; function __X64Encoder_cmpxchg16b_m$4
; -----------------------------------------------
__X64Encoder_cmpxchg16b_m$4_vcall:
__X64Encoder_cmpxchg16b_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_cmpxchg8b_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_cdqe$0
; -----------------------------------------------
__X64Encoder_cdqe$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3093 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3093 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3093 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_CDQE ]
  mov [ tmp3093 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3093 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3093 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3093

; -----------------------------------------------
; function __X64Encoder_cqo$0
; -----------------------------------------------
__X64Encoder_cqo$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3094 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3094 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3094 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_CQO ]
  mov [ tmp3094 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3094 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3094 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3094

; -----------------------------------------------
; function __X64Encoder_cmpsq$0
; -----------------------------------------------
__X64Encoder_cmpsq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3095 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3095 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3095 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_CMPSQ ]
  mov [ tmp3095 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3095 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3095 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3095

; -----------------------------------------------
; function __X64Encoder_stosq$0
; -----------------------------------------------
__X64Encoder_stosq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3096 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3096 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_STOSQ ]
  mov [ tmp3096 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3096 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3096

; -----------------------------------------------
; function __X64Encoder_lodsq$0
; -----------------------------------------------
__X64Encoder_lodsq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3097 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3097 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3097 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_LODSQ ]
  mov [ tmp3097 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3097 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3097 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3097

; -----------------------------------------------
; function __X64Encoder_scasq$0
; -----------------------------------------------
__X64Encoder_scasq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3098 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3098 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3098 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_SCASQ ]
  mov [ tmp3098 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3098 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3098 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3098

; -----------------------------------------------
; function __X64Encoder_iretq$0
; -----------------------------------------------
__X64Encoder_iretq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3099 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3099 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3099 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_IRETQ ]
  mov [ tmp3099 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3099 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3099 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3099

; -----------------------------------------------
; function __X64Encoder_popfq$0
; -----------------------------------------------
__X64Encoder_popfq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3100 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3100 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3100 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_POPFQ ]
  mov [ tmp3100 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3100 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3100 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3100

; -----------------------------------------------
; function __X64Encoder_pushfq$0
; -----------------------------------------------
__X64Encoder_pushfq$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3101 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3101 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3101 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_PUSHFQ ]
  mov [ tmp3101 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3101 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3101

; -----------------------------------------------
; function __X64Encoder_rdtscp$0
; -----------------------------------------------
__X64Encoder_rdtscp$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp3103 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3102 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3103 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3102 ], 15

  mov [ tmp3103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3102 ]
  mov [ tmp3103 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3103 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp3102 ], 63745

  mov [ tmp3103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3102 ]
  mov [ tmp3103 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3103 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3103 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3102
  restore tmp3103

; -----------------------------------------------
; function __X64Encoder_swapgs$0
; -----------------------------------------------
__X64Encoder_swapgs$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp3105 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3104 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3105 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3104 ], 15

  mov [ tmp3105 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3104 ]
  mov [ tmp3105 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3105 ]
  call  __X64Encoder_emitByte$1

  mov dword [ tmp3104 ], 63489

  mov [ tmp3105 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3104 ]
  mov [ tmp3105 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3105 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3105 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3104
  restore tmp3105

; -----------------------------------------------
; function __X64Encoder_emitFPU_sti$2
; -----------------------------------------------
__X64Encoder_emitFPU_sti$2_vcall:
__X64Encoder_emitFPU_sti$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  sti EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3106 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3108 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  stiId EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3107 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp3109 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3106 + Variant_t.type], eax
  mov [tmp3108 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3107 ], 7

  mov [ tmp3108 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3107 ]
  mov [ tmp3108 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ sti ]
  lea rdx , [ tmp3108 ]
  lea r8 , [ tmp3106 ]
  call qword [rbx + 8 * 35 ]

  cmp [ tmp3106 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3106 + Variant_t.value]
  mov dword [ stiId ], eax

  mov dword [ tmp3109 ], 256

  mov eax, dword [ tmp3109 ]
  imul eax, dword [ stiId ]
  mov dword [ tmp3107 ], eax

  mov [ tmp3108 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3107 ]
  mov [ tmp3108 + Variant_t.value], rax

  ; __mold_syscall( 36 )
  lea rcx , [ opcode ]
  lea rdx , [ tmp3108 ]
  lea r8 , [ opcode ]
  call qword [rbx + 8 * 36 ]

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3106 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3108 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore opcode
  restore sti
  restore stiId
  restore tmp3106
  restore tmp3107
  restore tmp3108
  restore tmp3109

; -----------------------------------------------
; function __X64Encoder_emitFPU_m$5
; -----------------------------------------------
__X64Encoder_emitFPU_m$5_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__X64Encoder_emitFPU_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  baseOpcode EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  operationId EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3110 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3112 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  mixedOpcode EQU rbp - 156 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp3111 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp3113 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ mixedOpcode ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [baseOpcode + Variant_t.type], eax
  mov [operationId + Variant_t.type], eax
  mov [tmp3110 + Variant_t.type], eax
  mov [tmp3112 + Variant_t.type], eax

  ; code
  ; ----

  mov [ tmp3110 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ mixedOpcode ]
  mov [ tmp3110 + Variant_t.value], rax

  mov dword [ tmp3111 ], 255

  mov [ tmp3112 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3111 ]
  mov [ tmp3112 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp3110 ]
  lea rdx , [ tmp3112 ]
  lea r8 , [ baseOpcode ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp3113 ], 256

  mov  eax, dword [ mixedOpcode ]
  mov  ecx, dword [ tmp3113 ]
  cdq
  idiv ecx
  mov  dword [ tmp3111 ], eax

  mov [ tmp3112 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3111 ]
  mov [ tmp3112 + Variant_t.value], rax

  mov dword [ tmp3111 ], 7

  mov [ tmp3110 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3111 ]
  mov [ tmp3110 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp3112 ]
  lea rdx , [ tmp3110 ]
  lea r8 , [ operationId ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  lea rdx , [ baseOpcode ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ baseOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ operationId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3110 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3112 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore mixedOpcode
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore baseOpcode
  restore operationId
  restore tmp3110
  restore tmp3111
  restore tmp3112
  restore tmp3113

; -----------------------------------------------
; function __X64Encoder_emitFPU_st0_sti$2
; -----------------------------------------------
__X64Encoder_emitFPU_st0_sti$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3115 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3117 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3114 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3116 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3115 + Variant_t.type], eax
  mov [tmp3117 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3114 ], 216

  mov dword [ tmp3116 ], 7

  mov [ tmp3117 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3116 ]
  mov [ tmp3117 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ stSrc ]
  lea rdx , [ tmp3117 ]
  lea r8 , [ tmp3115 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  mov edx , dword [ tmp3114 ]
  lea r8 , [ operationId ]
  lea r9 , [ tmp3115 ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3115 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3117 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore operationId
  restore stSrc
  restore tmp3114
  restore tmp3115
  restore tmp3116
  restore tmp3117

; -----------------------------------------------
; function __X64Encoder_emitFPU_sti_st0$2
; -----------------------------------------------
__X64Encoder_emitFPU_sti_st0$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3119 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3121 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3118 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3120 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3119 + Variant_t.type], eax
  mov [tmp3121 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3118 ], 220

  mov dword [ tmp3120 ], 7

  mov [ tmp3121 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3120 ]
  mov [ tmp3121 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ stDst ]
  lea rdx , [ tmp3121 ]
  lea r8 , [ tmp3119 ]
  call qword [rbx + 8 * 35 ]

  lea rcx , [ this ]
  mov edx , dword [ tmp3118 ]
  lea r8 , [ operationId ]
  lea r9 , [ tmp3119 ]
  call  __X64Encoder_emitCore_group_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3119 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3121 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore operationId
  restore stDst
  restore tmp3118
  restore tmp3119
  restore tmp3120
  restore tmp3121

; -----------------------------------------------
; function __X64Encoder_emitFPU_m32real$5
; -----------------------------------------------
__X64Encoder_emitFPU_m32real$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3123 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3122 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3123 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3122 ], 216

  mov [ tmp3123 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3122 ]
  mov [ tmp3123 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3123 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore operationId
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3122
  restore tmp3123

; -----------------------------------------------
; function __X64Encoder_emitFPU_m64real$5
; -----------------------------------------------
__X64Encoder_emitFPU_m64real$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  operationId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3125 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3124 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ operationId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3125 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3124 ], 220

  mov [ tmp3125 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3124 ]
  mov [ tmp3125 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3125 ]
  lea r8 , [ operationId ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3125 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore operationId
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3124
  restore tmp3125

; -----------------------------------------------
; function __X64Encoder_fadd_st0_sti$1
; -----------------------------------------------
__X64Encoder_fadd_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3127 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3126 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3127 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3126 ], 0

  mov [ tmp3127 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3126 ]
  mov [ tmp3127 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3127 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3127 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3126
  restore tmp3127

; -----------------------------------------------
; function __X64Encoder_fmul_st0_sti$1
; -----------------------------------------------
__X64Encoder_fmul_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3129 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3128 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3129 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3128 ], 1

  mov [ tmp3129 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3128 ]
  mov [ tmp3129 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3129 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3129 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3128
  restore tmp3129

; -----------------------------------------------
; function __X64Encoder_fcom_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcom_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3131 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3130 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3131 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3130 ], 2

  mov [ tmp3131 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3130 ]
  mov [ tmp3131 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3131 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3131 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3130
  restore tmp3131

; -----------------------------------------------
; function __X64Encoder_fcomp_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcomp_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3133 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3132 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3133 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3132 ], 3

  mov [ tmp3133 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3132 ]
  mov [ tmp3133 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3133 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3133 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3132
  restore tmp3133

; -----------------------------------------------
; function __X64Encoder_fsub_st0_sti$1
; -----------------------------------------------
__X64Encoder_fsub_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3135 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3134 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3135 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3134 ], 4

  mov [ tmp3135 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3134 ]
  mov [ tmp3135 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3135 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3135 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3134
  restore tmp3135

; -----------------------------------------------
; function __X64Encoder_fsubr_st0_sti$1
; -----------------------------------------------
__X64Encoder_fsubr_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3137 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3136 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3137 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3136 ], 5

  mov [ tmp3137 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3136 ]
  mov [ tmp3137 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3137 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3137 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3136
  restore tmp3137

; -----------------------------------------------
; function __X64Encoder_fdiv_st0_sti$1
; -----------------------------------------------
__X64Encoder_fdiv_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3139 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3138 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3139 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3138 ], 6

  mov [ tmp3139 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3138 ]
  mov [ tmp3139 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3139 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3139 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3138
  restore tmp3139

; -----------------------------------------------
; function __X64Encoder_fdivr_st0_sti$1
; -----------------------------------------------
__X64Encoder_fdivr_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3141 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3140 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3141 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3140 ], 7

  mov [ tmp3141 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3140 ]
  mov [ tmp3141 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3141 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_st0_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3140
  restore tmp3141

; -----------------------------------------------
; function __X64Encoder_fadd_sti_st0$1
; -----------------------------------------------
__X64Encoder_fadd_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3143 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3142 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3143 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3142 ], 0

  mov [ tmp3143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3142 ]
  mov [ tmp3143 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3143 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti_st0$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3142
  restore tmp3143

; -----------------------------------------------
; function __X64Encoder_fmul_sti_st0$1
; -----------------------------------------------
__X64Encoder_fmul_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3145 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3144 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3145 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3144 ], 1

  mov [ tmp3145 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3144 ]
  mov [ tmp3145 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3145 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti_st0$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3145 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3144
  restore tmp3145

; -----------------------------------------------
; function __X64Encoder_fsub_sti_st0$1
; -----------------------------------------------
__X64Encoder_fsub_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3147 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3146 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3147 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3146 ], 4

  mov [ tmp3147 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3146 ]
  mov [ tmp3147 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3147 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti_st0$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3147 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3146
  restore tmp3147

; -----------------------------------------------
; function __X64Encoder_fsubr_sti_st0$1
; -----------------------------------------------
__X64Encoder_fsubr_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3149 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3148 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3149 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3148 ], 5

  mov [ tmp3149 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3148 ]
  mov [ tmp3149 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3149 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti_st0$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3149 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3148
  restore tmp3149

; -----------------------------------------------
; function __X64Encoder_fdiv_sti_st0$1
; -----------------------------------------------
__X64Encoder_fdiv_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3151 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3150 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3151 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3150 ], 6

  mov [ tmp3151 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3150 ]
  mov [ tmp3151 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3151 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti_st0$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3151 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3150
  restore tmp3151

; -----------------------------------------------
; function __X64Encoder_fdivr_sti_st0$1
; -----------------------------------------------
__X64Encoder_fdivr_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3153 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3152 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3153 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3152 ], 7

  mov [ tmp3153 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3152 ]
  mov [ tmp3153 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3153 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti_st0$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3153 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3152
  restore tmp3153

; -----------------------------------------------
; function __X64Encoder_fadd_m32$4
; -----------------------------------------------
__X64Encoder_fadd_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3155 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3154 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3155 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3154 ], 0

  mov [ tmp3155 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3154 ]
  mov [ tmp3155 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3155 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3155 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3154
  restore tmp3155

; -----------------------------------------------
; function __X64Encoder_fmul_m32$4
; -----------------------------------------------
__X64Encoder_fmul_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3157 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3156 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3157 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3156 ], 1

  mov [ tmp3157 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3156 ]
  mov [ tmp3157 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3157 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3157 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3156
  restore tmp3157

; -----------------------------------------------
; function __X64Encoder_fcom_m32$4
; -----------------------------------------------
__X64Encoder_fcom_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3159 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3158 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3159 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3158 ], 2

  mov [ tmp3159 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3158 ]
  mov [ tmp3159 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3159 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3159 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3158
  restore tmp3159

; -----------------------------------------------
; function __X64Encoder_fcomp_m32$4
; -----------------------------------------------
__X64Encoder_fcomp_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3161 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3160 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3161 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3160 ], 3

  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3160 ]
  mov [ tmp3161 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3161 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3160
  restore tmp3161

; -----------------------------------------------
; function __X64Encoder_fsub_m32$4
; -----------------------------------------------
__X64Encoder_fsub_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3163 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3162 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3163 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3162 ], 4

  mov [ tmp3163 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3163 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3163 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3163 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3162
  restore tmp3163

; -----------------------------------------------
; function __X64Encoder_fsubr_m32$4
; -----------------------------------------------
__X64Encoder_fsubr_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3165 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3164 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3165 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3164 ], 5

  mov [ tmp3165 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3164 ]
  mov [ tmp3165 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3165 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3165 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3164
  restore tmp3165

; -----------------------------------------------
; function __X64Encoder_fdiv_m32$4
; -----------------------------------------------
__X64Encoder_fdiv_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3167 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3166 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3167 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3166 ], 6

  mov [ tmp3167 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3166 ]
  mov [ tmp3167 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3167 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3167 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3166
  restore tmp3167

; -----------------------------------------------
; function __X64Encoder_fdivr_m32$4
; -----------------------------------------------
__X64Encoder_fdivr_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3169 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3168 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3169 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3168 ], 7

  mov [ tmp3169 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3168 ]
  mov [ tmp3169 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3169 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m32real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3168
  restore tmp3169

; -----------------------------------------------
; function __X64Encoder_fadd_m64$4
; -----------------------------------------------
__X64Encoder_fadd_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3171 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3170 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3171 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3170 ], 0

  mov [ tmp3171 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3170 ]
  mov [ tmp3171 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3171 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3170
  restore tmp3171

; -----------------------------------------------
; function __X64Encoder_fmul_m64$4
; -----------------------------------------------
__X64Encoder_fmul_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3173 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3172 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3173 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3172 ], 1

  mov [ tmp3173 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3172 ]
  mov [ tmp3173 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3173 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3173 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3172
  restore tmp3173

; -----------------------------------------------
; function __X64Encoder_fcom_m64$4
; -----------------------------------------------
__X64Encoder_fcom_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3175 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3174 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3175 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3174 ], 2

  mov [ tmp3175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3174 ]
  mov [ tmp3175 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3175 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3175 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3174
  restore tmp3175

; -----------------------------------------------
; function __X64Encoder_fcomp_m64$4
; -----------------------------------------------
__X64Encoder_fcomp_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3177 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3176 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3177 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3176 ], 3

  mov [ tmp3177 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3176 ]
  mov [ tmp3177 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3177 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3177 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3176
  restore tmp3177

; -----------------------------------------------
; function __X64Encoder_fsub_m64$4
; -----------------------------------------------
__X64Encoder_fsub_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3179 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3178 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3179 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3178 ], 4

  mov [ tmp3179 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3178 ]
  mov [ tmp3179 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3179 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3179 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3178
  restore tmp3179

; -----------------------------------------------
; function __X64Encoder_fsubr_m64$4
; -----------------------------------------------
__X64Encoder_fsubr_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3181 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3180 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3181 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3180 ], 5

  mov [ tmp3181 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3180 ]
  mov [ tmp3181 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3181 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3181 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3180
  restore tmp3181

; -----------------------------------------------
; function __X64Encoder_fdiv_m64$4
; -----------------------------------------------
__X64Encoder_fdiv_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3183 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3182 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3183 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3182 ], 6

  mov [ tmp3183 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3182 ]
  mov [ tmp3183 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3183 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3183 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3182
  restore tmp3183

; -----------------------------------------------
; function __X64Encoder_fdivr_m64$4
; -----------------------------------------------
__X64Encoder_fdivr_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3185 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3184 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3185 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3184 ], 7

  mov [ tmp3185 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3184 ]
  mov [ tmp3185 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3185 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m64real$5
  add rsp, 16


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3185 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3184
  restore tmp3185

; -----------------------------------------------
; function __X64Encoder_faddp_sti_st0$1
; -----------------------------------------------
__X64Encoder_faddp_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3187 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3186 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3187 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3186 ], 49374

  mov [ tmp3187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3186 ]
  mov [ tmp3187 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3187 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3187 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3186
  restore tmp3187

; -----------------------------------------------
; function __X64Encoder_fdivp_sti_st0$1
; -----------------------------------------------
__X64Encoder_fdivp_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3189 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3188 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3189 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3188 ], 63710

  mov [ tmp3189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3188 ]
  mov [ tmp3189 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3189 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3189 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3188
  restore tmp3189

; -----------------------------------------------
; function __X64Encoder_fdivrp_sti_st0$1
; -----------------------------------------------
__X64Encoder_fdivrp_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3191 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3190 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3191 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3190 ], 61662

  mov [ tmp3191 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3190 ]
  mov [ tmp3191 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3191 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3191 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3190
  restore tmp3191

; -----------------------------------------------
; function __X64Encoder_fmulp_sti_st0$1
; -----------------------------------------------
__X64Encoder_fmulp_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3193 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3192 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3193 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3192 ], 51422

  mov [ tmp3193 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3192 ]
  mov [ tmp3193 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3193 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3193 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3192
  restore tmp3193

; -----------------------------------------------
; function __X64Encoder_fsubp_sti_st0$1
; -----------------------------------------------
__X64Encoder_fsubp_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3195 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3194 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3195 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3194 ], 59614

  mov [ tmp3195 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3194 ]
  mov [ tmp3195 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3195 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3195 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3194
  restore tmp3195

; -----------------------------------------------
; function __X64Encoder_fsubrp_sti_st0$1
; -----------------------------------------------
__X64Encoder_fsubrp_sti_st0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3197 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3196 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3197 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3196 ], 57566

  mov [ tmp3197 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3196 ]
  mov [ tmp3197 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3197 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3197 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3196
  restore tmp3197

; -----------------------------------------------
; function __X64Encoder_fxch_sti$1
; -----------------------------------------------
__X64Encoder_fxch_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3199 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3198 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3199 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3198 ], 51417

  mov [ tmp3199 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3198 ]
  mov [ tmp3199 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3199 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3199 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3198
  restore tmp3199

; -----------------------------------------------
; function __X64Encoder_fcom$0
; -----------------------------------------------
__X64Encoder_fcom$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3201 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3200 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3201 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3200 ], 1

  mov [ tmp3201 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3200 ]
  mov [ tmp3201 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3201 ]
  call  __X64Encoder_fcom_st0_sti$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3201 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3200
  restore tmp3201

; -----------------------------------------------
; function __X64Encoder_fxch$0
; -----------------------------------------------
__X64Encoder_fxch$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3203 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3202 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3203 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3202 ], 1

  mov [ tmp3203 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3202 ]
  mov [ tmp3203 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3203 ]
  call  __X64Encoder_fxch_sti$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3203 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3202
  restore tmp3203

; -----------------------------------------------
; function __X64Encoder_fild_m16$4
; -----------------------------------------------
__X64Encoder_fild_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3204 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3204 ], 223

  lea rcx , [ this ]
  mov edx , dword [ tmp3204 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3204

; -----------------------------------------------
; function __X64Encoder_fild_m32$4
; -----------------------------------------------
__X64Encoder_fild_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3205 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3205 ], 219

  lea rcx , [ this ]
  mov edx , dword [ tmp3205 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3205

; -----------------------------------------------
; function __X64Encoder_fild_m64$4
; -----------------------------------------------
__X64Encoder_fild_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3206 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3206 ], 1503

  lea rcx , [ this ]
  mov edx , dword [ tmp3206 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3206

; -----------------------------------------------
; function __X64Encoder_fistp_m16$4
; -----------------------------------------------
__X64Encoder_fistp_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3207 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3207 ], 991

  lea rcx , [ this ]
  mov edx , dword [ tmp3207 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3207

; -----------------------------------------------
; function __X64Encoder_fistp_m32$4
; -----------------------------------------------
__X64Encoder_fistp_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3208 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3208 ], 987

  lea rcx , [ this ]
  mov edx , dword [ tmp3208 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3208

; -----------------------------------------------
; function __X64Encoder_fistp_m64$4
; -----------------------------------------------
__X64Encoder_fistp_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3209 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3209 ], 2015

  lea rcx , [ this ]
  mov edx , dword [ tmp3209 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3209

; -----------------------------------------------
; function __X64Encoder_fiadd_m16$4
; -----------------------------------------------
__X64Encoder_fiadd_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3210 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3210 ], 222

  lea rcx , [ this ]
  mov edx , dword [ tmp3210 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3210

; -----------------------------------------------
; function __X64Encoder_fiadd_m32$4
; -----------------------------------------------
__X64Encoder_fiadd_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3211 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3211 ], 218

  lea rcx , [ this ]
  mov edx , dword [ tmp3211 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3211

; -----------------------------------------------
; function __X64Encoder_fimul_m16$4
; -----------------------------------------------
__X64Encoder_fimul_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3212 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3212 ], 478

  lea rcx , [ this ]
  mov edx , dword [ tmp3212 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3212

; -----------------------------------------------
; function __X64Encoder_fimul_m32$4
; -----------------------------------------------
__X64Encoder_fimul_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3213 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3213 ], 474

  lea rcx , [ this ]
  mov edx , dword [ tmp3213 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3213

; -----------------------------------------------
; function __X64Encoder_fidiv_m16$4
; -----------------------------------------------
__X64Encoder_fidiv_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3214 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3214 ], 1758

  lea rcx , [ this ]
  mov edx , dword [ tmp3214 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3214

; -----------------------------------------------
; function __X64Encoder_fidiv_m32$4
; -----------------------------------------------
__X64Encoder_fidiv_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3215 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3215 ], 1754

  lea rcx , [ this ]
  mov edx , dword [ tmp3215 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3215

; -----------------------------------------------
; function __X64Encoder_fidivr_m16$4
; -----------------------------------------------
__X64Encoder_fidivr_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3216 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3216 ], 2014

  lea rcx , [ this ]
  mov edx , dword [ tmp3216 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3216

; -----------------------------------------------
; function __X64Encoder_fidivr_m32$4
; -----------------------------------------------
__X64Encoder_fidivr_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3217 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3217 ], 2010

  lea rcx , [ this ]
  mov edx , dword [ tmp3217 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3217

; -----------------------------------------------
; function __X64Encoder_fisub_m16$4
; -----------------------------------------------
__X64Encoder_fisub_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3218 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3218 ], 1246

  lea rcx , [ this ]
  mov edx , dword [ tmp3218 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3218

; -----------------------------------------------
; function __X64Encoder_fisub_m32$4
; -----------------------------------------------
__X64Encoder_fisub_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3219 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3219 ], 1242

  lea rcx , [ this ]
  mov edx , dword [ tmp3219 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3219

; -----------------------------------------------
; function __X64Encoder_fisubr_m16$4
; -----------------------------------------------
__X64Encoder_fisubr_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3220 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3220 ], 1502

  lea rcx , [ this ]
  mov edx , dword [ tmp3220 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3220

; -----------------------------------------------
; function __X64Encoder_fisubr_m32$4
; -----------------------------------------------
__X64Encoder_fisubr_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3221 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3221 ], 1498

  lea rcx , [ this ]
  mov edx , dword [ tmp3221 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3221

; -----------------------------------------------
; function __X64Encoder_fist_m16$4
; -----------------------------------------------
__X64Encoder_fist_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3222 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3222 ], 735

  lea rcx , [ this ]
  mov edx , dword [ tmp3222 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3222

; -----------------------------------------------
; function __X64Encoder_fist_m32$4
; -----------------------------------------------
__X64Encoder_fist_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3223 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3223 ], 731

  lea rcx , [ this ]
  mov edx , dword [ tmp3223 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3223

; -----------------------------------------------
; function __X64Encoder_ficom_m16$4
; -----------------------------------------------
__X64Encoder_ficom_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3224 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3224 ], 734

  lea rcx , [ this ]
  mov edx , dword [ tmp3224 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3224

; -----------------------------------------------
; function __X64Encoder_ficom_m32$4
; -----------------------------------------------
__X64Encoder_ficom_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3225 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3225 ], 730

  lea rcx , [ this ]
  mov edx , dword [ tmp3225 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3225

; -----------------------------------------------
; function __X64Encoder_ficomp_m16$4
; -----------------------------------------------
__X64Encoder_ficomp_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3226 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3226 ], 990

  lea rcx , [ this ]
  mov edx , dword [ tmp3226 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3226

; -----------------------------------------------
; function __X64Encoder_ficomp_m32$4
; -----------------------------------------------
__X64Encoder_ficomp_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3227 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3227 ], 986

  lea rcx , [ this ]
  mov edx , dword [ tmp3227 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3227

; -----------------------------------------------
; function __X64Encoder_ffree_sti$1
; -----------------------------------------------
__X64Encoder_ffree_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3229 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3228 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3229 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3228 ], 49373

  mov [ tmp3229 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3228 ]
  mov [ tmp3229 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3229 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3229 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3228
  restore tmp3229

; -----------------------------------------------
; function __X64Encoder_fld_m32$4
; -----------------------------------------------
__X64Encoder_fld_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3230 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3230 ], 217

  lea rcx , [ this ]
  mov edx , dword [ tmp3230 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3230

; -----------------------------------------------
; function __X64Encoder_fld_m64$4
; -----------------------------------------------
__X64Encoder_fld_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3231 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3231 ], 221

  lea rcx , [ this ]
  mov edx , dword [ tmp3231 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3231

; -----------------------------------------------
; function __X64Encoder_fld_m80$4
; -----------------------------------------------
__X64Encoder_fld_m80$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3232 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3232 ], 1499

  lea rcx , [ this ]
  mov edx , dword [ tmp3232 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3232

; -----------------------------------------------
; function __X64Encoder_fld_sti$1
; -----------------------------------------------
__X64Encoder_fld_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3234 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3233 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stDst ], xmm0
  xor eax, eax
  mov [tmp3234 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3233 ], 49369

  mov [ tmp3234 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3233 ]
  mov [ tmp3234 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3234 ]
  lea r8 , [ stDst ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3234 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stDst
  restore tmp3233
  restore tmp3234

; -----------------------------------------------
; function __X64Encoder_fstp_m32$4
; -----------------------------------------------
__X64Encoder_fstp_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3235 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3235 ], 985

  lea rcx , [ this ]
  mov edx , dword [ tmp3235 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3235

; -----------------------------------------------
; function __X64Encoder_fstp_m64$4
; -----------------------------------------------
__X64Encoder_fstp_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3236 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3236 ], 989

  lea rcx , [ this ]
  mov edx , dword [ tmp3236 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3236

; -----------------------------------------------
; function __X64Encoder_fstp_m80$4
; -----------------------------------------------
__X64Encoder_fstp_m80$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3237 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3237 ], 2011

  lea rcx , [ this ]
  mov edx , dword [ tmp3237 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3237

; -----------------------------------------------
; function __X64Encoder_fstp_sti$1
; -----------------------------------------------
__X64Encoder_fstp_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3239 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3238 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3239 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3238 ], 55517

  mov [ tmp3239 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3238 ]
  mov [ tmp3239 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3239 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3239 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3238
  restore tmp3239

; -----------------------------------------------
; function __X64Encoder_fst_m32$4
; -----------------------------------------------
__X64Encoder_fst_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3240 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3240 ], 729

  lea rcx , [ this ]
  mov edx , dword [ tmp3240 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3240

; -----------------------------------------------
; function __X64Encoder_fst_m64$4
; -----------------------------------------------
__X64Encoder_fst_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3241 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3241 ], 733

  lea rcx , [ this ]
  mov edx , dword [ tmp3241 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3241

; -----------------------------------------------
; function __X64Encoder_fst_sti$1
; -----------------------------------------------
__X64Encoder_fst_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3243 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3242 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3243 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3242 ], 53469

  mov [ tmp3243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3242 ]
  mov [ tmp3243 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3243 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3243 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3242
  restore tmp3243

; -----------------------------------------------
; function __X64Encoder_fnstsw_ax$0
; -----------------------------------------------
__X64Encoder_fnstsw_ax$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3245 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3244 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3245 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3244 ], 57567

  mov [ tmp3245 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3244 ]
  mov [ tmp3245 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3245 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3245 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3244
  restore tmp3245

; -----------------------------------------------
; function __X64Encoder_fnstsw_m16$4
; -----------------------------------------------
__X64Encoder_fnstsw_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3246 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3246 ], 2013

  lea rcx , [ this ]
  mov edx , dword [ tmp3246 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3246

; -----------------------------------------------
; function __X64Encoder_fstsw_ax$0
; -----------------------------------------------
__X64Encoder_fstsw_ax$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  call  __X64Encoder_fnstsw_ax$0


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __X64Encoder_fstsw_m16$4
; -----------------------------------------------
__X64Encoder_fstsw_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnstsw_m16$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_frstor_m$4
; -----------------------------------------------
__X64Encoder_frstor_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3247 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3247 ], 1245

  lea rcx , [ this ]
  mov edx , dword [ tmp3247 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3247

; -----------------------------------------------
; function __X64Encoder_fnsave_m$4
; -----------------------------------------------
__X64Encoder_fnsave_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3248 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3248 ], 1757

  lea rcx , [ this ]
  mov edx , dword [ tmp3248 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3248

; -----------------------------------------------
; function __X64Encoder_fsave_m$4
; -----------------------------------------------
__X64Encoder_fsave_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnsave_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_fnstenv_m$4
; -----------------------------------------------
__X64Encoder_fnstenv_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3249 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3249 ], 1753

  lea rcx , [ this ]
  mov edx , dword [ tmp3249 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3249

; -----------------------------------------------
; function __X64Encoder_fnstenvw_m$4
; -----------------------------------------------
__X64Encoder_fnstenvw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnstenv_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_fstenv_m$4
; -----------------------------------------------
__X64Encoder_fstenv_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnstenv_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_fnstcw_m$4
; -----------------------------------------------
__X64Encoder_fnstcw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3250 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3250 ], 2009

  lea rcx , [ this ]
  mov edx , dword [ tmp3250 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3250

; -----------------------------------------------
; function __X64Encoder_fldcw_m$4
; -----------------------------------------------
__X64Encoder_fldcw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3251 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3251 ], 1497

  lea rcx , [ this ]
  mov edx , dword [ tmp3251 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3251

; -----------------------------------------------
; function __X64Encoder_fstcw_m$4
; -----------------------------------------------
__X64Encoder_fstcw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnstcw_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_fbld_m$4
; -----------------------------------------------
__X64Encoder_fbld_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3252 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3252 ], 1247

  lea rcx , [ this ]
  mov edx , dword [ tmp3252 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3252

; -----------------------------------------------
; function __X64Encoder_fbstp_m$4
; -----------------------------------------------
__X64Encoder_fbstp_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3253 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3253 ], 1759

  lea rcx , [ this ]
  mov edx , dword [ tmp3253 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3253

; -----------------------------------------------
; function __X64Encoder_fldenv_m$4
; -----------------------------------------------
__X64Encoder_fldenv_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3254 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3254 ], 1241

  lea rcx , [ this ]
  mov edx , dword [ tmp3254 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3254

; -----------------------------------------------
; function __X64Encoder_fldenvw_m$4
; -----------------------------------------------
__X64Encoder_fldenvw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fldenv_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_fnsavew_m$4
; -----------------------------------------------
__X64Encoder_fnsavew_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnsave_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_frstorw_m$4
; -----------------------------------------------
__X64Encoder_frstorw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix16$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_frstor_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_fsavew_m$4
; -----------------------------------------------
__X64Encoder_fsavew_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnsavew_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_fstenvw_m$4
; -----------------------------------------------
__X64Encoder_fstenvw_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  lea rdx , [ regBase ]
  lea r8 , [ scale ]
  lea r9 , [ regIndex ]
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_fnstenvw_m$4
  add rsp, 8


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp

; -----------------------------------------------
; function __X64Encoder_f2xm1$0
; -----------------------------------------------
__X64Encoder_f2xm1$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3256 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3255 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3256 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3255 ], 61657

  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3256 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3256 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3255
  restore tmp3256

; -----------------------------------------------
; function __X64Encoder_fabs$0
; -----------------------------------------------
__X64Encoder_fabs$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3258 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3257 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3258 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3257 ], 57817

  mov [ tmp3258 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3257 ]
  mov [ tmp3258 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3258 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3258 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3257
  restore tmp3258

; -----------------------------------------------
; function __X64Encoder_fchs$0
; -----------------------------------------------
__X64Encoder_fchs$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3260 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3259 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3260 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3259 ], 57561

  mov [ tmp3260 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3259 ]
  mov [ tmp3260 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3260 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3260 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3259
  restore tmp3260

; -----------------------------------------------
; function __X64Encoder_fclex$0
; -----------------------------------------------
__X64Encoder_fclex$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  call  __X64Encoder_fnclex$0


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __X64Encoder_fcompp$0
; -----------------------------------------------
__X64Encoder_fcompp$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3262 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3261 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3262 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3261 ], 55774

  mov [ tmp3262 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3261 ]
  mov [ tmp3262 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3262 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3262 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3261
  restore tmp3262

; -----------------------------------------------
; function __X64Encoder_fdecstp$0
; -----------------------------------------------
__X64Encoder_fdecstp$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3264 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3263 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3264 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3263 ], 63193

  mov [ tmp3264 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3263 ]
  mov [ tmp3264 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3264 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3264 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3263
  restore tmp3264

; -----------------------------------------------
; function __X64Encoder_fincstp$0
; -----------------------------------------------
__X64Encoder_fincstp$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3266 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3265 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3266 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3265 ], 63449

  mov [ tmp3266 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3265 ]
  mov [ tmp3266 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3266 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3266 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3265
  restore tmp3266

; -----------------------------------------------
; function __X64Encoder_finit$0
; -----------------------------------------------
__X64Encoder_finit$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_fwait$0

  lea rcx , [ this ]
  call  __X64Encoder_fninit$0


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __X64Encoder_fld1$0
; -----------------------------------------------
__X64Encoder_fld1$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3268 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3267 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3268 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3267 ], 59609

  mov [ tmp3268 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3267 ]
  mov [ tmp3268 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3268 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3268 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3267
  restore tmp3268

; -----------------------------------------------
; function __X64Encoder_fldl2e$0
; -----------------------------------------------
__X64Encoder_fldl2e$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3270 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3269 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3270 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3269 ], 60121

  mov [ tmp3270 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3269 ]
  mov [ tmp3270 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3270 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3270 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3269
  restore tmp3270

; -----------------------------------------------
; function __X64Encoder_fldl2t$0
; -----------------------------------------------
__X64Encoder_fldl2t$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3272 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3271 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3272 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3271 ], 59865

  mov [ tmp3272 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3271 ]
  mov [ tmp3272 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3272 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3272 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3271
  restore tmp3272

; -----------------------------------------------
; function __X64Encoder_fldlg2$0
; -----------------------------------------------
__X64Encoder_fldlg2$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3274 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3273 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3274 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3273 ], 60633

  mov [ tmp3274 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3273 ]
  mov [ tmp3274 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3274 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3274 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3273
  restore tmp3274

; -----------------------------------------------
; function __X64Encoder_fldln2$0
; -----------------------------------------------
__X64Encoder_fldln2$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3276 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3275 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3276 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3275 ], 60889

  mov [ tmp3276 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3275 ]
  mov [ tmp3276 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3276 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3276 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3275
  restore tmp3276

; -----------------------------------------------
; function __X64Encoder_fldpi$0
; -----------------------------------------------
__X64Encoder_fldpi$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3278 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3277 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3278 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3277 ], 60377

  mov [ tmp3278 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3277 ]
  mov [ tmp3278 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3278 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3278 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3277
  restore tmp3278

; -----------------------------------------------
; function __X64Encoder_fldz$0
; -----------------------------------------------
__X64Encoder_fldz$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3280 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3279 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3280 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3279 ], 61145

  mov [ tmp3280 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3279 ]
  mov [ tmp3280 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3280 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3280 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3279
  restore tmp3280

; -----------------------------------------------
; function __X64Encoder_fnclex$0
; -----------------------------------------------
__X64Encoder_fnclex$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3282 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3281 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3282 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3281 ], 58075

  mov [ tmp3282 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3281 ]
  mov [ tmp3282 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3282 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3282 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3281
  restore tmp3282

; -----------------------------------------------
; function __X64Encoder_fninit$0
; -----------------------------------------------
__X64Encoder_fninit$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3284 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3283 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3284 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3283 ], 58331

  mov [ tmp3284 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3283 ]
  mov [ tmp3284 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3284 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3284 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3283
  restore tmp3284

; -----------------------------------------------
; function __X64Encoder_fnop$0
; -----------------------------------------------
__X64Encoder_fnop$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3286 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3285 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3286 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3285 ], 53465

  mov [ tmp3286 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3285 ]
  mov [ tmp3286 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3286 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3286 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3285
  restore tmp3286

; -----------------------------------------------
; function __X64Encoder_fpatan$0
; -----------------------------------------------
__X64Encoder_fpatan$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3288 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3287 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3288 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3287 ], 62425

  mov [ tmp3288 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3287 ]
  mov [ tmp3288 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3288 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3288 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3287
  restore tmp3288

; -----------------------------------------------
; function __X64Encoder_fprem$0
; -----------------------------------------------
__X64Encoder_fprem$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3290 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3289 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3290 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3289 ], 63705

  mov [ tmp3290 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3289 ]
  mov [ tmp3290 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3290 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3290 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3289
  restore tmp3290

; -----------------------------------------------
; function __X64Encoder_fptan$0
; -----------------------------------------------
__X64Encoder_fptan$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3292 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3291 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3292 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3291 ], 62169

  mov [ tmp3292 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3291 ]
  mov [ tmp3292 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3292 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3292 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3291
  restore tmp3292

; -----------------------------------------------
; function __X64Encoder_frndint$0
; -----------------------------------------------
__X64Encoder_frndint$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3294 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3293 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3294 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3293 ], 64729

  mov [ tmp3294 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3293 ]
  mov [ tmp3294 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3294 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3294 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3293
  restore tmp3294

; -----------------------------------------------
; function __X64Encoder_fscale$0
; -----------------------------------------------
__X64Encoder_fscale$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3296 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3295 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3296 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3295 ], 64985

  mov [ tmp3296 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3295 ]
  mov [ tmp3296 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3296 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3296 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3295
  restore tmp3296

; -----------------------------------------------
; function __X64Encoder_fsqrt$0
; -----------------------------------------------
__X64Encoder_fsqrt$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3298 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3297 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3298 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3297 ], 64217

  mov [ tmp3298 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3297 ]
  mov [ tmp3298 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3298 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3298 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3297
  restore tmp3298

; -----------------------------------------------
; function __X64Encoder_ftst$0
; -----------------------------------------------
__X64Encoder_ftst$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3300 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3299 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3300 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3299 ], 58585

  mov [ tmp3300 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3299 ]
  mov [ tmp3300 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3300 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3300 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3299
  restore tmp3300

; -----------------------------------------------
; function __X64Encoder_fwait$0
; -----------------------------------------------
__X64Encoder_fwait$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_wait$0


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __X64Encoder_fxam$0
; -----------------------------------------------
__X64Encoder_fxam$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3302 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3301 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3302 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3301 ], 58841

  mov [ tmp3302 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3301 ]
  mov [ tmp3302 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3302 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3302 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3301
  restore tmp3302

; -----------------------------------------------
; function __X64Encoder_fxtract$0
; -----------------------------------------------
__X64Encoder_fxtract$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3304 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3303 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3304 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3303 ], 62681

  mov [ tmp3304 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3303 ]
  mov [ tmp3304 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3304 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3304 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3303
  restore tmp3304

; -----------------------------------------------
; function __X64Encoder_fyl2x$0
; -----------------------------------------------
__X64Encoder_fyl2x$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3306 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3305 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3306 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3305 ], 61913

  mov [ tmp3306 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3305 ]
  mov [ tmp3306 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3306 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3306 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3305
  restore tmp3306

; -----------------------------------------------
; function __X64Encoder_fyl2xp1$0
; -----------------------------------------------
__X64Encoder_fyl2xp1$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3308 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3307 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3308 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3307 ], 63961

  mov [ tmp3308 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3307 ]
  mov [ tmp3308 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3308 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3308 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3307
  restore tmp3308

; -----------------------------------------------
; function __X64Encoder_fucom_sti$1
; -----------------------------------------------
__X64Encoder_fucom_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3310 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3309 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3310 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3309 ], 57565

  mov [ tmp3310 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3309 ]
  mov [ tmp3310 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3310 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3310 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3309
  restore tmp3310

; -----------------------------------------------
; function __X64Encoder_fucomp_sti$1
; -----------------------------------------------
__X64Encoder_fucomp_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3312 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3311 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3312 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3311 ], 59613

  mov [ tmp3312 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3311 ]
  mov [ tmp3312 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3312 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3312 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3311
  restore tmp3312

; -----------------------------------------------
; function __X64Encoder_fucom$0
; -----------------------------------------------
__X64Encoder_fucom$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3314 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3313 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3314 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3313 ], 1

  mov [ tmp3314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3313 ]
  mov [ tmp3314 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3314 ]
  call  __X64Encoder_fucom_sti$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3314 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3313
  restore tmp3314

; -----------------------------------------------
; function __X64Encoder_fucomp$0
; -----------------------------------------------
__X64Encoder_fucomp$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3316 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3315 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3316 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3315 ], 1

  mov [ tmp3316 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3315 ]
  mov [ tmp3316 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3316 ]
  call  __X64Encoder_fucomp_sti$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3316 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3315
  restore tmp3316

; -----------------------------------------------
; function __X64Encoder_fsin$0
; -----------------------------------------------
__X64Encoder_fsin$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3318 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3317 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3318 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3317 ], 65241

  mov [ tmp3318 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3317 ]
  mov [ tmp3318 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3318 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3318 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3317
  restore tmp3318

; -----------------------------------------------
; function __X64Encoder_fcos$0
; -----------------------------------------------
__X64Encoder_fcos$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3320 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3319 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3320 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3319 ], 65497

  mov [ tmp3320 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3319 ]
  mov [ tmp3320 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3320 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3320 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3319
  restore tmp3320

; -----------------------------------------------
; function __X64Encoder_fsincos$0
; -----------------------------------------------
__X64Encoder_fsincos$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3322 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3321 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3322 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3321 ], 64473

  mov [ tmp3322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3321 ]
  mov [ tmp3322 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3322 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3322 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3321
  restore tmp3322

; -----------------------------------------------
; function __X64Encoder_fprem1$0
; -----------------------------------------------
__X64Encoder_fprem1$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3324 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3323 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3324 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3323 ], 62937

  mov [ tmp3324 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3323 ]
  mov [ tmp3324 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3324 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3324 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3323
  restore tmp3324

; -----------------------------------------------
; function __X64Encoder_fucompp$0
; -----------------------------------------------
__X64Encoder_fucompp$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3326 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3325 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3326 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3325 ], 59866

  mov [ tmp3326 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3325 ]
  mov [ tmp3326 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3326 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3326 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3325
  restore tmp3326

; -----------------------------------------------
; function __X64Encoder_fcmovb_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmovb_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3328 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3327 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3328 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3327 ], 49370

  mov [ tmp3328 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3327 ]
  mov [ tmp3328 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3328 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3328 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3327
  restore tmp3328

; -----------------------------------------------
; function __X64Encoder_fcmovbe_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmovbe_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3330 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3329 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3330 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3329 ], 53466

  mov [ tmp3330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3329 ]
  mov [ tmp3330 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3330 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3330 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3329
  restore tmp3330

; -----------------------------------------------
; function __X64Encoder_fcmove_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmove_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3332 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3331 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3332 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3331 ], 51418

  mov [ tmp3332 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3331 ]
  mov [ tmp3332 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3332 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3332 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3331
  restore tmp3332

; -----------------------------------------------
; function __X64Encoder_fcmovnb_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmovnb_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3334 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3333 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3334 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3333 ], 49371

  mov [ tmp3334 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3333 ]
  mov [ tmp3334 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3334 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3334 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3333
  restore tmp3334

; -----------------------------------------------
; function __X64Encoder_fcmovnbe_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmovnbe_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3336 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3335 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3336 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3335 ], 53467

  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3335 ]
  mov [ tmp3336 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3336 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3335
  restore tmp3336

; -----------------------------------------------
; function __X64Encoder_fcmovne_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmovne_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3338 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3337 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3338 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3337 ], 51419

  mov [ tmp3338 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3338 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3338 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3338 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3337
  restore tmp3338

; -----------------------------------------------
; function __X64Encoder_fcmovnu_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmovnu_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3340 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3339 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3340 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3339 ], 55515

  mov [ tmp3340 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3339 ]
  mov [ tmp3340 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3340 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3340 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3339
  restore tmp3340

; -----------------------------------------------
; function __X64Encoder_fcmovu_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcmovu_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  sti EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3342 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3341 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ sti ], xmm0
  xor eax, eax
  mov [tmp3342 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3341 ], 55514

  mov [ tmp3342 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3341 ]
  mov [ tmp3342 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3342 ]
  lea r8 , [ sti ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3342 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore sti
  restore tmp3341
  restore tmp3342

; -----------------------------------------------
; function __X64Encoder_fcomi_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcomi_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3344 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3343 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3344 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3343 ], 61659

  mov [ tmp3344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3343 ]
  mov [ tmp3344 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3344 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3344 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3343
  restore tmp3344

; -----------------------------------------------
; function __X64Encoder_fcomip_st0_sti$1
; -----------------------------------------------
__X64Encoder_fcomip_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3346 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3345 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3346 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3345 ], 59615

  mov [ tmp3346 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3345 ]
  mov [ tmp3346 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3346 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3346 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3345
  restore tmp3346

; -----------------------------------------------
; function __X64Encoder_fucomi_st0_sti$1
; -----------------------------------------------
__X64Encoder_fucomi_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3348 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3347 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3348 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3347 ], 59611

  mov [ tmp3348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3347 ]
  mov [ tmp3348 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3348 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3348 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3347
  restore tmp3348

; -----------------------------------------------
; function __X64Encoder_fucomip_st0_sti$1
; -----------------------------------------------
__X64Encoder_fucomip_st0_sti$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  stSrc EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3350 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3349 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ stSrc ], xmm0
  xor eax, eax
  mov [tmp3350 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3349 ], 59615

  mov [ tmp3350 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3349 ]
  mov [ tmp3350 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3350 ]
  lea r8 , [ stSrc ]
  call  __X64Encoder_emitFPU_sti$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3350 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore stSrc
  restore tmp3349
  restore tmp3350

; -----------------------------------------------
; function __X64Encoder_fxsave_m$4
; -----------------------------------------------
__X64Encoder_fxsave_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3352 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3353 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3351 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3352 + Variant_t.type], eax
  mov [tmp3353 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3351 ], 44559

  mov [ tmp3352 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3351 ]
  mov [ tmp3352 + Variant_t.value], rax

  mov dword [ tmp3351 ], 0

  mov [ tmp3353 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3351 ]
  mov [ tmp3353 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3352 ]
  lea r8 , [ tmp3353 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3352 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3353 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3351
  restore tmp3352
  restore tmp3353

; -----------------------------------------------
; function __X64Encoder_fxrstor_m$4
; -----------------------------------------------
__X64Encoder_fxrstor_m$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3355 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3356 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3354 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3355 + Variant_t.type], eax
  mov [tmp3356 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3354 ], 44559

  mov [ tmp3355 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3354 ]
  mov [ tmp3355 + Variant_t.value], rax

  mov dword [ tmp3354 ], 1

  mov [ tmp3356 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3354 ]
  mov [ tmp3356 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3355 ]
  lea r8 , [ tmp3356 ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_group_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3355 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3356 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3354
  restore tmp3355
  restore tmp3356

; -----------------------------------------------
; function __X64Encoder_fisttp_m16$4
; -----------------------------------------------
__X64Encoder_fisttp_m16$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3357 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3357 ], 479

  lea rcx , [ this ]
  mov edx , dword [ tmp3357 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3357

; -----------------------------------------------
; function __X64Encoder_fisttp_m32$4
; -----------------------------------------------
__X64Encoder_fisttp_m32$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3358 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3358 ], 475

  lea rcx , [ this ]
  mov edx , dword [ tmp3358 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3358

; -----------------------------------------------
; function __X64Encoder_fisttp_m64$4
; -----------------------------------------------
__X64Encoder_fisttp_m64$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3359 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0

  ; code
  ; ----

  mov dword [ tmp3359 ], 477

  lea rcx , [ this ]
  mov edx , dword [ tmp3359 ]
  lea r8 , [ regBase ]
  lea r9 , [ scale ]
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitFPU_m$5
  add rsp, 16


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3359

; -----------------------------------------------
; function __X64Encoder_movd_mm_r32$2
; -----------------------------------------------
__X64Encoder_movd_mm_r32$2_vcall:
__X64Encoder_movd_mm_r32$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3361 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3360 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  xor eax, eax
  mov [tmp3361 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3360 ], 28175

  mov [ tmp3361 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3360 ]
  mov [ tmp3361 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3361 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3361 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regSrc
  restore tmp3360
  restore tmp3361

; -----------------------------------------------
; function __X64Encoder_movd_mm_m32$5
; -----------------------------------------------
__X64Encoder_movd_mm_m32$5_vcall:
__X64Encoder_movd_mm_m32$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3363 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3362 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3363 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3362 ], 28175

  mov [ tmp3363 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3362 ]
  mov [ tmp3363 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3363 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3363 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3362
  restore tmp3363

; -----------------------------------------------
; function __X64Encoder_movd_r32_mm$2
; -----------------------------------------------
__X64Encoder_movd_r32_mm$2_vcall:
__X64Encoder_movd_r32_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3365 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3364 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3365 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3364 ], 32271

  mov [ tmp3365 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3364 ]
  mov [ tmp3365 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3365 ]
  lea r8 , [ mmSrc ]
  lea r9 , [ regDst ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3365 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore regDst
  restore mmSrc
  restore tmp3364
  restore tmp3365

; -----------------------------------------------
; function __X64Encoder_movd_m32_mm$5
; -----------------------------------------------
__X64Encoder_movd_m32_mm$5_vcall:
__X64Encoder_movd_m32_mm$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3367 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3366 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3368 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3369 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3370 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3367 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3366 ], 32271

  mov [ tmp3367 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3366 ]
  mov [ tmp3367 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp3366 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp3368 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp3369 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp3370 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp3367 ]
  mov r8d , dword [ tmp3366 ]
  mov r9d , dword [ tmp3368 ]
  mov  eax, dword [ tmp3369 ]
  push rax
  mov  eax, dword [ tmp3370 ]
  push rax
  lea rax, [ mmSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3367 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore mmSrc
  restore tmp3366
  restore tmp3367
  restore tmp3368
  restore tmp3369
  restore tmp3370

; -----------------------------------------------
; function __X64Encoder_movq_mm_mm$2
; -----------------------------------------------
__X64Encoder_movq_mm_mm$2_vcall:
__X64Encoder_movq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3372 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3371 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3372 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3371 ], 28431

  mov [ tmp3372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3371 ]
  mov [ tmp3372 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3372 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3372 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3371
  restore tmp3372

; -----------------------------------------------
; function __X64Encoder_movq_mm_r64$2
; -----------------------------------------------
__X64Encoder_movq_mm_r64$2_vcall:
__X64Encoder_movq_mm_r64$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

  lea rcx , [ this ]
  lea rdx , [ mmDst ]
  lea r8 , [ regSrc ]
  call  __X64Encoder_movd_mm_r32$2


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regSrc

; -----------------------------------------------
; function __X64Encoder_movq_mm_m64$5
; -----------------------------------------------
__X64Encoder_movq_mm_m64$5_vcall:
__X64Encoder_movq_mm_m64$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3374 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3373 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3374 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3373 ], 28431

  mov [ tmp3374 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3373 ]
  mov [ tmp3374 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3374 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3374 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3373
  restore tmp3374

; -----------------------------------------------
; function __X64Encoder_movq_r64_mm$2
; -----------------------------------------------
__X64Encoder_movq_r64_mm$2_vcall:
__X64Encoder_movq_r64_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  call  __X64Encoder_emitPrefix64$0

  lea rcx , [ this ]
  lea rdx , [ regDst ]
  lea r8 , [ mmSrc ]
  call  __X64Encoder_movd_r32_mm$2


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore regDst
  restore mmSrc

; -----------------------------------------------
; function __X64Encoder_movq_m64_mm$5
; -----------------------------------------------
__X64Encoder_movq_m64_mm$5_vcall:
__X64Encoder_movq_m64_mm$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3376 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3375 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3377 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3378 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3379 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ scale ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3376 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3375 ], 32527

  mov [ tmp3376 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3375 ]
  mov [ tmp3376 + Variant_t.value], rax

  cmp [ regBase + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regBase + Variant_t.value]
  mov dword [ tmp3375 ], eax

  cmp [ scale + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ scale + Variant_t.value]
  mov dword [ tmp3377 ], eax

  cmp [ regIndex + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ regIndex + Variant_t.value]
  mov dword [ tmp3378 ], eax

  cmp [ disp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ disp + Variant_t.value]
  mov dword [ tmp3379 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp3376 ]
  mov r8d , dword [ tmp3375 ]
  mov r9d , dword [ tmp3377 ]
  mov  eax, dword [ tmp3378 ]
  push rax
  mov  eax, dword [ tmp3379 ]
  push rax
  lea rax, [ mmSrc ]
  push rax
  call  __X64Encoder_emitCore_m_r$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3376 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore mmSrc
  restore tmp3375
  restore tmp3376
  restore tmp3377
  restore tmp3378
  restore tmp3379

; -----------------------------------------------
; function __X64Encoder_packssdw_mm_mm$2
; -----------------------------------------------
__X64Encoder_packssdw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3381 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3380 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3381 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3380 ], 27407

  mov [ tmp3381 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3380 ]
  mov [ tmp3381 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3381 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3381 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3380
  restore tmp3381

; -----------------------------------------------
; function __X64Encoder_packssdw_mm_m$5
; -----------------------------------------------
__X64Encoder_packssdw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3383 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3382 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3383 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3382 ], 27407

  mov [ tmp3383 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3382 ]
  mov [ tmp3383 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3383 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3383 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3382
  restore tmp3383

; -----------------------------------------------
; function __X64Encoder_packsswb_mm_mm$2
; -----------------------------------------------
__X64Encoder_packsswb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3385 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3384 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3385 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3384 ], 25359

  mov [ tmp3385 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3384 ]
  mov [ tmp3385 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3385 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3385 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3384
  restore tmp3385

; -----------------------------------------------
; function __X64Encoder_packsswb_mm_m$5
; -----------------------------------------------
__X64Encoder_packsswb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3387 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3386 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3387 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3386 ], 25359

  mov [ tmp3387 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3386 ]
  mov [ tmp3387 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3387 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3387 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3386
  restore tmp3387

; -----------------------------------------------
; function __X64Encoder_packuswb_mm_mm$2
; -----------------------------------------------
__X64Encoder_packuswb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3389 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3388 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3389 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3388 ], 26383

  mov [ tmp3389 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3388 ]
  mov [ tmp3389 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3389 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3389 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3388
  restore tmp3389

; -----------------------------------------------
; function __X64Encoder_packuswb_mm_m$5
; -----------------------------------------------
__X64Encoder_packuswb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3391 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3390 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3391 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3390 ], 26383

  mov [ tmp3391 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3390 ]
  mov [ tmp3391 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3391 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3391 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3390
  restore tmp3391

; -----------------------------------------------
; function __X64Encoder_paddb_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3393 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3392 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3393 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3392 ], 64527

  mov [ tmp3393 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3392 ]
  mov [ tmp3393 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3393 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3393 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3392
  restore tmp3393

; -----------------------------------------------
; function __X64Encoder_paddb_mm_m$5
; -----------------------------------------------
__X64Encoder_paddb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3395 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3394 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3395 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3394 ], 64527

  mov [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3394 ]
  mov [ tmp3395 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3395 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3395 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3394
  restore tmp3395

; -----------------------------------------------
; function __X64Encoder_paddw_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3397 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3396 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3397 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3396 ], 64783

  mov [ tmp3397 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3396 ]
  mov [ tmp3397 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3397 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3397 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3396
  restore tmp3397

; -----------------------------------------------
; function __X64Encoder_paddw_mm_m$5
; -----------------------------------------------
__X64Encoder_paddw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3399 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3398 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3399 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3398 ], 64783

  mov [ tmp3399 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3398 ]
  mov [ tmp3399 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3399 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3399 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3398
  restore tmp3399

; -----------------------------------------------
; function __X64Encoder_paddd_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3401 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3400 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3401 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3400 ], 65039

  mov [ tmp3401 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3400 ]
  mov [ tmp3401 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3401 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3401 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3400
  restore tmp3401

; -----------------------------------------------
; function __X64Encoder_paddd_mm_m$5
; -----------------------------------------------
__X64Encoder_paddd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3403 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3402 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3403 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3402 ], 65039

  mov [ tmp3403 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3402 ]
  mov [ tmp3403 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3403 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3403 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3402
  restore tmp3403

; -----------------------------------------------
; function __X64Encoder_paddq_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3405 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3404 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3405 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3404 ], 54287

  mov [ tmp3405 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3404 ]
  mov [ tmp3405 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3405 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3405 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3404
  restore tmp3405

; -----------------------------------------------
; function __X64Encoder_paddq_mm_m$5
; -----------------------------------------------
__X64Encoder_paddq_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3407 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3406 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3407 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3406 ], 54287

  mov [ tmp3407 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3406 ]
  mov [ tmp3407 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3407 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3407 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3406
  restore tmp3407

; -----------------------------------------------
; function __X64Encoder_paddsb_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddsb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3409 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3408 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3409 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3408 ], 60431

  mov [ tmp3409 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3408 ]
  mov [ tmp3409 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3409 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3409 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3408
  restore tmp3409

; -----------------------------------------------
; function __X64Encoder_paddsb_mm_m$5
; -----------------------------------------------
__X64Encoder_paddsb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3411 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3410 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3411 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3410 ], 60431

  mov [ tmp3411 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3410 ]
  mov [ tmp3411 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3411 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3411 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3410
  restore tmp3411

; -----------------------------------------------
; function __X64Encoder_paddsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3413 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3412 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3413 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3412 ], 60687

  mov [ tmp3413 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3412 ]
  mov [ tmp3413 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3413 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3413 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3412
  restore tmp3413

; -----------------------------------------------
; function __X64Encoder_paddsw_mm_m$5
; -----------------------------------------------
__X64Encoder_paddsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3415 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3414 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3415 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3414 ], 60687

  mov [ tmp3415 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3414 ]
  mov [ tmp3415 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3415 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3415 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3414
  restore tmp3415

; -----------------------------------------------
; function __X64Encoder_paddusb_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddusb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3417 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3416 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3417 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3416 ], 56335

  mov [ tmp3417 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3416 ]
  mov [ tmp3417 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3417 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3417 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3416
  restore tmp3417

; -----------------------------------------------
; function __X64Encoder_paddusb_mm_m$5
; -----------------------------------------------
__X64Encoder_paddusb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3419 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3418 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3419 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3418 ], 56335

  mov [ tmp3419 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3418 ]
  mov [ tmp3419 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3419 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3419 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3418
  restore tmp3419

; -----------------------------------------------
; function __X64Encoder_paddusw_mm_mm$2
; -----------------------------------------------
__X64Encoder_paddusw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3421 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3420 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3421 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3420 ], 56591

  mov [ tmp3421 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3420 ]
  mov [ tmp3421 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3421 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3421 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3420
  restore tmp3421

; -----------------------------------------------
; function __X64Encoder_paddusw_mm_m$5
; -----------------------------------------------
__X64Encoder_paddusw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3423 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3422 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3423 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3422 ], 56591

  mov [ tmp3423 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3422 ]
  mov [ tmp3423 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3423 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3423 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3422
  restore tmp3423

; -----------------------------------------------
; function __X64Encoder_pmaddwd_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmaddwd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3425 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3424 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3425 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3424 ], 62735

  mov [ tmp3425 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3424 ]
  mov [ tmp3425 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3425 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3425 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3424
  restore tmp3425

; -----------------------------------------------
; function __X64Encoder_pmaddwd_mm_m$5
; -----------------------------------------------
__X64Encoder_pmaddwd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3427 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3426 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3427 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3426 ], 62735

  mov [ tmp3427 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3426 ]
  mov [ tmp3427 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3427 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3427 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3426
  restore tmp3427

; -----------------------------------------------
; function __X64Encoder_pand_mm_mm$2
; -----------------------------------------------
__X64Encoder_pand_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3429 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3428 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3429 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3428 ], 56079

  mov [ tmp3429 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3428 ]
  mov [ tmp3429 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3429 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3429 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3428
  restore tmp3429

; -----------------------------------------------
; function __X64Encoder_pand_mm_m$5
; -----------------------------------------------
__X64Encoder_pand_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3431 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3430 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3431 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3430 ], 56079

  mov [ tmp3431 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3430 ]
  mov [ tmp3431 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3431 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3431 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3430
  restore tmp3431

; -----------------------------------------------
; function __X64Encoder_pandn_mm_mm$2
; -----------------------------------------------
__X64Encoder_pandn_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3433 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3432 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3433 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3432 ], 57103

  mov [ tmp3433 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3432 ]
  mov [ tmp3433 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3433 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3433 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3432
  restore tmp3433

; -----------------------------------------------
; function __X64Encoder_pandn_mm_m$5
; -----------------------------------------------
__X64Encoder_pandn_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3435 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3434 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3435 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3434 ], 57103

  mov [ tmp3435 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3434 ]
  mov [ tmp3435 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3435 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3434
  restore tmp3435

; -----------------------------------------------
; function __X64Encoder_por_mm_mm$2
; -----------------------------------------------
__X64Encoder_por_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3437 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3436 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3437 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3436 ], 60175

  mov [ tmp3437 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3436 ]
  mov [ tmp3437 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3437 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3437 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3436
  restore tmp3437

; -----------------------------------------------
; function __X64Encoder_por_mm_m$5
; -----------------------------------------------
__X64Encoder_por_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3439 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3438 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3439 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3438 ], 60175

  mov [ tmp3439 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3438 ]
  mov [ tmp3439 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3439 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3439 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3438
  restore tmp3439

; -----------------------------------------------
; function __X64Encoder_pxor_mm_mm$2
; -----------------------------------------------
__X64Encoder_pxor_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3441 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3440 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3441 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3440 ], 61199

  mov [ tmp3441 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3440 ]
  mov [ tmp3441 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3441 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3441 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3440
  restore tmp3441

; -----------------------------------------------
; function __X64Encoder_pxor_mm_m$5
; -----------------------------------------------
__X64Encoder_pxor_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3443 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3442 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3443 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3442 ], 61199

  mov [ tmp3443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3442 ]
  mov [ tmp3443 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3443 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3443 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3442
  restore tmp3443

; -----------------------------------------------
; function __X64Encoder_pcmpeqb_mm_mm$2
; -----------------------------------------------
__X64Encoder_pcmpeqb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3445 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3444 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3445 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3444 ], 29711

  mov [ tmp3445 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3444 ]
  mov [ tmp3445 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3445 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3445 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3444
  restore tmp3445

; -----------------------------------------------
; function __X64Encoder_pcmpeqb_mm_m$5
; -----------------------------------------------
__X64Encoder_pcmpeqb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3447 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3446 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3447 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3446 ], 29711

  mov [ tmp3447 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3446 ]
  mov [ tmp3447 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3447 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3447 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3446
  restore tmp3447

; -----------------------------------------------
; function __X64Encoder_pcmpeqw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pcmpeqw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3449 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3448 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3449 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3448 ], 29967

  mov [ tmp3449 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3448 ]
  mov [ tmp3449 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3449 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3449 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3448
  restore tmp3449

; -----------------------------------------------
; function __X64Encoder_pcmpeqw_mm_m$5
; -----------------------------------------------
__X64Encoder_pcmpeqw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3451 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3450 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3451 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3450 ], 29967

  mov [ tmp3451 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3450 ]
  mov [ tmp3451 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3451 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3451 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3450
  restore tmp3451

; -----------------------------------------------
; function __X64Encoder_pcmpeqd_mm_mm$2
; -----------------------------------------------
__X64Encoder_pcmpeqd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3453 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3452 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3453 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3452 ], 30223

  mov [ tmp3453 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3452 ]
  mov [ tmp3453 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3453 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3453 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3452
  restore tmp3453

; -----------------------------------------------
; function __X64Encoder_pcmpeqd_mm_m$5
; -----------------------------------------------
__X64Encoder_pcmpeqd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3455 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3454 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3455 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3454 ], 30223

  mov [ tmp3455 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3454 ]
  mov [ tmp3455 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3455 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3455 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3454
  restore tmp3455

; -----------------------------------------------
; function __X64Encoder_pcmpgtb_mm_mm$2
; -----------------------------------------------
__X64Encoder_pcmpgtb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3457 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3456 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3457 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3456 ], 25615

  mov [ tmp3457 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3456 ]
  mov [ tmp3457 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3457 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3457 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3456
  restore tmp3457

; -----------------------------------------------
; function __X64Encoder_pcmpgtb_mm_m$5
; -----------------------------------------------
__X64Encoder_pcmpgtb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3459 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3458 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3459 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3458 ], 25615

  mov [ tmp3459 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3458 ]
  mov [ tmp3459 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3459 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3459 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3458
  restore tmp3459

; -----------------------------------------------
; function __X64Encoder_pcmpgtw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pcmpgtw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3461 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3460 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3461 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3460 ], 25871

  mov [ tmp3461 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3460 ]
  mov [ tmp3461 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3461 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3461 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3460
  restore tmp3461

; -----------------------------------------------
; function __X64Encoder_pcmpgtw_mm_m$5
; -----------------------------------------------
__X64Encoder_pcmpgtw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3463 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3462 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3463 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3462 ], 25871

  mov [ tmp3463 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3462 ]
  mov [ tmp3463 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3463 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3463 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3462
  restore tmp3463

; -----------------------------------------------
; function __X64Encoder_pcmpgtd_mm_mm$2
; -----------------------------------------------
__X64Encoder_pcmpgtd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3465 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3464 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3465 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3464 ], 26127

  mov [ tmp3465 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3464 ]
  mov [ tmp3465 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3465 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3465 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3464
  restore tmp3465

; -----------------------------------------------
; function __X64Encoder_pcmpgtd_mm_m$5
; -----------------------------------------------
__X64Encoder_pcmpgtd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3467 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3466 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3467 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3466 ], 26127

  mov [ tmp3467 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3466 ]
  mov [ tmp3467 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3467 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3467 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3466
  restore tmp3467

; -----------------------------------------------
; function __X64Encoder_pmulhw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmulhw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3469 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3468 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3469 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3468 ], 58639

  mov [ tmp3469 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3468 ]
  mov [ tmp3469 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3469 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3469 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3468
  restore tmp3469

; -----------------------------------------------
; function __X64Encoder_pmulhw_mm_m$5
; -----------------------------------------------
__X64Encoder_pmulhw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3471 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3470 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3471 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3470 ], 58639

  mov [ tmp3471 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3470 ]
  mov [ tmp3471 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3471 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3471 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3470
  restore tmp3471

; -----------------------------------------------
; function __X64Encoder_pmullw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmullw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3473 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3472 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3473 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3472 ], 54543

  mov [ tmp3473 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3472 ]
  mov [ tmp3473 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3473 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3473 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3472
  restore tmp3473

; -----------------------------------------------
; function __X64Encoder_pmullw_mm_m$5
; -----------------------------------------------
__X64Encoder_pmullw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3475 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3474 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3475 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3474 ], 54543

  mov [ tmp3475 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3474 ]
  mov [ tmp3475 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3475 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3475 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3474
  restore tmp3475

; -----------------------------------------------
; function __X64Encoder_psubb_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3477 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3476 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3477 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3476 ], 63503

  mov [ tmp3477 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3476 ]
  mov [ tmp3477 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3477 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3477 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3476
  restore tmp3477

; -----------------------------------------------
; function __X64Encoder_psubb_mm_m$5
; -----------------------------------------------
__X64Encoder_psubb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3479 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3478 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3479 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3478 ], 63503

  mov [ tmp3479 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3478 ]
  mov [ tmp3479 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3479 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3479 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3478
  restore tmp3479

; -----------------------------------------------
; function __X64Encoder_psubw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3481 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3480 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3481 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3480 ], 63759

  mov [ tmp3481 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3480 ]
  mov [ tmp3481 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3481 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3481 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3480
  restore tmp3481

; -----------------------------------------------
; function __X64Encoder_psubw_mm_m$5
; -----------------------------------------------
__X64Encoder_psubw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3483 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3482 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3483 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3482 ], 63759

  mov [ tmp3483 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3482 ]
  mov [ tmp3483 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3483 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3483 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3482
  restore tmp3483

; -----------------------------------------------
; function __X64Encoder_psubd_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3485 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3484 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3485 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3484 ], 64015

  mov [ tmp3485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3484 ]
  mov [ tmp3485 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3485 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3485 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3484
  restore tmp3485

; -----------------------------------------------
; function __X64Encoder_psubd_mm_m$5
; -----------------------------------------------
__X64Encoder_psubd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3487 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3486 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3487 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3486 ], 64015

  mov [ tmp3487 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3486 ]
  mov [ tmp3487 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3487 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3487 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3486
  restore tmp3487

; -----------------------------------------------
; function __X64Encoder_psubsb_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubsb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3489 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3488 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3489 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3488 ], 59407

  mov [ tmp3489 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3488 ]
  mov [ tmp3489 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3489 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3489 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3488
  restore tmp3489

; -----------------------------------------------
; function __X64Encoder_psubsb_mm_m$5
; -----------------------------------------------
__X64Encoder_psubsb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3491 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3490 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3491 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3490 ], 59407

  mov [ tmp3491 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3490 ]
  mov [ tmp3491 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3491 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3491 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3490
  restore tmp3491

; -----------------------------------------------
; function __X64Encoder_psubsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3493 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3492 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3493 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3492 ], 59663

  mov [ tmp3493 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3492 ]
  mov [ tmp3493 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3493 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3493 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3492
  restore tmp3493

; -----------------------------------------------
; function __X64Encoder_psubsw_mm_m$5
; -----------------------------------------------
__X64Encoder_psubsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3495 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3494 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3495 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3494 ], 59663

  mov [ tmp3495 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3494 ]
  mov [ tmp3495 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3495 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3495 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3494
  restore tmp3495

; -----------------------------------------------
; function __X64Encoder_psubusb_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubusb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3497 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3496 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3497 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3496 ], 55311

  mov [ tmp3497 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3496 ]
  mov [ tmp3497 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3497 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3497 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3496
  restore tmp3497

; -----------------------------------------------
; function __X64Encoder_psubusb_mm_m$5
; -----------------------------------------------
__X64Encoder_psubusb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3499 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3498 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3499 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3498 ], 55311

  mov [ tmp3499 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3498 ]
  mov [ tmp3499 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3499 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3499 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3498
  restore tmp3499

; -----------------------------------------------
; function __X64Encoder_psubusw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubusw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3501 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3500 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3501 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3500 ], 55567

  mov [ tmp3501 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3500 ]
  mov [ tmp3501 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3501 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3501 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3500
  restore tmp3501

; -----------------------------------------------
; function __X64Encoder_psubusw_mm_m$5
; -----------------------------------------------
__X64Encoder_psubusw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3503 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3502 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3503 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3502 ], 55567

  mov [ tmp3503 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3502 ]
  mov [ tmp3503 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3503 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3503 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3502
  restore tmp3503

; -----------------------------------------------
; function __X64Encoder_punpckhbw_mm_mm$2
; -----------------------------------------------
__X64Encoder_punpckhbw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3505 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3504 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3505 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3504 ], 26639

  mov [ tmp3505 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3504 ]
  mov [ tmp3505 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3505 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3505 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3504
  restore tmp3505

; -----------------------------------------------
; function __X64Encoder_punpckhbw_mm_m$5
; -----------------------------------------------
__X64Encoder_punpckhbw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3507 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3506 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3507 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3506 ], 26639

  mov [ tmp3507 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3506 ]
  mov [ tmp3507 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3507 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3507 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3506
  restore tmp3507

; -----------------------------------------------
; function __X64Encoder_punpckhwd_mm_mm$2
; -----------------------------------------------
__X64Encoder_punpckhwd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3509 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3508 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3509 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3508 ], 26895

  mov [ tmp3509 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3508 ]
  mov [ tmp3509 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3509 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3509 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3508
  restore tmp3509

; -----------------------------------------------
; function __X64Encoder_punpckhwd_mm_m$5
; -----------------------------------------------
__X64Encoder_punpckhwd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3511 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3510 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3511 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3510 ], 26895

  mov [ tmp3511 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3510 ]
  mov [ tmp3511 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3511 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3511 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3510
  restore tmp3511

; -----------------------------------------------
; function __X64Encoder_punpckhdq_mm_mm$2
; -----------------------------------------------
__X64Encoder_punpckhdq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3513 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3512 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3513 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3512 ], 27151

  mov [ tmp3513 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3512 ]
  mov [ tmp3513 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3513 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3513 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3512
  restore tmp3513

; -----------------------------------------------
; function __X64Encoder_punpckhdq_mm_m$5
; -----------------------------------------------
__X64Encoder_punpckhdq_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3515 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3514 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3515 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3514 ], 27151

  mov [ tmp3515 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3514 ]
  mov [ tmp3515 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3515 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3514
  restore tmp3515

; -----------------------------------------------
; function __X64Encoder_punpcklbw_mm_mm$2
; -----------------------------------------------
__X64Encoder_punpcklbw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3517 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3516 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3517 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3516 ], 24591

  mov [ tmp3517 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3516 ]
  mov [ tmp3517 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3517 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3517 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3516
  restore tmp3517

; -----------------------------------------------
; function __X64Encoder_punpcklwd_mm_mm$2
; -----------------------------------------------
__X64Encoder_punpcklwd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3519 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3518 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3519 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3518 ], 24847

  mov [ tmp3519 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3518 ]
  mov [ tmp3519 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3519 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3519 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3518
  restore tmp3519

; -----------------------------------------------
; function __X64Encoder_punpckldq_mm_mm$2
; -----------------------------------------------
__X64Encoder_punpckldq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3521 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3520 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3521 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3520 ], 25103

  mov [ tmp3521 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3520 ]
  mov [ tmp3521 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3521 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3521 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3520
  restore tmp3521

; -----------------------------------------------
; function __X64Encoder_psllw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psllw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3523 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3522 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3523 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3522 ], 61711

  mov [ tmp3523 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3522 ]
  mov [ tmp3523 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3523 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3523 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3522
  restore tmp3523

; -----------------------------------------------
; function __X64Encoder_psllw_mm_m$5
; -----------------------------------------------
__X64Encoder_psllw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3525 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3524 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3525 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3524 ], 61711

  mov [ tmp3525 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3524 ]
  mov [ tmp3525 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3525 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3525 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3524
  restore tmp3525

; -----------------------------------------------
; function __X64Encoder_psllw_mm_imm$2
; -----------------------------------------------
__X64Encoder_psllw_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3527 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3528 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3526 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3527 + Variant_t.type], eax
  mov [tmp3528 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3526 ], 28943

  mov [ tmp3527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3526 ]
  mov [ tmp3527 + Variant_t.value], rax

  mov dword [ tmp3526 ], 6

  mov [ tmp3528 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3526 ]
  mov [ tmp3528 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3527 ]
  lea r8 , [ tmp3528 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3527 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3528 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3526
  restore tmp3527
  restore tmp3528

; -----------------------------------------------
; function __X64Encoder_pslld_mm_mm$2
; -----------------------------------------------
__X64Encoder_pslld_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3530 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3529 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3530 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3529 ], 61967

  mov [ tmp3530 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3529 ]
  mov [ tmp3530 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3530 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3530 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3529
  restore tmp3530

; -----------------------------------------------
; function __X64Encoder_pslld_mm_m$5
; -----------------------------------------------
__X64Encoder_pslld_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3532 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3531 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3532 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3531 ], 61967

  mov [ tmp3532 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3531 ]
  mov [ tmp3532 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3532 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3532 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3531
  restore tmp3532

; -----------------------------------------------
; function __X64Encoder_pslld_mm_imm$2
; -----------------------------------------------
__X64Encoder_pslld_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3534 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3535 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3533 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3534 + Variant_t.type], eax
  mov [tmp3535 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3533 ], 29199

  mov [ tmp3534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3533 ]
  mov [ tmp3534 + Variant_t.value], rax

  mov dword [ tmp3533 ], 6

  mov [ tmp3535 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3533 ]
  mov [ tmp3535 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3534 ]
  lea r8 , [ tmp3535 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3534 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3535 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3533
  restore tmp3534
  restore tmp3535

; -----------------------------------------------
; function __X64Encoder_psllq_mm_mm$2
; -----------------------------------------------
__X64Encoder_psllq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3537 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3536 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3537 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3536 ], 62223

  mov [ tmp3537 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3536 ]
  mov [ tmp3537 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3537 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3537 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3536
  restore tmp3537

; -----------------------------------------------
; function __X64Encoder_psllq_mm_m$5
; -----------------------------------------------
__X64Encoder_psllq_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3539 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3538 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3539 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3538 ], 62223

  mov [ tmp3539 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3538 ]
  mov [ tmp3539 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3539 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3539 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3538
  restore tmp3539

; -----------------------------------------------
; function __X64Encoder_psllq_mm_imm$2
; -----------------------------------------------
__X64Encoder_psllq_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3541 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3542 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3540 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3541 + Variant_t.type], eax
  mov [tmp3542 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3540 ], 29455

  mov [ tmp3541 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3540 ]
  mov [ tmp3541 + Variant_t.value], rax

  mov dword [ tmp3540 ], 6

  mov [ tmp3542 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3540 ]
  mov [ tmp3542 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3541 ]
  lea r8 , [ tmp3542 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3541 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3542 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3540
  restore tmp3541
  restore tmp3542

; -----------------------------------------------
; function __X64Encoder_psrad_mm_mm$2
; -----------------------------------------------
__X64Encoder_psrad_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3544 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3543 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3544 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3543 ], 57871

  mov [ tmp3544 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3543 ]
  mov [ tmp3544 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3544 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3544 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3543
  restore tmp3544

; -----------------------------------------------
; function __X64Encoder_psrad_mm_m$5
; -----------------------------------------------
__X64Encoder_psrad_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3546 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3545 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3546 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3545 ], 57871

  mov [ tmp3546 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3545 ]
  mov [ tmp3546 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3546 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3546 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3545
  restore tmp3546

; -----------------------------------------------
; function __X64Encoder_psrad_mm_imm$2
; -----------------------------------------------
__X64Encoder_psrad_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3548 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3549 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3547 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3548 + Variant_t.type], eax
  mov [tmp3549 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3547 ], 29199

  mov [ tmp3548 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3547 ]
  mov [ tmp3548 + Variant_t.value], rax

  mov dword [ tmp3547 ], 4

  mov [ tmp3549 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3547 ]
  mov [ tmp3549 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3548 ]
  lea r8 , [ tmp3549 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3548 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3549 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3547
  restore tmp3548
  restore tmp3549

; -----------------------------------------------
; function __X64Encoder_psraw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psraw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3551 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3550 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3551 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3550 ], 57615

  mov [ tmp3551 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3550 ]
  mov [ tmp3551 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3551 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3551 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3550
  restore tmp3551

; -----------------------------------------------
; function __X64Encoder_psraw_mm_m$5
; -----------------------------------------------
__X64Encoder_psraw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3553 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3552 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3553 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3552 ], 57615

  mov [ tmp3553 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3552 ]
  mov [ tmp3553 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3553 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3553 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3552
  restore tmp3553

; -----------------------------------------------
; function __X64Encoder_psraw_mm_imm$2
; -----------------------------------------------
__X64Encoder_psraw_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3555 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3556 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3554 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3555 + Variant_t.type], eax
  mov [tmp3556 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3554 ], 28943

  mov [ tmp3555 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3554 ]
  mov [ tmp3555 + Variant_t.value], rax

  mov dword [ tmp3554 ], 4

  mov [ tmp3556 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3554 ]
  mov [ tmp3556 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3555 ]
  lea r8 , [ tmp3556 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3555 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3556 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3554
  restore tmp3555
  restore tmp3556

; -----------------------------------------------
; function __X64Encoder_psrlw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psrlw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3558 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3557 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3558 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3557 ], 53519

  mov [ tmp3558 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3557 ]
  mov [ tmp3558 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3558 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3558 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3557
  restore tmp3558

; -----------------------------------------------
; function __X64Encoder_psrlw_mm_m$5
; -----------------------------------------------
__X64Encoder_psrlw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3560 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3559 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3560 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3559 ], 53519

  mov [ tmp3560 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3559 ]
  mov [ tmp3560 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3560 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3559
  restore tmp3560

; -----------------------------------------------
; function __X64Encoder_psrlw_mm_imm$2
; -----------------------------------------------
__X64Encoder_psrlw_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3562 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3563 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3561 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3562 + Variant_t.type], eax
  mov [tmp3563 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3561 ], 28943

  mov [ tmp3562 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3561 ]
  mov [ tmp3562 + Variant_t.value], rax

  mov dword [ tmp3561 ], 2

  mov [ tmp3563 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3561 ]
  mov [ tmp3563 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3562 ]
  lea r8 , [ tmp3563 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3562 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3563 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3561
  restore tmp3562
  restore tmp3563

; -----------------------------------------------
; function __X64Encoder_psrld_mm_mm$2
; -----------------------------------------------
__X64Encoder_psrld_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3565 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3564 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3565 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3564 ], 53775

  mov [ tmp3565 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3564 ]
  mov [ tmp3565 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3565 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3565 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3564
  restore tmp3565

; -----------------------------------------------
; function __X64Encoder_psrld_mm_m$5
; -----------------------------------------------
__X64Encoder_psrld_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3567 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3566 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3567 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3566 ], 53775

  mov [ tmp3567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3566 ]
  mov [ tmp3567 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3567 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3567 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3566
  restore tmp3567

; -----------------------------------------------
; function __X64Encoder_psrld_mm_imm$2
; -----------------------------------------------
__X64Encoder_psrld_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3569 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3570 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3568 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3569 + Variant_t.type], eax
  mov [tmp3570 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3568 ], 29199

  mov [ tmp3569 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3568 ]
  mov [ tmp3569 + Variant_t.value], rax

  mov dword [ tmp3568 ], 2

  mov [ tmp3570 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3568 ]
  mov [ tmp3570 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3569 ]
  lea r8 , [ tmp3570 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3569 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3570 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3568
  restore tmp3569
  restore tmp3570

; -----------------------------------------------
; function __X64Encoder_psrlq_mm_mm$2
; -----------------------------------------------
__X64Encoder_psrlq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3572 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3571 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3572 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3571 ], 54031

  mov [ tmp3572 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3571 ]
  mov [ tmp3572 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3572 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3572 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3571
  restore tmp3572

; -----------------------------------------------
; function __X64Encoder_psrlq_mm_m$5
; -----------------------------------------------
__X64Encoder_psrlq_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3574 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3573 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3574 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3573 ], 54031

  mov [ tmp3574 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3573 ]
  mov [ tmp3574 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3574 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3574 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3573
  restore tmp3574

; -----------------------------------------------
; function __X64Encoder_psrlq_mm_imm$2
; -----------------------------------------------
__X64Encoder_psrlq_mm_imm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3576 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3577 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3575 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ imm ], xmm0
  xor eax, eax
  mov [tmp3576 + Variant_t.type], eax
  mov [tmp3577 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3575 ], 29455

  mov [ tmp3576 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3575 ]
  mov [ tmp3576 + Variant_t.value], rax

  mov dword [ tmp3575 ], 2

  mov [ tmp3577 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3575 ]
  mov [ tmp3577 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3576 ]
  lea r8 , [ tmp3577 ]
  lea r9 , [ mmDst ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3576 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3577 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore imm
  restore tmp3575
  restore tmp3576
  restore tmp3577

; -----------------------------------------------
; function __X64Encoder_emms$0
; -----------------------------------------------
__X64Encoder_emms$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3579 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3578 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3579 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3578 ], 30479

  mov [ tmp3579 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3578 ]
  mov [ tmp3579 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3579 ]
  call  __X64Encoder_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3579 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3578
  restore tmp3579

; -----------------------------------------------
; function __X64Encoder_pshufw_mm_mm_imm8$3
; -----------------------------------------------
__X64Encoder_pshufw_mm_mm_imm8$3_vcall:
__X64Encoder_pshufw_mm_mm_imm8$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm8 EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3580 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3582 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3581 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ imm8 ], xmm0
  xor eax, eax
  mov [tmp3580 + Variant_t.type], eax
  mov [tmp3582 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3581 ], 7

  mov [ tmp3582 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3581 ]
  mov [ tmp3582 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ mmDst ]
  lea rdx , [ tmp3582 ]
  lea r8 , [ mmDst ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp3581 ], 28687

  mov [ tmp3580 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3581 ]
  mov [ tmp3580 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3580 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm8 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3580 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3582 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore imm8
  restore tmp3580
  restore tmp3581
  restore tmp3582

; -----------------------------------------------
; function __X64Encoder_pshufw_mm_m64_imm8$6
; -----------------------------------------------
__X64Encoder_pshufw_mm_m64_imm8$6_vcall:
__X64Encoder_pshufw_mm_m64_imm8$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm8 EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3583 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3585 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3584 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm8 ], xmm0
  xor eax, eax
  mov [tmp3583 + Variant_t.type], eax
  mov [tmp3585 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3584 ], 7

  mov [ tmp3585 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3584 ]
  mov [ tmp3585 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ mmDst ]
  lea rdx , [ tmp3585 ]
  lea r8 , [ mmDst ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp3584 ], 28687

  mov [ tmp3583 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3584 ]
  mov [ tmp3583 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3583 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24

  lea rcx , [ this ]
  lea rdx , [ imm8 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3583 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm8
  restore tmp3583
  restore tmp3584
  restore tmp3585

; -----------------------------------------------
; function __X64Encoder_pinsrw_mm_r32_imm8$3
; -----------------------------------------------
__X64Encoder_pinsrw_mm_r32_imm8$3_vcall:
__X64Encoder_pinsrw_mm_r32_imm8$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  regSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm8 EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3586 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3588 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3587 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regSrc ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ imm8 ], xmm0
  xor eax, eax
  mov [tmp3586 + Variant_t.type], eax
  mov [tmp3588 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3587 ], 7

  mov [ tmp3588 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3587 ]
  mov [ tmp3588 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ mmDst ]
  lea rdx , [ tmp3588 ]
  lea r8 , [ mmDst ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp3587 ], 50191

  mov [ tmp3586 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3587 ]
  mov [ tmp3586 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3586 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regSrc ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm8 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3586 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3588 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regSrc
  restore imm8
  restore tmp3586
  restore tmp3587
  restore tmp3588

; -----------------------------------------------
; function __X64Encoder_pinsrw_mm_m16_imm8$6
; -----------------------------------------------
__X64Encoder_pinsrw_mm_m16_imm8$6_vcall:
__X64Encoder_pinsrw_mm_m16_imm8$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm8 EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3589 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3591 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3590 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm8 ], xmm0
  xor eax, eax
  mov [tmp3589 + Variant_t.type], eax
  mov [tmp3591 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3590 ], 7

  mov [ tmp3591 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3590 ]
  mov [ tmp3591 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ mmDst ]
  lea rdx , [ tmp3591 ]
  lea r8 , [ mmDst ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp3590 ], 50191

  mov [ tmp3589 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3590 ]
  mov [ tmp3589 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3589 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24

  lea rcx , [ this ]
  lea rdx , [ imm8 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3589 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3591 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm8
  restore tmp3589
  restore tmp3590
  restore tmp3591

; -----------------------------------------------
; function __X64Encoder_pextrw_r64_mm_imm8$3
; -----------------------------------------------
__X64Encoder_pextrw_r64_mm_imm8$3_vcall:
__X64Encoder_pextrw_r64_mm_imm8$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm8 EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3592 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3594 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3593 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ imm8 ], xmm0
  xor eax, eax
  mov [tmp3592 + Variant_t.type], eax
  mov [tmp3594 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3593 ], 7

  mov [ tmp3594 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3593 ]
  mov [ tmp3594 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ regDst ]
  lea rdx , [ tmp3594 ]
  lea r8 , [ regDst ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp3593 ], 50447

  mov [ tmp3592 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3593 ]
  mov [ tmp3592 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3592 ]
  lea r8 , [ regDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm8 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3592 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3594 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore regDst
  restore mmSrc
  restore imm8
  restore tmp3592
  restore tmp3593
  restore tmp3594

; -----------------------------------------------
; function __X64Encoder_pmovmskb_r_mm$2
; -----------------------------------------------
__X64Encoder_pmovmskb_r_mm$2_vcall:
__X64Encoder_pmovmskb_r_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  regDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3595 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3597 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3596 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ regDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3595 + Variant_t.type], eax
  mov [tmp3597 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3596 ], 7

  mov [ tmp3597 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3596 ]
  mov [ tmp3597 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ regDst ]
  lea rdx , [ tmp3597 ]
  lea r8 , [ regDst ]
  call qword [rbx + 8 * 35 ]

  mov dword [ tmp3596 ], 55055

  mov [ tmp3595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3596 ]
  mov [ tmp3595 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3595 ]
  lea r8 , [ regDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3595 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore regDst
  restore mmSrc
  restore tmp3595
  restore tmp3596
  restore tmp3597

; -----------------------------------------------
; function __X64Encoder_pminub_mm_mm$2
; -----------------------------------------------
__X64Encoder_pminub_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3599 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3598 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3599 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3598 ], 55823

  mov [ tmp3599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3598 ]
  mov [ tmp3599 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3599 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3599 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3598
  restore tmp3599

; -----------------------------------------------
; function __X64Encoder_pminub_mm_m$5
; -----------------------------------------------
__X64Encoder_pminub_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3601 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3600 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3601 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3600 ], 55823

  mov [ tmp3601 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3600 ]
  mov [ tmp3601 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3601 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3601 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3600
  restore tmp3601

; -----------------------------------------------
; function __X64Encoder_pmaxub_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmaxub_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3603 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3602 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3603 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3602 ], 56847

  mov [ tmp3603 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3602 ]
  mov [ tmp3603 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3603 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3603 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3602
  restore tmp3603

; -----------------------------------------------
; function __X64Encoder_pmaxub_mm_m$5
; -----------------------------------------------
__X64Encoder_pmaxub_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3605 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3604 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3605 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3604 ], 56847

  mov [ tmp3605 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3604 ]
  mov [ tmp3605 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3605 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3605 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3604
  restore tmp3605

; -----------------------------------------------
; function __X64Encoder_pavgb_mm_mm$2
; -----------------------------------------------
__X64Encoder_pavgb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3607 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3606 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3607 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3606 ], 57359

  mov [ tmp3607 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3606 ]
  mov [ tmp3607 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3607 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3607 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3606
  restore tmp3607

; -----------------------------------------------
; function __X64Encoder_pavgb_mm_m$5
; -----------------------------------------------
__X64Encoder_pavgb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3609 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3608 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3609 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3608 ], 57359

  mov [ tmp3609 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3608 ]
  mov [ tmp3609 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3609 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3609 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3608
  restore tmp3609

; -----------------------------------------------
; function __X64Encoder_pavgw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pavgw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3611 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3610 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3611 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3610 ], 58127

  mov [ tmp3611 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3610 ]
  mov [ tmp3611 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3611 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3611 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3610
  restore tmp3611

; -----------------------------------------------
; function __X64Encoder_pavgw_mm_m$5
; -----------------------------------------------
__X64Encoder_pavgw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3613 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3612 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3613 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3612 ], 58127

  mov [ tmp3613 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3612 ]
  mov [ tmp3613 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3613 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3613 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3612
  restore tmp3613

; -----------------------------------------------
; function __X64Encoder_pmulhuw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmulhuw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3615 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3614 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3615 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3614 ], 58383

  mov [ tmp3615 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3614 ]
  mov [ tmp3615 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3615 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3615 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3614
  restore tmp3615

; -----------------------------------------------
; function __X64Encoder_pmulhuw_mm_m$5
; -----------------------------------------------
__X64Encoder_pmulhuw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3617 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3616 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3617 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3616 ], 58383

  mov [ tmp3617 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3616 ]
  mov [ tmp3617 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3617 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3617 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3616
  restore tmp3617

; -----------------------------------------------
; function __X64Encoder_pminsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pminsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3619 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3618 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3619 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3618 ], 59919

  mov [ tmp3619 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3618 ]
  mov [ tmp3619 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3619 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3619 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3618
  restore tmp3619

; -----------------------------------------------
; function __X64Encoder_pminsw_mm_m$5
; -----------------------------------------------
__X64Encoder_pminsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3621 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3620 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3621 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3620 ], 59919

  mov [ tmp3621 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3620 ]
  mov [ tmp3621 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3621 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3621 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3620
  restore tmp3621

; -----------------------------------------------
; function __X64Encoder_pmaxsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmaxsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3623 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3622 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3623 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3622 ], 60943

  mov [ tmp3623 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3622 ]
  mov [ tmp3623 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3623 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3623 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3622
  restore tmp3623

; -----------------------------------------------
; function __X64Encoder_pmaxsw_mm_m$5
; -----------------------------------------------
__X64Encoder_pmaxsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3625 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3624 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3625 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3624 ], 60943

  mov [ tmp3625 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3624 ]
  mov [ tmp3625 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3625 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3625 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3624
  restore tmp3625

; -----------------------------------------------
; function __X64Encoder_psadbw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psadbw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3627 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3626 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3627 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3626 ], 62991

  mov [ tmp3627 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3626 ]
  mov [ tmp3627 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3627 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3627 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3626
  restore tmp3627

; -----------------------------------------------
; function __X64Encoder_psadbw_mm_m$5
; -----------------------------------------------
__X64Encoder_psadbw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3629 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3628 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3629 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3628 ], 62991

  mov [ tmp3629 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3628 ]
  mov [ tmp3629 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3629 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3628
  restore tmp3629

; -----------------------------------------------
; function __X64Encoder_psubq_mm_mm$2
; -----------------------------------------------
__X64Encoder_psubq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3631 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3630 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3631 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3630 ], 64271

  mov [ tmp3631 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3630 ]
  mov [ tmp3631 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3631 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3631 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3630
  restore tmp3631

; -----------------------------------------------
; function __X64Encoder_psubq_mm_m$5
; -----------------------------------------------
__X64Encoder_psubq_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3633 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3632 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3633 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3632 ], 64271

  mov [ tmp3633 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3632 ]
  mov [ tmp3633 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3633 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3633 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3632
  restore tmp3633

; -----------------------------------------------
; function __X64Encoder_pmuludq_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmuludq_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3635 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3634 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3635 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3634 ], 62479

  mov [ tmp3635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3634 ]
  mov [ tmp3635 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3635 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3635 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3634
  restore tmp3635

; -----------------------------------------------
; function __X64Encoder_pmuludq_mm_m$5
; -----------------------------------------------
__X64Encoder_pmuludq_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3637 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3636 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3637 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3636 ], 62479

  mov [ tmp3637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3636 ]
  mov [ tmp3637 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3637 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3637 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3636
  restore tmp3637

; -----------------------------------------------
; function __X64Encoder_psignb_mm_mm$2
; -----------------------------------------------
__X64Encoder_psignb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3639 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3638 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3639 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3638 ], 538639

  mov [ tmp3639 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3638 ]
  mov [ tmp3639 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3639 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3639 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3638
  restore tmp3639

; -----------------------------------------------
; function __X64Encoder_psignb_mm_m$5
; -----------------------------------------------
__X64Encoder_psignb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3641 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3640 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3641 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3640 ], 538639

  mov [ tmp3641 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3640 ]
  mov [ tmp3641 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3641 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3641 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3640
  restore tmp3641

; -----------------------------------------------
; function __X64Encoder_psignw_mm_mm$2
; -----------------------------------------------
__X64Encoder_psignw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3643 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3642 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3643 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3642 ], 604175

  mov [ tmp3643 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3642 ]
  mov [ tmp3643 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3643 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3643 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3642
  restore tmp3643

; -----------------------------------------------
; function __X64Encoder_psignw_mm_m$5
; -----------------------------------------------
__X64Encoder_psignw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3645 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3644 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3645 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3644 ], 604175

  mov [ tmp3645 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3644 ]
  mov [ tmp3645 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3645 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3645 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3644
  restore tmp3645

; -----------------------------------------------
; function __X64Encoder_psignd_mm_mm$2
; -----------------------------------------------
__X64Encoder_psignd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3647 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3646 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3647 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3646 ], 669711

  mov [ tmp3647 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3646 ]
  mov [ tmp3647 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3647 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3647 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3646
  restore tmp3647

; -----------------------------------------------
; function __X64Encoder_psignd_mm_m$5
; -----------------------------------------------
__X64Encoder_psignd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3649 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3648 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3649 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3648 ], 669711

  mov [ tmp3649 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3648 ]
  mov [ tmp3649 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3649 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3649 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3648
  restore tmp3649

; -----------------------------------------------
; function __X64Encoder_pshufb_mm_mm$2
; -----------------------------------------------
__X64Encoder_pshufb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3651 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3650 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3651 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3650 ], 14351

  mov [ tmp3651 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3650 ]
  mov [ tmp3651 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3651 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3651 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3650
  restore tmp3651

; -----------------------------------------------
; function __X64Encoder_pshufb_mm_m$5
; -----------------------------------------------
__X64Encoder_pshufb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3653 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3652 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3653 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3652 ], 14351

  mov [ tmp3653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3652 ]
  mov [ tmp3653 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3653 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3652
  restore tmp3653

; -----------------------------------------------
; function __X64Encoder_pmulhrsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmulhrsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3655 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3654 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3655 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3654 ], 735247

  mov [ tmp3655 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3655 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3655 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3655 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3654
  restore tmp3655

; -----------------------------------------------
; function __X64Encoder_pmulhrsw_mm_m$5
; -----------------------------------------------
__X64Encoder_pmulhrsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3657 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3656 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3657 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3656 ], 735247

  mov [ tmp3657 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3656 ]
  mov [ tmp3657 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3657 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3657 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3656
  restore tmp3657

; -----------------------------------------------
; function __X64Encoder_pmaddubsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pmaddubsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3659 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3658 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3659 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3658 ], 276495

  mov [ tmp3659 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3658 ]
  mov [ tmp3659 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3659 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3659 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3658
  restore tmp3659

; -----------------------------------------------
; function __X64Encoder_pmaddubsw_mm_m$5
; -----------------------------------------------
__X64Encoder_pmaddubsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3661 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3660 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3661 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3660 ], 276495

  mov [ tmp3661 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3660 ]
  mov [ tmp3661 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3661 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3661 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3660
  restore tmp3661

; -----------------------------------------------
; function __X64Encoder_phsubw_mm_mm$2
; -----------------------------------------------
__X64Encoder_phsubw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3663 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3662 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3663 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3662 ], 342031

  mov [ tmp3663 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3662 ]
  mov [ tmp3663 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3663 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3663 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3662
  restore tmp3663

; -----------------------------------------------
; function __X64Encoder_phsubw_mm_m$5
; -----------------------------------------------
__X64Encoder_phsubw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3665 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3664 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3665 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3664 ], 342031

  mov [ tmp3665 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3664 ]
  mov [ tmp3665 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3665 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3665 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3664
  restore tmp3665

; -----------------------------------------------
; function __X64Encoder_phsubsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_phsubsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3667 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3666 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3667 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3666 ], 473103

  mov [ tmp3667 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3666 ]
  mov [ tmp3667 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3667 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3667 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3666
  restore tmp3667

; -----------------------------------------------
; function __X64Encoder_phsubsw_mm_m$5
; -----------------------------------------------
__X64Encoder_phsubsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3669 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3668 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3669 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3668 ], 473103

  mov [ tmp3669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3668 ]
  mov [ tmp3669 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3669 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3669 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3668
  restore tmp3669

; -----------------------------------------------
; function __X64Encoder_phsubd_mm_mm$2
; -----------------------------------------------
__X64Encoder_phsubd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3671 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3670 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3671 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3670 ], 407567

  mov [ tmp3671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3670 ]
  mov [ tmp3671 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3671 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3670
  restore tmp3671

; -----------------------------------------------
; function __X64Encoder_phsubd_mm_m$5
; -----------------------------------------------
__X64Encoder_phsubd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3673 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3672 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3673 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3672 ], 407567

  mov [ tmp3673 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3673 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3673 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3673 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3672
  restore tmp3673

; -----------------------------------------------
; function __X64Encoder_phaddsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_phaddsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3675 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3674 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3675 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3674 ], 210959

  mov [ tmp3675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3674 ]
  mov [ tmp3675 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3675 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3675 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3674
  restore tmp3675

; -----------------------------------------------
; function __X64Encoder_phaddsw_mm_m$5
; -----------------------------------------------
__X64Encoder_phaddsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3677 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3676 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3677 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3676 ], 210959

  mov [ tmp3677 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3676 ]
  mov [ tmp3677 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3677 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3677 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3676
  restore tmp3677

; -----------------------------------------------
; function __X64Encoder_phaddw_mm_mm$2
; -----------------------------------------------
__X64Encoder_phaddw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3679 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3678 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3679 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3678 ], 79887

  mov [ tmp3679 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3678 ]
  mov [ tmp3679 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3679 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3679 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3678
  restore tmp3679

; -----------------------------------------------
; function __X64Encoder_phaddw_mm_m$5
; -----------------------------------------------
__X64Encoder_phaddw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3681 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3680 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3681 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3680 ], 79887

  mov [ tmp3681 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3680 ]
  mov [ tmp3681 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3681 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3681 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3680
  restore tmp3681

; -----------------------------------------------
; function __X64Encoder_phaddd_mm_mm$2
; -----------------------------------------------
__X64Encoder_phaddd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3683 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3682 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3683 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3682 ], 145423

  mov [ tmp3683 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3682 ]
  mov [ tmp3683 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3683 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3683 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3682
  restore tmp3683

; -----------------------------------------------
; function __X64Encoder_phaddd_mm_m$5
; -----------------------------------------------
__X64Encoder_phaddd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3685 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3684 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3685 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3684 ], 145423

  mov [ tmp3685 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3684 ]
  mov [ tmp3685 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3685 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3685 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3684
  restore tmp3685

; -----------------------------------------------
; function __X64Encoder_pabsb_mm_mm$2
; -----------------------------------------------
__X64Encoder_pabsb_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3687 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3686 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3687 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3686 ], 1849359

  mov [ tmp3687 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3686 ]
  mov [ tmp3687 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3687 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3687 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3686
  restore tmp3687

; -----------------------------------------------
; function __X64Encoder_pabsb_mm_m$5
; -----------------------------------------------
__X64Encoder_pabsb_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3689 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3688 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3689 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3688 ], 1849359

  mov [ tmp3689 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3688 ]
  mov [ tmp3689 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3689 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3689 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3688
  restore tmp3689

; -----------------------------------------------
; function __X64Encoder_pabsw_mm_mm$2
; -----------------------------------------------
__X64Encoder_pabsw_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3691 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3690 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3691 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3690 ], 1914895

  mov [ tmp3691 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3690 ]
  mov [ tmp3691 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3691 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3691 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3690
  restore tmp3691

; -----------------------------------------------
; function __X64Encoder_pabsw_mm_m$5
; -----------------------------------------------
__X64Encoder_pabsw_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3693 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3692 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3693 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3692 ], 1914895

  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3692 ]
  mov [ tmp3693 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3693 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3692
  restore tmp3693

; -----------------------------------------------
; function __X64Encoder_pabsd_mm_mm$2
; -----------------------------------------------
__X64Encoder_pabsd_mm_mm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3695 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3694 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  xor eax, eax
  mov [tmp3695 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3694 ], 1980431

  mov [ tmp3695 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3694 ]
  mov [ tmp3695 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3695 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3695 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore tmp3694
  restore tmp3695

; -----------------------------------------------
; function __X64Encoder_pabsd_mm_m$5
; -----------------------------------------------
__X64Encoder_pabsd_mm_m$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3697 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3696 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  xor eax, eax
  mov [tmp3697 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3696 ], 1980431

  mov [ tmp3697 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3696 ]
  mov [ tmp3697 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3697 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore tmp3696
  restore tmp3697

; -----------------------------------------------
; function __X64Encoder_palignr_mm_mm_imm8$3
; -----------------------------------------------
__X64Encoder_palignr_mm_mm_imm8$3_vcall:
__X64Encoder_palignr_mm_mm_imm8$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mmSrc EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm8 EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3699 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3698 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mmSrc ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ imm8 ], xmm0
  xor eax, eax
  mov [tmp3699 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3698 ], 997903

  mov [ tmp3699 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3698 ]
  mov [ tmp3699 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3699 ]
  lea r8 , [ mmDst ]
  lea r9 , [ mmSrc ]
  call  __X64Encoder_emitCore_r_r$3

  lea rcx , [ this ]
  lea rdx , [ imm8 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3699 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore mmDst
  restore mmSrc
  restore imm8
  restore tmp3698
  restore tmp3699

; -----------------------------------------------
; function __X64Encoder_palignr_mm_m64_imm8$6
; -----------------------------------------------
__X64Encoder_palignr_mm_m64_imm8$6_vcall:
__X64Encoder_palignr_mm_m64_imm8$6:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  mmDst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regBase EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  scale EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  regIndex EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  disp EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  imm8 EQU rbp - 120 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3701 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3700 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ mmDst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ regBase ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ scale ], xmm0
  mov rax, qword [rbp + 16 + 8 * 2 ]
  movdqu xmm0 , [ rax ]
  movdqu [ regIndex ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ disp ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ imm8 ], xmm0
  xor eax, eax
  mov [tmp3701 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3700 ], 997903

  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3700 ]
  mov [ tmp3701 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3701 ]
  lea r8 , [ mmDst ]
  lea r9 , [ regBase ]
  lea rax, [ scale ]
  push rax
  lea rax, [ regIndex ]
  push rax
  lea rax, [ disp ]
  push rax
  call  __X64Encoder_emitCore_r_m$6
  add rsp, 24

  lea rcx , [ this ]
  lea rdx , [ imm8 ]
  call  __X64Encoder_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore mmDst
  restore regBase
  restore scale
  restore regIndex
  restore disp
  restore imm8
  restore tmp3700
  restore tmp3701

; -----------------------------------------------
; function __X64Encoder_getCurrentPosition$0
; -----------------------------------------------
__X64Encoder_getCurrentPosition$0_vcall:
__X64Encoder_getCurrentPosition$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp3702 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3702 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3702 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3702 ]
  lea  rax , [ rv ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4076
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l4076:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp3702 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp3702

; -----------------------------------------------
; function __PEWriter_constructor$0
; -----------------------------------------------
__PEWriter_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 6 , readHits= 5 )
  tmp3704 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3703 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3704 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ __literal17 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3703 ], -1

  mov [ tmp3704 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3703 ]
  mov [ tmp3704 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3704 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3703 ], 4194304

  mov [ tmp3704 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3703 ]
  mov [ tmp3704 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal558 ]
  lea  r8 , [ tmp3704 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3703 ], 0

  mov [ tmp3704 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3703 ]
  mov [ tmp3704 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3704 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3703 ], 1

  mov [ tmp3704 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3703 ]
  mov [ tmp3704 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal560 ]
  lea  r8 , [ tmp3704 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3704 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3703
  restore tmp3704

; -----------------------------------------------
; function __PEWriter_emitByte$1
; -----------------------------------------------
__PEWriter_emitByte$1_vcall:
__PEWriter_emitByte$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3705 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3706 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3708 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3707 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3705 + Variant_t.type], eax
  mov [tmp3706 + Variant_t.type], eax
  mov [tmp3708 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3705 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 21 )
  lea rcx , [ tmp3705 ]
  lea rdx , [ x ]
  call qword [rbx + 8 * 21 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3706 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3707 ], 1

  mov [ tmp3708 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3707 ]
  mov [ tmp3708 + Variant_t.value], rax

  lea  rcx , [ tmp3706 ]
  lea  rdx , [ tmp3708 ]
  lea  r8 , [ tmp3705 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3705 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3705 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3706 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3708 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3705
  restore tmp3706
  restore tmp3707
  restore tmp3708

; -----------------------------------------------
; function __PEWriter_emitWord$1
; -----------------------------------------------
__PEWriter_emitWord$1_vcall:
__PEWriter_emitWord$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3709 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3710 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3712 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3711 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3709 + Variant_t.type], eax
  mov [tmp3710 + Variant_t.type], eax
  mov [tmp3712 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3709 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 22 )
  lea rcx , [ tmp3709 ]
  lea rdx , [ x ]
  call qword [rbx + 8 * 22 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3711 ], 2

  mov [ tmp3712 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3711 ]
  mov [ tmp3712 + Variant_t.value], rax

  lea  rcx , [ tmp3710 ]
  lea  rdx , [ tmp3712 ]
  lea  r8 , [ tmp3709 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3709 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3709 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3712 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3709
  restore tmp3710
  restore tmp3711
  restore tmp3712

; -----------------------------------------------
; function __PEWriter_emitDword$1
; -----------------------------------------------
__PEWriter_emitDword$1_vcall:
__PEWriter_emitDword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3713 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3714 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3716 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3715 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3713 + Variant_t.type], eax
  mov [tmp3714 + Variant_t.type], eax
  mov [tmp3716 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3713 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 23 )
  lea rcx , [ tmp3713 ]
  lea rdx , [ x ]
  call qword [rbx + 8 * 23 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3714 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3715 ], 4

  mov [ tmp3716 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3715 ]
  mov [ tmp3716 + Variant_t.value], rax

  lea  rcx , [ tmp3714 ]
  lea  rdx , [ tmp3716 ]
  lea  r8 , [ tmp3713 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3713 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3713 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3714 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3716 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3713
  restore tmp3714
  restore tmp3715
  restore tmp3716

; -----------------------------------------------
; function __PEWriter_emitQword$1
; -----------------------------------------------
__PEWriter_emitQword$1_vcall:
__PEWriter_emitQword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3717 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3718 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3720 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3719 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3717 + Variant_t.type], eax
  mov [tmp3718 + Variant_t.type], eax
  mov [tmp3720 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3717 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 24 )
  lea rcx , [ tmp3717 ]
  lea rdx , [ x ]
  call qword [rbx + 8 * 24 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3718 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3719 ], 8

  mov [ tmp3720 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3719 ]
  mov [ tmp3720 + Variant_t.value], rax

  lea  rcx , [ tmp3718 ]
  lea  rdx , [ tmp3720 ]
  lea  r8 , [ tmp3717 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp3717 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3717 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3718 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3720 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3717
  restore tmp3718
  restore tmp3719
  restore tmp3720

; -----------------------------------------------
; function __PEWriter__emit_HeaderDOS$0
; -----------------------------------------------
__PEWriter__emit_HeaderDOS$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 9 )
  tmp3722 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  tmp3721 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 9 , readHits= 9 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3722 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3721 ], 23117

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3721 ], 0

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3721 ], 0

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3721 ], 0

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3721 ], 0

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3721 ], 0

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3721 ], 0

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3721 ], 0

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3721 ], 64

  mov [ tmp3722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3721 ]
  mov [ tmp3722 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3722 ]
  call  __PEWriter_emitDword$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3722 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3721
  restore tmp3722

; -----------------------------------------------
; function __PEWriter__emit_HeaderPE$0
; -----------------------------------------------
__PEWriter__emit_HeaderPE$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 10 )
  tmp3724 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp3723 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3724 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3723 ], 17744

  mov [ tmp3724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3723 ]
  mov [ tmp3724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3723 ], 34404

  mov [ tmp3724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3723 ]
  mov [ tmp3724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitWord$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal560 ]
  lea  r8 , [ tmp3724 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3723 ], 0

  mov [ tmp3724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3723 ]
  mov [ tmp3724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3723 ], 0

  mov [ tmp3724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3723 ]
  mov [ tmp3724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3723 ], 0

  mov [ tmp3724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3723 ]
  mov [ tmp3724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3723 ], 240

  mov [ tmp3724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3723 ]
  mov [ tmp3724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3723 ], 34

  mov [ tmp3724 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3723 ]
  mov [ tmp3724 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3724 ]
  call  __PEWriter_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3724 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3723
  restore tmp3724

; -----------------------------------------------
; function __PEWriter__emit_HeaderOptional$0
; -----------------------------------------------
__PEWriter__emit_HeaderOptional$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 47 )
  tmp3726 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 45 , readHits= 45 )
  tmp3725 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 44 , readHits= 44 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3726 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3725 ], 523

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 14

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitByte$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitByte$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 4096

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal558 ]
  lea  r8 , [ tmp3726 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 4096

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 512

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 6

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 6

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 8192

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 368

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 3

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3725 ], 1048576

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 4096

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 1048576

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 4096

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 16

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3725 ], 0

  mov [ tmp3726 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3725 ]
  mov [ tmp3726 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3726 ]
  call  __PEWriter_emitQword$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3726 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3725
  restore tmp3726

; -----------------------------------------------
; function __PEWriter__emit_HeaderSections$0
; -----------------------------------------------
__PEWriter__emit_HeaderSections$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 10 )
  tmp3727 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 10 , readHits= 10 )
  tmp3728 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 8 , readHits= 8 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3727 + Variant_t.type], eax

  ; code
  ; ----

  mov rax, 500236121134
  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitQword$1

  mov dword [ tmp3728 ], 4096

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3728 ], 4096

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3728 ], 512

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3728 ], 512

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3728 ], 0

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3728 ], 0

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitDword$1

  mov dword [ tmp3728 ], 0

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitWord$1

  mov dword [ tmp3728 ], 0

  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3728 ]
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitWord$1

  mov rax, 2684354560
  mov [ tmp3727 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3727 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3727 ]
  call  __PEWriter_emitDword$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3727 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3727
  restore tmp3728

; -----------------------------------------------
; function __PEWriter_create$1
; -----------------------------------------------
__PEWriter_create$1_vcall:
__PEWriter_create$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 2 )
  path EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp3729 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ path ], xmm0
  xor eax, eax
  mov [tmp3729 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ path ]
  call  __MOLD_VariantStoreAtKey

  ; __mold_syscall( 3 )
  lea rcx , [ path ]
  lea rdx , [ tmp3729 ]
  call qword [rbx + 8 * 3 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3729 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3729 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore path
  restore tmp3729

; -----------------------------------------------
; function __PEWriter_close$0
; -----------------------------------------------
__PEWriter_close$0_vcall:
__PEWriter_close$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp3730 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3730 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3730 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 4 )
  lea rcx , [ tmp3730 ]
  call qword [rbx + 8 * 4 ]


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3730 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3730

; -----------------------------------------------
; function __Buffer_constructor$0
; -----------------------------------------------
__Buffer_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  tmp3731 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3732 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3731 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp3731 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3731 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3731 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3732 ], 0

  mov [ tmp3731 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3732 ]
  mov [ tmp3731 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  lea  r8 , [ tmp3731 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3731 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3731
  restore tmp3732

; -----------------------------------------------
; function __Buffer_clear$0
; -----------------------------------------------
__Buffer_clear$0_vcall:
__Buffer_clear$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3733 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3734 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3733 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp3733 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3733 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3733 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3734 ], 0

  mov [ tmp3733 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3734 ]
  mov [ tmp3733 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  lea  r8 , [ tmp3733 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3733 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3733
  restore tmp3734

; -----------------------------------------------
; function __Buffer_emitByte$1
; -----------------------------------------------
__Buffer_emitByte$1_vcall:
__Buffer_emitByte$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 4 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3735 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3737 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3738 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  pos EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp3736 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp3739 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3735 + Variant_t.type], eax
  mov [tmp3737 + Variant_t.type], eax
  mov [tmp3738 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  lea  r8 , [ tmp3735 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3735 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3735 + Variant_t.value]
  mov dword [ pos ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3735 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3736 ], 255

  mov [ tmp3738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3736 ]
  mov [ tmp3738 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ x ]
  lea rdx , [ tmp3738 ]
  lea r8 , [ tmp3737 ]
  call qword [rbx + 8 * 35 ]

  lea  rcx , [ tmp3735 ]
  lea  rdx , [ pos ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3739 ], 1

  mov eax, dword [ pos ]
  add eax, dword [ tmp3739 ]
  mov dword [ tmp3736 ], eax

  mov [ tmp3737 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3736 ]
  mov [ tmp3737 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3735 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3738 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore x
  restore pos
  restore tmp3735
  restore tmp3736
  restore tmp3737
  restore tmp3738
  restore tmp3739

; -----------------------------------------------
; function __Buffer_emitWord$1
; -----------------------------------------------
__Buffer_emitWord$1_vcall:
__Buffer_emitWord$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 4 )
  tmp3742 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3745 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3740 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3741 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [x + Variant_t.type], eax
  mov [tmp3742 + Variant_t.type], eax
  mov [tmp3745 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  mov dword [ tmp3741 ], 0

  mov [ tmp3742 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3741 ]
  mov [ tmp3742 + Variant_t.value], rax

  lea rcx, [ tmp3742 ]
  lea rdx, [ x ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l3743

  mov dword [ tmp3741 ], 65536

  mov [ tmp3742 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3741 ]
  mov [ tmp3742 + Variant_t.value], rax

  lea  rcx , [ tmp3742 ]
  lea  rdx , [ x ]
  lea  r8 , [ x ]
  call  __MOLD_VariantAdd

l3743:

l3744:

  lea rcx , [ this ]
  lea rdx , [ x ]
  call  __Buffer_emitByte$1

  mov dword [ tmp3741 ], 256

  mov [ tmp3745 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3741 ]
  mov [ tmp3745 + Variant_t.value], rax

  lea  rcx , [ x ]
  lea  rdx , [ tmp3745 ]
  lea  r8 , [ tmp3742 ]
  call  __MOLD_VariantDivAsInteger

  lea rcx , [ this ]
  lea rdx , [ tmp3742 ]
  call  __Buffer_emitByte$1


  ; clean frame
  ; -----------
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3742 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3745 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore value
  restore x
  restore tmp3740
  restore tmp3741
  restore tmp3742
  restore tmp3745

; -----------------------------------------------
; function __Buffer_emitDword$1
; -----------------------------------------------
__Buffer_emitDword$1_vcall:
__Buffer_emitDword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 4 )
  tmp3748 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3751 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3746 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3747 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [x + Variant_t.type], eax
  mov [tmp3748 + Variant_t.type], eax
  mov [tmp3751 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  mov dword [ tmp3747 ], 0

  mov [ tmp3748 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3747 ]
  mov [ tmp3748 + Variant_t.value], rax

  lea rcx, [ tmp3748 ]
  lea rdx, [ x ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l3749

  mov rax, 4294967296
  mov [ tmp3748 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3748 + Variant_t.value], rax

  lea  rcx , [ tmp3748 ]
  lea  rdx , [ x ]
  lea  r8 , [ x ]
  call  __MOLD_VariantAdd

l3749:

l3750:

  lea rcx , [ this ]
  lea rdx , [ x ]
  call  __Buffer_emitWord$1

  mov dword [ tmp3747 ], 65536

  mov [ tmp3751 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3747 ]
  mov [ tmp3751 + Variant_t.value], rax

  lea  rcx , [ x ]
  lea  rdx , [ tmp3751 ]
  lea  r8 , [ tmp3748 ]
  call  __MOLD_VariantDivAsInteger

  lea rcx , [ this ]
  lea rdx , [ tmp3748 ]
  call  __Buffer_emitWord$1


  ; clean frame
  ; -----------
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3748 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3751 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore value
  restore x
  restore tmp3746
  restore tmp3747
  restore tmp3748
  restore tmp3751

; -----------------------------------------------
; function __Buffer_emitQword$1
; -----------------------------------------------
__Buffer_emitQword$1_vcall:
__Buffer_emitQword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3752 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3753 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [x + Variant_t.type], eax
  mov [tmp3752 + Variant_t.type], eax
  mov [tmp3753 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  lea rcx , [ this ]
  lea rdx , [ x ]
  call  __Buffer_emitDword$1

  mov rax, 4294967296
  mov [ tmp3753 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3753 + Variant_t.value], rax

  lea  rcx , [ x ]
  lea  rdx , [ tmp3753 ]
  lea  r8 , [ tmp3752 ]
  call  __MOLD_VariantDivAsInteger

  lea rcx , [ this ]
  lea rdx , [ tmp3752 ]
  call  __Buffer_emitDword$1


  ; clean frame
  ; -----------
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3752 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3753 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore value
  restore x
  restore tmp3752
  restore tmp3753

; -----------------------------------------------
; function __Buffer_copyBytes$3
; -----------------------------------------------
__Buffer_copyBytes$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  size EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3759 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3761 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3762 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  fromOffset EQU rbp - 92 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  toOffset EQU rbp - 96 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )
  tmp3754 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3755 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3756 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3760 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3763 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 120 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ fromOffset ], edx
  mov dword [ toOffset ], r8d
  movdqu xmm0 , [ r9 ]
  movdqu [ size ], xmm0
  xor eax, eax
  mov [tmp3759 + Variant_t.type], eax
  mov [tmp3761 + Variant_t.type], eax
  mov [tmp3762 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3754 ], 1

  cmp [ size + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ size + Variant_t.value]
  mov dword [ tmp3755 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3756 .. tmp3755
; 
l3757:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3755 ]
  jge l3758

  lea  rcx , [ this ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3759 ]
  call  __MOLD_VariantLoadFromKey

  mov eax, dword [ toOffset ]
  add eax, dword [ idx ]
  mov dword [ tmp3760 ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3762 ]
  call  __MOLD_VariantLoadFromKey

  mov eax, dword [ fromOffset ]
  add eax, dword [ idx ]
  mov dword [ tmp3763 ], eax

  lea  rcx , [ tmp3762 ]
  lea  rdx , [ tmp3763 ]
  lea  r8 , [ tmp3761 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3759 ]
  lea  rdx , [ tmp3760 ]
  lea  r8 , [ tmp3761 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp3754 ]
  mov dword [ idx ], eax

  jmp l3757

l3758:

; 
; END: for idx in tmp3756 .. tmp3755 step tmp3754
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3759 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3761 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3762 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore fromOffset
  restore toOffset
  restore size
  restore tmp3754
  restore tmp3755
  restore tmp3756
  restore tmp3759
  restore tmp3760
  restore tmp3761
  restore tmp3762
  restore tmp3763
  restore idx

; -----------------------------------------------
; function __Buffer_getSize$0
; -----------------------------------------------
__Buffer_getSize$0_vcall:
__Buffer_getSize$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp3764 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3764 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3764 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp3764 ]
  lea rdx , [ rv ]
  call qword [rbx + 8 * 43 ]


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3764 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp3764

; -----------------------------------------------
; function __Buffer_getCurrentPosition$0
; -----------------------------------------------
__Buffer_getCurrentPosition$0_vcall:
__Buffer_getCurrentPosition$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __Buffer_setCurrentPosition$2
; -----------------------------------------------
__Buffer_setCurrentPosition$2_vcall:
  ; skipped unused parameter [ mode ]
__Buffer_setCurrentPosition$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  newPos EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ newPos ], xmm0
  ; skipped unused param [ mode ]

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  lea  r8 , [ newPos ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore newPos

; -----------------------------------------------
; function __X64Compiler_constructor$0
; -----------------------------------------------
__X64Compiler_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 6 , readHits= 13 )
  tmp3765 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp3766 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp3767 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3768 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3769 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3765 + Variant_t.type], eax
  mov [tmp3766 + Variant_t.type], eax
  mov [tmp3767 + Variant_t.type], eax
  mov [tmp3768 + Variant_t.type], eax
  mov [tmp3769 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp3765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3765 ]
  lea  rdx, [vtable_X64Parser]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3765 ]
  lea  rax , [ tmp3766 ]
  call  __X64Parser_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal562 ]
  lea  r8 , [ tmp3765 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3765 ]
  lea  rdx, [vtable_X64Translator]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3765 ]
  lea  rax , [ tmp3766 ]
  call  __PipeAbstract_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp3765 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3765 ]
  lea  rdx, [vtable_X64Encoder]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3765 ]
  lea  rax , [ tmp3766 ]
  call  __X64Encoder_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp3765 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3765 ]
  lea  rdx, [vtable_Buffer]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3765 ]
  lea  rax , [ tmp3766 ]
  call  __Buffer_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal565 ]
  lea  r8 , [ tmp3765 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3765 ]
  lea  rdx, [vtable_PEWriter]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3765 ]
  lea  rax , [ tmp3766 ]
  call  __PEWriter_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal566 ]
  lea  r8 , [ tmp3765 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal562 ]
  lea  r8 , [ tmp3768 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp3769 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3768 ]
  lea rdx , [ tmp3769 ]
  lea  rax , [ tmp3767 ]
  mov  r10d, 87
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4077
  movsxd rax, dword [ tmp3767 + Variant_t.value ]
  mov    qword [ tmp3767 + Variant_t.value ], rax
l4077:


  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp3769 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3767 ]
  lea rdx , [ tmp3769 ]
  lea  rax , [ tmp3766 ]
  mov  r10d, 87
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4078
  movsxd rax, dword [ tmp3766 + Variant_t.value ]
  mov    qword [ tmp3766 + Variant_t.value ], rax
l4078:


  lea  rcx , [ this ]
  lea  rdx , [ __literal565 ]
  lea  r8 , [ tmp3769 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3766 ]
  lea rdx , [ tmp3769 ]
  lea  rax , [ tmp3765 ]
  mov  r10d, 87
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4079
  movsxd rax, dword [ tmp3765 + Variant_t.value ]
  mov    qword [ tmp3765 + Variant_t.value ], rax
l4079:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp3765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3766 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3767 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3768 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3769 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore tmp3765
  restore tmp3766
  restore tmp3767
  restore tmp3768
  restore tmp3769

; -----------------------------------------------
; function __X64Compiler_compileToFile$2
; -----------------------------------------------
__X64Compiler_compileToFile$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 7 )
  targetBinPath EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  sourceAsmPath EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3770 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3771 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ targetBinPath ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ sourceAsmPath ], xmm0
  xor eax, eax
  mov [tmp3770 + Variant_t.type], eax
  mov [tmp3771 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal566 ]
  lea  r8 , [ tmp3771 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3771 ]
  lea rdx , [ targetBinPath ]
  lea  rax , [ tmp3770 ]
  mov  r10d, 88
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4080
  movsxd rax, dword [ tmp3770 + Variant_t.value ]
  mov    qword [ tmp3770 + Variant_t.value ], rax
l4080:


  lea  rcx , [ this ]
  lea  rdx , [ __literal566 ]
  lea  r8 , [ tmp3770 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp3770 ]
  lea r8 , [ sourceAsmPath ]
  call  __X64Compiler_compile$2

  lea  rcx , [ this ]
  lea  rdx , [ __literal566 ]
  lea  r8 , [ tmp3771 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3771 ]
  lea  rax , [ tmp3770 ]
  mov  r10d, 89
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4081
  movsxd rax, dword [ tmp3770 + Variant_t.value ]
  mov    qword [ tmp3770 + Variant_t.value ], rax
l4081:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp3770 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3771 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore targetBinPath
  restore sourceAsmPath
  restore tmp3770
  restore tmp3771

; -----------------------------------------------
; function __X64Compiler_compile$2
; -----------------------------------------------
__X64Compiler_compile$2_vcall:
__X64Compiler_compile$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 8 )
  outputObject EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  pathAsm EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  parser EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tempBuffer EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 11 )
  translator EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  refs EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  tmp3772 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  item EQU rbp - 152 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 3 , readHits= 7 )
  tmp3781 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3782 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3793 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 15 , readHits= 15 )
  tmp3794 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp3795 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 18 , readHits= 18 )
  tmp3806 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3807 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  codeSizeBefore EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  codeSizeAfter EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse1 EQU rbp - 312 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  __cse2 EQU rbp - 328 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  codeSizeDiffTotal EQU rbp - 332 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  passIdx EQU rbp - 336 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  readPos EQU rbp - 340 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp3777 EQU rbp - 344 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3778 EQU rbp - 348 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 12 , readHits= 12 )
  tmp3783 EQU rbp - 352 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3785 EQU rbp - 356 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp3790 EQU rbp - 360 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp3796 EQU rbp - 364 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  codeSizeDiff EQU rbp - 368 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp3813 EQU rbp - 372 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp3821 EQU rbp - 376 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3824 EQU rbp - 380 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  pos EQU rbp - 384 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  idx EQU rbp - 388 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 416

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ outputObject ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ pathAsm ], xmm0
  xor eax, eax
  mov [parser + Variant_t.type], eax
  mov [tempBuffer + Variant_t.type], eax
  mov [translator + Variant_t.type], eax
  mov [refs + Variant_t.type], eax
  mov [tmp3772 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3781 + Variant_t.type], eax
  mov [tmp3782 + Variant_t.type], eax
  mov [tmp3793 + Variant_t.type], eax
  mov [tmp3794 + Variant_t.type], eax
  mov [tmp3795 + Variant_t.type], eax
  mov [tmp3806 + Variant_t.type], eax
  mov [tmp3807 + Variant_t.type], eax
  mov [codeSizeBefore + Variant_t.type], eax
  mov [codeSizeAfter + Variant_t.type], eax
  mov [__cse1 + Variant_t.type], eax
  mov [__cse2 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal562 ]
  lea  r8 , [ parser ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal565 ]
  lea  r8 , [ tempBuffer ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ translator ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tempBuffer ]
  lea  rax , [ tmp3772 ]
  mov  r10d, 90
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4082
  movsxd rax, dword [ tmp3772 + Variant_t.value ]
  mov    qword [ tmp3772 + Variant_t.value ], rax
l4082:


  lea rcx , [ parser ]
  lea rdx , [ pathAsm ]
  lea  rax , [ tmp3772 ]
  mov  r10d, 91
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4083
  movsxd rax, dword [ tmp3772 + Variant_t.value ]
  mov    qword [ tmp3772 + Variant_t.value ], rax
l4083:


  mov dword [ codeSizeDiffTotal ], -1

  lea rcx , [ parser ]
  lea  rax , [ refs ]
  mov  r10d, 92
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4084
  movsxd rax, dword [ refs + Variant_t.value ]
  mov    qword [ refs + Variant_t.value ], rax
l4084:


  mov dword [ passIdx ], 1

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l3774

l3773:

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal567 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantStoreAtKey

  ret

l3774:

  lea  rcx , [ refs ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3773 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: while
; 
l3775:

  mov dword [ tmp3778 ], 0

  mov eax, dword [ codeSizeDiffTotal ]
  cmp eax, dword [ tmp3778 ]
  jz l3776

  mov dword [ codeSizeDiffTotal ], 0

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l3780

l3779:

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp3781 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp3782 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ codeSizeDiffTotal ]
  mov [ tmp3782 + Variant_t.value], rax

  lea  rcx , [ tmp3781 ]
  lea  rdx , [ tmp3782 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3783 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp3772 ]
  lea rdx, [ __literal69 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3784

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3772 ]
  lea  rdx , [ __literal74 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3783 ], eax

l3784:

  cmp dword [ tmp3783 ], 0
  jz l3786

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ codeSizeBefore ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal63 ]
  lea  r8 , [ tmp3772 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3772  + Variant_t.type], 0
  jz l3788

  lea  rcx , [ item ]
  lea  rdx , [ __literal63 ]
  lea  r8 , [ tmp3781 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3781 ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp3782 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp3782 ]
  call  __MOLD_VariantStoreAtKey

  jmp l3789

l3788:

  lea  rcx , [ item ]
  lea  rdx , [ __literal48 ]
  lea  r8 , [ tmp3782 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3782  + Variant_t.type], 0
  jz l3791

  lea  rcx , [ item ]
  lea  rdx , [ __literal48 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3795 ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp3794 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3794 ]
  lea  rdx , [ tmp3795 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantSub

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3793 ]
  lea  rdx , [ tmp3795 ]
  lea  r8 , [ tmp3781 ]
  call  __MOLD_VariantSub

  lea  rcx , [ item ]
  lea  rdx , [ __literal51 ]
  lea  r8 , [ tmp3781 ]
  call  __MOLD_VariantStoreAtKey

  jmp l3792

l3791:

  lea  rcx , [ item ]
  lea  rdx , [ __literal71 ]
  lea  r8 , [ tmp3781 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3781  + Variant_t.type], 0
  jz l3797

  lea  rcx , [ item ]
  lea  rdx , [ __literal71 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantStoreAtKey

l3797:

l3798:

l3792:

l3789:

  lea  rcx , [ item ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3778 ], 0

  mov [ tmp3794 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3778 ]
  mov [ tmp3794 + Variant_t.value], rax

  lea rcx , [ tempBuffer ]
  lea rdx , [ tmp3793 ]
  lea r8 , [ tmp3794 ]
  lea  rax , [ tmp3795 ]
  mov  r10d, 93
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4085
  movsxd rax, dword [ tmp3795 + Variant_t.value ]
  mov    qword [ tmp3795 + Variant_t.value ], rax
l4085:


  lea rcx , [ translator ]
  lea rdx , [ item ]
  lea  rax , [ tmp3795 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4086
  movsxd rax, dword [ tmp3795 + Variant_t.value ]
  mov    qword [ tmp3795 + Variant_t.value ], rax
l4086:


  lea rcx , [ tempBuffer ]
  lea  rax , [ tmp3795 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4087
  movsxd rax, dword [ tmp3795 + Variant_t.value ]
  mov    qword [ tmp3795 + Variant_t.value ], rax
l4087:


  lea  rcx , [ item ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp3794 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3795 ]
  lea  rdx , [ tmp3794 ]
  lea  r8 , [ codeSizeAfter ]
  call  __MOLD_VariantSub

  lea  rcx , [ codeSizeAfter ]
  lea  rdx , [ codeSizeBefore ]
  lea  r8 , [ tmp3794 ]
  call  __MOLD_VariantSub

  cmp [ tmp3794 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3794 + Variant_t.value]
  mov dword [ codeSizeDiff ], eax

  mov eax, dword [ codeSizeDiffTotal ]
  add eax, dword [ codeSizeDiff ]
  mov dword [ codeSizeDiffTotal ], eax

  mov dword [ tmp3778 ], 0

  mov eax, dword [ codeSizeDiff ]
  cmp eax, dword [ tmp3778 ]
  jle l3799

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal568
  lea rcx , [ __literal568 ]
  call qword [rbx + 8 * 41 ]

  jmp l3800

l3799:

  mov dword [ tmp3778 ], 0

  mov eax, dword [ codeSizeDiff ]
  cmp eax, dword [ tmp3778 ]
  jge l3801

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ codeSizeAfter ]
  call  __MOLD_VariantStoreAtKey

l3801:

l3802:

l3800:

  jmp l3787

l3786:

  mov dword [ tmp3785 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp3794 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp3794 ]
  lea rdx, [ __literal34 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3803

  lea  rcx , [ item ]
  lea  rdx , [ __literal78 ]
  lea  r8 , [ tmp3794 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp3794  + Variant_t.type], 0
  setnz al
  mov dword [ tmp3785 ], eax

l3803:

  cmp dword [ tmp3785 ], 0
  jz l3804

  lea  rcx , [ item ]
  lea  rdx , [ __literal78 ]
  lea  r8 , [ __cse1 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal37 ]
  lea  r8 , [ __cse2 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ __cse2 ]
  lea  rdx , [ __cse1 ]
  lea  r8 , [ tmp3806 ]
  call  __MOLD_VariantDivAsInteger

  mov dword [ tmp3778 ], 1

  mov [ tmp3807 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3778 ]
  mov [ tmp3807 + Variant_t.value], rax

  lea  rcx , [ tmp3806 ]
  lea  rdx , [ tmp3807 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ tmp3793 ]
  lea  rdx , [ __cse1 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantMul

  lea  rcx , [ tmp3795 ]
  lea  rdx , [ __cse2 ]
  lea  r8 , [ codeSizeAfter ]
  call  __MOLD_VariantSub

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeSizeAfter ]
  lea  rdx , [ tmp3793 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantSub

  cmp [ tmp3795 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3795 + Variant_t.value]
  mov dword [ codeSizeDiff ], eax

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ codeSizeAfter ]
  call  __MOLD_VariantStoreAtKey

  mov eax, dword [ codeSizeDiffTotal ]
  add eax, dword [ codeSizeDiff ]
  mov dword [ codeSizeDiffTotal ], eax

l3804:

l3805:

l3787:

  ret

l3780:

  lea  rcx , [ refs ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3779 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  mov dword [ tmp3778 ], 1

  mov eax, dword [ passIdx ]
  add eax, dword [ tmp3778 ]
  mov dword [ passIdx ], eax

  jmp l3775

l3776:

; 
; END: while
; -----------------------------
; 
  mov dword [ readPos ], 0

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l3809

l3808:

  mov dword [ tmp3783 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp3795 ]
  lea rdx, [ __literal69 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3810

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3795 ]
  lea  rdx , [ __literal74 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3783 ], eax

l3810:

  cmp dword [ tmp3783 ], 0
  jz l3811

  mov dword [ tmp3778 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ tmp3807 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3793 ]
  lea  rdx , [ tmp3807 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantAdd

  cmp [ tmp3795 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3795 + Variant_t.value]
  mov dword [ tmp3813 ], eax

  mov eax, dword [ readPos ]
  mov dword [ pos ], eax

; 
; -----------------------------
; BEGIN: for pos in readPos .. tmp3813
; 
l3814:

  mov eax, dword [ pos ]
  cmp eax, dword [ tmp3813 ]
  jge l3815

  lea  rcx , [ tempBuffer ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3793 ]
  lea  rdx , [ pos ]
  lea  r8 , [ tmp3807 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ outputObject ]
  lea rdx , [ tmp3807 ]
  lea  rax , [ tmp3795 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4088
  movsxd rax, dword [ tmp3795 + Variant_t.value ]
  mov    qword [ tmp3795 + Variant_t.value ], rax
l4088:


  mov eax, dword [ pos ]
  add eax, dword [ tmp3778 ]
  mov dword [ pos ], eax

  jmp l3814

l3815:

; 
; END: for pos in readPos .. tmp3813 step tmp3778
; -----------------------------
; 
  lea  rcx , [ item ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp3807 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal567 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3807 ]
  lea  rdx , [ tmp3793 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantAdd

  cmp [ tmp3795 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3795 + Variant_t.value]
  mov dword [ readPos ], eax

  jmp l3812

l3811:

  mov dword [ tmp3785 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp3795 ]
  lea rdx, [ __literal34 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3816

  lea  rcx , [ item ]
  lea  rdx , [ __literal78 ]
  lea  r8 , [ tmp3795 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp3795  + Variant_t.type], 0
  setnz al
  mov dword [ tmp3785 ], eax

l3816:

  cmp dword [ tmp3785 ], 0
  jz l3817

  mov dword [ tmp3813 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3793 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3793 + Variant_t.value]
  mov dword [ tmp3778 ], eax

  mov eax, dword [ readPos ]
  mov dword [ pos ], eax

; 
; -----------------------------
; BEGIN: for pos in readPos .. tmp3778
; 
l3819:

  mov eax, dword [ pos ]
  cmp eax, dword [ tmp3778 ]
  jge l3820

  lea  rcx , [ tempBuffer ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3806 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3806 ]
  lea  rdx , [ pos ]
  lea  r8 , [ tmp3807 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ outputObject ]
  lea rdx , [ tmp3807 ]
  lea  rax , [ tmp3793 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4089
  movsxd rax, dword [ tmp3793 + Variant_t.value ]
  mov    qword [ tmp3793 + Variant_t.value ], rax
l4089:


  mov eax, dword [ pos ]
  add eax, dword [ tmp3813 ]
  mov dword [ pos ], eax

  jmp l3819

l3820:

; 
; END: for pos in readPos .. tmp3778 step tmp3813
; -----------------------------
; 
  lea  rcx , [ item ]
  lea  rdx , [ __literal38 ]
  lea  r8 , [ tmp3807 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal567 ]
  lea  r8 , [ tmp3806 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3807 ]
  lea  rdx , [ tmp3806 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantAdd

  cmp [ tmp3793 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3793 + Variant_t.value]
  mov dword [ readPos ], eax

  mov dword [ tmp3778 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ __literal36 ]
  lea  r8 , [ tmp3793 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3793 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3793 + Variant_t.value]
  mov dword [ tmp3813 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3821 .. tmp3813
; 
l3822:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3813 ]
  jge l3823

  mov dword [ tmp3824 ], 0

  mov [ tmp3806 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3824 ]
  mov [ tmp3806 + Variant_t.value], rax

  lea rcx , [ outputObject ]
  lea rdx , [ tmp3806 ]
  lea  rax , [ tmp3793 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4090
  movsxd rax, dword [ tmp3793 + Variant_t.value ]
  mov    qword [ tmp3793 + Variant_t.value ], rax
l4090:


  mov eax, dword [ idx ]
  add eax, dword [ tmp3778 ]
  mov dword [ idx ], eax

  jmp l3822

l3823:

; 
; END: for idx in tmp3821 .. tmp3813 step tmp3778
; -----------------------------
; 
l3817:

l3818:

l3812:

  ret

l3809:

  lea  rcx , [ refs ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3808 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  mov dword [ tmp3821 ], 1

  lea rcx , [ tempBuffer ]
  lea  rax , [ tmp3793 ]
  mov  r10d, 94
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4091
  movsxd rax, dword [ tmp3793 + Variant_t.value ]
  mov    qword [ tmp3793 + Variant_t.value ], rax
l4091:


  cmp [ tmp3793 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3793 + Variant_t.value]
  mov dword [ tmp3813 ], eax

  mov eax, dword [ readPos ]
  mov dword [ pos ], eax

; 
; -----------------------------
; BEGIN: for pos in readPos .. tmp3813
; 
l3825:

  mov eax, dword [ pos ]
  cmp eax, dword [ tmp3813 ]
  jge l3826

  lea  rcx , [ tempBuffer ]
  lea  rdx , [ __literal74 ]
  lea  r8 , [ tmp3807 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3807 ]
  lea  rdx , [ pos ]
  lea  r8 , [ tmp3806 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ outputObject ]
  lea rdx , [ tmp3806 ]
  lea  rax , [ tmp3793 ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4092
  movsxd rax, dword [ tmp3793 + Variant_t.value ]
  mov    qword [ tmp3793 + Variant_t.value ], rax
l4092:


  mov eax, dword [ pos ]
  add eax, dword [ tmp3821 ]
  mov dword [ pos ], eax

  jmp l3825

l3826:

; 
; END: for pos in readPos .. tmp3813 step tmp3821
; -----------------------------
; 
  lea rcx , [ tempBuffer ]
  lea  rax , [ tmp3793 ]
  mov  r10d, 90
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4093
  movsxd rax, dword [ tmp3793 + Variant_t.value ]
  mov    qword [ tmp3793 + Variant_t.value ], rax
l4093:



  ; clean frame
  ; -----------
  lea  rcx, [ parser ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tempBuffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ translator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ refs ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3772 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ tmp3781 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3782 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3793 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3794 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3795 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3806 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3807 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeSizeBefore ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeSizeAfter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse2 ]
  call __MOLD_VariantDestroy

  add  rsp, 416
  pop  rbp
  ret


  restore this
  restore outputObject
  restore pathAsm
  restore parser
  restore tempBuffer
  restore translator
  restore codeSizeDiffTotal
  restore refs
  restore passIdx
  restore readPos
  restore tmp3772
  restore item
  restore tmp3777
  restore tmp3778
  restore tmp3781
  restore tmp3782
  restore tmp3783
  restore tmp3785
  restore tmp3790
  restore tmp3793
  restore tmp3794
  restore tmp3795
  restore tmp3796
  restore tmp3806
  restore tmp3807
  restore codeSizeBefore
  restore codeSizeAfter
  restore codeSizeDiff
  restore __cse1
  restore __cse2
  restore tmp3813
  restore tmp3821
  restore tmp3824
  restore pos
  restore idx

; -----------------------------------------------
; function __X64Tester_constructor$0
; -----------------------------------------------
__X64Tester_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  tmp3827 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3828 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3827 + Variant_t.type], eax
  mov [tmp3828 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp3827 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3827 ]
  lea  rdx, [vtable_X64Compiler]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3827 ]
  lea  rax , [ tmp3828 ]
  call  __X64Compiler_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal972 ]
  lea  r8 , [ tmp3827 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3827 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3828 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp3827
  restore tmp3828

; -----------------------------------------------
; function __X64Tester_compare$2
; -----------------------------------------------
__X64Tester_compare$2:

  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  y EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp3832 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3833 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3834 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3835 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3836 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3829 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ y ], xmm0
  xor eax, eax
  mov [tmp3832 + Variant_t.type], eax
  mov [tmp3833 + Variant_t.type], eax
  mov [tmp3834 + Variant_t.type], eax
  mov [tmp3835 + Variant_t.type], eax
  mov [tmp3836 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx, [ x ]
  lea rdx, [ y ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3830

  lea rcx , [ x ]
  lea  rax , [ tmp3836 ]
  call  hex

  lea  rcx, [ tmp3835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal973 ]
  lea  rdx , [ tmp3836 ]
  lea  r8 , [ tmp3835 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3834 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3835 ]
  lea  rdx , [ __literal974 ]
  lea  r8 , [ tmp3834 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ y ]
  lea  rax , [ tmp3835 ]
  call  hex

  lea  rcx, [ tmp3833 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3834 ]
  lea  rdx , [ tmp3835 ]
  lea  r8 , [ tmp3833 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3832 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3833 ]
  lea  rdx , [ __literal975 ]
  lea  r8 , [ tmp3832 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp3832 ]
  call qword [rbx + 8 * 41 ]

l3830:

l3831:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3832 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3833 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3834 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3835 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3836 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore x
  restore y
  restore tmp3829
  restore tmp3832
  restore tmp3833
  restore tmp3834
  restore tmp3835
  restore tmp3836

; -----------------------------------------------
; function __X64Tester_emitByte$1
; -----------------------------------------------
__X64Tester_emitByte$1_vcall:
__X64Tester_emitByte$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3837 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3838 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3837 + Variant_t.type], eax
  mov [tmp3838 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3838 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 8 )
  lea rcx , [ tmp3838 ]
  lea rdx , [ tmp3837 ]
  call qword [rbx + 8 * 8 ]

  lea rcx , [ this ]
  lea rdx , [ x ]
  lea r8 , [ tmp3837 ]
  call  __X64Tester_compare$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3837 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3838 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3837
  restore tmp3838

; -----------------------------------------------
; function __X64Tester_emitWord$1
; -----------------------------------------------
__X64Tester_emitWord$1_vcall:
__X64Tester_emitWord$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3839 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3840 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3839 + Variant_t.type], eax
  mov [tmp3840 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3840 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 9 )
  lea rcx , [ tmp3840 ]
  lea rdx , [ tmp3839 ]
  call qword [rbx + 8 * 9 ]

  lea rcx , [ this ]
  lea rdx , [ x ]
  lea r8 , [ tmp3839 ]
  call  __X64Tester_compare$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3839 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3840 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3839
  restore tmp3840

; -----------------------------------------------
; function __X64Tester_emitDword$1
; -----------------------------------------------
__X64Tester_emitDword$1_vcall:
__X64Tester_emitDword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3841 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3842 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3841 + Variant_t.type], eax
  mov [tmp3842 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3842 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 10 )
  lea rcx , [ tmp3842 ]
  lea rdx , [ tmp3841 ]
  call qword [rbx + 8 * 10 ]

  lea rcx , [ this ]
  lea rdx , [ x ]
  lea r8 , [ tmp3841 ]
  call  __X64Tester_compare$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3841 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3842 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3841
  restore tmp3842

; -----------------------------------------------
; function __X64Tester_emitQword$1
; -----------------------------------------------
__X64Tester_emitQword$1_vcall:
__X64Tester_emitQword$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3843 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3844 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp3843 + Variant_t.type], eax
  mov [tmp3844 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3844 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 11 )
  lea rcx , [ tmp3844 ]
  lea rdx , [ tmp3843 ]
  call qword [rbx + 8 * 11 ]

  lea rcx , [ this ]
  lea rdx , [ x ]
  lea r8 , [ tmp3843 ]
  call  __X64Tester_compare$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3843 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3844 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp3843
  restore tmp3844

; -----------------------------------------------
; function __X64Tester_compileSourceFile$2
; -----------------------------------------------
__X64Tester_compileSourceFile$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 8 )
  pathAsm EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  pathBin EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3845 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp3846 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3847 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3849 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3848 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3850 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ pathAsm ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ pathBin ], xmm0
  xor eax, eax
  mov [tmp3845 + Variant_t.type], eax
  mov [tmp3846 + Variant_t.type], eax
  mov [tmp3847 + Variant_t.type], eax
  mov [tmp3849 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp3845 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ pathAsm ]
  lea  rdx , [ __literal976 ]
  lea  r8 , [ tmp3845 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3845 ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ tmp3845 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal977 ]
  lea  rdx , [ pathBin ]
  lea  r8 , [ tmp3845 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 1 )
  lea rcx , [ tmp3845 ]
  lea rdx , [ tmp3846 ]
  call qword [rbx + 8 * 1 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3846 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal972 ]
  lea  r8 , [ tmp3847 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp3845 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal977 ]
  lea  rdx , [ pathAsm ]
  lea  r8 , [ tmp3845 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp3847 ]
  lea rdx , [ this ]
  lea r8 , [ tmp3845 ]
  lea  rax , [ tmp3846 ]
  mov  r10d, 95
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l4094
  movsxd rax, dword [ tmp3846 + Variant_t.value ]
  mov    qword [ tmp3846 + Variant_t.value ], rax
l4094:


  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3849 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 20 )
  lea rcx , [ tmp3849 ]
  lea rdx , [ tmp3847 ]
  call qword [rbx + 8 * 20 ]

  ; __mold_syscall( 31 )
  lea rcx , [ tmp3847 ]
  lea rdx , [ tmp3846 ]
  call qword [rbx + 8 * 31 ]

  mov dword [ tmp3850 ], 0

  mov [ tmp3847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3850 ]
  mov [ tmp3847 + Variant_t.value], rax

  lea rcx, [ tmp3846 ]
  lea rdx, [ tmp3847 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3851

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal978
  lea rcx , [ __literal978 ]
  call qword [rbx + 8 * 41 ]

l3851:

l3852:

  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3847 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 4 )
  lea rcx , [ tmp3847 ]
  call qword [rbx + 8 * 4 ]

  lea rcx, [__fmt1 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3845 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3846 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3847 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3849 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore pathAsm
  restore pathBin
  restore tmp3845
  restore tmp3846
  restore tmp3847
  restore tmp3848
  restore tmp3849
  restore tmp3850

; -----------------------------------------------
; entry point
; -----------------------------------------------
; -----------------------------------------------
; function start
; -----------------------------------------------
start:

  ; init frame
  ; ----------
  arrayOfTests EQU rbp - 24 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tester EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3855 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  regName EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3862 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3866 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3869 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3870 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 79 , readHits= 79 )
  tmp3872 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 79 , readHits= 79 )
  tmp3873 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 79 , readHits= 79 )
  testName EQU rbp - 184 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  pathAsm EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  pathBin EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  regId EQU rbp - 220 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3856 EQU rbp - 224 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 21 , readHits= 21 )
  tmp3865 EQU rbp - 228 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 19 , readHits= 19 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  xor eax, eax
  mov [arrayOfTests + Variant_t.type], eax
  mov [tester + Variant_t.type], eax
  mov [tmp3855 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3862 + Variant_t.type], eax
  mov [tmp3866 + Variant_t.type], eax
  mov [tmp3869 + Variant_t.type], eax
  mov [tmp3870 + Variant_t.type], eax
  mov [tmp3872 + Variant_t.type], eax
  mov [tmp3873 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [pathAsm + Variant_t.type], eax
  mov [pathBin + Variant_t.type], eax

  mov [X64_REGISTER_NAMES_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [PARSER_X64_ADDRESS_SIZE_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [PARSER_X64_DEFINE_DATA_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [X64_DATA_SIZE_ID + Variant_t.type], VARIANT_UNDEFINED
  mov [X64_OPCODES_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [X64_OPCODES_MAP_FPU + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----

  mov dword [ X64_CDQE ], 38984

  mov dword [ X64_CQO ], 39240

  mov dword [ X64_IRETQ ], 53064

  mov dword [ X64_CMPSQ ], 42824

  mov dword [ X64_LODSQ ], 44360

  mov dword [ X64_STOSQ ], 43848

  mov dword [ X64_SCASQ ], 44872

  mov dword [ X64_MOVSQ ], 42312

  mov dword [ X64_RETFQ ], 52040

  mov dword [ X64_PUSHFQ ], 40008

  mov dword [ X64_POPFQ ], 40264

  mov dword [ X64_CBW ], 39014

  mov dword [ X64_CWD ], 39270

  mov dword [ X64_CMPSW ], 42854

  mov dword [ X64_LODSW ], 44390

  mov dword [ X64_STOSW ], 43878

  mov dword [ X64_SCASW ], 44902

  mov dword [ X64_MOVSW ], 42342

  mov dword [ X64_INSW ], 28006

  mov dword [ X64_OUTSW ], 28518

  mov dword [ X64_FSTSW_AX ], 14737307

  mov dword [ X64_AX ], 16

  mov dword [ X64_DX ], 18

  mov dword [ X64_EAX ], 32

  mov dword [ X64_RSP ], 52

  mov dword [ X64_RBP ], 53

  mov dword [ X64_ST0 ], 64

  lea  rcx, [ X64_REGISTER_NAMES_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ X64_REGISTER_NAMES_MAP ]
  call  __MOLD_VariantMapCreate

  mov dword [ regId ], 0

; 
; -----------------------------
; BEGIN: for keys undefined values regName
; 
  jmp l3854

l3853:

  mov [ tmp3855 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ regId ]
  mov [ tmp3855 + Variant_t.value], rax

  lea  rcx , [ X64_REGISTER_NAMES_MAP ]
  lea  rdx , [ regName ]
  lea  r8 , [ tmp3855 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3856 ], 1

  mov eax, dword [ regId ]
  add eax, dword [ tmp3856 ]
  mov dword [ regId ], eax

  ret

l3854:

  lea  rcx , [ X64_REGISTER_NAMES ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ regName ]
  lea  r9 , [ l3853 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values regName
; -----------------------------
; 
  mov dword [ tmp3856 ], 100

  mov [ tmp3855 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3855 + Variant_t.value], rax

  lea  rcx , [ X64_REGISTER_NAMES_MAP ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3855 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp3855 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ X64_ST0 ]
  mov [ tmp3855 + Variant_t.value], rax

  lea  rcx , [ X64_REGISTER_NAMES_MAP ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3855 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ PARSER_X64_ADDRESS_SIZE_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ PARSER_X64_ADDRESS_SIZE_MAP ]
  lea  rdx , [ __const3857 ]
  lea  r8 , [ __const3858 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ PARSER_X64_DEFINE_DATA_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ PARSER_X64_DEFINE_DATA_MAP ]
  lea  rdx , [ __const3859 ]
  lea  r8 , [ __const3860 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ X64_DATA_SIZE_ID ]
  call __MOLD_VariantDestroy
  lea  rcx , [ X64_DATA_SIZE_ID ]
  lea  rdx , [ __const3861 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx, [ X64_OPCODES_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __const3863 ]
  lea  r8 , [ __const3864 ]
  call  __MOLD_VariantMapCreateFromInitList

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_IRETQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal142 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_IRETQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal143 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_CMPSW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_CMPSQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_MOVSW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_MOVSQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_LODSW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_LODSQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_STOSW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_STOSQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_SCASW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_SCASQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal159 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_INSW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_OUTSW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_CBW ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_CDQE ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_CWD ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal164 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_CQO ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal165 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3865 ], 16777216

  mov eax, dword [ X64_IRETQ ]
  add eax, dword [ tmp3865 ]
  mov dword [ tmp3856 ], eax

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3856 ]
  mov [ tmp3862 + Variant_t.value], rax

  lea  rcx , [ X64_OPCODES_MAP ]
  lea  rdx , [ __literal143 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ X64_OPCODES_MAP_FPU ]
  call __MOLD_VariantDestroy
  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3862 + Variant_t.value], 0

  lea  rcx, [ tmp3855 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3855 ]
  lea  rdx , [ __const3867 ]
  lea  r8 , [ __const3868 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  lea  rdx , [ tmp3862 ]
  lea  r8 , [ tmp3855 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3862 + Variant_t.value], 1

  lea  rcx, [ tmp3866 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3866 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3871 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal467 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3874 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal468 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3875 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal469 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3876 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal470 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3877 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal471 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3878 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal472 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3879 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal473 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3880 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal474 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3881 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal475 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3882 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal476 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3883 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal477 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3884 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal478 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3885 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal479 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3886 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3887 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal481 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3888 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal482 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3889 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal483 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3890 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal456 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3891 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal457 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3892 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal458 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3893 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal459 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3894 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal460 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3895 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal484 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3896 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal485 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3897 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal486 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3898 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal487 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3899 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal488 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3900 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3901 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3902 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal491 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3903 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal492 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3904 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal493 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3905 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal494 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3906 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal495 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3907 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal496 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3908 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal497 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3909 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal498 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3910 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal499 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3911 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal500 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3912 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal501 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3913 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal502 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3914 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal503 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3915 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal504 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3916 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal505 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3917 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal503 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3918 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal504 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3919 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal505 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3920 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal506 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3921 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal507 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3922 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal508 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3923 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal509 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3924 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal510 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3925 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal511 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3926 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal512 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3927 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal513 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3855 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3855 ]
  lea rdx, [ tmp3866 ]
  call __MOLD_VariantMove

  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  lea  rdx , [ tmp3862 ]
  lea  r8 , [ tmp3855 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3862 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3862 + Variant_t.value], 2

  lea  rcx, [ tmp3866 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3866 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3928 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal485 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3929 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal486 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3930 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal487 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3931 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal488 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3932 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3933 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3934 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal461 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3935 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal462 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3936 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3937 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal464 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3938 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3939 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal466 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3940 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal514 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3941 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal515 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3942 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal516 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3943 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal517 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3944 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal518 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3945 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal519 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3946 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal520 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3947 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal521 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3948 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal522 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3949 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal523 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3950 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal524 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3869 ]
  lea  rdx , [ __const3951 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx , [ tmp3866 ]
  lea  rdx , [ __literal525 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3855 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3855 ]
  lea rdx, [ tmp3866 ]
  call __MOLD_VariantMove

  lea  rcx , [ X64_OPCODES_MAP_FPU ]
  lea  rdx , [ tmp3862 ]
  lea  r8 , [ tmp3855 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx, [ arrayOfTests ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfTests ]
  lea  rdx , [ __const3952 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx, [ tester ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tester ]
  lea  rdx, [vtable_X64Tester]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tester ]
  lea  rax , [ tmp3862 ]
  call  __X64Tester_constructor$0

; 
; -----------------------------
; BEGIN: for keys undefined values testName
; 
  jmp l3954

l3953:

  lea  rcx, [ pathAsm ]
  call __MOLD_VariantDestroy
  lea  rcx , [ testName ]
  lea  rdx , [ __literal980 ]
  lea  r8 , [ pathAsm ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ pathBin ]
  call __MOLD_VariantDestroy
  lea  rcx , [ testName ]
  lea  rdx , [ __literal981 ]
  lea  r8 , [ pathBin ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tester ]
  lea rdx , [ pathAsm ]
  lea r8 , [ pathBin ]
  call  __X64Tester_compileSourceFile$2

  ret

l3954:

  lea  rcx , [ arrayOfTests ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ testName ]
  lea  r9 , [ l3953 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values testName
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ arrayOfTests ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tester ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3855 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator regName
  lea  rcx, [ tmp3862 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3866 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3870 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3872 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3873 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator testName
  lea  rcx, [ pathAsm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ pathBin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ X64_REGISTER_NAMES_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ PARSER_X64_ADDRESS_SIZE_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ PARSER_X64_DEFINE_DATA_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ X64_DATA_SIZE_ID ]
  call __MOLD_VariantDestroy
  lea  rcx, [ X64_OPCODES_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ X64_OPCODES_MAP_FPU ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret


  restore regId
  restore arrayOfTests
  restore tester
  restore tmp3855
  restore tmp3856
  restore regName
  restore tmp3862
  restore tmp3865
  restore tmp3866
  restore tmp3869
  restore tmp3870
  restore tmp3872
  restore tmp3873
  restore testName
  restore pathAsm
  restore pathBin


endOfCodeSection:
; ------------------------------------------------------------------------------
;                                 Data section
; ------------------------------------------------------------------------------
section '.data' data readable writeable
include 'x64\CommonData.asm'


; Global vars
; -----------
X64_REGISTER_NAMES_MAP  Variant_t 0, 0, 0
PARSER_X64_ADDRESS_SIZE_MAP  Variant_t 0, 0, 0
PARSER_X64_DEFINE_DATA_MAP  Variant_t 0, 0, 0
X64_RBP  dd 0
X64_RSP  dd 0
X64_AX  dd 0
X64_EAX  dd 0
X64_DATA_SIZE_ID  Variant_t 0, 0, 0
X64_OPCODES_MAP_FPU  Variant_t 0, 0, 0
X64_ST0  dd 0
X64_FSTSW_AX  dd 0
X64_OPCODES_MAP  Variant_t 0, 0, 0
X64_DX  dd 0
X64_INSW  dd 0
X64_OUTSW  dd 0
X64_MOVSW  dd 0
X64_MOVSQ  dd 0
X64_CMPSW  dd 0
X64_STOSW  dd 0
X64_LODSW  dd 0
X64_SCASW  dd 0
X64_RETFQ  dd 0
X64_CBW  dd 0
X64_CWD  dd 0
X64_IRETQ  dd 0
X64_CDQE  dd 0
X64_CQO  dd 0
X64_CMPSQ  dd 0
X64_STOSQ  dd 0
X64_LODSQ  dd 0
X64_SCASQ  dd 0
X64_POPFQ  dd 0
X64_PUSHFQ  dd 0
; ------------------------------------------------------------------------------
;                     Constant (read-only) data section
; ------------------------------------------------------------------------------
section '.rdata' data readable
  dq ?

; Encoded print formats
; ---------------------
__fmt0:
  db FMT_LOCAL_string
  dw - 152
  db FMT_TERMINATOR

__fmt1:
  db FMT_TEXT8, 3 ,  " OK"
  db FMT_TERMINATOR


; Constants
; ---------
; iter 0
X64_REGISTER_NAMES Variant_t VARIANT_ARRAY, 0, X64_REGISTER_NAMES_buffer
__literal0 Variant_t VARIANT_STRING, 0, __literal0_buffer
__literal1 Variant_t VARIANT_STRING, 0, __literal1_buffer
__literal2 Variant_t VARIANT_STRING, 0, __literal2_buffer
__literal3 Variant_t VARIANT_STRING, 0, __literal3_buffer
__literal4 Variant_t VARIANT_STRING, 0, __literal4_buffer
__literal5 Variant_t VARIANT_STRING, 0, __literal5_buffer
__literal6 Variant_t VARIANT_STRING, 0, __literal6_buffer
__literal7 Variant_t VARIANT_STRING, 0, __literal7_buffer
__literal8 Variant_t VARIANT_STRING, 0, __literal8_buffer
__literal9 Variant_t VARIANT_STRING, 0, __literal9_buffer
__literal10 Variant_t VARIANT_STRING, 0, __literal10_buffer
__literal11 Variant_t VARIANT_STRING, 0, __literal11_buffer
__literal12 Variant_t VARIANT_STRING, 0, __literal12_buffer
__literal13 Variant_t VARIANT_STRING, 0, __literal13_buffer
__literal14 Variant_t VARIANT_STRING, 0, __literal14_buffer
__literal15 Variant_t VARIANT_STRING, 0, __literal15_buffer
__literal16 Variant_t VARIANT_STRING, 0, __literal16_buffer
__literal17 Variant_t VARIANT_STRING, 0, __literal17_buffer
__literal18 Variant_t VARIANT_STRING, 0, __literal18_buffer
__literal28 Variant_t VARIANT_STRING, 0, __literal28_buffer
__literal29 Variant_t VARIANT_STRING, 0, __literal29_buffer
__literal30 Variant_t VARIANT_STRING, 0, __literal30_buffer
__literal31 Variant_t VARIANT_STRING, 0, __literal31_buffer
__literal32 Variant_t VARIANT_STRING, 0, __literal32_buffer
__literal33 Variant_t VARIANT_STRING, 0, __literal33_buffer
__literal34 Variant_t VARIANT_STRING, 0, __literal34_buffer
__literal35 Variant_t VARIANT_STRING, 0, __literal35_buffer
__literal36 Variant_t VARIANT_STRING, 0, __literal36_buffer
__literal37 Variant_t VARIANT_STRING, 0, __literal37_buffer
__literal38 Variant_t VARIANT_STRING, 0, __literal38_buffer
__literal39 Variant_t VARIANT_STRING, 0, __literal39_buffer
__literal40 Variant_t VARIANT_STRING, 0, __literal40_buffer
__literal41 Variant_t VARIANT_STRING, 0, __literal41_buffer
__literal42 Variant_t VARIANT_STRING, 0, __literal42_buffer
__literal43 Variant_t VARIANT_STRING, 0, __literal43_buffer
__literal44 Variant_t VARIANT_STRING, 0, __literal44_buffer
__literal45 Variant_t VARIANT_STRING, 0, __literal45_buffer
__literal46 Variant_t VARIANT_STRING, 0, __literal46_buffer
__literal47 Variant_t VARIANT_STRING, 0, __literal47_buffer
__literal48 Variant_t VARIANT_STRING, 0, __literal48_buffer
__literal49 Variant_t VARIANT_STRING, 0, __literal49_buffer
__literal50 Variant_t VARIANT_STRING, 0, __literal50_buffer
__literal51 Variant_t VARIANT_STRING, 0, __literal51_buffer
__literal52 Variant_t VARIANT_STRING, 0, __literal52_buffer
__literal53 Variant_t VARIANT_STRING, 0, __literal53_buffer
__literal54 Variant_t VARIANT_STRING, 0, __literal54_buffer
__literal55 Variant_t VARIANT_STRING, 0, __literal55_buffer
__literal56 Variant_t VARIANT_STRING, 0, __literal56_buffer
__literal57 Variant_t VARIANT_STRING, 0, __literal57_buffer
__literal58 Variant_t VARIANT_STRING, 0, __literal58_buffer
__literal59 Variant_t VARIANT_STRING, 0, __literal59_buffer
__literal60 Variant_t VARIANT_STRING, 0, __literal60_buffer
__literal61 Variant_t VARIANT_STRING, 0, __literal61_buffer
__literal62 Variant_t VARIANT_STRING, 0, __literal62_buffer
__literal63 Variant_t VARIANT_STRING, 0, __literal63_buffer
__literal64 Variant_t VARIANT_STRING, 0, __literal64_buffer
__literal65 Variant_t VARIANT_STRING, 0, __literal65_buffer
__literal66 Variant_t VARIANT_STRING, 0, __literal66_buffer
__literal67 Variant_t VARIANT_STRING, 0, __literal67_buffer
__literal68 Variant_t VARIANT_STRING, 0, __literal68_buffer
__literal69 Variant_t VARIANT_STRING, 0, __literal69_buffer
__literal70 Variant_t VARIANT_STRING, 0, __literal70_buffer
__literal71 Variant_t VARIANT_STRING, 0, __literal71_buffer
__literal72 Variant_t VARIANT_STRING, 0, __literal72_buffer
__literal73 Variant_t VARIANT_STRING, 0, __literal73_buffer
__literal74 Variant_t VARIANT_STRING, 0, __literal74_buffer
__literal75 Variant_t VARIANT_STRING, 0, __literal75_buffer
__literal76 Variant_t VARIANT_STRING, 0, __literal76_buffer
__literal77 Variant_t VARIANT_STRING, 0, __literal77_buffer
__literal78 Variant_t VARIANT_STRING, 0, __literal78_buffer
__literal79 Variant_t VARIANT_STRING, 0, __literal79_buffer
__literal80 Variant_t VARIANT_STRING, 0, __literal80_buffer
__literal81 Variant_t VARIANT_STRING, 0, __literal81_buffer
__literal82 Variant_t VARIANT_STRING, 0, __literal82_buffer
__literal142 Variant_t VARIANT_STRING, 0, __literal142_buffer
__literal143 Variant_t VARIANT_STRING, 0, __literal143_buffer
__literal150 Variant_t VARIANT_STRING, 0, __literal150_buffer
__literal151 Variant_t VARIANT_STRING, 0, __literal151_buffer
__literal152 Variant_t VARIANT_STRING, 0, __literal152_buffer
__literal153 Variant_t VARIANT_STRING, 0, __literal153_buffer
__literal154 Variant_t VARIANT_STRING, 0, __literal154_buffer
__literal155 Variant_t VARIANT_STRING, 0, __literal155_buffer
__literal156 Variant_t VARIANT_STRING, 0, __literal156_buffer
__literal157 Variant_t VARIANT_STRING, 0, __literal157_buffer
__literal158 Variant_t VARIANT_STRING, 0, __literal158_buffer
__literal159 Variant_t VARIANT_STRING, 0, __literal159_buffer
__literal160 Variant_t VARIANT_STRING, 0, __literal160_buffer
__literal161 Variant_t VARIANT_STRING, 0, __literal161_buffer
__literal162 Variant_t VARIANT_STRING, 0, __literal162_buffer
__literal163 Variant_t VARIANT_STRING, 0, __literal163_buffer
__literal164 Variant_t VARIANT_STRING, 0, __literal164_buffer
__literal165 Variant_t VARIANT_STRING, 0, __literal165_buffer
__literal335 Variant_t VARIANT_STRING, 0, __literal335_buffer
__literal456 Variant_t VARIANT_STRING, 0, __literal456_buffer
__literal457 Variant_t VARIANT_STRING, 0, __literal457_buffer
__literal458 Variant_t VARIANT_STRING, 0, __literal458_buffer
__literal459 Variant_t VARIANT_STRING, 0, __literal459_buffer
__literal460 Variant_t VARIANT_STRING, 0, __literal460_buffer
__literal461 Variant_t VARIANT_STRING, 0, __literal461_buffer
__literal462 Variant_t VARIANT_STRING, 0, __literal462_buffer
__literal463 Variant_t VARIANT_STRING, 0, __literal463_buffer
__literal464 Variant_t VARIANT_STRING, 0, __literal464_buffer
__literal465 Variant_t VARIANT_STRING, 0, __literal465_buffer
__literal466 Variant_t VARIANT_STRING, 0, __literal466_buffer
__literal467 Variant_t VARIANT_STRING, 0, __literal467_buffer
__literal468 Variant_t VARIANT_STRING, 0, __literal468_buffer
__literal469 Variant_t VARIANT_STRING, 0, __literal469_buffer
__literal470 Variant_t VARIANT_STRING, 0, __literal470_buffer
__literal471 Variant_t VARIANT_STRING, 0, __literal471_buffer
__literal472 Variant_t VARIANT_STRING, 0, __literal472_buffer
__literal473 Variant_t VARIANT_STRING, 0, __literal473_buffer
__literal474 Variant_t VARIANT_STRING, 0, __literal474_buffer
__literal475 Variant_t VARIANT_STRING, 0, __literal475_buffer
__literal476 Variant_t VARIANT_STRING, 0, __literal476_buffer
__literal477 Variant_t VARIANT_STRING, 0, __literal477_buffer
__literal478 Variant_t VARIANT_STRING, 0, __literal478_buffer
__literal479 Variant_t VARIANT_STRING, 0, __literal479_buffer
__literal480 Variant_t VARIANT_STRING, 0, __literal480_buffer
__literal481 Variant_t VARIANT_STRING, 0, __literal481_buffer
__literal482 Variant_t VARIANT_STRING, 0, __literal482_buffer
__literal483 Variant_t VARIANT_STRING, 0, __literal483_buffer
__literal484 Variant_t VARIANT_STRING, 0, __literal484_buffer
__literal485 Variant_t VARIANT_STRING, 0, __literal485_buffer
__literal486 Variant_t VARIANT_STRING, 0, __literal486_buffer
__literal487 Variant_t VARIANT_STRING, 0, __literal487_buffer
__literal488 Variant_t VARIANT_STRING, 0, __literal488_buffer
__literal489 Variant_t VARIANT_STRING, 0, __literal489_buffer
__literal490 Variant_t VARIANT_STRING, 0, __literal490_buffer
__literal491 Variant_t VARIANT_STRING, 0, __literal491_buffer
__literal492 Variant_t VARIANT_STRING, 0, __literal492_buffer
__literal493 Variant_t VARIANT_STRING, 0, __literal493_buffer
__literal494 Variant_t VARIANT_STRING, 0, __literal494_buffer
__literal495 Variant_t VARIANT_STRING, 0, __literal495_buffer
__literal496 Variant_t VARIANT_STRING, 0, __literal496_buffer
__literal497 Variant_t VARIANT_STRING, 0, __literal497_buffer
__literal498 Variant_t VARIANT_STRING, 0, __literal498_buffer
__literal499 Variant_t VARIANT_STRING, 0, __literal499_buffer
__literal500 Variant_t VARIANT_STRING, 0, __literal500_buffer
__literal501 Variant_t VARIANT_STRING, 0, __literal501_buffer
__literal502 Variant_t VARIANT_STRING, 0, __literal502_buffer
__literal503 Variant_t VARIANT_STRING, 0, __literal503_buffer
__literal504 Variant_t VARIANT_STRING, 0, __literal504_buffer
__literal505 Variant_t VARIANT_STRING, 0, __literal505_buffer
__literal506 Variant_t VARIANT_STRING, 0, __literal506_buffer
__literal507 Variant_t VARIANT_STRING, 0, __literal507_buffer
__literal508 Variant_t VARIANT_STRING, 0, __literal508_buffer
__literal509 Variant_t VARIANT_STRING, 0, __literal509_buffer
__literal510 Variant_t VARIANT_STRING, 0, __literal510_buffer
__literal511 Variant_t VARIANT_STRING, 0, __literal511_buffer
__literal512 Variant_t VARIANT_STRING, 0, __literal512_buffer
__literal513 Variant_t VARIANT_STRING, 0, __literal513_buffer
__literal514 Variant_t VARIANT_STRING, 0, __literal514_buffer
__literal515 Variant_t VARIANT_STRING, 0, __literal515_buffer
__literal516 Variant_t VARIANT_STRING, 0, __literal516_buffer
__literal517 Variant_t VARIANT_STRING, 0, __literal517_buffer
__literal518 Variant_t VARIANT_STRING, 0, __literal518_buffer
__literal519 Variant_t VARIANT_STRING, 0, __literal519_buffer
__literal520 Variant_t VARIANT_STRING, 0, __literal520_buffer
__literal521 Variant_t VARIANT_STRING, 0, __literal521_buffer
__literal522 Variant_t VARIANT_STRING, 0, __literal522_buffer
__literal523 Variant_t VARIANT_STRING, 0, __literal523_buffer
__literal524 Variant_t VARIANT_STRING, 0, __literal524_buffer
__literal525 Variant_t VARIANT_STRING, 0, __literal525_buffer
__literal526 Variant_t VARIANT_STRING, 0, __literal526_buffer
__literal527 Variant_t VARIANT_STRING, 0, __literal527_buffer
__literal528 Variant_t VARIANT_STRING, 0, __literal528_buffer
__literal529 Variant_t VARIANT_STRING, 0, __literal529_buffer
__literal530 Variant_t VARIANT_STRING, 0, __literal530_buffer
__literal531 Variant_t VARIANT_STRING, 0, __literal531_buffer
__literal532 Variant_t VARIANT_STRING, 0, __literal532_buffer
__literal533 Variant_t VARIANT_STRING, 0, __literal533_buffer
__literal534 Variant_t VARIANT_STRING, 0, __literal534_buffer
__literal535 Variant_t VARIANT_STRING, 0, __literal535_buffer
__literal536 Variant_t VARIANT_STRING, 0, __literal536_buffer
__literal537 Variant_t VARIANT_STRING, 0, __literal537_buffer
__literal538 Variant_t VARIANT_STRING, 0, __literal538_buffer
__literal539 Variant_t VARIANT_STRING, 0, __literal539_buffer
__literal540 Variant_t VARIANT_STRING, 0, __literal540_buffer
__literal541 Variant_t VARIANT_STRING, 0, __literal541_buffer
__literal542 Variant_t VARIANT_STRING, 0, __literal542_buffer
__literal543 Variant_t VARIANT_STRING, 0, __literal543_buffer
__literal544 Variant_t VARIANT_STRING, 0, __literal544_buffer
__literal545 Variant_t VARIANT_STRING, 0, __literal545_buffer
__literal546 Variant_t VARIANT_STRING, 0, __literal546_buffer
__literal547 Variant_t VARIANT_STRING, 0, __literal547_buffer
__literal548 Variant_t VARIANT_STRING, 0, __literal548_buffer
__literal549 Variant_t VARIANT_STRING, 0, __literal549_buffer
__literal550 Variant_t VARIANT_STRING, 0, __literal550_buffer
__literal551 Variant_t VARIANT_STRING, 0, __literal551_buffer
__literal552 Variant_t VARIANT_STRING, 0, __literal552_buffer
__literal553 Variant_t VARIANT_STRING, 0, __literal553_buffer
__literal554 Variant_t VARIANT_STRING, 0, __literal554_buffer
__literal555 Variant_t VARIANT_STRING, 0, __literal555_buffer
__literal556 Variant_t VARIANT_STRING, 0, __literal556_buffer
__literal557 Variant_t VARIANT_STRING, 0, __literal557_buffer
__literal558 Variant_t VARIANT_STRING, 0, __literal558_buffer
__literal559 Variant_t VARIANT_STRING, 0, __literal559_buffer
__literal560 Variant_t VARIANT_STRING, 0, __literal560_buffer
__literal561 Variant_t VARIANT_STRING, 0, __literal561_buffer
__literal562 Variant_t VARIANT_STRING, 0, __literal562_buffer
__literal563 Variant_t VARIANT_STRING, 0, __literal563_buffer
__literal564 Variant_t VARIANT_STRING, 0, __literal564_buffer
__literal565 Variant_t VARIANT_STRING, 0, __literal565_buffer
__literal566 Variant_t VARIANT_STRING, 0, __literal566_buffer
__literal567 Variant_t VARIANT_STRING, 0, __literal567_buffer
__literal568 Variant_t VARIANT_STRING, 0, __literal568_buffer
__literal972 Variant_t VARIANT_STRING, 0, __literal972_buffer
__literal973 Variant_t VARIANT_STRING, 0, __literal973_buffer
__literal974 Variant_t VARIANT_STRING, 0, __literal974_buffer
__literal975 Variant_t VARIANT_STRING, 0, __literal975_buffer
__literal976 Variant_t VARIANT_STRING, 0, __literal976_buffer
__literal977 Variant_t VARIANT_STRING, 0, __literal977_buffer
__literal978 Variant_t VARIANT_STRING, 0, __literal978_buffer
__literal980 Variant_t VARIANT_STRING, 0, __literal980_buffer
__literal981 Variant_t VARIANT_STRING, 0, __literal981_buffer
__const1094 Variant_t VARIANT_ARRAY, 0, __const1094_buffer
__const1095 Variant_t VARIANT_ARRAY, 0, __const1095_buffer
__const1141 Variant_t VARIANT_ARRAY, 0, __const1141_buffer
__const1142 Variant_t VARIANT_ARRAY, 0, __const1142_buffer
; Reuse already emitted buffer
__const1195 Variant_t VARIANT_ARRAY, 0, __const1141_buffer
; Reuse already emitted buffer
__const1196 Variant_t VARIANT_ARRAY, 0, __const1142_buffer
__const1226 Variant_t VARIANT_ARRAY, 0, __const1226_buffer
__const1227 Variant_t VARIANT_ARRAY, 0, __const1227_buffer
__const1270 Variant_t VARIANT_ARRAY, 0, __const1270_buffer
__const1271 Variant_t VARIANT_ARRAY, 0, __const1271_buffer
; Reuse already emitted buffer
__const1292 Variant_t VARIANT_ARRAY, 0, __const1270_buffer
; Reuse already emitted buffer
__const1293 Variant_t VARIANT_ARRAY, 0, __const1271_buffer
; Reuse already emitted buffer
__const1296 Variant_t VARIANT_ARRAY, 0, __const1141_buffer
; Reuse already emitted buffer
__const1297 Variant_t VARIANT_ARRAY, 0, __const1142_buffer
__const1298 Variant_t VARIANT_ARRAY, 0, __const1298_buffer
__const1299 Variant_t VARIANT_ARRAY, 0, __const1299_buffer
__const3857 Variant_t VARIANT_ARRAY, 0, __const3857_buffer
__const3858 Variant_t VARIANT_ARRAY, 0, __const3858_buffer
__const3859 Variant_t VARIANT_ARRAY, 0, __const3859_buffer
__const3860 Variant_t VARIANT_ARRAY, 0, __const3860_buffer
__const3861 Variant_t VARIANT_ARRAY, 0, __const3861_buffer
__const3863 Variant_t VARIANT_ARRAY, 0, __const3863_buffer
__const3864 Variant_t VARIANT_ARRAY, 0, __const3864_buffer
__const3867 Variant_t VARIANT_ARRAY, 0, __const3867_buffer
__const3868 Variant_t VARIANT_ARRAY, 0, __const3868_buffer
__const3871 Variant_t VARIANT_ARRAY, 0, __const3871_buffer
__const3874 Variant_t VARIANT_ARRAY, 0, __const3874_buffer
__const3875 Variant_t VARIANT_ARRAY, 0, __const3875_buffer
__const3876 Variant_t VARIANT_ARRAY, 0, __const3876_buffer
__const3877 Variant_t VARIANT_ARRAY, 0, __const3877_buffer
__const3878 Variant_t VARIANT_ARRAY, 0, __const3878_buffer
__const3879 Variant_t VARIANT_ARRAY, 0, __const3879_buffer
__const3880 Variant_t VARIANT_ARRAY, 0, __const3880_buffer
__const3881 Variant_t VARIANT_ARRAY, 0, __const3881_buffer
__const3882 Variant_t VARIANT_ARRAY, 0, __const3882_buffer
__const3883 Variant_t VARIANT_ARRAY, 0, __const3883_buffer
__const3884 Variant_t VARIANT_ARRAY, 0, __const3884_buffer
__const3885 Variant_t VARIANT_ARRAY, 0, __const3885_buffer
__const3886 Variant_t VARIANT_ARRAY, 0, __const3886_buffer
__const3887 Variant_t VARIANT_ARRAY, 0, __const3887_buffer
__const3888 Variant_t VARIANT_ARRAY, 0, __const3888_buffer
__const3889 Variant_t VARIANT_ARRAY, 0, __const3889_buffer
__const3890 Variant_t VARIANT_ARRAY, 0, __const3890_buffer
__const3891 Variant_t VARIANT_ARRAY, 0, __const3891_buffer
__const3892 Variant_t VARIANT_ARRAY, 0, __const3892_buffer
__const3893 Variant_t VARIANT_ARRAY, 0, __const3893_buffer
__const3894 Variant_t VARIANT_ARRAY, 0, __const3894_buffer
__const3895 Variant_t VARIANT_ARRAY, 0, __const3895_buffer
__const3896 Variant_t VARIANT_ARRAY, 0, __const3896_buffer
__const3897 Variant_t VARIANT_ARRAY, 0, __const3897_buffer
__const3898 Variant_t VARIANT_ARRAY, 0, __const3898_buffer
__const3899 Variant_t VARIANT_ARRAY, 0, __const3899_buffer
__const3900 Variant_t VARIANT_ARRAY, 0, __const3900_buffer
__const3901 Variant_t VARIANT_ARRAY, 0, __const3901_buffer
__const3902 Variant_t VARIANT_ARRAY, 0, __const3902_buffer
__const3903 Variant_t VARIANT_ARRAY, 0, __const3903_buffer
__const3904 Variant_t VARIANT_ARRAY, 0, __const3904_buffer
__const3905 Variant_t VARIANT_ARRAY, 0, __const3905_buffer
__const3906 Variant_t VARIANT_ARRAY, 0, __const3906_buffer
__const3907 Variant_t VARIANT_ARRAY, 0, __const3907_buffer
; Reuse already emitted buffer
__const3908 Variant_t VARIANT_ARRAY, 0, __const3907_buffer
__const3909 Variant_t VARIANT_ARRAY, 0, __const3909_buffer
__const3910 Variant_t VARIANT_ARRAY, 0, __const3910_buffer
; Reuse already emitted buffer
__const3911 Variant_t VARIANT_ARRAY, 0, __const3910_buffer
__const3912 Variant_t VARIANT_ARRAY, 0, __const3912_buffer
__const3913 Variant_t VARIANT_ARRAY, 0, __const3913_buffer
__const3914 Variant_t VARIANT_ARRAY, 0, __const3914_buffer
__const3915 Variant_t VARIANT_ARRAY, 0, __const3915_buffer
__const3916 Variant_t VARIANT_ARRAY, 0, __const3916_buffer
; Reuse already emitted buffer
__const3917 Variant_t VARIANT_ARRAY, 0, __const3914_buffer
; Reuse already emitted buffer
__const3918 Variant_t VARIANT_ARRAY, 0, __const3915_buffer
; Reuse already emitted buffer
__const3919 Variant_t VARIANT_ARRAY, 0, __const3916_buffer
__const3920 Variant_t VARIANT_ARRAY, 0, __const3920_buffer
; Reuse already emitted buffer
__const3921 Variant_t VARIANT_ARRAY, 0, __const3920_buffer
__const3922 Variant_t VARIANT_ARRAY, 0, __const3922_buffer
; Reuse already emitted buffer
__const3923 Variant_t VARIANT_ARRAY, 0, __const3922_buffer
__const3924 Variant_t VARIANT_ARRAY, 0, __const3924_buffer
__const3925 Variant_t VARIANT_ARRAY, 0, __const3925_buffer
__const3926 Variant_t VARIANT_ARRAY, 0, __const3926_buffer
__const3927 Variant_t VARIANT_ARRAY, 0, __const3927_buffer
__const3928 Variant_t VARIANT_ARRAY, 0, __const3928_buffer
__const3929 Variant_t VARIANT_ARRAY, 0, __const3929_buffer
__const3930 Variant_t VARIANT_ARRAY, 0, __const3930_buffer
__const3931 Variant_t VARIANT_ARRAY, 0, __const3931_buffer
__const3932 Variant_t VARIANT_ARRAY, 0, __const3932_buffer
__const3933 Variant_t VARIANT_ARRAY, 0, __const3933_buffer
__const3934 Variant_t VARIANT_ARRAY, 0, __const3934_buffer
__const3935 Variant_t VARIANT_ARRAY, 0, __const3935_buffer
__const3936 Variant_t VARIANT_ARRAY, 0, __const3936_buffer
__const3937 Variant_t VARIANT_ARRAY, 0, __const3937_buffer
__const3938 Variant_t VARIANT_ARRAY, 0, __const3938_buffer
__const3939 Variant_t VARIANT_ARRAY, 0, __const3939_buffer
__const3940 Variant_t VARIANT_ARRAY, 0, __const3940_buffer
__const3941 Variant_t VARIANT_ARRAY, 0, __const3941_buffer
__const3942 Variant_t VARIANT_ARRAY, 0, __const3942_buffer
__const3943 Variant_t VARIANT_ARRAY, 0, __const3943_buffer
__const3944 Variant_t VARIANT_ARRAY, 0, __const3944_buffer
__const3945 Variant_t VARIANT_ARRAY, 0, __const3945_buffer
__const3946 Variant_t VARIANT_ARRAY, 0, __const3946_buffer
__const3947 Variant_t VARIANT_ARRAY, 0, __const3947_buffer
__const3948 Variant_t VARIANT_ARRAY, 0, __const3948_buffer
__const3949 Variant_t VARIANT_ARRAY, 0, __const3949_buffer
__const3950 Variant_t VARIANT_ARRAY, 0, __const3950_buffer
__const3951 Variant_t VARIANT_ARRAY, 0, __const3951_buffer
__const3952 Variant_t VARIANT_ARRAY, 0, __const3952_buffer
; iter 1
X64_REGISTER_NAMES_buffer Buffer_t 1280 , -1, 0, X64_REGISTER_NAMES_bufferBytes
__literal0_buffer Buffer_t 4 , -1, 0, __literal0_bufferBytes
__literal1_buffer Buffer_t 3 , -1, 0, __literal1_bufferBytes
__literal2_buffer Buffer_t 7 , -1, 0, __literal2_bufferBytes
__literal3_buffer Buffer_t 13 , -1, 0, __literal3_bufferBytes
__literal4_buffer Buffer_t 13 , -1, 0, __literal4_bufferBytes
__literal5_buffer Buffer_t 2 , -1, 0, __literal5_bufferBytes
__literal6_buffer Buffer_t 2 , -1, 0, __literal6_bufferBytes
__literal7_buffer Buffer_t 8 , -1, 0, __literal7_bufferBytes
__literal8_buffer Buffer_t 5 , -1, 0, __literal8_bufferBytes
__literal9_buffer Buffer_t 3 , -1, 0, __literal9_bufferBytes
__literal10_buffer Buffer_t 2 , -1, 0, __literal10_bufferBytes
__literal11_buffer Buffer_t 18 , -1, 0, __literal11_bufferBytes
__literal12_buffer Buffer_t 8 , -1, 0, __literal12_bufferBytes
__literal13_buffer Buffer_t 27 , -1, 0, __literal13_bufferBytes
__literal14_buffer Buffer_t 38 , -1, 0, __literal14_bufferBytes
__literal15_buffer Buffer_t 54 , -1, 0, __literal15_bufferBytes
__literal16_buffer Buffer_t 17 , -1, 0, __literal16_bufferBytes
__literal17_buffer Buffer_t 1 , -1, 0, __literal17_bufferBytes
__literal18_buffer Buffer_t 2 , -1, 0, __literal18_bufferBytes
__literal28_buffer Buffer_t 13 , -1, 0, __literal28_bufferBytes
__literal29_buffer Buffer_t 10 , -1, 0, __literal29_bufferBytes
__literal30_buffer Buffer_t 21 , -1, 0, __literal30_bufferBytes
__literal31_buffer Buffer_t 17 , -1, 0, __literal31_bufferBytes
__literal32_buffer Buffer_t 2 , -1, 0, __literal32_bufferBytes
__literal33_buffer Buffer_t 5 , -1, 0, __literal33_bufferBytes
__literal34_buffer Buffer_t 6 , -1, 0, __literal34_bufferBytes
__literal35_buffer Buffer_t 5 , -1, 0, __literal35_bufferBytes
__literal36_buffer Buffer_t 9 , -1, 0, __literal36_bufferBytes
__literal37_buffer Buffer_t 7 , -1, 0, __literal37_bufferBytes
__literal38_buffer Buffer_t 15 , -1, 0, __literal38_bufferBytes
__literal39_buffer Buffer_t 2 , -1, 0, __literal39_bufferBytes
__literal40_buffer Buffer_t 2 , -1, 0, __literal40_bufferBytes
__literal41_buffer Buffer_t 2 , -1, 0, __literal41_bufferBytes
__literal42_buffer Buffer_t 6 , -1, 0, __literal42_bufferBytes
__literal43_buffer Buffer_t 25 , -1, 0, __literal43_bufferBytes
__literal44_buffer Buffer_t 2 , -1, 0, __literal44_bufferBytes
__literal45_buffer Buffer_t 2 , -1, 0, __literal45_bufferBytes
__literal46_buffer Buffer_t 2 , -1, 0, __literal46_bufferBytes
__literal47_buffer Buffer_t 2 , -1, 0, __literal47_bufferBytes
__literal48_buffer Buffer_t 16 , -1, 0, __literal48_bufferBytes
__literal49_buffer Buffer_t 5 , -1, 0, __literal49_bufferBytes
__literal50_buffer Buffer_t 6 , -1, 0, __literal50_bufferBytes
__literal51_buffer Buffer_t 5 , -1, 0, __literal51_bufferBytes
__literal52_buffer Buffer_t 16 , -1, 0, __literal52_bufferBytes
__literal53_buffer Buffer_t 4 , -1, 0, __literal53_bufferBytes
__literal54_buffer Buffer_t 20 , -1, 0, __literal54_bufferBytes
__literal55_buffer Buffer_t 4 , -1, 0, __literal55_bufferBytes
__literal56_buffer Buffer_t 5 , -1, 0, __literal56_bufferBytes
__literal57_buffer Buffer_t 4 , -1, 0, __literal57_bufferBytes
__literal58_buffer Buffer_t 9 , -1, 0, __literal58_bufferBytes
__literal59_buffer Buffer_t 9 , -1, 0, __literal59_bufferBytes
__literal60_buffer Buffer_t 5 , -1, 0, __literal60_bufferBytes
__literal61_buffer Buffer_t 9 , -1, 0, __literal61_bufferBytes
__literal62_buffer Buffer_t 3 , -1, 0, __literal62_bufferBytes
__literal63_buffer Buffer_t 9 , -1, 0, __literal63_bufferBytes
__literal64_buffer Buffer_t 19 , -1, 0, __literal64_bufferBytes
__literal65_buffer Buffer_t 17 , -1, 0, __literal65_bufferBytes
__literal66_buffer Buffer_t 6 , -1, 0, __literal66_bufferBytes
__literal67_buffer Buffer_t 4 , -1, 0, __literal67_bufferBytes
__literal68_buffer Buffer_t 37 , -1, 0, __literal68_bufferBytes
__literal69_buffer Buffer_t 12 , -1, 0, __literal69_bufferBytes
__literal70_buffer Buffer_t 2 , -1, 0, __literal70_bufferBytes
__literal71_buffer Buffer_t 16 , -1, 0, __literal71_bufferBytes
__literal72_buffer Buffer_t 2 , -1, 0, __literal72_bufferBytes
__literal73_buffer Buffer_t 16 , -1, 0, __literal73_bufferBytes
__literal74_buffer Buffer_t 5 , -1, 0, __literal74_bufferBytes
__literal75_buffer Buffer_t 2 , -1, 0, __literal75_bufferBytes
__literal76_buffer Buffer_t 4 , -1, 0, __literal76_bufferBytes
__literal77_buffer Buffer_t 6 , -1, 0, __literal77_bufferBytes
__literal78_buffer Buffer_t 8 , -1, 0, __literal78_bufferBytes
__literal79_buffer Buffer_t 2 , -1, 0, __literal79_bufferBytes
__literal80_buffer Buffer_t 7 , -1, 0, __literal80_bufferBytes
__literal81_buffer Buffer_t 17 , -1, 0, __literal81_bufferBytes
__literal82_buffer Buffer_t 51 , -1, 0, __literal82_bufferBytes
__literal142_buffer Buffer_t 5 , -1, 0, __literal142_bufferBytes
__literal143_buffer Buffer_t 6 , -1, 0, __literal143_bufferBytes
__literal150_buffer Buffer_t 6 , -1, 0, __literal150_bufferBytes
__literal151_buffer Buffer_t 6 , -1, 0, __literal151_bufferBytes
__literal152_buffer Buffer_t 6 , -1, 0, __literal152_bufferBytes
__literal153_buffer Buffer_t 6 , -1, 0, __literal153_bufferBytes
__literal154_buffer Buffer_t 6 , -1, 0, __literal154_bufferBytes
__literal155_buffer Buffer_t 6 , -1, 0, __literal155_bufferBytes
__literal156_buffer Buffer_t 6 , -1, 0, __literal156_bufferBytes
__literal157_buffer Buffer_t 6 , -1, 0, __literal157_bufferBytes
__literal158_buffer Buffer_t 6 , -1, 0, __literal158_bufferBytes
__literal159_buffer Buffer_t 6 , -1, 0, __literal159_bufferBytes
__literal160_buffer Buffer_t 5 , -1, 0, __literal160_bufferBytes
__literal161_buffer Buffer_t 6 , -1, 0, __literal161_bufferBytes
__literal162_buffer Buffer_t 4 , -1, 0, __literal162_bufferBytes
__literal163_buffer Buffer_t 5 , -1, 0, __literal163_bufferBytes
__literal164_buffer Buffer_t 4 , -1, 0, __literal164_bufferBytes
__literal165_buffer Buffer_t 4 , -1, 0, __literal165_bufferBytes
__literal335_buffer Buffer_t 10 , -1, 0, __literal335_bufferBytes
__literal456_buffer Buffer_t 5 , -1, 0, __literal456_bufferBytes
__literal457_buffer Buffer_t 6 , -1, 0, __literal457_bufferBytes
__literal458_buffer Buffer_t 6 , -1, 0, __literal458_bufferBytes
__literal459_buffer Buffer_t 7 , -1, 0, __literal459_bufferBytes
__literal460_buffer Buffer_t 5 , -1, 0, __literal460_bufferBytes
__literal461_buffer Buffer_t 6 , -1, 0, __literal461_bufferBytes
__literal462_buffer Buffer_t 6 , -1, 0, __literal462_bufferBytes
__literal463_buffer Buffer_t 7 , -1, 0, __literal463_bufferBytes
__literal464_buffer Buffer_t 6 , -1, 0, __literal464_bufferBytes
__literal465_buffer Buffer_t 7 , -1, 0, __literal465_bufferBytes
__literal466_buffer Buffer_t 6 , -1, 0, __literal466_bufferBytes
__literal467_buffer Buffer_t 5 , -1, 0, __literal467_bufferBytes
__literal468_buffer Buffer_t 7 , -1, 0, __literal468_bufferBytes
__literal469_buffer Buffer_t 5 , -1, 0, __literal469_bufferBytes
__literal470_buffer Buffer_t 6 , -1, 0, __literal470_bufferBytes
__literal471_buffer Buffer_t 5 , -1, 0, __literal471_bufferBytes
__literal472_buffer Buffer_t 6 , -1, 0, __literal472_bufferBytes
__literal473_buffer Buffer_t 6 , -1, 0, __literal473_bufferBytes
__literal474_buffer Buffer_t 6 , -1, 0, __literal474_bufferBytes
__literal475_buffer Buffer_t 6 , -1, 0, __literal475_bufferBytes
__literal476_buffer Buffer_t 7 , -1, 0, __literal476_bufferBytes
__literal477_buffer Buffer_t 6 , -1, 0, __literal477_bufferBytes
__literal478_buffer Buffer_t 7 , -1, 0, __literal478_bufferBytes
__literal479_buffer Buffer_t 6 , -1, 0, __literal479_bufferBytes
__literal480_buffer Buffer_t 7 , -1, 0, __literal480_bufferBytes
__literal481_buffer Buffer_t 4 , -1, 0, __literal481_bufferBytes
__literal482_buffer Buffer_t 4 , -1, 0, __literal482_bufferBytes
__literal483_buffer Buffer_t 5 , -1, 0, __literal483_bufferBytes
__literal484_buffer Buffer_t 6 , -1, 0, __literal484_bufferBytes
__literal485_buffer Buffer_t 5 , -1, 0, __literal485_bufferBytes
__literal486_buffer Buffer_t 5 , -1, 0, __literal486_bufferBytes
__literal487_buffer Buffer_t 5 , -1, 0, __literal487_bufferBytes
__literal488_buffer Buffer_t 6 , -1, 0, __literal488_bufferBytes
__literal489_buffer Buffer_t 5 , -1, 0, __literal489_bufferBytes
__literal490_buffer Buffer_t 6 , -1, 0, __literal490_bufferBytes
__literal491_buffer Buffer_t 7 , -1, 0, __literal491_bufferBytes
__literal492_buffer Buffer_t 6 , -1, 0, __literal492_bufferBytes
__literal493_buffer Buffer_t 6 , -1, 0, __literal493_bufferBytes
__literal494_buffer Buffer_t 7 , -1, 0, __literal494_bufferBytes
__literal495_buffer Buffer_t 6 , -1, 0, __literal495_bufferBytes
__literal496_buffer Buffer_t 7 , -1, 0, __literal496_bufferBytes
__literal497_buffer Buffer_t 8 , -1, 0, __literal497_bufferBytes
__literal498_buffer Buffer_t 8 , -1, 0, __literal498_bufferBytes
__literal499_buffer Buffer_t 7 , -1, 0, __literal499_bufferBytes
__literal500_buffer Buffer_t 8 , -1, 0, __literal500_bufferBytes
__literal501_buffer Buffer_t 7 , -1, 0, __literal501_bufferBytes
__literal502_buffer Buffer_t 8 , -1, 0, __literal502_bufferBytes
__literal503_buffer Buffer_t 9 , -1, 0, __literal503_bufferBytes
__literal504_buffer Buffer_t 8 , -1, 0, __literal504_bufferBytes
__literal505_buffer Buffer_t 8 , -1, 0, __literal505_bufferBytes
__literal506_buffer Buffer_t 7 , -1, 0, __literal506_bufferBytes
__literal507_buffer Buffer_t 8 , -1, 0, __literal507_bufferBytes
__literal508_buffer Buffer_t 6 , -1, 0, __literal508_bufferBytes
__literal509_buffer Buffer_t 7 , -1, 0, __literal509_bufferBytes
__literal510_buffer Buffer_t 8 , -1, 0, __literal510_bufferBytes
__literal511_buffer Buffer_t 7 , -1, 0, __literal511_bufferBytes
__literal512_buffer Buffer_t 7 , -1, 0, __literal512_bufferBytes
__literal513_buffer Buffer_t 8 , -1, 0, __literal513_bufferBytes
__literal514_buffer Buffer_t 7 , -1, 0, __literal514_bufferBytes
__literal515_buffer Buffer_t 7 , -1, 0, __literal515_bufferBytes
__literal516_buffer Buffer_t 8 , -1, 0, __literal516_bufferBytes
__literal517_buffer Buffer_t 7 , -1, 0, __literal517_bufferBytes
__literal518_buffer Buffer_t 8 , -1, 0, __literal518_bufferBytes
__literal519_buffer Buffer_t 8 , -1, 0, __literal519_bufferBytes
__literal520_buffer Buffer_t 9 , -1, 0, __literal520_bufferBytes
__literal521_buffer Buffer_t 8 , -1, 0, __literal521_bufferBytes
__literal522_buffer Buffer_t 6 , -1, 0, __literal522_bufferBytes
__literal523_buffer Buffer_t 7 , -1, 0, __literal523_bufferBytes
__literal524_buffer Buffer_t 7 , -1, 0, __literal524_bufferBytes
__literal525_buffer Buffer_t 8 , -1, 0, __literal525_bufferBytes
__literal526_buffer Buffer_t 20 , -1, 0, __literal526_bufferBytes
__literal527_buffer Buffer_t 18 , -1, 0, __literal527_bufferBytes
__literal528_buffer Buffer_t 27 , -1, 0, __literal528_bufferBytes
__literal529_buffer Buffer_t 34 , -1, 0, __literal529_bufferBytes
__literal530_buffer Buffer_t 39 , -1, 0, __literal530_bufferBytes
__literal531_buffer Buffer_t 40 , -1, 0, __literal531_bufferBytes
__literal532_buffer Buffer_t 52 , -1, 0, __literal532_bufferBytes
__literal533_buffer Buffer_t 59 , -1, 0, __literal533_bufferBytes
__literal534_buffer Buffer_t 37 , -1, 0, __literal534_bufferBytes
__literal535_buffer Buffer_t 35 , -1, 0, __literal535_bufferBytes
__literal536_buffer Buffer_t 37 , -1, 0, __literal536_bufferBytes
__literal537_buffer Buffer_t 34 , -1, 0, __literal537_bufferBytes
__literal538_buffer Buffer_t 19 , -1, 0, __literal538_bufferBytes
__literal539_buffer Buffer_t 32 , -1, 0, __literal539_bufferBytes
__literal540_buffer Buffer_t 44 , -1, 0, __literal540_bufferBytes
__literal541_buffer Buffer_t 28 , -1, 0, __literal541_bufferBytes
__literal542_buffer Buffer_t 30 , -1, 0, __literal542_bufferBytes
__literal543_buffer Buffer_t 28 , -1, 0, __literal543_bufferBytes
__literal544_buffer Buffer_t 70 , -1, 0, __literal544_bufferBytes
__literal545_buffer Buffer_t 44 , -1, 0, __literal545_bufferBytes
__literal546_buffer Buffer_t 43 , -1, 0, __literal546_bufferBytes
__literal547_buffer Buffer_t 49 , -1, 0, __literal547_bufferBytes
__literal548_buffer Buffer_t 38 , -1, 0, __literal548_bufferBytes
__literal549_buffer Buffer_t 26 , -1, 0, __literal549_bufferBytes
__literal550_buffer Buffer_t 25 , -1, 0, __literal550_bufferBytes
__literal551_buffer Buffer_t 44 , -1, 0, __literal551_bufferBytes
__literal552_buffer Buffer_t 44 , -1, 0, __literal552_bufferBytes
__literal553_buffer Buffer_t 53 , -1, 0, __literal553_bufferBytes
__literal554_buffer Buffer_t 53 , -1, 0, __literal554_bufferBytes
__literal555_buffer Buffer_t 63 , -1, 0, __literal555_bufferBytes
__literal556_buffer Buffer_t 35 , -1, 0, __literal556_bufferBytes
__literal557_buffer Buffer_t 35 , -1, 0, __literal557_bufferBytes
__literal558_buffer Buffer_t 10 , -1, 0, __literal558_bufferBytes
__literal559_buffer Buffer_t 4 , -1, 0, __literal559_bufferBytes
__literal560_buffer Buffer_t 17 , -1, 0, __literal560_bufferBytes
__literal561_buffer Buffer_t 4 , -1, 0, __literal561_bufferBytes
__literal562_buffer Buffer_t 7 , -1, 0, __literal562_bufferBytes
__literal563_buffer Buffer_t 11 , -1, 0, __literal563_bufferBytes
__literal564_buffer Buffer_t 8 , -1, 0, __literal564_bufferBytes
__literal565_buffer Buffer_t 11 , -1, 0, __literal565_bufferBytes
__literal566_buffer Buffer_t 9 , -1, 0, __literal566_bufferBytes
__literal567_buffer Buffer_t 17 , -1, 0, __literal567_bufferBytes
__literal568_buffer Buffer_t 34 , -1, 0, __literal568_bufferBytes
__literal972_buffer Buffer_t 9 , -1, 0, __literal972_bufferBytes
__literal973_buffer Buffer_t 29 , -1, 0, __literal973_bufferBytes
__literal974_buffer Buffer_t 13 , -1, 0, __literal974_bufferBytes
__literal975_buffer Buffer_t 2 , -1, 0, __literal975_bufferBytes
__literal976_buffer Buffer_t 4 , -1, 0, __literal976_bufferBytes
__literal977_buffer Buffer_t 7 , -1, 0, __literal977_bufferBytes
__literal978_buffer Buffer_t 22 , -1, 0, __literal978_bufferBytes
__literal980_buffer Buffer_t 5 , -1, 0, __literal980_bufferBytes
__literal981_buffer Buffer_t 5 , -1, 0, __literal981_bufferBytes
__const1094_buffer Buffer_t 48 , -1, 0, __const1094_bufferBytes
__const1095_buffer Buffer_t 48 , -1, 0, __const1095_bufferBytes
__const1141_buffer Buffer_t 48 , -1, 0, __const1141_bufferBytes
__const1142_buffer Buffer_t 48 , -1, 0, __const1142_bufferBytes
__const1226_buffer Buffer_t 128 , -1, 0, __const1226_bufferBytes
__const1227_buffer Buffer_t 128 , -1, 0, __const1227_bufferBytes
__const1270_buffer Buffer_t 48 , -1, 0, __const1270_bufferBytes
__const1271_buffer Buffer_t 48 , -1, 0, __const1271_bufferBytes
__const1298_buffer Buffer_t 112 , -1, 0, __const1298_bufferBytes
__const1299_buffer Buffer_t 112 , -1, 0, __const1299_bufferBytes
__const3857_buffer Buffer_t 80 , -1, 0, __const3857_bufferBytes
__const3858_buffer Buffer_t 80 , -1, 0, __const3858_bufferBytes
__const3859_buffer Buffer_t 64 , -1, 0, __const3859_bufferBytes
__const3860_buffer Buffer_t 64 , -1, 0, __const3860_bufferBytes
__const3861_buffer Buffer_t 176 , -1, 0, __const3861_bufferBytes
__const3863_buffer Buffer_t 5440 , -1, 0, __const3863_bufferBytes
__const3864_buffer Buffer_t 5440 , -1, 0, __const3864_bufferBytes
__const3867_buffer Buffer_t 736 , -1, 0, __const3867_bufferBytes
__const3868_buffer Buffer_t 736 , -1, 0, __const3868_bufferBytes
__const3871_buffer Buffer_t 96 , -1, 0, __const3871_bufferBytes
__const3874_buffer Buffer_t 96 , -1, 0, __const3874_bufferBytes
__const3875_buffer Buffer_t 96 , -1, 0, __const3875_bufferBytes
__const3876_buffer Buffer_t 96 , -1, 0, __const3876_bufferBytes
__const3877_buffer Buffer_t 96 , -1, 0, __const3877_bufferBytes
__const3878_buffer Buffer_t 96 , -1, 0, __const3878_bufferBytes
__const3879_buffer Buffer_t 96 , -1, 0, __const3879_bufferBytes
__const3880_buffer Buffer_t 96 , -1, 0, __const3880_bufferBytes
__const3881_buffer Buffer_t 96 , -1, 0, __const3881_bufferBytes
__const3882_buffer Buffer_t 96 , -1, 0, __const3882_bufferBytes
__const3883_buffer Buffer_t 96 , -1, 0, __const3883_bufferBytes
__const3884_buffer Buffer_t 96 , -1, 0, __const3884_bufferBytes
__const3885_buffer Buffer_t 96 , -1, 0, __const3885_bufferBytes
__const3886_buffer Buffer_t 96 , -1, 0, __const3886_bufferBytes
__const3887_buffer Buffer_t 96 , -1, 0, __const3887_bufferBytes
__const3888_buffer Buffer_t 96 , -1, 0, __const3888_bufferBytes
__const3889_buffer Buffer_t 96 , -1, 0, __const3889_bufferBytes
__const3890_buffer Buffer_t 96 , -1, 0, __const3890_bufferBytes
__const3891_buffer Buffer_t 96 , -1, 0, __const3891_bufferBytes
__const3892_buffer Buffer_t 96 , -1, 0, __const3892_bufferBytes
__const3893_buffer Buffer_t 96 , -1, 0, __const3893_bufferBytes
__const3894_buffer Buffer_t 96 , -1, 0, __const3894_bufferBytes
__const3895_buffer Buffer_t 96 , -1, 0, __const3895_bufferBytes
__const3896_buffer Buffer_t 96 , -1, 0, __const3896_bufferBytes
__const3897_buffer Buffer_t 96 , -1, 0, __const3897_bufferBytes
__const3898_buffer Buffer_t 96 , -1, 0, __const3898_bufferBytes
__const3899_buffer Buffer_t 96 , -1, 0, __const3899_bufferBytes
__const3900_buffer Buffer_t 96 , -1, 0, __const3900_bufferBytes
__const3901_buffer Buffer_t 96 , -1, 0, __const3901_bufferBytes
__const3902_buffer Buffer_t 96 , -1, 0, __const3902_bufferBytes
__const3903_buffer Buffer_t 96 , -1, 0, __const3903_bufferBytes
__const3904_buffer Buffer_t 96 , -1, 0, __const3904_bufferBytes
__const3905_buffer Buffer_t 96 , -1, 0, __const3905_bufferBytes
__const3906_buffer Buffer_t 96 , -1, 0, __const3906_bufferBytes
__const3907_buffer Buffer_t 96 , -1, 0, __const3907_bufferBytes
__const3909_buffer Buffer_t 96 , -1, 0, __const3909_bufferBytes
__const3910_buffer Buffer_t 96 , -1, 0, __const3910_bufferBytes
__const3912_buffer Buffer_t 96 , -1, 0, __const3912_bufferBytes
__const3913_buffer Buffer_t 96 , -1, 0, __const3913_bufferBytes
__const3914_buffer Buffer_t 96 , -1, 0, __const3914_bufferBytes
__const3915_buffer Buffer_t 96 , -1, 0, __const3915_bufferBytes
__const3916_buffer Buffer_t 96 , -1, 0, __const3916_bufferBytes
__const3920_buffer Buffer_t 96 , -1, 0, __const3920_bufferBytes
__const3922_buffer Buffer_t 96 , -1, 0, __const3922_bufferBytes
__const3924_buffer Buffer_t 96 , -1, 0, __const3924_bufferBytes
__const3925_buffer Buffer_t 96 , -1, 0, __const3925_bufferBytes
__const3926_buffer Buffer_t 96 , -1, 0, __const3926_bufferBytes
__const3927_buffer Buffer_t 96 , -1, 0, __const3927_bufferBytes
__const3928_buffer Buffer_t 32 , -1, 0, __const3928_bufferBytes
__const3929_buffer Buffer_t 32 , -1, 0, __const3929_bufferBytes
__const3930_buffer Buffer_t 32 , -1, 0, __const3930_bufferBytes
__const3931_buffer Buffer_t 32 , -1, 0, __const3931_bufferBytes
__const3932_buffer Buffer_t 32 , -1, 0, __const3932_bufferBytes
__const3933_buffer Buffer_t 32 , -1, 0, __const3933_bufferBytes
__const3934_buffer Buffer_t 32 , -1, 0, __const3934_bufferBytes
__const3935_buffer Buffer_t 32 , -1, 0, __const3935_bufferBytes
__const3936_buffer Buffer_t 32 , -1, 0, __const3936_bufferBytes
__const3937_buffer Buffer_t 32 , -1, 0, __const3937_bufferBytes
__const3938_buffer Buffer_t 32 , -1, 0, __const3938_bufferBytes
__const3939_buffer Buffer_t 32 , -1, 0, __const3939_bufferBytes
__const3940_buffer Buffer_t 32 , -1, 0, __const3940_bufferBytes
__const3941_buffer Buffer_t 32 , -1, 0, __const3941_bufferBytes
__const3942_buffer Buffer_t 32 , -1, 0, __const3942_bufferBytes
__const3943_buffer Buffer_t 32 , -1, 0, __const3943_bufferBytes
__const3944_buffer Buffer_t 32 , -1, 0, __const3944_bufferBytes
__const3945_buffer Buffer_t 32 , -1, 0, __const3945_bufferBytes
__const3946_buffer Buffer_t 32 , -1, 0, __const3946_bufferBytes
__const3947_buffer Buffer_t 32 , -1, 0, __const3947_bufferBytes
__const3948_buffer Buffer_t 32 , -1, 0, __const3948_bufferBytes
__const3949_buffer Buffer_t 32 , -1, 0, __const3949_bufferBytes
__const3950_buffer Buffer_t 32 , -1, 0, __const3950_bufferBytes
__const3951_buffer Buffer_t 32 , -1, 0, __const3951_bufferBytes
__const3952_buffer Buffer_t 6464 , -1, 0, __const3952_bufferBytes
; iter 2
X64_REGISTER_NAMES_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 80 ; itemsCnt
X64_REGISTER_NAMES_0 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_0_buffer
X64_REGISTER_NAMES_1 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_1_buffer
X64_REGISTER_NAMES_2 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_2_buffer
X64_REGISTER_NAMES_3 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_3_buffer
X64_REGISTER_NAMES_4 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_4_buffer
X64_REGISTER_NAMES_5 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_5_buffer
X64_REGISTER_NAMES_6 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_6_buffer
X64_REGISTER_NAMES_7 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_7_buffer
X64_REGISTER_NAMES_8 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_8_buffer
X64_REGISTER_NAMES_9 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_9_buffer
X64_REGISTER_NAMES_10 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_10_buffer
X64_REGISTER_NAMES_11 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_11_buffer
X64_REGISTER_NAMES_12 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_12_buffer
X64_REGISTER_NAMES_13 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_13_buffer
X64_REGISTER_NAMES_14 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_14_buffer
X64_REGISTER_NAMES_15 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_15_buffer
X64_REGISTER_NAMES_16 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_16_buffer
X64_REGISTER_NAMES_17 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_17_buffer
X64_REGISTER_NAMES_18 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_18_buffer
X64_REGISTER_NAMES_19 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_19_buffer
X64_REGISTER_NAMES_20 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_20_buffer
X64_REGISTER_NAMES_21 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_21_buffer
X64_REGISTER_NAMES_22 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_22_buffer
X64_REGISTER_NAMES_23 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_23_buffer
X64_REGISTER_NAMES_24 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_24_buffer
X64_REGISTER_NAMES_25 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_25_buffer
X64_REGISTER_NAMES_26 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_26_buffer
X64_REGISTER_NAMES_27 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_27_buffer
X64_REGISTER_NAMES_28 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_28_buffer
X64_REGISTER_NAMES_29 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_29_buffer
X64_REGISTER_NAMES_30 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_30_buffer
X64_REGISTER_NAMES_31 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_31_buffer
X64_REGISTER_NAMES_32 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_32_buffer
X64_REGISTER_NAMES_33 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_33_buffer
X64_REGISTER_NAMES_34 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_34_buffer
X64_REGISTER_NAMES_35 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_35_buffer
X64_REGISTER_NAMES_36 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_36_buffer
X64_REGISTER_NAMES_37 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_37_buffer
X64_REGISTER_NAMES_38 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_38_buffer
X64_REGISTER_NAMES_39 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_39_buffer
X64_REGISTER_NAMES_40 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_40_buffer
X64_REGISTER_NAMES_41 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_41_buffer
X64_REGISTER_NAMES_42 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_42_buffer
X64_REGISTER_NAMES_43 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_43_buffer
X64_REGISTER_NAMES_44 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_44_buffer
X64_REGISTER_NAMES_45 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_45_buffer
X64_REGISTER_NAMES_46 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_46_buffer
X64_REGISTER_NAMES_47 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_47_buffer
X64_REGISTER_NAMES_48 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_48_buffer
X64_REGISTER_NAMES_49 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_49_buffer
X64_REGISTER_NAMES_50 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_50_buffer
X64_REGISTER_NAMES_51 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_51_buffer
X64_REGISTER_NAMES_52 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_52_buffer
X64_REGISTER_NAMES_53 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_53_buffer
X64_REGISTER_NAMES_54 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_54_buffer
X64_REGISTER_NAMES_55 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_55_buffer
X64_REGISTER_NAMES_56 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_56_buffer
X64_REGISTER_NAMES_57 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_57_buffer
X64_REGISTER_NAMES_58 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_58_buffer
X64_REGISTER_NAMES_59 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_59_buffer
X64_REGISTER_NAMES_60 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_60_buffer
X64_REGISTER_NAMES_61 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_61_buffer
X64_REGISTER_NAMES_62 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_62_buffer
X64_REGISTER_NAMES_63 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_63_buffer
X64_REGISTER_NAMES_64 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_64_buffer
X64_REGISTER_NAMES_65 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_65_buffer
X64_REGISTER_NAMES_66 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_66_buffer
X64_REGISTER_NAMES_67 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_67_buffer
X64_REGISTER_NAMES_68 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_68_buffer
X64_REGISTER_NAMES_69 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_69_buffer
X64_REGISTER_NAMES_70 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_70_buffer
X64_REGISTER_NAMES_71 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_71_buffer
X64_REGISTER_NAMES_72 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_72_buffer
X64_REGISTER_NAMES_73 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_73_buffer
X64_REGISTER_NAMES_74 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_74_buffer
X64_REGISTER_NAMES_75 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_75_buffer
X64_REGISTER_NAMES_76 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_76_buffer
X64_REGISTER_NAMES_77 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_77_buffer
X64_REGISTER_NAMES_78 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_78_buffer
X64_REGISTER_NAMES_79 Variant_t VARIANT_STRING, 0, X64_REGISTER_NAMES_79_buffer
__literal0_bufferBytes StringHead_t 3
 db  "rip" , 0
__literal1_bufferBytes StringHead_t 2
 db  "st" , 0
__literal2_bufferBytes StringHead_t 6
 db  "string" , 0
__literal3_bufferBytes StringHead_t 12
 db  "outputObject" , 0
__literal4_bufferBytes StringHead_t 12
 db  "lookupBuffer" , 0
__literal5_bufferBytes StringHead_t 1
 db  " " , 0
__literal6_bufferBytes StringHead_t 1
 db  "f" , 0
__literal7_bufferBytes StringHead_t 7
 db  "error: " , 0
__literal8_bufferBytes StringHead_t 4
 db  "path" , 0
__literal9_bufferBytes StringHead_t 2
 db  ": " , 0
__literal10_bufferBytes StringHead_t 1
 db  "'" , 0
__literal11_bufferBytes StringHead_t 17
 db  "' expected, but '" , 0
__literal12_bufferBytes StringHead_t 7
 db  "", 34, " found" , 0
__literal13_bufferBytes StringHead_t 26
 db  "letter A-Z or a-z expected" , 0
__literal14_bufferBytes StringHead_t 37
 db  "letter A-Z, a-z or digit 0-9 expected" , 0
__literal15_bufferBytes StringHead_t 53
 db  "AbstractDescentParser::_parseSource() not implemented" , 0
__literal16_bufferBytes StringHead_t 16
 db  "0123456789abcdef" , 0
__literal17_bufferBytes StringHead_t 0
 db  "" , 0
__literal18_bufferBytes StringHead_t 1
 db  "0" , 0
__literal28_bufferBytes StringHead_t 12
 db  "constantsMap" , 0
__literal29_bufferBytes StringHead_t 9
 db  "labelsMap" , 0
__literal30_bufferBytes StringHead_t 20
 db  "arrayOfLabelsAndRefs" , 0
__literal31_bufferBytes StringHead_t 16
 db  "currentLabelName" , 0
__literal32_bufferBytes StringHead_t 1
 db  "." , 0
__literal33_bufferBytes StringHead_t 4
 db  "type" , 0
__literal34_bufferBytes StringHead_t 5
 db  "label" , 0
__literal35_bufferBytes StringHead_t 4
 db  "name" , 0
__literal36_bufferBytes StringHead_t 8
 db  "codeSize" , 0
__literal37_bufferBytes StringHead_t 6
 db  "offset" , 0
__literal38_bufferBytes StringHead_t 14
 db  "originalOffset" , 0
__literal39_bufferBytes StringHead_t 1
 db  "," , 0
__literal40_bufferBytes StringHead_t 1
 db  "_" , 0
__literal41_bufferBytes StringHead_t 1
 db  "-" , 0
__literal42_bufferBytes StringHead_t 5
 db  "scale" , 0
__literal43_bufferBytes StringHead_t 24
 db  "too many memory operands" , 0
__literal44_bufferBytes StringHead_t 1
 db  "[" , 0
__literal45_bufferBytes StringHead_t 1
 db  "*" , 0
__literal46_bufferBytes StringHead_t 1
 db  "+" , 0
__literal47_bufferBytes StringHead_t 1
 db  "]" , 0
__literal48_bufferBytes StringHead_t 15
 db  "labelObjForDisp" , 0
__literal49_bufferBytes StringHead_t 4
 db  "base" , 0
__literal50_bufferBytes StringHead_t 5
 db  "index" , 0
__literal51_bufferBytes StringHead_t 4
 db  "disp" , 0
__literal52_bufferBytes StringHead_t 15
 db  "isWriteToMemory" , 0
__literal53_bufferBytes StringHead_t 3
 db  "reg" , 0
__literal54_bufferBytes StringHead_t 19
 db  "isMemoryOperandUsed" , 0
__literal55_bufferBytes StringHead_t 3
 db  "imm" , 0
__literal56_bufferBytes StringHead_t 4
 db  "imm2" , 0
__literal57_bufferBytes StringHead_t 3
 db  "EQU" , 0
__literal58_bufferBytes StringHead_t 8
 db  "mnemonic" , 0
__literal59_bufferBytes StringHead_t 8
 db  "constant" , 0
__literal60_bufferBytes StringHead_t 4
 db  "none" , 0
__literal61_bufferBytes StringHead_t 8
 db  "dataSize" , 0
__literal62_bufferBytes StringHead_t 2
 db  "rm" , 0
__literal63_bufferBytes StringHead_t 8
 db  "labelObj" , 0
__literal64_bufferBytes StringHead_t 18
 db  "unexpected content" , 0
__literal65_bufferBytes StringHead_t 16
 db  "numberOfOperands" , 0
__literal66_bufferBytes StringHead_t 5
 db  "enter" , 0
__literal67_bufferBytes StringHead_t 3
 db  "out" , 0
__literal68_bufferBytes StringHead_t 36
 db  "constant used as destination operand" , 0
__literal69_bufferBytes StringHead_t 11
 db  "instruction" , 0
__literal70_bufferBytes StringHead_t 1
 db  "j" , 0
__literal71_bufferBytes StringHead_t 15
 db  "absoluteAddress" , 0
__literal72_bufferBytes StringHead_t 1
 db  ";" , 0
__literal73_bufferBytes StringHead_t 15
 db  "number expected" , 0
__literal74_bufferBytes StringHead_t 4
 db  "data" , 0
__literal75_bufferBytes StringHead_t 1
 db  "d" , 0
__literal76_bufferBytes StringHead_t 3
 db  "dup" , 0
__literal77_bufferBytes StringHead_t 5
 db  "align" , 0
__literal78_bufferBytes StringHead_t 7
 db  "alignTo" , 0
__literal79_bufferBytes StringHead_t 1
 db  ":" , 0
__literal80_bufferBytes StringHead_t 6
 db  "buffer" , 0
__literal81_bufferBytes StringHead_t 16
 db  "bufferingEnabled" , 0
__literal82_bufferBytes StringHead_t 50
 db  "error: _replaceLastItem() called without buffering" , 0
__literal142_bufferBytes StringHead_t 4
 db  "iret" , 0
__literal143_bufferBytes StringHead_t 5
 db  "iretq" , 0
__literal150_bufferBytes StringHead_t 5
 db  "cmpsw" , 0
__literal151_bufferBytes StringHead_t 5
 db  "cmpsq" , 0
__literal152_bufferBytes StringHead_t 5
 db  "movsw" , 0
__literal153_bufferBytes StringHead_t 5
 db  "movsq" , 0
__literal154_bufferBytes StringHead_t 5
 db  "lodsw" , 0
__literal155_bufferBytes StringHead_t 5
 db  "lodsq" , 0
__literal156_bufferBytes StringHead_t 5
 db  "stosw" , 0
__literal157_bufferBytes StringHead_t 5
 db  "stosq" , 0
__literal158_bufferBytes StringHead_t 5
 db  "scasw" , 0
__literal159_bufferBytes StringHead_t 5
 db  "scasq" , 0
__literal160_bufferBytes StringHead_t 4
 db  "insw" , 0
__literal161_bufferBytes StringHead_t 5
 db  "outsw" , 0
__literal162_bufferBytes StringHead_t 3
 db  "cbw" , 0
__literal163_bufferBytes StringHead_t 4
 db  "cdqe" , 0
__literal164_bufferBytes StringHead_t 3
 db  "cwd" , 0
__literal165_bufferBytes StringHead_t 3
 db  "cqo" , 0
__literal335_bufferBytes StringHead_t 9
 db  "cmpxchg8b" , 0
__literal456_bufferBytes StringHead_t 4
 db  "fcom" , 0
__literal457_bufferBytes StringHead_t 5
 db  "fcomp" , 0
__literal458_bufferBytes StringHead_t 5
 db  "fucom" , 0
__literal459_bufferBytes StringHead_t 6
 db  "fucomp" , 0
__literal460_bufferBytes StringHead_t 4
 db  "fxch" , 0
__literal461_bufferBytes StringHead_t 5
 db  "faddp" , 0
__literal462_bufferBytes StringHead_t 5
 db  "fmulp" , 0
__literal463_bufferBytes StringHead_t 6
 db  "fsubrp" , 0
__literal464_bufferBytes StringHead_t 5
 db  "fsubp" , 0
__literal465_bufferBytes StringHead_t 6
 db  "fdivrp" , 0
__literal466_bufferBytes StringHead_t 5
 db  "fdivp" , 0
__literal467_bufferBytes StringHead_t 4
 db  "fild" , 0
__literal468_bufferBytes StringHead_t 6
 db  "fisttp" , 0
__literal469_bufferBytes StringHead_t 4
 db  "fist" , 0
__literal470_bufferBytes StringHead_t 5
 db  "fistp" , 0
__literal471_bufferBytes StringHead_t 4
 db  "fbld" , 0
__literal472_bufferBytes StringHead_t 5
 db  "fbstp" , 0
__literal473_bufferBytes StringHead_t 5
 db  "fiadd" , 0
__literal474_bufferBytes StringHead_t 5
 db  "fimul" , 0
__literal475_bufferBytes StringHead_t 5
 db  "ficom" , 0
__literal476_bufferBytes StringHead_t 6
 db  "ficomp" , 0
__literal477_bufferBytes StringHead_t 5
 db  "fisub" , 0
__literal478_bufferBytes StringHead_t 6
 db  "fisubr" , 0
__literal479_bufferBytes StringHead_t 5
 db  "fidiv" , 0
__literal480_bufferBytes StringHead_t 6
 db  "fidivr" , 0
__literal481_bufferBytes StringHead_t 3
 db  "fld" , 0
__literal482_bufferBytes StringHead_t 3
 db  "fst" , 0
__literal483_bufferBytes StringHead_t 4
 db  "fstp" , 0
__literal484_bufferBytes StringHead_t 5
 db  "ffree" , 0
__literal485_bufferBytes StringHead_t 4
 db  "fadd" , 0
__literal486_bufferBytes StringHead_t 4
 db  "fmul" , 0
__literal487_bufferBytes StringHead_t 4
 db  "fsub" , 0
__literal488_bufferBytes StringHead_t 5
 db  "fsubr" , 0
__literal489_bufferBytes StringHead_t 4
 db  "fdiv" , 0
__literal490_bufferBytes StringHead_t 5
 db  "fdivr" , 0
__literal491_bufferBytes StringHead_t 6
 db  "fnstsw" , 0
__literal492_bufferBytes StringHead_t 5
 db  "fstsw" , 0
__literal493_bufferBytes StringHead_t 5
 db  "fldcw" , 0
__literal494_bufferBytes StringHead_t 6
 db  "fnstcw" , 0
__literal495_bufferBytes StringHead_t 5
 db  "fstcw" , 0
__literal496_bufferBytes StringHead_t 6
 db  "fldenv" , 0
__literal497_bufferBytes StringHead_t 7
 db  "fldenvd" , 0
__literal498_bufferBytes StringHead_t 7
 db  "fnstenv" , 0
__literal499_bufferBytes StringHead_t 6
 db  "frstor" , 0
__literal500_bufferBytes StringHead_t 7
 db  "frstord" , 0
__literal501_bufferBytes StringHead_t 6
 db  "fnsave" , 0
__literal502_bufferBytes StringHead_t 7
 db  "fldenvw" , 0
__literal503_bufferBytes StringHead_t 8
 db  "fnstenvw" , 0
__literal504_bufferBytes StringHead_t 7
 db  "frstorw" , 0
__literal505_bufferBytes StringHead_t 7
 db  "fnsavew" , 0
__literal506_bufferBytes StringHead_t 6
 db  "fstenv" , 0
__literal507_bufferBytes StringHead_t 7
 db  "fstenvd" , 0
__literal508_bufferBytes StringHead_t 5
 db  "fsave" , 0
__literal509_bufferBytes StringHead_t 6
 db  "fsaved" , 0
__literal510_bufferBytes StringHead_t 7
 db  "fstenvw" , 0
__literal511_bufferBytes StringHead_t 6
 db  "fsavew" , 0
__literal512_bufferBytes StringHead_t 6
 db  "fxsave" , 0
__literal513_bufferBytes StringHead_t 7
 db  "fxrstor" , 0
__literal514_bufferBytes StringHead_t 6
 db  "fcmovb" , 0
__literal515_bufferBytes StringHead_t 6
 db  "fcmove" , 0
__literal516_bufferBytes StringHead_t 7
 db  "fcmovbe" , 0
__literal517_bufferBytes StringHead_t 6
 db  "fcmovu" , 0
__literal518_bufferBytes StringHead_t 7
 db  "fcmovnb" , 0
__literal519_bufferBytes StringHead_t 7
 db  "fcmovne" , 0
__literal520_bufferBytes StringHead_t 8
 db  "fcmovnbe" , 0
__literal521_bufferBytes StringHead_t 7
 db  "fcmovnu" , 0
__literal522_bufferBytes StringHead_t 5
 db  "fcomi" , 0
__literal523_bufferBytes StringHead_t 6
 db  "fcomip" , 0
__literal524_bufferBytes StringHead_t 6
 db  "fucomi" , 0
__literal525_bufferBytes StringHead_t 7
 db  "fucomip" , 0
__literal526_bufferBytes StringHead_t 19
 db  "not enough operands" , 0
__literal527_bufferBytes StringHead_t 17
 db  "too many operands" , 0
__literal528_bufferBytes StringHead_t 26
 db  "operand sizes do not match" , 0
__literal529_bufferBytes StringHead_t 33
 db  "8-bit operands not allowed for: '" , 0
__literal530_bufferBytes StringHead_t 38
 db  "only 8-bit operands are allowed for: '" , 0
__literal531_bufferBytes StringHead_t 39
 db  "only 16-bit operands are allowed for: '" , 0
__literal532_bufferBytes StringHead_t 51
 db  "memory address cannot be destination operand for: '" , 0
__literal533_bufferBytes StringHead_t 58
 db  "memory address cannot be used as the second operand for: '" , 0
__literal534_bufferBytes StringHead_t 36
 db  "immediate operand not allowed for: '" , 0
__literal535_bufferBytes StringHead_t 34
 db  "memory operands not allowed for: '" , 0
__literal536_bufferBytes StringHead_t 36
 db  "register operands not allowed for: '" , 0
__literal537_bufferBytes StringHead_t 33
 db  "immediate operand expected for: '" , 0
__literal538_bufferBytes StringHead_t 18
 db  "value out of range" , 0
__literal539_bufferBytes StringHead_t 31
 db  "only 64-bit data allowed for: '" , 0
__literal540_bufferBytes StringHead_t 43
 db  "operand does not match the statement for: '" , 0
__literal541_bufferBytes StringHead_t 27
 db  "unrecognized instruction: '" , 0
__literal542_bufferBytes StringHead_t 29
 db  "ambiguous operand size for: '" , 0
__literal543_bufferBytes StringHead_t 27
 db  "invalid operand size for: '" , 0
__literal544_bufferBytes StringHead_t 69
 db  "only imm8 or the cl register can be used as the second operand for: '" , 0
__literal545_bufferBytes StringHead_t 43
 db  "port must be imm8 or dx register for: 'out'" , 0
__literal546_bufferBytes StringHead_t 42
 db  "port must be imm8 or dx register for: 'in'" , 0
__literal547_bufferBytes StringHead_t 48
 db  "two immediate operands are expected for: 'enter'" , 0
__literal548_bufferBytes StringHead_t 37
 db  "8/32-bit addresses not allowed for: '" , 0
__literal549_bufferBytes StringHead_t 25
 db  "invalid in 64-bit mode: '" , 0
__literal550_bufferBytes StringHead_t 24
 db  "unknown opcode handler: " , 0
__literal551_bufferBytes StringHead_t 43
 db  "error: rsp register cannot be used as index" , 0
__literal552_bufferBytes StringHead_t 43
 db  "error: only 1, 2, 4 or 8 scale is available" , 0
__literal553_bufferBytes StringHead_t 52
 db  "error: push/pop r8/32 are unavailable in 64-bit mode" , 0
__literal554_bufferBytes StringHead_t 52
 db  "error: push/pop m8/32 are unavailable in 64-bit mode" , 0
__literal555_bufferBytes StringHead_t 62
 db  "error: only al/ax/eax registers can be data operand for in/out" , 0
__literal556_bufferBytes StringHead_t 34
 db  "error: not implemented: btx r,imm8" , 0
__literal557_bufferBytes StringHead_t 34
 db  "error: not implemented: btx m,imm8" , 0
__literal558_bufferBytes StringHead_t 9
 db  "imageBase" , 0
__literal559_bufferBytes StringHead_t 3
 db  "ofs" , 0
__literal560_bufferBytes StringHead_t 16
 db  "numberOfSections" , 0
__literal561_bufferBytes StringHead_t 3
 db  "pos" , 0
__literal562_bufferBytes StringHead_t 6
 db  "parser" , 0
__literal563_bufferBytes StringHead_t 10
 db  "translator" , 0
__literal564_bufferBytes StringHead_t 7
 db  "encoder" , 0
__literal565_bufferBytes StringHead_t 10
 db  "tempBuffer" , 0
__literal566_bufferBytes StringHead_t 8
 db  "peWriter" , 0
__literal567_bufferBytes StringHead_t 16
 db  "originalCodeSize" , 0
__literal568_bufferBytes StringHead_t 33
 db  "error: code overwrite after patch" , 0
__literal972_bufferBytes StringHead_t 8
 db  "compiler" , 0
__literal973_bufferBytes StringHead_t 28
 db  " FAIL! (data mismatch, got: " , 0
__literal974_bufferBytes StringHead_t 12
 db  ", expected: " , 0
__literal975_bufferBytes StringHead_t 1
 db  ")" , 0
__literal976_bufferBytes StringHead_t 3
 db  "..." , 0
__literal977_bufferBytes StringHead_t 6
 db  "tests/" , 0
__literal978_bufferBytes StringHead_t 21
 db  "FAIL! (too less data)" , 0
__literal980_bufferBytes StringHead_t 4
 db  ".asm" , 0
__literal981_bufferBytes StringHead_t 4
 db  ".bin" , 0
__const1094_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const1094_0 Variant_t VARIANT_STRING, 0, __literal33_buffer
; Reuse already emitted buffer
__const1094_1 Variant_t VARIANT_STRING, 0, __literal35_buffer
; Reuse already emitted buffer
__const1094_2 Variant_t VARIANT_STRING, 0, __literal36_buffer
__const1095_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const1095_0 Variant_t VARIANT_STRING, 0, __literal34_buffer
__const1095_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const1095_2 Variant_t VARIANT_INTEGER, 0, 0
__const1141_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const1141_0 Variant_t VARIANT_STRING, 0, __literal33_buffer
; Reuse already emitted buffer
__const1141_1 Variant_t VARIANT_STRING, 0, __literal35_buffer
; Reuse already emitted buffer
__const1141_2 Variant_t VARIANT_STRING, 0, __literal37_buffer
__const1142_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const1142_0 Variant_t VARIANT_STRING, 0, __literal34_buffer
__const1142_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const1142_2 Variant_t VARIANT_INTEGER, 0, -1
__const1226_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
; Reuse already emitted buffer
__const1226_0 Variant_t VARIANT_STRING, 0, __literal33_buffer
; Reuse already emitted buffer
__const1226_1 Variant_t VARIANT_STRING, 0, __literal58_buffer
; Reuse already emitted buffer
__const1226_2 Variant_t VARIANT_STRING, 0, __literal53_buffer
; Reuse already emitted buffer
__const1226_3 Variant_t VARIANT_STRING, 0, __literal62_buffer
; Reuse already emitted buffer
__const1226_4 Variant_t VARIANT_STRING, 0, __literal61_buffer
; Reuse already emitted buffer
__const1226_5 Variant_t VARIANT_STRING, 0, __literal37_buffer
; Reuse already emitted buffer
__const1226_6 Variant_t VARIANT_STRING, 0, __literal65_buffer
; Reuse already emitted buffer
__const1226_7 Variant_t VARIANT_STRING, 0, __literal54_buffer
__const1227_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
; Reuse already emitted buffer
__const1227_0 Variant_t VARIANT_STRING, 0, __literal69_buffer
__const1227_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const1227_2 Variant_t VARIANT_INTEGER, 0, -1
__const1227_3 Variant_t VARIANT_INTEGER, 0, -1
__const1227_4 Variant_t VARIANT_INTEGER, 0, -1
__const1227_5 Variant_t VARIANT_UNDEFINED, 0, 0
__const1227_6 Variant_t VARIANT_INTEGER, 0, 0
__const1227_7 Variant_t VARIANT_BOOLEAN, 0, 0
__const1270_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const1270_0 Variant_t VARIANT_STRING, 0, __literal33_buffer
; Reuse already emitted buffer
__const1270_1 Variant_t VARIANT_STRING, 0, __literal61_buffer
; Reuse already emitted buffer
__const1270_2 Variant_t VARIANT_STRING, 0, __literal55_buffer
__const1271_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const1271_0 Variant_t VARIANT_STRING, 0, __literal74_buffer
__const1271_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const1271_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const1298_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
; Reuse already emitted buffer
__const1298_0 Variant_t VARIANT_STRING, 0, __literal33_buffer
; Reuse already emitted buffer
__const1298_1 Variant_t VARIANT_STRING, 0, __literal61_buffer
; Reuse already emitted buffer
__const1298_2 Variant_t VARIANT_STRING, 0, __literal55_buffer
; Reuse already emitted buffer
__const1298_3 Variant_t VARIANT_STRING, 0, __literal63_buffer
; Reuse already emitted buffer
__const1298_4 Variant_t VARIANT_STRING, 0, __literal37_buffer
; Reuse already emitted buffer
__const1298_5 Variant_t VARIANT_STRING, 0, __literal38_buffer
; Reuse already emitted buffer
__const1298_6 Variant_t VARIANT_STRING, 0, __literal36_buffer
__const1299_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
; Reuse already emitted buffer
__const1299_0 Variant_t VARIANT_STRING, 0, __literal74_buffer
__const1299_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const1299_2 Variant_t VARIANT_INTEGER, 0, 0
__const1299_3 Variant_t VARIANT_UNDEFINED, 0, 0
__const1299_4 Variant_t VARIANT_UNDEFINED, 0, 0
__const1299_5 Variant_t VARIANT_UNDEFINED, 0, 0
__const1299_6 Variant_t VARIANT_UNDEFINED, 0, 0
__const3857_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 5 ; itemsCnt
__const3857_0 Variant_t VARIANT_STRING, 0, __const3857_0_buffer
__const3857_1 Variant_t VARIANT_STRING, 0, __const3857_1_buffer
__const3857_2 Variant_t VARIANT_STRING, 0, __const3857_2_buffer
__const3857_3 Variant_t VARIANT_STRING, 0, __const3857_3_buffer
__const3857_4 Variant_t VARIANT_STRING, 0, __const3857_4_buffer
__const3858_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 5 ; itemsCnt
db 1, 2, 4, 8, 10
__const3859_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
__const3859_0 Variant_t VARIANT_STRING, 0, __const3859_0_buffer
__const3859_1 Variant_t VARIANT_STRING, 0, __const3859_1_buffer
__const3859_2 Variant_t VARIANT_STRING, 0, __const3859_2_buffer
__const3859_3 Variant_t VARIANT_STRING, 0, __const3859_3_buffer
__const3860_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 2, 4, 8
__const3861_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
db 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4
__const3863_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 340 ; itemsCnt
__const3863_0 Variant_t VARIANT_STRING, 0, __const3863_0_buffer
__const3863_1 Variant_t VARIANT_STRING, 0, __const3863_1_buffer
__const3863_2 Variant_t VARIANT_STRING, 0, __const3863_2_buffer
__const3863_3 Variant_t VARIANT_STRING, 0, __const3863_3_buffer
__const3863_4 Variant_t VARIANT_STRING, 0, __const3863_4_buffer
__const3863_5 Variant_t VARIANT_STRING, 0, __const3863_5_buffer
__const3863_6 Variant_t VARIANT_STRING, 0, __const3863_6_buffer
__const3863_7 Variant_t VARIANT_STRING, 0, __const3863_7_buffer
__const3863_8 Variant_t VARIANT_STRING, 0, __const3863_8_buffer
__const3863_9 Variant_t VARIANT_STRING, 0, __const3863_9_buffer
__const3863_10 Variant_t VARIANT_STRING, 0, __const3863_10_buffer
__const3863_11 Variant_t VARIANT_STRING, 0, __const3863_11_buffer
__const3863_12 Variant_t VARIANT_STRING, 0, __const3863_12_buffer
__const3863_13 Variant_t VARIANT_STRING, 0, __const3863_13_buffer
__const3863_14 Variant_t VARIANT_STRING, 0, __const3863_14_buffer
__const3863_15 Variant_t VARIANT_STRING, 0, __const3863_15_buffer
__const3863_16 Variant_t VARIANT_STRING, 0, __const3863_16_buffer
__const3863_17 Variant_t VARIANT_STRING, 0, __const3863_17_buffer
__const3863_18 Variant_t VARIANT_STRING, 0, __const3863_18_buffer
__const3863_19 Variant_t VARIANT_STRING, 0, __const3863_19_buffer
__const3863_20 Variant_t VARIANT_STRING, 0, __const3863_20_buffer
__const3863_21 Variant_t VARIANT_STRING, 0, __const3863_21_buffer
__const3863_22 Variant_t VARIANT_STRING, 0, __const3863_22_buffer
__const3863_23 Variant_t VARIANT_STRING, 0, __const3863_23_buffer
__const3863_24 Variant_t VARIANT_STRING, 0, __const3863_24_buffer
__const3863_25 Variant_t VARIANT_STRING, 0, __const3863_25_buffer
__const3863_26 Variant_t VARIANT_STRING, 0, __const3863_26_buffer
__const3863_27 Variant_t VARIANT_STRING, 0, __const3863_27_buffer
__const3863_28 Variant_t VARIANT_STRING, 0, __const3863_28_buffer
__const3863_29 Variant_t VARIANT_STRING, 0, __const3863_29_buffer
__const3863_30 Variant_t VARIANT_STRING, 0, __const3863_30_buffer
__const3863_31 Variant_t VARIANT_STRING, 0, __const3863_31_buffer
__const3863_32 Variant_t VARIANT_STRING, 0, __const3863_32_buffer
__const3863_33 Variant_t VARIANT_STRING, 0, __const3863_33_buffer
__const3863_34 Variant_t VARIANT_STRING, 0, __const3863_34_buffer
__const3863_35 Variant_t VARIANT_STRING, 0, __const3863_35_buffer
__const3863_36 Variant_t VARIANT_STRING, 0, __const3863_36_buffer
__const3863_37 Variant_t VARIANT_STRING, 0, __const3863_37_buffer
__const3863_38 Variant_t VARIANT_STRING, 0, __const3863_38_buffer
__const3863_39 Variant_t VARIANT_STRING, 0, __const3863_39_buffer
__const3863_40 Variant_t VARIANT_STRING, 0, __const3863_40_buffer
__const3863_41 Variant_t VARIANT_STRING, 0, __const3863_41_buffer
__const3863_42 Variant_t VARIANT_STRING, 0, __const3863_42_buffer
__const3863_43 Variant_t VARIANT_STRING, 0, __const3863_43_buffer
__const3863_44 Variant_t VARIANT_STRING, 0, __const3863_44_buffer
__const3863_45 Variant_t VARIANT_STRING, 0, __const3863_45_buffer
__const3863_46 Variant_t VARIANT_STRING, 0, __const3863_46_buffer
__const3863_47 Variant_t VARIANT_STRING, 0, __const3863_47_buffer
__const3863_48 Variant_t VARIANT_STRING, 0, __const3863_48_buffer
__const3863_49 Variant_t VARIANT_STRING, 0, __const3863_49_buffer
__const3863_50 Variant_t VARIANT_STRING, 0, __const3863_50_buffer
__const3863_51 Variant_t VARIANT_STRING, 0, __const3863_51_buffer
__const3863_52 Variant_t VARIANT_STRING, 0, __const3863_52_buffer
__const3863_53 Variant_t VARIANT_STRING, 0, __const3863_53_buffer
__const3863_54 Variant_t VARIANT_STRING, 0, __const3863_54_buffer
__const3863_55 Variant_t VARIANT_STRING, 0, __const3863_55_buffer
__const3863_56 Variant_t VARIANT_STRING, 0, __const3863_56_buffer
__const3863_57 Variant_t VARIANT_STRING, 0, __const3863_57_buffer
__const3863_58 Variant_t VARIANT_STRING, 0, __const3863_58_buffer
; Reuse already emitted buffer
__const3863_59 Variant_t VARIANT_STRING, 0, __literal142_buffer
; Reuse already emitted buffer
__const3863_60 Variant_t VARIANT_STRING, 0, __literal143_buffer
__const3863_61 Variant_t VARIANT_STRING, 0, __const3863_61_buffer
__const3863_62 Variant_t VARIANT_STRING, 0, __const3863_62_buffer
__const3863_63 Variant_t VARIANT_STRING, 0, __const3863_63_buffer
__const3863_64 Variant_t VARIANT_STRING, 0, __const3863_64_buffer
__const3863_65 Variant_t VARIANT_STRING, 0, __const3863_65_buffer
__const3863_66 Variant_t VARIANT_STRING, 0, __const3863_66_buffer
; Reuse already emitted buffer
__const3863_67 Variant_t VARIANT_STRING, 0, __literal150_buffer
; Reuse already emitted buffer
__const3863_68 Variant_t VARIANT_STRING, 0, __literal151_buffer
; Reuse already emitted buffer
__const3863_69 Variant_t VARIANT_STRING, 0, __literal152_buffer
; Reuse already emitted buffer
__const3863_70 Variant_t VARIANT_STRING, 0, __literal153_buffer
; Reuse already emitted buffer
__const3863_71 Variant_t VARIANT_STRING, 0, __literal154_buffer
; Reuse already emitted buffer
__const3863_72 Variant_t VARIANT_STRING, 0, __literal155_buffer
; Reuse already emitted buffer
__const3863_73 Variant_t VARIANT_STRING, 0, __literal156_buffer
; Reuse already emitted buffer
__const3863_74 Variant_t VARIANT_STRING, 0, __literal157_buffer
; Reuse already emitted buffer
__const3863_75 Variant_t VARIANT_STRING, 0, __literal158_buffer
; Reuse already emitted buffer
__const3863_76 Variant_t VARIANT_STRING, 0, __literal159_buffer
; Reuse already emitted buffer
__const3863_77 Variant_t VARIANT_STRING, 0, __literal160_buffer
; Reuse already emitted buffer
__const3863_78 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const3863_79 Variant_t VARIANT_STRING, 0, __literal162_buffer
; Reuse already emitted buffer
__const3863_80 Variant_t VARIANT_STRING, 0, __literal163_buffer
; Reuse already emitted buffer
__const3863_81 Variant_t VARIANT_STRING, 0, __literal164_buffer
; Reuse already emitted buffer
__const3863_82 Variant_t VARIANT_STRING, 0, __literal165_buffer
__const3863_83 Variant_t VARIANT_STRING, 0, __const3863_83_buffer
__const3863_84 Variant_t VARIANT_STRING, 0, __const3863_84_buffer
__const3863_85 Variant_t VARIANT_STRING, 0, __const3863_85_buffer
__const3863_86 Variant_t VARIANT_STRING, 0, __const3863_86_buffer
__const3863_87 Variant_t VARIANT_STRING, 0, __const3863_87_buffer
__const3863_88 Variant_t VARIANT_STRING, 0, __const3863_88_buffer
__const3863_89 Variant_t VARIANT_STRING, 0, __const3863_89_buffer
__const3863_90 Variant_t VARIANT_STRING, 0, __const3863_90_buffer
__const3863_91 Variant_t VARIANT_STRING, 0, __const3863_91_buffer
__const3863_92 Variant_t VARIANT_STRING, 0, __const3863_92_buffer
__const3863_93 Variant_t VARIANT_STRING, 0, __const3863_93_buffer
__const3863_94 Variant_t VARIANT_STRING, 0, __const3863_94_buffer
__const3863_95 Variant_t VARIANT_STRING, 0, __const3863_95_buffer
__const3863_96 Variant_t VARIANT_STRING, 0, __const3863_96_buffer
__const3863_97 Variant_t VARIANT_STRING, 0, __const3863_97_buffer
__const3863_98 Variant_t VARIANT_STRING, 0, __const3863_98_buffer
__const3863_99 Variant_t VARIANT_STRING, 0, __const3863_99_buffer
__const3863_100 Variant_t VARIANT_STRING, 0, __const3863_100_buffer
__const3863_101 Variant_t VARIANT_STRING, 0, __const3863_101_buffer
__const3863_102 Variant_t VARIANT_STRING, 0, __const3863_102_buffer
__const3863_103 Variant_t VARIANT_STRING, 0, __const3863_103_buffer
__const3863_104 Variant_t VARIANT_STRING, 0, __const3863_104_buffer
__const3863_105 Variant_t VARIANT_STRING, 0, __const3863_105_buffer
__const3863_106 Variant_t VARIANT_STRING, 0, __const3863_106_buffer
__const3863_107 Variant_t VARIANT_STRING, 0, __const3863_107_buffer
__const3863_108 Variant_t VARIANT_STRING, 0, __const3863_108_buffer
__const3863_109 Variant_t VARIANT_STRING, 0, __const3863_109_buffer
__const3863_110 Variant_t VARIANT_STRING, 0, __const3863_110_buffer
__const3863_111 Variant_t VARIANT_STRING, 0, __const3863_111_buffer
__const3863_112 Variant_t VARIANT_STRING, 0, __const3863_112_buffer
__const3863_113 Variant_t VARIANT_STRING, 0, __const3863_113_buffer
__const3863_114 Variant_t VARIANT_STRING, 0, __const3863_114_buffer
__const3863_115 Variant_t VARIANT_STRING, 0, __const3863_115_buffer
__const3863_116 Variant_t VARIANT_STRING, 0, __const3863_116_buffer
__const3863_117 Variant_t VARIANT_STRING, 0, __const3863_117_buffer
__const3863_118 Variant_t VARIANT_STRING, 0, __const3863_118_buffer
__const3863_119 Variant_t VARIANT_STRING, 0, __const3863_119_buffer
__const3863_120 Variant_t VARIANT_STRING, 0, __const3863_120_buffer
__const3863_121 Variant_t VARIANT_STRING, 0, __const3863_121_buffer
__const3863_122 Variant_t VARIANT_STRING, 0, __const3863_122_buffer
__const3863_123 Variant_t VARIANT_STRING, 0, __const3863_123_buffer
__const3863_124 Variant_t VARIANT_STRING, 0, __const3863_124_buffer
__const3863_125 Variant_t VARIANT_STRING, 0, __const3863_125_buffer
__const3863_126 Variant_t VARIANT_STRING, 0, __const3863_126_buffer
__const3863_127 Variant_t VARIANT_STRING, 0, __const3863_127_buffer
__const3863_128 Variant_t VARIANT_STRING, 0, __const3863_128_buffer
__const3863_129 Variant_t VARIANT_STRING, 0, __const3863_129_buffer
__const3863_130 Variant_t VARIANT_STRING, 0, __const3863_130_buffer
__const3863_131 Variant_t VARIANT_STRING, 0, __const3863_131_buffer
__const3863_132 Variant_t VARIANT_STRING, 0, __const3863_132_buffer
__const3863_133 Variant_t VARIANT_STRING, 0, __const3863_133_buffer
__const3863_134 Variant_t VARIANT_STRING, 0, __const3863_134_buffer
__const3863_135 Variant_t VARIANT_STRING, 0, __const3863_135_buffer
__const3863_136 Variant_t VARIANT_STRING, 0, __const3863_136_buffer
__const3863_137 Variant_t VARIANT_STRING, 0, __const3863_137_buffer
__const3863_138 Variant_t VARIANT_STRING, 0, __const3863_138_buffer
__const3863_139 Variant_t VARIANT_STRING, 0, __const3863_139_buffer
__const3863_140 Variant_t VARIANT_STRING, 0, __const3863_140_buffer
__const3863_141 Variant_t VARIANT_STRING, 0, __const3863_141_buffer
__const3863_142 Variant_t VARIANT_STRING, 0, __const3863_142_buffer
__const3863_143 Variant_t VARIANT_STRING, 0, __const3863_143_buffer
__const3863_144 Variant_t VARIANT_STRING, 0, __const3863_144_buffer
__const3863_145 Variant_t VARIANT_STRING, 0, __const3863_145_buffer
__const3863_146 Variant_t VARIANT_STRING, 0, __const3863_146_buffer
__const3863_147 Variant_t VARIANT_STRING, 0, __const3863_147_buffer
__const3863_148 Variant_t VARIANT_STRING, 0, __const3863_148_buffer
__const3863_149 Variant_t VARIANT_STRING, 0, __const3863_149_buffer
__const3863_150 Variant_t VARIANT_STRING, 0, __const3863_150_buffer
__const3863_151 Variant_t VARIANT_STRING, 0, __const3863_151_buffer
__const3863_152 Variant_t VARIANT_STRING, 0, __const3863_152_buffer
__const3863_153 Variant_t VARIANT_STRING, 0, __const3863_153_buffer
__const3863_154 Variant_t VARIANT_STRING, 0, __const3863_154_buffer
__const3863_155 Variant_t VARIANT_STRING, 0, __const3863_155_buffer
__const3863_156 Variant_t VARIANT_STRING, 0, __const3863_156_buffer
__const3863_157 Variant_t VARIANT_STRING, 0, __const3863_157_buffer
__const3863_158 Variant_t VARIANT_STRING, 0, __const3863_158_buffer
__const3863_159 Variant_t VARIANT_STRING, 0, __const3863_159_buffer
__const3863_160 Variant_t VARIANT_STRING, 0, __const3863_160_buffer
__const3863_161 Variant_t VARIANT_STRING, 0, __const3863_161_buffer
__const3863_162 Variant_t VARIANT_STRING, 0, __const3863_162_buffer
__const3863_163 Variant_t VARIANT_STRING, 0, __const3863_163_buffer
__const3863_164 Variant_t VARIANT_STRING, 0, __const3863_164_buffer
__const3863_165 Variant_t VARIANT_STRING, 0, __const3863_165_buffer
__const3863_166 Variant_t VARIANT_STRING, 0, __const3863_166_buffer
__const3863_167 Variant_t VARIANT_STRING, 0, __const3863_167_buffer
__const3863_168 Variant_t VARIANT_STRING, 0, __const3863_168_buffer
__const3863_169 Variant_t VARIANT_STRING, 0, __const3863_169_buffer
__const3863_170 Variant_t VARIANT_STRING, 0, __const3863_170_buffer
__const3863_171 Variant_t VARIANT_STRING, 0, __const3863_171_buffer
__const3863_172 Variant_t VARIANT_STRING, 0, __const3863_172_buffer
__const3863_173 Variant_t VARIANT_STRING, 0, __const3863_173_buffer
__const3863_174 Variant_t VARIANT_STRING, 0, __const3863_174_buffer
__const3863_175 Variant_t VARIANT_STRING, 0, __const3863_175_buffer
__const3863_176 Variant_t VARIANT_STRING, 0, __const3863_176_buffer
__const3863_177 Variant_t VARIANT_STRING, 0, __const3863_177_buffer
__const3863_178 Variant_t VARIANT_STRING, 0, __const3863_178_buffer
__const3863_179 Variant_t VARIANT_STRING, 0, __const3863_179_buffer
__const3863_180 Variant_t VARIANT_STRING, 0, __const3863_180_buffer
__const3863_181 Variant_t VARIANT_STRING, 0, __const3863_181_buffer
__const3863_182 Variant_t VARIANT_STRING, 0, __const3863_182_buffer
__const3863_183 Variant_t VARIANT_STRING, 0, __const3863_183_buffer
__const3863_184 Variant_t VARIANT_STRING, 0, __const3863_184_buffer
__const3863_185 Variant_t VARIANT_STRING, 0, __const3863_185_buffer
__const3863_186 Variant_t VARIANT_STRING, 0, __const3863_186_buffer
__const3863_187 Variant_t VARIANT_STRING, 0, __const3863_187_buffer
__const3863_188 Variant_t VARIANT_STRING, 0, __const3863_188_buffer
__const3863_189 Variant_t VARIANT_STRING, 0, __const3863_189_buffer
__const3863_190 Variant_t VARIANT_STRING, 0, __const3863_190_buffer
__const3863_191 Variant_t VARIANT_STRING, 0, __const3863_191_buffer
__const3863_192 Variant_t VARIANT_STRING, 0, __const3863_192_buffer
__const3863_193 Variant_t VARIANT_STRING, 0, __const3863_193_buffer
__const3863_194 Variant_t VARIANT_STRING, 0, __const3863_194_buffer
__const3863_195 Variant_t VARIANT_STRING, 0, __const3863_195_buffer
__const3863_196 Variant_t VARIANT_STRING, 0, __const3863_196_buffer
__const3863_197 Variant_t VARIANT_STRING, 0, __const3863_197_buffer
__const3863_198 Variant_t VARIANT_STRING, 0, __const3863_198_buffer
__const3863_199 Variant_t VARIANT_STRING, 0, __const3863_199_buffer
__const3863_200 Variant_t VARIANT_STRING, 0, __const3863_200_buffer
__const3863_201 Variant_t VARIANT_STRING, 0, __const3863_201_buffer
__const3863_202 Variant_t VARIANT_STRING, 0, __const3863_202_buffer
__const3863_203 Variant_t VARIANT_STRING, 0, __const3863_203_buffer
__const3863_204 Variant_t VARIANT_STRING, 0, __const3863_204_buffer
__const3863_205 Variant_t VARIANT_STRING, 0, __const3863_205_buffer
__const3863_206 Variant_t VARIANT_STRING, 0, __const3863_206_buffer
__const3863_207 Variant_t VARIANT_STRING, 0, __const3863_207_buffer
__const3863_208 Variant_t VARIANT_STRING, 0, __const3863_208_buffer
__const3863_209 Variant_t VARIANT_STRING, 0, __const3863_209_buffer
__const3863_210 Variant_t VARIANT_STRING, 0, __const3863_210_buffer
__const3863_211 Variant_t VARIANT_STRING, 0, __const3863_211_buffer
__const3863_212 Variant_t VARIANT_STRING, 0, __const3863_212_buffer
__const3863_213 Variant_t VARIANT_STRING, 0, __const3863_213_buffer
__const3863_214 Variant_t VARIANT_STRING, 0, __const3863_214_buffer
__const3863_215 Variant_t VARIANT_STRING, 0, __const3863_215_buffer
__const3863_216 Variant_t VARIANT_STRING, 0, __const3863_216_buffer
__const3863_217 Variant_t VARIANT_STRING, 0, __const3863_217_buffer
__const3863_218 Variant_t VARIANT_STRING, 0, __const3863_218_buffer
__const3863_219 Variant_t VARIANT_STRING, 0, __const3863_219_buffer
__const3863_220 Variant_t VARIANT_STRING, 0, __const3863_220_buffer
__const3863_221 Variant_t VARIANT_STRING, 0, __const3863_221_buffer
__const3863_222 Variant_t VARIANT_STRING, 0, __const3863_222_buffer
__const3863_223 Variant_t VARIANT_STRING, 0, __const3863_223_buffer
__const3863_224 Variant_t VARIANT_STRING, 0, __const3863_224_buffer
__const3863_225 Variant_t VARIANT_STRING, 0, __const3863_225_buffer
__const3863_226 Variant_t VARIANT_STRING, 0, __const3863_226_buffer
__const3863_227 Variant_t VARIANT_STRING, 0, __const3863_227_buffer
__const3863_228 Variant_t VARIANT_STRING, 0, __const3863_228_buffer
__const3863_229 Variant_t VARIANT_STRING, 0, __const3863_229_buffer
__const3863_230 Variant_t VARIANT_STRING, 0, __const3863_230_buffer
__const3863_231 Variant_t VARIANT_STRING, 0, __const3863_231_buffer
__const3863_232 Variant_t VARIANT_STRING, 0, __const3863_232_buffer
__const3863_233 Variant_t VARIANT_STRING, 0, __const3863_233_buffer
__const3863_234 Variant_t VARIANT_STRING, 0, __const3863_234_buffer
__const3863_235 Variant_t VARIANT_STRING, 0, __const3863_235_buffer
__const3863_236 Variant_t VARIANT_STRING, 0, __const3863_236_buffer
__const3863_237 Variant_t VARIANT_STRING, 0, __const3863_237_buffer
__const3863_238 Variant_t VARIANT_STRING, 0, __const3863_238_buffer
__const3863_239 Variant_t VARIANT_STRING, 0, __const3863_239_buffer
__const3863_240 Variant_t VARIANT_STRING, 0, __const3863_240_buffer
__const3863_241 Variant_t VARIANT_STRING, 0, __const3863_241_buffer
__const3863_242 Variant_t VARIANT_STRING, 0, __const3863_242_buffer
; Reuse already emitted buffer
__const3863_243 Variant_t VARIANT_STRING, 0, __literal67_buffer
__const3863_244 Variant_t VARIANT_STRING, 0, __const3863_244_buffer
__const3863_245 Variant_t VARIANT_STRING, 0, __const3863_245_buffer
__const3863_246 Variant_t VARIANT_STRING, 0, __const3863_246_buffer
__const3863_247 Variant_t VARIANT_STRING, 0, __const3863_247_buffer
; Reuse already emitted buffer
__const3863_248 Variant_t VARIANT_STRING, 0, __literal66_buffer
__const3863_249 Variant_t VARIANT_STRING, 0, __const3863_249_buffer
__const3863_250 Variant_t VARIANT_STRING, 0, __const3863_250_buffer
__const3863_251 Variant_t VARIANT_STRING, 0, __const3863_251_buffer
__const3863_252 Variant_t VARIANT_STRING, 0, __const3863_252_buffer
__const3863_253 Variant_t VARIANT_STRING, 0, __const3863_253_buffer
; Reuse already emitted buffer
__const3863_254 Variant_t VARIANT_STRING, 0, __literal335_buffer
__const3863_255 Variant_t VARIANT_STRING, 0, __const3863_255_buffer
__const3863_256 Variant_t VARIANT_STRING, 0, __const3863_256_buffer
__const3863_257 Variant_t VARIANT_STRING, 0, __const3863_257_buffer
__const3863_258 Variant_t VARIANT_STRING, 0, __const3863_258_buffer
__const3863_259 Variant_t VARIANT_STRING, 0, __const3863_259_buffer
__const3863_260 Variant_t VARIANT_STRING, 0, __const3863_260_buffer
__const3863_261 Variant_t VARIANT_STRING, 0, __const3863_261_buffer
__const3863_262 Variant_t VARIANT_STRING, 0, __const3863_262_buffer
__const3863_263 Variant_t VARIANT_STRING, 0, __const3863_263_buffer
__const3863_264 Variant_t VARIANT_STRING, 0, __const3863_264_buffer
__const3863_265 Variant_t VARIANT_STRING, 0, __const3863_265_buffer
__const3863_266 Variant_t VARIANT_STRING, 0, __const3863_266_buffer
__const3863_267 Variant_t VARIANT_STRING, 0, __const3863_267_buffer
__const3863_268 Variant_t VARIANT_STRING, 0, __const3863_268_buffer
__const3863_269 Variant_t VARIANT_STRING, 0, __const3863_269_buffer
__const3863_270 Variant_t VARIANT_STRING, 0, __const3863_270_buffer
__const3863_271 Variant_t VARIANT_STRING, 0, __const3863_271_buffer
__const3863_272 Variant_t VARIANT_STRING, 0, __const3863_272_buffer
__const3863_273 Variant_t VARIANT_STRING, 0, __const3863_273_buffer
__const3863_274 Variant_t VARIANT_STRING, 0, __const3863_274_buffer
__const3863_275 Variant_t VARIANT_STRING, 0, __const3863_275_buffer
__const3863_276 Variant_t VARIANT_STRING, 0, __const3863_276_buffer
__const3863_277 Variant_t VARIANT_STRING, 0, __const3863_277_buffer
__const3863_278 Variant_t VARIANT_STRING, 0, __const3863_278_buffer
__const3863_279 Variant_t VARIANT_STRING, 0, __const3863_279_buffer
__const3863_280 Variant_t VARIANT_STRING, 0, __const3863_280_buffer
__const3863_281 Variant_t VARIANT_STRING, 0, __const3863_281_buffer
__const3863_282 Variant_t VARIANT_STRING, 0, __const3863_282_buffer
__const3863_283 Variant_t VARIANT_STRING, 0, __const3863_283_buffer
__const3863_284 Variant_t VARIANT_STRING, 0, __const3863_284_buffer
__const3863_285 Variant_t VARIANT_STRING, 0, __const3863_285_buffer
__const3863_286 Variant_t VARIANT_STRING, 0, __const3863_286_buffer
__const3863_287 Variant_t VARIANT_STRING, 0, __const3863_287_buffer
__const3863_288 Variant_t VARIANT_STRING, 0, __const3863_288_buffer
__const3863_289 Variant_t VARIANT_STRING, 0, __const3863_289_buffer
__const3863_290 Variant_t VARIANT_STRING, 0, __const3863_290_buffer
__const3863_291 Variant_t VARIANT_STRING, 0, __const3863_291_buffer
__const3863_292 Variant_t VARIANT_STRING, 0, __const3863_292_buffer
__const3863_293 Variant_t VARIANT_STRING, 0, __const3863_293_buffer
__const3863_294 Variant_t VARIANT_STRING, 0, __const3863_294_buffer
__const3863_295 Variant_t VARIANT_STRING, 0, __const3863_295_buffer
__const3863_296 Variant_t VARIANT_STRING, 0, __const3863_296_buffer
__const3863_297 Variant_t VARIANT_STRING, 0, __const3863_297_buffer
__const3863_298 Variant_t VARIANT_STRING, 0, __const3863_298_buffer
__const3863_299 Variant_t VARIANT_STRING, 0, __const3863_299_buffer
__const3863_300 Variant_t VARIANT_STRING, 0, __const3863_300_buffer
__const3863_301 Variant_t VARIANT_STRING, 0, __const3863_301_buffer
__const3863_302 Variant_t VARIANT_STRING, 0, __const3863_302_buffer
__const3863_303 Variant_t VARIANT_STRING, 0, __const3863_303_buffer
__const3863_304 Variant_t VARIANT_STRING, 0, __const3863_304_buffer
__const3863_305 Variant_t VARIANT_STRING, 0, __const3863_305_buffer
__const3863_306 Variant_t VARIANT_STRING, 0, __const3863_306_buffer
__const3863_307 Variant_t VARIANT_STRING, 0, __const3863_307_buffer
__const3863_308 Variant_t VARIANT_STRING, 0, __const3863_308_buffer
__const3863_309 Variant_t VARIANT_STRING, 0, __const3863_309_buffer
__const3863_310 Variant_t VARIANT_STRING, 0, __const3863_310_buffer
__const3863_311 Variant_t VARIANT_STRING, 0, __const3863_311_buffer
__const3863_312 Variant_t VARIANT_STRING, 0, __const3863_312_buffer
__const3863_313 Variant_t VARIANT_STRING, 0, __const3863_313_buffer
__const3863_314 Variant_t VARIANT_STRING, 0, __const3863_314_buffer
__const3863_315 Variant_t VARIANT_STRING, 0, __const3863_315_buffer
__const3863_316 Variant_t VARIANT_STRING, 0, __const3863_316_buffer
__const3863_317 Variant_t VARIANT_STRING, 0, __const3863_317_buffer
__const3863_318 Variant_t VARIANT_STRING, 0, __const3863_318_buffer
__const3863_319 Variant_t VARIANT_STRING, 0, __const3863_319_buffer
__const3863_320 Variant_t VARIANT_STRING, 0, __const3863_320_buffer
__const3863_321 Variant_t VARIANT_STRING, 0, __const3863_321_buffer
__const3863_322 Variant_t VARIANT_STRING, 0, __const3863_322_buffer
__const3863_323 Variant_t VARIANT_STRING, 0, __const3863_323_buffer
__const3863_324 Variant_t VARIANT_STRING, 0, __const3863_324_buffer
__const3863_325 Variant_t VARIANT_STRING, 0, __const3863_325_buffer
__const3863_326 Variant_t VARIANT_STRING, 0, __const3863_326_buffer
__const3863_327 Variant_t VARIANT_STRING, 0, __const3863_327_buffer
__const3863_328 Variant_t VARIANT_STRING, 0, __const3863_328_buffer
__const3863_329 Variant_t VARIANT_STRING, 0, __const3863_329_buffer
__const3863_330 Variant_t VARIANT_STRING, 0, __const3863_330_buffer
__const3863_331 Variant_t VARIANT_STRING, 0, __const3863_331_buffer
__const3863_332 Variant_t VARIANT_STRING, 0, __const3863_332_buffer
__const3863_333 Variant_t VARIANT_STRING, 0, __const3863_333_buffer
__const3863_334 Variant_t VARIANT_STRING, 0, __const3863_334_buffer
__const3863_335 Variant_t VARIANT_STRING, 0, __const3863_335_buffer
__const3863_336 Variant_t VARIANT_STRING, 0, __const3863_336_buffer
__const3863_337 Variant_t VARIANT_STRING, 0, __const3863_337_buffer
__const3863_338 Variant_t VARIANT_STRING, 0, __const3863_338_buffer
__const3863_339 Variant_t VARIANT_STRING, 0, __const3863_339_buffer
__const3864_bufferBytes dd 0 ; inner type
db 3  ; inner size
db ?, ?, ? ; reserved
dq 340 ; itemsCnt
__const3864_0 Variant_t VARIANT_INTEGER, 0, 4261412864
__const3864_1 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_2 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_3 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_4 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_5 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_6 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_7 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_8 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_9 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_10 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_11 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_12 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_13 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_14 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_15 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_16 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_17 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_18 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_19 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_20 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_21 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_22 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_23 Variant_t VARIANT_INTEGER, 0, 4278190080
__const3864_24 Variant_t VARIANT_INTEGER, 0, 152
__const3864_25 Variant_t VARIANT_INTEGER, 0, 153
__const3864_26 Variant_t VARIANT_INTEGER, 0, 248
__const3864_27 Variant_t VARIANT_INTEGER, 0, 252
__const3864_28 Variant_t VARIANT_INTEGER, 0, 250
__const3864_29 Variant_t VARIANT_INTEGER, 0, 249
__const3864_30 Variant_t VARIANT_INTEGER, 0, 253
__const3864_31 Variant_t VARIANT_INTEGER, 0, 251
__const3864_32 Variant_t VARIANT_INTEGER, 0, 245
__const3864_33 Variant_t VARIANT_INTEGER, 0, 166
__const3864_34 Variant_t VARIANT_INTEGER, 0, 167
__const3864_35 Variant_t VARIANT_INTEGER, 0, 164
__const3864_36 Variant_t VARIANT_INTEGER, 0, 165
__const3864_37 Variant_t VARIANT_INTEGER, 0, 172
__const3864_38 Variant_t VARIANT_INTEGER, 0, 173
__const3864_39 Variant_t VARIANT_INTEGER, 0, 170
__const3864_40 Variant_t VARIANT_INTEGER, 0, 171
__const3864_41 Variant_t VARIANT_INTEGER, 0, 174
__const3864_42 Variant_t VARIANT_INTEGER, 0, 175
__const3864_43 Variant_t VARIANT_INTEGER, 0, 108
__const3864_44 Variant_t VARIANT_INTEGER, 0, 109
__const3864_45 Variant_t VARIANT_INTEGER, 0, 110
__const3864_46 Variant_t VARIANT_INTEGER, 0, 111
__const3864_47 Variant_t VARIANT_INTEGER, 0, 243
__const3864_48 Variant_t VARIANT_INTEGER, 0, 243
__const3864_49 Variant_t VARIANT_INTEGER, 0, 243
__const3864_50 Variant_t VARIANT_INTEGER, 0, 242
__const3864_51 Variant_t VARIANT_INTEGER, 0, 242
__const3864_52 Variant_t VARIANT_INTEGER, 0, 244
__const3864_53 Variant_t VARIANT_INTEGER, 0, 240
__const3864_54 Variant_t VARIANT_INTEGER, 0, 215
__const3864_55 Variant_t VARIANT_INTEGER, 0, 241
__const3864_56 Variant_t VARIANT_INTEGER, 0, 204
__const3864_57 Variant_t VARIANT_INTEGER, 0, 207
__const3864_58 Variant_t VARIANT_INTEGER, 0, 16830310
__const3864_59 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_60 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_61 Variant_t VARIANT_INTEGER, 0, 156
__const3864_62 Variant_t VARIANT_INTEGER, 0, 156
__const3864_63 Variant_t VARIANT_INTEGER, 0, 157
__const3864_64 Variant_t VARIANT_INTEGER, 0, 157
__const3864_65 Variant_t VARIANT_INTEGER, 0, 201
__const3864_66 Variant_t VARIANT_INTEGER, 0, 155
__const3864_67 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_68 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_69 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_70 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_71 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_72 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_73 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_74 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_75 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_76 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_77 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_78 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_79 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_80 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_81 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_82 Variant_t VARIANT_UNDEFINED, 0, 0
__const3864_83 Variant_t VARIANT_INTEGER, 0, 16817254
__const3864_84 Variant_t VARIANT_INTEGER, 0, 16817510
__const3864_85 Variant_t VARIANT_INTEGER, 0, 16778767
__const3864_86 Variant_t VARIANT_INTEGER, 0, 16818703
__const3864_87 Variant_t VARIANT_INTEGER, 0, 16789519
__const3864_88 Variant_t VARIANT_INTEGER, 0, 16789775
__const3864_89 Variant_t VARIANT_INTEGER, 0, 16790031
__const3864_90 Variant_t VARIANT_INTEGER, 0, 16790287
__const3864_91 Variant_t VARIANT_INTEGER, 0, 16820751
__const3864_92 Variant_t VARIANT_INTEGER, 0, 16779279
__const3864_93 Variant_t VARIANT_INTEGER, 0, 16779535
__const3864_94 Variant_t VARIANT_INTEGER, 0, 16778511
__const3864_95 Variant_t VARIANT_INTEGER, 0, 16779023
__const3864_96 Variant_t VARIANT_INTEGER, 0, 16790543
__const3864_97 Variant_t VARIANT_INTEGER, 0, 16790799
__const3864_98 Variant_t VARIANT_INTEGER, 0, 16780047
__const3864_99 Variant_t VARIANT_INTEGER, 0, 50395393
__const3864_100 Variant_t VARIANT_INTEGER, 0, 50395137
__const3864_101 Variant_t VARIANT_INTEGER, 0, 536870928
__const3864_102 Variant_t VARIANT_INTEGER, 0, 536870912
__const3864_103 Variant_t VARIANT_INTEGER, 0, 536870944
__const3864_104 Variant_t VARIANT_INTEGER, 0, 536870968
__const3864_105 Variant_t VARIANT_INTEGER, 0, 536870936
__const3864_106 Variant_t VARIANT_INTEGER, 0, 536870952
__const3864_107 Variant_t VARIANT_INTEGER, 0, 536870920
__const3864_108 Variant_t VARIANT_INTEGER, 0, 536870960
__const3864_109 Variant_t VARIANT_INTEGER, 0, 570467087
__const3864_110 Variant_t VARIANT_INTEGER, 0, 570473231
__const3864_111 Variant_t VARIANT_INTEGER, 0, 570471183
__const3864_112 Variant_t VARIANT_INTEGER, 0, 570469135
__const3864_113 Variant_t VARIANT_INTEGER, 0, 587251727
__const3864_114 Variant_t VARIANT_INTEGER, 0, 587247631
__const3864_115 Variant_t VARIANT_INTEGER, 0, 553664527
__const3864_116 Variant_t VARIANT_INTEGER, 0, 553664783
__const3864_117 Variant_t VARIANT_INTEGER, 0, 553665039
__const3864_118 Variant_t VARIANT_INTEGER, 0, 553665039
__const3864_119 Variant_t VARIANT_INTEGER, 0, 553665039
__const3864_120 Variant_t VARIANT_INTEGER, 0, 553665295
__const3864_121 Variant_t VARIANT_INTEGER, 0, 553665295
__const3864_122 Variant_t VARIANT_INTEGER, 0, 553665295
__const3864_123 Variant_t VARIANT_INTEGER, 0, 553665551
__const3864_124 Variant_t VARIANT_INTEGER, 0, 553665551
__const3864_125 Variant_t VARIANT_INTEGER, 0, 553665807
__const3864_126 Variant_t VARIANT_INTEGER, 0, 553665807
__const3864_127 Variant_t VARIANT_INTEGER, 0, 553666063
__const3864_128 Variant_t VARIANT_INTEGER, 0, 553666063
__const3864_129 Variant_t VARIANT_INTEGER, 0, 553666319
__const3864_130 Variant_t VARIANT_INTEGER, 0, 553666319
__const3864_131 Variant_t VARIANT_INTEGER, 0, 553666575
__const3864_132 Variant_t VARIANT_INTEGER, 0, 553666831
__const3864_133 Variant_t VARIANT_INTEGER, 0, 553667087
__const3864_134 Variant_t VARIANT_INTEGER, 0, 553667087
__const3864_135 Variant_t VARIANT_INTEGER, 0, 553667343
__const3864_136 Variant_t VARIANT_INTEGER, 0, 553667343
__const3864_137 Variant_t VARIANT_INTEGER, 0, 553667599
__const3864_138 Variant_t VARIANT_INTEGER, 0, 553667599
__const3864_139 Variant_t VARIANT_INTEGER, 0, 553667855
__const3864_140 Variant_t VARIANT_INTEGER, 0, 553667855
__const3864_141 Variant_t VARIANT_INTEGER, 0, 553668111
__const3864_142 Variant_t VARIANT_INTEGER, 0, 553668111
__const3864_143 Variant_t VARIANT_INTEGER, 0, 553668367
__const3864_144 Variant_t VARIANT_INTEGER, 0, 553668367
__const3864_145 Variant_t VARIANT_INTEGER, 0, 553696271
__const3864_146 Variant_t VARIANT_INTEGER, 0, 553696527
__const3864_147 Variant_t VARIANT_INTEGER, 0, 1073741826
__const3864_148 Variant_t VARIANT_INTEGER, 0, 1073741827
__const3864_149 Variant_t VARIANT_INTEGER, 0, 1073741828
__const3864_150 Variant_t VARIANT_INTEGER, 0, 1073741829
__const3864_151 Variant_t VARIANT_INTEGER, 0, 1073741830
__const3864_152 Variant_t VARIANT_INTEGER, 0, 1073741831
__const3864_153 Variant_t VARIANT_INTEGER, 0, 838861327
__const3864_154 Variant_t VARIANT_INTEGER, 0, 838906383
__const3864_155 Variant_t VARIANT_INTEGER, 0, 838906895
__const3864_156 Variant_t VARIANT_INTEGER, 0, 838907151
__const3864_157 Variant_t VARIANT_INTEGER, 0, 1090519040
__const3864_158 Variant_t VARIANT_INTEGER, 0, 1090519041
__const3864_159 Variant_t VARIANT_INTEGER, 0, 1090519042
__const3864_160 Variant_t VARIANT_INTEGER, 0, 1090519043
__const3864_161 Variant_t VARIANT_INTEGER, 0, 1090519044
__const3864_162 Variant_t VARIANT_INTEGER, 0, 1090519045
__const3864_163 Variant_t VARIANT_INTEGER, 0, 1107296256
__const3864_164 Variant_t VARIANT_INTEGER, 0, 1107296257
__const3864_165 Variant_t VARIANT_INTEGER, 0, 1107296258
__const3864_166 Variant_t VARIANT_INTEGER, 0, 1107296259
__const3864_167 Variant_t VARIANT_INTEGER, 0, 1107296260
__const3864_168 Variant_t VARIANT_INTEGER, 0, 1107296262
__const3864_169 Variant_t VARIANT_INTEGER, 0, 1107296263
__const3864_170 Variant_t VARIANT_INTEGER, 0, 268435568
__const3864_171 Variant_t VARIANT_INTEGER, 0, 268435569
__const3864_172 Variant_t VARIANT_INTEGER, 0, 268435570
__const3864_173 Variant_t VARIANT_INTEGER, 0, 268435571
__const3864_174 Variant_t VARIANT_INTEGER, 0, 268435572
__const3864_175 Variant_t VARIANT_INTEGER, 0, 268435572
__const3864_176 Variant_t VARIANT_INTEGER, 0, 268435573
__const3864_177 Variant_t VARIANT_INTEGER, 0, 268435573
__const3864_178 Variant_t VARIANT_INTEGER, 0, 268435574
__const3864_179 Variant_t VARIANT_INTEGER, 0, 268435575
__const3864_180 Variant_t VARIANT_INTEGER, 0, 268435576
__const3864_181 Variant_t VARIANT_INTEGER, 0, 268435577
__const3864_182 Variant_t VARIANT_INTEGER, 0, 268435578
__const3864_183 Variant_t VARIANT_INTEGER, 0, 268435579
__const3864_184 Variant_t VARIANT_INTEGER, 0, 268435580
__const3864_185 Variant_t VARIANT_INTEGER, 0, 268435581
__const3864_186 Variant_t VARIANT_INTEGER, 0, 268435582
__const3864_187 Variant_t VARIANT_INTEGER, 0, 268435583
__const3864_188 Variant_t VARIANT_INTEGER, 0, 285212898
__const3864_189 Variant_t VARIANT_INTEGER, 0, 285212897
__const3864_190 Variant_t VARIANT_INTEGER, 0, 285212896
__const3864_191 Variant_t VARIANT_INTEGER, 0, 285212897
__const3864_192 Variant_t VARIANT_INTEGER, 0, 285212896
__const3864_193 Variant_t VARIANT_INTEGER, 0, 285212899
__const3864_194 Variant_t VARIANT_INTEGER, 0, 301990114
__const3864_195 Variant_t VARIANT_INTEGER, 0, 301990113
__const3864_196 Variant_t VARIANT_INTEGER, 0, 301990112
__const3864_197 Variant_t VARIANT_INTEGER, 0, 301990113
__const3864_198 Variant_t VARIANT_INTEGER, 0, 301990112
__const3864_199 Variant_t VARIANT_INTEGER, 0, 301990115
__const3864_200 Variant_t VARIANT_INTEGER, 0, 805306368
__const3864_201 Variant_t VARIANT_INTEGER, 0, 805306369
__const3864_202 Variant_t VARIANT_INTEGER, 0, 805306370
__const3864_203 Variant_t VARIANT_INTEGER, 0, 805306371
__const3864_204 Variant_t VARIANT_INTEGER, 0, 805306372
__const3864_205 Variant_t VARIANT_INTEGER, 0, 805306372
__const3864_206 Variant_t VARIANT_INTEGER, 0, 805306373
__const3864_207 Variant_t VARIANT_INTEGER, 0, 805306375
__const3864_208 Variant_t VARIANT_INTEGER, 0, 822132239
__const3864_209 Variant_t VARIANT_INTEGER, 0, 822130191
__const3864_210 Variant_t VARIANT_INTEGER, 0, 1124110351
__const3864_211 Variant_t VARIANT_INTEGER, 0, 1124110607
__const3864_212 Variant_t VARIANT_INTEGER, 0, 1124110863
__const3864_213 Variant_t VARIANT_INTEGER, 0, 1124110863
__const3864_214 Variant_t VARIANT_INTEGER, 0, 1124110863
__const3864_215 Variant_t VARIANT_INTEGER, 0, 1124111119
__const3864_216 Variant_t VARIANT_INTEGER, 0, 1124111119
__const3864_217 Variant_t VARIANT_INTEGER, 0, 1124111119
__const3864_218 Variant_t VARIANT_INTEGER, 0, 1124111375
__const3864_219 Variant_t VARIANT_INTEGER, 0, 1124111375
__const3864_220 Variant_t VARIANT_INTEGER, 0, 1124111631
__const3864_221 Variant_t VARIANT_INTEGER, 0, 1124111631
__const3864_222 Variant_t VARIANT_INTEGER, 0, 1124111887
__const3864_223 Variant_t VARIANT_INTEGER, 0, 1124111887
__const3864_224 Variant_t VARIANT_INTEGER, 0, 1124112143
__const3864_225 Variant_t VARIANT_INTEGER, 0, 1124112143
__const3864_226 Variant_t VARIANT_INTEGER, 0, 1124112399
__const3864_227 Variant_t VARIANT_INTEGER, 0, 1124112655
__const3864_228 Variant_t VARIANT_INTEGER, 0, 1124112911
__const3864_229 Variant_t VARIANT_INTEGER, 0, 1124112911
__const3864_230 Variant_t VARIANT_INTEGER, 0, 1124113167
__const3864_231 Variant_t VARIANT_INTEGER, 0, 1124113167
__const3864_232 Variant_t VARIANT_INTEGER, 0, 1124113423
__const3864_233 Variant_t VARIANT_INTEGER, 0, 1124113423
__const3864_234 Variant_t VARIANT_INTEGER, 0, 1124113679
__const3864_235 Variant_t VARIANT_INTEGER, 0, 1124113679
__const3864_236 Variant_t VARIANT_INTEGER, 0, 1124113935
__const3864_237 Variant_t VARIANT_INTEGER, 0, 1124113935
__const3864_238 Variant_t VARIANT_INTEGER, 0, 1124114191
__const3864_239 Variant_t VARIANT_INTEGER, 0, 1124114191
__const3864_240 Variant_t VARIANT_INTEGER, 0, 855638152
__const3864_241 Variant_t VARIANT_INTEGER, 0, 855638148
__const3864_242 Variant_t VARIANT_INTEGER, 0, 855638150
__const3864_243 Variant_t VARIANT_INTEGER, 0, 855638246
__const3864_244 Variant_t VARIANT_INTEGER, 0, 855638244
__const3864_245 Variant_t VARIANT_INTEGER, 0, 855638799
__const3864_246 Variant_t VARIANT_INTEGER, 0, 855638115
__const3864_247 Variant_t VARIANT_INTEGER, 0, 855638157
__const3864_248 Variant_t VARIANT_INTEGER, 0, 855638216
__const3864_249 Variant_t VARIANT_INTEGER, 0, 318767336
__const3864_250 Variant_t VARIANT_INTEGER, 0, 318767337
__const3864_251 Variant_t VARIANT_INTEGER, 0, 318767184
__const3864_252 Variant_t VARIANT_INTEGER, 0, 318767192
__const3864_253 Variant_t VARIANT_INTEGER, 0, 318818319
__const3864_254 Variant_t VARIANT_INTEGER, 0, 318818063
__const3864_255 Variant_t VARIANT_INTEGER, 0, 318818063
__const3864_256 Variant_t VARIANT_INTEGER, 0, 318767168
__const3864_257 Variant_t VARIANT_INTEGER, 0, 318767176
__const3864_258 Variant_t VARIANT_INTEGER, 0, 318767309
__const3864_259 Variant_t VARIANT_INTEGER, 0, 4244635851
__const3864_260 Variant_t VARIANT_INTEGER, 0, 4244635843
__const3864_261 Variant_t VARIANT_INTEGER, 0, 4244635792
__const3864_262 Variant_t VARIANT_INTEGER, 0, 872442639
__const3864_263 Variant_t VARIANT_INTEGER, 0, 872440591
__const3864_264 Variant_t VARIANT_INTEGER, 0, 872441615
__const3864_265 Variant_t VARIANT_INTEGER, 0, 872479759
__const3864_266 Variant_t VARIANT_INTEGER, 0, 872480015
__const3864_267 Variant_t VARIANT_INTEGER, 0, 872480271
__const3864_268 Variant_t VARIANT_INTEGER, 0, 872469519
__const3864_269 Variant_t VARIANT_INTEGER, 0, 872475663
__const3864_270 Variant_t VARIANT_INTEGER, 0, 872475919
__const3864_271 Variant_t VARIANT_INTEGER, 0, 872471567
__const3864_272 Variant_t VARIANT_INTEGER, 0, 872471823
__const3864_273 Variant_t VARIANT_INTEGER, 0, 872477967
__const3864_274 Variant_t VARIANT_INTEGER, 0, 872471311
__const3864_275 Variant_t VARIANT_INTEGER, 0, 872472335
__const3864_276 Variant_t VARIANT_INTEGER, 0, 872475407
__const3864_277 Variant_t VARIANT_INTEGER, 0, 872476431
__const3864_278 Variant_t VARIANT_INTEGER, 0, 872444943
__const3864_279 Variant_t VARIANT_INTEGER, 0, 872445199
__const3864_280 Variant_t VARIANT_INTEGER, 0, 872445455
__const3864_281 Variant_t VARIANT_INTEGER, 0, 872440847
__const3864_282 Variant_t VARIANT_INTEGER, 0, 872441103
__const3864_283 Variant_t VARIANT_INTEGER, 0, 872441359
__const3864_284 Variant_t VARIANT_INTEGER, 0, 872473871
__const3864_285 Variant_t VARIANT_INTEGER, 0, 872469775
__const3864_286 Variant_t VARIANT_INTEGER, 0, 872478735
__const3864_287 Variant_t VARIANT_INTEGER, 0, 872478991
__const3864_288 Variant_t VARIANT_INTEGER, 0, 872479247
__const3864_289 Variant_t VARIANT_INTEGER, 0, 872474639
__const3864_290 Variant_t VARIANT_INTEGER, 0, 872474895
__const3864_291 Variant_t VARIANT_INTEGER, 0, 872470543
__const3864_292 Variant_t VARIANT_INTEGER, 0, 872470799
__const3864_293 Variant_t VARIANT_INTEGER, 0, 872441871
__const3864_294 Variant_t VARIANT_INTEGER, 0, 872442127
__const3864_295 Variant_t VARIANT_INTEGER, 0, 872442383
__const3864_296 Variant_t VARIANT_INTEGER, 0, 872471055
__const3864_297 Variant_t VARIANT_INTEGER, 0, 872472079
__const3864_298 Variant_t VARIANT_INTEGER, 0, 872472591
__const3864_299 Variant_t VARIANT_INTEGER, 0, 872473359
__const3864_300 Variant_t VARIANT_INTEGER, 0, 872473615
__const3864_301 Variant_t VARIANT_INTEGER, 0, 872475151
__const3864_302 Variant_t VARIANT_INTEGER, 0, 872476175
__const3864_303 Variant_t VARIANT_INTEGER, 0, 872478223
__const3864_304 Variant_t VARIANT_INTEGER, 0, 872479503
__const3864_305 Variant_t VARIANT_INTEGER, 0, 872477711
__const3864_306 Variant_t VARIANT_INTEGER, 0, 872953871
__const3864_307 Variant_t VARIANT_INTEGER, 0, 873019407
__const3864_308 Variant_t VARIANT_INTEGER, 0, 873084943
__const3864_309 Variant_t VARIANT_INTEGER, 0, 872429583
__const3864_310 Variant_t VARIANT_INTEGER, 0, 873150479
__const3864_311 Variant_t VARIANT_INTEGER, 0, 872691727
__const3864_312 Variant_t VARIANT_INTEGER, 0, 872757263
__const3864_313 Variant_t VARIANT_INTEGER, 0, 872888335
__const3864_314 Variant_t VARIANT_INTEGER, 0, 872822799
__const3864_315 Variant_t VARIANT_INTEGER, 0, 872626191
__const3864_316 Variant_t VARIANT_INTEGER, 0, 872495119
__const3864_317 Variant_t VARIANT_INTEGER, 0, 872560655
__const3864_318 Variant_t VARIANT_INTEGER, 0, 874264591
__const3864_319 Variant_t VARIANT_INTEGER, 0, 874330127
__const3864_320 Variant_t VARIANT_INTEGER, 0, 874395663
__const3864_321 Variant_t VARIANT_INTEGER, 0, 16807695
__const3864_322 Variant_t VARIANT_INTEGER, 0, 872439823
__const3864_323 Variant_t VARIANT_INTEGER, 0, 872440079
__const3864_324 Variant_t VARIANT_INTEGER, 0, 872440335
__const3864_325 Variant_t VARIANT_INTEGER, 0, 889377039
__const3864_326 Variant_t VARIANT_INTEGER, 0, 889512207
__const3864_327 Variant_t VARIANT_INTEGER, 0, 889647375
__const3864_328 Variant_t VARIANT_INTEGER, 0, 889377295
__const3864_329 Variant_t VARIANT_INTEGER, 0, 889512463
__const3864_330 Variant_t VARIANT_INTEGER, 0, 889647631
__const3864_331 Variant_t VARIANT_INTEGER, 0, 889377551
__const3864_332 Variant_t VARIANT_INTEGER, 0, 889647887
__const3864_333 Variant_t VARIANT_INTEGER, 0, 855666191
__const3864_334 Variant_t VARIANT_INTEGER, 0, 855666447
__const3864_335 Variant_t VARIANT_INTEGER, 0, 4245633551
__const3864_336 Variant_t VARIANT_INTEGER, 0, 4244664335
__const3864_337 Variant_t VARIANT_INTEGER, 0, 4244686095
__const3864_338 Variant_t VARIANT_INTEGER, 0, 4244685839
__const3864_339 Variant_t VARIANT_INTEGER, 0, 4244690703
__const3867_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
__const3867_0 Variant_t VARIANT_STRING, 0, __const3867_0_buffer
__const3867_1 Variant_t VARIANT_STRING, 0, __const3867_1_buffer
__const3867_2 Variant_t VARIANT_STRING, 0, __const3867_2_buffer
__const3867_3 Variant_t VARIANT_STRING, 0, __const3867_3_buffer
__const3867_4 Variant_t VARIANT_STRING, 0, __const3867_4_buffer
__const3867_5 Variant_t VARIANT_STRING, 0, __const3867_5_buffer
__const3867_6 Variant_t VARIANT_STRING, 0, __const3867_6_buffer
__const3867_7 Variant_t VARIANT_STRING, 0, __const3867_7_buffer
__const3867_8 Variant_t VARIANT_STRING, 0, __const3867_8_buffer
__const3867_9 Variant_t VARIANT_STRING, 0, __const3867_9_buffer
__const3867_10 Variant_t VARIANT_STRING, 0, __const3867_10_buffer
__const3867_11 Variant_t VARIANT_STRING, 0, __const3867_11_buffer
__const3867_12 Variant_t VARIANT_STRING, 0, __const3867_12_buffer
__const3867_13 Variant_t VARIANT_STRING, 0, __const3867_13_buffer
__const3867_14 Variant_t VARIANT_STRING, 0, __const3867_14_buffer
__const3867_15 Variant_t VARIANT_STRING, 0, __const3867_15_buffer
__const3867_16 Variant_t VARIANT_STRING, 0, __const3867_16_buffer
__const3867_17 Variant_t VARIANT_STRING, 0, __const3867_17_buffer
__const3867_18 Variant_t VARIANT_STRING, 0, __const3867_18_buffer
__const3867_19 Variant_t VARIANT_STRING, 0, __const3867_19_buffer
__const3867_20 Variant_t VARIANT_STRING, 0, __const3867_20_buffer
__const3867_21 Variant_t VARIANT_STRING, 0, __const3867_21_buffer
__const3867_22 Variant_t VARIANT_STRING, 0, __const3867_22_buffer
__const3867_23 Variant_t VARIANT_STRING, 0, __const3867_23_buffer
__const3867_24 Variant_t VARIANT_STRING, 0, __const3867_24_buffer
__const3867_25 Variant_t VARIANT_STRING, 0, __const3867_25_buffer
__const3867_26 Variant_t VARIANT_STRING, 0, __const3867_26_buffer
__const3867_27 Variant_t VARIANT_STRING, 0, __const3867_27_buffer
__const3867_28 Variant_t VARIANT_STRING, 0, __const3867_28_buffer
__const3867_29 Variant_t VARIANT_STRING, 0, __const3867_29_buffer
__const3867_30 Variant_t VARIANT_STRING, 0, __const3867_30_buffer
__const3867_31 Variant_t VARIANT_STRING, 0, __const3867_31_buffer
__const3867_32 Variant_t VARIANT_STRING, 0, __const3867_32_buffer
__const3867_33 Variant_t VARIANT_STRING, 0, __const3867_33_buffer
__const3867_34 Variant_t VARIANT_STRING, 0, __const3867_34_buffer
; Reuse already emitted buffer
__const3867_35 Variant_t VARIANT_STRING, 0, __literal456_buffer
; Reuse already emitted buffer
__const3867_36 Variant_t VARIANT_STRING, 0, __literal457_buffer
; Reuse already emitted buffer
__const3867_37 Variant_t VARIANT_STRING, 0, __literal458_buffer
; Reuse already emitted buffer
__const3867_38 Variant_t VARIANT_STRING, 0, __literal459_buffer
; Reuse already emitted buffer
__const3867_39 Variant_t VARIANT_STRING, 0, __literal460_buffer
; Reuse already emitted buffer
__const3867_40 Variant_t VARIANT_STRING, 0, __literal461_buffer
; Reuse already emitted buffer
__const3867_41 Variant_t VARIANT_STRING, 0, __literal462_buffer
; Reuse already emitted buffer
__const3867_42 Variant_t VARIANT_STRING, 0, __literal463_buffer
; Reuse already emitted buffer
__const3867_43 Variant_t VARIANT_STRING, 0, __literal464_buffer
; Reuse already emitted buffer
__const3867_44 Variant_t VARIANT_STRING, 0, __literal465_buffer
; Reuse already emitted buffer
__const3867_45 Variant_t VARIANT_STRING, 0, __literal466_buffer
__const3868_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dd 61657, 57817, 57561, 55774, 63193, 63449, 59609, 60121, 59865, 60633, 60889, 60377, 61145, 58075, 58331, 14867355, 14932891, 53465, 62425, 63705, 62169, 64729, 64985, 64217, 58585, 155, 58841, 62681, 61913, 63961, 65241, 65497, 64473, 62937, 59866, 53720, 55768, 57821, 59869, 51673, 49630, 51678, 57822, 59870, 61918, 63966
__const3871_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 223, 219, 1503, 0, 0
__const3874_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 479, 475, 477, 0, 0
__const3875_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 735, 731, 0, 0, 0
__const3876_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 991, 987, 2015, 0, 0
__const3877_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 0, 0, 1247, 0
__const3878_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 0, 0, 1759, 0
__const3879_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 222, 218, 0, 0, 0
__const3880_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 478, 474, 0, 0, 0
__const3881_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 734, 730, 0, 0, 0
__const3882_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 990, 986, 0, 0, 0
__const3883_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 1246, 1242, 0, 0, 0
__const3884_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 1502, 1498, 0, 0, 0
__const3885_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 1758, 1754, 0, 0, 0
__const3886_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 2014, 2010, 0, 0, 0
__const3887_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 49369, 0, 217, 221, 1499, 0
__const3888_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 53469, 0, 729, 733, 0, 0
__const3889_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 55517, 0, 985, 989, 2011, 0
__const3890_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 53464, 0, 728, 732, 0, 0
__const3891_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 55512, 0, 984, 988, 0, 0
__const3892_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 57565, 0, 0, 0, 0, 0
__const3893_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 59613, 0, 0, 0, 0, 0
__const3894_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 51417, 0, 0, 0, 0, 0
__const3895_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 49373, 0, 0, 0, 0, 0
__const3896_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 216, 220, 0, 0
__const3897_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 472, 476, 0, 0
__const3898_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 1240, 1244, 0, 0
__const3899_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 1496, 1500, 0, 0
__const3900_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 1752, 1756, 0, 0
__const3901_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 2008, 2012, 0, 0
__const3902_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 2013, 0, 0, 0, 0
__const3903_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 515483, 0, 0, 0, 0
__const3904_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 1497, 0, 0, 0, 0
__const3905_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 2009, 0, 0, 0, 0
__const3906_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 514459, 0, 0, 0, 0
__const3907_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 0, 0, 0, 1241
__const3909_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 0, 0, 0, 1753
__const3910_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 0, 0, 0, 1245
__const3912_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dw 0, 0, 0, 0, 0, 1757
__const3913_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 317798
__const3914_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 448870
__const3915_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 318822
__const3916_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 449894
__const3920_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 448923
__const3922_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 449947
__const3924_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 114910875
__const3925_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 115173019
__const3926_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 15773199
__const3927_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 0, 0, 0, 0, 0, 110095
__const3928_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 49368, 49372
__const3929_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 51416, 51420
__const3930_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 57560, 59612
__const3931_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 59608, 57564
__const3932_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 61656, 63708
__const3933_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 63704, 61660
__const3934_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 0, 49374
__const3935_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 0, 51422
__const3936_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 0, 57566
__const3937_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 0, 59614
__const3938_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 0, 61662
__const3939_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 0, 63710
__const3940_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 49370, 0
__const3941_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 51418, 0
__const3942_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 53466, 0
__const3943_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 55514, 0
__const3944_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 49371, 0
__const3945_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 51419, 0
__const3946_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 53467, 0
__const3947_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 55515, 0
__const3948_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 61659, 0
__const3949_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 61663, 0
__const3950_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 59611, 0
__const3951_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dd 59615, 0
__const3952_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 404 ; itemsCnt
__const3952_0 Variant_t VARIANT_STRING, 0, __const3952_0_buffer
__const3952_1 Variant_t VARIANT_STRING, 0, __const3952_1_buffer
__const3952_2 Variant_t VARIANT_STRING, 0, __const3952_2_buffer
__const3952_3 Variant_t VARIANT_STRING, 0, __const3952_3_buffer
__const3952_4 Variant_t VARIANT_STRING, 0, __const3952_4_buffer
__const3952_5 Variant_t VARIANT_STRING, 0, __const3952_5_buffer
__const3952_6 Variant_t VARIANT_STRING, 0, __const3952_6_buffer
__const3952_7 Variant_t VARIANT_STRING, 0, __const3952_7_buffer
__const3952_8 Variant_t VARIANT_STRING, 0, __const3952_8_buffer
__const3952_9 Variant_t VARIANT_STRING, 0, __const3952_9_buffer
__const3952_10 Variant_t VARIANT_STRING, 0, __const3952_10_buffer
__const3952_11 Variant_t VARIANT_STRING, 0, __const3952_11_buffer
__const3952_12 Variant_t VARIANT_STRING, 0, __const3952_12_buffer
__const3952_13 Variant_t VARIANT_STRING, 0, __const3952_13_buffer
__const3952_14 Variant_t VARIANT_STRING, 0, __const3952_14_buffer
__const3952_15 Variant_t VARIANT_STRING, 0, __const3952_15_buffer
__const3952_16 Variant_t VARIANT_STRING, 0, __const3952_16_buffer
__const3952_17 Variant_t VARIANT_STRING, 0, __const3952_17_buffer
__const3952_18 Variant_t VARIANT_STRING, 0, __const3952_18_buffer
__const3952_19 Variant_t VARIANT_STRING, 0, __const3952_19_buffer
__const3952_20 Variant_t VARIANT_STRING, 0, __const3952_20_buffer
__const3952_21 Variant_t VARIANT_STRING, 0, __const3952_21_buffer
__const3952_22 Variant_t VARIANT_STRING, 0, __const3952_22_buffer
__const3952_23 Variant_t VARIANT_STRING, 0, __const3952_23_buffer
__const3952_24 Variant_t VARIANT_STRING, 0, __const3952_24_buffer
__const3952_25 Variant_t VARIANT_STRING, 0, __const3952_25_buffer
__const3952_26 Variant_t VARIANT_STRING, 0, __const3952_26_buffer
__const3952_27 Variant_t VARIANT_STRING, 0, __const3952_27_buffer
__const3952_28 Variant_t VARIANT_STRING, 0, __const3952_28_buffer
__const3952_29 Variant_t VARIANT_STRING, 0, __const3952_29_buffer
__const3952_30 Variant_t VARIANT_STRING, 0, __const3952_30_buffer
__const3952_31 Variant_t VARIANT_STRING, 0, __const3952_31_buffer
__const3952_32 Variant_t VARIANT_STRING, 0, __const3952_32_buffer
__const3952_33 Variant_t VARIANT_STRING, 0, __const3952_33_buffer
__const3952_34 Variant_t VARIANT_STRING, 0, __const3952_34_buffer
__const3952_35 Variant_t VARIANT_STRING, 0, __const3952_35_buffer
__const3952_36 Variant_t VARIANT_STRING, 0, __const3952_36_buffer
__const3952_37 Variant_t VARIANT_STRING, 0, __const3952_37_buffer
__const3952_38 Variant_t VARIANT_STRING, 0, __const3952_38_buffer
__const3952_39 Variant_t VARIANT_STRING, 0, __const3952_39_buffer
__const3952_40 Variant_t VARIANT_STRING, 0, __const3952_40_buffer
__const3952_41 Variant_t VARIANT_STRING, 0, __const3952_41_buffer
__const3952_42 Variant_t VARIANT_STRING, 0, __const3952_42_buffer
__const3952_43 Variant_t VARIANT_STRING, 0, __const3952_43_buffer
__const3952_44 Variant_t VARIANT_STRING, 0, __const3952_44_buffer
__const3952_45 Variant_t VARIANT_STRING, 0, __const3952_45_buffer
__const3952_46 Variant_t VARIANT_STRING, 0, __const3952_46_buffer
__const3952_47 Variant_t VARIANT_STRING, 0, __const3952_47_buffer
__const3952_48 Variant_t VARIANT_STRING, 0, __const3952_48_buffer
__const3952_49 Variant_t VARIANT_STRING, 0, __const3952_49_buffer
__const3952_50 Variant_t VARIANT_STRING, 0, __const3952_50_buffer
__const3952_51 Variant_t VARIANT_STRING, 0, __const3952_51_buffer
__const3952_52 Variant_t VARIANT_STRING, 0, __const3952_52_buffer
__const3952_53 Variant_t VARIANT_STRING, 0, __const3952_53_buffer
__const3952_54 Variant_t VARIANT_STRING, 0, __const3952_54_buffer
__const3952_55 Variant_t VARIANT_STRING, 0, __const3952_55_buffer
__const3952_56 Variant_t VARIANT_STRING, 0, __const3952_56_buffer
__const3952_57 Variant_t VARIANT_STRING, 0, __const3952_57_buffer
__const3952_58 Variant_t VARIANT_STRING, 0, __const3952_58_buffer
__const3952_59 Variant_t VARIANT_STRING, 0, __const3952_59_buffer
__const3952_60 Variant_t VARIANT_STRING, 0, __const3952_60_buffer
__const3952_61 Variant_t VARIANT_STRING, 0, __const3952_61_buffer
__const3952_62 Variant_t VARIANT_STRING, 0, __const3952_62_buffer
__const3952_63 Variant_t VARIANT_STRING, 0, __const3952_63_buffer
__const3952_64 Variant_t VARIANT_STRING, 0, __const3952_64_buffer
__const3952_65 Variant_t VARIANT_STRING, 0, __const3952_65_buffer
__const3952_66 Variant_t VARIANT_STRING, 0, __const3952_66_buffer
__const3952_67 Variant_t VARIANT_STRING, 0, __const3952_67_buffer
__const3952_68 Variant_t VARIANT_STRING, 0, __const3952_68_buffer
__const3952_69 Variant_t VARIANT_STRING, 0, __const3952_69_buffer
__const3952_70 Variant_t VARIANT_STRING, 0, __const3952_70_buffer
__const3952_71 Variant_t VARIANT_STRING, 0, __const3952_71_buffer
__const3952_72 Variant_t VARIANT_STRING, 0, __const3952_72_buffer
__const3952_73 Variant_t VARIANT_STRING, 0, __const3952_73_buffer
__const3952_74 Variant_t VARIANT_STRING, 0, __const3952_74_buffer
__const3952_75 Variant_t VARIANT_STRING, 0, __const3952_75_buffer
__const3952_76 Variant_t VARIANT_STRING, 0, __const3952_76_buffer
__const3952_77 Variant_t VARIANT_STRING, 0, __const3952_77_buffer
__const3952_78 Variant_t VARIANT_STRING, 0, __const3952_78_buffer
__const3952_79 Variant_t VARIANT_STRING, 0, __const3952_79_buffer
__const3952_80 Variant_t VARIANT_STRING, 0, __const3952_80_buffer
__const3952_81 Variant_t VARIANT_STRING, 0, __const3952_81_buffer
__const3952_82 Variant_t VARIANT_STRING, 0, __const3952_82_buffer
__const3952_83 Variant_t VARIANT_STRING, 0, __const3952_83_buffer
__const3952_84 Variant_t VARIANT_STRING, 0, __const3952_84_buffer
__const3952_85 Variant_t VARIANT_STRING, 0, __const3952_85_buffer
__const3952_86 Variant_t VARIANT_STRING, 0, __const3952_86_buffer
__const3952_87 Variant_t VARIANT_STRING, 0, __const3952_87_buffer
__const3952_88 Variant_t VARIANT_STRING, 0, __const3952_88_buffer
__const3952_89 Variant_t VARIANT_STRING, 0, __const3952_89_buffer
__const3952_90 Variant_t VARIANT_STRING, 0, __const3952_90_buffer
__const3952_91 Variant_t VARIANT_STRING, 0, __const3952_91_buffer
__const3952_92 Variant_t VARIANT_STRING, 0, __const3952_92_buffer
__const3952_93 Variant_t VARIANT_STRING, 0, __const3952_93_buffer
__const3952_94 Variant_t VARIANT_STRING, 0, __const3952_94_buffer
__const3952_95 Variant_t VARIANT_STRING, 0, __const3952_95_buffer
__const3952_96 Variant_t VARIANT_STRING, 0, __const3952_96_buffer
__const3952_97 Variant_t VARIANT_STRING, 0, __const3952_97_buffer
__const3952_98 Variant_t VARIANT_STRING, 0, __const3952_98_buffer
__const3952_99 Variant_t VARIANT_STRING, 0, __const3952_99_buffer
__const3952_100 Variant_t VARIANT_STRING, 0, __const3952_100_buffer
__const3952_101 Variant_t VARIANT_STRING, 0, __const3952_101_buffer
__const3952_102 Variant_t VARIANT_STRING, 0, __const3952_102_buffer
__const3952_103 Variant_t VARIANT_STRING, 0, __const3952_103_buffer
__const3952_104 Variant_t VARIANT_STRING, 0, __const3952_104_buffer
__const3952_105 Variant_t VARIANT_STRING, 0, __const3952_105_buffer
__const3952_106 Variant_t VARIANT_STRING, 0, __const3952_106_buffer
__const3952_107 Variant_t VARIANT_STRING, 0, __const3952_107_buffer
__const3952_108 Variant_t VARIANT_STRING, 0, __const3952_108_buffer
__const3952_109 Variant_t VARIANT_STRING, 0, __const3952_109_buffer
__const3952_110 Variant_t VARIANT_STRING, 0, __const3952_110_buffer
__const3952_111 Variant_t VARIANT_STRING, 0, __const3952_111_buffer
__const3952_112 Variant_t VARIANT_STRING, 0, __const3952_112_buffer
__const3952_113 Variant_t VARIANT_STRING, 0, __const3952_113_buffer
__const3952_114 Variant_t VARIANT_STRING, 0, __const3952_114_buffer
__const3952_115 Variant_t VARIANT_STRING, 0, __const3952_115_buffer
__const3952_116 Variant_t VARIANT_STRING, 0, __const3952_116_buffer
__const3952_117 Variant_t VARIANT_STRING, 0, __const3952_117_buffer
__const3952_118 Variant_t VARIANT_STRING, 0, __const3952_118_buffer
__const3952_119 Variant_t VARIANT_STRING, 0, __const3952_119_buffer
__const3952_120 Variant_t VARIANT_STRING, 0, __const3952_120_buffer
__const3952_121 Variant_t VARIANT_STRING, 0, __const3952_121_buffer
__const3952_122 Variant_t VARIANT_STRING, 0, __const3952_122_buffer
__const3952_123 Variant_t VARIANT_STRING, 0, __const3952_123_buffer
__const3952_124 Variant_t VARIANT_STRING, 0, __const3952_124_buffer
__const3952_125 Variant_t VARIANT_STRING, 0, __const3952_125_buffer
__const3952_126 Variant_t VARIANT_STRING, 0, __const3952_126_buffer
__const3952_127 Variant_t VARIANT_STRING, 0, __const3952_127_buffer
__const3952_128 Variant_t VARIANT_STRING, 0, __const3952_128_buffer
__const3952_129 Variant_t VARIANT_STRING, 0, __const3952_129_buffer
__const3952_130 Variant_t VARIANT_STRING, 0, __const3952_130_buffer
__const3952_131 Variant_t VARIANT_STRING, 0, __const3952_131_buffer
__const3952_132 Variant_t VARIANT_STRING, 0, __const3952_132_buffer
__const3952_133 Variant_t VARIANT_STRING, 0, __const3952_133_buffer
__const3952_134 Variant_t VARIANT_STRING, 0, __const3952_134_buffer
__const3952_135 Variant_t VARIANT_STRING, 0, __const3952_135_buffer
__const3952_136 Variant_t VARIANT_STRING, 0, __const3952_136_buffer
__const3952_137 Variant_t VARIANT_STRING, 0, __const3952_137_buffer
__const3952_138 Variant_t VARIANT_STRING, 0, __const3952_138_buffer
__const3952_139 Variant_t VARIANT_STRING, 0, __const3952_139_buffer
__const3952_140 Variant_t VARIANT_STRING, 0, __const3952_140_buffer
__const3952_141 Variant_t VARIANT_STRING, 0, __const3952_141_buffer
__const3952_142 Variant_t VARIANT_STRING, 0, __const3952_142_buffer
__const3952_143 Variant_t VARIANT_STRING, 0, __const3952_143_buffer
__const3952_144 Variant_t VARIANT_STRING, 0, __const3952_144_buffer
__const3952_145 Variant_t VARIANT_STRING, 0, __const3952_145_buffer
__const3952_146 Variant_t VARIANT_STRING, 0, __const3952_146_buffer
__const3952_147 Variant_t VARIANT_STRING, 0, __const3952_147_buffer
__const3952_148 Variant_t VARIANT_STRING, 0, __const3952_148_buffer
__const3952_149 Variant_t VARIANT_STRING, 0, __const3952_149_buffer
__const3952_150 Variant_t VARIANT_STRING, 0, __const3952_150_buffer
__const3952_151 Variant_t VARIANT_STRING, 0, __const3952_151_buffer
__const3952_152 Variant_t VARIANT_STRING, 0, __const3952_152_buffer
__const3952_153 Variant_t VARIANT_STRING, 0, __const3952_153_buffer
__const3952_154 Variant_t VARIANT_STRING, 0, __const3952_154_buffer
__const3952_155 Variant_t VARIANT_STRING, 0, __const3952_155_buffer
__const3952_156 Variant_t VARIANT_STRING, 0, __const3952_156_buffer
__const3952_157 Variant_t VARIANT_STRING, 0, __const3952_157_buffer
__const3952_158 Variant_t VARIANT_STRING, 0, __const3952_158_buffer
__const3952_159 Variant_t VARIANT_STRING, 0, __const3952_159_buffer
__const3952_160 Variant_t VARIANT_STRING, 0, __const3952_160_buffer
__const3952_161 Variant_t VARIANT_STRING, 0, __const3952_161_buffer
__const3952_162 Variant_t VARIANT_STRING, 0, __const3952_162_buffer
__const3952_163 Variant_t VARIANT_STRING, 0, __const3952_163_buffer
__const3952_164 Variant_t VARIANT_STRING, 0, __const3952_164_buffer
__const3952_165 Variant_t VARIANT_STRING, 0, __const3952_165_buffer
__const3952_166 Variant_t VARIANT_STRING, 0, __const3952_166_buffer
__const3952_167 Variant_t VARIANT_STRING, 0, __const3952_167_buffer
__const3952_168 Variant_t VARIANT_STRING, 0, __const3952_168_buffer
__const3952_169 Variant_t VARIANT_STRING, 0, __const3952_169_buffer
__const3952_170 Variant_t VARIANT_STRING, 0, __const3952_170_buffer
__const3952_171 Variant_t VARIANT_STRING, 0, __const3952_171_buffer
__const3952_172 Variant_t VARIANT_STRING, 0, __const3952_172_buffer
__const3952_173 Variant_t VARIANT_STRING, 0, __const3952_173_buffer
__const3952_174 Variant_t VARIANT_STRING, 0, __const3952_174_buffer
__const3952_175 Variant_t VARIANT_STRING, 0, __const3952_175_buffer
__const3952_176 Variant_t VARIANT_STRING, 0, __const3952_176_buffer
__const3952_177 Variant_t VARIANT_STRING, 0, __const3952_177_buffer
__const3952_178 Variant_t VARIANT_STRING, 0, __const3952_178_buffer
__const3952_179 Variant_t VARIANT_STRING, 0, __const3952_179_buffer
__const3952_180 Variant_t VARIANT_STRING, 0, __const3952_180_buffer
__const3952_181 Variant_t VARIANT_STRING, 0, __const3952_181_buffer
__const3952_182 Variant_t VARIANT_STRING, 0, __const3952_182_buffer
__const3952_183 Variant_t VARIANT_STRING, 0, __const3952_183_buffer
__const3952_184 Variant_t VARIANT_STRING, 0, __const3952_184_buffer
__const3952_185 Variant_t VARIANT_STRING, 0, __const3952_185_buffer
__const3952_186 Variant_t VARIANT_STRING, 0, __const3952_186_buffer
__const3952_187 Variant_t VARIANT_STRING, 0, __const3952_187_buffer
__const3952_188 Variant_t VARIANT_STRING, 0, __const3952_188_buffer
__const3952_189 Variant_t VARIANT_STRING, 0, __const3952_189_buffer
__const3952_190 Variant_t VARIANT_STRING, 0, __const3952_190_buffer
__const3952_191 Variant_t VARIANT_STRING, 0, __const3952_191_buffer
__const3952_192 Variant_t VARIANT_STRING, 0, __const3952_192_buffer
__const3952_193 Variant_t VARIANT_STRING, 0, __const3952_193_buffer
__const3952_194 Variant_t VARIANT_STRING, 0, __const3952_194_buffer
__const3952_195 Variant_t VARIANT_STRING, 0, __const3952_195_buffer
__const3952_196 Variant_t VARIANT_STRING, 0, __const3952_196_buffer
__const3952_197 Variant_t VARIANT_STRING, 0, __const3952_197_buffer
__const3952_198 Variant_t VARIANT_STRING, 0, __const3952_198_buffer
__const3952_199 Variant_t VARIANT_STRING, 0, __const3952_199_buffer
__const3952_200 Variant_t VARIANT_STRING, 0, __const3952_200_buffer
__const3952_201 Variant_t VARIANT_STRING, 0, __const3952_201_buffer
__const3952_202 Variant_t VARIANT_STRING, 0, __const3952_202_buffer
__const3952_203 Variant_t VARIANT_STRING, 0, __const3952_203_buffer
__const3952_204 Variant_t VARIANT_STRING, 0, __const3952_204_buffer
__const3952_205 Variant_t VARIANT_STRING, 0, __const3952_205_buffer
__const3952_206 Variant_t VARIANT_STRING, 0, __const3952_206_buffer
__const3952_207 Variant_t VARIANT_STRING, 0, __const3952_207_buffer
__const3952_208 Variant_t VARIANT_STRING, 0, __const3952_208_buffer
__const3952_209 Variant_t VARIANT_STRING, 0, __const3952_209_buffer
__const3952_210 Variant_t VARIANT_STRING, 0, __const3952_210_buffer
__const3952_211 Variant_t VARIANT_STRING, 0, __const3952_211_buffer
__const3952_212 Variant_t VARIANT_STRING, 0, __const3952_212_buffer
__const3952_213 Variant_t VARIANT_STRING, 0, __const3952_213_buffer
__const3952_214 Variant_t VARIANT_STRING, 0, __const3952_214_buffer
__const3952_215 Variant_t VARIANT_STRING, 0, __const3952_215_buffer
__const3952_216 Variant_t VARIANT_STRING, 0, __const3952_216_buffer
__const3952_217 Variant_t VARIANT_STRING, 0, __const3952_217_buffer
__const3952_218 Variant_t VARIANT_STRING, 0, __const3952_218_buffer
__const3952_219 Variant_t VARIANT_STRING, 0, __const3952_219_buffer
__const3952_220 Variant_t VARIANT_STRING, 0, __const3952_220_buffer
__const3952_221 Variant_t VARIANT_STRING, 0, __const3952_221_buffer
__const3952_222 Variant_t VARIANT_STRING, 0, __const3952_222_buffer
__const3952_223 Variant_t VARIANT_STRING, 0, __const3952_223_buffer
__const3952_224 Variant_t VARIANT_STRING, 0, __const3952_224_buffer
__const3952_225 Variant_t VARIANT_STRING, 0, __const3952_225_buffer
__const3952_226 Variant_t VARIANT_STRING, 0, __const3952_226_buffer
__const3952_227 Variant_t VARIANT_STRING, 0, __const3952_227_buffer
__const3952_228 Variant_t VARIANT_STRING, 0, __const3952_228_buffer
__const3952_229 Variant_t VARIANT_STRING, 0, __const3952_229_buffer
__const3952_230 Variant_t VARIANT_STRING, 0, __const3952_230_buffer
__const3952_231 Variant_t VARIANT_STRING, 0, __const3952_231_buffer
__const3952_232 Variant_t VARIANT_STRING, 0, __const3952_232_buffer
__const3952_233 Variant_t VARIANT_STRING, 0, __const3952_233_buffer
__const3952_234 Variant_t VARIANT_STRING, 0, __const3952_234_buffer
__const3952_235 Variant_t VARIANT_STRING, 0, __const3952_235_buffer
__const3952_236 Variant_t VARIANT_STRING, 0, __const3952_236_buffer
__const3952_237 Variant_t VARIANT_STRING, 0, __const3952_237_buffer
__const3952_238 Variant_t VARIANT_STRING, 0, __const3952_238_buffer
__const3952_239 Variant_t VARIANT_STRING, 0, __const3952_239_buffer
__const3952_240 Variant_t VARIANT_STRING, 0, __const3952_240_buffer
__const3952_241 Variant_t VARIANT_STRING, 0, __const3952_241_buffer
__const3952_242 Variant_t VARIANT_STRING, 0, __const3952_242_buffer
__const3952_243 Variant_t VARIANT_STRING, 0, __const3952_243_buffer
__const3952_244 Variant_t VARIANT_STRING, 0, __const3952_244_buffer
__const3952_245 Variant_t VARIANT_STRING, 0, __const3952_245_buffer
__const3952_246 Variant_t VARIANT_STRING, 0, __const3952_246_buffer
__const3952_247 Variant_t VARIANT_STRING, 0, __const3952_247_buffer
__const3952_248 Variant_t VARIANT_STRING, 0, __const3952_248_buffer
__const3952_249 Variant_t VARIANT_STRING, 0, __const3952_249_buffer
__const3952_250 Variant_t VARIANT_STRING, 0, __const3952_250_buffer
__const3952_251 Variant_t VARIANT_STRING, 0, __const3952_251_buffer
__const3952_252 Variant_t VARIANT_STRING, 0, __const3952_252_buffer
__const3952_253 Variant_t VARIANT_STRING, 0, __const3952_253_buffer
__const3952_254 Variant_t VARIANT_STRING, 0, __const3952_254_buffer
__const3952_255 Variant_t VARIANT_STRING, 0, __const3952_255_buffer
__const3952_256 Variant_t VARIANT_STRING, 0, __const3952_256_buffer
__const3952_257 Variant_t VARIANT_STRING, 0, __const3952_257_buffer
__const3952_258 Variant_t VARIANT_STRING, 0, __const3952_258_buffer
__const3952_259 Variant_t VARIANT_STRING, 0, __const3952_259_buffer
__const3952_260 Variant_t VARIANT_STRING, 0, __const3952_260_buffer
__const3952_261 Variant_t VARIANT_STRING, 0, __const3952_261_buffer
__const3952_262 Variant_t VARIANT_STRING, 0, __const3952_262_buffer
__const3952_263 Variant_t VARIANT_STRING, 0, __const3952_263_buffer
__const3952_264 Variant_t VARIANT_STRING, 0, __const3952_264_buffer
__const3952_265 Variant_t VARIANT_STRING, 0, __const3952_265_buffer
__const3952_266 Variant_t VARIANT_STRING, 0, __const3952_266_buffer
__const3952_267 Variant_t VARIANT_STRING, 0, __const3952_267_buffer
__const3952_268 Variant_t VARIANT_STRING, 0, __const3952_268_buffer
__const3952_269 Variant_t VARIANT_STRING, 0, __const3952_269_buffer
__const3952_270 Variant_t VARIANT_STRING, 0, __const3952_270_buffer
__const3952_271 Variant_t VARIANT_STRING, 0, __const3952_271_buffer
__const3952_272 Variant_t VARIANT_STRING, 0, __const3952_272_buffer
__const3952_273 Variant_t VARIANT_STRING, 0, __const3952_273_buffer
__const3952_274 Variant_t VARIANT_STRING, 0, __const3952_274_buffer
__const3952_275 Variant_t VARIANT_STRING, 0, __const3952_275_buffer
__const3952_276 Variant_t VARIANT_STRING, 0, __const3952_276_buffer
__const3952_277 Variant_t VARIANT_STRING, 0, __const3952_277_buffer
__const3952_278 Variant_t VARIANT_STRING, 0, __const3952_278_buffer
__const3952_279 Variant_t VARIANT_STRING, 0, __const3952_279_buffer
__const3952_280 Variant_t VARIANT_STRING, 0, __const3952_280_buffer
__const3952_281 Variant_t VARIANT_STRING, 0, __const3952_281_buffer
__const3952_282 Variant_t VARIANT_STRING, 0, __const3952_282_buffer
__const3952_283 Variant_t VARIANT_STRING, 0, __const3952_283_buffer
__const3952_284 Variant_t VARIANT_STRING, 0, __const3952_284_buffer
__const3952_285 Variant_t VARIANT_STRING, 0, __const3952_285_buffer
__const3952_286 Variant_t VARIANT_STRING, 0, __const3952_286_buffer
__const3952_287 Variant_t VARIANT_STRING, 0, __const3952_287_buffer
__const3952_288 Variant_t VARIANT_STRING, 0, __const3952_288_buffer
__const3952_289 Variant_t VARIANT_STRING, 0, __const3952_289_buffer
__const3952_290 Variant_t VARIANT_STRING, 0, __const3952_290_buffer
__const3952_291 Variant_t VARIANT_STRING, 0, __const3952_291_buffer
__const3952_292 Variant_t VARIANT_STRING, 0, __const3952_292_buffer
__const3952_293 Variant_t VARIANT_STRING, 0, __const3952_293_buffer
__const3952_294 Variant_t VARIANT_STRING, 0, __const3952_294_buffer
__const3952_295 Variant_t VARIANT_STRING, 0, __const3952_295_buffer
__const3952_296 Variant_t VARIANT_STRING, 0, __const3952_296_buffer
__const3952_297 Variant_t VARIANT_STRING, 0, __const3952_297_buffer
__const3952_298 Variant_t VARIANT_STRING, 0, __const3952_298_buffer
__const3952_299 Variant_t VARIANT_STRING, 0, __const3952_299_buffer
__const3952_300 Variant_t VARIANT_STRING, 0, __const3952_300_buffer
__const3952_301 Variant_t VARIANT_STRING, 0, __const3952_301_buffer
__const3952_302 Variant_t VARIANT_STRING, 0, __const3952_302_buffer
__const3952_303 Variant_t VARIANT_STRING, 0, __const3952_303_buffer
__const3952_304 Variant_t VARIANT_STRING, 0, __const3952_304_buffer
__const3952_305 Variant_t VARIANT_STRING, 0, __const3952_305_buffer
__const3952_306 Variant_t VARIANT_STRING, 0, __const3952_306_buffer
__const3952_307 Variant_t VARIANT_STRING, 0, __const3952_307_buffer
__const3952_308 Variant_t VARIANT_STRING, 0, __const3952_308_buffer
__const3952_309 Variant_t VARIANT_STRING, 0, __const3952_309_buffer
__const3952_310 Variant_t VARIANT_STRING, 0, __const3952_310_buffer
__const3952_311 Variant_t VARIANT_STRING, 0, __const3952_311_buffer
__const3952_312 Variant_t VARIANT_STRING, 0, __const3952_312_buffer
__const3952_313 Variant_t VARIANT_STRING, 0, __const3952_313_buffer
__const3952_314 Variant_t VARIANT_STRING, 0, __const3952_314_buffer
__const3952_315 Variant_t VARIANT_STRING, 0, __const3952_315_buffer
__const3952_316 Variant_t VARIANT_STRING, 0, __const3952_316_buffer
__const3952_317 Variant_t VARIANT_STRING, 0, __const3952_317_buffer
__const3952_318 Variant_t VARIANT_STRING, 0, __const3952_318_buffer
__const3952_319 Variant_t VARIANT_STRING, 0, __const3952_319_buffer
__const3952_320 Variant_t VARIANT_STRING, 0, __const3952_320_buffer
__const3952_321 Variant_t VARIANT_STRING, 0, __const3952_321_buffer
__const3952_322 Variant_t VARIANT_STRING, 0, __const3952_322_buffer
__const3952_323 Variant_t VARIANT_STRING, 0, __const3952_323_buffer
__const3952_324 Variant_t VARIANT_STRING, 0, __const3952_324_buffer
__const3952_325 Variant_t VARIANT_STRING, 0, __const3952_325_buffer
__const3952_326 Variant_t VARIANT_STRING, 0, __const3952_326_buffer
__const3952_327 Variant_t VARIANT_STRING, 0, __const3952_327_buffer
; Reuse already emitted buffer
__const3952_328 Variant_t VARIANT_STRING, 0, __const3952_321_buffer
__const3952_329 Variant_t VARIANT_STRING, 0, __const3952_329_buffer
__const3952_330 Variant_t VARIANT_STRING, 0, __const3952_330_buffer
__const3952_331 Variant_t VARIANT_STRING, 0, __const3952_331_buffer
__const3952_332 Variant_t VARIANT_STRING, 0, __const3952_332_buffer
__const3952_333 Variant_t VARIANT_STRING, 0, __const3952_333_buffer
__const3952_334 Variant_t VARIANT_STRING, 0, __const3952_334_buffer
__const3952_335 Variant_t VARIANT_STRING, 0, __const3952_335_buffer
__const3952_336 Variant_t VARIANT_STRING, 0, __const3952_336_buffer
__const3952_337 Variant_t VARIANT_STRING, 0, __const3952_337_buffer
__const3952_338 Variant_t VARIANT_STRING, 0, __const3952_338_buffer
__const3952_339 Variant_t VARIANT_STRING, 0, __const3952_339_buffer
__const3952_340 Variant_t VARIANT_STRING, 0, __const3952_340_buffer
__const3952_341 Variant_t VARIANT_STRING, 0, __const3952_341_buffer
__const3952_342 Variant_t VARIANT_STRING, 0, __const3952_342_buffer
__const3952_343 Variant_t VARIANT_STRING, 0, __const3952_343_buffer
__const3952_344 Variant_t VARIANT_STRING, 0, __const3952_344_buffer
__const3952_345 Variant_t VARIANT_STRING, 0, __const3952_345_buffer
__const3952_346 Variant_t VARIANT_STRING, 0, __const3952_346_buffer
__const3952_347 Variant_t VARIANT_STRING, 0, __const3952_347_buffer
__const3952_348 Variant_t VARIANT_STRING, 0, __const3952_348_buffer
__const3952_349 Variant_t VARIANT_STRING, 0, __const3952_349_buffer
__const3952_350 Variant_t VARIANT_STRING, 0, __const3952_350_buffer
__const3952_351 Variant_t VARIANT_STRING, 0, __const3952_351_buffer
__const3952_352 Variant_t VARIANT_STRING, 0, __const3952_352_buffer
__const3952_353 Variant_t VARIANT_STRING, 0, __const3952_353_buffer
__const3952_354 Variant_t VARIANT_STRING, 0, __const3952_354_buffer
__const3952_355 Variant_t VARIANT_STRING, 0, __const3952_355_buffer
__const3952_356 Variant_t VARIANT_STRING, 0, __const3952_356_buffer
__const3952_357 Variant_t VARIANT_STRING, 0, __const3952_357_buffer
__const3952_358 Variant_t VARIANT_STRING, 0, __const3952_358_buffer
__const3952_359 Variant_t VARIANT_STRING, 0, __const3952_359_buffer
__const3952_360 Variant_t VARIANT_STRING, 0, __const3952_360_buffer
__const3952_361 Variant_t VARIANT_STRING, 0, __const3952_361_buffer
__const3952_362 Variant_t VARIANT_STRING, 0, __const3952_362_buffer
__const3952_363 Variant_t VARIANT_STRING, 0, __const3952_363_buffer
__const3952_364 Variant_t VARIANT_STRING, 0, __const3952_364_buffer
__const3952_365 Variant_t VARIANT_STRING, 0, __const3952_365_buffer
__const3952_366 Variant_t VARIANT_STRING, 0, __const3952_366_buffer
__const3952_367 Variant_t VARIANT_STRING, 0, __const3952_367_buffer
__const3952_368 Variant_t VARIANT_STRING, 0, __const3952_368_buffer
__const3952_369 Variant_t VARIANT_STRING, 0, __const3952_369_buffer
__const3952_370 Variant_t VARIANT_STRING, 0, __const3952_370_buffer
__const3952_371 Variant_t VARIANT_STRING, 0, __const3952_371_buffer
__const3952_372 Variant_t VARIANT_STRING, 0, __const3952_372_buffer
__const3952_373 Variant_t VARIANT_STRING, 0, __const3952_373_buffer
__const3952_374 Variant_t VARIANT_STRING, 0, __const3952_374_buffer
__const3952_375 Variant_t VARIANT_STRING, 0, __const3952_375_buffer
__const3952_376 Variant_t VARIANT_STRING, 0, __const3952_376_buffer
__const3952_377 Variant_t VARIANT_STRING, 0, __const3952_377_buffer
__const3952_378 Variant_t VARIANT_STRING, 0, __const3952_378_buffer
__const3952_379 Variant_t VARIANT_STRING, 0, __const3952_379_buffer
__const3952_380 Variant_t VARIANT_STRING, 0, __const3952_380_buffer
__const3952_381 Variant_t VARIANT_STRING, 0, __const3952_381_buffer
__const3952_382 Variant_t VARIANT_STRING, 0, __const3952_382_buffer
__const3952_383 Variant_t VARIANT_STRING, 0, __const3952_383_buffer
__const3952_384 Variant_t VARIANT_STRING, 0, __const3952_384_buffer
__const3952_385 Variant_t VARIANT_STRING, 0, __const3952_385_buffer
__const3952_386 Variant_t VARIANT_STRING, 0, __const3952_386_buffer
__const3952_387 Variant_t VARIANT_STRING, 0, __const3952_387_buffer
__const3952_388 Variant_t VARIANT_STRING, 0, __const3952_388_buffer
__const3952_389 Variant_t VARIANT_STRING, 0, __const3952_389_buffer
__const3952_390 Variant_t VARIANT_STRING, 0, __const3952_390_buffer
__const3952_391 Variant_t VARIANT_STRING, 0, __const3952_391_buffer
__const3952_392 Variant_t VARIANT_STRING, 0, __const3952_392_buffer
__const3952_393 Variant_t VARIANT_STRING, 0, __const3952_393_buffer
__const3952_394 Variant_t VARIANT_STRING, 0, __const3952_394_buffer
__const3952_395 Variant_t VARIANT_STRING, 0, __const3952_395_buffer
__const3952_396 Variant_t VARIANT_STRING, 0, __const3952_396_buffer
__const3952_397 Variant_t VARIANT_STRING, 0, __const3952_397_buffer
__const3952_398 Variant_t VARIANT_STRING, 0, __const3952_398_buffer
__const3952_399 Variant_t VARIANT_STRING, 0, __const3952_399_buffer
__const3952_400 Variant_t VARIANT_STRING, 0, __const3952_400_buffer
__const3952_401 Variant_t VARIANT_STRING, 0, __const3952_401_buffer
__const3952_402 Variant_t VARIANT_STRING, 0, __const3952_402_buffer
__const3952_403 Variant_t VARIANT_STRING, 0, __const3952_403_buffer
; iter 3
X64_REGISTER_NAMES_0_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_0_bufferBytes
X64_REGISTER_NAMES_1_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_1_bufferBytes
X64_REGISTER_NAMES_2_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_2_bufferBytes
X64_REGISTER_NAMES_3_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_3_bufferBytes
X64_REGISTER_NAMES_4_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_4_bufferBytes
X64_REGISTER_NAMES_5_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_5_bufferBytes
X64_REGISTER_NAMES_6_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_6_bufferBytes
X64_REGISTER_NAMES_7_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_7_bufferBytes
X64_REGISTER_NAMES_8_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_8_bufferBytes
X64_REGISTER_NAMES_9_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_9_bufferBytes
X64_REGISTER_NAMES_10_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_10_bufferBytes
X64_REGISTER_NAMES_11_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_11_bufferBytes
X64_REGISTER_NAMES_12_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_12_bufferBytes
X64_REGISTER_NAMES_13_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_13_bufferBytes
X64_REGISTER_NAMES_14_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_14_bufferBytes
X64_REGISTER_NAMES_15_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_15_bufferBytes
X64_REGISTER_NAMES_16_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_16_bufferBytes
X64_REGISTER_NAMES_17_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_17_bufferBytes
X64_REGISTER_NAMES_18_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_18_bufferBytes
X64_REGISTER_NAMES_19_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_19_bufferBytes
X64_REGISTER_NAMES_20_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_20_bufferBytes
X64_REGISTER_NAMES_21_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_21_bufferBytes
X64_REGISTER_NAMES_22_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_22_bufferBytes
X64_REGISTER_NAMES_23_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_23_bufferBytes
X64_REGISTER_NAMES_24_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_24_bufferBytes
X64_REGISTER_NAMES_25_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_25_bufferBytes
X64_REGISTER_NAMES_26_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_26_bufferBytes
X64_REGISTER_NAMES_27_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_27_bufferBytes
X64_REGISTER_NAMES_28_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_28_bufferBytes
X64_REGISTER_NAMES_29_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_29_bufferBytes
X64_REGISTER_NAMES_30_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_30_bufferBytes
X64_REGISTER_NAMES_31_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_31_bufferBytes
X64_REGISTER_NAMES_32_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_32_bufferBytes
X64_REGISTER_NAMES_33_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_33_bufferBytes
X64_REGISTER_NAMES_34_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_34_bufferBytes
X64_REGISTER_NAMES_35_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_35_bufferBytes
X64_REGISTER_NAMES_36_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_36_bufferBytes
X64_REGISTER_NAMES_37_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_37_bufferBytes
X64_REGISTER_NAMES_38_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_38_bufferBytes
X64_REGISTER_NAMES_39_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_39_bufferBytes
X64_REGISTER_NAMES_40_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_40_bufferBytes
X64_REGISTER_NAMES_41_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_41_bufferBytes
X64_REGISTER_NAMES_42_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_42_bufferBytes
X64_REGISTER_NAMES_43_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_43_bufferBytes
X64_REGISTER_NAMES_44_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_44_bufferBytes
X64_REGISTER_NAMES_45_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_45_bufferBytes
X64_REGISTER_NAMES_46_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_46_bufferBytes
X64_REGISTER_NAMES_47_buffer Buffer_t 5 , -1, 0, X64_REGISTER_NAMES_47_bufferBytes
X64_REGISTER_NAMES_48_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_48_bufferBytes
X64_REGISTER_NAMES_49_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_49_bufferBytes
X64_REGISTER_NAMES_50_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_50_bufferBytes
X64_REGISTER_NAMES_51_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_51_bufferBytes
X64_REGISTER_NAMES_52_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_52_bufferBytes
X64_REGISTER_NAMES_53_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_53_bufferBytes
X64_REGISTER_NAMES_54_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_54_bufferBytes
X64_REGISTER_NAMES_55_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_55_bufferBytes
X64_REGISTER_NAMES_56_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_56_bufferBytes
X64_REGISTER_NAMES_57_buffer Buffer_t 3 , -1, 0, X64_REGISTER_NAMES_57_bufferBytes
X64_REGISTER_NAMES_58_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_58_bufferBytes
X64_REGISTER_NAMES_59_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_59_bufferBytes
X64_REGISTER_NAMES_60_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_60_bufferBytes
X64_REGISTER_NAMES_61_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_61_bufferBytes
X64_REGISTER_NAMES_62_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_62_bufferBytes
X64_REGISTER_NAMES_63_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_63_bufferBytes
X64_REGISTER_NAMES_64_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_64_bufferBytes
X64_REGISTER_NAMES_65_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_65_bufferBytes
X64_REGISTER_NAMES_66_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_66_bufferBytes
X64_REGISTER_NAMES_67_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_67_bufferBytes
X64_REGISTER_NAMES_68_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_68_bufferBytes
X64_REGISTER_NAMES_69_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_69_bufferBytes
X64_REGISTER_NAMES_70_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_70_bufferBytes
X64_REGISTER_NAMES_71_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_71_bufferBytes
X64_REGISTER_NAMES_72_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_72_bufferBytes
X64_REGISTER_NAMES_73_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_73_bufferBytes
X64_REGISTER_NAMES_74_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_74_bufferBytes
X64_REGISTER_NAMES_75_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_75_bufferBytes
X64_REGISTER_NAMES_76_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_76_bufferBytes
X64_REGISTER_NAMES_77_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_77_bufferBytes
X64_REGISTER_NAMES_78_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_78_bufferBytes
X64_REGISTER_NAMES_79_buffer Buffer_t 4 , -1, 0, X64_REGISTER_NAMES_79_bufferBytes
__const3857_0_buffer Buffer_t 5 , -1, 0, __const3857_0_bufferBytes
__const3857_1_buffer Buffer_t 5 , -1, 0, __const3857_1_bufferBytes
__const3857_2_buffer Buffer_t 6 , -1, 0, __const3857_2_bufferBytes
__const3857_3_buffer Buffer_t 6 , -1, 0, __const3857_3_bufferBytes
__const3857_4_buffer Buffer_t 6 , -1, 0, __const3857_4_bufferBytes
__const3859_0_buffer Buffer_t 3 , -1, 0, __const3859_0_bufferBytes
__const3859_1_buffer Buffer_t 3 , -1, 0, __const3859_1_bufferBytes
__const3859_2_buffer Buffer_t 3 , -1, 0, __const3859_2_bufferBytes
__const3859_3_buffer Buffer_t 3 , -1, 0, __const3859_3_bufferBytes
__const3863_0_buffer Buffer_t 6 , -1, 0, __const3863_0_bufferBytes
__const3863_1_buffer Buffer_t 4 , -1, 0, __const3863_1_bufferBytes
__const3863_2_buffer Buffer_t 4 , -1, 0, __const3863_2_bufferBytes
__const3863_3_buffer Buffer_t 4 , -1, 0, __const3863_3_bufferBytes
__const3863_4_buffer Buffer_t 5 , -1, 0, __const3863_4_bufferBytes
__const3863_5_buffer Buffer_t 4 , -1, 0, __const3863_5_bufferBytes
__const3863_6_buffer Buffer_t 4 , -1, 0, __const3863_6_bufferBytes
__const3863_7_buffer Buffer_t 5 , -1, 0, __const3863_7_bufferBytes
__const3863_8_buffer Buffer_t 4 , -1, 0, __const3863_8_bufferBytes
__const3863_9_buffer Buffer_t 4 , -1, 0, __const3863_9_bufferBytes
__const3863_10_buffer Buffer_t 4 , -1, 0, __const3863_10_bufferBytes
__const3863_11_buffer Buffer_t 5 , -1, 0, __const3863_11_bufferBytes
__const3863_12_buffer Buffer_t 6 , -1, 0, __const3863_12_bufferBytes
__const3863_13_buffer Buffer_t 5 , -1, 0, __const3863_13_bufferBytes
__const3863_14_buffer Buffer_t 6 , -1, 0, __const3863_14_bufferBytes
__const3863_15_buffer Buffer_t 5 , -1, 0, __const3863_15_bufferBytes
__const3863_16_buffer Buffer_t 8 , -1, 0, __const3863_16_bufferBytes
__const3863_17_buffer Buffer_t 7 , -1, 0, __const3863_17_bufferBytes
__const3863_18_buffer Buffer_t 6 , -1, 0, __const3863_18_bufferBytes
__const3863_19_buffer Buffer_t 7 , -1, 0, __const3863_19_bufferBytes
__const3863_20_buffer Buffer_t 6 , -1, 0, __const3863_20_bufferBytes
__const3863_21_buffer Buffer_t 9 , -1, 0, __const3863_21_bufferBytes
__const3863_22_buffer Buffer_t 5 , -1, 0, __const3863_22_bufferBytes
__const3863_23_buffer Buffer_t 5 , -1, 0, __const3863_23_bufferBytes
__const3863_24_buffer Buffer_t 5 , -1, 0, __const3863_24_bufferBytes
__const3863_25_buffer Buffer_t 4 , -1, 0, __const3863_25_bufferBytes
__const3863_26_buffer Buffer_t 4 , -1, 0, __const3863_26_bufferBytes
__const3863_27_buffer Buffer_t 4 , -1, 0, __const3863_27_bufferBytes
__const3863_28_buffer Buffer_t 4 , -1, 0, __const3863_28_bufferBytes
__const3863_29_buffer Buffer_t 4 , -1, 0, __const3863_29_bufferBytes
__const3863_30_buffer Buffer_t 4 , -1, 0, __const3863_30_bufferBytes
__const3863_31_buffer Buffer_t 4 , -1, 0, __const3863_31_bufferBytes
__const3863_32_buffer Buffer_t 4 , -1, 0, __const3863_32_bufferBytes
__const3863_33_buffer Buffer_t 6 , -1, 0, __const3863_33_bufferBytes
__const3863_34_buffer Buffer_t 6 , -1, 0, __const3863_34_bufferBytes
__const3863_35_buffer Buffer_t 6 , -1, 0, __const3863_35_bufferBytes
__const3863_36_buffer Buffer_t 6 , -1, 0, __const3863_36_bufferBytes
__const3863_37_buffer Buffer_t 6 , -1, 0, __const3863_37_bufferBytes
__const3863_38_buffer Buffer_t 6 , -1, 0, __const3863_38_bufferBytes
__const3863_39_buffer Buffer_t 6 , -1, 0, __const3863_39_bufferBytes
__const3863_40_buffer Buffer_t 6 , -1, 0, __const3863_40_bufferBytes
__const3863_41_buffer Buffer_t 6 , -1, 0, __const3863_41_bufferBytes
__const3863_42_buffer Buffer_t 6 , -1, 0, __const3863_42_bufferBytes
__const3863_43_buffer Buffer_t 5 , -1, 0, __const3863_43_bufferBytes
__const3863_44_buffer Buffer_t 5 , -1, 0, __const3863_44_bufferBytes
__const3863_45_buffer Buffer_t 6 , -1, 0, __const3863_45_bufferBytes
__const3863_46_buffer Buffer_t 6 , -1, 0, __const3863_46_bufferBytes
__const3863_47_buffer Buffer_t 4 , -1, 0, __const3863_47_bufferBytes
__const3863_48_buffer Buffer_t 5 , -1, 0, __const3863_48_bufferBytes
__const3863_49_buffer Buffer_t 5 , -1, 0, __const3863_49_bufferBytes
__const3863_50_buffer Buffer_t 6 , -1, 0, __const3863_50_bufferBytes
__const3863_51_buffer Buffer_t 6 , -1, 0, __const3863_51_bufferBytes
__const3863_52_buffer Buffer_t 4 , -1, 0, __const3863_52_bufferBytes
__const3863_53_buffer Buffer_t 5 , -1, 0, __const3863_53_bufferBytes
__const3863_54_buffer Buffer_t 6 , -1, 0, __const3863_54_bufferBytes
__const3863_55_buffer Buffer_t 5 , -1, 0, __const3863_55_bufferBytes
__const3863_56_buffer Buffer_t 5 , -1, 0, __const3863_56_bufferBytes
__const3863_57_buffer Buffer_t 6 , -1, 0, __const3863_57_bufferBytes
__const3863_58_buffer Buffer_t 6 , -1, 0, __const3863_58_bufferBytes
__const3863_61_buffer Buffer_t 6 , -1, 0, __const3863_61_bufferBytes
__const3863_62_buffer Buffer_t 7 , -1, 0, __const3863_62_bufferBytes
__const3863_63_buffer Buffer_t 5 , -1, 0, __const3863_63_bufferBytes
__const3863_64_buffer Buffer_t 6 , -1, 0, __const3863_64_bufferBytes
__const3863_65_buffer Buffer_t 6 , -1, 0, __const3863_65_bufferBytes
__const3863_66_buffer Buffer_t 5 , -1, 0, __const3863_66_bufferBytes
__const3863_83_buffer Buffer_t 7 , -1, 0, __const3863_83_bufferBytes
__const3863_84_buffer Buffer_t 6 , -1, 0, __const3863_84_bufferBytes
__const3863_85_buffer Buffer_t 5 , -1, 0, __const3863_85_bufferBytes
__const3863_86_buffer Buffer_t 6 , -1, 0, __const3863_86_bufferBytes
__const3863_87_buffer Buffer_t 6 , -1, 0, __const3863_87_bufferBytes
__const3863_88_buffer Buffer_t 6 , -1, 0, __const3863_88_bufferBytes
__const3863_89_buffer Buffer_t 6 , -1, 0, __const3863_89_bufferBytes
__const3863_90_buffer Buffer_t 6 , -1, 0, __const3863_90_bufferBytes
__const3863_91_buffer Buffer_t 4 , -1, 0, __const3863_91_bufferBytes
__const3863_92_buffer Buffer_t 5 , -1, 0, __const3863_92_bufferBytes
__const3863_93_buffer Buffer_t 7 , -1, 0, __const3863_93_bufferBytes
__const3863_94_buffer Buffer_t 8 , -1, 0, __const3863_94_bufferBytes
__const3863_95_buffer Buffer_t 7 , -1, 0, __const3863_95_bufferBytes
__const3863_96_buffer Buffer_t 9 , -1, 0, __const3863_96_bufferBytes
__const3863_97_buffer Buffer_t 8 , -1, 0, __const3863_97_bufferBytes
__const3863_98_buffer Buffer_t 4 , -1, 0, __const3863_98_bufferBytes
__const3863_99_buffer Buffer_t 7 , -1, 0, __const3863_99_bufferBytes
__const3863_100_buffer Buffer_t 7 , -1, 0, __const3863_100_bufferBytes
__const3863_101_buffer Buffer_t 4 , -1, 0, __const3863_101_bufferBytes
__const3863_102_buffer Buffer_t 4 , -1, 0, __const3863_102_bufferBytes
__const3863_103_buffer Buffer_t 4 , -1, 0, __const3863_103_bufferBytes
__const3863_104_buffer Buffer_t 4 , -1, 0, __const3863_104_bufferBytes
__const3863_105_buffer Buffer_t 4 , -1, 0, __const3863_105_bufferBytes
__const3863_106_buffer Buffer_t 4 , -1, 0, __const3863_106_bufferBytes
__const3863_107_buffer Buffer_t 3 , -1, 0, __const3863_107_bufferBytes
__const3863_108_buffer Buffer_t 4 , -1, 0, __const3863_108_bufferBytes
__const3863_109_buffer Buffer_t 3 , -1, 0, __const3863_109_bufferBytes
__const3863_110_buffer Buffer_t 4 , -1, 0, __const3863_110_bufferBytes
__const3863_111_buffer Buffer_t 4 , -1, 0, __const3863_111_bufferBytes
__const3863_112_buffer Buffer_t 4 , -1, 0, __const3863_112_bufferBytes
__const3863_113_buffer Buffer_t 5 , -1, 0, __const3863_113_bufferBytes
__const3863_114_buffer Buffer_t 8 , -1, 0, __const3863_114_bufferBytes
__const3863_115_buffer Buffer_t 6 , -1, 0, __const3863_115_bufferBytes
__const3863_116_buffer Buffer_t 7 , -1, 0, __const3863_116_bufferBytes
__const3863_117_buffer Buffer_t 6 , -1, 0, __const3863_117_bufferBytes
__const3863_118_buffer Buffer_t 8 , -1, 0, __const3863_118_bufferBytes
__const3863_119_buffer Buffer_t 6 , -1, 0, __const3863_119_bufferBytes
__const3863_120_buffer Buffer_t 7 , -1, 0, __const3863_120_bufferBytes
__const3863_121_buffer Buffer_t 7 , -1, 0, __const3863_121_bufferBytes
__const3863_122_buffer Buffer_t 7 , -1, 0, __const3863_122_bufferBytes
__const3863_123_buffer Buffer_t 6 , -1, 0, __const3863_123_bufferBytes
__const3863_124_buffer Buffer_t 6 , -1, 0, __const3863_124_bufferBytes
__const3863_125_buffer Buffer_t 7 , -1, 0, __const3863_125_bufferBytes
__const3863_126_buffer Buffer_t 7 , -1, 0, __const3863_126_bufferBytes
__const3863_127_buffer Buffer_t 7 , -1, 0, __const3863_127_bufferBytes
__const3863_128_buffer Buffer_t 7 , -1, 0, __const3863_128_bufferBytes
__const3863_129_buffer Buffer_t 8 , -1, 0, __const3863_129_bufferBytes
__const3863_130_buffer Buffer_t 6 , -1, 0, __const3863_130_bufferBytes
__const3863_131_buffer Buffer_t 6 , -1, 0, __const3863_131_bufferBytes
__const3863_132_buffer Buffer_t 7 , -1, 0, __const3863_132_bufferBytes
__const3863_133_buffer Buffer_t 6 , -1, 0, __const3863_133_bufferBytes
__const3863_134_buffer Buffer_t 7 , -1, 0, __const3863_134_bufferBytes
__const3863_135_buffer Buffer_t 7 , -1, 0, __const3863_135_bufferBytes
__const3863_136_buffer Buffer_t 7 , -1, 0, __const3863_136_bufferBytes
__const3863_137_buffer Buffer_t 6 , -1, 0, __const3863_137_bufferBytes
__const3863_138_buffer Buffer_t 8 , -1, 0, __const3863_138_bufferBytes
__const3863_139_buffer Buffer_t 7 , -1, 0, __const3863_139_bufferBytes
__const3863_140_buffer Buffer_t 7 , -1, 0, __const3863_140_bufferBytes
__const3863_141_buffer Buffer_t 7 , -1, 0, __const3863_141_bufferBytes
__const3863_142_buffer Buffer_t 7 , -1, 0, __const3863_142_bufferBytes
__const3863_143_buffer Buffer_t 8 , -1, 0, __const3863_143_bufferBytes
__const3863_144_buffer Buffer_t 6 , -1, 0, __const3863_144_bufferBytes
__const3863_145_buffer Buffer_t 4 , -1, 0, __const3863_145_bufferBytes
__const3863_146_buffer Buffer_t 4 , -1, 0, __const3863_146_bufferBytes
__const3863_147_buffer Buffer_t 4 , -1, 0, __const3863_147_bufferBytes
__const3863_148_buffer Buffer_t 4 , -1, 0, __const3863_148_bufferBytes
__const3863_149_buffer Buffer_t 4 , -1, 0, __const3863_149_bufferBytes
__const3863_150_buffer Buffer_t 5 , -1, 0, __const3863_150_bufferBytes
__const3863_151_buffer Buffer_t 4 , -1, 0, __const3863_151_bufferBytes
__const3863_152_buffer Buffer_t 5 , -1, 0, __const3863_152_bufferBytes
__const3863_153_buffer Buffer_t 4 , -1, 0, __const3863_153_bufferBytes
__const3863_154_buffer Buffer_t 4 , -1, 0, __const3863_154_bufferBytes
__const3863_155_buffer Buffer_t 4 , -1, 0, __const3863_155_bufferBytes
__const3863_156_buffer Buffer_t 4 , -1, 0, __const3863_156_bufferBytes
__const3863_157_buffer Buffer_t 5 , -1, 0, __const3863_157_bufferBytes
__const3863_158_buffer Buffer_t 4 , -1, 0, __const3863_158_bufferBytes
__const3863_159_buffer Buffer_t 5 , -1, 0, __const3863_159_bufferBytes
__const3863_160_buffer Buffer_t 4 , -1, 0, __const3863_160_bufferBytes
__const3863_161_buffer Buffer_t 5 , -1, 0, __const3863_161_bufferBytes
__const3863_162_buffer Buffer_t 5 , -1, 0, __const3863_162_bufferBytes
__const3863_163_buffer Buffer_t 5 , -1, 0, __const3863_163_bufferBytes
__const3863_164_buffer Buffer_t 5 , -1, 0, __const3863_164_bufferBytes
__const3863_165_buffer Buffer_t 5 , -1, 0, __const3863_165_bufferBytes
__const3863_166_buffer Buffer_t 5 , -1, 0, __const3863_166_bufferBytes
__const3863_167_buffer Buffer_t 5 , -1, 0, __const3863_167_bufferBytes
__const3863_168_buffer Buffer_t 5 , -1, 0, __const3863_168_bufferBytes
__const3863_169_buffer Buffer_t 7 , -1, 0, __const3863_169_bufferBytes
__const3863_170_buffer Buffer_t 3 , -1, 0, __const3863_170_bufferBytes
__const3863_171_buffer Buffer_t 4 , -1, 0, __const3863_171_bufferBytes
__const3863_172_buffer Buffer_t 3 , -1, 0, __const3863_172_bufferBytes
__const3863_173_buffer Buffer_t 4 , -1, 0, __const3863_173_bufferBytes
__const3863_174_buffer Buffer_t 3 , -1, 0, __const3863_174_bufferBytes
__const3863_175_buffer Buffer_t 3 , -1, 0, __const3863_175_bufferBytes
__const3863_176_buffer Buffer_t 4 , -1, 0, __const3863_176_bufferBytes
__const3863_177_buffer Buffer_t 4 , -1, 0, __const3863_177_bufferBytes
__const3863_178_buffer Buffer_t 4 , -1, 0, __const3863_178_bufferBytes
__const3863_179_buffer Buffer_t 3 , -1, 0, __const3863_179_bufferBytes
__const3863_180_buffer Buffer_t 3 , -1, 0, __const3863_180_bufferBytes
__const3863_181_buffer Buffer_t 4 , -1, 0, __const3863_181_bufferBytes
__const3863_182_buffer Buffer_t 3 , -1, 0, __const3863_182_bufferBytes
__const3863_183_buffer Buffer_t 4 , -1, 0, __const3863_183_bufferBytes
__const3863_184_buffer Buffer_t 3 , -1, 0, __const3863_184_bufferBytes
__const3863_185_buffer Buffer_t 4 , -1, 0, __const3863_185_bufferBytes
__const3863_186_buffer Buffer_t 4 , -1, 0, __const3863_186_bufferBytes
__const3863_187_buffer Buffer_t 3 , -1, 0, __const3863_187_bufferBytes
__const3863_188_buffer Buffer_t 5 , -1, 0, __const3863_188_bufferBytes
__const3863_189_buffer Buffer_t 6 , -1, 0, __const3863_189_bufferBytes
__const3863_190_buffer Buffer_t 7 , -1, 0, __const3863_190_bufferBytes
__const3863_191_buffer Buffer_t 6 , -1, 0, __const3863_191_bufferBytes
__const3863_192_buffer Buffer_t 7 , -1, 0, __const3863_192_bufferBytes
__const3863_193_buffer Buffer_t 6 , -1, 0, __const3863_193_bufferBytes
__const3863_194_buffer Buffer_t 6 , -1, 0, __const3863_194_bufferBytes
__const3863_195_buffer Buffer_t 7 , -1, 0, __const3863_195_bufferBytes
__const3863_196_buffer Buffer_t 8 , -1, 0, __const3863_196_bufferBytes
__const3863_197_buffer Buffer_t 7 , -1, 0, __const3863_197_bufferBytes
__const3863_198_buffer Buffer_t 8 , -1, 0, __const3863_198_bufferBytes
__const3863_199_buffer Buffer_t 6 , -1, 0, __const3863_199_bufferBytes
__const3863_200_buffer Buffer_t 4 , -1, 0, __const3863_200_bufferBytes
__const3863_201_buffer Buffer_t 4 , -1, 0, __const3863_201_bufferBytes
__const3863_202_buffer Buffer_t 4 , -1, 0, __const3863_202_bufferBytes
__const3863_203_buffer Buffer_t 4 , -1, 0, __const3863_203_bufferBytes
__const3863_204_buffer Buffer_t 4 , -1, 0, __const3863_204_bufferBytes
__const3863_205_buffer Buffer_t 4 , -1, 0, __const3863_205_bufferBytes
__const3863_206_buffer Buffer_t 4 , -1, 0, __const3863_206_bufferBytes
__const3863_207_buffer Buffer_t 4 , -1, 0, __const3863_207_bufferBytes
__const3863_208_buffer Buffer_t 6 , -1, 0, __const3863_208_bufferBytes
__const3863_209_buffer Buffer_t 6 , -1, 0, __const3863_209_bufferBytes
__const3863_210_buffer Buffer_t 5 , -1, 0, __const3863_210_bufferBytes
__const3863_211_buffer Buffer_t 6 , -1, 0, __const3863_211_bufferBytes
__const3863_212_buffer Buffer_t 5 , -1, 0, __const3863_212_bufferBytes
__const3863_213_buffer Buffer_t 7 , -1, 0, __const3863_213_bufferBytes
__const3863_214_buffer Buffer_t 5 , -1, 0, __const3863_214_bufferBytes
__const3863_215_buffer Buffer_t 6 , -1, 0, __const3863_215_bufferBytes
__const3863_216_buffer Buffer_t 6 , -1, 0, __const3863_216_bufferBytes
__const3863_217_buffer Buffer_t 6 , -1, 0, __const3863_217_bufferBytes
__const3863_218_buffer Buffer_t 5 , -1, 0, __const3863_218_bufferBytes
__const3863_219_buffer Buffer_t 5 , -1, 0, __const3863_219_bufferBytes
__const3863_220_buffer Buffer_t 6 , -1, 0, __const3863_220_bufferBytes
__const3863_221_buffer Buffer_t 6 , -1, 0, __const3863_221_bufferBytes
__const3863_222_buffer Buffer_t 6 , -1, 0, __const3863_222_bufferBytes
__const3863_223_buffer Buffer_t 6 , -1, 0, __const3863_223_bufferBytes
__const3863_224_buffer Buffer_t 7 , -1, 0, __const3863_224_bufferBytes
__const3863_225_buffer Buffer_t 5 , -1, 0, __const3863_225_bufferBytes
__const3863_226_buffer Buffer_t 5 , -1, 0, __const3863_226_bufferBytes
__const3863_227_buffer Buffer_t 6 , -1, 0, __const3863_227_bufferBytes
__const3863_228_buffer Buffer_t 5 , -1, 0, __const3863_228_bufferBytes
__const3863_229_buffer Buffer_t 6 , -1, 0, __const3863_229_bufferBytes
__const3863_230_buffer Buffer_t 6 , -1, 0, __const3863_230_bufferBytes
__const3863_231_buffer Buffer_t 6 , -1, 0, __const3863_231_bufferBytes
__const3863_232_buffer Buffer_t 5 , -1, 0, __const3863_232_bufferBytes
__const3863_233_buffer Buffer_t 7 , -1, 0, __const3863_233_bufferBytes
__const3863_234_buffer Buffer_t 6 , -1, 0, __const3863_234_bufferBytes
__const3863_235_buffer Buffer_t 6 , -1, 0, __const3863_235_bufferBytes
__const3863_236_buffer Buffer_t 6 , -1, 0, __const3863_236_bufferBytes
__const3863_237_buffer Buffer_t 6 , -1, 0, __const3863_237_bufferBytes
__const3863_238_buffer Buffer_t 7 , -1, 0, __const3863_238_bufferBytes
__const3863_239_buffer Buffer_t 5 , -1, 0, __const3863_239_bufferBytes
__const3863_240_buffer Buffer_t 4 , -1, 0, __const3863_240_bufferBytes
__const3863_241_buffer Buffer_t 5 , -1, 0, __const3863_241_bufferBytes
__const3863_242_buffer Buffer_t 5 , -1, 0, __const3863_242_bufferBytes
__const3863_244_buffer Buffer_t 3 , -1, 0, __const3863_244_bufferBytes
__const3863_245_buffer Buffer_t 4 , -1, 0, __const3863_245_bufferBytes
__const3863_246_buffer Buffer_t 7 , -1, 0, __const3863_246_bufferBytes
__const3863_247_buffer Buffer_t 4 , -1, 0, __const3863_247_bufferBytes
__const3863_249_buffer Buffer_t 5 , -1, 0, __const3863_249_bufferBytes
__const3863_250_buffer Buffer_t 4 , -1, 0, __const3863_250_bufferBytes
__const3863_251_buffer Buffer_t 5 , -1, 0, __const3863_251_bufferBytes
__const3863_252_buffer Buffer_t 4 , -1, 0, __const3863_252_bufferBytes
__const3863_253_buffer Buffer_t 6 , -1, 0, __const3863_253_bufferBytes
__const3863_255_buffer Buffer_t 11 , -1, 0, __const3863_255_bufferBytes
__const3863_256_buffer Buffer_t 4 , -1, 0, __const3863_256_bufferBytes
__const3863_257_buffer Buffer_t 4 , -1, 0, __const3863_257_bufferBytes
__const3863_258_buffer Buffer_t 4 , -1, 0, __const3863_258_bufferBytes
__const3863_259_buffer Buffer_t 5 , -1, 0, __const3863_259_bufferBytes
__const3863_260_buffer Buffer_t 4 , -1, 0, __const3863_260_bufferBytes
__const3863_261_buffer Buffer_t 4 , -1, 0, __const3863_261_bufferBytes
__const3863_262_buffer Buffer_t 9 , -1, 0, __const3863_262_bufferBytes
__const3863_263_buffer Buffer_t 9 , -1, 0, __const3863_263_bufferBytes
__const3863_264_buffer Buffer_t 9 , -1, 0, __const3863_264_bufferBytes
__const3863_265_buffer Buffer_t 6 , -1, 0, __const3863_265_bufferBytes
__const3863_266_buffer Buffer_t 6 , -1, 0, __const3863_266_bufferBytes
__const3863_267_buffer Buffer_t 6 , -1, 0, __const3863_267_bufferBytes
__const3863_268_buffer Buffer_t 6 , -1, 0, __const3863_268_bufferBytes
__const3863_269_buffer Buffer_t 7 , -1, 0, __const3863_269_bufferBytes
__const3863_270_buffer Buffer_t 7 , -1, 0, __const3863_270_bufferBytes
__const3863_271_buffer Buffer_t 8 , -1, 0, __const3863_271_bufferBytes
__const3863_272_buffer Buffer_t 8 , -1, 0, __const3863_272_bufferBytes
__const3863_273_buffer Buffer_t 8 , -1, 0, __const3863_273_bufferBytes
__const3863_274_buffer Buffer_t 5 , -1, 0, __const3863_274_bufferBytes
__const3863_275_buffer Buffer_t 6 , -1, 0, __const3863_275_bufferBytes
__const3863_276_buffer Buffer_t 4 , -1, 0, __const3863_276_bufferBytes
__const3863_277_buffer Buffer_t 5 , -1, 0, __const3863_277_bufferBytes
__const3863_278_buffer Buffer_t 8 , -1, 0, __const3863_278_bufferBytes
__const3863_279_buffer Buffer_t 8 , -1, 0, __const3863_279_bufferBytes
__const3863_280_buffer Buffer_t 8 , -1, 0, __const3863_280_bufferBytes
__const3863_281_buffer Buffer_t 8 , -1, 0, __const3863_281_bufferBytes
__const3863_282_buffer Buffer_t 8 , -1, 0, __const3863_282_bufferBytes
__const3863_283_buffer Buffer_t 8 , -1, 0, __const3863_283_bufferBytes
__const3863_284_buffer Buffer_t 7 , -1, 0, __const3863_284_bufferBytes
__const3863_285_buffer Buffer_t 7 , -1, 0, __const3863_285_bufferBytes
__const3863_286_buffer Buffer_t 6 , -1, 0, __const3863_286_bufferBytes
__const3863_287_buffer Buffer_t 6 , -1, 0, __const3863_287_bufferBytes
__const3863_288_buffer Buffer_t 6 , -1, 0, __const3863_288_bufferBytes
__const3863_289_buffer Buffer_t 7 , -1, 0, __const3863_289_bufferBytes
__const3863_290_buffer Buffer_t 7 , -1, 0, __const3863_290_bufferBytes
__const3863_291_buffer Buffer_t 8 , -1, 0, __const3863_291_bufferBytes
__const3863_292_buffer Buffer_t 8 , -1, 0, __const3863_292_bufferBytes
__const3863_293_buffer Buffer_t 10 , -1, 0, __const3863_293_bufferBytes
__const3863_294_buffer Buffer_t 10 , -1, 0, __const3863_294_bufferBytes
__const3863_295_buffer Buffer_t 10 , -1, 0, __const3863_295_bufferBytes
__const3863_296_buffer Buffer_t 7 , -1, 0, __const3863_296_bufferBytes
__const3863_297_buffer Buffer_t 7 , -1, 0, __const3863_297_bufferBytes
__const3863_298_buffer Buffer_t 6 , -1, 0, __const3863_298_bufferBytes
__const3863_299_buffer Buffer_t 6 , -1, 0, __const3863_299_bufferBytes
__const3863_300_buffer Buffer_t 8 , -1, 0, __const3863_300_bufferBytes
__const3863_301_buffer Buffer_t 7 , -1, 0, __const3863_301_bufferBytes
__const3863_302_buffer Buffer_t 7 , -1, 0, __const3863_302_bufferBytes
__const3863_303_buffer Buffer_t 7 , -1, 0, __const3863_303_bufferBytes
__const3863_304_buffer Buffer_t 6 , -1, 0, __const3863_304_bufferBytes
__const3863_305_buffer Buffer_t 8 , -1, 0, __const3863_305_bufferBytes
__const3863_306_buffer Buffer_t 7 , -1, 0, __const3863_306_bufferBytes
__const3863_307_buffer Buffer_t 7 , -1, 0, __const3863_307_bufferBytes
__const3863_308_buffer Buffer_t 7 , -1, 0, __const3863_308_bufferBytes
__const3863_309_buffer Buffer_t 7 , -1, 0, __const3863_309_bufferBytes
__const3863_310_buffer Buffer_t 9 , -1, 0, __const3863_310_bufferBytes
__const3863_311_buffer Buffer_t 10 , -1, 0, __const3863_311_bufferBytes
__const3863_312_buffer Buffer_t 7 , -1, 0, __const3863_312_bufferBytes
__const3863_313_buffer Buffer_t 8 , -1, 0, __const3863_313_bufferBytes
__const3863_314_buffer Buffer_t 7 , -1, 0, __const3863_314_bufferBytes
__const3863_315_buffer Buffer_t 8 , -1, 0, __const3863_315_bufferBytes
__const3863_316_buffer Buffer_t 7 , -1, 0, __const3863_316_bufferBytes
__const3863_317_buffer Buffer_t 7 , -1, 0, __const3863_317_bufferBytes
__const3863_318_buffer Buffer_t 6 , -1, 0, __const3863_318_bufferBytes
__const3863_319_buffer Buffer_t 6 , -1, 0, __const3863_319_bufferBytes
__const3863_320_buffer Buffer_t 6 , -1, 0, __const3863_320_bufferBytes
__const3863_321_buffer Buffer_t 5 , -1, 0, __const3863_321_bufferBytes
__const3863_322_buffer Buffer_t 10 , -1, 0, __const3863_322_bufferBytes
__const3863_323_buffer Buffer_t 10 , -1, 0, __const3863_323_bufferBytes
__const3863_324_buffer Buffer_t 10 , -1, 0, __const3863_324_bufferBytes
__const3863_325_buffer Buffer_t 6 , -1, 0, __const3863_325_bufferBytes
__const3863_326_buffer Buffer_t 6 , -1, 0, __const3863_326_bufferBytes
__const3863_327_buffer Buffer_t 6 , -1, 0, __const3863_327_bufferBytes
__const3863_328_buffer Buffer_t 6 , -1, 0, __const3863_328_bufferBytes
__const3863_329_buffer Buffer_t 6 , -1, 0, __const3863_329_bufferBytes
__const3863_330_buffer Buffer_t 6 , -1, 0, __const3863_330_bufferBytes
__const3863_331_buffer Buffer_t 6 , -1, 0, __const3863_331_bufferBytes
__const3863_332_buffer Buffer_t 6 , -1, 0, __const3863_332_bufferBytes
__const3863_333_buffer Buffer_t 5 , -1, 0, __const3863_333_bufferBytes
__const3863_334_buffer Buffer_t 5 , -1, 0, __const3863_334_bufferBytes
__const3863_335_buffer Buffer_t 8 , -1, 0, __const3863_335_bufferBytes
__const3863_336_buffer Buffer_t 7 , -1, 0, __const3863_336_bufferBytes
__const3863_337_buffer Buffer_t 7 , -1, 0, __const3863_337_bufferBytes
__const3863_338_buffer Buffer_t 7 , -1, 0, __const3863_338_bufferBytes
__const3863_339_buffer Buffer_t 9 , -1, 0, __const3863_339_bufferBytes
__const3867_0_buffer Buffer_t 6 , -1, 0, __const3867_0_bufferBytes
__const3867_1_buffer Buffer_t 5 , -1, 0, __const3867_1_bufferBytes
__const3867_2_buffer Buffer_t 5 , -1, 0, __const3867_2_bufferBytes
__const3867_3_buffer Buffer_t 7 , -1, 0, __const3867_3_bufferBytes
__const3867_4_buffer Buffer_t 8 , -1, 0, __const3867_4_bufferBytes
__const3867_5_buffer Buffer_t 8 , -1, 0, __const3867_5_bufferBytes
__const3867_6_buffer Buffer_t 5 , -1, 0, __const3867_6_bufferBytes
__const3867_7_buffer Buffer_t 7 , -1, 0, __const3867_7_bufferBytes
__const3867_8_buffer Buffer_t 7 , -1, 0, __const3867_8_bufferBytes
__const3867_9_buffer Buffer_t 7 , -1, 0, __const3867_9_bufferBytes
__const3867_10_buffer Buffer_t 7 , -1, 0, __const3867_10_bufferBytes
__const3867_11_buffer Buffer_t 6 , -1, 0, __const3867_11_bufferBytes
__const3867_12_buffer Buffer_t 5 , -1, 0, __const3867_12_bufferBytes
__const3867_13_buffer Buffer_t 7 , -1, 0, __const3867_13_bufferBytes
__const3867_14_buffer Buffer_t 7 , -1, 0, __const3867_14_bufferBytes
__const3867_15_buffer Buffer_t 6 , -1, 0, __const3867_15_bufferBytes
__const3867_16_buffer Buffer_t 6 , -1, 0, __const3867_16_bufferBytes
__const3867_17_buffer Buffer_t 5 , -1, 0, __const3867_17_bufferBytes
__const3867_18_buffer Buffer_t 7 , -1, 0, __const3867_18_bufferBytes
__const3867_19_buffer Buffer_t 6 , -1, 0, __const3867_19_bufferBytes
__const3867_20_buffer Buffer_t 6 , -1, 0, __const3867_20_bufferBytes
__const3867_21_buffer Buffer_t 8 , -1, 0, __const3867_21_bufferBytes
__const3867_22_buffer Buffer_t 7 , -1, 0, __const3867_22_bufferBytes
__const3867_23_buffer Buffer_t 6 , -1, 0, __const3867_23_bufferBytes
__const3867_24_buffer Buffer_t 5 , -1, 0, __const3867_24_bufferBytes
__const3867_25_buffer Buffer_t 6 , -1, 0, __const3867_25_bufferBytes
__const3867_26_buffer Buffer_t 5 , -1, 0, __const3867_26_bufferBytes
__const3867_27_buffer Buffer_t 8 , -1, 0, __const3867_27_bufferBytes
__const3867_28_buffer Buffer_t 6 , -1, 0, __const3867_28_bufferBytes
__const3867_29_buffer Buffer_t 8 , -1, 0, __const3867_29_bufferBytes
__const3867_30_buffer Buffer_t 5 , -1, 0, __const3867_30_bufferBytes
__const3867_31_buffer Buffer_t 5 , -1, 0, __const3867_31_bufferBytes
__const3867_32_buffer Buffer_t 8 , -1, 0, __const3867_32_bufferBytes
__const3867_33_buffer Buffer_t 7 , -1, 0, __const3867_33_bufferBytes
__const3867_34_buffer Buffer_t 8 , -1, 0, __const3867_34_bufferBytes
__const3952_0_buffer Buffer_t 20 , -1, 0, __const3952_0_bufferBytes
__const3952_1_buffer Buffer_t 19 , -1, 0, __const3952_1_bufferBytes
__const3952_2_buffer Buffer_t 18 , -1, 0, __const3952_2_bufferBytes
__const3952_3_buffer Buffer_t 20 , -1, 0, __const3952_3_bufferBytes
__const3952_4_buffer Buffer_t 26 , -1, 0, __const3952_4_bufferBytes
__const3952_5_buffer Buffer_t 20 , -1, 0, __const3952_5_bufferBytes
__const3952_6_buffer Buffer_t 19 , -1, 0, __const3952_6_bufferBytes
__const3952_7_buffer Buffer_t 9 , -1, 0, __const3952_7_bufferBytes
__const3952_8_buffer Buffer_t 9 , -1, 0, __const3952_8_bufferBytes
__const3952_9_buffer Buffer_t 9 , -1, 0, __const3952_9_bufferBytes
__const3952_10_buffer Buffer_t 9 , -1, 0, __const3952_10_bufferBytes
__const3952_11_buffer Buffer_t 9 , -1, 0, __const3952_11_bufferBytes
__const3952_12_buffer Buffer_t 11 , -1, 0, __const3952_12_bufferBytes
__const3952_13_buffer Buffer_t 8 , -1, 0, __const3952_13_bufferBytes
__const3952_14_buffer Buffer_t 9 , -1, 0, __const3952_14_bufferBytes
__const3952_15_buffer Buffer_t 9 , -1, 0, __const3952_15_bufferBytes
__const3952_16_buffer Buffer_t 9 , -1, 0, __const3952_16_bufferBytes
__const3952_17_buffer Buffer_t 9 , -1, 0, __const3952_17_bufferBytes
__const3952_18_buffer Buffer_t 9 , -1, 0, __const3952_18_bufferBytes
__const3952_19_buffer Buffer_t 10 , -1, 0, __const3952_19_bufferBytes
__const3952_20_buffer Buffer_t 9 , -1, 0, __const3952_20_bufferBytes
__const3952_21_buffer Buffer_t 9 , -1, 0, __const3952_21_bufferBytes
__const3952_22_buffer Buffer_t 9 , -1, 0, __const3952_22_bufferBytes
__const3952_23_buffer Buffer_t 10 , -1, 0, __const3952_23_bufferBytes
__const3952_24_buffer Buffer_t 9 , -1, 0, __const3952_24_bufferBytes
__const3952_25_buffer Buffer_t 11 , -1, 0, __const3952_25_bufferBytes
__const3952_26_buffer Buffer_t 12 , -1, 0, __const3952_26_bufferBytes
__const3952_27_buffer Buffer_t 11 , -1, 0, __const3952_27_bufferBytes
__const3952_28_buffer Buffer_t 12 , -1, 0, __const3952_28_bufferBytes
__const3952_29_buffer Buffer_t 11 , -1, 0, __const3952_29_bufferBytes
__const3952_30_buffer Buffer_t 11 , -1, 0, __const3952_30_bufferBytes
__const3952_31_buffer Buffer_t 11 , -1, 0, __const3952_31_bufferBytes
__const3952_32_buffer Buffer_t 12 , -1, 0, __const3952_32_bufferBytes
__const3952_33_buffer Buffer_t 11 , -1, 0, __const3952_33_bufferBytes
__const3952_34_buffer Buffer_t 12 , -1, 0, __const3952_34_bufferBytes
__const3952_35_buffer Buffer_t 12 , -1, 0, __const3952_35_bufferBytes
__const3952_36_buffer Buffer_t 13 , -1, 0, __const3952_36_bufferBytes
__const3952_37_buffer Buffer_t 12 , -1, 0, __const3952_37_bufferBytes
__const3952_38_buffer Buffer_t 13 , -1, 0, __const3952_38_bufferBytes
__const3952_39_buffer Buffer_t 12 , -1, 0, __const3952_39_bufferBytes
__const3952_40_buffer Buffer_t 12 , -1, 0, __const3952_40_bufferBytes
__const3952_41_buffer Buffer_t 12 , -1, 0, __const3952_41_bufferBytes
__const3952_42_buffer Buffer_t 13 , -1, 0, __const3952_42_bufferBytes
__const3952_43_buffer Buffer_t 12 , -1, 0, __const3952_43_bufferBytes
__const3952_44_buffer Buffer_t 13 , -1, 0, __const3952_44_bufferBytes
__const3952_45_buffer Buffer_t 12 , -1, 0, __const3952_45_bufferBytes
__const3952_46_buffer Buffer_t 12 , -1, 0, __const3952_46_bufferBytes
__const3952_47_buffer Buffer_t 12 , -1, 0, __const3952_47_bufferBytes
__const3952_48_buffer Buffer_t 12 , -1, 0, __const3952_48_bufferBytes
__const3952_49_buffer Buffer_t 11 , -1, 0, __const3952_49_bufferBytes
__const3952_50_buffer Buffer_t 11 , -1, 0, __const3952_50_bufferBytes
__const3952_51_buffer Buffer_t 12 , -1, 0, __const3952_51_bufferBytes
__const3952_52_buffer Buffer_t 12 , -1, 0, __const3952_52_bufferBytes
__const3952_53_buffer Buffer_t 11 , -1, 0, __const3952_53_bufferBytes
__const3952_54_buffer Buffer_t 11 , -1, 0, __const3952_54_bufferBytes
__const3952_55_buffer Buffer_t 9 , -1, 0, __const3952_55_bufferBytes
__const3952_56_buffer Buffer_t 11 , -1, 0, __const3952_56_bufferBytes
__const3952_57_buffer Buffer_t 11 , -1, 0, __const3952_57_bufferBytes
__const3952_58_buffer Buffer_t 11 , -1, 0, __const3952_58_bufferBytes
__const3952_59_buffer Buffer_t 11 , -1, 0, __const3952_59_bufferBytes
__const3952_60_buffer Buffer_t 13 , -1, 0, __const3952_60_bufferBytes
__const3952_61_buffer Buffer_t 16 , -1, 0, __const3952_61_bufferBytes
__const3952_62_buffer Buffer_t 15 , -1, 0, __const3952_62_bufferBytes
__const3952_63_buffer Buffer_t 11 , -1, 0, __const3952_63_bufferBytes
__const3952_64_buffer Buffer_t 9 , -1, 0, __const3952_64_bufferBytes
__const3952_65_buffer Buffer_t 9 , -1, 0, __const3952_65_bufferBytes
__const3952_66_buffer Buffer_t 10 , -1, 0, __const3952_66_bufferBytes
__const3952_67_buffer Buffer_t 9 , -1, 0, __const3952_67_bufferBytes
__const3952_68_buffer Buffer_t 9 , -1, 0, __const3952_68_bufferBytes
__const3952_69_buffer Buffer_t 11 , -1, 0, __const3952_69_bufferBytes
__const3952_70_buffer Buffer_t 9 , -1, 0, __const3952_70_bufferBytes
__const3952_71_buffer Buffer_t 10 , -1, 0, __const3952_71_bufferBytes
__const3952_72_buffer Buffer_t 8 , -1, 0, __const3952_72_bufferBytes
__const3952_73_buffer Buffer_t 9 , -1, 0, __const3952_73_bufferBytes
__const3952_74_buffer Buffer_t 10 , -1, 0, __const3952_74_bufferBytes
__const3952_75_buffer Buffer_t 9 , -1, 0, __const3952_75_bufferBytes
__const3952_76_buffer Buffer_t 10 , -1, 0, __const3952_76_bufferBytes
__const3952_77_buffer Buffer_t 12 , -1, 0, __const3952_77_bufferBytes
__const3952_78_buffer Buffer_t 10 , -1, 0, __const3952_78_bufferBytes
__const3952_79_buffer Buffer_t 11 , -1, 0, __const3952_79_bufferBytes
__const3952_80_buffer Buffer_t 11 , -1, 0, __const3952_80_bufferBytes
__const3952_81_buffer Buffer_t 9 , -1, 0, __const3952_81_bufferBytes
__const3952_82_buffer Buffer_t 9 , -1, 0, __const3952_82_bufferBytes
__const3952_83_buffer Buffer_t 11 , -1, 0, __const3952_83_bufferBytes
__const3952_84_buffer Buffer_t 9 , -1, 0, __const3952_84_bufferBytes
__const3952_85_buffer Buffer_t 10 , -1, 0, __const3952_85_bufferBytes
__const3952_86_buffer Buffer_t 9 , -1, 0, __const3952_86_bufferBytes
__const3952_87_buffer Buffer_t 10 , -1, 0, __const3952_87_bufferBytes
__const3952_88_buffer Buffer_t 10 , -1, 0, __const3952_88_bufferBytes
__const3952_89_buffer Buffer_t 10 , -1, 0, __const3952_89_bufferBytes
__const3952_90_buffer Buffer_t 10 , -1, 0, __const3952_90_bufferBytes
__const3952_91_buffer Buffer_t 11 , -1, 0, __const3952_91_bufferBytes
__const3952_92_buffer Buffer_t 11 , -1, 0, __const3952_92_bufferBytes
__const3952_93_buffer Buffer_t 11 , -1, 0, __const3952_93_bufferBytes
__const3952_94_buffer Buffer_t 11 , -1, 0, __const3952_94_bufferBytes
__const3952_95_buffer Buffer_t 9 , -1, 0, __const3952_95_bufferBytes
__const3952_96_buffer Buffer_t 9 , -1, 0, __const3952_96_bufferBytes
__const3952_97_buffer Buffer_t 9 , -1, 0, __const3952_97_bufferBytes
__const3952_98_buffer Buffer_t 9 , -1, 0, __const3952_98_bufferBytes
__const3952_99_buffer Buffer_t 11 , -1, 0, __const3952_99_bufferBytes
__const3952_100_buffer Buffer_t 11 , -1, 0, __const3952_100_bufferBytes
__const3952_101_buffer Buffer_t 11 , -1, 0, __const3952_101_bufferBytes
__const3952_102_buffer Buffer_t 11 , -1, 0, __const3952_102_bufferBytes
__const3952_103_buffer Buffer_t 12 , -1, 0, __const3952_103_bufferBytes
__const3952_104_buffer Buffer_t 11 , -1, 0, __const3952_104_bufferBytes
__const3952_105_buffer Buffer_t 9 , -1, 0, __const3952_105_bufferBytes
__const3952_106_buffer Buffer_t 9 , -1, 0, __const3952_106_bufferBytes
__const3952_107_buffer Buffer_t 9 , -1, 0, __const3952_107_bufferBytes
__const3952_108_buffer Buffer_t 8 , -1, 0, __const3952_108_bufferBytes
__const3952_109_buffer Buffer_t 9 , -1, 0, __const3952_109_bufferBytes
__const3952_110_buffer Buffer_t 11 , -1, 0, __const3952_110_bufferBytes
__const3952_111_buffer Buffer_t 9 , -1, 0, __const3952_111_bufferBytes
__const3952_112_buffer Buffer_t 10 , -1, 0, __const3952_112_bufferBytes
__const3952_113_buffer Buffer_t 11 , -1, 0, __const3952_113_bufferBytes
__const3952_114_buffer Buffer_t 10 , -1, 0, __const3952_114_bufferBytes
__const3952_115_buffer Buffer_t 11 , -1, 0, __const3952_115_bufferBytes
__const3952_116_buffer Buffer_t 12 , -1, 0, __const3952_116_bufferBytes
__const3952_117_buffer Buffer_t 9 , -1, 0, __const3952_117_bufferBytes
__const3952_118_buffer Buffer_t 9 , -1, 0, __const3952_118_bufferBytes
__const3952_119_buffer Buffer_t 11 , -1, 0, __const3952_119_bufferBytes
__const3952_120_buffer Buffer_t 11 , -1, 0, __const3952_120_bufferBytes
__const3952_121_buffer Buffer_t 11 , -1, 0, __const3952_121_bufferBytes
__const3952_122_buffer Buffer_t 12 , -1, 0, __const3952_122_bufferBytes
__const3952_123_buffer Buffer_t 9 , -1, 0, __const3952_123_bufferBytes
__const3952_124_buffer Buffer_t 10 , -1, 0, __const3952_124_bufferBytes
__const3952_125_buffer Buffer_t 11 , -1, 0, __const3952_125_bufferBytes
__const3952_126_buffer Buffer_t 9 , -1, 0, __const3952_126_bufferBytes
__const3952_127_buffer Buffer_t 10 , -1, 0, __const3952_127_bufferBytes
__const3952_128_buffer Buffer_t 9 , -1, 0, __const3952_128_bufferBytes
__const3952_129_buffer Buffer_t 9 , -1, 0, __const3952_129_bufferBytes
__const3952_130_buffer Buffer_t 9 , -1, 0, __const3952_130_bufferBytes
__const3952_131_buffer Buffer_t 9 , -1, 0, __const3952_131_bufferBytes
__const3952_132_buffer Buffer_t 9 , -1, 0, __const3952_132_bufferBytes
__const3952_133_buffer Buffer_t 9 , -1, 0, __const3952_133_bufferBytes
__const3952_134_buffer Buffer_t 11 , -1, 0, __const3952_134_bufferBytes
__const3952_135_buffer Buffer_t 11 , -1, 0, __const3952_135_bufferBytes
__const3952_136_buffer Buffer_t 11 , -1, 0, __const3952_136_bufferBytes
__const3952_137_buffer Buffer_t 11 , -1, 0, __const3952_137_bufferBytes
__const3952_138_buffer Buffer_t 10 , -1, 0, __const3952_138_bufferBytes
__const3952_139_buffer Buffer_t 11 , -1, 0, __const3952_139_bufferBytes
__const3952_140_buffer Buffer_t 10 , -1, 0, __const3952_140_bufferBytes
__const3952_141_buffer Buffer_t 11 , -1, 0, __const3952_141_bufferBytes
__const3952_142_buffer Buffer_t 10 , -1, 0, __const3952_142_bufferBytes
__const3952_143_buffer Buffer_t 10 , -1, 0, __const3952_143_bufferBytes
__const3952_144_buffer Buffer_t 10 , -1, 0, __const3952_144_bufferBytes
__const3952_145_buffer Buffer_t 11 , -1, 0, __const3952_145_bufferBytes
__const3952_146_buffer Buffer_t 10 , -1, 0, __const3952_146_bufferBytes
__const3952_147_buffer Buffer_t 11 , -1, 0, __const3952_147_bufferBytes
__const3952_148_buffer Buffer_t 11 , -1, 0, __const3952_148_bufferBytes
__const3952_149_buffer Buffer_t 12 , -1, 0, __const3952_149_bufferBytes
__const3952_150_buffer Buffer_t 11 , -1, 0, __const3952_150_bufferBytes
__const3952_151_buffer Buffer_t 12 , -1, 0, __const3952_151_bufferBytes
__const3952_152_buffer Buffer_t 11 , -1, 0, __const3952_152_bufferBytes
__const3952_153_buffer Buffer_t 11 , -1, 0, __const3952_153_bufferBytes
__const3952_154_buffer Buffer_t 11 , -1, 0, __const3952_154_bufferBytes
__const3952_155_buffer Buffer_t 12 , -1, 0, __const3952_155_bufferBytes
__const3952_156_buffer Buffer_t 11 , -1, 0, __const3952_156_bufferBytes
__const3952_157_buffer Buffer_t 12 , -1, 0, __const3952_157_bufferBytes
__const3952_158_buffer Buffer_t 11 , -1, 0, __const3952_158_bufferBytes
__const3952_159_buffer Buffer_t 11 , -1, 0, __const3952_159_bufferBytes
__const3952_160_buffer Buffer_t 11 , -1, 0, __const3952_160_bufferBytes
__const3952_161_buffer Buffer_t 11 , -1, 0, __const3952_161_bufferBytes
__const3952_162_buffer Buffer_t 10 , -1, 0, __const3952_162_bufferBytes
__const3952_163_buffer Buffer_t 10 , -1, 0, __const3952_163_bufferBytes
__const3952_164_buffer Buffer_t 11 , -1, 0, __const3952_164_bufferBytes
__const3952_165_buffer Buffer_t 11 , -1, 0, __const3952_165_bufferBytes
__const3952_166_buffer Buffer_t 10 , -1, 0, __const3952_166_bufferBytes
__const3952_167_buffer Buffer_t 10 , -1, 0, __const3952_167_bufferBytes
__const3952_168_buffer Buffer_t 10 , -1, 0, __const3952_168_bufferBytes
__const3952_169_buffer Buffer_t 9 , -1, 0, __const3952_169_bufferBytes
__const3952_170_buffer Buffer_t 9 , -1, 0, __const3952_170_bufferBytes
__const3952_171_buffer Buffer_t 10 , -1, 0, __const3952_171_bufferBytes
__const3952_172_buffer Buffer_t 10 , -1, 0, __const3952_172_bufferBytes
__const3952_173_buffer Buffer_t 10 , -1, 0, __const3952_173_bufferBytes
__const3952_174_buffer Buffer_t 9 , -1, 0, __const3952_174_bufferBytes
__const3952_175_buffer Buffer_t 9 , -1, 0, __const3952_175_bufferBytes
__const3952_176_buffer Buffer_t 9 , -1, 0, __const3952_176_bufferBytes
__const3952_177_buffer Buffer_t 11 , -1, 0, __const3952_177_bufferBytes
__const3952_178_buffer Buffer_t 11 , -1, 0, __const3952_178_bufferBytes
__const3952_179_buffer Buffer_t 11 , -1, 0, __const3952_179_bufferBytes
__const3952_180_buffer Buffer_t 11 , -1, 0, __const3952_180_bufferBytes
__const3952_181_buffer Buffer_t 9 , -1, 0, __const3952_181_bufferBytes
__const3952_182_buffer Buffer_t 9 , -1, 0, __const3952_182_bufferBytes
__const3952_183_buffer Buffer_t 12 , -1, 0, __const3952_183_bufferBytes
__const3952_184_buffer Buffer_t 13 , -1, 0, __const3952_184_bufferBytes
__const3952_185_buffer Buffer_t 14 , -1, 0, __const3952_185_bufferBytes
__const3952_186_buffer Buffer_t 13 , -1, 0, __const3952_186_bufferBytes
__const3952_187_buffer Buffer_t 12 , -1, 0, __const3952_187_bufferBytes
__const3952_188_buffer Buffer_t 10 , -1, 0, __const3952_188_bufferBytes
__const3952_189_buffer Buffer_t 9 , -1, 0, __const3952_189_bufferBytes
__const3952_190_buffer Buffer_t 10 , -1, 0, __const3952_190_bufferBytes
__const3952_191_buffer Buffer_t 10 , -1, 0, __const3952_191_bufferBytes
__const3952_192_buffer Buffer_t 10 , -1, 0, __const3952_192_bufferBytes
__const3952_193_buffer Buffer_t 12 , -1, 0, __const3952_193_bufferBytes
__const3952_194_buffer Buffer_t 11 , -1, 0, __const3952_194_bufferBytes
__const3952_195_buffer Buffer_t 10 , -1, 0, __const3952_195_bufferBytes
__const3952_196_buffer Buffer_t 10 , -1, 0, __const3952_196_bufferBytes
__const3952_197_buffer Buffer_t 11 , -1, 0, __const3952_197_bufferBytes
__const3952_198_buffer Buffer_t 9 , -1, 0, __const3952_198_bufferBytes
__const3952_199_buffer Buffer_t 16 , -1, 0, __const3952_199_bufferBytes
__const3952_200_buffer Buffer_t 15 , -1, 0, __const3952_200_bufferBytes
__const3952_201_buffer Buffer_t 14 , -1, 0, __const3952_201_bufferBytes
__const3952_202_buffer Buffer_t 15 , -1, 0, __const3952_202_bufferBytes
__const3952_203_buffer Buffer_t 14 , -1, 0, __const3952_203_bufferBytes
__const3952_204_buffer Buffer_t 15 , -1, 0, __const3952_204_bufferBytes
__const3952_205_buffer Buffer_t 14 , -1, 0, __const3952_205_bufferBytes
__const3952_206_buffer Buffer_t 15 , -1, 0, __const3952_206_bufferBytes
__const3952_207_buffer Buffer_t 15 , -1, 0, __const3952_207_bufferBytes
__const3952_208_buffer Buffer_t 14 , -1, 0, __const3952_208_bufferBytes
__const3952_209_buffer Buffer_t 14 , -1, 0, __const3952_209_bufferBytes
__const3952_210_buffer Buffer_t 15 , -1, 0, __const3952_210_bufferBytes
__const3952_211_buffer Buffer_t 14 , -1, 0, __const3952_211_bufferBytes
__const3952_212_buffer Buffer_t 15 , -1, 0, __const3952_212_bufferBytes
__const3952_213_buffer Buffer_t 14 , -1, 0, __const3952_213_bufferBytes
__const3952_214_buffer Buffer_t 15 , -1, 0, __const3952_214_bufferBytes
__const3952_215_buffer Buffer_t 15 , -1, 0, __const3952_215_bufferBytes
__const3952_216_buffer Buffer_t 14 , -1, 0, __const3952_216_bufferBytes
__const3952_217_buffer Buffer_t 16 , -1, 0, __const3952_217_bufferBytes
__const3952_218_buffer Buffer_t 17 , -1, 0, __const3952_218_bufferBytes
__const3952_219_buffer Buffer_t 18 , -1, 0, __const3952_219_bufferBytes
__const3952_220_buffer Buffer_t 17 , -1, 0, __const3952_220_bufferBytes
__const3952_221_buffer Buffer_t 18 , -1, 0, __const3952_221_bufferBytes
__const3952_222_buffer Buffer_t 19 , -1, 0, __const3952_222_bufferBytes
__const3952_223_buffer Buffer_t 17 , -1, 0, __const3952_223_bufferBytes
__const3952_224_buffer Buffer_t 9 , -1, 0, __const3952_224_bufferBytes
__const3952_225_buffer Buffer_t 10 , -1, 0, __const3952_225_bufferBytes
__const3952_226_buffer Buffer_t 10 , -1, 0, __const3952_226_bufferBytes
__const3952_227_buffer Buffer_t 10 , -1, 0, __const3952_227_bufferBytes
__const3952_228_buffer Buffer_t 11 , -1, 0, __const3952_228_bufferBytes
__const3952_229_buffer Buffer_t 10 , -1, 0, __const3952_229_bufferBytes
__const3952_230_buffer Buffer_t 11 , -1, 0, __const3952_230_bufferBytes
__const3952_231_buffer Buffer_t 10 , -1, 0, __const3952_231_bufferBytes
__const3952_232_buffer Buffer_t 10 , -1, 0, __const3952_232_bufferBytes
__const3952_233_buffer Buffer_t 11 , -1, 0, __const3952_233_bufferBytes
__const3952_234_buffer Buffer_t 9 , -1, 0, __const3952_234_bufferBytes
__const3952_235_buffer Buffer_t 10 , -1, 0, __const3952_235_bufferBytes
__const3952_236_buffer Buffer_t 9 , -1, 0, __const3952_236_bufferBytes
__const3952_237_buffer Buffer_t 10 , -1, 0, __const3952_237_bufferBytes
__const3952_238_buffer Buffer_t 10 , -1, 0, __const3952_238_bufferBytes
__const3952_239_buffer Buffer_t 11 , -1, 0, __const3952_239_bufferBytes
__const3952_240_buffer Buffer_t 9 , -1, 0, __const3952_240_bufferBytes
__const3952_241_buffer Buffer_t 10 , -1, 0, __const3952_241_bufferBytes
__const3952_242_buffer Buffer_t 10 , -1, 0, __const3952_242_bufferBytes
__const3952_243_buffer Buffer_t 11 , -1, 0, __const3952_243_bufferBytes
__const3952_244_buffer Buffer_t 10 , -1, 0, __const3952_244_bufferBytes
__const3952_245_buffer Buffer_t 9 , -1, 0, __const3952_245_bufferBytes
__const3952_246_buffer Buffer_t 9 , -1, 0, __const3952_246_bufferBytes
__const3952_247_buffer Buffer_t 11 , -1, 0, __const3952_247_bufferBytes
__const3952_248_buffer Buffer_t 9 , -1, 0, __const3952_248_bufferBytes
__const3952_249_buffer Buffer_t 12 , -1, 0, __const3952_249_bufferBytes
__const3952_250_buffer Buffer_t 12 , -1, 0, __const3952_250_bufferBytes
__const3952_251_buffer Buffer_t 9 , -1, 0, __const3952_251_bufferBytes
__const3952_252_buffer Buffer_t 11 , -1, 0, __const3952_252_bufferBytes
__const3952_253_buffer Buffer_t 11 , -1, 0, __const3952_253_bufferBytes
__const3952_254_buffer Buffer_t 11 , -1, 0, __const3952_254_bufferBytes
__const3952_255_buffer Buffer_t 11 , -1, 0, __const3952_255_bufferBytes
__const3952_256_buffer Buffer_t 10 , -1, 0, __const3952_256_bufferBytes
__const3952_257_buffer Buffer_t 9 , -1, 0, __const3952_257_bufferBytes
__const3952_258_buffer Buffer_t 11 , -1, 0, __const3952_258_bufferBytes
__const3952_259_buffer Buffer_t 11 , -1, 0, __const3952_259_bufferBytes
__const3952_260_buffer Buffer_t 9 , -1, 0, __const3952_260_bufferBytes
__const3952_261_buffer Buffer_t 11 , -1, 0, __const3952_261_bufferBytes
__const3952_262_buffer Buffer_t 10 , -1, 0, __const3952_262_bufferBytes
__const3952_263_buffer Buffer_t 11 , -1, 0, __const3952_263_bufferBytes
__const3952_264_buffer Buffer_t 10 , -1, 0, __const3952_264_bufferBytes
__const3952_265_buffer Buffer_t 12 , -1, 0, __const3952_265_bufferBytes
__const3952_266_buffer Buffer_t 11 , -1, 0, __const3952_266_bufferBytes
__const3952_267_buffer Buffer_t 9 , -1, 0, __const3952_267_bufferBytes
__const3952_268_buffer Buffer_t 12 , -1, 0, __const3952_268_bufferBytes
__const3952_269_buffer Buffer_t 10 , -1, 0, __const3952_269_bufferBytes
__const3952_270_buffer Buffer_t 12 , -1, 0, __const3952_270_bufferBytes
__const3952_271_buffer Buffer_t 10 , -1, 0, __const3952_271_bufferBytes
__const3952_272_buffer Buffer_t 9 , -1, 0, __const3952_272_bufferBytes
__const3952_273_buffer Buffer_t 12 , -1, 0, __const3952_273_bufferBytes
__const3952_274_buffer Buffer_t 10 , -1, 0, __const3952_274_bufferBytes
__const3952_275_buffer Buffer_t 12 , -1, 0, __const3952_275_bufferBytes
__const3952_276_buffer Buffer_t 9 , -1, 0, __const3952_276_bufferBytes
__const3952_277_buffer Buffer_t 10 , -1, 0, __const3952_277_bufferBytes
__const3952_278_buffer Buffer_t 11 , -1, 0, __const3952_278_bufferBytes
__const3952_279_buffer Buffer_t 12 , -1, 0, __const3952_279_bufferBytes
__const3952_280_buffer Buffer_t 11 , -1, 0, __const3952_280_bufferBytes
__const3952_281_buffer Buffer_t 11 , -1, 0, __const3952_281_bufferBytes
__const3952_282_buffer Buffer_t 12 , -1, 0, __const3952_282_bufferBytes
__const3952_283_buffer Buffer_t 11 , -1, 0, __const3952_283_bufferBytes
__const3952_284_buffer Buffer_t 12 , -1, 0, __const3952_284_bufferBytes
__const3952_285_buffer Buffer_t 11 , -1, 0, __const3952_285_bufferBytes
__const3952_286_buffer Buffer_t 12 , -1, 0, __const3952_286_bufferBytes
__const3952_287_buffer Buffer_t 11 , -1, 0, __const3952_287_bufferBytes
__const3952_288_buffer Buffer_t 12 , -1, 0, __const3952_288_bufferBytes
__const3952_289_buffer Buffer_t 13 , -1, 0, __const3952_289_bufferBytes
__const3952_290_buffer Buffer_t 12 , -1, 0, __const3952_290_bufferBytes
__const3952_291_buffer Buffer_t 12 , -1, 0, __const3952_291_bufferBytes
__const3952_292_buffer Buffer_t 11 , -1, 0, __const3952_292_bufferBytes
__const3952_293_buffer Buffer_t 9 , -1, 0, __const3952_293_bufferBytes
__const3952_294_buffer Buffer_t 10 , -1, 0, __const3952_294_bufferBytes
__const3952_295_buffer Buffer_t 10 , -1, 0, __const3952_295_bufferBytes
__const3952_296_buffer Buffer_t 11 , -1, 0, __const3952_296_bufferBytes
__const3952_297_buffer Buffer_t 10 , -1, 0, __const3952_297_bufferBytes
__const3952_298_buffer Buffer_t 11 , -1, 0, __const3952_298_bufferBytes
__const3952_299_buffer Buffer_t 12 , -1, 0, __const3952_299_bufferBytes
__const3952_300_buffer Buffer_t 11 , -1, 0, __const3952_300_bufferBytes
__const3952_301_buffer Buffer_t 10 , -1, 0, __const3952_301_bufferBytes
__const3952_302_buffer Buffer_t 11 , -1, 0, __const3952_302_bufferBytes
__const3952_303_buffer Buffer_t 12 , -1, 0, __const3952_303_bufferBytes
__const3952_304_buffer Buffer_t 10 , -1, 0, __const3952_304_bufferBytes
__const3952_305_buffer Buffer_t 11 , -1, 0, __const3952_305_bufferBytes
__const3952_306_buffer Buffer_t 9 , -1, 0, __const3952_306_bufferBytes
__const3952_307_buffer Buffer_t 12 , -1, 0, __const3952_307_bufferBytes
__const3952_308_buffer Buffer_t 11 , -1, 0, __const3952_308_bufferBytes
__const3952_309_buffer Buffer_t 8 , -1, 0, __const3952_309_bufferBytes
__const3952_310_buffer Buffer_t 8 , -1, 0, __const3952_310_bufferBytes
__const3952_311_buffer Buffer_t 9 , -1, 0, __const3952_311_bufferBytes
__const3952_312_buffer Buffer_t 9 , -1, 0, __const3952_312_bufferBytes
__const3952_313_buffer Buffer_t 9 , -1, 0, __const3952_313_bufferBytes
__const3952_314_buffer Buffer_t 11 , -1, 0, __const3952_314_bufferBytes
__const3952_315_buffer Buffer_t 9 , -1, 0, __const3952_315_bufferBytes
__const3952_316_buffer Buffer_t 10 , -1, 0, __const3952_316_bufferBytes
__const3952_317_buffer Buffer_t 10 , -1, 0, __const3952_317_bufferBytes
__const3952_318_buffer Buffer_t 10 , -1, 0, __const3952_318_bufferBytes
__const3952_319_buffer Buffer_t 12 , -1, 0, __const3952_319_bufferBytes
__const3952_320_buffer Buffer_t 13 , -1, 0, __const3952_320_bufferBytes
__const3952_321_buffer Buffer_t 11 , -1, 0, __const3952_321_bufferBytes
__const3952_322_buffer Buffer_t 12 , -1, 0, __const3952_322_bufferBytes
__const3952_323_buffer Buffer_t 11 , -1, 0, __const3952_323_bufferBytes
__const3952_324_buffer Buffer_t 10 , -1, 0, __const3952_324_bufferBytes
__const3952_325_buffer Buffer_t 12 , -1, 0, __const3952_325_bufferBytes
__const3952_326_buffer Buffer_t 10 , -1, 0, __const3952_326_bufferBytes
__const3952_327_buffer Buffer_t 12 , -1, 0, __const3952_327_bufferBytes
__const3952_329_buffer Buffer_t 9 , -1, 0, __const3952_329_bufferBytes
__const3952_330_buffer Buffer_t 13 , -1, 0, __const3952_330_bufferBytes
__const3952_331_buffer Buffer_t 13 , -1, 0, __const3952_331_bufferBytes
__const3952_332_buffer Buffer_t 13 , -1, 0, __const3952_332_bufferBytes
__const3952_333_buffer Buffer_t 10 , -1, 0, __const3952_333_bufferBytes
__const3952_334_buffer Buffer_t 10 , -1, 0, __const3952_334_bufferBytes
__const3952_335_buffer Buffer_t 10 , -1, 0, __const3952_335_bufferBytes
__const3952_336_buffer Buffer_t 11 , -1, 0, __const3952_336_bufferBytes
__const3952_337_buffer Buffer_t 11 , -1, 0, __const3952_337_bufferBytes
__const3952_338_buffer Buffer_t 12 , -1, 0, __const3952_338_bufferBytes
__const3952_339_buffer Buffer_t 12 , -1, 0, __const3952_339_bufferBytes
__const3952_340_buffer Buffer_t 10 , -1, 0, __const3952_340_bufferBytes
__const3952_341_buffer Buffer_t 9 , -1, 0, __const3952_341_bufferBytes
__const3952_342_buffer Buffer_t 10 , -1, 0, __const3952_342_bufferBytes
__const3952_343_buffer Buffer_t 10 , -1, 0, __const3952_343_bufferBytes
__const3952_344_buffer Buffer_t 10 , -1, 0, __const3952_344_bufferBytes
__const3952_345_buffer Buffer_t 12 , -1, 0, __const3952_345_bufferBytes
__const3952_346_buffer Buffer_t 12 , -1, 0, __const3952_346_bufferBytes
__const3952_347_buffer Buffer_t 12 , -1, 0, __const3952_347_bufferBytes
__const3952_348_buffer Buffer_t 12 , -1, 0, __const3952_348_bufferBytes
__const3952_349_buffer Buffer_t 12 , -1, 0, __const3952_349_bufferBytes
__const3952_350_buffer Buffer_t 12 , -1, 0, __const3952_350_bufferBytes
__const3952_351_buffer Buffer_t 12 , -1, 0, __const3952_351_bufferBytes
__const3952_352_buffer Buffer_t 11 , -1, 0, __const3952_352_bufferBytes
__const3952_353_buffer Buffer_t 11 , -1, 0, __const3952_353_bufferBytes
__const3952_354_buffer Buffer_t 11 , -1, 0, __const3952_354_bufferBytes
__const3952_355_buffer Buffer_t 11 , -1, 0, __const3952_355_bufferBytes
__const3952_356_buffer Buffer_t 12 , -1, 0, __const3952_356_bufferBytes
__const3952_357_buffer Buffer_t 11 , -1, 0, __const3952_357_bufferBytes
__const3952_358_buffer Buffer_t 11 , -1, 0, __const3952_358_bufferBytes
__const3952_359_buffer Buffer_t 12 , -1, 0, __const3952_359_bufferBytes
__const3952_360_buffer Buffer_t 8 , -1, 0, __const3952_360_bufferBytes
__const3952_361_buffer Buffer_t 11 , -1, 0, __const3952_361_bufferBytes
__const3952_362_buffer Buffer_t 10 , -1, 0, __const3952_362_bufferBytes
__const3952_363_buffer Buffer_t 10 , -1, 0, __const3952_363_bufferBytes
__const3952_364_buffer Buffer_t 10 , -1, 0, __const3952_364_bufferBytes
__const3952_365_buffer Buffer_t 11 , -1, 0, __const3952_365_bufferBytes
__const3952_366_buffer Buffer_t 11 , -1, 0, __const3952_366_bufferBytes
__const3952_367_buffer Buffer_t 12 , -1, 0, __const3952_367_bufferBytes
__const3952_368_buffer Buffer_t 12 , -1, 0, __const3952_368_bufferBytes
__const3952_369_buffer Buffer_t 10 , -1, 0, __const3952_369_bufferBytes
__const3952_370_buffer Buffer_t 14 , -1, 0, __const3952_370_bufferBytes
__const3952_371_buffer Buffer_t 14 , -1, 0, __const3952_371_bufferBytes
__const3952_372_buffer Buffer_t 14 , -1, 0, __const3952_372_bufferBytes
__const3952_373_buffer Buffer_t 9 , -1, 0, __const3952_373_bufferBytes
__const3952_374_buffer Buffer_t 10 , -1, 0, __const3952_374_bufferBytes
__const3952_375_buffer Buffer_t 10 , -1, 0, __const3952_375_bufferBytes
__const3952_376_buffer Buffer_t 10 , -1, 0, __const3952_376_bufferBytes
__const3952_377_buffer Buffer_t 11 , -1, 0, __const3952_377_bufferBytes
__const3952_378_buffer Buffer_t 12 , -1, 0, __const3952_378_bufferBytes
__const3952_379_buffer Buffer_t 11 , -1, 0, __const3952_379_bufferBytes
__const3952_380_buffer Buffer_t 11 , -1, 0, __const3952_380_bufferBytes
__const3952_381_buffer Buffer_t 12 , -1, 0, __const3952_381_bufferBytes
__const3952_382_buffer Buffer_t 11 , -1, 0, __const3952_382_bufferBytes
__const3952_383_buffer Buffer_t 14 , -1, 0, __const3952_383_bufferBytes
__const3952_384_buffer Buffer_t 13 , -1, 0, __const3952_384_bufferBytes
__const3952_385_buffer Buffer_t 11 , -1, 0, __const3952_385_bufferBytes
__const3952_386_buffer Buffer_t 11 , -1, 0, __const3952_386_bufferBytes
__const3952_387_buffer Buffer_t 11 , -1, 0, __const3952_387_bufferBytes
__const3952_388_buffer Buffer_t 14 , -1, 0, __const3952_388_bufferBytes
__const3952_389_buffer Buffer_t 14 , -1, 0, __const3952_389_bufferBytes
__const3952_390_buffer Buffer_t 14 , -1, 0, __const3952_390_bufferBytes
__const3952_391_buffer Buffer_t 9 , -1, 0, __const3952_391_bufferBytes
__const3952_392_buffer Buffer_t 9 , -1, 0, __const3952_392_bufferBytes
__const3952_393_buffer Buffer_t 12 , -1, 0, __const3952_393_bufferBytes
__const3952_394_buffer Buffer_t 11 , -1, 0, __const3952_394_bufferBytes
__const3952_395_buffer Buffer_t 11 , -1, 0, __const3952_395_bufferBytes
__const3952_396_buffer Buffer_t 13 , -1, 0, __const3952_396_bufferBytes
__const3952_397_buffer Buffer_t 11 , -1, 0, __const3952_397_bufferBytes
__const3952_398_buffer Buffer_t 11 , -1, 0, __const3952_398_bufferBytes
__const3952_399_buffer Buffer_t 10 , -1, 0, __const3952_399_bufferBytes
__const3952_400_buffer Buffer_t 10 , -1, 0, __const3952_400_bufferBytes
__const3952_401_buffer Buffer_t 10 , -1, 0, __const3952_401_bufferBytes
__const3952_402_buffer Buffer_t 10 , -1, 0, __const3952_402_bufferBytes
__const3952_403_buffer Buffer_t 10 , -1, 0, __const3952_403_bufferBytes
; iter 4
X64_REGISTER_NAMES_0_bufferBytes StringHead_t 2
 db  "al" , 0
X64_REGISTER_NAMES_1_bufferBytes StringHead_t 2
 db  "cl" , 0
X64_REGISTER_NAMES_2_bufferBytes StringHead_t 2
 db  "dl" , 0
X64_REGISTER_NAMES_3_bufferBytes StringHead_t 2
 db  "bl" , 0
X64_REGISTER_NAMES_4_bufferBytes StringHead_t 2
 db  "ah" , 0
X64_REGISTER_NAMES_5_bufferBytes StringHead_t 2
 db  "ch" , 0
X64_REGISTER_NAMES_6_bufferBytes StringHead_t 2
 db  "dh" , 0
X64_REGISTER_NAMES_7_bufferBytes StringHead_t 2
 db  "bh" , 0
X64_REGISTER_NAMES_8_bufferBytes StringHead_t 3
 db  "r8l" , 0
X64_REGISTER_NAMES_9_bufferBytes StringHead_t 3
 db  "r9l" , 0
X64_REGISTER_NAMES_10_bufferBytes StringHead_t 4
 db  "r10l" , 0
X64_REGISTER_NAMES_11_bufferBytes StringHead_t 4
 db  "r11l" , 0
X64_REGISTER_NAMES_12_bufferBytes StringHead_t 4
 db  "r12l" , 0
X64_REGISTER_NAMES_13_bufferBytes StringHead_t 4
 db  "r13l" , 0
X64_REGISTER_NAMES_14_bufferBytes StringHead_t 4
 db  "r14l" , 0
X64_REGISTER_NAMES_15_bufferBytes StringHead_t 4
 db  "r15l" , 0
X64_REGISTER_NAMES_16_bufferBytes StringHead_t 2
 db  "ax" , 0
X64_REGISTER_NAMES_17_bufferBytes StringHead_t 2
 db  "cx" , 0
X64_REGISTER_NAMES_18_bufferBytes StringHead_t 2
 db  "dx" , 0
X64_REGISTER_NAMES_19_bufferBytes StringHead_t 2
 db  "bx" , 0
X64_REGISTER_NAMES_20_bufferBytes StringHead_t 2
 db  "sp" , 0
X64_REGISTER_NAMES_21_bufferBytes StringHead_t 2
 db  "bp" , 0
X64_REGISTER_NAMES_22_bufferBytes StringHead_t 2
 db  "si" , 0
X64_REGISTER_NAMES_23_bufferBytes StringHead_t 2
 db  "di" , 0
X64_REGISTER_NAMES_24_bufferBytes StringHead_t 3
 db  "r8w" , 0
X64_REGISTER_NAMES_25_bufferBytes StringHead_t 3
 db  "r9w" , 0
X64_REGISTER_NAMES_26_bufferBytes StringHead_t 4
 db  "r10w" , 0
X64_REGISTER_NAMES_27_bufferBytes StringHead_t 4
 db  "r11w" , 0
X64_REGISTER_NAMES_28_bufferBytes StringHead_t 4
 db  "r12w" , 0
X64_REGISTER_NAMES_29_bufferBytes StringHead_t 4
 db  "r13w" , 0
X64_REGISTER_NAMES_30_bufferBytes StringHead_t 4
 db  "r14w" , 0
X64_REGISTER_NAMES_31_bufferBytes StringHead_t 4
 db  "r15w" , 0
X64_REGISTER_NAMES_32_bufferBytes StringHead_t 3
 db  "eax" , 0
X64_REGISTER_NAMES_33_bufferBytes StringHead_t 3
 db  "ecx" , 0
X64_REGISTER_NAMES_34_bufferBytes StringHead_t 3
 db  "edx" , 0
X64_REGISTER_NAMES_35_bufferBytes StringHead_t 3
 db  "ebx" , 0
X64_REGISTER_NAMES_36_bufferBytes StringHead_t 3
 db  "esp" , 0
X64_REGISTER_NAMES_37_bufferBytes StringHead_t 3
 db  "ebp" , 0
X64_REGISTER_NAMES_38_bufferBytes StringHead_t 3
 db  "esi" , 0
X64_REGISTER_NAMES_39_bufferBytes StringHead_t 3
 db  "edi" , 0
X64_REGISTER_NAMES_40_bufferBytes StringHead_t 3
 db  "r8d" , 0
X64_REGISTER_NAMES_41_bufferBytes StringHead_t 3
 db  "r9d" , 0
X64_REGISTER_NAMES_42_bufferBytes StringHead_t 4
 db  "r10d" , 0
X64_REGISTER_NAMES_43_bufferBytes StringHead_t 4
 db  "r11d" , 0
X64_REGISTER_NAMES_44_bufferBytes StringHead_t 4
 db  "r12d" , 0
X64_REGISTER_NAMES_45_bufferBytes StringHead_t 4
 db  "r13d" , 0
X64_REGISTER_NAMES_46_bufferBytes StringHead_t 4
 db  "r14d" , 0
X64_REGISTER_NAMES_47_bufferBytes StringHead_t 4
 db  "r15d" , 0
X64_REGISTER_NAMES_48_bufferBytes StringHead_t 3
 db  "rax" , 0
X64_REGISTER_NAMES_49_bufferBytes StringHead_t 3
 db  "rcx" , 0
X64_REGISTER_NAMES_50_bufferBytes StringHead_t 3
 db  "rdx" , 0
X64_REGISTER_NAMES_51_bufferBytes StringHead_t 3
 db  "rbx" , 0
X64_REGISTER_NAMES_52_bufferBytes StringHead_t 3
 db  "rsp" , 0
X64_REGISTER_NAMES_53_bufferBytes StringHead_t 3
 db  "rbp" , 0
X64_REGISTER_NAMES_54_bufferBytes StringHead_t 3
 db  "rsi" , 0
X64_REGISTER_NAMES_55_bufferBytes StringHead_t 3
 db  "rdi" , 0
X64_REGISTER_NAMES_56_bufferBytes StringHead_t 2
 db  "r8" , 0
X64_REGISTER_NAMES_57_bufferBytes StringHead_t 2
 db  "r9" , 0
X64_REGISTER_NAMES_58_bufferBytes StringHead_t 3
 db  "r10" , 0
X64_REGISTER_NAMES_59_bufferBytes StringHead_t 3
 db  "r11" , 0
X64_REGISTER_NAMES_60_bufferBytes StringHead_t 3
 db  "r12" , 0
X64_REGISTER_NAMES_61_bufferBytes StringHead_t 3
 db  "r13" , 0
X64_REGISTER_NAMES_62_bufferBytes StringHead_t 3
 db  "r14" , 0
X64_REGISTER_NAMES_63_bufferBytes StringHead_t 3
 db  "r15" , 0
X64_REGISTER_NAMES_64_bufferBytes StringHead_t 3
 db  "st0" , 0
X64_REGISTER_NAMES_65_bufferBytes StringHead_t 3
 db  "st1" , 0
X64_REGISTER_NAMES_66_bufferBytes StringHead_t 3
 db  "st2" , 0
X64_REGISTER_NAMES_67_bufferBytes StringHead_t 3
 db  "st3" , 0
X64_REGISTER_NAMES_68_bufferBytes StringHead_t 3
 db  "st4" , 0
X64_REGISTER_NAMES_69_bufferBytes StringHead_t 3
 db  "st5" , 0
X64_REGISTER_NAMES_70_bufferBytes StringHead_t 3
 db  "st6" , 0
X64_REGISTER_NAMES_71_bufferBytes StringHead_t 3
 db  "st7" , 0
X64_REGISTER_NAMES_72_bufferBytes StringHead_t 3
 db  "mm0" , 0
X64_REGISTER_NAMES_73_bufferBytes StringHead_t 3
 db  "mm1" , 0
X64_REGISTER_NAMES_74_bufferBytes StringHead_t 3
 db  "mm2" , 0
X64_REGISTER_NAMES_75_bufferBytes StringHead_t 3
 db  "mm3" , 0
X64_REGISTER_NAMES_76_bufferBytes StringHead_t 3
 db  "mm4" , 0
X64_REGISTER_NAMES_77_bufferBytes StringHead_t 3
 db  "mm5" , 0
X64_REGISTER_NAMES_78_bufferBytes StringHead_t 3
 db  "mm6" , 0
X64_REGISTER_NAMES_79_bufferBytes StringHead_t 3
 db  "mm7" , 0
__const3857_0_bufferBytes StringHead_t 4
 db  "byte" , 0
__const3857_1_bufferBytes StringHead_t 4
 db  "word" , 0
__const3857_2_bufferBytes StringHead_t 5
 db  "dword" , 0
__const3857_3_bufferBytes StringHead_t 5
 db  "qword" , 0
__const3857_4_bufferBytes StringHead_t 5
 db  "tword" , 0
__const3859_0_bufferBytes StringHead_t 2
 db  "db" , 0
__const3859_1_bufferBytes StringHead_t 2
 db  "dw" , 0
__const3859_2_bufferBytes StringHead_t 2
 db  "dd" , 0
__const3859_3_bufferBytes StringHead_t 2
 db  "dq" , 0
__const3863_0_bufferBytes StringHead_t 5
 db  "use64" , 0
__const3863_1_bufferBytes StringHead_t 3
 db  "aaa" , 0
__const3863_2_bufferBytes StringHead_t 3
 db  "aad" , 0
__const3863_3_bufferBytes StringHead_t 3
 db  "aam" , 0
__const3863_4_bufferBytes StringHead_t 4
 db  "lahf" , 0
__const3863_5_bufferBytes StringHead_t 3
 db  "aas" , 0
__const3863_6_bufferBytes StringHead_t 3
 db  "das" , 0
__const3863_7_bufferBytes StringHead_t 4
 db  "sahf" , 0
__const3863_8_bufferBytes StringHead_t 3
 db  "lds" , 0
__const3863_9_bufferBytes StringHead_t 3
 db  "les" , 0
__const3863_10_bufferBytes StringHead_t 3
 db  "daa" , 0
__const3863_11_bufferBytes StringHead_t 4
 db  "into" , 0
__const3863_12_bufferBytes StringHead_t 5
 db  "bound" , 0
__const3863_13_bufferBytes StringHead_t 4
 db  "popa" , 0
__const3863_14_bufferBytes StringHead_t 5
 db  "pusha" , 0
__const3863_15_bufferBytes StringHead_t 4
 db  "arpl" , 0
__const3863_16_bufferBytes StringHead_t 7
 db  "loadall" , 0
__const3863_17_bufferBytes StringHead_t 6
 db  "pushad" , 0
__const3863_18_bufferBytes StringHead_t 5
 db  "popad" , 0
__const3863_19_bufferBytes StringHead_t 6
 db  "pushfd" , 0
__const3863_20_bufferBytes StringHead_t 5
 db  "popfd" , 0
__const3863_21_bufferBytes StringHead_t 8
 db  "loadalld" , 0
__const3863_22_bufferBytes StringHead_t 4
 db  "ibts" , 0
__const3863_23_bufferBytes StringHead_t 4
 db  "xbts" , 0
__const3863_24_bufferBytes StringHead_t 4
 db  "cwde" , 0
__const3863_25_bufferBytes StringHead_t 3
 db  "cdq" , 0
__const3863_26_bufferBytes StringHead_t 3
 db  "clc" , 0
__const3863_27_bufferBytes StringHead_t 3
 db  "cld" , 0
__const3863_28_bufferBytes StringHead_t 3
 db  "cli" , 0
__const3863_29_bufferBytes StringHead_t 3
 db  "stc" , 0
__const3863_30_bufferBytes StringHead_t 3
 db  "std" , 0
__const3863_31_bufferBytes StringHead_t 3
 db  "sti" , 0
__const3863_32_bufferBytes StringHead_t 3
 db  "cmc" , 0
__const3863_33_bufferBytes StringHead_t 5
 db  "cmpsb" , 0
__const3863_34_bufferBytes StringHead_t 5
 db  "cmpsd" , 0
__const3863_35_bufferBytes StringHead_t 5
 db  "movsb" , 0
__const3863_36_bufferBytes StringHead_t 5
 db  "movsd" , 0
__const3863_37_bufferBytes StringHead_t 5
 db  "lodsb" , 0
__const3863_38_bufferBytes StringHead_t 5
 db  "lodsd" , 0
__const3863_39_bufferBytes StringHead_t 5
 db  "stosb" , 0
__const3863_40_bufferBytes StringHead_t 5
 db  "stosd" , 0
__const3863_41_bufferBytes StringHead_t 5
 db  "scasb" , 0
__const3863_42_bufferBytes StringHead_t 5
 db  "scasd" , 0
__const3863_43_bufferBytes StringHead_t 4
 db  "insb" , 0
__const3863_44_bufferBytes StringHead_t 4
 db  "insd" , 0
__const3863_45_bufferBytes StringHead_t 5
 db  "outsb" , 0
__const3863_46_bufferBytes StringHead_t 5
 db  "outsd" , 0
__const3863_47_bufferBytes StringHead_t 3
 db  "rep" , 0
__const3863_48_bufferBytes StringHead_t 4
 db  "repe" , 0
__const3863_49_bufferBytes StringHead_t 4
 db  "repz" , 0
__const3863_50_bufferBytes StringHead_t 5
 db  "repne" , 0
__const3863_51_bufferBytes StringHead_t 5
 db  "repnz" , 0
__const3863_52_bufferBytes StringHead_t 3
 db  "hlt" , 0
__const3863_53_bufferBytes StringHead_t 4
 db  "lock" , 0
__const3863_54_bufferBytes StringHead_t 5
 db  "xlatb" , 0
__const3863_55_bufferBytes StringHead_t 4
 db  "int1" , 0
__const3863_56_bufferBytes StringHead_t 4
 db  "int3" , 0
__const3863_57_bufferBytes StringHead_t 5
 db  "iretd" , 0
__const3863_58_bufferBytes StringHead_t 5
 db  "iretw" , 0
__const3863_61_bufferBytes StringHead_t 5
 db  "pushf" , 0
__const3863_62_bufferBytes StringHead_t 6
 db  "pushfq" , 0
__const3863_63_bufferBytes StringHead_t 4
 db  "popf" , 0
__const3863_64_bufferBytes StringHead_t 5
 db  "popfq" , 0
__const3863_65_bufferBytes StringHead_t 5
 db  "leave" , 0
__const3863_66_bufferBytes StringHead_t 4
 db  "wait" , 0
__const3863_83_bufferBytes StringHead_t 6
 db  "pushfw" , 0
__const3863_84_bufferBytes StringHead_t 5
 db  "popfw" , 0
__const3863_85_bufferBytes StringHead_t 4
 db  "clts" , 0
__const3863_86_bufferBytes StringHead_t 5
 db  "cpuid" , 0
__const3863_87_bufferBytes StringHead_t 5
 db  "wrmsr" , 0
__const3863_88_bufferBytes StringHead_t 5
 db  "rdtsc" , 0
__const3863_89_bufferBytes StringHead_t 5
 db  "rdmsr" , 0
__const3863_90_bufferBytes StringHead_t 5
 db  "rdpmc" , 0
__const3863_91_bufferBytes StringHead_t 3
 db  "rsm" , 0
__const3863_92_bufferBytes StringHead_t 4
 db  "invd" , 0
__const3863_93_bufferBytes StringHead_t 6
 db  "wbinvd" , 0
__const3863_94_bufferBytes StringHead_t 7
 db  "syscall" , 0
__const3863_95_bufferBytes StringHead_t 6
 db  "sysret" , 0
__const3863_96_bufferBytes StringHead_t 8
 db  "sysenter" , 0
__const3863_97_bufferBytes StringHead_t 7
 db  "sysexit" , 0
__const3863_98_bufferBytes StringHead_t 3
 db  "ud2" , 0
__const3863_99_bufferBytes StringHead_t 6
 db  "rdtscp" , 0
__const3863_100_bufferBytes StringHead_t 6
 db  "swapgs" , 0
__const3863_101_bufferBytes StringHead_t 3
 db  "adc" , 0
__const3863_102_bufferBytes StringHead_t 3
 db  "add" , 0
__const3863_103_bufferBytes StringHead_t 3
 db  "and" , 0
__const3863_104_bufferBytes StringHead_t 3
 db  "cmp" , 0
__const3863_105_bufferBytes StringHead_t 3
 db  "sbb" , 0
__const3863_106_bufferBytes StringHead_t 3
 db  "sub" , 0
__const3863_107_bufferBytes StringHead_t 2
 db  "or" , 0
__const3863_108_bufferBytes StringHead_t 3
 db  "xor" , 0
__const3863_109_bufferBytes StringHead_t 2
 db  "bt" , 0
__const3863_110_bufferBytes StringHead_t 3
 db  "btc" , 0
__const3863_111_bufferBytes StringHead_t 3
 db  "btr" , 0
__const3863_112_bufferBytes StringHead_t 3
 db  "bts" , 0
__const3863_113_bufferBytes StringHead_t 4
 db  "xadd" , 0
__const3863_114_bufferBytes StringHead_t 7
 db  "cmpxchg" , 0
__const3863_115_bufferBytes StringHead_t 5
 db  "cmovo" , 0
__const3863_116_bufferBytes StringHead_t 6
 db  "cmovno" , 0
__const3863_117_bufferBytes StringHead_t 5
 db  "cmovb" , 0
__const3863_118_bufferBytes StringHead_t 7
 db  "cmovnae" , 0
__const3863_119_bufferBytes StringHead_t 5
 db  "cmovc" , 0
__const3863_120_bufferBytes StringHead_t 6
 db  "cmovnb" , 0
__const3863_121_bufferBytes StringHead_t 6
 db  "cmovae" , 0
__const3863_122_bufferBytes StringHead_t 6
 db  "cmovnc" , 0
__const3863_123_bufferBytes StringHead_t 5
 db  "cmovz" , 0
__const3863_124_bufferBytes StringHead_t 5
 db  "cmove" , 0
__const3863_125_bufferBytes StringHead_t 6
 db  "cmovnz" , 0
__const3863_126_bufferBytes StringHead_t 6
 db  "cmovne" , 0
__const3863_127_bufferBytes StringHead_t 6
 db  "cmovbe" , 0
__const3863_128_bufferBytes StringHead_t 6
 db  "cmovna" , 0
__const3863_129_bufferBytes StringHead_t 7
 db  "cmovnbe" , 0
__const3863_130_bufferBytes StringHead_t 5
 db  "cmova" , 0
__const3863_131_bufferBytes StringHead_t 5
 db  "cmovs" , 0
__const3863_132_bufferBytes StringHead_t 6
 db  "cmovns" , 0
__const3863_133_bufferBytes StringHead_t 5
 db  "cmovp" , 0
__const3863_134_bufferBytes StringHead_t 6
 db  "cmovpe" , 0
__const3863_135_bufferBytes StringHead_t 6
 db  "cmovnp" , 0
__const3863_136_bufferBytes StringHead_t 6
 db  "cmovpo" , 0
__const3863_137_bufferBytes StringHead_t 5
 db  "cmovl" , 0
__const3863_138_bufferBytes StringHead_t 7
 db  "cmovnge" , 0
__const3863_139_bufferBytes StringHead_t 6
 db  "cmovge" , 0
__const3863_140_bufferBytes StringHead_t 6
 db  "cmovnl" , 0
__const3863_141_bufferBytes StringHead_t 6
 db  "cmovle" , 0
__const3863_142_bufferBytes StringHead_t 6
 db  "cmovng" , 0
__const3863_143_bufferBytes StringHead_t 7
 db  "cmovnle" , 0
__const3863_144_bufferBytes StringHead_t 5
 db  "cmovg" , 0
__const3863_145_bufferBytes StringHead_t 3
 db  "bsf" , 0
__const3863_146_bufferBytes StringHead_t 3
 db  "bsr" , 0
__const3863_147_bufferBytes StringHead_t 3
 db  "not" , 0
__const3863_148_bufferBytes StringHead_t 3
 db  "neg" , 0
__const3863_149_bufferBytes StringHead_t 3
 db  "mul" , 0
__const3863_150_bufferBytes StringHead_t 4
 db  "imul" , 0
__const3863_151_bufferBytes StringHead_t 3
 db  "div" , 0
__const3863_152_bufferBytes StringHead_t 4
 db  "idiv" , 0
__const3863_153_bufferBytes StringHead_t 3
 db  "lar" , 0
__const3863_154_bufferBytes StringHead_t 3
 db  "lss" , 0
__const3863_155_bufferBytes StringHead_t 3
 db  "lfs" , 0
__const3863_156_bufferBytes StringHead_t 3
 db  "lgs" , 0
__const3863_157_bufferBytes StringHead_t 4
 db  "sldt" , 0
__const3863_158_bufferBytes StringHead_t 3
 db  "str" , 0
__const3863_159_bufferBytes StringHead_t 4
 db  "lldt" , 0
__const3863_160_bufferBytes StringHead_t 3
 db  "ltr" , 0
__const3863_161_bufferBytes StringHead_t 4
 db  "verr" , 0
__const3863_162_bufferBytes StringHead_t 4
 db  "verw" , 0
__const3863_163_bufferBytes StringHead_t 4
 db  "sgdt" , 0
__const3863_164_bufferBytes StringHead_t 4
 db  "sidt" , 0
__const3863_165_bufferBytes StringHead_t 4
 db  "lgdt" , 0
__const3863_166_bufferBytes StringHead_t 4
 db  "lidt" , 0
__const3863_167_bufferBytes StringHead_t 4
 db  "smsw" , 0
__const3863_168_bufferBytes StringHead_t 4
 db  "lmsw" , 0
__const3863_169_bufferBytes StringHead_t 6
 db  "invlpg" , 0
__const3863_170_bufferBytes StringHead_t 2
 db  "jo" , 0
__const3863_171_bufferBytes StringHead_t 3
 db  "jno" , 0
__const3863_172_bufferBytes StringHead_t 2
 db  "jb" , 0
__const3863_173_bufferBytes StringHead_t 3
 db  "jae" , 0
__const3863_174_bufferBytes StringHead_t 2
 db  "jz" , 0
__const3863_175_bufferBytes StringHead_t 2
 db  "je" , 0
__const3863_176_bufferBytes StringHead_t 3
 db  "jnz" , 0
__const3863_177_bufferBytes StringHead_t 3
 db  "jne" , 0
__const3863_178_bufferBytes StringHead_t 3
 db  "jbe" , 0
__const3863_179_bufferBytes StringHead_t 2
 db  "ja" , 0
__const3863_180_bufferBytes StringHead_t 2
 db  "js" , 0
__const3863_181_bufferBytes StringHead_t 3
 db  "jns" , 0
__const3863_182_bufferBytes StringHead_t 2
 db  "jp" , 0
__const3863_183_bufferBytes StringHead_t 3
 db  "jnp" , 0
__const3863_184_bufferBytes StringHead_t 2
 db  "jl" , 0
__const3863_185_bufferBytes StringHead_t 3
 db  "jge" , 0
__const3863_186_bufferBytes StringHead_t 3
 db  "jle" , 0
__const3863_187_bufferBytes StringHead_t 2
 db  "jg" , 0
__const3863_188_bufferBytes StringHead_t 4
 db  "loop" , 0
__const3863_189_bufferBytes StringHead_t 5
 db  "loopz" , 0
__const3863_190_bufferBytes StringHead_t 6
 db  "loopnz" , 0
__const3863_191_bufferBytes StringHead_t 5
 db  "loope" , 0
__const3863_192_bufferBytes StringHead_t 6
 db  "loopne" , 0
__const3863_193_bufferBytes StringHead_t 5
 db  "jrcxz" , 0
__const3863_194_bufferBytes StringHead_t 5
 db  "loopd" , 0
__const3863_195_bufferBytes StringHead_t 6
 db  "loopzd" , 0
__const3863_196_bufferBytes StringHead_t 7
 db  "loopnzd" , 0
__const3863_197_bufferBytes StringHead_t 6
 db  "looped" , 0
__const3863_198_bufferBytes StringHead_t 7
 db  "loopned" , 0
__const3863_199_bufferBytes StringHead_t 5
 db  "jecxz" , 0
__const3863_200_bufferBytes StringHead_t 3
 db  "rol" , 0
__const3863_201_bufferBytes StringHead_t 3
 db  "ror" , 0
__const3863_202_bufferBytes StringHead_t 3
 db  "rcl" , 0
__const3863_203_bufferBytes StringHead_t 3
 db  "rcr" , 0
__const3863_204_bufferBytes StringHead_t 3
 db  "shl" , 0
__const3863_205_bufferBytes StringHead_t 3
 db  "sal" , 0
__const3863_206_bufferBytes StringHead_t 3
 db  "shr" , 0
__const3863_207_bufferBytes StringHead_t 3
 db  "sar" , 0
__const3863_208_bufferBytes StringHead_t 5
 db  "movsx" , 0
__const3863_209_bufferBytes StringHead_t 5
 db  "movzx" , 0
__const3863_210_bufferBytes StringHead_t 4
 db  "seto" , 0
__const3863_211_bufferBytes StringHead_t 5
 db  "setno" , 0
__const3863_212_bufferBytes StringHead_t 4
 db  "setb" , 0
__const3863_213_bufferBytes StringHead_t 6
 db  "setnae" , 0
__const3863_214_bufferBytes StringHead_t 4
 db  "setc" , 0
__const3863_215_bufferBytes StringHead_t 5
 db  "setnb" , 0
__const3863_216_bufferBytes StringHead_t 5
 db  "setae" , 0
__const3863_217_bufferBytes StringHead_t 5
 db  "setnc" , 0
__const3863_218_bufferBytes StringHead_t 4
 db  "setz" , 0
__const3863_219_bufferBytes StringHead_t 4
 db  "sete" , 0
__const3863_220_bufferBytes StringHead_t 5
 db  "setnz" , 0
__const3863_221_bufferBytes StringHead_t 5
 db  "setne" , 0
__const3863_222_bufferBytes StringHead_t 5
 db  "setbe" , 0
__const3863_223_bufferBytes StringHead_t 5
 db  "setna" , 0
__const3863_224_bufferBytes StringHead_t 6
 db  "setnbe" , 0
__const3863_225_bufferBytes StringHead_t 4
 db  "seta" , 0
__const3863_226_bufferBytes StringHead_t 4
 db  "sets" , 0
__const3863_227_bufferBytes StringHead_t 5
 db  "setns" , 0
__const3863_228_bufferBytes StringHead_t 4
 db  "setp" , 0
__const3863_229_bufferBytes StringHead_t 5
 db  "setpe" , 0
__const3863_230_bufferBytes StringHead_t 5
 db  "setnp" , 0
__const3863_231_bufferBytes StringHead_t 5
 db  "setpo" , 0
__const3863_232_bufferBytes StringHead_t 4
 db  "setl" , 0
__const3863_233_bufferBytes StringHead_t 6
 db  "setnge" , 0
__const3863_234_bufferBytes StringHead_t 5
 db  "setge" , 0
__const3863_235_bufferBytes StringHead_t 5
 db  "setnl" , 0
__const3863_236_bufferBytes StringHead_t 5
 db  "setle" , 0
__const3863_237_bufferBytes StringHead_t 5
 db  "setng" , 0
__const3863_238_bufferBytes StringHead_t 6
 db  "setnle" , 0
__const3863_239_bufferBytes StringHead_t 4
 db  "setg" , 0
__const3863_240_bufferBytes StringHead_t 3
 db  "mov" , 0
__const3863_241_bufferBytes StringHead_t 4
 db  "test" , 0
__const3863_242_bufferBytes StringHead_t 4
 db  "xchg" , 0
__const3863_244_bufferBytes StringHead_t 2
 db  "in" , 0
__const3863_245_bufferBytes StringHead_t 3
 db  "lsl" , 0
__const3863_246_bufferBytes StringHead_t 6
 db  "movsxd" , 0
__const3863_247_bufferBytes StringHead_t 3
 db  "lea" , 0
__const3863_249_bufferBytes StringHead_t 4
 db  "call" , 0
__const3863_250_bufferBytes StringHead_t 3
 db  "jmp" , 0
__const3863_251_bufferBytes StringHead_t 4
 db  "push" , 0
__const3863_252_bufferBytes StringHead_t 3
 db  "pop" , 0
__const3863_253_bufferBytes StringHead_t 5
 db  "bswap" , 0
__const3863_255_bufferBytes StringHead_t 10
 db  "cmpxchg16b" , 0
__const3863_256_bufferBytes StringHead_t 3
 db  "inc" , 0
__const3863_257_bufferBytes StringHead_t 3
 db  "dec" , 0
__const3863_258_bufferBytes StringHead_t 3
 db  "int" , 0
__const3863_259_bufferBytes StringHead_t 4
 db  "retf" , 0
__const3863_260_bufferBytes StringHead_t 3
 db  "ret" , 0
__const3863_261_bufferBytes StringHead_t 3
 db  "nop" , 0
__const3863_262_bufferBytes StringHead_t 8
 db  "packssdw" , 0
__const3863_263_bufferBytes StringHead_t 8
 db  "packsswb" , 0
__const3863_264_bufferBytes StringHead_t 8
 db  "packuswb" , 0
__const3863_265_bufferBytes StringHead_t 5
 db  "paddb" , 0
__const3863_266_bufferBytes StringHead_t 5
 db  "paddw" , 0
__const3863_267_bufferBytes StringHead_t 5
 db  "paddd" , 0
__const3863_268_bufferBytes StringHead_t 5
 db  "paddq" , 0
__const3863_269_bufferBytes StringHead_t 6
 db  "paddsb" , 0
__const3863_270_bufferBytes StringHead_t 6
 db  "paddsw" , 0
__const3863_271_bufferBytes StringHead_t 7
 db  "paddusb" , 0
__const3863_272_bufferBytes StringHead_t 7
 db  "paddusw" , 0
__const3863_273_bufferBytes StringHead_t 7
 db  "pmaddwd" , 0
__const3863_274_bufferBytes StringHead_t 4
 db  "pand" , 0
__const3863_275_bufferBytes StringHead_t 5
 db  "pandn" , 0
__const3863_276_bufferBytes StringHead_t 3
 db  "por" , 0
__const3863_277_bufferBytes StringHead_t 4
 db  "pxor" , 0
__const3863_278_bufferBytes StringHead_t 7
 db  "pcmpeqb" , 0
__const3863_279_bufferBytes StringHead_t 7
 db  "pcmpeqw" , 0
__const3863_280_bufferBytes StringHead_t 7
 db  "pcmpeqd" , 0
__const3863_281_bufferBytes StringHead_t 7
 db  "pcmpgtb" , 0
__const3863_282_bufferBytes StringHead_t 7
 db  "pcmpgtw" , 0
__const3863_283_bufferBytes StringHead_t 7
 db  "pcmpgtd" , 0
__const3863_284_bufferBytes StringHead_t 6
 db  "pmulhw" , 0
__const3863_285_bufferBytes StringHead_t 6
 db  "pmullw" , 0
__const3863_286_bufferBytes StringHead_t 5
 db  "psubb" , 0
__const3863_287_bufferBytes StringHead_t 5
 db  "psubw" , 0
__const3863_288_bufferBytes StringHead_t 5
 db  "psubd" , 0
__const3863_289_bufferBytes StringHead_t 6
 db  "psubsb" , 0
__const3863_290_bufferBytes StringHead_t 6
 db  "psubsw" , 0
__const3863_291_bufferBytes StringHead_t 7
 db  "psubusb" , 0
__const3863_292_bufferBytes StringHead_t 7
 db  "psubusw" , 0
__const3863_293_bufferBytes StringHead_t 9
 db  "punpckhbw" , 0
__const3863_294_bufferBytes StringHead_t 9
 db  "punpckhwd" , 0
__const3863_295_bufferBytes StringHead_t 9
 db  "punpckhdq" , 0
__const3863_296_bufferBytes StringHead_t 6
 db  "pminub" , 0
__const3863_297_bufferBytes StringHead_t 6
 db  "pmaxub" , 0
__const3863_298_bufferBytes StringHead_t 5
 db  "pavgb" , 0
__const3863_299_bufferBytes StringHead_t 5
 db  "pavgw" , 0
__const3863_300_bufferBytes StringHead_t 7
 db  "pmulhuw" , 0
__const3863_301_bufferBytes StringHead_t 6
 db  "pminsw" , 0
__const3863_302_bufferBytes StringHead_t 6
 db  "pmaxsw" , 0
__const3863_303_bufferBytes StringHead_t 6
 db  "psadbw" , 0
__const3863_304_bufferBytes StringHead_t 5
 db  "psubq" , 0
__const3863_305_bufferBytes StringHead_t 7
 db  "pmuludq" , 0
__const3863_306_bufferBytes StringHead_t 6
 db  "psignb" , 0
__const3863_307_bufferBytes StringHead_t 6
 db  "psignw" , 0
__const3863_308_bufferBytes StringHead_t 6
 db  "psignd" , 0
__const3863_309_bufferBytes StringHead_t 6
 db  "pshufb" , 0
__const3863_310_bufferBytes StringHead_t 8
 db  "pmulhrsw" , 0
__const3863_311_bufferBytes StringHead_t 9
 db  "pmaddubsw" , 0
__const3863_312_bufferBytes StringHead_t 6
 db  "phsubw" , 0
__const3863_313_bufferBytes StringHead_t 7
 db  "phsubsw" , 0
__const3863_314_bufferBytes StringHead_t 6
 db  "phsubd" , 0
__const3863_315_bufferBytes StringHead_t 7
 db  "phaddsw" , 0
__const3863_316_bufferBytes StringHead_t 6
 db  "phaddw" , 0
__const3863_317_bufferBytes StringHead_t 6
 db  "phaddd" , 0
__const3863_318_bufferBytes StringHead_t 5
 db  "pabsb" , 0
__const3863_319_bufferBytes StringHead_t 5
 db  "pabsw" , 0
__const3863_320_bufferBytes StringHead_t 5
 db  "pabsd" , 0
__const3863_321_bufferBytes StringHead_t 4
 db  "emms" , 0
__const3863_322_bufferBytes StringHead_t 9
 db  "punpcklbw" , 0
__const3863_323_bufferBytes StringHead_t 9
 db  "punpcklwd" , 0
__const3863_324_bufferBytes StringHead_t 9
 db  "punpckldq" , 0
__const3863_325_bufferBytes StringHead_t 5
 db  "psrlw" , 0
__const3863_326_bufferBytes StringHead_t 5
 db  "psraw" , 0
__const3863_327_bufferBytes StringHead_t 5
 db  "psllw" , 0
__const3863_328_bufferBytes StringHead_t 5
 db  "psrld" , 0
__const3863_329_bufferBytes StringHead_t 5
 db  "psrad" , 0
__const3863_330_bufferBytes StringHead_t 5
 db  "pslld" , 0
__const3863_331_bufferBytes StringHead_t 5
 db  "psrlq" , 0
__const3863_332_bufferBytes StringHead_t 5
 db  "psllq" , 0
__const3863_333_bufferBytes StringHead_t 4
 db  "movd" , 0
__const3863_334_bufferBytes StringHead_t 4
 db  "movq" , 0
__const3863_335_bufferBytes StringHead_t 7
 db  "palignr" , 0
__const3863_336_bufferBytes StringHead_t 6
 db  "pshufw" , 0
__const3863_337_bufferBytes StringHead_t 6
 db  "pextrw" , 0
__const3863_338_bufferBytes StringHead_t 6
 db  "pinsrw" , 0
__const3863_339_bufferBytes StringHead_t 8
 db  "pmovmskb" , 0
__const3867_0_bufferBytes StringHead_t 5
 db  "f2xm1" , 0
__const3867_1_bufferBytes StringHead_t 4
 db  "fabs" , 0
__const3867_2_bufferBytes StringHead_t 4
 db  "fchs" , 0
__const3867_3_bufferBytes StringHead_t 6
 db  "fcompp" , 0
__const3867_4_bufferBytes StringHead_t 7
 db  "fdecstp" , 0
__const3867_5_bufferBytes StringHead_t 7
 db  "fincstp" , 0
__const3867_6_bufferBytes StringHead_t 4
 db  "fld1" , 0
__const3867_7_bufferBytes StringHead_t 6
 db  "fldl2e" , 0
__const3867_8_bufferBytes StringHead_t 6
 db  "fldl2t" , 0
__const3867_9_bufferBytes StringHead_t 6
 db  "fldlg2" , 0
__const3867_10_bufferBytes StringHead_t 6
 db  "fldln2" , 0
__const3867_11_bufferBytes StringHead_t 5
 db  "fldpi" , 0
__const3867_12_bufferBytes StringHead_t 4
 db  "fldz" , 0
__const3867_13_bufferBytes StringHead_t 6
 db  "fnclex" , 0
__const3867_14_bufferBytes StringHead_t 6
 db  "fninit" , 0
__const3867_15_bufferBytes StringHead_t 5
 db  "fclex" , 0
__const3867_16_bufferBytes StringHead_t 5
 db  "finit" , 0
__const3867_17_bufferBytes StringHead_t 4
 db  "fnop" , 0
__const3867_18_bufferBytes StringHead_t 6
 db  "fpatan" , 0
__const3867_19_bufferBytes StringHead_t 5
 db  "fprem" , 0
__const3867_20_bufferBytes StringHead_t 5
 db  "fptan" , 0
__const3867_21_bufferBytes StringHead_t 7
 db  "frndint" , 0
__const3867_22_bufferBytes StringHead_t 6
 db  "fscale" , 0
__const3867_23_bufferBytes StringHead_t 5
 db  "fsqrt" , 0
__const3867_24_bufferBytes StringHead_t 4
 db  "ftst" , 0
__const3867_25_bufferBytes StringHead_t 5
 db  "fwait" , 0
__const3867_26_bufferBytes StringHead_t 4
 db  "fxam" , 0
__const3867_27_bufferBytes StringHead_t 7
 db  "fxtract" , 0
__const3867_28_bufferBytes StringHead_t 5
 db  "fyl2x" , 0
__const3867_29_bufferBytes StringHead_t 7
 db  "fyl2xp1" , 0
__const3867_30_bufferBytes StringHead_t 4
 db  "fsin" , 0
__const3867_31_bufferBytes StringHead_t 4
 db  "fcos" , 0
__const3867_32_bufferBytes StringHead_t 7
 db  "fsincos" , 0
__const3867_33_bufferBytes StringHead_t 6
 db  "fprem1" , 0
__const3867_34_bufferBytes StringHead_t 7
 db  "fucompp" , 0
__const3952_0_bufferBytes StringHead_t 19
 db  "common/common_align" , 0
__const3952_1_bufferBytes StringHead_t 18
 db  "common/common_data" , 0
__const3952_2_bufferBytes StringHead_t 17
 db  "common/common_equ" , 0
__const3952_3_bufferBytes StringHead_t 19
 db  "common/common_jumps" , 0
__const3952_4_bufferBytes StringHead_t 25
 db  "common/common_no_operands" , 0
__const3952_5_bufferBytes StringHead_t 19
 db  "common/common_ports" , 0
__const3952_6_bufferBytes StringHead_t 18
 db  "common/common_proc" , 0
__const3952_7_bufferBytes StringHead_t 8
 db  "core/adc" , 0
__const3952_8_bufferBytes StringHead_t 8
 db  "core/add" , 0
__const3952_9_bufferBytes StringHead_t 8
 db  "core/and" , 0
__const3952_10_bufferBytes StringHead_t 8
 db  "core/bsf" , 0
__const3952_11_bufferBytes StringHead_t 8
 db  "core/bsr" , 0
__const3952_12_bufferBytes StringHead_t 10
 db  "core/bswap" , 0
__const3952_13_bufferBytes StringHead_t 7
 db  "core/bt" , 0
__const3952_14_bufferBytes StringHead_t 8
 db  "core/btc" , 0
__const3952_15_bufferBytes StringHead_t 8
 db  "core/btr" , 0
__const3952_16_bufferBytes StringHead_t 8
 db  "core/bts" , 0
__const3952_17_bufferBytes StringHead_t 8
 db  "core/cbw" , 0
__const3952_18_bufferBytes StringHead_t 8
 db  "core/cdq" , 0
__const3952_19_bufferBytes StringHead_t 9
 db  "core/cdqe" , 0
__const3952_20_bufferBytes StringHead_t 8
 db  "core/clc" , 0
__const3952_21_bufferBytes StringHead_t 8
 db  "core/cld" , 0
__const3952_22_bufferBytes StringHead_t 8
 db  "core/cli" , 0
__const3952_23_bufferBytes StringHead_t 9
 db  "core/clts" , 0
__const3952_24_bufferBytes StringHead_t 8
 db  "core/cmc" , 0
__const3952_25_bufferBytes StringHead_t 10
 db  "core/cmova" , 0
__const3952_26_bufferBytes StringHead_t 11
 db  "core/cmovae" , 0
__const3952_27_bufferBytes StringHead_t 10
 db  "core/cmovb" , 0
__const3952_28_bufferBytes StringHead_t 11
 db  "core/cmovbe" , 0
__const3952_29_bufferBytes StringHead_t 10
 db  "core/cmovc" , 0
__const3952_30_bufferBytes StringHead_t 10
 db  "core/cmove" , 0
__const3952_31_bufferBytes StringHead_t 10
 db  "core/cmovg" , 0
__const3952_32_bufferBytes StringHead_t 11
 db  "core/cmovge" , 0
__const3952_33_bufferBytes StringHead_t 10
 db  "core/cmovl" , 0
__const3952_34_bufferBytes StringHead_t 11
 db  "core/cmovle" , 0
__const3952_35_bufferBytes StringHead_t 11
 db  "core/cmovna" , 0
__const3952_36_bufferBytes StringHead_t 12
 db  "core/cmovnae" , 0
__const3952_37_bufferBytes StringHead_t 11
 db  "core/cmovnb" , 0
__const3952_38_bufferBytes StringHead_t 12
 db  "core/cmovnbe" , 0
__const3952_39_bufferBytes StringHead_t 11
 db  "core/cmovnc" , 0
__const3952_40_bufferBytes StringHead_t 11
 db  "core/cmovne" , 0
__const3952_41_bufferBytes StringHead_t 11
 db  "core/cmovng" , 0
__const3952_42_bufferBytes StringHead_t 12
 db  "core/cmovnge" , 0
__const3952_43_bufferBytes StringHead_t 11
 db  "core/cmovnl" , 0
__const3952_44_bufferBytes StringHead_t 12
 db  "core/cmovnle" , 0
__const3952_45_bufferBytes StringHead_t 11
 db  "core/cmovno" , 0
__const3952_46_bufferBytes StringHead_t 11
 db  "core/cmovnp" , 0
__const3952_47_bufferBytes StringHead_t 11
 db  "core/cmovns" , 0
__const3952_48_bufferBytes StringHead_t 11
 db  "core/cmovnz" , 0
__const3952_49_bufferBytes StringHead_t 10
 db  "core/cmovo" , 0
__const3952_50_bufferBytes StringHead_t 10
 db  "core/cmovp" , 0
__const3952_51_bufferBytes StringHead_t 11
 db  "core/cmovpe" , 0
__const3952_52_bufferBytes StringHead_t 11
 db  "core/cmovpo" , 0
__const3952_53_bufferBytes StringHead_t 10
 db  "core/cmovs" , 0
__const3952_54_bufferBytes StringHead_t 10
 db  "core/cmovz" , 0
__const3952_55_bufferBytes StringHead_t 8
 db  "core/cmp" , 0
__const3952_56_bufferBytes StringHead_t 10
 db  "core/cmpsb" , 0
__const3952_57_bufferBytes StringHead_t 10
 db  "core/cmpsd" , 0
__const3952_58_bufferBytes StringHead_t 10
 db  "core/cmpsq" , 0
__const3952_59_bufferBytes StringHead_t 10
 db  "core/cmpsw" , 0
__const3952_60_bufferBytes StringHead_t 12
 db  "core/cmpxchg" , 0
__const3952_61_bufferBytes StringHead_t 15
 db  "core/cmpxchg16b" , 0
__const3952_62_bufferBytes StringHead_t 14
 db  "core/cmpxchg8b" , 0
__const3952_63_bufferBytes StringHead_t 10
 db  "core/cpuid" , 0
__const3952_64_bufferBytes StringHead_t 8
 db  "core/cqo" , 0
__const3952_65_bufferBytes StringHead_t 8
 db  "core/cwd" , 0
__const3952_66_bufferBytes StringHead_t 9
 db  "core/cwde" , 0
__const3952_67_bufferBytes StringHead_t 8
 db  "core/dec" , 0
__const3952_68_bufferBytes StringHead_t 8
 db  "core/div" , 0
__const3952_69_bufferBytes StringHead_t 10
 db  "core/enter" , 0
__const3952_70_bufferBytes StringHead_t 8
 db  "core/hlt" , 0
__const3952_71_bufferBytes StringHead_t 9
 db  "core/idiv" , 0
__const3952_72_bufferBytes StringHead_t 7
 db  "core/in" , 0
__const3952_73_bufferBytes StringHead_t 8
 db  "core/inc" , 0
__const3952_74_bufferBytes StringHead_t 9
 db  "core/insd" , 0
__const3952_75_bufferBytes StringHead_t 8
 db  "core/int" , 0
__const3952_76_bufferBytes StringHead_t 9
 db  "core/invd" , 0
__const3952_77_bufferBytes StringHead_t 11
 db  "core/invlpg" , 0
__const3952_78_bufferBytes StringHead_t 9
 db  "core/iret" , 0
__const3952_79_bufferBytes StringHead_t 10
 db  "core/iretd" , 0
__const3952_80_bufferBytes StringHead_t 10
 db  "core/iretq" , 0
__const3952_81_bufferBytes StringHead_t 8
 db  "core/lar" , 0
__const3952_82_bufferBytes StringHead_t 8
 db  "core/lea" , 0
__const3952_83_bufferBytes StringHead_t 10
 db  "core/leave" , 0
__const3952_84_bufferBytes StringHead_t 8
 db  "core/lfs" , 0
__const3952_85_bufferBytes StringHead_t 9
 db  "core/lgdt" , 0
__const3952_86_bufferBytes StringHead_t 8
 db  "core/lgs" , 0
__const3952_87_bufferBytes StringHead_t 9
 db  "core/lidt" , 0
__const3952_88_bufferBytes StringHead_t 9
 db  "core/lldt" , 0
__const3952_89_bufferBytes StringHead_t 9
 db  "core/lmsw" , 0
__const3952_90_bufferBytes StringHead_t 9
 db  "core/lock" , 0
__const3952_91_bufferBytes StringHead_t 10
 db  "core/lodsb" , 0
__const3952_92_bufferBytes StringHead_t 10
 db  "core/lodsd" , 0
__const3952_93_bufferBytes StringHead_t 10
 db  "core/lodsq" , 0
__const3952_94_bufferBytes StringHead_t 10
 db  "core/lodsw" , 0
__const3952_95_bufferBytes StringHead_t 8
 db  "core/lsl" , 0
__const3952_96_bufferBytes StringHead_t 8
 db  "core/lss" , 0
__const3952_97_bufferBytes StringHead_t 8
 db  "core/ltr" , 0
__const3952_98_bufferBytes StringHead_t 8
 db  "core/mov" , 0
__const3952_99_bufferBytes StringHead_t 10
 db  "core/movsb" , 0
__const3952_100_bufferBytes StringHead_t 10
 db  "core/movsd" , 0
__const3952_101_bufferBytes StringHead_t 10
 db  "core/movsw" , 0
__const3952_102_bufferBytes StringHead_t 10
 db  "core/movsx" , 0
__const3952_103_bufferBytes StringHead_t 11
 db  "core/movsxd" , 0
__const3952_104_bufferBytes StringHead_t 10
 db  "core/movzx" , 0
__const3952_105_bufferBytes StringHead_t 8
 db  "core/neg" , 0
__const3952_106_bufferBytes StringHead_t 8
 db  "core/nop" , 0
__const3952_107_bufferBytes StringHead_t 8
 db  "core/not" , 0
__const3952_108_bufferBytes StringHead_t 7
 db  "core/or" , 0
__const3952_109_bufferBytes StringHead_t 8
 db  "core/out" , 0
__const3952_110_bufferBytes StringHead_t 10
 db  "core/outsd" , 0
__const3952_111_bufferBytes StringHead_t 8
 db  "core/pop" , 0
__const3952_112_bufferBytes StringHead_t 9
 db  "core/popf" , 0
__const3952_113_bufferBytes StringHead_t 10
 db  "core/popfq" , 0
__const3952_114_bufferBytes StringHead_t 9
 db  "core/push" , 0
__const3952_115_bufferBytes StringHead_t 10
 db  "core/pushf" , 0
__const3952_116_bufferBytes StringHead_t 11
 db  "core/pushfq" , 0
__const3952_117_bufferBytes StringHead_t 8
 db  "core/rcl" , 0
__const3952_118_bufferBytes StringHead_t 8
 db  "core/rcr" , 0
__const3952_119_bufferBytes StringHead_t 10
 db  "core/rdmsr" , 0
__const3952_120_bufferBytes StringHead_t 10
 db  "core/rdpmc" , 0
__const3952_121_bufferBytes StringHead_t 10
 db  "core/rdtsc" , 0
__const3952_122_bufferBytes StringHead_t 11
 db  "core/rdtscp" , 0
__const3952_123_bufferBytes StringHead_t 8
 db  "core/rep" , 0
__const3952_124_bufferBytes StringHead_t 9
 db  "core/repe" , 0
__const3952_125_bufferBytes StringHead_t 10
 db  "core/repne" , 0
__const3952_126_bufferBytes StringHead_t 8
 db  "core/ret" , 0
__const3952_127_bufferBytes StringHead_t 9
 db  "core/retf" , 0
__const3952_128_bufferBytes StringHead_t 8
 db  "core/rol" , 0
__const3952_129_bufferBytes StringHead_t 8
 db  "core/ror" , 0
__const3952_130_bufferBytes StringHead_t 8
 db  "core/rsm" , 0
__const3952_131_bufferBytes StringHead_t 8
 db  "core/sal" , 0
__const3952_132_bufferBytes StringHead_t 8
 db  "core/sar" , 0
__const3952_133_bufferBytes StringHead_t 8
 db  "core/sbb" , 0
__const3952_134_bufferBytes StringHead_t 10
 db  "core/scasb" , 0
__const3952_135_bufferBytes StringHead_t 10
 db  "core/scasd" , 0
__const3952_136_bufferBytes StringHead_t 10
 db  "core/scasq" , 0
__const3952_137_bufferBytes StringHead_t 10
 db  "core/scasw" , 0
__const3952_138_bufferBytes StringHead_t 9
 db  "core/seta" , 0
__const3952_139_bufferBytes StringHead_t 10
 db  "core/setae" , 0
__const3952_140_bufferBytes StringHead_t 9
 db  "core/setb" , 0
__const3952_141_bufferBytes StringHead_t 10
 db  "core/setbe" , 0
__const3952_142_bufferBytes StringHead_t 9
 db  "core/setc" , 0
__const3952_143_bufferBytes StringHead_t 9
 db  "core/sete" , 0
__const3952_144_bufferBytes StringHead_t 9
 db  "core/setg" , 0
__const3952_145_bufferBytes StringHead_t 10
 db  "core/setge" , 0
__const3952_146_bufferBytes StringHead_t 9
 db  "core/setl" , 0
__const3952_147_bufferBytes StringHead_t 10
 db  "core/setle" , 0
__const3952_148_bufferBytes StringHead_t 10
 db  "core/setna" , 0
__const3952_149_bufferBytes StringHead_t 11
 db  "core/setnae" , 0
__const3952_150_bufferBytes StringHead_t 10
 db  "core/setnb" , 0
__const3952_151_bufferBytes StringHead_t 11
 db  "core/setnbe" , 0
__const3952_152_bufferBytes StringHead_t 10
 db  "core/setnc" , 0
__const3952_153_bufferBytes StringHead_t 10
 db  "core/setne" , 0
__const3952_154_bufferBytes StringHead_t 10
 db  "core/setng" , 0
__const3952_155_bufferBytes StringHead_t 11
 db  "core/setnge" , 0
__const3952_156_bufferBytes StringHead_t 10
 db  "core/setnl" , 0
__const3952_157_bufferBytes StringHead_t 11
 db  "core/setnle" , 0
__const3952_158_bufferBytes StringHead_t 10
 db  "core/setno" , 0
__const3952_159_bufferBytes StringHead_t 10
 db  "core/setnp" , 0
__const3952_160_bufferBytes StringHead_t 10
 db  "core/setns" , 0
__const3952_161_bufferBytes StringHead_t 10
 db  "core/setnz" , 0
__const3952_162_bufferBytes StringHead_t 9
 db  "core/seto" , 0
__const3952_163_bufferBytes StringHead_t 9
 db  "core/setp" , 0
__const3952_164_bufferBytes StringHead_t 10
 db  "core/setpe" , 0
__const3952_165_bufferBytes StringHead_t 10
 db  "core/setpo" , 0
__const3952_166_bufferBytes StringHead_t 9
 db  "core/sets" , 0
__const3952_167_bufferBytes StringHead_t 9
 db  "core/setz" , 0
__const3952_168_bufferBytes StringHead_t 9
 db  "core/sgdt" , 0
__const3952_169_bufferBytes StringHead_t 8
 db  "core/shl" , 0
__const3952_170_bufferBytes StringHead_t 8
 db  "core/shr" , 0
__const3952_171_bufferBytes StringHead_t 9
 db  "core/sidt" , 0
__const3952_172_bufferBytes StringHead_t 9
 db  "core/sldt" , 0
__const3952_173_bufferBytes StringHead_t 9
 db  "core/smsw" , 0
__const3952_174_bufferBytes StringHead_t 8
 db  "core/stc" , 0
__const3952_175_bufferBytes StringHead_t 8
 db  "core/std" , 0
__const3952_176_bufferBytes StringHead_t 8
 db  "core/sti" , 0
__const3952_177_bufferBytes StringHead_t 10
 db  "core/stosb" , 0
__const3952_178_bufferBytes StringHead_t 10
 db  "core/stosd" , 0
__const3952_179_bufferBytes StringHead_t 10
 db  "core/stosq" , 0
__const3952_180_bufferBytes StringHead_t 10
 db  "core/stosw" , 0
__const3952_181_bufferBytes StringHead_t 8
 db  "core/str" , 0
__const3952_182_bufferBytes StringHead_t 8
 db  "core/sub" , 0
__const3952_183_bufferBytes StringHead_t 11
 db  "core/swapgs" , 0
__const3952_184_bufferBytes StringHead_t 12
 db  "core/syscall" , 0
__const3952_185_bufferBytes StringHead_t 13
 db  "core/sysenter" , 0
__const3952_186_bufferBytes StringHead_t 12
 db  "core/sysexit" , 0
__const3952_187_bufferBytes StringHead_t 11
 db  "core/sysret" , 0
__const3952_188_bufferBytes StringHead_t 9
 db  "core/test" , 0
__const3952_189_bufferBytes StringHead_t 8
 db  "core/ud2" , 0
__const3952_190_bufferBytes StringHead_t 9
 db  "core/verr" , 0
__const3952_191_bufferBytes StringHead_t 9
 db  "core/verw" , 0
__const3952_192_bufferBytes StringHead_t 9
 db  "core/wait" , 0
__const3952_193_bufferBytes StringHead_t 11
 db  "core/wbinvd" , 0
__const3952_194_bufferBytes StringHead_t 10
 db  "core/wrmsr" , 0
__const3952_195_bufferBytes StringHead_t 9
 db  "core/xadd" , 0
__const3952_196_bufferBytes StringHead_t 9
 db  "core/xchg" , 0
__const3952_197_bufferBytes StringHead_t 10
 db  "core/xlatb" , 0
__const3952_198_bufferBytes StringHead_t 8
 db  "core/xor" , 0
__const3952_199_bufferBytes StringHead_t 15
 db  "core-jumps/call" , 0
__const3952_200_bufferBytes StringHead_t 14
 db  "core-jumps/jmp" , 0
__const3952_201_bufferBytes StringHead_t 13
 db  "core-jumps/jo" , 0
__const3952_202_bufferBytes StringHead_t 14
 db  "core-jumps/jno" , 0
__const3952_203_bufferBytes StringHead_t 13
 db  "core-jumps/jb" , 0
__const3952_204_bufferBytes StringHead_t 14
 db  "core-jumps/jae" , 0
__const3952_205_bufferBytes StringHead_t 13
 db  "core-jumps/jz" , 0
__const3952_206_bufferBytes StringHead_t 14
 db  "core-jumps/jnz" , 0
__const3952_207_bufferBytes StringHead_t 14
 db  "core-jumps/jbe" , 0
__const3952_208_bufferBytes StringHead_t 13
 db  "core-jumps/ja" , 0
__const3952_209_bufferBytes StringHead_t 13
 db  "core-jumps/js" , 0
__const3952_210_bufferBytes StringHead_t 14
 db  "core-jumps/jns" , 0
__const3952_211_bufferBytes StringHead_t 13
 db  "core-jumps/jp" , 0
__const3952_212_bufferBytes StringHead_t 14
 db  "core-jumps/jnp" , 0
__const3952_213_bufferBytes StringHead_t 13
 db  "core-jumps/jl" , 0
__const3952_214_bufferBytes StringHead_t 14
 db  "core-jumps/jge" , 0
__const3952_215_bufferBytes StringHead_t 14
 db  "core-jumps/jle" , 0
__const3952_216_bufferBytes StringHead_t 13
 db  "core-jumps/jg" , 0
__const3952_217_bufferBytes StringHead_t 15
 db  "core-jumps/loop" , 0
__const3952_218_bufferBytes StringHead_t 16
 db  "core-jumps/loope" , 0
__const3952_219_bufferBytes StringHead_t 17
 db  "core-jumps/loopne" , 0
__const3952_220_bufferBytes StringHead_t 16
 db  "core-jumps/jecxz" , 0
__const3952_221_bufferBytes StringHead_t 17
 db  "core-jumps/looped" , 0
__const3952_222_bufferBytes StringHead_t 18
 db  "core-jumps/loopned" , 0
__const3952_223_bufferBytes StringHead_t 16
 db  "core-jumps/jrcxz" , 0
__const3952_224_bufferBytes StringHead_t 8
 db  "x87/fadd" , 0
__const3952_225_bufferBytes StringHead_t 9
 db  "x87/faddp" , 0
__const3952_226_bufferBytes StringHead_t 9
 db  "x87/fiadd" , 0
__const3952_227_bufferBytes StringHead_t 9
 db  "x87/ficom" , 0
__const3952_228_bufferBytes StringHead_t 10
 db  "x87/ficomp" , 0
__const3952_229_bufferBytes StringHead_t 9
 db  "x87/fidiv" , 0
__const3952_230_bufferBytes StringHead_t 10
 db  "x87/fidivr" , 0
__const3952_231_bufferBytes StringHead_t 9
 db  "x87/fimul" , 0
__const3952_232_bufferBytes StringHead_t 9
 db  "x87/fisub" , 0
__const3952_233_bufferBytes StringHead_t 10
 db  "x87/fisubr" , 0
__const3952_234_bufferBytes StringHead_t 8
 db  "x87/fmul" , 0
__const3952_235_bufferBytes StringHead_t 9
 db  "x87/fmulp" , 0
__const3952_236_bufferBytes StringHead_t 8
 db  "x87/fdiv" , 0
__const3952_237_bufferBytes StringHead_t 9
 db  "x87/fdivp" , 0
__const3952_238_bufferBytes StringHead_t 9
 db  "x87/fdivr" , 0
__const3952_239_bufferBytes StringHead_t 10
 db  "x87/fdivrp" , 0
__const3952_240_bufferBytes StringHead_t 8
 db  "x87/fsub" , 0
__const3952_241_bufferBytes StringHead_t 9
 db  "x87/fsubp" , 0
__const3952_242_bufferBytes StringHead_t 9
 db  "x87/fsubr" , 0
__const3952_243_bufferBytes StringHead_t 10
 db  "x87/fsubrp" , 0
__const3952_244_bufferBytes StringHead_t 9
 db  "x87/f2xm1" , 0
__const3952_245_bufferBytes StringHead_t 8
 db  "x87/fabs" , 0
__const3952_246_bufferBytes StringHead_t 8
 db  "x87/fchs" , 0
__const3952_247_bufferBytes StringHead_t 10
 db  "x87/fcompp" , 0
__const3952_248_bufferBytes StringHead_t 8
 db  "x87/fcos" , 0
__const3952_249_bufferBytes StringHead_t 11
 db  "x87/fdecstp" , 0
__const3952_250_bufferBytes StringHead_t 11
 db  "x87/fincstp" , 0
__const3952_251_bufferBytes StringHead_t 8
 db  "x87/fld1" , 0
__const3952_252_bufferBytes StringHead_t 10
 db  "x87/fldl2e" , 0
__const3952_253_bufferBytes StringHead_t 10
 db  "x87/fldl2t" , 0
__const3952_254_bufferBytes StringHead_t 10
 db  "x87/fldlg2" , 0
__const3952_255_bufferBytes StringHead_t 10
 db  "x87/fldln2" , 0
__const3952_256_bufferBytes StringHead_t 9
 db  "x87/fldpi" , 0
__const3952_257_bufferBytes StringHead_t 8
 db  "x87/fldz" , 0
__const3952_258_bufferBytes StringHead_t 10
 db  "x87/fnclex" , 0
__const3952_259_bufferBytes StringHead_t 10
 db  "x87/fninit" , 0
__const3952_260_bufferBytes StringHead_t 8
 db  "x87/fnop" , 0
__const3952_261_bufferBytes StringHead_t 10
 db  "x87/fpatan" , 0
__const3952_262_bufferBytes StringHead_t 9
 db  "x87/fprem" , 0
__const3952_263_bufferBytes StringHead_t 10
 db  "x87/fprem1" , 0
__const3952_264_bufferBytes StringHead_t 9
 db  "x87/fptan" , 0
__const3952_265_bufferBytes StringHead_t 11
 db  "x87/frndint" , 0
__const3952_266_bufferBytes StringHead_t 10
 db  "x87/fscale" , 0
__const3952_267_bufferBytes StringHead_t 8
 db  "x87/fsin" , 0
__const3952_268_bufferBytes StringHead_t 11
 db  "x87/fsincos" , 0
__const3952_269_bufferBytes StringHead_t 9
 db  "x87/fsqrt" , 0
__const3952_270_bufferBytes StringHead_t 11
 db  "x87/fucompp" , 0
__const3952_271_bufferBytes StringHead_t 9
 db  "x87/fwait" , 0
__const3952_272_bufferBytes StringHead_t 8
 db  "x87/fxam" , 0
__const3952_273_bufferBytes StringHead_t 11
 db  "x87/fxtract" , 0
__const3952_274_bufferBytes StringHead_t 9
 db  "x87/fyl2x" , 0
__const3952_275_bufferBytes StringHead_t 11
 db  "x87/fyl2xp1" , 0
__const3952_276_bufferBytes StringHead_t 8
 db  "x87/fbld" , 0
__const3952_277_bufferBytes StringHead_t 9
 db  "x87/fbstp" , 0
__const3952_278_bufferBytes StringHead_t 10
 db  "x87/fldenv" , 0
__const3952_279_bufferBytes StringHead_t 11
 db  "x87/fldenvd" , 0
__const3952_280_bufferBytes StringHead_t 10
 db  "x87/fnsave" , 0
__const3952_281_bufferBytes StringHead_t 10
 db  "x87/fnstcw" , 0
__const3952_282_bufferBytes StringHead_t 11
 db  "x87/fnstenv" , 0
__const3952_283_bufferBytes StringHead_t 10
 db  "x87/frstor" , 0
__const3952_284_bufferBytes StringHead_t 11
 db  "x87/frstord" , 0
__const3952_285_bufferBytes StringHead_t 10
 db  "x87/fcmovb" , 0
__const3952_286_bufferBytes StringHead_t 11
 db  "x87/fcmovbe" , 0
__const3952_287_bufferBytes StringHead_t 10
 db  "x87/fcmove" , 0
__const3952_288_bufferBytes StringHead_t 11
 db  "x87/fcmovnb" , 0
__const3952_289_bufferBytes StringHead_t 12
 db  "x87/fcmovnbe" , 0
__const3952_290_bufferBytes StringHead_t 11
 db  "x87/fcmovne" , 0
__const3952_291_bufferBytes StringHead_t 11
 db  "x87/fcmovnu" , 0
__const3952_292_bufferBytes StringHead_t 10
 db  "x87/fcmovu" , 0
__const3952_293_bufferBytes StringHead_t 8
 db  "x87/fcom" , 0
__const3952_294_bufferBytes StringHead_t 9
 db  "x87/fcomp" , 0
__const3952_295_bufferBytes StringHead_t 9
 db  "x87/fcomi" , 0
__const3952_296_bufferBytes StringHead_t 10
 db  "x87/fcomip" , 0
__const3952_297_bufferBytes StringHead_t 9
 db  "x87/fucom" , 0
__const3952_298_bufferBytes StringHead_t 10
 db  "x87/fucomi" , 0
__const3952_299_bufferBytes StringHead_t 11
 db  "x87/fucomip" , 0
__const3952_300_bufferBytes StringHead_t 10
 db  "x87/fucomp" , 0
__const3952_301_bufferBytes StringHead_t 9
 db  "x87/ffree" , 0
__const3952_302_bufferBytes StringHead_t 10
 db  "x87/fstenv" , 0
__const3952_303_bufferBytes StringHead_t 11
 db  "x87/fstenvd" , 0
__const3952_304_bufferBytes StringHead_t 9
 db  "x87/fsave" , 0
__const3952_305_bufferBytes StringHead_t 10
 db  "x87/fsaved" , 0
__const3952_306_bufferBytes StringHead_t 8
 db  "x87/fxch" , 0
__const3952_307_bufferBytes StringHead_t 11
 db  "x87/fxrstor" , 0
__const3952_308_bufferBytes StringHead_t 10
 db  "x87/fxsave" , 0
__const3952_309_bufferBytes StringHead_t 7
 db  "x87/fld" , 0
__const3952_310_bufferBytes StringHead_t 7
 db  "x87/fst" , 0
__const3952_311_bufferBytes StringHead_t 8
 db  "x87/fstp" , 0
__const3952_312_bufferBytes StringHead_t 8
 db  "x87/ftst" , 0
__const3952_313_bufferBytes StringHead_t 8
 db  "x87/fild" , 0
__const3952_314_bufferBytes StringHead_t 10
 db  "x87/fisttp" , 0
__const3952_315_bufferBytes StringHead_t 8
 db  "x87/fist" , 0
__const3952_316_bufferBytes StringHead_t 9
 db  "x87/fistp" , 0
__const3952_317_bufferBytes StringHead_t 9
 db  "x87/fclex" , 0
__const3952_318_bufferBytes StringHead_t 9
 db  "x87/finit" , 0
__const3952_319_bufferBytes StringHead_t 11
 db  "x87/fldenvw" , 0
__const3952_320_bufferBytes StringHead_t 12
 db  "x87/fnstenvw" , 0
__const3952_321_bufferBytes StringHead_t 10
 db  "x87/fnstsw" , 0
__const3952_322_bufferBytes StringHead_t 11
 db  "x87/frstorw" , 0
__const3952_323_bufferBytes StringHead_t 10
 db  "x87/fsavew" , 0
__const3952_324_bufferBytes StringHead_t 9
 db  "x87/fstcw" , 0
__const3952_325_bufferBytes StringHead_t 11
 db  "x87/fstenvw" , 0
__const3952_326_bufferBytes StringHead_t 9
 db  "x87/fstsw" , 0
__const3952_327_bufferBytes StringHead_t 11
 db  "x87/fnsavew" , 0
__const3952_329_bufferBytes StringHead_t 8
 db  "mmx/emms" , 0
__const3952_330_bufferBytes StringHead_t 12
 db  "mmx/packssdw" , 0
__const3952_331_bufferBytes StringHead_t 12
 db  "mmx/packsswb" , 0
__const3952_332_bufferBytes StringHead_t 12
 db  "mmx/packuswb" , 0
__const3952_333_bufferBytes StringHead_t 9
 db  "mmx/paddb" , 0
__const3952_334_bufferBytes StringHead_t 9
 db  "mmx/paddd" , 0
__const3952_335_bufferBytes StringHead_t 9
 db  "mmx/paddq" , 0
__const3952_336_bufferBytes StringHead_t 10
 db  "mmx/paddsb" , 0
__const3952_337_bufferBytes StringHead_t 10
 db  "mmx/paddsw" , 0
__const3952_338_bufferBytes StringHead_t 11
 db  "mmx/paddusb" , 0
__const3952_339_bufferBytes StringHead_t 11
 db  "mmx/paddusw" , 0
__const3952_340_bufferBytes StringHead_t 9
 db  "mmx/paddw" , 0
__const3952_341_bufferBytes StringHead_t 8
 db  "mmx/pand" , 0
__const3952_342_bufferBytes StringHead_t 9
 db  "mmx/pandn" , 0
__const3952_343_bufferBytes StringHead_t 9
 db  "mmx/pavgb" , 0
__const3952_344_bufferBytes StringHead_t 9
 db  "mmx/pavgw" , 0
__const3952_345_bufferBytes StringHead_t 11
 db  "mmx/pcmpeqb" , 0
__const3952_346_bufferBytes StringHead_t 11
 db  "mmx/pcmpeqd" , 0
__const3952_347_bufferBytes StringHead_t 11
 db  "mmx/pcmpeqw" , 0
__const3952_348_bufferBytes StringHead_t 11
 db  "mmx/pcmpgtb" , 0
__const3952_349_bufferBytes StringHead_t 11
 db  "mmx/pcmpgtd" , 0
__const3952_350_bufferBytes StringHead_t 11
 db  "mmx/pcmpgtw" , 0
__const3952_351_bufferBytes StringHead_t 11
 db  "mmx/pmaddwd" , 0
__const3952_352_bufferBytes StringHead_t 10
 db  "mmx/pmaxsw" , 0
__const3952_353_bufferBytes StringHead_t 10
 db  "mmx/pmaxub" , 0
__const3952_354_bufferBytes StringHead_t 10
 db  "mmx/pminsw" , 0
__const3952_355_bufferBytes StringHead_t 10
 db  "mmx/pminub" , 0
__const3952_356_bufferBytes StringHead_t 11
 db  "mmx/pmulhuw" , 0
__const3952_357_bufferBytes StringHead_t 10
 db  "mmx/pmulhw" , 0
__const3952_358_bufferBytes StringHead_t 10
 db  "mmx/pmullw" , 0
__const3952_359_bufferBytes StringHead_t 11
 db  "mmx/pmuludq" , 0
__const3952_360_bufferBytes StringHead_t 7
 db  "mmx/por" , 0
__const3952_361_bufferBytes StringHead_t 10
 db  "mmx/psadbw" , 0
__const3952_362_bufferBytes StringHead_t 9
 db  "mmx/psubb" , 0
__const3952_363_bufferBytes StringHead_t 9
 db  "mmx/psubd" , 0
__const3952_364_bufferBytes StringHead_t 9
 db  "mmx/psubq" , 0
__const3952_365_bufferBytes StringHead_t 10
 db  "mmx/psubsb" , 0
__const3952_366_bufferBytes StringHead_t 10
 db  "mmx/psubsw" , 0
__const3952_367_bufferBytes StringHead_t 11
 db  "mmx/psubusb" , 0
__const3952_368_bufferBytes StringHead_t 11
 db  "mmx/psubusw" , 0
__const3952_369_bufferBytes StringHead_t 9
 db  "mmx/psubw" , 0
__const3952_370_bufferBytes StringHead_t 13
 db  "mmx/punpckhbw" , 0
__const3952_371_bufferBytes StringHead_t 13
 db  "mmx/punpckhdq" , 0
__const3952_372_bufferBytes StringHead_t 13
 db  "mmx/punpckhwd" , 0
__const3952_373_bufferBytes StringHead_t 8
 db  "mmx/pxor" , 0
__const3952_374_bufferBytes StringHead_t 9
 db  "mmx/pabsb" , 0
__const3952_375_bufferBytes StringHead_t 9
 db  "mmx/pabsd" , 0
__const3952_376_bufferBytes StringHead_t 9
 db  "mmx/pabsw" , 0
__const3952_377_bufferBytes StringHead_t 10
 db  "mmx/phaddd" , 0
__const3952_378_bufferBytes StringHead_t 11
 db  "mmx/phaddsw" , 0
__const3952_379_bufferBytes StringHead_t 10
 db  "mmx/phaddw" , 0
__const3952_380_bufferBytes StringHead_t 10
 db  "mmx/phsubd" , 0
__const3952_381_bufferBytes StringHead_t 11
 db  "mmx/phsubsw" , 0
__const3952_382_bufferBytes StringHead_t 10
 db  "mmx/phsubw" , 0
__const3952_383_bufferBytes StringHead_t 13
 db  "mmx/pmaddubsw" , 0
__const3952_384_bufferBytes StringHead_t 12
 db  "mmx/pmulhrsw" , 0
__const3952_385_bufferBytes StringHead_t 10
 db  "mmx/psignb" , 0
__const3952_386_bufferBytes StringHead_t 10
 db  "mmx/psignd" , 0
__const3952_387_bufferBytes StringHead_t 10
 db  "mmx/psignw" , 0
__const3952_388_bufferBytes StringHead_t 13
 db  "mmx/punpcklbw" , 0
__const3952_389_bufferBytes StringHead_t 13
 db  "mmx/punpckldq" , 0
__const3952_390_bufferBytes StringHead_t 13
 db  "mmx/punpcklwd" , 0
__const3952_391_bufferBytes StringHead_t 8
 db  "mmx/movd" , 0
__const3952_392_bufferBytes StringHead_t 8
 db  "mmx/movq" , 0
__const3952_393_bufferBytes StringHead_t 11
 db  "mmx/palignr" , 0
__const3952_394_bufferBytes StringHead_t 10
 db  "mmx/pextrw" , 0
__const3952_395_bufferBytes StringHead_t 10
 db  "mmx/pinsrw" , 0
__const3952_396_bufferBytes StringHead_t 12
 db  "mmx/pmovmskb" , 0
__const3952_397_bufferBytes StringHead_t 10
 db  "mmx/pshufw" , 0
__const3952_398_bufferBytes StringHead_t 10
 db  "mmx/pshufb" , 0
__const3952_399_bufferBytes StringHead_t 9
 db  "mmx/psrad" , 0
__const3952_400_bufferBytes StringHead_t 9
 db  "mmx/psraw" , 0
__const3952_401_bufferBytes StringHead_t 9
 db  "mmx/psrld" , 0
__const3952_402_bufferBytes StringHead_t 9
 db  "mmx/psrlq" , 0
__const3952_403_bufferBytes StringHead_t 9
 db  "mmx/psrlw" , 0
; iter 5
; iter 6
; iter 7
; iter 8
; iter 9
; iter 10
; iter 11
; iter 12
; iter 13
; iter 14
; iter 15

; Jump tables
; -----------
__jmptable2002:
  dw  l2003 - l2001 ; 1
  dw  l2004 - l2001 ; 2
  dw 0 ; 3 otherwise
  dw  l2005 - l2001 ; 4
  dw 0 ; 5 otherwise
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw  l2006 - l2001 ; 8
  dw 0 ; explicit default case

__jmptable2199:
  dw  l2200 - l2198 ; 2
  dw 0 ; 3 otherwise
  dw  l2202 - l2198 ; 4
  dw 0 ; 5 otherwise
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw  l2203 - l2198 ; 8
  dw 0 ; explicit default case


; vtables
; -------
vtable_AbstractDescentParser:
.offset dd 8 * 1
.length dd 8 * 90
.entries:
  dq __AbstractDescentParser__parseSource$0_vcall ; _parseSource ( 1 )
  dq __MOLD_NullMethodCalled ; getCurrentPosition ( 2 )
  dq __MOLD_NullMethodCalled ; emitCore_r_imm ( 3 )
  dq __MOLD_NullMethodCalled ; emitCore_m_imm ( 4 )
  dq __MOLD_NullMethodCalled ; emitCore_r_r ( 5 )
  dq __MOLD_NullMethodCalled ; emitCore_m_r ( 6 )
  dq __MOLD_NullMethodCalled ; emitCore_r_m ( 7 )
  dq __MOLD_NullMethodCalled ; emitByte ( 8 )
  dq __MOLD_NullMethodCalled ; emitWord ( 9 )
  dq __MOLD_NullMethodCalled ; emitFPU_m ( 10 )
  dq __MOLD_NullMethodCalled ; emitFPU_sti ( 11 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_m ( 12 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_r ( 13 )
  dq __MOLD_NullMethodCalled ; emitCore_jcc_rel ( 14 )
  dq __MOLD_NullMethodCalled ; emitCore_jmp_rel8 ( 15 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_cl ( 17 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_cl ( 19 )
  dq __MOLD_NullMethodCalled ; emitCore_m ( 20 )
  dq __MOLD_NullMethodCalled ; emitCore_r ( 21 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_m ( 22 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_r ( 23 )
  dq __MOLD_NullMethodCalled ; mov_r_imm ( 24 )
  dq __MOLD_NullMethodCalled ; mov_m_imm ( 25 )
  dq __MOLD_NullMethodCalled ; lea_r_m ( 26 )
  dq __MOLD_NullMethodCalled ; test_r_imm ( 27 )
  dq __MOLD_NullMethodCalled ; test_m_imm ( 28 )
  dq __MOLD_NullMethodCalled ; xchg_r_r ( 29 )
  dq __MOLD_NullMethodCalled ; out_imm_r ( 30 )
  dq __MOLD_NullMethodCalled ; out_dx_r ( 31 )
  dq __MOLD_NullMethodCalled ; in_r_imm ( 32 )
  dq __MOLD_NullMethodCalled ; in_r_dx ( 33 )
  dq __MOLD_NullMethodCalled ; enter_imm16_imm8 ( 34 )
  dq __MOLD_NullMethodCalled ; movd_m32_mm ( 35 )
  dq __MOLD_NullMethodCalled ; movd_mm_m32 ( 36 )
  dq __MOLD_NullMethodCalled ; movd_r32_mm ( 37 )
  dq __MOLD_NullMethodCalled ; movd_mm_r32 ( 38 )
  dq __MOLD_NullMethodCalled ; movq_m64_mm ( 39 )
  dq __MOLD_NullMethodCalled ; movq_mm_m64 ( 40 )
  dq __MOLD_NullMethodCalled ; movq_mm_mm ( 41 )
  dq __MOLD_NullMethodCalled ; movq_r64_mm ( 42 )
  dq __MOLD_NullMethodCalled ; movq_mm_r64 ( 43 )
  dq __MOLD_NullMethodCalled ; push_r ( 44 )
  dq __MOLD_NullMethodCalled ; push_imm8 ( 45 )
  dq __MOLD_NullMethodCalled ; push_imm32 ( 46 )
  dq __MOLD_NullMethodCalled ; push_m ( 47 )
  dq __MOLD_NullMethodCalled ; pop_r ( 48 )
  dq __MOLD_NullMethodCalled ; pop_m ( 49 )
  dq __MOLD_NullMethodCalled ; call_r ( 50 )
  dq __MOLD_NullMethodCalled ; call_m ( 51 )
  dq __MOLD_NullMethodCalled ; call_rel ( 52 )
  dq __MOLD_NullMethodCalled ; jmp_r ( 53 )
  dq __MOLD_NullMethodCalled ; jmp_m ( 54 )
  dq __MOLD_NullMethodCalled ; jmp_rel ( 55 )
  dq __MOLD_NullMethodCalled ; bswap_r ( 56 )
  dq __MOLD_NullMethodCalled ; cmpxchg8b_m ( 57 )
  dq __MOLD_NullMethodCalled ; cmpxchg16b_m ( 58 )
  dq __MOLD_NullMethodCalled ; inc_r ( 59 )
  dq __MOLD_NullMethodCalled ; inc_m ( 60 )
  dq __MOLD_NullMethodCalled ; dec_r ( 61 )
  dq __MOLD_NullMethodCalled ; dec_m ( 62 )
  dq __MOLD_NullMethodCalled ; int_imm ( 63 )
  dq __MOLD_NullMethodCalled ; ret ( 64 )
  dq __MOLD_NullMethodCalled ; ret_imm ( 65 )
  dq __MOLD_NullMethodCalled ; retf ( 66 )
  dq __MOLD_NullMethodCalled ; retf_imm ( 67 )
  dq __MOLD_NullMethodCalled ; nop ( 68 )
  dq __MOLD_NullMethodCalled ; nop_m ( 69 )
  dq __MOLD_NullMethodCalled ; nop_r ( 70 )
  dq __MOLD_NullMethodCalled ; palignr_mm_m64_imm8 ( 71 )
  dq __MOLD_NullMethodCalled ; palignr_mm_mm_imm8 ( 72 )
  dq __MOLD_NullMethodCalled ; pextrw_r64_mm_imm8 ( 73 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_m16_imm8 ( 74 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_r32_imm8 ( 75 )
  dq __MOLD_NullMethodCalled ; pmovmskb_r_mm ( 76 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_m64_imm8 ( 77 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_mm_imm8 ( 78 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_m ( 79 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_r ( 80 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_m ( 81 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_r ( 82 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_m ( 83 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_r ( 84 )
  dq __MOLD_NullMethodCalled ; emitDword ( 85 )
  dq __MOLD_NullMethodCalled ; emitQword ( 86 )
  dq __AbstractDescentParser_connectTo$1_vcall ; connectTo ( 87 )
  dq __MOLD_NullMethodCalled ; create ( 88 )
  dq __MOLD_NullMethodCalled ; close ( 89 )
  dq __MOLD_NullMethodCalled ; clear ( 90 )
  dq __AbstractDescentParser_parseFile$1_vcall ; parseFile ( 91 )

vtable_X64Parser:
.offset dd 8 * 1
.length dd 8 * 91
.entries:
  dq __X64Parser__parseSource$0_vcall ; _parseSource ( 1 )
  dq __MOLD_NullMethodCalled ; getCurrentPosition ( 2 )
  dq __MOLD_NullMethodCalled ; emitCore_r_imm ( 3 )
  dq __MOLD_NullMethodCalled ; emitCore_m_imm ( 4 )
  dq __MOLD_NullMethodCalled ; emitCore_r_r ( 5 )
  dq __MOLD_NullMethodCalled ; emitCore_m_r ( 6 )
  dq __MOLD_NullMethodCalled ; emitCore_r_m ( 7 )
  dq __MOLD_NullMethodCalled ; emitByte ( 8 )
  dq __MOLD_NullMethodCalled ; emitWord ( 9 )
  dq __MOLD_NullMethodCalled ; emitFPU_m ( 10 )
  dq __MOLD_NullMethodCalled ; emitFPU_sti ( 11 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_m ( 12 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_r ( 13 )
  dq __MOLD_NullMethodCalled ; emitCore_jcc_rel ( 14 )
  dq __MOLD_NullMethodCalled ; emitCore_jmp_rel8 ( 15 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_cl ( 17 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_cl ( 19 )
  dq __MOLD_NullMethodCalled ; emitCore_m ( 20 )
  dq __MOLD_NullMethodCalled ; emitCore_r ( 21 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_m ( 22 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_r ( 23 )
  dq __MOLD_NullMethodCalled ; mov_r_imm ( 24 )
  dq __MOLD_NullMethodCalled ; mov_m_imm ( 25 )
  dq __MOLD_NullMethodCalled ; lea_r_m ( 26 )
  dq __MOLD_NullMethodCalled ; test_r_imm ( 27 )
  dq __MOLD_NullMethodCalled ; test_m_imm ( 28 )
  dq __MOLD_NullMethodCalled ; xchg_r_r ( 29 )
  dq __MOLD_NullMethodCalled ; out_imm_r ( 30 )
  dq __MOLD_NullMethodCalled ; out_dx_r ( 31 )
  dq __MOLD_NullMethodCalled ; in_r_imm ( 32 )
  dq __MOLD_NullMethodCalled ; in_r_dx ( 33 )
  dq __MOLD_NullMethodCalled ; enter_imm16_imm8 ( 34 )
  dq __MOLD_NullMethodCalled ; movd_m32_mm ( 35 )
  dq __MOLD_NullMethodCalled ; movd_mm_m32 ( 36 )
  dq __MOLD_NullMethodCalled ; movd_r32_mm ( 37 )
  dq __MOLD_NullMethodCalled ; movd_mm_r32 ( 38 )
  dq __MOLD_NullMethodCalled ; movq_m64_mm ( 39 )
  dq __MOLD_NullMethodCalled ; movq_mm_m64 ( 40 )
  dq __MOLD_NullMethodCalled ; movq_mm_mm ( 41 )
  dq __MOLD_NullMethodCalled ; movq_r64_mm ( 42 )
  dq __MOLD_NullMethodCalled ; movq_mm_r64 ( 43 )
  dq __MOLD_NullMethodCalled ; push_r ( 44 )
  dq __MOLD_NullMethodCalled ; push_imm8 ( 45 )
  dq __MOLD_NullMethodCalled ; push_imm32 ( 46 )
  dq __MOLD_NullMethodCalled ; push_m ( 47 )
  dq __MOLD_NullMethodCalled ; pop_r ( 48 )
  dq __MOLD_NullMethodCalled ; pop_m ( 49 )
  dq __MOLD_NullMethodCalled ; call_r ( 50 )
  dq __MOLD_NullMethodCalled ; call_m ( 51 )
  dq __MOLD_NullMethodCalled ; call_rel ( 52 )
  dq __MOLD_NullMethodCalled ; jmp_r ( 53 )
  dq __MOLD_NullMethodCalled ; jmp_m ( 54 )
  dq __MOLD_NullMethodCalled ; jmp_rel ( 55 )
  dq __MOLD_NullMethodCalled ; bswap_r ( 56 )
  dq __MOLD_NullMethodCalled ; cmpxchg8b_m ( 57 )
  dq __MOLD_NullMethodCalled ; cmpxchg16b_m ( 58 )
  dq __MOLD_NullMethodCalled ; inc_r ( 59 )
  dq __MOLD_NullMethodCalled ; inc_m ( 60 )
  dq __MOLD_NullMethodCalled ; dec_r ( 61 )
  dq __MOLD_NullMethodCalled ; dec_m ( 62 )
  dq __MOLD_NullMethodCalled ; int_imm ( 63 )
  dq __MOLD_NullMethodCalled ; ret ( 64 )
  dq __MOLD_NullMethodCalled ; ret_imm ( 65 )
  dq __MOLD_NullMethodCalled ; retf ( 66 )
  dq __MOLD_NullMethodCalled ; retf_imm ( 67 )
  dq __MOLD_NullMethodCalled ; nop ( 68 )
  dq __MOLD_NullMethodCalled ; nop_m ( 69 )
  dq __MOLD_NullMethodCalled ; nop_r ( 70 )
  dq __MOLD_NullMethodCalled ; palignr_mm_m64_imm8 ( 71 )
  dq __MOLD_NullMethodCalled ; palignr_mm_mm_imm8 ( 72 )
  dq __MOLD_NullMethodCalled ; pextrw_r64_mm_imm8 ( 73 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_m16_imm8 ( 74 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_r32_imm8 ( 75 )
  dq __MOLD_NullMethodCalled ; pmovmskb_r_mm ( 76 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_m64_imm8 ( 77 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_mm_imm8 ( 78 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_m ( 79 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_r ( 80 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_m ( 81 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_r ( 82 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_m ( 83 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_r ( 84 )
  dq __MOLD_NullMethodCalled ; emitDword ( 85 )
  dq __MOLD_NullMethodCalled ; emitQword ( 86 )
  dq __AbstractDescentParser_connectTo$1_vcall ; connectTo ( 87 )
  dq __MOLD_NullMethodCalled ; create ( 88 )
  dq __MOLD_NullMethodCalled ; close ( 89 )
  dq __MOLD_NullMethodCalled ; clear ( 90 )
  dq __AbstractDescentParser_parseFile$1_vcall ; parseFile ( 91 )
  dq __X64Parser_getArrayOfLabelsAndRefs$0_vcall ; getArrayOfLabelsAndRefs ( 92 )

vtable_PipeAbstract:
.offset dd 8 * 0
.length dd 8 * 87
.entries:
  dq __PipeAbstract_processOneItem$1_vcall ; processOneItem ( 0 )
  dq __MOLD_NullMethodCalled ; _parseSource ( 1 )
  dq __MOLD_NullMethodCalled ; getCurrentPosition ( 2 )
  dq __MOLD_NullMethodCalled ; emitCore_r_imm ( 3 )
  dq __MOLD_NullMethodCalled ; emitCore_m_imm ( 4 )
  dq __MOLD_NullMethodCalled ; emitCore_r_r ( 5 )
  dq __MOLD_NullMethodCalled ; emitCore_m_r ( 6 )
  dq __MOLD_NullMethodCalled ; emitCore_r_m ( 7 )
  dq __MOLD_NullMethodCalled ; emitByte ( 8 )
  dq __MOLD_NullMethodCalled ; emitWord ( 9 )
  dq __MOLD_NullMethodCalled ; emitFPU_m ( 10 )
  dq __MOLD_NullMethodCalled ; emitFPU_sti ( 11 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_m ( 12 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_r ( 13 )
  dq __MOLD_NullMethodCalled ; emitCore_jcc_rel ( 14 )
  dq __MOLD_NullMethodCalled ; emitCore_jmp_rel8 ( 15 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_cl ( 17 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_cl ( 19 )
  dq __MOLD_NullMethodCalled ; emitCore_m ( 20 )
  dq __MOLD_NullMethodCalled ; emitCore_r ( 21 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_m ( 22 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_r ( 23 )
  dq __MOLD_NullMethodCalled ; mov_r_imm ( 24 )
  dq __MOLD_NullMethodCalled ; mov_m_imm ( 25 )
  dq __MOLD_NullMethodCalled ; lea_r_m ( 26 )
  dq __MOLD_NullMethodCalled ; test_r_imm ( 27 )
  dq __MOLD_NullMethodCalled ; test_m_imm ( 28 )
  dq __MOLD_NullMethodCalled ; xchg_r_r ( 29 )
  dq __MOLD_NullMethodCalled ; out_imm_r ( 30 )
  dq __MOLD_NullMethodCalled ; out_dx_r ( 31 )
  dq __MOLD_NullMethodCalled ; in_r_imm ( 32 )
  dq __MOLD_NullMethodCalled ; in_r_dx ( 33 )
  dq __MOLD_NullMethodCalled ; enter_imm16_imm8 ( 34 )
  dq __MOLD_NullMethodCalled ; movd_m32_mm ( 35 )
  dq __MOLD_NullMethodCalled ; movd_mm_m32 ( 36 )
  dq __MOLD_NullMethodCalled ; movd_r32_mm ( 37 )
  dq __MOLD_NullMethodCalled ; movd_mm_r32 ( 38 )
  dq __MOLD_NullMethodCalled ; movq_m64_mm ( 39 )
  dq __MOLD_NullMethodCalled ; movq_mm_m64 ( 40 )
  dq __MOLD_NullMethodCalled ; movq_mm_mm ( 41 )
  dq __MOLD_NullMethodCalled ; movq_r64_mm ( 42 )
  dq __MOLD_NullMethodCalled ; movq_mm_r64 ( 43 )
  dq __MOLD_NullMethodCalled ; push_r ( 44 )
  dq __MOLD_NullMethodCalled ; push_imm8 ( 45 )
  dq __MOLD_NullMethodCalled ; push_imm32 ( 46 )
  dq __MOLD_NullMethodCalled ; push_m ( 47 )
  dq __MOLD_NullMethodCalled ; pop_r ( 48 )
  dq __MOLD_NullMethodCalled ; pop_m ( 49 )
  dq __MOLD_NullMethodCalled ; call_r ( 50 )
  dq __MOLD_NullMethodCalled ; call_m ( 51 )
  dq __MOLD_NullMethodCalled ; call_rel ( 52 )
  dq __MOLD_NullMethodCalled ; jmp_r ( 53 )
  dq __MOLD_NullMethodCalled ; jmp_m ( 54 )
  dq __MOLD_NullMethodCalled ; jmp_rel ( 55 )
  dq __MOLD_NullMethodCalled ; bswap_r ( 56 )
  dq __MOLD_NullMethodCalled ; cmpxchg8b_m ( 57 )
  dq __MOLD_NullMethodCalled ; cmpxchg16b_m ( 58 )
  dq __MOLD_NullMethodCalled ; inc_r ( 59 )
  dq __MOLD_NullMethodCalled ; inc_m ( 60 )
  dq __MOLD_NullMethodCalled ; dec_r ( 61 )
  dq __MOLD_NullMethodCalled ; dec_m ( 62 )
  dq __MOLD_NullMethodCalled ; int_imm ( 63 )
  dq __MOLD_NullMethodCalled ; ret ( 64 )
  dq __MOLD_NullMethodCalled ; ret_imm ( 65 )
  dq __MOLD_NullMethodCalled ; retf ( 66 )
  dq __MOLD_NullMethodCalled ; retf_imm ( 67 )
  dq __MOLD_NullMethodCalled ; nop ( 68 )
  dq __MOLD_NullMethodCalled ; nop_m ( 69 )
  dq __MOLD_NullMethodCalled ; nop_r ( 70 )
  dq __MOLD_NullMethodCalled ; palignr_mm_m64_imm8 ( 71 )
  dq __MOLD_NullMethodCalled ; palignr_mm_mm_imm8 ( 72 )
  dq __MOLD_NullMethodCalled ; pextrw_r64_mm_imm8 ( 73 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_m16_imm8 ( 74 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_r32_imm8 ( 75 )
  dq __MOLD_NullMethodCalled ; pmovmskb_r_mm ( 76 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_m64_imm8 ( 77 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_mm_imm8 ( 78 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_m ( 79 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_r ( 80 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_m ( 81 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_r ( 82 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_m ( 83 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_r ( 84 )
  dq __MOLD_NullMethodCalled ; emitDword ( 85 )
  dq __MOLD_NullMethodCalled ; emitQword ( 86 )
  dq __PipeAbstract_connectTo$1_vcall ; connectTo ( 87 )

vtable_X64Translator:
.offset dd 8 * 0
.length dd 8 * 87
.entries:
  dq __X64Translator_processOneItem$1_vcall ; processOneItem ( 0 )
  dq __MOLD_NullMethodCalled ; _parseSource ( 1 )
  dq __X64Translator_getCurrentPosition$0_vcall ; getCurrentPosition ( 2 )
  dq __MOLD_NullMethodCalled ; emitCore_r_imm ( 3 )
  dq __MOLD_NullMethodCalled ; emitCore_m_imm ( 4 )
  dq __MOLD_NullMethodCalled ; emitCore_r_r ( 5 )
  dq __MOLD_NullMethodCalled ; emitCore_m_r ( 6 )
  dq __MOLD_NullMethodCalled ; emitCore_r_m ( 7 )
  dq __MOLD_NullMethodCalled ; emitByte ( 8 )
  dq __MOLD_NullMethodCalled ; emitWord ( 9 )
  dq __MOLD_NullMethodCalled ; emitFPU_m ( 10 )
  dq __MOLD_NullMethodCalled ; emitFPU_sti ( 11 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_m ( 12 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_r ( 13 )
  dq __MOLD_NullMethodCalled ; emitCore_jcc_rel ( 14 )
  dq __MOLD_NullMethodCalled ; emitCore_jmp_rel8 ( 15 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_cl ( 17 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_cl ( 19 )
  dq __MOLD_NullMethodCalled ; emitCore_m ( 20 )
  dq __MOLD_NullMethodCalled ; emitCore_r ( 21 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_m ( 22 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_r ( 23 )
  dq __MOLD_NullMethodCalled ; mov_r_imm ( 24 )
  dq __MOLD_NullMethodCalled ; mov_m_imm ( 25 )
  dq __MOLD_NullMethodCalled ; lea_r_m ( 26 )
  dq __MOLD_NullMethodCalled ; test_r_imm ( 27 )
  dq __MOLD_NullMethodCalled ; test_m_imm ( 28 )
  dq __MOLD_NullMethodCalled ; xchg_r_r ( 29 )
  dq __MOLD_NullMethodCalled ; out_imm_r ( 30 )
  dq __MOLD_NullMethodCalled ; out_dx_r ( 31 )
  dq __MOLD_NullMethodCalled ; in_r_imm ( 32 )
  dq __MOLD_NullMethodCalled ; in_r_dx ( 33 )
  dq __MOLD_NullMethodCalled ; enter_imm16_imm8 ( 34 )
  dq __MOLD_NullMethodCalled ; movd_m32_mm ( 35 )
  dq __MOLD_NullMethodCalled ; movd_mm_m32 ( 36 )
  dq __MOLD_NullMethodCalled ; movd_r32_mm ( 37 )
  dq __MOLD_NullMethodCalled ; movd_mm_r32 ( 38 )
  dq __MOLD_NullMethodCalled ; movq_m64_mm ( 39 )
  dq __MOLD_NullMethodCalled ; movq_mm_m64 ( 40 )
  dq __MOLD_NullMethodCalled ; movq_mm_mm ( 41 )
  dq __MOLD_NullMethodCalled ; movq_r64_mm ( 42 )
  dq __MOLD_NullMethodCalled ; movq_mm_r64 ( 43 )
  dq __MOLD_NullMethodCalled ; push_r ( 44 )
  dq __MOLD_NullMethodCalled ; push_imm8 ( 45 )
  dq __MOLD_NullMethodCalled ; push_imm32 ( 46 )
  dq __MOLD_NullMethodCalled ; push_m ( 47 )
  dq __MOLD_NullMethodCalled ; pop_r ( 48 )
  dq __MOLD_NullMethodCalled ; pop_m ( 49 )
  dq __MOLD_NullMethodCalled ; call_r ( 50 )
  dq __MOLD_NullMethodCalled ; call_m ( 51 )
  dq __MOLD_NullMethodCalled ; call_rel ( 52 )
  dq __MOLD_NullMethodCalled ; jmp_r ( 53 )
  dq __MOLD_NullMethodCalled ; jmp_m ( 54 )
  dq __MOLD_NullMethodCalled ; jmp_rel ( 55 )
  dq __MOLD_NullMethodCalled ; bswap_r ( 56 )
  dq __MOLD_NullMethodCalled ; cmpxchg8b_m ( 57 )
  dq __MOLD_NullMethodCalled ; cmpxchg16b_m ( 58 )
  dq __MOLD_NullMethodCalled ; inc_r ( 59 )
  dq __MOLD_NullMethodCalled ; inc_m ( 60 )
  dq __MOLD_NullMethodCalled ; dec_r ( 61 )
  dq __MOLD_NullMethodCalled ; dec_m ( 62 )
  dq __MOLD_NullMethodCalled ; int_imm ( 63 )
  dq __MOLD_NullMethodCalled ; ret ( 64 )
  dq __MOLD_NullMethodCalled ; ret_imm ( 65 )
  dq __MOLD_NullMethodCalled ; retf ( 66 )
  dq __MOLD_NullMethodCalled ; retf_imm ( 67 )
  dq __MOLD_NullMethodCalled ; nop ( 68 )
  dq __MOLD_NullMethodCalled ; nop_m ( 69 )
  dq __MOLD_NullMethodCalled ; nop_r ( 70 )
  dq __MOLD_NullMethodCalled ; palignr_mm_m64_imm8 ( 71 )
  dq __MOLD_NullMethodCalled ; palignr_mm_mm_imm8 ( 72 )
  dq __MOLD_NullMethodCalled ; pextrw_r64_mm_imm8 ( 73 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_m16_imm8 ( 74 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_r32_imm8 ( 75 )
  dq __MOLD_NullMethodCalled ; pmovmskb_r_mm ( 76 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_m64_imm8 ( 77 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_mm_imm8 ( 78 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_m ( 79 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_r ( 80 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_m ( 81 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_r ( 82 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_m ( 83 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_r ( 84 )
  dq __MOLD_NullMethodCalled ; emitDword ( 85 )
  dq __MOLD_NullMethodCalled ; emitQword ( 86 )
  dq __PipeAbstract_connectTo$1_vcall ; connectTo ( 87 )

vtable_X64Encoder:
.offset dd 8 * 2
.length dd 8 * 85
.entries:
  dq __X64Encoder_getCurrentPosition$0_vcall ; getCurrentPosition ( 2 )
  dq __X64Encoder_emitCore_r_imm$3_vcall ; emitCore_r_imm ( 3 )
  dq __X64Encoder_emitCore_m_imm$7_vcall ; emitCore_m_imm ( 4 )
  dq __X64Encoder_emitCore_r_r$3_vcall ; emitCore_r_r ( 5 )
  dq __X64Encoder_emitCore_m_r$6_vcall ; emitCore_m_r ( 6 )
  dq __X64Encoder_emitCore_r_m$6_vcall ; emitCore_r_m ( 7 )
  dq __X64Encoder_emitByte$1_vcall ; emitByte ( 8 )
  dq __X64Encoder_emitWord$1_vcall ; emitWord ( 9 )
  dq __X64Encoder_emitFPU_m$5_vcall ; emitFPU_m ( 10 )
  dq __X64Encoder_emitFPU_sti$2_vcall ; emitFPU_sti ( 11 )
  dq __X64Encoder_emitCore_unaryGroup_m$6_vcall ; emitCore_unaryGroup_m ( 12 )
  dq __X64Encoder_emitCore_unaryGroup_r$2_vcall ; emitCore_unaryGroup_r ( 13 )
  dq __X64Encoder_emitCore_jcc_rel$2_vcall ; emitCore_jcc_rel ( 14 )
  dq __X64Encoder_emitCore_jmp_rel8$2_vcall ; emitCore_jmp_rel8 ( 15 )
  dq __X64Encoder_emitCore_shiftGroup_m_imm8$7_vcall ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __X64Encoder_emitCore_shiftGroup_m_cl$6_vcall ; emitCore_shiftGroup_m_cl ( 17 )
  dq __X64Encoder_emitCore_shiftGroup_r_imm8$3_vcall ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __X64Encoder_emitCore_shiftGroup_r_cl$2_vcall ; emitCore_shiftGroup_r_cl ( 19 )
  dq __X64Encoder_emitCore_m$5_vcall ; emitCore_m ( 20 )
  dq __X64Encoder_emitCore_r$2_vcall ; emitCore_r ( 21 )
  dq __X64Encoder_emitCore_movExtend_r_m$6_vcall ; emitCore_movExtend_r_m ( 22 )
  dq __X64Encoder_emitCore_movExtend_r_r$3_vcall ; emitCore_movExtend_r_r ( 23 )
  dq __X64Encoder_mov_r_imm$2_vcall ; mov_r_imm ( 24 )
  dq __X64Encoder_mov_m_imm$6_vcall ; mov_m_imm ( 25 )
  dq __X64Encoder_lea_r_m$5_vcall ; lea_r_m ( 26 )
  dq __X64Encoder_test_r_imm$2_vcall ; test_r_imm ( 27 )
  dq __X64Encoder_test_m_imm$6_vcall ; test_m_imm ( 28 )
  dq __X64Encoder_xchg_r_r$2_vcall ; xchg_r_r ( 29 )
  dq __X64Encoder_out_imm_r$2_vcall ; out_imm_r ( 30 )
  dq __X64Encoder_out_dx_r$1_vcall ; out_dx_r ( 31 )
  dq __X64Encoder_in_r_imm$2_vcall ; in_r_imm ( 32 )
  dq __X64Encoder_in_r_dx$1_vcall ; in_r_dx ( 33 )
  dq __X64Encoder_enter_imm16_imm8$2_vcall ; enter_imm16_imm8 ( 34 )
  dq __X64Encoder_movd_m32_mm$5_vcall ; movd_m32_mm ( 35 )
  dq __X64Encoder_movd_mm_m32$5_vcall ; movd_mm_m32 ( 36 )
  dq __X64Encoder_movd_r32_mm$2_vcall ; movd_r32_mm ( 37 )
  dq __X64Encoder_movd_mm_r32$2_vcall ; movd_mm_r32 ( 38 )
  dq __X64Encoder_movq_m64_mm$5_vcall ; movq_m64_mm ( 39 )
  dq __X64Encoder_movq_mm_m64$5_vcall ; movq_mm_m64 ( 40 )
  dq __X64Encoder_movq_mm_mm$2_vcall ; movq_mm_mm ( 41 )
  dq __X64Encoder_movq_r64_mm$2_vcall ; movq_r64_mm ( 42 )
  dq __X64Encoder_movq_mm_r64$2_vcall ; movq_mm_r64 ( 43 )
  dq __X64Encoder_push_r$1_vcall ; push_r ( 44 )
  dq __X64Encoder_push_imm8$1_vcall ; push_imm8 ( 45 )
  dq __X64Encoder_push_imm32$1_vcall ; push_imm32 ( 46 )
  dq __X64Encoder_push_m$5_vcall ; push_m ( 47 )
  dq __X64Encoder_pop_r$1_vcall ; pop_r ( 48 )
  dq __X64Encoder_pop_m$5_vcall ; pop_m ( 49 )
  dq __X64Encoder_call_r$1_vcall ; call_r ( 50 )
  dq __X64Encoder_call_m$5_vcall ; call_m ( 51 )
  dq __X64Encoder_call_rel$1_vcall ; call_rel ( 52 )
  dq __X64Encoder_jmp_r$1_vcall ; jmp_r ( 53 )
  dq __X64Encoder_jmp_m$5_vcall ; jmp_m ( 54 )
  dq __X64Encoder_jmp_rel$1_vcall ; jmp_rel ( 55 )
  dq __X64Encoder_bswap_r$1_vcall ; bswap_r ( 56 )
  dq __X64Encoder_cmpxchg8b_m$4_vcall ; cmpxchg8b_m ( 57 )
  dq __X64Encoder_cmpxchg16b_m$4_vcall ; cmpxchg16b_m ( 58 )
  dq __X64Encoder_inc_r$1_vcall ; inc_r ( 59 )
  dq __X64Encoder_inc_m$5_vcall ; inc_m ( 60 )
  dq __X64Encoder_dec_r$1_vcall ; dec_r ( 61 )
  dq __X64Encoder_dec_m$5_vcall ; dec_m ( 62 )
  dq __X64Encoder_int_imm$1_vcall ; int_imm ( 63 )
  dq __X64Encoder_ret$0_vcall ; ret ( 64 )
  dq __X64Encoder_ret_imm$1_vcall ; ret_imm ( 65 )
  dq __X64Encoder_retf$0_vcall ; retf ( 66 )
  dq __X64Encoder_retf_imm$1_vcall ; retf_imm ( 67 )
  dq __X64Encoder_nop$0_vcall ; nop ( 68 )
  dq __X64Encoder_nop_m$5_vcall ; nop_m ( 69 )
  dq __X64Encoder_nop_r$1_vcall ; nop_r ( 70 )
  dq __X64Encoder_palignr_mm_m64_imm8$6_vcall ; palignr_mm_m64_imm8 ( 71 )
  dq __X64Encoder_palignr_mm_mm_imm8$3_vcall ; palignr_mm_mm_imm8 ( 72 )
  dq __X64Encoder_pextrw_r64_mm_imm8$3_vcall ; pextrw_r64_mm_imm8 ( 73 )
  dq __X64Encoder_pinsrw_mm_m16_imm8$6_vcall ; pinsrw_mm_m16_imm8 ( 74 )
  dq __X64Encoder_pinsrw_mm_r32_imm8$3_vcall ; pinsrw_mm_r32_imm8 ( 75 )
  dq __X64Encoder_pmovmskb_r_mm$2_vcall ; pmovmskb_r_mm ( 76 )
  dq __X64Encoder_pshufw_mm_m64_imm8$6_vcall ; pshufw_mm_m64_imm8 ( 77 )
  dq __X64Encoder_pshufw_mm_mm_imm8$3_vcall ; pshufw_mm_mm_imm8 ( 78 )
  dq __X64Encoder_emitCore286_r_m$6_vcall ; emitCore286_r_m ( 79 )
  dq __X64Encoder_emitCore286_r_r$3_vcall ; emitCore286_r_r ( 80 )
  dq __X64Encoder_emitCore_group0f_00_m$5_vcall ; emitCore_group0f_00_m ( 81 )
  dq __X64Encoder_emitCore_group0f_00_r$2_vcall ; emitCore_group0f_00_r ( 82 )
  dq __X64Encoder_emitCore_group0f_01_m$5_vcall ; emitCore_group0f_01_m ( 83 )
  dq __X64Encoder_emitCore_group0f_01_r$2_vcall ; emitCore_group0f_01_r ( 84 )
  dq __X64Encoder_emitDword$1_vcall ; emitDword ( 85 )
  dq __X64Encoder_emitQword$1_vcall ; emitQword ( 86 )
  dq __X64Encoder_connectTo$1_vcall ; connectTo ( 87 )

vtable_PEWriter:
.offset dd 8 * 8
.length dd 8 * 81
.entries:
  dq __PEWriter_emitByte$1_vcall ; emitByte ( 8 )
  dq __PEWriter_emitWord$1_vcall ; emitWord ( 9 )
  dq __MOLD_NullMethodCalled ; emitFPU_m ( 10 )
  dq __MOLD_NullMethodCalled ; emitFPU_sti ( 11 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_m ( 12 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_r ( 13 )
  dq __MOLD_NullMethodCalled ; emitCore_jcc_rel ( 14 )
  dq __MOLD_NullMethodCalled ; emitCore_jmp_rel8 ( 15 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_cl ( 17 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_cl ( 19 )
  dq __MOLD_NullMethodCalled ; emitCore_m ( 20 )
  dq __MOLD_NullMethodCalled ; emitCore_r ( 21 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_m ( 22 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_r ( 23 )
  dq __MOLD_NullMethodCalled ; mov_r_imm ( 24 )
  dq __MOLD_NullMethodCalled ; mov_m_imm ( 25 )
  dq __MOLD_NullMethodCalled ; lea_r_m ( 26 )
  dq __MOLD_NullMethodCalled ; test_r_imm ( 27 )
  dq __MOLD_NullMethodCalled ; test_m_imm ( 28 )
  dq __MOLD_NullMethodCalled ; xchg_r_r ( 29 )
  dq __MOLD_NullMethodCalled ; out_imm_r ( 30 )
  dq __MOLD_NullMethodCalled ; out_dx_r ( 31 )
  dq __MOLD_NullMethodCalled ; in_r_imm ( 32 )
  dq __MOLD_NullMethodCalled ; in_r_dx ( 33 )
  dq __MOLD_NullMethodCalled ; enter_imm16_imm8 ( 34 )
  dq __MOLD_NullMethodCalled ; movd_m32_mm ( 35 )
  dq __MOLD_NullMethodCalled ; movd_mm_m32 ( 36 )
  dq __MOLD_NullMethodCalled ; movd_r32_mm ( 37 )
  dq __MOLD_NullMethodCalled ; movd_mm_r32 ( 38 )
  dq __MOLD_NullMethodCalled ; movq_m64_mm ( 39 )
  dq __MOLD_NullMethodCalled ; movq_mm_m64 ( 40 )
  dq __MOLD_NullMethodCalled ; movq_mm_mm ( 41 )
  dq __MOLD_NullMethodCalled ; movq_r64_mm ( 42 )
  dq __MOLD_NullMethodCalled ; movq_mm_r64 ( 43 )
  dq __MOLD_NullMethodCalled ; push_r ( 44 )
  dq __MOLD_NullMethodCalled ; push_imm8 ( 45 )
  dq __MOLD_NullMethodCalled ; push_imm32 ( 46 )
  dq __MOLD_NullMethodCalled ; push_m ( 47 )
  dq __MOLD_NullMethodCalled ; pop_r ( 48 )
  dq __MOLD_NullMethodCalled ; pop_m ( 49 )
  dq __MOLD_NullMethodCalled ; call_r ( 50 )
  dq __MOLD_NullMethodCalled ; call_m ( 51 )
  dq __MOLD_NullMethodCalled ; call_rel ( 52 )
  dq __MOLD_NullMethodCalled ; jmp_r ( 53 )
  dq __MOLD_NullMethodCalled ; jmp_m ( 54 )
  dq __MOLD_NullMethodCalled ; jmp_rel ( 55 )
  dq __MOLD_NullMethodCalled ; bswap_r ( 56 )
  dq __MOLD_NullMethodCalled ; cmpxchg8b_m ( 57 )
  dq __MOLD_NullMethodCalled ; cmpxchg16b_m ( 58 )
  dq __MOLD_NullMethodCalled ; inc_r ( 59 )
  dq __MOLD_NullMethodCalled ; inc_m ( 60 )
  dq __MOLD_NullMethodCalled ; dec_r ( 61 )
  dq __MOLD_NullMethodCalled ; dec_m ( 62 )
  dq __MOLD_NullMethodCalled ; int_imm ( 63 )
  dq __MOLD_NullMethodCalled ; ret ( 64 )
  dq __MOLD_NullMethodCalled ; ret_imm ( 65 )
  dq __MOLD_NullMethodCalled ; retf ( 66 )
  dq __MOLD_NullMethodCalled ; retf_imm ( 67 )
  dq __MOLD_NullMethodCalled ; nop ( 68 )
  dq __MOLD_NullMethodCalled ; nop_m ( 69 )
  dq __MOLD_NullMethodCalled ; nop_r ( 70 )
  dq __MOLD_NullMethodCalled ; palignr_mm_m64_imm8 ( 71 )
  dq __MOLD_NullMethodCalled ; palignr_mm_mm_imm8 ( 72 )
  dq __MOLD_NullMethodCalled ; pextrw_r64_mm_imm8 ( 73 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_m16_imm8 ( 74 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_r32_imm8 ( 75 )
  dq __MOLD_NullMethodCalled ; pmovmskb_r_mm ( 76 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_m64_imm8 ( 77 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_mm_imm8 ( 78 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_m ( 79 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_r ( 80 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_m ( 81 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_r ( 82 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_m ( 83 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_r ( 84 )
  dq __PEWriter_emitDword$1_vcall ; emitDword ( 85 )
  dq __PEWriter_emitQword$1_vcall ; emitQword ( 86 )
  dq __MOLD_NullMethodCalled ; connectTo ( 87 )
  dq __PEWriter_create$1_vcall ; create ( 88 )
  dq __PEWriter_close$0_vcall ; close ( 89 )

vtable_Buffer:
.offset dd 8 * 2
.length dd 8 * 92
.entries:
  dq __Buffer_getCurrentPosition$0_vcall ; getCurrentPosition ( 2 )
  dq __MOLD_NullMethodCalled ; emitCore_r_imm ( 3 )
  dq __MOLD_NullMethodCalled ; emitCore_m_imm ( 4 )
  dq __MOLD_NullMethodCalled ; emitCore_r_r ( 5 )
  dq __MOLD_NullMethodCalled ; emitCore_m_r ( 6 )
  dq __MOLD_NullMethodCalled ; emitCore_r_m ( 7 )
  dq __Buffer_emitByte$1_vcall ; emitByte ( 8 )
  dq __Buffer_emitWord$1_vcall ; emitWord ( 9 )
  dq __MOLD_NullMethodCalled ; emitFPU_m ( 10 )
  dq __MOLD_NullMethodCalled ; emitFPU_sti ( 11 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_m ( 12 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_r ( 13 )
  dq __MOLD_NullMethodCalled ; emitCore_jcc_rel ( 14 )
  dq __MOLD_NullMethodCalled ; emitCore_jmp_rel8 ( 15 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_cl ( 17 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_cl ( 19 )
  dq __MOLD_NullMethodCalled ; emitCore_m ( 20 )
  dq __MOLD_NullMethodCalled ; emitCore_r ( 21 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_m ( 22 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_r ( 23 )
  dq __MOLD_NullMethodCalled ; mov_r_imm ( 24 )
  dq __MOLD_NullMethodCalled ; mov_m_imm ( 25 )
  dq __MOLD_NullMethodCalled ; lea_r_m ( 26 )
  dq __MOLD_NullMethodCalled ; test_r_imm ( 27 )
  dq __MOLD_NullMethodCalled ; test_m_imm ( 28 )
  dq __MOLD_NullMethodCalled ; xchg_r_r ( 29 )
  dq __MOLD_NullMethodCalled ; out_imm_r ( 30 )
  dq __MOLD_NullMethodCalled ; out_dx_r ( 31 )
  dq __MOLD_NullMethodCalled ; in_r_imm ( 32 )
  dq __MOLD_NullMethodCalled ; in_r_dx ( 33 )
  dq __MOLD_NullMethodCalled ; enter_imm16_imm8 ( 34 )
  dq __MOLD_NullMethodCalled ; movd_m32_mm ( 35 )
  dq __MOLD_NullMethodCalled ; movd_mm_m32 ( 36 )
  dq __MOLD_NullMethodCalled ; movd_r32_mm ( 37 )
  dq __MOLD_NullMethodCalled ; movd_mm_r32 ( 38 )
  dq __MOLD_NullMethodCalled ; movq_m64_mm ( 39 )
  dq __MOLD_NullMethodCalled ; movq_mm_m64 ( 40 )
  dq __MOLD_NullMethodCalled ; movq_mm_mm ( 41 )
  dq __MOLD_NullMethodCalled ; movq_r64_mm ( 42 )
  dq __MOLD_NullMethodCalled ; movq_mm_r64 ( 43 )
  dq __MOLD_NullMethodCalled ; push_r ( 44 )
  dq __MOLD_NullMethodCalled ; push_imm8 ( 45 )
  dq __MOLD_NullMethodCalled ; push_imm32 ( 46 )
  dq __MOLD_NullMethodCalled ; push_m ( 47 )
  dq __MOLD_NullMethodCalled ; pop_r ( 48 )
  dq __MOLD_NullMethodCalled ; pop_m ( 49 )
  dq __MOLD_NullMethodCalled ; call_r ( 50 )
  dq __MOLD_NullMethodCalled ; call_m ( 51 )
  dq __MOLD_NullMethodCalled ; call_rel ( 52 )
  dq __MOLD_NullMethodCalled ; jmp_r ( 53 )
  dq __MOLD_NullMethodCalled ; jmp_m ( 54 )
  dq __MOLD_NullMethodCalled ; jmp_rel ( 55 )
  dq __MOLD_NullMethodCalled ; bswap_r ( 56 )
  dq __MOLD_NullMethodCalled ; cmpxchg8b_m ( 57 )
  dq __MOLD_NullMethodCalled ; cmpxchg16b_m ( 58 )
  dq __MOLD_NullMethodCalled ; inc_r ( 59 )
  dq __MOLD_NullMethodCalled ; inc_m ( 60 )
  dq __MOLD_NullMethodCalled ; dec_r ( 61 )
  dq __MOLD_NullMethodCalled ; dec_m ( 62 )
  dq __MOLD_NullMethodCalled ; int_imm ( 63 )
  dq __MOLD_NullMethodCalled ; ret ( 64 )
  dq __MOLD_NullMethodCalled ; ret_imm ( 65 )
  dq __MOLD_NullMethodCalled ; retf ( 66 )
  dq __MOLD_NullMethodCalled ; retf_imm ( 67 )
  dq __MOLD_NullMethodCalled ; nop ( 68 )
  dq __MOLD_NullMethodCalled ; nop_m ( 69 )
  dq __MOLD_NullMethodCalled ; nop_r ( 70 )
  dq __MOLD_NullMethodCalled ; palignr_mm_m64_imm8 ( 71 )
  dq __MOLD_NullMethodCalled ; palignr_mm_mm_imm8 ( 72 )
  dq __MOLD_NullMethodCalled ; pextrw_r64_mm_imm8 ( 73 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_m16_imm8 ( 74 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_r32_imm8 ( 75 )
  dq __MOLD_NullMethodCalled ; pmovmskb_r_mm ( 76 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_m64_imm8 ( 77 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_mm_imm8 ( 78 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_m ( 79 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_r ( 80 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_m ( 81 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_r ( 82 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_m ( 83 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_r ( 84 )
  dq __Buffer_emitDword$1_vcall ; emitDword ( 85 )
  dq __Buffer_emitQword$1_vcall ; emitQword ( 86 )
  dq __MOLD_NullMethodCalled ; connectTo ( 87 )
  dq __MOLD_NullMethodCalled ; create ( 88 )
  dq __MOLD_NullMethodCalled ; close ( 89 )
  dq __Buffer_clear$0_vcall ; clear ( 90 )
  dq __MOLD_NullMethodCalled ; parseFile ( 91 )
  dq __MOLD_NullMethodCalled ; getArrayOfLabelsAndRefs ( 92 )
  dq __Buffer_setCurrentPosition$2_vcall ; setCurrentPosition ( 93 )
  dq __Buffer_getSize$0_vcall ; getSize ( 94 )

vtable_X64Compiler:
.offset dd 8 * 95
.length dd 8 * 0
.entries:
  dq __X64Compiler_compile$2_vcall ; compile ( 95 )

vtable_X64Tester:
.offset dd 8 * 8
.length dd 8 * 78
.entries:
  dq __X64Tester_emitByte$1_vcall ; emitByte ( 8 )
  dq __X64Tester_emitWord$1_vcall ; emitWord ( 9 )
  dq __MOLD_NullMethodCalled ; emitFPU_m ( 10 )
  dq __MOLD_NullMethodCalled ; emitFPU_sti ( 11 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_m ( 12 )
  dq __MOLD_NullMethodCalled ; emitCore_unaryGroup_r ( 13 )
  dq __MOLD_NullMethodCalled ; emitCore_jcc_rel ( 14 )
  dq __MOLD_NullMethodCalled ; emitCore_jmp_rel8 ( 15 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_imm8 ( 16 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_m_cl ( 17 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_imm8 ( 18 )
  dq __MOLD_NullMethodCalled ; emitCore_shiftGroup_r_cl ( 19 )
  dq __MOLD_NullMethodCalled ; emitCore_m ( 20 )
  dq __MOLD_NullMethodCalled ; emitCore_r ( 21 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_m ( 22 )
  dq __MOLD_NullMethodCalled ; emitCore_movExtend_r_r ( 23 )
  dq __MOLD_NullMethodCalled ; mov_r_imm ( 24 )
  dq __MOLD_NullMethodCalled ; mov_m_imm ( 25 )
  dq __MOLD_NullMethodCalled ; lea_r_m ( 26 )
  dq __MOLD_NullMethodCalled ; test_r_imm ( 27 )
  dq __MOLD_NullMethodCalled ; test_m_imm ( 28 )
  dq __MOLD_NullMethodCalled ; xchg_r_r ( 29 )
  dq __MOLD_NullMethodCalled ; out_imm_r ( 30 )
  dq __MOLD_NullMethodCalled ; out_dx_r ( 31 )
  dq __MOLD_NullMethodCalled ; in_r_imm ( 32 )
  dq __MOLD_NullMethodCalled ; in_r_dx ( 33 )
  dq __MOLD_NullMethodCalled ; enter_imm16_imm8 ( 34 )
  dq __MOLD_NullMethodCalled ; movd_m32_mm ( 35 )
  dq __MOLD_NullMethodCalled ; movd_mm_m32 ( 36 )
  dq __MOLD_NullMethodCalled ; movd_r32_mm ( 37 )
  dq __MOLD_NullMethodCalled ; movd_mm_r32 ( 38 )
  dq __MOLD_NullMethodCalled ; movq_m64_mm ( 39 )
  dq __MOLD_NullMethodCalled ; movq_mm_m64 ( 40 )
  dq __MOLD_NullMethodCalled ; movq_mm_mm ( 41 )
  dq __MOLD_NullMethodCalled ; movq_r64_mm ( 42 )
  dq __MOLD_NullMethodCalled ; movq_mm_r64 ( 43 )
  dq __MOLD_NullMethodCalled ; push_r ( 44 )
  dq __MOLD_NullMethodCalled ; push_imm8 ( 45 )
  dq __MOLD_NullMethodCalled ; push_imm32 ( 46 )
  dq __MOLD_NullMethodCalled ; push_m ( 47 )
  dq __MOLD_NullMethodCalled ; pop_r ( 48 )
  dq __MOLD_NullMethodCalled ; pop_m ( 49 )
  dq __MOLD_NullMethodCalled ; call_r ( 50 )
  dq __MOLD_NullMethodCalled ; call_m ( 51 )
  dq __MOLD_NullMethodCalled ; call_rel ( 52 )
  dq __MOLD_NullMethodCalled ; jmp_r ( 53 )
  dq __MOLD_NullMethodCalled ; jmp_m ( 54 )
  dq __MOLD_NullMethodCalled ; jmp_rel ( 55 )
  dq __MOLD_NullMethodCalled ; bswap_r ( 56 )
  dq __MOLD_NullMethodCalled ; cmpxchg8b_m ( 57 )
  dq __MOLD_NullMethodCalled ; cmpxchg16b_m ( 58 )
  dq __MOLD_NullMethodCalled ; inc_r ( 59 )
  dq __MOLD_NullMethodCalled ; inc_m ( 60 )
  dq __MOLD_NullMethodCalled ; dec_r ( 61 )
  dq __MOLD_NullMethodCalled ; dec_m ( 62 )
  dq __MOLD_NullMethodCalled ; int_imm ( 63 )
  dq __MOLD_NullMethodCalled ; ret ( 64 )
  dq __MOLD_NullMethodCalled ; ret_imm ( 65 )
  dq __MOLD_NullMethodCalled ; retf ( 66 )
  dq __MOLD_NullMethodCalled ; retf_imm ( 67 )
  dq __MOLD_NullMethodCalled ; nop ( 68 )
  dq __MOLD_NullMethodCalled ; nop_m ( 69 )
  dq __MOLD_NullMethodCalled ; nop_r ( 70 )
  dq __MOLD_NullMethodCalled ; palignr_mm_m64_imm8 ( 71 )
  dq __MOLD_NullMethodCalled ; palignr_mm_mm_imm8 ( 72 )
  dq __MOLD_NullMethodCalled ; pextrw_r64_mm_imm8 ( 73 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_m16_imm8 ( 74 )
  dq __MOLD_NullMethodCalled ; pinsrw_mm_r32_imm8 ( 75 )
  dq __MOLD_NullMethodCalled ; pmovmskb_r_mm ( 76 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_m64_imm8 ( 77 )
  dq __MOLD_NullMethodCalled ; pshufw_mm_mm_imm8 ( 78 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_m ( 79 )
  dq __MOLD_NullMethodCalled ; emitCore286_r_r ( 80 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_m ( 81 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_00_r ( 82 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_m ( 83 )
  dq __MOLD_NullMethodCalled ; emitCore_group0f_01_r ( 84 )
  dq __X64Tester_emitDword$1_vcall ; emitDword ( 85 )
  dq __X64Tester_emitQword$1_vcall ; emitQword ( 86 )

; ------------------------------------------------------------------------------
;                               Imports section
; ------------------------------------------------------------------------------
section '.idata' import data readable writeable
  include 'x64\CommonImports.asm'

; ------------------------------------------------------------------------------
;                                Debug section
; ------------------------------------------------------------------------------
section '.debug' data readable
SymbolTable:
dq 0, 0
include 'x64\SymbolTableCommon.asm'
dq  X64_ParseRegisterName , name_X64_ParseRegisterName
dq  X64_IsReg8 , name_X64_IsReg8
dq  X64_IsReg16 , name_X64_IsReg16
dq  X64_IsReg32 , name_X64_IsReg32
dq  X64_IsReg64 , name_X64_IsReg64
dq  X64_IsRegSTI , name_X64_IsRegSTI
dq  X64_IsRegMM , name_X64_IsRegMM
dq  __AbstractDescentParser_constructor$0 , name___AbstractDescentParser_constructor$0
dq  __AbstractDescentParser__error$1 , name___AbstractDescentParser__error$1
dq  __AbstractDescentParser__eatChar$0 , name___AbstractDescentParser__eatChar$0
dq  __AbstractDescentParser__getChar$0 , name___AbstractDescentParser__getChar$0
dq  __AbstractDescentParser__skipWhites$0 , name___AbstractDescentParser__skipWhites$0
dq  __AbstractDescentParser__isLetter$1 , name___AbstractDescentParser__isLetter$1
dq  __AbstractDescentParser__isEndOfLine$1 , name___AbstractDescentParser__isEndOfLine$1
dq  __AbstractDescentParser__isDigit$1 , name___AbstractDescentParser__isDigit$1
dq  __AbstractDescentParser__isLetterOrDigit$1 , name___AbstractDescentParser__isLetterOrDigit$1
dq  __AbstractDescentParser__matchChar$1 , name___AbstractDescentParser__matchChar$1
dq  __AbstractDescentParser__matchLetter$0 , name___AbstractDescentParser__matchLetter$0
dq  __AbstractDescentParser__matchLetterOrDigit$0 , name___AbstractDescentParser__matchLetterOrDigit$0
dq  __AbstractDescentParser__emitOneItem$1 , name___AbstractDescentParser__emitOneItem$1
dq  __AbstractDescentParser__parseSource$0 , name___AbstractDescentParser__parseSource$0
dq  __AbstractDescentParser_parseFile$1 , name___AbstractDescentParser_parseFile$1
dq  __AbstractDescentParser_connectTo$1 , name___AbstractDescentParser_connectTo$1
dq  hex , name_hex
dq  __X64Parser_constructor$0 , name___X64Parser_constructor$0
dq  __X64Parser_reset$0 , name___X64Parser_reset$0
dq  __X64Parser__emitLabel$1 , name___X64Parser__emitLabel$1
dq  __X64Parser__getToken$0 , name___X64Parser__getToken$0
dq  __X64Parser__matchMemory$1 , name___X64Parser__matchMemory$1
dq  __X64Parser__setImmediate$2 , name___X64Parser__setImmediate$2
dq  __X64Parser__matchOperand$1 , name___X64Parser__matchOperand$1
dq  __X64Parser__matchEndOfLine$0 , name___X64Parser__matchEndOfLine$0
dq  __X64Parser__parseFirstOperand$1 , name___X64Parser__parseFirstOperand$1
dq  __X64Parser__parseSecondOperand$1 , name___X64Parser__parseSecondOperand$1
dq  __X64Parser__matchCodeLine$1 , name___X64Parser__matchCodeLine$1
dq  __X64Parser__skipComment$0 , name___X64Parser__skipComment$0
dq  __X64Parser__matchNumber$0 , name___X64Parser__matchNumber$0
dq  __X64Parser__matchData$1 , name___X64Parser__matchData$1
dq  __X64Parser_parseOneLine$0 , name___X64Parser_parseOneLine$0
dq  __X64Parser__parseSource$0 , name___X64Parser__parseSource$0
dq  __X64Parser_getArrayOfLabelsAndRefs$0 , name___X64Parser_getArrayOfLabelsAndRefs$0
dq  __PipeAbstract_constructor$0 , name___PipeAbstract_constructor$0
dq  __PipeAbstract__emitOneItem$1 , name___PipeAbstract__emitOneItem$1
dq  __PipeAbstract__replaceLastItem$1 , name___PipeAbstract__replaceLastItem$1
dq  __PipeAbstract_connectTo$1 , name___PipeAbstract_connectTo$1
dq  __PipeAbstract_processOneItem$1 , name___PipeAbstract_processOneItem$1
dq  __PipeAbstract_processArrayOfItems$1 , name___PipeAbstract_processArrayOfItems$1
dq  __PipeAbstract_flush$0 , name___PipeAbstract_flush$0
dq  __X64Translator_emitCore_x_y$2 , name___X64Translator_emitCore_x_y$2
dq  __X64Translator_emitCoreALU2$2 , name___X64Translator_emitCoreALU2$2
dq  __X64Translator__error$1 , name___X64Translator__error$1
dq  __X64Translator__validateNumberOfOperands$2 , name___X64Translator__validateNumberOfOperands$2
dq  __X64Translator__validateOperandSizes$4 , name___X64Translator__validateOperandSizes$4
dq  __X64Translator__validateImmRange$4 , name___X64Translator__validateImmRange$4
dq  __X64Translator__failIf8BitOperandIsUsed$1 , name___X64Translator__failIf8BitOperandIsUsed$1
dq  __X64Translator__failIfNon8BitOperandIsUsed$1 , name___X64Translator__failIfNon8BitOperandIsUsed$1
dq  __X64Translator__failIfNon16BitOperandIsUsed$1 , name___X64Translator__failIfNon16BitOperandIsUsed$1
dq  __X64Translator__failIfMemoryWrite$1 , name___X64Translator__failIfMemoryWrite$1
dq  __X64Translator__failIfMemoryRead$1 , name___X64Translator__failIfMemoryRead$1
dq  __X64Translator__failIfImmIsUsed$1 , name___X64Translator__failIfImmIsUsed$1
dq  __X64Translator__failIfMemoryReadOrWrite$1 , name___X64Translator__failIfMemoryReadOrWrite$1
dq  __X64Translator__failIfRegsAreUsed$1 , name___X64Translator__failIfRegsAreUsed$1
dq  __X64Translator__failIfImmIsMissing$1 , name___X64Translator__failIfImmIsMissing$1
dq  __X64Translator__failIfOutOfRange$3 , name___X64Translator__failIfOutOfRange$3
dq  __X64Translator__failIfNonMMReg$2 , name___X64Translator__failIfNonMMReg$2
dq  __X64Translator__failIfNon64Data$1 , name___X64Translator__failIfNon64Data$1
dq  __X64Translator__errorBadSyntax$1 , name___X64Translator__errorBadSyntax$1
dq  __X64Translator__errorUnrecognizedInstruction$1 , name___X64Translator__errorUnrecognizedInstruction$1
dq  __X64Translator__errorGenericFPU$1 , name___X64Translator__errorGenericFPU$1
dq  __X64Translator__emitVariableLengthOpcode$1 , name___X64Translator__emitVariableLengthOpcode$1
dq  __X64Translator__processFPU$1 , name___X64Translator__processFPU$1
dq  __X64Translator_processOneItem$1 , name___X64Translator_processOneItem$1
dq  __X64Translator_getCurrentPosition$0 , name___X64Translator_getCurrentPosition$0
dq  __X64Encoder_constructor$0 , name___X64Encoder_constructor$0
dq  __X64Encoder_emitByte$1 , name___X64Encoder_emitByte$1
dq  __X64Encoder_emitWord$1 , name___X64Encoder_emitWord$1
dq  __X64Encoder_emitDword$1 , name___X64Encoder_emitDword$1
dq  __X64Encoder_emitQword$1 , name___X64Encoder_emitQword$1
dq  __X64Encoder_emitModRegRM$3 , name___X64Encoder_emitModRegRM$3
dq  __X64Encoder_emitPrimaryOpcode$3 , name___X64Encoder_emitPrimaryOpcode$3
dq  __X64Encoder_emitPrefix16$0 , name___X64Encoder_emitPrefix16$0
dq  __X64Encoder_emitPrefix64$0 , name___X64Encoder_emitPrefix64$0
dq  __X64Encoder_emitSizePrefixIfNeeded$1 , name___X64Encoder_emitSizePrefixIfNeeded$1
dq  __X64Encoder_emitCore$4 , name___X64Encoder_emitCore$4
dq  __X64Encoder_emitCore_r_r$3 , name___X64Encoder_emitCore_r_r$3
dq  __X64Encoder_emitCore_m_r$6 , name___X64Encoder_emitCore_m_r$6
dq  __X64Encoder_emitCore_r_m$6 , name___X64Encoder_emitCore_r_m$6
dq  __X64Encoder_emitCore_r$2 , name___X64Encoder_emitCore_r$2
dq  __X64Encoder_emitCore_m$5 , name___X64Encoder_emitCore_m$5
dq  __X64Encoder_emitCore_r_imm$3 , name___X64Encoder_emitCore_r_imm$3
dq  __X64Encoder_emitCore_m_imm$7 , name___X64Encoder_emitCore_m_imm$7
dq  __X64Encoder_emitCore_group_r$3 , name___X64Encoder_emitCore_group_r$3
dq  __X64Encoder_emitCore_group_m$6 , name___X64Encoder_emitCore_group_m$6
dq  __X64Encoder_emitCore_unaryGroup_r$2 , name___X64Encoder_emitCore_unaryGroup_r$2
dq  __X64Encoder_emitCore_unaryGroup_m$6 , name___X64Encoder_emitCore_unaryGroup_m$6
dq  __X64Encoder_emitCore_shiftGroup_r_imm8$3 , name___X64Encoder_emitCore_shiftGroup_r_imm8$3
dq  __X64Encoder_emitCore_shiftGroup_r_cl$2 , name___X64Encoder_emitCore_shiftGroup_r_cl$2
dq  __X64Encoder_emitCore_shiftGroup_m_imm8$7 , name___X64Encoder_emitCore_shiftGroup_m_imm8$7
dq  __X64Encoder_emitCore_shiftGroup_m_cl$6 , name___X64Encoder_emitCore_shiftGroup_m_cl$6
dq  __X64Encoder_add_r_r$2 , name___X64Encoder_add_r_r$2
dq  __X64Encoder_or_r_r$2 , name___X64Encoder_or_r_r$2
dq  __X64Encoder_adc_r_r$2 , name___X64Encoder_adc_r_r$2
dq  __X64Encoder_sbb_r_r$2 , name___X64Encoder_sbb_r_r$2
dq  __X64Encoder_and_r_r$2 , name___X64Encoder_and_r_r$2
dq  __X64Encoder_sub_r_r$2 , name___X64Encoder_sub_r_r$2
dq  __X64Encoder_xor_r_r$2 , name___X64Encoder_xor_r_r$2
dq  __X64Encoder_cmp_r_r$2 , name___X64Encoder_cmp_r_r$2
dq  __X64Encoder_add_r_imm$2 , name___X64Encoder_add_r_imm$2
dq  __X64Encoder_or_r_imm$2 , name___X64Encoder_or_r_imm$2
dq  __X64Encoder_adc_r_imm$2 , name___X64Encoder_adc_r_imm$2
dq  __X64Encoder_sbb_r_imm$2 , name___X64Encoder_sbb_r_imm$2
dq  __X64Encoder_and_r_imm$2 , name___X64Encoder_and_r_imm$2
dq  __X64Encoder_sub_r_imm$2 , name___X64Encoder_sub_r_imm$2
dq  __X64Encoder_xor_r_imm$2 , name___X64Encoder_xor_r_imm$2
dq  __X64Encoder_cmp_r_imm$2 , name___X64Encoder_cmp_r_imm$2
dq  __X64Encoder_add_r_m$5 , name___X64Encoder_add_r_m$5
dq  __X64Encoder_or_r_m$5 , name___X64Encoder_or_r_m$5
dq  __X64Encoder_adc_r_m$5 , name___X64Encoder_adc_r_m$5
dq  __X64Encoder_sbb_r_m$5 , name___X64Encoder_sbb_r_m$5
dq  __X64Encoder_and_r_m$5 , name___X64Encoder_and_r_m$5
dq  __X64Encoder_sub_r_m$5 , name___X64Encoder_sub_r_m$5
dq  __X64Encoder_xor_r_m$5 , name___X64Encoder_xor_r_m$5
dq  __X64Encoder_cmp_r_m$5 , name___X64Encoder_cmp_r_m$5
dq  __X64Encoder_add_m_r$5 , name___X64Encoder_add_m_r$5
dq  __X64Encoder_or_m_r$5 , name___X64Encoder_or_m_r$5
dq  __X64Encoder_adc_m_r$5 , name___X64Encoder_adc_m_r$5
dq  __X64Encoder_sbb_m_r$5 , name___X64Encoder_sbb_m_r$5
dq  __X64Encoder_and_m_r$5 , name___X64Encoder_and_m_r$5
dq  __X64Encoder_sub_m_r$5 , name___X64Encoder_sub_m_r$5
dq  __X64Encoder_xor_m_r$5 , name___X64Encoder_xor_m_r$5
dq  __X64Encoder_cmp_m_r$5 , name___X64Encoder_cmp_m_r$5
dq  __X64Encoder_emitCore_incDec_m$6 , name___X64Encoder_emitCore_incDec_m$6
dq  __X64Encoder_inc_r$1 , name___X64Encoder_inc_r$1
dq  __X64Encoder_inc_m$5 , name___X64Encoder_inc_m$5
dq  __X64Encoder_dec_r$1 , name___X64Encoder_dec_r$1
dq  __X64Encoder_dec_m$5 , name___X64Encoder_dec_m$5
dq  __X64Encoder_test_r_r$2 , name___X64Encoder_test_r_r$2
dq  __X64Encoder_test_m_r$5 , name___X64Encoder_test_m_r$5
dq  __X64Encoder_test_m_imm$6 , name___X64Encoder_test_m_imm$6
dq  __X64Encoder_test_r_imm$2 , name___X64Encoder_test_r_imm$2
dq  __X64Encoder_not_r$1 , name___X64Encoder_not_r$1
dq  __X64Encoder_neg_r$1 , name___X64Encoder_neg_r$1
dq  __X64Encoder_mul_r$1 , name___X64Encoder_mul_r$1
dq  __X64Encoder_imul_r$1 , name___X64Encoder_imul_r$1
dq  __X64Encoder_div_r$1 , name___X64Encoder_div_r$1
dq  __X64Encoder_idiv_r$1 , name___X64Encoder_idiv_r$1
dq  __X64Encoder_not_m$5 , name___X64Encoder_not_m$5
dq  __X64Encoder_neg_m$5 , name___X64Encoder_neg_m$5
dq  __X64Encoder_mul_m$5 , name___X64Encoder_mul_m$5
dq  __X64Encoder_imul_m$5 , name___X64Encoder_imul_m$5
dq  __X64Encoder_div_m$5 , name___X64Encoder_div_m$5
dq  __X64Encoder_idiv_m$5 , name___X64Encoder_idiv_m$5
dq  __X64Encoder_emitCore_pushPop_r$2 , name___X64Encoder_emitCore_pushPop_r$2
dq  __X64Encoder_push_r$1 , name___X64Encoder_push_r$1
dq  __X64Encoder_pop_r$1 , name___X64Encoder_pop_r$1
dq  __X64Encoder_pop_m$5 , name___X64Encoder_pop_m$5
dq  __X64Encoder_push_m$5 , name___X64Encoder_push_m$5
dq  __X64Encoder_pushf$0 , name___X64Encoder_pushf$0
dq  __X64Encoder_popf$0 , name___X64Encoder_popf$0
dq  __X64Encoder_emitCore_inOut$3 , name___X64Encoder_emitCore_inOut$3
dq  __X64Encoder_in_r_imm$2 , name___X64Encoder_in_r_imm$2
dq  __X64Encoder_out_imm_r$2 , name___X64Encoder_out_imm_r$2
dq  __X64Encoder_in_r_dx$1 , name___X64Encoder_in_r_dx$1
dq  __X64Encoder_out_dx_r$1 , name___X64Encoder_out_dx_r$1
dq  __X64Encoder_insb$0 , name___X64Encoder_insb$0
dq  __X64Encoder_insw$0 , name___X64Encoder_insw$0
dq  __X64Encoder_outsb$0 , name___X64Encoder_outsb$0
dq  __X64Encoder_outsw$0 , name___X64Encoder_outsw$0
dq  __X64Encoder_movsb$0 , name___X64Encoder_movsb$0
dq  __X64Encoder_movsw$0 , name___X64Encoder_movsw$0
dq  __X64Encoder_movsq$0 , name___X64Encoder_movsq$0
dq  __X64Encoder_cmpsb$0 , name___X64Encoder_cmpsb$0
dq  __X64Encoder_cmpsw$0 , name___X64Encoder_cmpsw$0
dq  __X64Encoder_stosb$0 , name___X64Encoder_stosb$0
dq  __X64Encoder_stosw$0 , name___X64Encoder_stosw$0
dq  __X64Encoder_lodsb$0 , name___X64Encoder_lodsb$0
dq  __X64Encoder_lodsw$0 , name___X64Encoder_lodsw$0
dq  __X64Encoder_scasb$0 , name___X64Encoder_scasb$0
dq  __X64Encoder_scasw$0 , name___X64Encoder_scasw$0
dq  __X64Encoder_repne$0 , name___X64Encoder_repne$0
dq  __X64Encoder_repe$0 , name___X64Encoder_repe$0
dq  __X64Encoder_emitCore_jmp_rel8$2 , name___X64Encoder_emitCore_jmp_rel8$2
dq  __X64Encoder_emitCore_jmp_rel32$2 , name___X64Encoder_emitCore_jmp_rel32$2
dq  __X64Encoder_emitCore_jcc_rel$2 , name___X64Encoder_emitCore_jcc_rel$2
dq  __X64Encoder_jmp_rel$1 , name___X64Encoder_jmp_rel$1
dq  __X64Encoder_jmp_r$1 , name___X64Encoder_jmp_r$1
dq  __X64Encoder_jmp_m$5 , name___X64Encoder_jmp_m$5
dq  __X64Encoder_jo_rel$1 , name___X64Encoder_jo_rel$1
dq  __X64Encoder_jno_rel$1 , name___X64Encoder_jno_rel$1
dq  __X64Encoder_jb_rel$1 , name___X64Encoder_jb_rel$1
dq  __X64Encoder_jae_rel$1 , name___X64Encoder_jae_rel$1
dq  __X64Encoder_jz_rel$1 , name___X64Encoder_jz_rel$1
dq  __X64Encoder_jnz_rel$1 , name___X64Encoder_jnz_rel$1
dq  __X64Encoder_jbe_rel$1 , name___X64Encoder_jbe_rel$1
dq  __X64Encoder_ja_rel$1 , name___X64Encoder_ja_rel$1
dq  __X64Encoder_js_rel$1 , name___X64Encoder_js_rel$1
dq  __X64Encoder_jns_rel$1 , name___X64Encoder_jns_rel$1
dq  __X64Encoder_jp_rel$1 , name___X64Encoder_jp_rel$1
dq  __X64Encoder_jnp_rel$1 , name___X64Encoder_jnp_rel$1
dq  __X64Encoder_jl_rel$1 , name___X64Encoder_jl_rel$1
dq  __X64Encoder_jge_rel$1 , name___X64Encoder_jge_rel$1
dq  __X64Encoder_jle_rel$1 , name___X64Encoder_jle_rel$1
dq  __X64Encoder_jg_rel$1 , name___X64Encoder_jg_rel$1
dq  __X64Encoder_loopz_rel$1 , name___X64Encoder_loopz_rel$1
dq  __X64Encoder_loopnz_rel$1 , name___X64Encoder_loopnz_rel$1
dq  __X64Encoder_loop_rel$1 , name___X64Encoder_loop_rel$1
dq  __X64Encoder_loopzd_rel$1 , name___X64Encoder_loopzd_rel$1
dq  __X64Encoder_loopnzd_rel$1 , name___X64Encoder_loopnzd_rel$1
dq  __X64Encoder_loopd_rel$1 , name___X64Encoder_loopd_rel$1
dq  __X64Encoder_jecxz_rel$1 , name___X64Encoder_jecxz_rel$1
dq  __X64Encoder_jrcxz_rel$1 , name___X64Encoder_jrcxz_rel$1
dq  __X64Encoder_call_rel$1 , name___X64Encoder_call_rel$1
dq  __X64Encoder_call_r$1 , name___X64Encoder_call_r$1
dq  __X64Encoder_call_m$5 , name___X64Encoder_call_m$5
dq  __X64Encoder_ret$0 , name___X64Encoder_ret$0
dq  __X64Encoder_ret_imm$1 , name___X64Encoder_ret_imm$1
dq  __X64Encoder_retf$0 , name___X64Encoder_retf$0
dq  __X64Encoder_retf_imm$1 , name___X64Encoder_retf_imm$1
dq  __X64Encoder_mov_r_r$2 , name___X64Encoder_mov_r_r$2
dq  __X64Encoder_mov_r_m$5 , name___X64Encoder_mov_r_m$5
dq  __X64Encoder_mov_m_r$5 , name___X64Encoder_mov_m_r$5
dq  __X64Encoder_mov_r_imm$2 , name___X64Encoder_mov_r_imm$2
dq  __X64Encoder_mov_m_imm$6 , name___X64Encoder_mov_m_imm$6
dq  __X64Encoder_xchg_r_r$2 , name___X64Encoder_xchg_r_r$2
dq  __X64Encoder_cbw$0 , name___X64Encoder_cbw$0
dq  __X64Encoder_cwd$0 , name___X64Encoder_cwd$0
dq  __X64Encoder_int_imm$1 , name___X64Encoder_int_imm$1
dq  __X64Encoder_iret$0 , name___X64Encoder_iret$0
dq  __X64Encoder_clc$0 , name___X64Encoder_clc$0
dq  __X64Encoder_stc$0 , name___X64Encoder_stc$0
dq  __X64Encoder_cli$0 , name___X64Encoder_cli$0
dq  __X64Encoder_sti$0 , name___X64Encoder_sti$0
dq  __X64Encoder_cld$0 , name___X64Encoder_cld$0
dq  __X64Encoder_std$0 , name___X64Encoder_std$0
dq  __X64Encoder_lea_r_m$5 , name___X64Encoder_lea_r_m$5
dq  __X64Encoder_lock$0 , name___X64Encoder_lock$0
dq  __X64Encoder_connectTo$1 , name___X64Encoder_connectTo$1
dq  __X64Encoder_rol_r_cl$1 , name___X64Encoder_rol_r_cl$1
dq  __X64Encoder_ror_r_cl$1 , name___X64Encoder_ror_r_cl$1
dq  __X64Encoder_rcl_r_cl$1 , name___X64Encoder_rcl_r_cl$1
dq  __X64Encoder_rcr_r_cl$1 , name___X64Encoder_rcr_r_cl$1
dq  __X64Encoder_shl_r_cl$1 , name___X64Encoder_shl_r_cl$1
dq  __X64Encoder_sal_r_cl$1 , name___X64Encoder_sal_r_cl$1
dq  __X64Encoder_shr_r_cl$1 , name___X64Encoder_shr_r_cl$1
dq  __X64Encoder_sar_r_cl$1 , name___X64Encoder_sar_r_cl$1
dq  __X64Encoder_rol_m_imm$6 , name___X64Encoder_rol_m_imm$6
dq  __X64Encoder_ror_m_imm$6 , name___X64Encoder_ror_m_imm$6
dq  __X64Encoder_rcl_m_imm$6 , name___X64Encoder_rcl_m_imm$6
dq  __X64Encoder_rcr_m_imm$6 , name___X64Encoder_rcr_m_imm$6
dq  __X64Encoder_shl_m_imm$6 , name___X64Encoder_shl_m_imm$6
dq  __X64Encoder_sal_m_imm$6 , name___X64Encoder_sal_m_imm$6
dq  __X64Encoder_shr_m_imm$6 , name___X64Encoder_shr_m_imm$6
dq  __X64Encoder_sar_m_imm$6 , name___X64Encoder_sar_m_imm$6
dq  __X64Encoder_rol_m_cl$5 , name___X64Encoder_rol_m_cl$5
dq  __X64Encoder_ror_m_cl$5 , name___X64Encoder_ror_m_cl$5
dq  __X64Encoder_rcl_m_cl$5 , name___X64Encoder_rcl_m_cl$5
dq  __X64Encoder_rcr_m_cl$5 , name___X64Encoder_rcr_m_cl$5
dq  __X64Encoder_shl_m_cl$5 , name___X64Encoder_shl_m_cl$5
dq  __X64Encoder_sal_m_cl$5 , name___X64Encoder_sal_m_cl$5
dq  __X64Encoder_shr_m_cl$5 , name___X64Encoder_shr_m_cl$5
dq  __X64Encoder_sar_m_cl$5 , name___X64Encoder_sar_m_cl$5
dq  __X64Encoder_nop$0 , name___X64Encoder_nop$0
dq  __X64Encoder_nop_r$1 , name___X64Encoder_nop_r$1
dq  __X64Encoder_nop_m$5 , name___X64Encoder_nop_m$5
dq  __X64Encoder_cmc$0 , name___X64Encoder_cmc$0
dq  __X64Encoder_hlt$0 , name___X64Encoder_hlt$0
dq  __X64Encoder_wait$0 , name___X64Encoder_wait$0
dq  __X64Encoder_xlatb$0 , name___X64Encoder_xlatb$0
dq  __X64Encoder_enter_imm16_imm8$2 , name___X64Encoder_enter_imm16_imm8$2
dq  __X64Encoder_leave$0 , name___X64Encoder_leave$0
dq  __X64Encoder_push_imm8$1 , name___X64Encoder_push_imm8$1
dq  __X64Encoder_push_imm32$1 , name___X64Encoder_push_imm32$1
dq  __X64Encoder_rol_r_imm$2 , name___X64Encoder_rol_r_imm$2
dq  __X64Encoder_ror_r_imm$2 , name___X64Encoder_ror_r_imm$2
dq  __X64Encoder_rcl_r_imm$2 , name___X64Encoder_rcl_r_imm$2
dq  __X64Encoder_rcr_r_imm$2 , name___X64Encoder_rcr_r_imm$2
dq  __X64Encoder_shl_r_imm$2 , name___X64Encoder_shl_r_imm$2
dq  __X64Encoder_sal_r_imm$2 , name___X64Encoder_sal_r_imm$2
dq  __X64Encoder_shr_r_imm$2 , name___X64Encoder_shr_r_imm$2
dq  __X64Encoder_sar_r_imm$2 , name___X64Encoder_sar_r_imm$2
dq  __X64Encoder_emitCore286_r_r$3 , name___X64Encoder_emitCore286_r_r$3
dq  __X64Encoder_emitCore286_r_m$6 , name___X64Encoder_emitCore286_r_m$6
dq  __X64Encoder_emitCore_group0f_00_m$5 , name___X64Encoder_emitCore_group0f_00_m$5
dq  __X64Encoder_emitCore_group0f_00_r$2 , name___X64Encoder_emitCore_group0f_00_r$2
dq  __X64Encoder_emitCore_group0f_01_m$5 , name___X64Encoder_emitCore_group0f_01_m$5
dq  __X64Encoder_emitCore_group0f_01_r$2 , name___X64Encoder_emitCore_group0f_01_r$2
dq  __X64Encoder_sldt_m$4 , name___X64Encoder_sldt_m$4
dq  __X64Encoder_str_m$4 , name___X64Encoder_str_m$4
dq  __X64Encoder_lldt_m$4 , name___X64Encoder_lldt_m$4
dq  __X64Encoder_ltr_m$4 , name___X64Encoder_ltr_m$4
dq  __X64Encoder_verr_m$4 , name___X64Encoder_verr_m$4
dq  __X64Encoder_verw_m$4 , name___X64Encoder_verw_m$4
dq  __X64Encoder_sldt_r$1 , name___X64Encoder_sldt_r$1
dq  __X64Encoder_str_r$1 , name___X64Encoder_str_r$1
dq  __X64Encoder_lldt_r$1 , name___X64Encoder_lldt_r$1
dq  __X64Encoder_ltr_r$1 , name___X64Encoder_ltr_r$1
dq  __X64Encoder_verr_r$1 , name___X64Encoder_verr_r$1
dq  __X64Encoder_verw_r$1 , name___X64Encoder_verw_r$1
dq  __X64Encoder_sgdt_m$4 , name___X64Encoder_sgdt_m$4
dq  __X64Encoder_sidt_m$4 , name___X64Encoder_sidt_m$4
dq  __X64Encoder_lgdt_m$4 , name___X64Encoder_lgdt_m$4
dq  __X64Encoder_lidt_m$4 , name___X64Encoder_lidt_m$4
dq  __X64Encoder_smsw_m$4 , name___X64Encoder_smsw_m$4
dq  __X64Encoder_lmsw_m$4 , name___X64Encoder_lmsw_m$4
dq  __X64Encoder_smsw_r$1 , name___X64Encoder_smsw_r$1
dq  __X64Encoder_lmsw_r$1 , name___X64Encoder_lmsw_r$1
dq  __X64Encoder_lar_r_r$2 , name___X64Encoder_lar_r_r$2
dq  __X64Encoder_lar_r_m16$5 , name___X64Encoder_lar_r_m16$5
dq  __X64Encoder_lsl_r_r$2 , name___X64Encoder_lsl_r_r$2
dq  __X64Encoder_lsl_r_m$5 , name___X64Encoder_lsl_r_m$5
dq  __X64Encoder_clts$0 , name___X64Encoder_clts$0
dq  __X64Encoder_emitCore_bitTest_r_imm8$3 , name___X64Encoder_emitCore_bitTest_r_imm8$3
dq  __X64Encoder_emitCore_bitTest_m_imm8$7 , name___X64Encoder_emitCore_bitTest_m_imm8$7
dq  __X64Encoder_bsf_r_r$2 , name___X64Encoder_bsf_r_r$2
dq  __X64Encoder_bsf_r_m$5 , name___X64Encoder_bsf_r_m$5
dq  __X64Encoder_bsr_r_r$2 , name___X64Encoder_bsr_r_r$2
dq  __X64Encoder_bsr_r_m$5 , name___X64Encoder_bsr_r_m$5
dq  __X64Encoder_bt_r_r$2 , name___X64Encoder_bt_r_r$2
dq  __X64Encoder_btc_r_r$2 , name___X64Encoder_btc_r_r$2
dq  __X64Encoder_btr_r_r$2 , name___X64Encoder_btr_r_r$2
dq  __X64Encoder_bts_r_r$2 , name___X64Encoder_bts_r_r$2
dq  __X64Encoder_bt_m_r$5 , name___X64Encoder_bt_m_r$5
dq  __X64Encoder_btc_m_r$5 , name___X64Encoder_btc_m_r$5
dq  __X64Encoder_btr_m_r$5 , name___X64Encoder_btr_m_r$5
dq  __X64Encoder_bts_m_r$5 , name___X64Encoder_bts_m_r$5
dq  __X64Encoder_lfs_r_m$5 , name___X64Encoder_lfs_r_m$5
dq  __X64Encoder_lgs_r_m$5 , name___X64Encoder_lgs_r_m$5
dq  __X64Encoder_lss_r_m$5 , name___X64Encoder_lss_r_m$5
dq  __X64Encoder_seto_r8$1 , name___X64Encoder_seto_r8$1
dq  __X64Encoder_setno_r8$1 , name___X64Encoder_setno_r8$1
dq  __X64Encoder_setb_r8$1 , name___X64Encoder_setb_r8$1
dq  __X64Encoder_setae_r8$1 , name___X64Encoder_setae_r8$1
dq  __X64Encoder_sete_r8$1 , name___X64Encoder_sete_r8$1
dq  __X64Encoder_setne_r8$1 , name___X64Encoder_setne_r8$1
dq  __X64Encoder_setbe_r8$1 , name___X64Encoder_setbe_r8$1
dq  __X64Encoder_seta_r8$1 , name___X64Encoder_seta_r8$1
dq  __X64Encoder_sets_r8$1 , name___X64Encoder_sets_r8$1
dq  __X64Encoder_setns_r8$1 , name___X64Encoder_setns_r8$1
dq  __X64Encoder_setp_r8$1 , name___X64Encoder_setp_r8$1
dq  __X64Encoder_setnp_r8$1 , name___X64Encoder_setnp_r8$1
dq  __X64Encoder_setl_r8$1 , name___X64Encoder_setl_r8$1
dq  __X64Encoder_setge_r8$1 , name___X64Encoder_setge_r8$1
dq  __X64Encoder_setle_r8$1 , name___X64Encoder_setle_r8$1
dq  __X64Encoder_setg_r8$1 , name___X64Encoder_setg_r8$1
dq  __X64Encoder_seto_m8$4 , name___X64Encoder_seto_m8$4
dq  __X64Encoder_setno_m8$4 , name___X64Encoder_setno_m8$4
dq  __X64Encoder_setb_m8$4 , name___X64Encoder_setb_m8$4
dq  __X64Encoder_setae_m8$4 , name___X64Encoder_setae_m8$4
dq  __X64Encoder_sete_rm$4 , name___X64Encoder_sete_rm$4
dq  __X64Encoder_setne_m8$4 , name___X64Encoder_setne_m8$4
dq  __X64Encoder_setbe_m8$4 , name___X64Encoder_setbe_m8$4
dq  __X64Encoder_seta_m8$4 , name___X64Encoder_seta_m8$4
dq  __X64Encoder_sets_m8$4 , name___X64Encoder_sets_m8$4
dq  __X64Encoder_setns_m8$4 , name___X64Encoder_setns_m8$4
dq  __X64Encoder_setp_m8$4 , name___X64Encoder_setp_m8$4
dq  __X64Encoder_setnp_m8$4 , name___X64Encoder_setnp_m8$4
dq  __X64Encoder_setl_m8$4 , name___X64Encoder_setl_m8$4
dq  __X64Encoder_setge_m8$4 , name___X64Encoder_setge_m8$4
dq  __X64Encoder_setle_m8$4 , name___X64Encoder_setle_m8$4
dq  __X64Encoder_setg_m8$4 , name___X64Encoder_setg_m8$4
dq  __X64Encoder_cwde$0 , name___X64Encoder_cwde$0
dq  __X64Encoder_cdq$0 , name___X64Encoder_cdq$0
dq  __X64Encoder_iretd$0 , name___X64Encoder_iretd$0
dq  __X64Encoder_movsd$0 , name___X64Encoder_movsd$0
dq  __X64Encoder_cmpsd$0 , name___X64Encoder_cmpsd$0
dq  __X64Encoder_lodsd$0 , name___X64Encoder_lodsd$0
dq  __X64Encoder_stosd$0 , name___X64Encoder_stosd$0
dq  __X64Encoder_scasd$0 , name___X64Encoder_scasd$0
dq  __X64Encoder_insd$0 , name___X64Encoder_insd$0
dq  __X64Encoder_outsd$0 , name___X64Encoder_outsd$0
dq  __X64Encoder_emitCore_movExtend_r_r$3 , name___X64Encoder_emitCore_movExtend_r_r$3
dq  __X64Encoder_emitCore_movExtend_r_m$6 , name___X64Encoder_emitCore_movExtend_r_m$6
dq  __X64Encoder_movsx_r_r$2 , name___X64Encoder_movsx_r_r$2
dq  __X64Encoder_movsx_r_m8$5 , name___X64Encoder_movsx_r_m8$5
dq  __X64Encoder_movsx_r_m16$5 , name___X64Encoder_movsx_r_m16$5
dq  __X64Encoder_movzx_r_r$2 , name___X64Encoder_movzx_r_r$2
dq  __X64Encoder_movzx_r_m8$5 , name___X64Encoder_movzx_r_m8$5
dq  __X64Encoder_movzx_r_m16$5 , name___X64Encoder_movzx_r_m16$5
dq  __X64Encoder_bswap_r$1 , name___X64Encoder_bswap_r$1
dq  __X64Encoder_cmpxchg_r_r$2 , name___X64Encoder_cmpxchg_r_r$2
dq  __X64Encoder_cmpxchg_m_r$5 , name___X64Encoder_cmpxchg_m_r$5
dq  __X64Encoder_xadd_r_r$2 , name___X64Encoder_xadd_r_r$2
dq  __X64Encoder_xadd_m_r$5 , name___X64Encoder_xadd_m_r$5
dq  __X64Encoder_invlpg_m$4 , name___X64Encoder_invlpg_m$4
dq  __X64Encoder_invd$0 , name___X64Encoder_invd$0
dq  __X64Encoder_wbinvd$0 , name___X64Encoder_wbinvd$0
dq  __X64Encoder_cmpxchg8b_m$4 , name___X64Encoder_cmpxchg8b_m$4
dq  __X64Encoder_cpuid$0 , name___X64Encoder_cpuid$0
dq  __X64Encoder_rdmsr$0 , name___X64Encoder_rdmsr$0
dq  __X64Encoder_rdtsc$0 , name___X64Encoder_rdtsc$0
dq  __X64Encoder_wrmsr$0 , name___X64Encoder_wrmsr$0
dq  __X64Encoder_rsm$0 , name___X64Encoder_rsm$0
dq  __X64Encoder_cmovo_r_r$2 , name___X64Encoder_cmovo_r_r$2
dq  __X64Encoder_cmovno_r_r$2 , name___X64Encoder_cmovno_r_r$2
dq  __X64Encoder_cmovb_r_r$2 , name___X64Encoder_cmovb_r_r$2
dq  __X64Encoder_cmove_r_r$2 , name___X64Encoder_cmove_r_r$2
dq  __X64Encoder_cmovne_r_r$2 , name___X64Encoder_cmovne_r_r$2
dq  __X64Encoder_cmovbe_r_r$2 , name___X64Encoder_cmovbe_r_r$2
dq  __X64Encoder_cmova_r_r$2 , name___X64Encoder_cmova_r_r$2
dq  __X64Encoder_cmovs_r_r$2 , name___X64Encoder_cmovs_r_r$2
dq  __X64Encoder_cmovns_r_r$2 , name___X64Encoder_cmovns_r_r$2
dq  __X64Encoder_cmovp_r_r$2 , name___X64Encoder_cmovp_r_r$2
dq  __X64Encoder_cmovnp_r_r$2 , name___X64Encoder_cmovnp_r_r$2
dq  __X64Encoder_cmovl_r_r$2 , name___X64Encoder_cmovl_r_r$2
dq  __X64Encoder_cmovge_r_r$2 , name___X64Encoder_cmovge_r_r$2
dq  __X64Encoder_cmovg_r_r$2 , name___X64Encoder_cmovg_r_r$2
dq  __X64Encoder_cmovo_r_m$5 , name___X64Encoder_cmovo_r_m$5
dq  __X64Encoder_cmovno_r_m$5 , name___X64Encoder_cmovno_r_m$5
dq  __X64Encoder_cmovb_r_m$5 , name___X64Encoder_cmovb_r_m$5
dq  __X64Encoder_cmove_r_m$5 , name___X64Encoder_cmove_r_m$5
dq  __X64Encoder_cmovne_r_m$5 , name___X64Encoder_cmovne_r_m$5
dq  __X64Encoder_cmovbe_r_m$5 , name___X64Encoder_cmovbe_r_m$5
dq  __X64Encoder_cmova_r_m$5 , name___X64Encoder_cmova_r_m$5
dq  __X64Encoder_cmovs_r_m$5 , name___X64Encoder_cmovs_r_m$5
dq  __X64Encoder_cmovns_r_m$5 , name___X64Encoder_cmovns_r_m$5
dq  __X64Encoder_cmovp_r_m$5 , name___X64Encoder_cmovp_r_m$5
dq  __X64Encoder_cmovnp_r_m$5 , name___X64Encoder_cmovnp_r_m$5
dq  __X64Encoder_cmovl_r_m$5 , name___X64Encoder_cmovl_r_m$5
dq  __X64Encoder_cmovge_r_m$5 , name___X64Encoder_cmovge_r_m$5
dq  __X64Encoder_cmovg_r_m$5 , name___X64Encoder_cmovg_r_m$5
dq  __X64Encoder_ud2$0 , name___X64Encoder_ud2$0
dq  __X64Encoder_rdpmc$0 , name___X64Encoder_rdpmc$0
dq  __X64Encoder_syscall$0 , name___X64Encoder_syscall$0
dq  __X64Encoder_sysret$0 , name___X64Encoder_sysret$0
dq  __X64Encoder_sysenter$0 , name___X64Encoder_sysenter$0
dq  __X64Encoder_sysexit$0 , name___X64Encoder_sysexit$0
dq  __X64Encoder_movsxd_r64_r32$2 , name___X64Encoder_movsxd_r64_r32$2
dq  __X64Encoder_movsxd_r64_m32$5 , name___X64Encoder_movsxd_r64_m32$5
dq  __X64Encoder_cmpxchg16b_m$4 , name___X64Encoder_cmpxchg16b_m$4
dq  __X64Encoder_cdqe$0 , name___X64Encoder_cdqe$0
dq  __X64Encoder_cqo$0 , name___X64Encoder_cqo$0
dq  __X64Encoder_cmpsq$0 , name___X64Encoder_cmpsq$0
dq  __X64Encoder_stosq$0 , name___X64Encoder_stosq$0
dq  __X64Encoder_lodsq$0 , name___X64Encoder_lodsq$0
dq  __X64Encoder_scasq$0 , name___X64Encoder_scasq$0
dq  __X64Encoder_iretq$0 , name___X64Encoder_iretq$0
dq  __X64Encoder_popfq$0 , name___X64Encoder_popfq$0
dq  __X64Encoder_pushfq$0 , name___X64Encoder_pushfq$0
dq  __X64Encoder_rdtscp$0 , name___X64Encoder_rdtscp$0
dq  __X64Encoder_swapgs$0 , name___X64Encoder_swapgs$0
dq  __X64Encoder_emitFPU_sti$2 , name___X64Encoder_emitFPU_sti$2
dq  __X64Encoder_emitFPU_m$5 , name___X64Encoder_emitFPU_m$5
dq  __X64Encoder_emitFPU_st0_sti$2 , name___X64Encoder_emitFPU_st0_sti$2
dq  __X64Encoder_emitFPU_sti_st0$2 , name___X64Encoder_emitFPU_sti_st0$2
dq  __X64Encoder_emitFPU_m32real$5 , name___X64Encoder_emitFPU_m32real$5
dq  __X64Encoder_emitFPU_m64real$5 , name___X64Encoder_emitFPU_m64real$5
dq  __X64Encoder_fadd_st0_sti$1 , name___X64Encoder_fadd_st0_sti$1
dq  __X64Encoder_fmul_st0_sti$1 , name___X64Encoder_fmul_st0_sti$1
dq  __X64Encoder_fcom_st0_sti$1 , name___X64Encoder_fcom_st0_sti$1
dq  __X64Encoder_fcomp_st0_sti$1 , name___X64Encoder_fcomp_st0_sti$1
dq  __X64Encoder_fsub_st0_sti$1 , name___X64Encoder_fsub_st0_sti$1
dq  __X64Encoder_fsubr_st0_sti$1 , name___X64Encoder_fsubr_st0_sti$1
dq  __X64Encoder_fdiv_st0_sti$1 , name___X64Encoder_fdiv_st0_sti$1
dq  __X64Encoder_fdivr_st0_sti$1 , name___X64Encoder_fdivr_st0_sti$1
dq  __X64Encoder_fadd_sti_st0$1 , name___X64Encoder_fadd_sti_st0$1
dq  __X64Encoder_fmul_sti_st0$1 , name___X64Encoder_fmul_sti_st0$1
dq  __X64Encoder_fsub_sti_st0$1 , name___X64Encoder_fsub_sti_st0$1
dq  __X64Encoder_fsubr_sti_st0$1 , name___X64Encoder_fsubr_sti_st0$1
dq  __X64Encoder_fdiv_sti_st0$1 , name___X64Encoder_fdiv_sti_st0$1
dq  __X64Encoder_fdivr_sti_st0$1 , name___X64Encoder_fdivr_sti_st0$1
dq  __X64Encoder_fadd_m32$4 , name___X64Encoder_fadd_m32$4
dq  __X64Encoder_fmul_m32$4 , name___X64Encoder_fmul_m32$4
dq  __X64Encoder_fcom_m32$4 , name___X64Encoder_fcom_m32$4
dq  __X64Encoder_fcomp_m32$4 , name___X64Encoder_fcomp_m32$4
dq  __X64Encoder_fsub_m32$4 , name___X64Encoder_fsub_m32$4
dq  __X64Encoder_fsubr_m32$4 , name___X64Encoder_fsubr_m32$4
dq  __X64Encoder_fdiv_m32$4 , name___X64Encoder_fdiv_m32$4
dq  __X64Encoder_fdivr_m32$4 , name___X64Encoder_fdivr_m32$4
dq  __X64Encoder_fadd_m64$4 , name___X64Encoder_fadd_m64$4
dq  __X64Encoder_fmul_m64$4 , name___X64Encoder_fmul_m64$4
dq  __X64Encoder_fcom_m64$4 , name___X64Encoder_fcom_m64$4
dq  __X64Encoder_fcomp_m64$4 , name___X64Encoder_fcomp_m64$4
dq  __X64Encoder_fsub_m64$4 , name___X64Encoder_fsub_m64$4
dq  __X64Encoder_fsubr_m64$4 , name___X64Encoder_fsubr_m64$4
dq  __X64Encoder_fdiv_m64$4 , name___X64Encoder_fdiv_m64$4
dq  __X64Encoder_fdivr_m64$4 , name___X64Encoder_fdivr_m64$4
dq  __X64Encoder_faddp_sti_st0$1 , name___X64Encoder_faddp_sti_st0$1
dq  __X64Encoder_fdivp_sti_st0$1 , name___X64Encoder_fdivp_sti_st0$1
dq  __X64Encoder_fdivrp_sti_st0$1 , name___X64Encoder_fdivrp_sti_st0$1
dq  __X64Encoder_fmulp_sti_st0$1 , name___X64Encoder_fmulp_sti_st0$1
dq  __X64Encoder_fsubp_sti_st0$1 , name___X64Encoder_fsubp_sti_st0$1
dq  __X64Encoder_fsubrp_sti_st0$1 , name___X64Encoder_fsubrp_sti_st0$1
dq  __X64Encoder_fxch_sti$1 , name___X64Encoder_fxch_sti$1
dq  __X64Encoder_fcom$0 , name___X64Encoder_fcom$0
dq  __X64Encoder_fxch$0 , name___X64Encoder_fxch$0
dq  __X64Encoder_fild_m16$4 , name___X64Encoder_fild_m16$4
dq  __X64Encoder_fild_m32$4 , name___X64Encoder_fild_m32$4
dq  __X64Encoder_fild_m64$4 , name___X64Encoder_fild_m64$4
dq  __X64Encoder_fistp_m16$4 , name___X64Encoder_fistp_m16$4
dq  __X64Encoder_fistp_m32$4 , name___X64Encoder_fistp_m32$4
dq  __X64Encoder_fistp_m64$4 , name___X64Encoder_fistp_m64$4
dq  __X64Encoder_fiadd_m16$4 , name___X64Encoder_fiadd_m16$4
dq  __X64Encoder_fiadd_m32$4 , name___X64Encoder_fiadd_m32$4
dq  __X64Encoder_fimul_m16$4 , name___X64Encoder_fimul_m16$4
dq  __X64Encoder_fimul_m32$4 , name___X64Encoder_fimul_m32$4
dq  __X64Encoder_fidiv_m16$4 , name___X64Encoder_fidiv_m16$4
dq  __X64Encoder_fidiv_m32$4 , name___X64Encoder_fidiv_m32$4
dq  __X64Encoder_fidivr_m16$4 , name___X64Encoder_fidivr_m16$4
dq  __X64Encoder_fidivr_m32$4 , name___X64Encoder_fidivr_m32$4
dq  __X64Encoder_fisub_m16$4 , name___X64Encoder_fisub_m16$4
dq  __X64Encoder_fisub_m32$4 , name___X64Encoder_fisub_m32$4
dq  __X64Encoder_fisubr_m16$4 , name___X64Encoder_fisubr_m16$4
dq  __X64Encoder_fisubr_m32$4 , name___X64Encoder_fisubr_m32$4
dq  __X64Encoder_fist_m16$4 , name___X64Encoder_fist_m16$4
dq  __X64Encoder_fist_m32$4 , name___X64Encoder_fist_m32$4
dq  __X64Encoder_ficom_m16$4 , name___X64Encoder_ficom_m16$4
dq  __X64Encoder_ficom_m32$4 , name___X64Encoder_ficom_m32$4
dq  __X64Encoder_ficomp_m16$4 , name___X64Encoder_ficomp_m16$4
dq  __X64Encoder_ficomp_m32$4 , name___X64Encoder_ficomp_m32$4
dq  __X64Encoder_ffree_sti$1 , name___X64Encoder_ffree_sti$1
dq  __X64Encoder_fld_m32$4 , name___X64Encoder_fld_m32$4
dq  __X64Encoder_fld_m64$4 , name___X64Encoder_fld_m64$4
dq  __X64Encoder_fld_m80$4 , name___X64Encoder_fld_m80$4
dq  __X64Encoder_fld_sti$1 , name___X64Encoder_fld_sti$1
dq  __X64Encoder_fstp_m32$4 , name___X64Encoder_fstp_m32$4
dq  __X64Encoder_fstp_m64$4 , name___X64Encoder_fstp_m64$4
dq  __X64Encoder_fstp_m80$4 , name___X64Encoder_fstp_m80$4
dq  __X64Encoder_fstp_sti$1 , name___X64Encoder_fstp_sti$1
dq  __X64Encoder_fst_m32$4 , name___X64Encoder_fst_m32$4
dq  __X64Encoder_fst_m64$4 , name___X64Encoder_fst_m64$4
dq  __X64Encoder_fst_sti$1 , name___X64Encoder_fst_sti$1
dq  __X64Encoder_fnstsw_ax$0 , name___X64Encoder_fnstsw_ax$0
dq  __X64Encoder_fnstsw_m16$4 , name___X64Encoder_fnstsw_m16$4
dq  __X64Encoder_fstsw_ax$0 , name___X64Encoder_fstsw_ax$0
dq  __X64Encoder_fstsw_m16$4 , name___X64Encoder_fstsw_m16$4
dq  __X64Encoder_frstor_m$4 , name___X64Encoder_frstor_m$4
dq  __X64Encoder_fnsave_m$4 , name___X64Encoder_fnsave_m$4
dq  __X64Encoder_fsave_m$4 , name___X64Encoder_fsave_m$4
dq  __X64Encoder_fnstenv_m$4 , name___X64Encoder_fnstenv_m$4
dq  __X64Encoder_fnstenvw_m$4 , name___X64Encoder_fnstenvw_m$4
dq  __X64Encoder_fstenv_m$4 , name___X64Encoder_fstenv_m$4
dq  __X64Encoder_fnstcw_m$4 , name___X64Encoder_fnstcw_m$4
dq  __X64Encoder_fldcw_m$4 , name___X64Encoder_fldcw_m$4
dq  __X64Encoder_fstcw_m$4 , name___X64Encoder_fstcw_m$4
dq  __X64Encoder_fbld_m$4 , name___X64Encoder_fbld_m$4
dq  __X64Encoder_fbstp_m$4 , name___X64Encoder_fbstp_m$4
dq  __X64Encoder_fldenv_m$4 , name___X64Encoder_fldenv_m$4
dq  __X64Encoder_fldenvw_m$4 , name___X64Encoder_fldenvw_m$4
dq  __X64Encoder_fnsavew_m$4 , name___X64Encoder_fnsavew_m$4
dq  __X64Encoder_frstorw_m$4 , name___X64Encoder_frstorw_m$4
dq  __X64Encoder_fsavew_m$4 , name___X64Encoder_fsavew_m$4
dq  __X64Encoder_fstenvw_m$4 , name___X64Encoder_fstenvw_m$4
dq  __X64Encoder_f2xm1$0 , name___X64Encoder_f2xm1$0
dq  __X64Encoder_fabs$0 , name___X64Encoder_fabs$0
dq  __X64Encoder_fchs$0 , name___X64Encoder_fchs$0
dq  __X64Encoder_fclex$0 , name___X64Encoder_fclex$0
dq  __X64Encoder_fcompp$0 , name___X64Encoder_fcompp$0
dq  __X64Encoder_fdecstp$0 , name___X64Encoder_fdecstp$0
dq  __X64Encoder_fincstp$0 , name___X64Encoder_fincstp$0
dq  __X64Encoder_finit$0 , name___X64Encoder_finit$0
dq  __X64Encoder_fld1$0 , name___X64Encoder_fld1$0
dq  __X64Encoder_fldl2e$0 , name___X64Encoder_fldl2e$0
dq  __X64Encoder_fldl2t$0 , name___X64Encoder_fldl2t$0
dq  __X64Encoder_fldlg2$0 , name___X64Encoder_fldlg2$0
dq  __X64Encoder_fldln2$0 , name___X64Encoder_fldln2$0
dq  __X64Encoder_fldpi$0 , name___X64Encoder_fldpi$0
dq  __X64Encoder_fldz$0 , name___X64Encoder_fldz$0
dq  __X64Encoder_fnclex$0 , name___X64Encoder_fnclex$0
dq  __X64Encoder_fninit$0 , name___X64Encoder_fninit$0
dq  __X64Encoder_fnop$0 , name___X64Encoder_fnop$0
dq  __X64Encoder_fpatan$0 , name___X64Encoder_fpatan$0
dq  __X64Encoder_fprem$0 , name___X64Encoder_fprem$0
dq  __X64Encoder_fptan$0 , name___X64Encoder_fptan$0
dq  __X64Encoder_frndint$0 , name___X64Encoder_frndint$0
dq  __X64Encoder_fscale$0 , name___X64Encoder_fscale$0
dq  __X64Encoder_fsqrt$0 , name___X64Encoder_fsqrt$0
dq  __X64Encoder_ftst$0 , name___X64Encoder_ftst$0
dq  __X64Encoder_fwait$0 , name___X64Encoder_fwait$0
dq  __X64Encoder_fxam$0 , name___X64Encoder_fxam$0
dq  __X64Encoder_fxtract$0 , name___X64Encoder_fxtract$0
dq  __X64Encoder_fyl2x$0 , name___X64Encoder_fyl2x$0
dq  __X64Encoder_fyl2xp1$0 , name___X64Encoder_fyl2xp1$0
dq  __X64Encoder_fucom_sti$1 , name___X64Encoder_fucom_sti$1
dq  __X64Encoder_fucomp_sti$1 , name___X64Encoder_fucomp_sti$1
dq  __X64Encoder_fucom$0 , name___X64Encoder_fucom$0
dq  __X64Encoder_fucomp$0 , name___X64Encoder_fucomp$0
dq  __X64Encoder_fsin$0 , name___X64Encoder_fsin$0
dq  __X64Encoder_fcos$0 , name___X64Encoder_fcos$0
dq  __X64Encoder_fsincos$0 , name___X64Encoder_fsincos$0
dq  __X64Encoder_fprem1$0 , name___X64Encoder_fprem1$0
dq  __X64Encoder_fucompp$0 , name___X64Encoder_fucompp$0
dq  __X64Encoder_fcmovb_st0_sti$1 , name___X64Encoder_fcmovb_st0_sti$1
dq  __X64Encoder_fcmovbe_st0_sti$1 , name___X64Encoder_fcmovbe_st0_sti$1
dq  __X64Encoder_fcmove_st0_sti$1 , name___X64Encoder_fcmove_st0_sti$1
dq  __X64Encoder_fcmovnb_st0_sti$1 , name___X64Encoder_fcmovnb_st0_sti$1
dq  __X64Encoder_fcmovnbe_st0_sti$1 , name___X64Encoder_fcmovnbe_st0_sti$1
dq  __X64Encoder_fcmovne_st0_sti$1 , name___X64Encoder_fcmovne_st0_sti$1
dq  __X64Encoder_fcmovnu_st0_sti$1 , name___X64Encoder_fcmovnu_st0_sti$1
dq  __X64Encoder_fcmovu_st0_sti$1 , name___X64Encoder_fcmovu_st0_sti$1
dq  __X64Encoder_fcomi_st0_sti$1 , name___X64Encoder_fcomi_st0_sti$1
dq  __X64Encoder_fcomip_st0_sti$1 , name___X64Encoder_fcomip_st0_sti$1
dq  __X64Encoder_fucomi_st0_sti$1 , name___X64Encoder_fucomi_st0_sti$1
dq  __X64Encoder_fucomip_st0_sti$1 , name___X64Encoder_fucomip_st0_sti$1
dq  __X64Encoder_fxsave_m$4 , name___X64Encoder_fxsave_m$4
dq  __X64Encoder_fxrstor_m$4 , name___X64Encoder_fxrstor_m$4
dq  __X64Encoder_fisttp_m16$4 , name___X64Encoder_fisttp_m16$4
dq  __X64Encoder_fisttp_m32$4 , name___X64Encoder_fisttp_m32$4
dq  __X64Encoder_fisttp_m64$4 , name___X64Encoder_fisttp_m64$4
dq  __X64Encoder_movd_mm_r32$2 , name___X64Encoder_movd_mm_r32$2
dq  __X64Encoder_movd_mm_m32$5 , name___X64Encoder_movd_mm_m32$5
dq  __X64Encoder_movd_r32_mm$2 , name___X64Encoder_movd_r32_mm$2
dq  __X64Encoder_movd_m32_mm$5 , name___X64Encoder_movd_m32_mm$5
dq  __X64Encoder_movq_mm_mm$2 , name___X64Encoder_movq_mm_mm$2
dq  __X64Encoder_movq_mm_r64$2 , name___X64Encoder_movq_mm_r64$2
dq  __X64Encoder_movq_mm_m64$5 , name___X64Encoder_movq_mm_m64$5
dq  __X64Encoder_movq_r64_mm$2 , name___X64Encoder_movq_r64_mm$2
dq  __X64Encoder_movq_m64_mm$5 , name___X64Encoder_movq_m64_mm$5
dq  __X64Encoder_packssdw_mm_mm$2 , name___X64Encoder_packssdw_mm_mm$2
dq  __X64Encoder_packssdw_mm_m$5 , name___X64Encoder_packssdw_mm_m$5
dq  __X64Encoder_packsswb_mm_mm$2 , name___X64Encoder_packsswb_mm_mm$2
dq  __X64Encoder_packsswb_mm_m$5 , name___X64Encoder_packsswb_mm_m$5
dq  __X64Encoder_packuswb_mm_mm$2 , name___X64Encoder_packuswb_mm_mm$2
dq  __X64Encoder_packuswb_mm_m$5 , name___X64Encoder_packuswb_mm_m$5
dq  __X64Encoder_paddb_mm_mm$2 , name___X64Encoder_paddb_mm_mm$2
dq  __X64Encoder_paddb_mm_m$5 , name___X64Encoder_paddb_mm_m$5
dq  __X64Encoder_paddw_mm_mm$2 , name___X64Encoder_paddw_mm_mm$2
dq  __X64Encoder_paddw_mm_m$5 , name___X64Encoder_paddw_mm_m$5
dq  __X64Encoder_paddd_mm_mm$2 , name___X64Encoder_paddd_mm_mm$2
dq  __X64Encoder_paddd_mm_m$5 , name___X64Encoder_paddd_mm_m$5
dq  __X64Encoder_paddq_mm_mm$2 , name___X64Encoder_paddq_mm_mm$2
dq  __X64Encoder_paddq_mm_m$5 , name___X64Encoder_paddq_mm_m$5
dq  __X64Encoder_paddsb_mm_mm$2 , name___X64Encoder_paddsb_mm_mm$2
dq  __X64Encoder_paddsb_mm_m$5 , name___X64Encoder_paddsb_mm_m$5
dq  __X64Encoder_paddsw_mm_mm$2 , name___X64Encoder_paddsw_mm_mm$2
dq  __X64Encoder_paddsw_mm_m$5 , name___X64Encoder_paddsw_mm_m$5
dq  __X64Encoder_paddusb_mm_mm$2 , name___X64Encoder_paddusb_mm_mm$2
dq  __X64Encoder_paddusb_mm_m$5 , name___X64Encoder_paddusb_mm_m$5
dq  __X64Encoder_paddusw_mm_mm$2 , name___X64Encoder_paddusw_mm_mm$2
dq  __X64Encoder_paddusw_mm_m$5 , name___X64Encoder_paddusw_mm_m$5
dq  __X64Encoder_pmaddwd_mm_mm$2 , name___X64Encoder_pmaddwd_mm_mm$2
dq  __X64Encoder_pmaddwd_mm_m$5 , name___X64Encoder_pmaddwd_mm_m$5
dq  __X64Encoder_pand_mm_mm$2 , name___X64Encoder_pand_mm_mm$2
dq  __X64Encoder_pand_mm_m$5 , name___X64Encoder_pand_mm_m$5
dq  __X64Encoder_pandn_mm_mm$2 , name___X64Encoder_pandn_mm_mm$2
dq  __X64Encoder_pandn_mm_m$5 , name___X64Encoder_pandn_mm_m$5
dq  __X64Encoder_por_mm_mm$2 , name___X64Encoder_por_mm_mm$2
dq  __X64Encoder_por_mm_m$5 , name___X64Encoder_por_mm_m$5
dq  __X64Encoder_pxor_mm_mm$2 , name___X64Encoder_pxor_mm_mm$2
dq  __X64Encoder_pxor_mm_m$5 , name___X64Encoder_pxor_mm_m$5
dq  __X64Encoder_pcmpeqb_mm_mm$2 , name___X64Encoder_pcmpeqb_mm_mm$2
dq  __X64Encoder_pcmpeqb_mm_m$5 , name___X64Encoder_pcmpeqb_mm_m$5
dq  __X64Encoder_pcmpeqw_mm_mm$2 , name___X64Encoder_pcmpeqw_mm_mm$2
dq  __X64Encoder_pcmpeqw_mm_m$5 , name___X64Encoder_pcmpeqw_mm_m$5
dq  __X64Encoder_pcmpeqd_mm_mm$2 , name___X64Encoder_pcmpeqd_mm_mm$2
dq  __X64Encoder_pcmpeqd_mm_m$5 , name___X64Encoder_pcmpeqd_mm_m$5
dq  __X64Encoder_pcmpgtb_mm_mm$2 , name___X64Encoder_pcmpgtb_mm_mm$2
dq  __X64Encoder_pcmpgtb_mm_m$5 , name___X64Encoder_pcmpgtb_mm_m$5
dq  __X64Encoder_pcmpgtw_mm_mm$2 , name___X64Encoder_pcmpgtw_mm_mm$2
dq  __X64Encoder_pcmpgtw_mm_m$5 , name___X64Encoder_pcmpgtw_mm_m$5
dq  __X64Encoder_pcmpgtd_mm_mm$2 , name___X64Encoder_pcmpgtd_mm_mm$2
dq  __X64Encoder_pcmpgtd_mm_m$5 , name___X64Encoder_pcmpgtd_mm_m$5
dq  __X64Encoder_pmulhw_mm_mm$2 , name___X64Encoder_pmulhw_mm_mm$2
dq  __X64Encoder_pmulhw_mm_m$5 , name___X64Encoder_pmulhw_mm_m$5
dq  __X64Encoder_pmullw_mm_mm$2 , name___X64Encoder_pmullw_mm_mm$2
dq  __X64Encoder_pmullw_mm_m$5 , name___X64Encoder_pmullw_mm_m$5
dq  __X64Encoder_psubb_mm_mm$2 , name___X64Encoder_psubb_mm_mm$2
dq  __X64Encoder_psubb_mm_m$5 , name___X64Encoder_psubb_mm_m$5
dq  __X64Encoder_psubw_mm_mm$2 , name___X64Encoder_psubw_mm_mm$2
dq  __X64Encoder_psubw_mm_m$5 , name___X64Encoder_psubw_mm_m$5
dq  __X64Encoder_psubd_mm_mm$2 , name___X64Encoder_psubd_mm_mm$2
dq  __X64Encoder_psubd_mm_m$5 , name___X64Encoder_psubd_mm_m$5
dq  __X64Encoder_psubsb_mm_mm$2 , name___X64Encoder_psubsb_mm_mm$2
dq  __X64Encoder_psubsb_mm_m$5 , name___X64Encoder_psubsb_mm_m$5
dq  __X64Encoder_psubsw_mm_mm$2 , name___X64Encoder_psubsw_mm_mm$2
dq  __X64Encoder_psubsw_mm_m$5 , name___X64Encoder_psubsw_mm_m$5
dq  __X64Encoder_psubusb_mm_mm$2 , name___X64Encoder_psubusb_mm_mm$2
dq  __X64Encoder_psubusb_mm_m$5 , name___X64Encoder_psubusb_mm_m$5
dq  __X64Encoder_psubusw_mm_mm$2 , name___X64Encoder_psubusw_mm_mm$2
dq  __X64Encoder_psubusw_mm_m$5 , name___X64Encoder_psubusw_mm_m$5
dq  __X64Encoder_punpckhbw_mm_mm$2 , name___X64Encoder_punpckhbw_mm_mm$2
dq  __X64Encoder_punpckhbw_mm_m$5 , name___X64Encoder_punpckhbw_mm_m$5
dq  __X64Encoder_punpckhwd_mm_mm$2 , name___X64Encoder_punpckhwd_mm_mm$2
dq  __X64Encoder_punpckhwd_mm_m$5 , name___X64Encoder_punpckhwd_mm_m$5
dq  __X64Encoder_punpckhdq_mm_mm$2 , name___X64Encoder_punpckhdq_mm_mm$2
dq  __X64Encoder_punpckhdq_mm_m$5 , name___X64Encoder_punpckhdq_mm_m$5
dq  __X64Encoder_punpcklbw_mm_mm$2 , name___X64Encoder_punpcklbw_mm_mm$2
dq  __X64Encoder_punpcklwd_mm_mm$2 , name___X64Encoder_punpcklwd_mm_mm$2
dq  __X64Encoder_punpckldq_mm_mm$2 , name___X64Encoder_punpckldq_mm_mm$2
dq  __X64Encoder_psllw_mm_mm$2 , name___X64Encoder_psllw_mm_mm$2
dq  __X64Encoder_psllw_mm_m$5 , name___X64Encoder_psllw_mm_m$5
dq  __X64Encoder_psllw_mm_imm$2 , name___X64Encoder_psllw_mm_imm$2
dq  __X64Encoder_pslld_mm_mm$2 , name___X64Encoder_pslld_mm_mm$2
dq  __X64Encoder_pslld_mm_m$5 , name___X64Encoder_pslld_mm_m$5
dq  __X64Encoder_pslld_mm_imm$2 , name___X64Encoder_pslld_mm_imm$2
dq  __X64Encoder_psllq_mm_mm$2 , name___X64Encoder_psllq_mm_mm$2
dq  __X64Encoder_psllq_mm_m$5 , name___X64Encoder_psllq_mm_m$5
dq  __X64Encoder_psllq_mm_imm$2 , name___X64Encoder_psllq_mm_imm$2
dq  __X64Encoder_psrad_mm_mm$2 , name___X64Encoder_psrad_mm_mm$2
dq  __X64Encoder_psrad_mm_m$5 , name___X64Encoder_psrad_mm_m$5
dq  __X64Encoder_psrad_mm_imm$2 , name___X64Encoder_psrad_mm_imm$2
dq  __X64Encoder_psraw_mm_mm$2 , name___X64Encoder_psraw_mm_mm$2
dq  __X64Encoder_psraw_mm_m$5 , name___X64Encoder_psraw_mm_m$5
dq  __X64Encoder_psraw_mm_imm$2 , name___X64Encoder_psraw_mm_imm$2
dq  __X64Encoder_psrlw_mm_mm$2 , name___X64Encoder_psrlw_mm_mm$2
dq  __X64Encoder_psrlw_mm_m$5 , name___X64Encoder_psrlw_mm_m$5
dq  __X64Encoder_psrlw_mm_imm$2 , name___X64Encoder_psrlw_mm_imm$2
dq  __X64Encoder_psrld_mm_mm$2 , name___X64Encoder_psrld_mm_mm$2
dq  __X64Encoder_psrld_mm_m$5 , name___X64Encoder_psrld_mm_m$5
dq  __X64Encoder_psrld_mm_imm$2 , name___X64Encoder_psrld_mm_imm$2
dq  __X64Encoder_psrlq_mm_mm$2 , name___X64Encoder_psrlq_mm_mm$2
dq  __X64Encoder_psrlq_mm_m$5 , name___X64Encoder_psrlq_mm_m$5
dq  __X64Encoder_psrlq_mm_imm$2 , name___X64Encoder_psrlq_mm_imm$2
dq  __X64Encoder_emms$0 , name___X64Encoder_emms$0
dq  __X64Encoder_pshufw_mm_mm_imm8$3 , name___X64Encoder_pshufw_mm_mm_imm8$3
dq  __X64Encoder_pshufw_mm_m64_imm8$6 , name___X64Encoder_pshufw_mm_m64_imm8$6
dq  __X64Encoder_pinsrw_mm_r32_imm8$3 , name___X64Encoder_pinsrw_mm_r32_imm8$3
dq  __X64Encoder_pinsrw_mm_m16_imm8$6 , name___X64Encoder_pinsrw_mm_m16_imm8$6
dq  __X64Encoder_pextrw_r64_mm_imm8$3 , name___X64Encoder_pextrw_r64_mm_imm8$3
dq  __X64Encoder_pmovmskb_r_mm$2 , name___X64Encoder_pmovmskb_r_mm$2
dq  __X64Encoder_pminub_mm_mm$2 , name___X64Encoder_pminub_mm_mm$2
dq  __X64Encoder_pminub_mm_m$5 , name___X64Encoder_pminub_mm_m$5
dq  __X64Encoder_pmaxub_mm_mm$2 , name___X64Encoder_pmaxub_mm_mm$2
dq  __X64Encoder_pmaxub_mm_m$5 , name___X64Encoder_pmaxub_mm_m$5
dq  __X64Encoder_pavgb_mm_mm$2 , name___X64Encoder_pavgb_mm_mm$2
dq  __X64Encoder_pavgb_mm_m$5 , name___X64Encoder_pavgb_mm_m$5
dq  __X64Encoder_pavgw_mm_mm$2 , name___X64Encoder_pavgw_mm_mm$2
dq  __X64Encoder_pavgw_mm_m$5 , name___X64Encoder_pavgw_mm_m$5
dq  __X64Encoder_pmulhuw_mm_mm$2 , name___X64Encoder_pmulhuw_mm_mm$2
dq  __X64Encoder_pmulhuw_mm_m$5 , name___X64Encoder_pmulhuw_mm_m$5
dq  __X64Encoder_pminsw_mm_mm$2 , name___X64Encoder_pminsw_mm_mm$2
dq  __X64Encoder_pminsw_mm_m$5 , name___X64Encoder_pminsw_mm_m$5
dq  __X64Encoder_pmaxsw_mm_mm$2 , name___X64Encoder_pmaxsw_mm_mm$2
dq  __X64Encoder_pmaxsw_mm_m$5 , name___X64Encoder_pmaxsw_mm_m$5
dq  __X64Encoder_psadbw_mm_mm$2 , name___X64Encoder_psadbw_mm_mm$2
dq  __X64Encoder_psadbw_mm_m$5 , name___X64Encoder_psadbw_mm_m$5
dq  __X64Encoder_psubq_mm_mm$2 , name___X64Encoder_psubq_mm_mm$2
dq  __X64Encoder_psubq_mm_m$5 , name___X64Encoder_psubq_mm_m$5
dq  __X64Encoder_pmuludq_mm_mm$2 , name___X64Encoder_pmuludq_mm_mm$2
dq  __X64Encoder_pmuludq_mm_m$5 , name___X64Encoder_pmuludq_mm_m$5
dq  __X64Encoder_psignb_mm_mm$2 , name___X64Encoder_psignb_mm_mm$2
dq  __X64Encoder_psignb_mm_m$5 , name___X64Encoder_psignb_mm_m$5
dq  __X64Encoder_psignw_mm_mm$2 , name___X64Encoder_psignw_mm_mm$2
dq  __X64Encoder_psignw_mm_m$5 , name___X64Encoder_psignw_mm_m$5
dq  __X64Encoder_psignd_mm_mm$2 , name___X64Encoder_psignd_mm_mm$2
dq  __X64Encoder_psignd_mm_m$5 , name___X64Encoder_psignd_mm_m$5
dq  __X64Encoder_pshufb_mm_mm$2 , name___X64Encoder_pshufb_mm_mm$2
dq  __X64Encoder_pshufb_mm_m$5 , name___X64Encoder_pshufb_mm_m$5
dq  __X64Encoder_pmulhrsw_mm_mm$2 , name___X64Encoder_pmulhrsw_mm_mm$2
dq  __X64Encoder_pmulhrsw_mm_m$5 , name___X64Encoder_pmulhrsw_mm_m$5
dq  __X64Encoder_pmaddubsw_mm_mm$2 , name___X64Encoder_pmaddubsw_mm_mm$2
dq  __X64Encoder_pmaddubsw_mm_m$5 , name___X64Encoder_pmaddubsw_mm_m$5
dq  __X64Encoder_phsubw_mm_mm$2 , name___X64Encoder_phsubw_mm_mm$2
dq  __X64Encoder_phsubw_mm_m$5 , name___X64Encoder_phsubw_mm_m$5
dq  __X64Encoder_phsubsw_mm_mm$2 , name___X64Encoder_phsubsw_mm_mm$2
dq  __X64Encoder_phsubsw_mm_m$5 , name___X64Encoder_phsubsw_mm_m$5
dq  __X64Encoder_phsubd_mm_mm$2 , name___X64Encoder_phsubd_mm_mm$2
dq  __X64Encoder_phsubd_mm_m$5 , name___X64Encoder_phsubd_mm_m$5
dq  __X64Encoder_phaddsw_mm_mm$2 , name___X64Encoder_phaddsw_mm_mm$2
dq  __X64Encoder_phaddsw_mm_m$5 , name___X64Encoder_phaddsw_mm_m$5
dq  __X64Encoder_phaddw_mm_mm$2 , name___X64Encoder_phaddw_mm_mm$2
dq  __X64Encoder_phaddw_mm_m$5 , name___X64Encoder_phaddw_mm_m$5
dq  __X64Encoder_phaddd_mm_mm$2 , name___X64Encoder_phaddd_mm_mm$2
dq  __X64Encoder_phaddd_mm_m$5 , name___X64Encoder_phaddd_mm_m$5
dq  __X64Encoder_pabsb_mm_mm$2 , name___X64Encoder_pabsb_mm_mm$2
dq  __X64Encoder_pabsb_mm_m$5 , name___X64Encoder_pabsb_mm_m$5
dq  __X64Encoder_pabsw_mm_mm$2 , name___X64Encoder_pabsw_mm_mm$2
dq  __X64Encoder_pabsw_mm_m$5 , name___X64Encoder_pabsw_mm_m$5
dq  __X64Encoder_pabsd_mm_mm$2 , name___X64Encoder_pabsd_mm_mm$2
dq  __X64Encoder_pabsd_mm_m$5 , name___X64Encoder_pabsd_mm_m$5
dq  __X64Encoder_palignr_mm_mm_imm8$3 , name___X64Encoder_palignr_mm_mm_imm8$3
dq  __X64Encoder_palignr_mm_m64_imm8$6 , name___X64Encoder_palignr_mm_m64_imm8$6
dq  __X64Encoder_getCurrentPosition$0 , name___X64Encoder_getCurrentPosition$0
dq  __PEWriter_constructor$0 , name___PEWriter_constructor$0
dq  __PEWriter_emitByte$1 , name___PEWriter_emitByte$1
dq  __PEWriter_emitWord$1 , name___PEWriter_emitWord$1
dq  __PEWriter_emitDword$1 , name___PEWriter_emitDword$1
dq  __PEWriter_emitQword$1 , name___PEWriter_emitQword$1
dq  __PEWriter__emit_HeaderDOS$0 , name___PEWriter__emit_HeaderDOS$0
dq  __PEWriter__emit_HeaderPE$0 , name___PEWriter__emit_HeaderPE$0
dq  __PEWriter__emit_HeaderOptional$0 , name___PEWriter__emit_HeaderOptional$0
dq  __PEWriter__emit_HeaderSections$0 , name___PEWriter__emit_HeaderSections$0
dq  __PEWriter_create$1 , name___PEWriter_create$1
dq  __PEWriter_close$0 , name___PEWriter_close$0
dq  __Buffer_constructor$0 , name___Buffer_constructor$0
dq  __Buffer_clear$0 , name___Buffer_clear$0
dq  __Buffer_emitByte$1 , name___Buffer_emitByte$1
dq  __Buffer_emitWord$1 , name___Buffer_emitWord$1
dq  __Buffer_emitDword$1 , name___Buffer_emitDword$1
dq  __Buffer_emitQword$1 , name___Buffer_emitQword$1
dq  __Buffer_copyBytes$3 , name___Buffer_copyBytes$3
dq  __Buffer_getSize$0 , name___Buffer_getSize$0
dq  __Buffer_getCurrentPosition$0 , name___Buffer_getCurrentPosition$0
dq  __Buffer_setCurrentPosition$2 , name___Buffer_setCurrentPosition$2
dq  __X64Compiler_constructor$0 , name___X64Compiler_constructor$0
dq  __X64Compiler_compileToFile$2 , name___X64Compiler_compileToFile$2
dq  __X64Compiler_compile$2 , name___X64Compiler_compile$2
dq  __X64Tester_constructor$0 , name___X64Tester_constructor$0
dq  __X64Tester_compare$2 , name___X64Tester_compare$2
dq  __X64Tester_emitByte$1 , name___X64Tester_emitByte$1
dq  __X64Tester_emitWord$1 , name___X64Tester_emitWord$1
dq  __X64Tester_emitDword$1 , name___X64Tester_emitDword$1
dq  __X64Tester_emitQword$1 , name___X64Tester_emitQword$1
dq  __X64Tester_compileSourceFile$2 , name___X64Tester_compileSourceFile$2
dq  start , name_start
dq endOfCodeSection, name_endOfCodeSection
SymbolTableEnd:
dq 0, 0

SymbolTableNames:
include 'x64\SymbolTableCommonNames.asm'
name_X64_ParseRegisterName db 'X64_ParseRegisterName', 0
name_X64_IsReg8 db 'X64_IsReg8', 0
name_X64_IsReg16 db 'X64_IsReg16', 0
name_X64_IsReg32 db 'X64_IsReg32', 0
name_X64_IsReg64 db 'X64_IsReg64', 0
name_X64_IsRegSTI db 'X64_IsRegSTI', 0
name_X64_IsRegMM db 'X64_IsRegMM', 0
name___AbstractDescentParser_constructor$0 db '__AbstractDescentParser_constructor$0', 0
name___AbstractDescentParser__error$1 db '__AbstractDescentParser__error$1', 0
name___AbstractDescentParser__eatChar$0 db '__AbstractDescentParser__eatChar$0', 0
name___AbstractDescentParser__getChar$0 db '__AbstractDescentParser__getChar$0', 0
name___AbstractDescentParser__skipWhites$0 db '__AbstractDescentParser__skipWhites$0', 0
name___AbstractDescentParser__isLetter$1 db '__AbstractDescentParser__isLetter$1', 0
name___AbstractDescentParser__isEndOfLine$1 db '__AbstractDescentParser__isEndOfLine$1', 0
name___AbstractDescentParser__isDigit$1 db '__AbstractDescentParser__isDigit$1', 0
name___AbstractDescentParser__isLetterOrDigit$1 db '__AbstractDescentParser__isLetterOrDigit$1', 0
name___AbstractDescentParser__matchChar$1 db '__AbstractDescentParser__matchChar$1', 0
name___AbstractDescentParser__matchLetter$0 db '__AbstractDescentParser__matchLetter$0', 0
name___AbstractDescentParser__matchLetterOrDigit$0 db '__AbstractDescentParser__matchLetterOrDigit$0', 0
name___AbstractDescentParser__emitOneItem$1 db '__AbstractDescentParser__emitOneItem$1', 0
name___AbstractDescentParser__parseSource$0 db '__AbstractDescentParser__parseSource$0', 0
name___AbstractDescentParser_parseFile$1 db '__AbstractDescentParser_parseFile$1', 0
name___AbstractDescentParser_connectTo$1 db '__AbstractDescentParser_connectTo$1', 0
name_hex db 'hex', 0
name___X64Parser_constructor$0 db '__X64Parser_constructor$0', 0
name___X64Parser_reset$0 db '__X64Parser_reset$0', 0
name___X64Parser__emitLabel$1 db '__X64Parser__emitLabel$1', 0
name___X64Parser__getToken$0 db '__X64Parser__getToken$0', 0
name___X64Parser__matchMemory$1 db '__X64Parser__matchMemory$1', 0
name___X64Parser__setImmediate$2 db '__X64Parser__setImmediate$2', 0
name___X64Parser__matchOperand$1 db '__X64Parser__matchOperand$1', 0
name___X64Parser__matchEndOfLine$0 db '__X64Parser__matchEndOfLine$0', 0
name___X64Parser__parseFirstOperand$1 db '__X64Parser__parseFirstOperand$1', 0
name___X64Parser__parseSecondOperand$1 db '__X64Parser__parseSecondOperand$1', 0
name___X64Parser__matchCodeLine$1 db '__X64Parser__matchCodeLine$1', 0
name___X64Parser__skipComment$0 db '__X64Parser__skipComment$0', 0
name___X64Parser__matchNumber$0 db '__X64Parser__matchNumber$0', 0
name___X64Parser__matchData$1 db '__X64Parser__matchData$1', 0
name___X64Parser_parseOneLine$0 db '__X64Parser_parseOneLine$0', 0
name___X64Parser__parseSource$0 db '__X64Parser__parseSource$0', 0
name___X64Parser_getArrayOfLabelsAndRefs$0 db '__X64Parser_getArrayOfLabelsAndRefs$0', 0
name___PipeAbstract_constructor$0 db '__PipeAbstract_constructor$0', 0
name___PipeAbstract__emitOneItem$1 db '__PipeAbstract__emitOneItem$1', 0
name___PipeAbstract__replaceLastItem$1 db '__PipeAbstract__replaceLastItem$1', 0
name___PipeAbstract_connectTo$1 db '__PipeAbstract_connectTo$1', 0
name___PipeAbstract_processOneItem$1 db '__PipeAbstract_processOneItem$1', 0
name___PipeAbstract_processArrayOfItems$1 db '__PipeAbstract_processArrayOfItems$1', 0
name___PipeAbstract_flush$0 db '__PipeAbstract_flush$0', 0
name___X64Translator_emitCore_x_y$2 db '__X64Translator_emitCore_x_y$2', 0
name___X64Translator_emitCoreALU2$2 db '__X64Translator_emitCoreALU2$2', 0
name___X64Translator__error$1 db '__X64Translator__error$1', 0
name___X64Translator__validateNumberOfOperands$2 db '__X64Translator__validateNumberOfOperands$2', 0
name___X64Translator__validateOperandSizes$4 db '__X64Translator__validateOperandSizes$4', 0
name___X64Translator__validateImmRange$4 db '__X64Translator__validateImmRange$4', 0
name___X64Translator__failIf8BitOperandIsUsed$1 db '__X64Translator__failIf8BitOperandIsUsed$1', 0
name___X64Translator__failIfNon8BitOperandIsUsed$1 db '__X64Translator__failIfNon8BitOperandIsUsed$1', 0
name___X64Translator__failIfNon16BitOperandIsUsed$1 db '__X64Translator__failIfNon16BitOperandIsUsed$1', 0
name___X64Translator__failIfMemoryWrite$1 db '__X64Translator__failIfMemoryWrite$1', 0
name___X64Translator__failIfMemoryRead$1 db '__X64Translator__failIfMemoryRead$1', 0
name___X64Translator__failIfImmIsUsed$1 db '__X64Translator__failIfImmIsUsed$1', 0
name___X64Translator__failIfMemoryReadOrWrite$1 db '__X64Translator__failIfMemoryReadOrWrite$1', 0
name___X64Translator__failIfRegsAreUsed$1 db '__X64Translator__failIfRegsAreUsed$1', 0
name___X64Translator__failIfImmIsMissing$1 db '__X64Translator__failIfImmIsMissing$1', 0
name___X64Translator__failIfOutOfRange$3 db '__X64Translator__failIfOutOfRange$3', 0
name___X64Translator__failIfNonMMReg$2 db '__X64Translator__failIfNonMMReg$2', 0
name___X64Translator__failIfNon64Data$1 db '__X64Translator__failIfNon64Data$1', 0
name___X64Translator__errorBadSyntax$1 db '__X64Translator__errorBadSyntax$1', 0
name___X64Translator__errorUnrecognizedInstruction$1 db '__X64Translator__errorUnrecognizedInstruction$1', 0
name___X64Translator__errorGenericFPU$1 db '__X64Translator__errorGenericFPU$1', 0
name___X64Translator__emitVariableLengthOpcode$1 db '__X64Translator__emitVariableLengthOpcode$1', 0
name___X64Translator__processFPU$1 db '__X64Translator__processFPU$1', 0
name___X64Translator_processOneItem$1 db '__X64Translator_processOneItem$1', 0
name___X64Translator_getCurrentPosition$0 db '__X64Translator_getCurrentPosition$0', 0
name___X64Encoder_constructor$0 db '__X64Encoder_constructor$0', 0
name___X64Encoder_emitByte$1 db '__X64Encoder_emitByte$1', 0
name___X64Encoder_emitWord$1 db '__X64Encoder_emitWord$1', 0
name___X64Encoder_emitDword$1 db '__X64Encoder_emitDword$1', 0
name___X64Encoder_emitQword$1 db '__X64Encoder_emitQword$1', 0
name___X64Encoder_emitModRegRM$3 db '__X64Encoder_emitModRegRM$3', 0
name___X64Encoder_emitPrimaryOpcode$3 db '__X64Encoder_emitPrimaryOpcode$3', 0
name___X64Encoder_emitPrefix16$0 db '__X64Encoder_emitPrefix16$0', 0
name___X64Encoder_emitPrefix64$0 db '__X64Encoder_emitPrefix64$0', 0
name___X64Encoder_emitSizePrefixIfNeeded$1 db '__X64Encoder_emitSizePrefixIfNeeded$1', 0
name___X64Encoder_emitCore$4 db '__X64Encoder_emitCore$4', 0
name___X64Encoder_emitCore_r_r$3 db '__X64Encoder_emitCore_r_r$3', 0
name___X64Encoder_emitCore_m_r$6 db '__X64Encoder_emitCore_m_r$6', 0
name___X64Encoder_emitCore_r_m$6 db '__X64Encoder_emitCore_r_m$6', 0
name___X64Encoder_emitCore_r$2 db '__X64Encoder_emitCore_r$2', 0
name___X64Encoder_emitCore_m$5 db '__X64Encoder_emitCore_m$5', 0
name___X64Encoder_emitCore_r_imm$3 db '__X64Encoder_emitCore_r_imm$3', 0
name___X64Encoder_emitCore_m_imm$7 db '__X64Encoder_emitCore_m_imm$7', 0
name___X64Encoder_emitCore_group_r$3 db '__X64Encoder_emitCore_group_r$3', 0
name___X64Encoder_emitCore_group_m$6 db '__X64Encoder_emitCore_group_m$6', 0
name___X64Encoder_emitCore_unaryGroup_r$2 db '__X64Encoder_emitCore_unaryGroup_r$2', 0
name___X64Encoder_emitCore_unaryGroup_m$6 db '__X64Encoder_emitCore_unaryGroup_m$6', 0
name___X64Encoder_emitCore_shiftGroup_r_imm8$3 db '__X64Encoder_emitCore_shiftGroup_r_imm8$3', 0
name___X64Encoder_emitCore_shiftGroup_r_cl$2 db '__X64Encoder_emitCore_shiftGroup_r_cl$2', 0
name___X64Encoder_emitCore_shiftGroup_m_imm8$7 db '__X64Encoder_emitCore_shiftGroup_m_imm8$7', 0
name___X64Encoder_emitCore_shiftGroup_m_cl$6 db '__X64Encoder_emitCore_shiftGroup_m_cl$6', 0
name___X64Encoder_add_r_r$2 db '__X64Encoder_add_r_r$2', 0
name___X64Encoder_or_r_r$2 db '__X64Encoder_or_r_r$2', 0
name___X64Encoder_adc_r_r$2 db '__X64Encoder_adc_r_r$2', 0
name___X64Encoder_sbb_r_r$2 db '__X64Encoder_sbb_r_r$2', 0
name___X64Encoder_and_r_r$2 db '__X64Encoder_and_r_r$2', 0
name___X64Encoder_sub_r_r$2 db '__X64Encoder_sub_r_r$2', 0
name___X64Encoder_xor_r_r$2 db '__X64Encoder_xor_r_r$2', 0
name___X64Encoder_cmp_r_r$2 db '__X64Encoder_cmp_r_r$2', 0
name___X64Encoder_add_r_imm$2 db '__X64Encoder_add_r_imm$2', 0
name___X64Encoder_or_r_imm$2 db '__X64Encoder_or_r_imm$2', 0
name___X64Encoder_adc_r_imm$2 db '__X64Encoder_adc_r_imm$2', 0
name___X64Encoder_sbb_r_imm$2 db '__X64Encoder_sbb_r_imm$2', 0
name___X64Encoder_and_r_imm$2 db '__X64Encoder_and_r_imm$2', 0
name___X64Encoder_sub_r_imm$2 db '__X64Encoder_sub_r_imm$2', 0
name___X64Encoder_xor_r_imm$2 db '__X64Encoder_xor_r_imm$2', 0
name___X64Encoder_cmp_r_imm$2 db '__X64Encoder_cmp_r_imm$2', 0
name___X64Encoder_add_r_m$5 db '__X64Encoder_add_r_m$5', 0
name___X64Encoder_or_r_m$5 db '__X64Encoder_or_r_m$5', 0
name___X64Encoder_adc_r_m$5 db '__X64Encoder_adc_r_m$5', 0
name___X64Encoder_sbb_r_m$5 db '__X64Encoder_sbb_r_m$5', 0
name___X64Encoder_and_r_m$5 db '__X64Encoder_and_r_m$5', 0
name___X64Encoder_sub_r_m$5 db '__X64Encoder_sub_r_m$5', 0
name___X64Encoder_xor_r_m$5 db '__X64Encoder_xor_r_m$5', 0
name___X64Encoder_cmp_r_m$5 db '__X64Encoder_cmp_r_m$5', 0
name___X64Encoder_add_m_r$5 db '__X64Encoder_add_m_r$5', 0
name___X64Encoder_or_m_r$5 db '__X64Encoder_or_m_r$5', 0
name___X64Encoder_adc_m_r$5 db '__X64Encoder_adc_m_r$5', 0
name___X64Encoder_sbb_m_r$5 db '__X64Encoder_sbb_m_r$5', 0
name___X64Encoder_and_m_r$5 db '__X64Encoder_and_m_r$5', 0
name___X64Encoder_sub_m_r$5 db '__X64Encoder_sub_m_r$5', 0
name___X64Encoder_xor_m_r$5 db '__X64Encoder_xor_m_r$5', 0
name___X64Encoder_cmp_m_r$5 db '__X64Encoder_cmp_m_r$5', 0
name___X64Encoder_emitCore_incDec_m$6 db '__X64Encoder_emitCore_incDec_m$6', 0
name___X64Encoder_inc_r$1 db '__X64Encoder_inc_r$1', 0
name___X64Encoder_inc_m$5 db '__X64Encoder_inc_m$5', 0
name___X64Encoder_dec_r$1 db '__X64Encoder_dec_r$1', 0
name___X64Encoder_dec_m$5 db '__X64Encoder_dec_m$5', 0
name___X64Encoder_test_r_r$2 db '__X64Encoder_test_r_r$2', 0
name___X64Encoder_test_m_r$5 db '__X64Encoder_test_m_r$5', 0
name___X64Encoder_test_m_imm$6 db '__X64Encoder_test_m_imm$6', 0
name___X64Encoder_test_r_imm$2 db '__X64Encoder_test_r_imm$2', 0
name___X64Encoder_not_r$1 db '__X64Encoder_not_r$1', 0
name___X64Encoder_neg_r$1 db '__X64Encoder_neg_r$1', 0
name___X64Encoder_mul_r$1 db '__X64Encoder_mul_r$1', 0
name___X64Encoder_imul_r$1 db '__X64Encoder_imul_r$1', 0
name___X64Encoder_div_r$1 db '__X64Encoder_div_r$1', 0
name___X64Encoder_idiv_r$1 db '__X64Encoder_idiv_r$1', 0
name___X64Encoder_not_m$5 db '__X64Encoder_not_m$5', 0
name___X64Encoder_neg_m$5 db '__X64Encoder_neg_m$5', 0
name___X64Encoder_mul_m$5 db '__X64Encoder_mul_m$5', 0
name___X64Encoder_imul_m$5 db '__X64Encoder_imul_m$5', 0
name___X64Encoder_div_m$5 db '__X64Encoder_div_m$5', 0
name___X64Encoder_idiv_m$5 db '__X64Encoder_idiv_m$5', 0
name___X64Encoder_emitCore_pushPop_r$2 db '__X64Encoder_emitCore_pushPop_r$2', 0
name___X64Encoder_push_r$1 db '__X64Encoder_push_r$1', 0
name___X64Encoder_pop_r$1 db '__X64Encoder_pop_r$1', 0
name___X64Encoder_pop_m$5 db '__X64Encoder_pop_m$5', 0
name___X64Encoder_push_m$5 db '__X64Encoder_push_m$5', 0
name___X64Encoder_pushf$0 db '__X64Encoder_pushf$0', 0
name___X64Encoder_popf$0 db '__X64Encoder_popf$0', 0
name___X64Encoder_emitCore_inOut$3 db '__X64Encoder_emitCore_inOut$3', 0
name___X64Encoder_in_r_imm$2 db '__X64Encoder_in_r_imm$2', 0
name___X64Encoder_out_imm_r$2 db '__X64Encoder_out_imm_r$2', 0
name___X64Encoder_in_r_dx$1 db '__X64Encoder_in_r_dx$1', 0
name___X64Encoder_out_dx_r$1 db '__X64Encoder_out_dx_r$1', 0
name___X64Encoder_insb$0 db '__X64Encoder_insb$0', 0
name___X64Encoder_insw$0 db '__X64Encoder_insw$0', 0
name___X64Encoder_outsb$0 db '__X64Encoder_outsb$0', 0
name___X64Encoder_outsw$0 db '__X64Encoder_outsw$0', 0
name___X64Encoder_movsb$0 db '__X64Encoder_movsb$0', 0
name___X64Encoder_movsw$0 db '__X64Encoder_movsw$0', 0
name___X64Encoder_movsq$0 db '__X64Encoder_movsq$0', 0
name___X64Encoder_cmpsb$0 db '__X64Encoder_cmpsb$0', 0
name___X64Encoder_cmpsw$0 db '__X64Encoder_cmpsw$0', 0
name___X64Encoder_stosb$0 db '__X64Encoder_stosb$0', 0
name___X64Encoder_stosw$0 db '__X64Encoder_stosw$0', 0
name___X64Encoder_lodsb$0 db '__X64Encoder_lodsb$0', 0
name___X64Encoder_lodsw$0 db '__X64Encoder_lodsw$0', 0
name___X64Encoder_scasb$0 db '__X64Encoder_scasb$0', 0
name___X64Encoder_scasw$0 db '__X64Encoder_scasw$0', 0
name___X64Encoder_repne$0 db '__X64Encoder_repne$0', 0
name___X64Encoder_repe$0 db '__X64Encoder_repe$0', 0
name___X64Encoder_emitCore_jmp_rel8$2 db '__X64Encoder_emitCore_jmp_rel8$2', 0
name___X64Encoder_emitCore_jmp_rel32$2 db '__X64Encoder_emitCore_jmp_rel32$2', 0
name___X64Encoder_emitCore_jcc_rel$2 db '__X64Encoder_emitCore_jcc_rel$2', 0
name___X64Encoder_jmp_rel$1 db '__X64Encoder_jmp_rel$1', 0
name___X64Encoder_jmp_r$1 db '__X64Encoder_jmp_r$1', 0
name___X64Encoder_jmp_m$5 db '__X64Encoder_jmp_m$5', 0
name___X64Encoder_jo_rel$1 db '__X64Encoder_jo_rel$1', 0
name___X64Encoder_jno_rel$1 db '__X64Encoder_jno_rel$1', 0
name___X64Encoder_jb_rel$1 db '__X64Encoder_jb_rel$1', 0
name___X64Encoder_jae_rel$1 db '__X64Encoder_jae_rel$1', 0
name___X64Encoder_jz_rel$1 db '__X64Encoder_jz_rel$1', 0
name___X64Encoder_jnz_rel$1 db '__X64Encoder_jnz_rel$1', 0
name___X64Encoder_jbe_rel$1 db '__X64Encoder_jbe_rel$1', 0
name___X64Encoder_ja_rel$1 db '__X64Encoder_ja_rel$1', 0
name___X64Encoder_js_rel$1 db '__X64Encoder_js_rel$1', 0
name___X64Encoder_jns_rel$1 db '__X64Encoder_jns_rel$1', 0
name___X64Encoder_jp_rel$1 db '__X64Encoder_jp_rel$1', 0
name___X64Encoder_jnp_rel$1 db '__X64Encoder_jnp_rel$1', 0
name___X64Encoder_jl_rel$1 db '__X64Encoder_jl_rel$1', 0
name___X64Encoder_jge_rel$1 db '__X64Encoder_jge_rel$1', 0
name___X64Encoder_jle_rel$1 db '__X64Encoder_jle_rel$1', 0
name___X64Encoder_jg_rel$1 db '__X64Encoder_jg_rel$1', 0
name___X64Encoder_loopz_rel$1 db '__X64Encoder_loopz_rel$1', 0
name___X64Encoder_loopnz_rel$1 db '__X64Encoder_loopnz_rel$1', 0
name___X64Encoder_loop_rel$1 db '__X64Encoder_loop_rel$1', 0
name___X64Encoder_loopzd_rel$1 db '__X64Encoder_loopzd_rel$1', 0
name___X64Encoder_loopnzd_rel$1 db '__X64Encoder_loopnzd_rel$1', 0
name___X64Encoder_loopd_rel$1 db '__X64Encoder_loopd_rel$1', 0
name___X64Encoder_jecxz_rel$1 db '__X64Encoder_jecxz_rel$1', 0
name___X64Encoder_jrcxz_rel$1 db '__X64Encoder_jrcxz_rel$1', 0
name___X64Encoder_call_rel$1 db '__X64Encoder_call_rel$1', 0
name___X64Encoder_call_r$1 db '__X64Encoder_call_r$1', 0
name___X64Encoder_call_m$5 db '__X64Encoder_call_m$5', 0
name___X64Encoder_ret$0 db '__X64Encoder_ret$0', 0
name___X64Encoder_ret_imm$1 db '__X64Encoder_ret_imm$1', 0
name___X64Encoder_retf$0 db '__X64Encoder_retf$0', 0
name___X64Encoder_retf_imm$1 db '__X64Encoder_retf_imm$1', 0
name___X64Encoder_mov_r_r$2 db '__X64Encoder_mov_r_r$2', 0
name___X64Encoder_mov_r_m$5 db '__X64Encoder_mov_r_m$5', 0
name___X64Encoder_mov_m_r$5 db '__X64Encoder_mov_m_r$5', 0
name___X64Encoder_mov_r_imm$2 db '__X64Encoder_mov_r_imm$2', 0
name___X64Encoder_mov_m_imm$6 db '__X64Encoder_mov_m_imm$6', 0
name___X64Encoder_xchg_r_r$2 db '__X64Encoder_xchg_r_r$2', 0
name___X64Encoder_cbw$0 db '__X64Encoder_cbw$0', 0
name___X64Encoder_cwd$0 db '__X64Encoder_cwd$0', 0
name___X64Encoder_int_imm$1 db '__X64Encoder_int_imm$1', 0
name___X64Encoder_iret$0 db '__X64Encoder_iret$0', 0
name___X64Encoder_clc$0 db '__X64Encoder_clc$0', 0
name___X64Encoder_stc$0 db '__X64Encoder_stc$0', 0
name___X64Encoder_cli$0 db '__X64Encoder_cli$0', 0
name___X64Encoder_sti$0 db '__X64Encoder_sti$0', 0
name___X64Encoder_cld$0 db '__X64Encoder_cld$0', 0
name___X64Encoder_std$0 db '__X64Encoder_std$0', 0
name___X64Encoder_lea_r_m$5 db '__X64Encoder_lea_r_m$5', 0
name___X64Encoder_lock$0 db '__X64Encoder_lock$0', 0
name___X64Encoder_connectTo$1 db '__X64Encoder_connectTo$1', 0
name___X64Encoder_rol_r_cl$1 db '__X64Encoder_rol_r_cl$1', 0
name___X64Encoder_ror_r_cl$1 db '__X64Encoder_ror_r_cl$1', 0
name___X64Encoder_rcl_r_cl$1 db '__X64Encoder_rcl_r_cl$1', 0
name___X64Encoder_rcr_r_cl$1 db '__X64Encoder_rcr_r_cl$1', 0
name___X64Encoder_shl_r_cl$1 db '__X64Encoder_shl_r_cl$1', 0
name___X64Encoder_sal_r_cl$1 db '__X64Encoder_sal_r_cl$1', 0
name___X64Encoder_shr_r_cl$1 db '__X64Encoder_shr_r_cl$1', 0
name___X64Encoder_sar_r_cl$1 db '__X64Encoder_sar_r_cl$1', 0
name___X64Encoder_rol_m_imm$6 db '__X64Encoder_rol_m_imm$6', 0
name___X64Encoder_ror_m_imm$6 db '__X64Encoder_ror_m_imm$6', 0
name___X64Encoder_rcl_m_imm$6 db '__X64Encoder_rcl_m_imm$6', 0
name___X64Encoder_rcr_m_imm$6 db '__X64Encoder_rcr_m_imm$6', 0
name___X64Encoder_shl_m_imm$6 db '__X64Encoder_shl_m_imm$6', 0
name___X64Encoder_sal_m_imm$6 db '__X64Encoder_sal_m_imm$6', 0
name___X64Encoder_shr_m_imm$6 db '__X64Encoder_shr_m_imm$6', 0
name___X64Encoder_sar_m_imm$6 db '__X64Encoder_sar_m_imm$6', 0
name___X64Encoder_rol_m_cl$5 db '__X64Encoder_rol_m_cl$5', 0
name___X64Encoder_ror_m_cl$5 db '__X64Encoder_ror_m_cl$5', 0
name___X64Encoder_rcl_m_cl$5 db '__X64Encoder_rcl_m_cl$5', 0
name___X64Encoder_rcr_m_cl$5 db '__X64Encoder_rcr_m_cl$5', 0
name___X64Encoder_shl_m_cl$5 db '__X64Encoder_shl_m_cl$5', 0
name___X64Encoder_sal_m_cl$5 db '__X64Encoder_sal_m_cl$5', 0
name___X64Encoder_shr_m_cl$5 db '__X64Encoder_shr_m_cl$5', 0
name___X64Encoder_sar_m_cl$5 db '__X64Encoder_sar_m_cl$5', 0
name___X64Encoder_nop$0 db '__X64Encoder_nop$0', 0
name___X64Encoder_nop_r$1 db '__X64Encoder_nop_r$1', 0
name___X64Encoder_nop_m$5 db '__X64Encoder_nop_m$5', 0
name___X64Encoder_cmc$0 db '__X64Encoder_cmc$0', 0
name___X64Encoder_hlt$0 db '__X64Encoder_hlt$0', 0
name___X64Encoder_wait$0 db '__X64Encoder_wait$0', 0
name___X64Encoder_xlatb$0 db '__X64Encoder_xlatb$0', 0
name___X64Encoder_enter_imm16_imm8$2 db '__X64Encoder_enter_imm16_imm8$2', 0
name___X64Encoder_leave$0 db '__X64Encoder_leave$0', 0
name___X64Encoder_push_imm8$1 db '__X64Encoder_push_imm8$1', 0
name___X64Encoder_push_imm32$1 db '__X64Encoder_push_imm32$1', 0
name___X64Encoder_rol_r_imm$2 db '__X64Encoder_rol_r_imm$2', 0
name___X64Encoder_ror_r_imm$2 db '__X64Encoder_ror_r_imm$2', 0
name___X64Encoder_rcl_r_imm$2 db '__X64Encoder_rcl_r_imm$2', 0
name___X64Encoder_rcr_r_imm$2 db '__X64Encoder_rcr_r_imm$2', 0
name___X64Encoder_shl_r_imm$2 db '__X64Encoder_shl_r_imm$2', 0
name___X64Encoder_sal_r_imm$2 db '__X64Encoder_sal_r_imm$2', 0
name___X64Encoder_shr_r_imm$2 db '__X64Encoder_shr_r_imm$2', 0
name___X64Encoder_sar_r_imm$2 db '__X64Encoder_sar_r_imm$2', 0
name___X64Encoder_emitCore286_r_r$3 db '__X64Encoder_emitCore286_r_r$3', 0
name___X64Encoder_emitCore286_r_m$6 db '__X64Encoder_emitCore286_r_m$6', 0
name___X64Encoder_emitCore_group0f_00_m$5 db '__X64Encoder_emitCore_group0f_00_m$5', 0
name___X64Encoder_emitCore_group0f_00_r$2 db '__X64Encoder_emitCore_group0f_00_r$2', 0
name___X64Encoder_emitCore_group0f_01_m$5 db '__X64Encoder_emitCore_group0f_01_m$5', 0
name___X64Encoder_emitCore_group0f_01_r$2 db '__X64Encoder_emitCore_group0f_01_r$2', 0
name___X64Encoder_sldt_m$4 db '__X64Encoder_sldt_m$4', 0
name___X64Encoder_str_m$4 db '__X64Encoder_str_m$4', 0
name___X64Encoder_lldt_m$4 db '__X64Encoder_lldt_m$4', 0
name___X64Encoder_ltr_m$4 db '__X64Encoder_ltr_m$4', 0
name___X64Encoder_verr_m$4 db '__X64Encoder_verr_m$4', 0
name___X64Encoder_verw_m$4 db '__X64Encoder_verw_m$4', 0
name___X64Encoder_sldt_r$1 db '__X64Encoder_sldt_r$1', 0
name___X64Encoder_str_r$1 db '__X64Encoder_str_r$1', 0
name___X64Encoder_lldt_r$1 db '__X64Encoder_lldt_r$1', 0
name___X64Encoder_ltr_r$1 db '__X64Encoder_ltr_r$1', 0
name___X64Encoder_verr_r$1 db '__X64Encoder_verr_r$1', 0
name___X64Encoder_verw_r$1 db '__X64Encoder_verw_r$1', 0
name___X64Encoder_sgdt_m$4 db '__X64Encoder_sgdt_m$4', 0
name___X64Encoder_sidt_m$4 db '__X64Encoder_sidt_m$4', 0
name___X64Encoder_lgdt_m$4 db '__X64Encoder_lgdt_m$4', 0
name___X64Encoder_lidt_m$4 db '__X64Encoder_lidt_m$4', 0
name___X64Encoder_smsw_m$4 db '__X64Encoder_smsw_m$4', 0
name___X64Encoder_lmsw_m$4 db '__X64Encoder_lmsw_m$4', 0
name___X64Encoder_smsw_r$1 db '__X64Encoder_smsw_r$1', 0
name___X64Encoder_lmsw_r$1 db '__X64Encoder_lmsw_r$1', 0
name___X64Encoder_lar_r_r$2 db '__X64Encoder_lar_r_r$2', 0
name___X64Encoder_lar_r_m16$5 db '__X64Encoder_lar_r_m16$5', 0
name___X64Encoder_lsl_r_r$2 db '__X64Encoder_lsl_r_r$2', 0
name___X64Encoder_lsl_r_m$5 db '__X64Encoder_lsl_r_m$5', 0
name___X64Encoder_clts$0 db '__X64Encoder_clts$0', 0
name___X64Encoder_emitCore_bitTest_r_imm8$3 db '__X64Encoder_emitCore_bitTest_r_imm8$3', 0
name___X64Encoder_emitCore_bitTest_m_imm8$7 db '__X64Encoder_emitCore_bitTest_m_imm8$7', 0
name___X64Encoder_bsf_r_r$2 db '__X64Encoder_bsf_r_r$2', 0
name___X64Encoder_bsf_r_m$5 db '__X64Encoder_bsf_r_m$5', 0
name___X64Encoder_bsr_r_r$2 db '__X64Encoder_bsr_r_r$2', 0
name___X64Encoder_bsr_r_m$5 db '__X64Encoder_bsr_r_m$5', 0
name___X64Encoder_bt_r_r$2 db '__X64Encoder_bt_r_r$2', 0
name___X64Encoder_btc_r_r$2 db '__X64Encoder_btc_r_r$2', 0
name___X64Encoder_btr_r_r$2 db '__X64Encoder_btr_r_r$2', 0
name___X64Encoder_bts_r_r$2 db '__X64Encoder_bts_r_r$2', 0
name___X64Encoder_bt_m_r$5 db '__X64Encoder_bt_m_r$5', 0
name___X64Encoder_btc_m_r$5 db '__X64Encoder_btc_m_r$5', 0
name___X64Encoder_btr_m_r$5 db '__X64Encoder_btr_m_r$5', 0
name___X64Encoder_bts_m_r$5 db '__X64Encoder_bts_m_r$5', 0
name___X64Encoder_lfs_r_m$5 db '__X64Encoder_lfs_r_m$5', 0
name___X64Encoder_lgs_r_m$5 db '__X64Encoder_lgs_r_m$5', 0
name___X64Encoder_lss_r_m$5 db '__X64Encoder_lss_r_m$5', 0
name___X64Encoder_seto_r8$1 db '__X64Encoder_seto_r8$1', 0
name___X64Encoder_setno_r8$1 db '__X64Encoder_setno_r8$1', 0
name___X64Encoder_setb_r8$1 db '__X64Encoder_setb_r8$1', 0
name___X64Encoder_setae_r8$1 db '__X64Encoder_setae_r8$1', 0
name___X64Encoder_sete_r8$1 db '__X64Encoder_sete_r8$1', 0
name___X64Encoder_setne_r8$1 db '__X64Encoder_setne_r8$1', 0
name___X64Encoder_setbe_r8$1 db '__X64Encoder_setbe_r8$1', 0
name___X64Encoder_seta_r8$1 db '__X64Encoder_seta_r8$1', 0
name___X64Encoder_sets_r8$1 db '__X64Encoder_sets_r8$1', 0
name___X64Encoder_setns_r8$1 db '__X64Encoder_setns_r8$1', 0
name___X64Encoder_setp_r8$1 db '__X64Encoder_setp_r8$1', 0
name___X64Encoder_setnp_r8$1 db '__X64Encoder_setnp_r8$1', 0
name___X64Encoder_setl_r8$1 db '__X64Encoder_setl_r8$1', 0
name___X64Encoder_setge_r8$1 db '__X64Encoder_setge_r8$1', 0
name___X64Encoder_setle_r8$1 db '__X64Encoder_setle_r8$1', 0
name___X64Encoder_setg_r8$1 db '__X64Encoder_setg_r8$1', 0
name___X64Encoder_seto_m8$4 db '__X64Encoder_seto_m8$4', 0
name___X64Encoder_setno_m8$4 db '__X64Encoder_setno_m8$4', 0
name___X64Encoder_setb_m8$4 db '__X64Encoder_setb_m8$4', 0
name___X64Encoder_setae_m8$4 db '__X64Encoder_setae_m8$4', 0
name___X64Encoder_sete_rm$4 db '__X64Encoder_sete_rm$4', 0
name___X64Encoder_setne_m8$4 db '__X64Encoder_setne_m8$4', 0
name___X64Encoder_setbe_m8$4 db '__X64Encoder_setbe_m8$4', 0
name___X64Encoder_seta_m8$4 db '__X64Encoder_seta_m8$4', 0
name___X64Encoder_sets_m8$4 db '__X64Encoder_sets_m8$4', 0
name___X64Encoder_setns_m8$4 db '__X64Encoder_setns_m8$4', 0
name___X64Encoder_setp_m8$4 db '__X64Encoder_setp_m8$4', 0
name___X64Encoder_setnp_m8$4 db '__X64Encoder_setnp_m8$4', 0
name___X64Encoder_setl_m8$4 db '__X64Encoder_setl_m8$4', 0
name___X64Encoder_setge_m8$4 db '__X64Encoder_setge_m8$4', 0
name___X64Encoder_setle_m8$4 db '__X64Encoder_setle_m8$4', 0
name___X64Encoder_setg_m8$4 db '__X64Encoder_setg_m8$4', 0
name___X64Encoder_cwde$0 db '__X64Encoder_cwde$0', 0
name___X64Encoder_cdq$0 db '__X64Encoder_cdq$0', 0
name___X64Encoder_iretd$0 db '__X64Encoder_iretd$0', 0
name___X64Encoder_movsd$0 db '__X64Encoder_movsd$0', 0
name___X64Encoder_cmpsd$0 db '__X64Encoder_cmpsd$0', 0
name___X64Encoder_lodsd$0 db '__X64Encoder_lodsd$0', 0
name___X64Encoder_stosd$0 db '__X64Encoder_stosd$0', 0
name___X64Encoder_scasd$0 db '__X64Encoder_scasd$0', 0
name___X64Encoder_insd$0 db '__X64Encoder_insd$0', 0
name___X64Encoder_outsd$0 db '__X64Encoder_outsd$0', 0
name___X64Encoder_emitCore_movExtend_r_r$3 db '__X64Encoder_emitCore_movExtend_r_r$3', 0
name___X64Encoder_emitCore_movExtend_r_m$6 db '__X64Encoder_emitCore_movExtend_r_m$6', 0
name___X64Encoder_movsx_r_r$2 db '__X64Encoder_movsx_r_r$2', 0
name___X64Encoder_movsx_r_m8$5 db '__X64Encoder_movsx_r_m8$5', 0
name___X64Encoder_movsx_r_m16$5 db '__X64Encoder_movsx_r_m16$5', 0
name___X64Encoder_movzx_r_r$2 db '__X64Encoder_movzx_r_r$2', 0
name___X64Encoder_movzx_r_m8$5 db '__X64Encoder_movzx_r_m8$5', 0
name___X64Encoder_movzx_r_m16$5 db '__X64Encoder_movzx_r_m16$5', 0
name___X64Encoder_bswap_r$1 db '__X64Encoder_bswap_r$1', 0
name___X64Encoder_cmpxchg_r_r$2 db '__X64Encoder_cmpxchg_r_r$2', 0
name___X64Encoder_cmpxchg_m_r$5 db '__X64Encoder_cmpxchg_m_r$5', 0
name___X64Encoder_xadd_r_r$2 db '__X64Encoder_xadd_r_r$2', 0
name___X64Encoder_xadd_m_r$5 db '__X64Encoder_xadd_m_r$5', 0
name___X64Encoder_invlpg_m$4 db '__X64Encoder_invlpg_m$4', 0
name___X64Encoder_invd$0 db '__X64Encoder_invd$0', 0
name___X64Encoder_wbinvd$0 db '__X64Encoder_wbinvd$0', 0
name___X64Encoder_cmpxchg8b_m$4 db '__X64Encoder_cmpxchg8b_m$4', 0
name___X64Encoder_cpuid$0 db '__X64Encoder_cpuid$0', 0
name___X64Encoder_rdmsr$0 db '__X64Encoder_rdmsr$0', 0
name___X64Encoder_rdtsc$0 db '__X64Encoder_rdtsc$0', 0
name___X64Encoder_wrmsr$0 db '__X64Encoder_wrmsr$0', 0
name___X64Encoder_rsm$0 db '__X64Encoder_rsm$0', 0
name___X64Encoder_cmovo_r_r$2 db '__X64Encoder_cmovo_r_r$2', 0
name___X64Encoder_cmovno_r_r$2 db '__X64Encoder_cmovno_r_r$2', 0
name___X64Encoder_cmovb_r_r$2 db '__X64Encoder_cmovb_r_r$2', 0
name___X64Encoder_cmove_r_r$2 db '__X64Encoder_cmove_r_r$2', 0
name___X64Encoder_cmovne_r_r$2 db '__X64Encoder_cmovne_r_r$2', 0
name___X64Encoder_cmovbe_r_r$2 db '__X64Encoder_cmovbe_r_r$2', 0
name___X64Encoder_cmova_r_r$2 db '__X64Encoder_cmova_r_r$2', 0
name___X64Encoder_cmovs_r_r$2 db '__X64Encoder_cmovs_r_r$2', 0
name___X64Encoder_cmovns_r_r$2 db '__X64Encoder_cmovns_r_r$2', 0
name___X64Encoder_cmovp_r_r$2 db '__X64Encoder_cmovp_r_r$2', 0
name___X64Encoder_cmovnp_r_r$2 db '__X64Encoder_cmovnp_r_r$2', 0
name___X64Encoder_cmovl_r_r$2 db '__X64Encoder_cmovl_r_r$2', 0
name___X64Encoder_cmovge_r_r$2 db '__X64Encoder_cmovge_r_r$2', 0
name___X64Encoder_cmovg_r_r$2 db '__X64Encoder_cmovg_r_r$2', 0
name___X64Encoder_cmovo_r_m$5 db '__X64Encoder_cmovo_r_m$5', 0
name___X64Encoder_cmovno_r_m$5 db '__X64Encoder_cmovno_r_m$5', 0
name___X64Encoder_cmovb_r_m$5 db '__X64Encoder_cmovb_r_m$5', 0
name___X64Encoder_cmove_r_m$5 db '__X64Encoder_cmove_r_m$5', 0
name___X64Encoder_cmovne_r_m$5 db '__X64Encoder_cmovne_r_m$5', 0
name___X64Encoder_cmovbe_r_m$5 db '__X64Encoder_cmovbe_r_m$5', 0
name___X64Encoder_cmova_r_m$5 db '__X64Encoder_cmova_r_m$5', 0
name___X64Encoder_cmovs_r_m$5 db '__X64Encoder_cmovs_r_m$5', 0
name___X64Encoder_cmovns_r_m$5 db '__X64Encoder_cmovns_r_m$5', 0
name___X64Encoder_cmovp_r_m$5 db '__X64Encoder_cmovp_r_m$5', 0
name___X64Encoder_cmovnp_r_m$5 db '__X64Encoder_cmovnp_r_m$5', 0
name___X64Encoder_cmovl_r_m$5 db '__X64Encoder_cmovl_r_m$5', 0
name___X64Encoder_cmovge_r_m$5 db '__X64Encoder_cmovge_r_m$5', 0
name___X64Encoder_cmovg_r_m$5 db '__X64Encoder_cmovg_r_m$5', 0
name___X64Encoder_ud2$0 db '__X64Encoder_ud2$0', 0
name___X64Encoder_rdpmc$0 db '__X64Encoder_rdpmc$0', 0
name___X64Encoder_syscall$0 db '__X64Encoder_syscall$0', 0
name___X64Encoder_sysret$0 db '__X64Encoder_sysret$0', 0
name___X64Encoder_sysenter$0 db '__X64Encoder_sysenter$0', 0
name___X64Encoder_sysexit$0 db '__X64Encoder_sysexit$0', 0
name___X64Encoder_movsxd_r64_r32$2 db '__X64Encoder_movsxd_r64_r32$2', 0
name___X64Encoder_movsxd_r64_m32$5 db '__X64Encoder_movsxd_r64_m32$5', 0
name___X64Encoder_cmpxchg16b_m$4 db '__X64Encoder_cmpxchg16b_m$4', 0
name___X64Encoder_cdqe$0 db '__X64Encoder_cdqe$0', 0
name___X64Encoder_cqo$0 db '__X64Encoder_cqo$0', 0
name___X64Encoder_cmpsq$0 db '__X64Encoder_cmpsq$0', 0
name___X64Encoder_stosq$0 db '__X64Encoder_stosq$0', 0
name___X64Encoder_lodsq$0 db '__X64Encoder_lodsq$0', 0
name___X64Encoder_scasq$0 db '__X64Encoder_scasq$0', 0
name___X64Encoder_iretq$0 db '__X64Encoder_iretq$0', 0
name___X64Encoder_popfq$0 db '__X64Encoder_popfq$0', 0
name___X64Encoder_pushfq$0 db '__X64Encoder_pushfq$0', 0
name___X64Encoder_rdtscp$0 db '__X64Encoder_rdtscp$0', 0
name___X64Encoder_swapgs$0 db '__X64Encoder_swapgs$0', 0
name___X64Encoder_emitFPU_sti$2 db '__X64Encoder_emitFPU_sti$2', 0
name___X64Encoder_emitFPU_m$5 db '__X64Encoder_emitFPU_m$5', 0
name___X64Encoder_emitFPU_st0_sti$2 db '__X64Encoder_emitFPU_st0_sti$2', 0
name___X64Encoder_emitFPU_sti_st0$2 db '__X64Encoder_emitFPU_sti_st0$2', 0
name___X64Encoder_emitFPU_m32real$5 db '__X64Encoder_emitFPU_m32real$5', 0
name___X64Encoder_emitFPU_m64real$5 db '__X64Encoder_emitFPU_m64real$5', 0
name___X64Encoder_fadd_st0_sti$1 db '__X64Encoder_fadd_st0_sti$1', 0
name___X64Encoder_fmul_st0_sti$1 db '__X64Encoder_fmul_st0_sti$1', 0
name___X64Encoder_fcom_st0_sti$1 db '__X64Encoder_fcom_st0_sti$1', 0
name___X64Encoder_fcomp_st0_sti$1 db '__X64Encoder_fcomp_st0_sti$1', 0
name___X64Encoder_fsub_st0_sti$1 db '__X64Encoder_fsub_st0_sti$1', 0
name___X64Encoder_fsubr_st0_sti$1 db '__X64Encoder_fsubr_st0_sti$1', 0
name___X64Encoder_fdiv_st0_sti$1 db '__X64Encoder_fdiv_st0_sti$1', 0
name___X64Encoder_fdivr_st0_sti$1 db '__X64Encoder_fdivr_st0_sti$1', 0
name___X64Encoder_fadd_sti_st0$1 db '__X64Encoder_fadd_sti_st0$1', 0
name___X64Encoder_fmul_sti_st0$1 db '__X64Encoder_fmul_sti_st0$1', 0
name___X64Encoder_fsub_sti_st0$1 db '__X64Encoder_fsub_sti_st0$1', 0
name___X64Encoder_fsubr_sti_st0$1 db '__X64Encoder_fsubr_sti_st0$1', 0
name___X64Encoder_fdiv_sti_st0$1 db '__X64Encoder_fdiv_sti_st0$1', 0
name___X64Encoder_fdivr_sti_st0$1 db '__X64Encoder_fdivr_sti_st0$1', 0
name___X64Encoder_fadd_m32$4 db '__X64Encoder_fadd_m32$4', 0
name___X64Encoder_fmul_m32$4 db '__X64Encoder_fmul_m32$4', 0
name___X64Encoder_fcom_m32$4 db '__X64Encoder_fcom_m32$4', 0
name___X64Encoder_fcomp_m32$4 db '__X64Encoder_fcomp_m32$4', 0
name___X64Encoder_fsub_m32$4 db '__X64Encoder_fsub_m32$4', 0
name___X64Encoder_fsubr_m32$4 db '__X64Encoder_fsubr_m32$4', 0
name___X64Encoder_fdiv_m32$4 db '__X64Encoder_fdiv_m32$4', 0
name___X64Encoder_fdivr_m32$4 db '__X64Encoder_fdivr_m32$4', 0
name___X64Encoder_fadd_m64$4 db '__X64Encoder_fadd_m64$4', 0
name___X64Encoder_fmul_m64$4 db '__X64Encoder_fmul_m64$4', 0
name___X64Encoder_fcom_m64$4 db '__X64Encoder_fcom_m64$4', 0
name___X64Encoder_fcomp_m64$4 db '__X64Encoder_fcomp_m64$4', 0
name___X64Encoder_fsub_m64$4 db '__X64Encoder_fsub_m64$4', 0
name___X64Encoder_fsubr_m64$4 db '__X64Encoder_fsubr_m64$4', 0
name___X64Encoder_fdiv_m64$4 db '__X64Encoder_fdiv_m64$4', 0
name___X64Encoder_fdivr_m64$4 db '__X64Encoder_fdivr_m64$4', 0
name___X64Encoder_faddp_sti_st0$1 db '__X64Encoder_faddp_sti_st0$1', 0
name___X64Encoder_fdivp_sti_st0$1 db '__X64Encoder_fdivp_sti_st0$1', 0
name___X64Encoder_fdivrp_sti_st0$1 db '__X64Encoder_fdivrp_sti_st0$1', 0
name___X64Encoder_fmulp_sti_st0$1 db '__X64Encoder_fmulp_sti_st0$1', 0
name___X64Encoder_fsubp_sti_st0$1 db '__X64Encoder_fsubp_sti_st0$1', 0
name___X64Encoder_fsubrp_sti_st0$1 db '__X64Encoder_fsubrp_sti_st0$1', 0
name___X64Encoder_fxch_sti$1 db '__X64Encoder_fxch_sti$1', 0
name___X64Encoder_fcom$0 db '__X64Encoder_fcom$0', 0
name___X64Encoder_fxch$0 db '__X64Encoder_fxch$0', 0
name___X64Encoder_fild_m16$4 db '__X64Encoder_fild_m16$4', 0
name___X64Encoder_fild_m32$4 db '__X64Encoder_fild_m32$4', 0
name___X64Encoder_fild_m64$4 db '__X64Encoder_fild_m64$4', 0
name___X64Encoder_fistp_m16$4 db '__X64Encoder_fistp_m16$4', 0
name___X64Encoder_fistp_m32$4 db '__X64Encoder_fistp_m32$4', 0
name___X64Encoder_fistp_m64$4 db '__X64Encoder_fistp_m64$4', 0
name___X64Encoder_fiadd_m16$4 db '__X64Encoder_fiadd_m16$4', 0
name___X64Encoder_fiadd_m32$4 db '__X64Encoder_fiadd_m32$4', 0
name___X64Encoder_fimul_m16$4 db '__X64Encoder_fimul_m16$4', 0
name___X64Encoder_fimul_m32$4 db '__X64Encoder_fimul_m32$4', 0
name___X64Encoder_fidiv_m16$4 db '__X64Encoder_fidiv_m16$4', 0
name___X64Encoder_fidiv_m32$4 db '__X64Encoder_fidiv_m32$4', 0
name___X64Encoder_fidivr_m16$4 db '__X64Encoder_fidivr_m16$4', 0
name___X64Encoder_fidivr_m32$4 db '__X64Encoder_fidivr_m32$4', 0
name___X64Encoder_fisub_m16$4 db '__X64Encoder_fisub_m16$4', 0
name___X64Encoder_fisub_m32$4 db '__X64Encoder_fisub_m32$4', 0
name___X64Encoder_fisubr_m16$4 db '__X64Encoder_fisubr_m16$4', 0
name___X64Encoder_fisubr_m32$4 db '__X64Encoder_fisubr_m32$4', 0
name___X64Encoder_fist_m16$4 db '__X64Encoder_fist_m16$4', 0
name___X64Encoder_fist_m32$4 db '__X64Encoder_fist_m32$4', 0
name___X64Encoder_ficom_m16$4 db '__X64Encoder_ficom_m16$4', 0
name___X64Encoder_ficom_m32$4 db '__X64Encoder_ficom_m32$4', 0
name___X64Encoder_ficomp_m16$4 db '__X64Encoder_ficomp_m16$4', 0
name___X64Encoder_ficomp_m32$4 db '__X64Encoder_ficomp_m32$4', 0
name___X64Encoder_ffree_sti$1 db '__X64Encoder_ffree_sti$1', 0
name___X64Encoder_fld_m32$4 db '__X64Encoder_fld_m32$4', 0
name___X64Encoder_fld_m64$4 db '__X64Encoder_fld_m64$4', 0
name___X64Encoder_fld_m80$4 db '__X64Encoder_fld_m80$4', 0
name___X64Encoder_fld_sti$1 db '__X64Encoder_fld_sti$1', 0
name___X64Encoder_fstp_m32$4 db '__X64Encoder_fstp_m32$4', 0
name___X64Encoder_fstp_m64$4 db '__X64Encoder_fstp_m64$4', 0
name___X64Encoder_fstp_m80$4 db '__X64Encoder_fstp_m80$4', 0
name___X64Encoder_fstp_sti$1 db '__X64Encoder_fstp_sti$1', 0
name___X64Encoder_fst_m32$4 db '__X64Encoder_fst_m32$4', 0
name___X64Encoder_fst_m64$4 db '__X64Encoder_fst_m64$4', 0
name___X64Encoder_fst_sti$1 db '__X64Encoder_fst_sti$1', 0
name___X64Encoder_fnstsw_ax$0 db '__X64Encoder_fnstsw_ax$0', 0
name___X64Encoder_fnstsw_m16$4 db '__X64Encoder_fnstsw_m16$4', 0
name___X64Encoder_fstsw_ax$0 db '__X64Encoder_fstsw_ax$0', 0
name___X64Encoder_fstsw_m16$4 db '__X64Encoder_fstsw_m16$4', 0
name___X64Encoder_frstor_m$4 db '__X64Encoder_frstor_m$4', 0
name___X64Encoder_fnsave_m$4 db '__X64Encoder_fnsave_m$4', 0
name___X64Encoder_fsave_m$4 db '__X64Encoder_fsave_m$4', 0
name___X64Encoder_fnstenv_m$4 db '__X64Encoder_fnstenv_m$4', 0
name___X64Encoder_fnstenvw_m$4 db '__X64Encoder_fnstenvw_m$4', 0
name___X64Encoder_fstenv_m$4 db '__X64Encoder_fstenv_m$4', 0
name___X64Encoder_fnstcw_m$4 db '__X64Encoder_fnstcw_m$4', 0
name___X64Encoder_fldcw_m$4 db '__X64Encoder_fldcw_m$4', 0
name___X64Encoder_fstcw_m$4 db '__X64Encoder_fstcw_m$4', 0
name___X64Encoder_fbld_m$4 db '__X64Encoder_fbld_m$4', 0
name___X64Encoder_fbstp_m$4 db '__X64Encoder_fbstp_m$4', 0
name___X64Encoder_fldenv_m$4 db '__X64Encoder_fldenv_m$4', 0
name___X64Encoder_fldenvw_m$4 db '__X64Encoder_fldenvw_m$4', 0
name___X64Encoder_fnsavew_m$4 db '__X64Encoder_fnsavew_m$4', 0
name___X64Encoder_frstorw_m$4 db '__X64Encoder_frstorw_m$4', 0
name___X64Encoder_fsavew_m$4 db '__X64Encoder_fsavew_m$4', 0
name___X64Encoder_fstenvw_m$4 db '__X64Encoder_fstenvw_m$4', 0
name___X64Encoder_f2xm1$0 db '__X64Encoder_f2xm1$0', 0
name___X64Encoder_fabs$0 db '__X64Encoder_fabs$0', 0
name___X64Encoder_fchs$0 db '__X64Encoder_fchs$0', 0
name___X64Encoder_fclex$0 db '__X64Encoder_fclex$0', 0
name___X64Encoder_fcompp$0 db '__X64Encoder_fcompp$0', 0
name___X64Encoder_fdecstp$0 db '__X64Encoder_fdecstp$0', 0
name___X64Encoder_fincstp$0 db '__X64Encoder_fincstp$0', 0
name___X64Encoder_finit$0 db '__X64Encoder_finit$0', 0
name___X64Encoder_fld1$0 db '__X64Encoder_fld1$0', 0
name___X64Encoder_fldl2e$0 db '__X64Encoder_fldl2e$0', 0
name___X64Encoder_fldl2t$0 db '__X64Encoder_fldl2t$0', 0
name___X64Encoder_fldlg2$0 db '__X64Encoder_fldlg2$0', 0
name___X64Encoder_fldln2$0 db '__X64Encoder_fldln2$0', 0
name___X64Encoder_fldpi$0 db '__X64Encoder_fldpi$0', 0
name___X64Encoder_fldz$0 db '__X64Encoder_fldz$0', 0
name___X64Encoder_fnclex$0 db '__X64Encoder_fnclex$0', 0
name___X64Encoder_fninit$0 db '__X64Encoder_fninit$0', 0
name___X64Encoder_fnop$0 db '__X64Encoder_fnop$0', 0
name___X64Encoder_fpatan$0 db '__X64Encoder_fpatan$0', 0
name___X64Encoder_fprem$0 db '__X64Encoder_fprem$0', 0
name___X64Encoder_fptan$0 db '__X64Encoder_fptan$0', 0
name___X64Encoder_frndint$0 db '__X64Encoder_frndint$0', 0
name___X64Encoder_fscale$0 db '__X64Encoder_fscale$0', 0
name___X64Encoder_fsqrt$0 db '__X64Encoder_fsqrt$0', 0
name___X64Encoder_ftst$0 db '__X64Encoder_ftst$0', 0
name___X64Encoder_fwait$0 db '__X64Encoder_fwait$0', 0
name___X64Encoder_fxam$0 db '__X64Encoder_fxam$0', 0
name___X64Encoder_fxtract$0 db '__X64Encoder_fxtract$0', 0
name___X64Encoder_fyl2x$0 db '__X64Encoder_fyl2x$0', 0
name___X64Encoder_fyl2xp1$0 db '__X64Encoder_fyl2xp1$0', 0
name___X64Encoder_fucom_sti$1 db '__X64Encoder_fucom_sti$1', 0
name___X64Encoder_fucomp_sti$1 db '__X64Encoder_fucomp_sti$1', 0
name___X64Encoder_fucom$0 db '__X64Encoder_fucom$0', 0
name___X64Encoder_fucomp$0 db '__X64Encoder_fucomp$0', 0
name___X64Encoder_fsin$0 db '__X64Encoder_fsin$0', 0
name___X64Encoder_fcos$0 db '__X64Encoder_fcos$0', 0
name___X64Encoder_fsincos$0 db '__X64Encoder_fsincos$0', 0
name___X64Encoder_fprem1$0 db '__X64Encoder_fprem1$0', 0
name___X64Encoder_fucompp$0 db '__X64Encoder_fucompp$0', 0
name___X64Encoder_fcmovb_st0_sti$1 db '__X64Encoder_fcmovb_st0_sti$1', 0
name___X64Encoder_fcmovbe_st0_sti$1 db '__X64Encoder_fcmovbe_st0_sti$1', 0
name___X64Encoder_fcmove_st0_sti$1 db '__X64Encoder_fcmove_st0_sti$1', 0
name___X64Encoder_fcmovnb_st0_sti$1 db '__X64Encoder_fcmovnb_st0_sti$1', 0
name___X64Encoder_fcmovnbe_st0_sti$1 db '__X64Encoder_fcmovnbe_st0_sti$1', 0
name___X64Encoder_fcmovne_st0_sti$1 db '__X64Encoder_fcmovne_st0_sti$1', 0
name___X64Encoder_fcmovnu_st0_sti$1 db '__X64Encoder_fcmovnu_st0_sti$1', 0
name___X64Encoder_fcmovu_st0_sti$1 db '__X64Encoder_fcmovu_st0_sti$1', 0
name___X64Encoder_fcomi_st0_sti$1 db '__X64Encoder_fcomi_st0_sti$1', 0
name___X64Encoder_fcomip_st0_sti$1 db '__X64Encoder_fcomip_st0_sti$1', 0
name___X64Encoder_fucomi_st0_sti$1 db '__X64Encoder_fucomi_st0_sti$1', 0
name___X64Encoder_fucomip_st0_sti$1 db '__X64Encoder_fucomip_st0_sti$1', 0
name___X64Encoder_fxsave_m$4 db '__X64Encoder_fxsave_m$4', 0
name___X64Encoder_fxrstor_m$4 db '__X64Encoder_fxrstor_m$4', 0
name___X64Encoder_fisttp_m16$4 db '__X64Encoder_fisttp_m16$4', 0
name___X64Encoder_fisttp_m32$4 db '__X64Encoder_fisttp_m32$4', 0
name___X64Encoder_fisttp_m64$4 db '__X64Encoder_fisttp_m64$4', 0
name___X64Encoder_movd_mm_r32$2 db '__X64Encoder_movd_mm_r32$2', 0
name___X64Encoder_movd_mm_m32$5 db '__X64Encoder_movd_mm_m32$5', 0
name___X64Encoder_movd_r32_mm$2 db '__X64Encoder_movd_r32_mm$2', 0
name___X64Encoder_movd_m32_mm$5 db '__X64Encoder_movd_m32_mm$5', 0
name___X64Encoder_movq_mm_mm$2 db '__X64Encoder_movq_mm_mm$2', 0
name___X64Encoder_movq_mm_r64$2 db '__X64Encoder_movq_mm_r64$2', 0
name___X64Encoder_movq_mm_m64$5 db '__X64Encoder_movq_mm_m64$5', 0
name___X64Encoder_movq_r64_mm$2 db '__X64Encoder_movq_r64_mm$2', 0
name___X64Encoder_movq_m64_mm$5 db '__X64Encoder_movq_m64_mm$5', 0
name___X64Encoder_packssdw_mm_mm$2 db '__X64Encoder_packssdw_mm_mm$2', 0
name___X64Encoder_packssdw_mm_m$5 db '__X64Encoder_packssdw_mm_m$5', 0
name___X64Encoder_packsswb_mm_mm$2 db '__X64Encoder_packsswb_mm_mm$2', 0
name___X64Encoder_packsswb_mm_m$5 db '__X64Encoder_packsswb_mm_m$5', 0
name___X64Encoder_packuswb_mm_mm$2 db '__X64Encoder_packuswb_mm_mm$2', 0
name___X64Encoder_packuswb_mm_m$5 db '__X64Encoder_packuswb_mm_m$5', 0
name___X64Encoder_paddb_mm_mm$2 db '__X64Encoder_paddb_mm_mm$2', 0
name___X64Encoder_paddb_mm_m$5 db '__X64Encoder_paddb_mm_m$5', 0
name___X64Encoder_paddw_mm_mm$2 db '__X64Encoder_paddw_mm_mm$2', 0
name___X64Encoder_paddw_mm_m$5 db '__X64Encoder_paddw_mm_m$5', 0
name___X64Encoder_paddd_mm_mm$2 db '__X64Encoder_paddd_mm_mm$2', 0
name___X64Encoder_paddd_mm_m$5 db '__X64Encoder_paddd_mm_m$5', 0
name___X64Encoder_paddq_mm_mm$2 db '__X64Encoder_paddq_mm_mm$2', 0
name___X64Encoder_paddq_mm_m$5 db '__X64Encoder_paddq_mm_m$5', 0
name___X64Encoder_paddsb_mm_mm$2 db '__X64Encoder_paddsb_mm_mm$2', 0
name___X64Encoder_paddsb_mm_m$5 db '__X64Encoder_paddsb_mm_m$5', 0
name___X64Encoder_paddsw_mm_mm$2 db '__X64Encoder_paddsw_mm_mm$2', 0
name___X64Encoder_paddsw_mm_m$5 db '__X64Encoder_paddsw_mm_m$5', 0
name___X64Encoder_paddusb_mm_mm$2 db '__X64Encoder_paddusb_mm_mm$2', 0
name___X64Encoder_paddusb_mm_m$5 db '__X64Encoder_paddusb_mm_m$5', 0
name___X64Encoder_paddusw_mm_mm$2 db '__X64Encoder_paddusw_mm_mm$2', 0
name___X64Encoder_paddusw_mm_m$5 db '__X64Encoder_paddusw_mm_m$5', 0
name___X64Encoder_pmaddwd_mm_mm$2 db '__X64Encoder_pmaddwd_mm_mm$2', 0
name___X64Encoder_pmaddwd_mm_m$5 db '__X64Encoder_pmaddwd_mm_m$5', 0
name___X64Encoder_pand_mm_mm$2 db '__X64Encoder_pand_mm_mm$2', 0
name___X64Encoder_pand_mm_m$5 db '__X64Encoder_pand_mm_m$5', 0
name___X64Encoder_pandn_mm_mm$2 db '__X64Encoder_pandn_mm_mm$2', 0
name___X64Encoder_pandn_mm_m$5 db '__X64Encoder_pandn_mm_m$5', 0
name___X64Encoder_por_mm_mm$2 db '__X64Encoder_por_mm_mm$2', 0
name___X64Encoder_por_mm_m$5 db '__X64Encoder_por_mm_m$5', 0
name___X64Encoder_pxor_mm_mm$2 db '__X64Encoder_pxor_mm_mm$2', 0
name___X64Encoder_pxor_mm_m$5 db '__X64Encoder_pxor_mm_m$5', 0
name___X64Encoder_pcmpeqb_mm_mm$2 db '__X64Encoder_pcmpeqb_mm_mm$2', 0
name___X64Encoder_pcmpeqb_mm_m$5 db '__X64Encoder_pcmpeqb_mm_m$5', 0
name___X64Encoder_pcmpeqw_mm_mm$2 db '__X64Encoder_pcmpeqw_mm_mm$2', 0
name___X64Encoder_pcmpeqw_mm_m$5 db '__X64Encoder_pcmpeqw_mm_m$5', 0
name___X64Encoder_pcmpeqd_mm_mm$2 db '__X64Encoder_pcmpeqd_mm_mm$2', 0
name___X64Encoder_pcmpeqd_mm_m$5 db '__X64Encoder_pcmpeqd_mm_m$5', 0
name___X64Encoder_pcmpgtb_mm_mm$2 db '__X64Encoder_pcmpgtb_mm_mm$2', 0
name___X64Encoder_pcmpgtb_mm_m$5 db '__X64Encoder_pcmpgtb_mm_m$5', 0
name___X64Encoder_pcmpgtw_mm_mm$2 db '__X64Encoder_pcmpgtw_mm_mm$2', 0
name___X64Encoder_pcmpgtw_mm_m$5 db '__X64Encoder_pcmpgtw_mm_m$5', 0
name___X64Encoder_pcmpgtd_mm_mm$2 db '__X64Encoder_pcmpgtd_mm_mm$2', 0
name___X64Encoder_pcmpgtd_mm_m$5 db '__X64Encoder_pcmpgtd_mm_m$5', 0
name___X64Encoder_pmulhw_mm_mm$2 db '__X64Encoder_pmulhw_mm_mm$2', 0
name___X64Encoder_pmulhw_mm_m$5 db '__X64Encoder_pmulhw_mm_m$5', 0
name___X64Encoder_pmullw_mm_mm$2 db '__X64Encoder_pmullw_mm_mm$2', 0
name___X64Encoder_pmullw_mm_m$5 db '__X64Encoder_pmullw_mm_m$5', 0
name___X64Encoder_psubb_mm_mm$2 db '__X64Encoder_psubb_mm_mm$2', 0
name___X64Encoder_psubb_mm_m$5 db '__X64Encoder_psubb_mm_m$5', 0
name___X64Encoder_psubw_mm_mm$2 db '__X64Encoder_psubw_mm_mm$2', 0
name___X64Encoder_psubw_mm_m$5 db '__X64Encoder_psubw_mm_m$5', 0
name___X64Encoder_psubd_mm_mm$2 db '__X64Encoder_psubd_mm_mm$2', 0
name___X64Encoder_psubd_mm_m$5 db '__X64Encoder_psubd_mm_m$5', 0
name___X64Encoder_psubsb_mm_mm$2 db '__X64Encoder_psubsb_mm_mm$2', 0
name___X64Encoder_psubsb_mm_m$5 db '__X64Encoder_psubsb_mm_m$5', 0
name___X64Encoder_psubsw_mm_mm$2 db '__X64Encoder_psubsw_mm_mm$2', 0
name___X64Encoder_psubsw_mm_m$5 db '__X64Encoder_psubsw_mm_m$5', 0
name___X64Encoder_psubusb_mm_mm$2 db '__X64Encoder_psubusb_mm_mm$2', 0
name___X64Encoder_psubusb_mm_m$5 db '__X64Encoder_psubusb_mm_m$5', 0
name___X64Encoder_psubusw_mm_mm$2 db '__X64Encoder_psubusw_mm_mm$2', 0
name___X64Encoder_psubusw_mm_m$5 db '__X64Encoder_psubusw_mm_m$5', 0
name___X64Encoder_punpckhbw_mm_mm$2 db '__X64Encoder_punpckhbw_mm_mm$2', 0
name___X64Encoder_punpckhbw_mm_m$5 db '__X64Encoder_punpckhbw_mm_m$5', 0
name___X64Encoder_punpckhwd_mm_mm$2 db '__X64Encoder_punpckhwd_mm_mm$2', 0
name___X64Encoder_punpckhwd_mm_m$5 db '__X64Encoder_punpckhwd_mm_m$5', 0
name___X64Encoder_punpckhdq_mm_mm$2 db '__X64Encoder_punpckhdq_mm_mm$2', 0
name___X64Encoder_punpckhdq_mm_m$5 db '__X64Encoder_punpckhdq_mm_m$5', 0
name___X64Encoder_punpcklbw_mm_mm$2 db '__X64Encoder_punpcklbw_mm_mm$2', 0
name___X64Encoder_punpcklwd_mm_mm$2 db '__X64Encoder_punpcklwd_mm_mm$2', 0
name___X64Encoder_punpckldq_mm_mm$2 db '__X64Encoder_punpckldq_mm_mm$2', 0
name___X64Encoder_psllw_mm_mm$2 db '__X64Encoder_psllw_mm_mm$2', 0
name___X64Encoder_psllw_mm_m$5 db '__X64Encoder_psllw_mm_m$5', 0
name___X64Encoder_psllw_mm_imm$2 db '__X64Encoder_psllw_mm_imm$2', 0
name___X64Encoder_pslld_mm_mm$2 db '__X64Encoder_pslld_mm_mm$2', 0
name___X64Encoder_pslld_mm_m$5 db '__X64Encoder_pslld_mm_m$5', 0
name___X64Encoder_pslld_mm_imm$2 db '__X64Encoder_pslld_mm_imm$2', 0
name___X64Encoder_psllq_mm_mm$2 db '__X64Encoder_psllq_mm_mm$2', 0
name___X64Encoder_psllq_mm_m$5 db '__X64Encoder_psllq_mm_m$5', 0
name___X64Encoder_psllq_mm_imm$2 db '__X64Encoder_psllq_mm_imm$2', 0
name___X64Encoder_psrad_mm_mm$2 db '__X64Encoder_psrad_mm_mm$2', 0
name___X64Encoder_psrad_mm_m$5 db '__X64Encoder_psrad_mm_m$5', 0
name___X64Encoder_psrad_mm_imm$2 db '__X64Encoder_psrad_mm_imm$2', 0
name___X64Encoder_psraw_mm_mm$2 db '__X64Encoder_psraw_mm_mm$2', 0
name___X64Encoder_psraw_mm_m$5 db '__X64Encoder_psraw_mm_m$5', 0
name___X64Encoder_psraw_mm_imm$2 db '__X64Encoder_psraw_mm_imm$2', 0
name___X64Encoder_psrlw_mm_mm$2 db '__X64Encoder_psrlw_mm_mm$2', 0
name___X64Encoder_psrlw_mm_m$5 db '__X64Encoder_psrlw_mm_m$5', 0
name___X64Encoder_psrlw_mm_imm$2 db '__X64Encoder_psrlw_mm_imm$2', 0
name___X64Encoder_psrld_mm_mm$2 db '__X64Encoder_psrld_mm_mm$2', 0
name___X64Encoder_psrld_mm_m$5 db '__X64Encoder_psrld_mm_m$5', 0
name___X64Encoder_psrld_mm_imm$2 db '__X64Encoder_psrld_mm_imm$2', 0
name___X64Encoder_psrlq_mm_mm$2 db '__X64Encoder_psrlq_mm_mm$2', 0
name___X64Encoder_psrlq_mm_m$5 db '__X64Encoder_psrlq_mm_m$5', 0
name___X64Encoder_psrlq_mm_imm$2 db '__X64Encoder_psrlq_mm_imm$2', 0
name___X64Encoder_emms$0 db '__X64Encoder_emms$0', 0
name___X64Encoder_pshufw_mm_mm_imm8$3 db '__X64Encoder_pshufw_mm_mm_imm8$3', 0
name___X64Encoder_pshufw_mm_m64_imm8$6 db '__X64Encoder_pshufw_mm_m64_imm8$6', 0
name___X64Encoder_pinsrw_mm_r32_imm8$3 db '__X64Encoder_pinsrw_mm_r32_imm8$3', 0
name___X64Encoder_pinsrw_mm_m16_imm8$6 db '__X64Encoder_pinsrw_mm_m16_imm8$6', 0
name___X64Encoder_pextrw_r64_mm_imm8$3 db '__X64Encoder_pextrw_r64_mm_imm8$3', 0
name___X64Encoder_pmovmskb_r_mm$2 db '__X64Encoder_pmovmskb_r_mm$2', 0
name___X64Encoder_pminub_mm_mm$2 db '__X64Encoder_pminub_mm_mm$2', 0
name___X64Encoder_pminub_mm_m$5 db '__X64Encoder_pminub_mm_m$5', 0
name___X64Encoder_pmaxub_mm_mm$2 db '__X64Encoder_pmaxub_mm_mm$2', 0
name___X64Encoder_pmaxub_mm_m$5 db '__X64Encoder_pmaxub_mm_m$5', 0
name___X64Encoder_pavgb_mm_mm$2 db '__X64Encoder_pavgb_mm_mm$2', 0
name___X64Encoder_pavgb_mm_m$5 db '__X64Encoder_pavgb_mm_m$5', 0
name___X64Encoder_pavgw_mm_mm$2 db '__X64Encoder_pavgw_mm_mm$2', 0
name___X64Encoder_pavgw_mm_m$5 db '__X64Encoder_pavgw_mm_m$5', 0
name___X64Encoder_pmulhuw_mm_mm$2 db '__X64Encoder_pmulhuw_mm_mm$2', 0
name___X64Encoder_pmulhuw_mm_m$5 db '__X64Encoder_pmulhuw_mm_m$5', 0
name___X64Encoder_pminsw_mm_mm$2 db '__X64Encoder_pminsw_mm_mm$2', 0
name___X64Encoder_pminsw_mm_m$5 db '__X64Encoder_pminsw_mm_m$5', 0
name___X64Encoder_pmaxsw_mm_mm$2 db '__X64Encoder_pmaxsw_mm_mm$2', 0
name___X64Encoder_pmaxsw_mm_m$5 db '__X64Encoder_pmaxsw_mm_m$5', 0
name___X64Encoder_psadbw_mm_mm$2 db '__X64Encoder_psadbw_mm_mm$2', 0
name___X64Encoder_psadbw_mm_m$5 db '__X64Encoder_psadbw_mm_m$5', 0
name___X64Encoder_psubq_mm_mm$2 db '__X64Encoder_psubq_mm_mm$2', 0
name___X64Encoder_psubq_mm_m$5 db '__X64Encoder_psubq_mm_m$5', 0
name___X64Encoder_pmuludq_mm_mm$2 db '__X64Encoder_pmuludq_mm_mm$2', 0
name___X64Encoder_pmuludq_mm_m$5 db '__X64Encoder_pmuludq_mm_m$5', 0
name___X64Encoder_psignb_mm_mm$2 db '__X64Encoder_psignb_mm_mm$2', 0
name___X64Encoder_psignb_mm_m$5 db '__X64Encoder_psignb_mm_m$5', 0
name___X64Encoder_psignw_mm_mm$2 db '__X64Encoder_psignw_mm_mm$2', 0
name___X64Encoder_psignw_mm_m$5 db '__X64Encoder_psignw_mm_m$5', 0
name___X64Encoder_psignd_mm_mm$2 db '__X64Encoder_psignd_mm_mm$2', 0
name___X64Encoder_psignd_mm_m$5 db '__X64Encoder_psignd_mm_m$5', 0
name___X64Encoder_pshufb_mm_mm$2 db '__X64Encoder_pshufb_mm_mm$2', 0
name___X64Encoder_pshufb_mm_m$5 db '__X64Encoder_pshufb_mm_m$5', 0
name___X64Encoder_pmulhrsw_mm_mm$2 db '__X64Encoder_pmulhrsw_mm_mm$2', 0
name___X64Encoder_pmulhrsw_mm_m$5 db '__X64Encoder_pmulhrsw_mm_m$5', 0
name___X64Encoder_pmaddubsw_mm_mm$2 db '__X64Encoder_pmaddubsw_mm_mm$2', 0
name___X64Encoder_pmaddubsw_mm_m$5 db '__X64Encoder_pmaddubsw_mm_m$5', 0
name___X64Encoder_phsubw_mm_mm$2 db '__X64Encoder_phsubw_mm_mm$2', 0
name___X64Encoder_phsubw_mm_m$5 db '__X64Encoder_phsubw_mm_m$5', 0
name___X64Encoder_phsubsw_mm_mm$2 db '__X64Encoder_phsubsw_mm_mm$2', 0
name___X64Encoder_phsubsw_mm_m$5 db '__X64Encoder_phsubsw_mm_m$5', 0
name___X64Encoder_phsubd_mm_mm$2 db '__X64Encoder_phsubd_mm_mm$2', 0
name___X64Encoder_phsubd_mm_m$5 db '__X64Encoder_phsubd_mm_m$5', 0
name___X64Encoder_phaddsw_mm_mm$2 db '__X64Encoder_phaddsw_mm_mm$2', 0
name___X64Encoder_phaddsw_mm_m$5 db '__X64Encoder_phaddsw_mm_m$5', 0
name___X64Encoder_phaddw_mm_mm$2 db '__X64Encoder_phaddw_mm_mm$2', 0
name___X64Encoder_phaddw_mm_m$5 db '__X64Encoder_phaddw_mm_m$5', 0
name___X64Encoder_phaddd_mm_mm$2 db '__X64Encoder_phaddd_mm_mm$2', 0
name___X64Encoder_phaddd_mm_m$5 db '__X64Encoder_phaddd_mm_m$5', 0
name___X64Encoder_pabsb_mm_mm$2 db '__X64Encoder_pabsb_mm_mm$2', 0
name___X64Encoder_pabsb_mm_m$5 db '__X64Encoder_pabsb_mm_m$5', 0
name___X64Encoder_pabsw_mm_mm$2 db '__X64Encoder_pabsw_mm_mm$2', 0
name___X64Encoder_pabsw_mm_m$5 db '__X64Encoder_pabsw_mm_m$5', 0
name___X64Encoder_pabsd_mm_mm$2 db '__X64Encoder_pabsd_mm_mm$2', 0
name___X64Encoder_pabsd_mm_m$5 db '__X64Encoder_pabsd_mm_m$5', 0
name___X64Encoder_palignr_mm_mm_imm8$3 db '__X64Encoder_palignr_mm_mm_imm8$3', 0
name___X64Encoder_palignr_mm_m64_imm8$6 db '__X64Encoder_palignr_mm_m64_imm8$6', 0
name___X64Encoder_getCurrentPosition$0 db '__X64Encoder_getCurrentPosition$0', 0
name___PEWriter_constructor$0 db '__PEWriter_constructor$0', 0
name___PEWriter_emitByte$1 db '__PEWriter_emitByte$1', 0
name___PEWriter_emitWord$1 db '__PEWriter_emitWord$1', 0
name___PEWriter_emitDword$1 db '__PEWriter_emitDword$1', 0
name___PEWriter_emitQword$1 db '__PEWriter_emitQword$1', 0
name___PEWriter__emit_HeaderDOS$0 db '__PEWriter__emit_HeaderDOS$0', 0
name___PEWriter__emit_HeaderPE$0 db '__PEWriter__emit_HeaderPE$0', 0
name___PEWriter__emit_HeaderOptional$0 db '__PEWriter__emit_HeaderOptional$0', 0
name___PEWriter__emit_HeaderSections$0 db '__PEWriter__emit_HeaderSections$0', 0
name___PEWriter_create$1 db '__PEWriter_create$1', 0
name___PEWriter_close$0 db '__PEWriter_close$0', 0
name___Buffer_constructor$0 db '__Buffer_constructor$0', 0
name___Buffer_clear$0 db '__Buffer_clear$0', 0
name___Buffer_emitByte$1 db '__Buffer_emitByte$1', 0
name___Buffer_emitWord$1 db '__Buffer_emitWord$1', 0
name___Buffer_emitDword$1 db '__Buffer_emitDword$1', 0
name___Buffer_emitQword$1 db '__Buffer_emitQword$1', 0
name___Buffer_copyBytes$3 db '__Buffer_copyBytes$3', 0
name___Buffer_getSize$0 db '__Buffer_getSize$0', 0
name___Buffer_getCurrentPosition$0 db '__Buffer_getCurrentPosition$0', 0
name___Buffer_setCurrentPosition$2 db '__Buffer_setCurrentPosition$2', 0
name___X64Compiler_constructor$0 db '__X64Compiler_constructor$0', 0
name___X64Compiler_compileToFile$2 db '__X64Compiler_compileToFile$2', 0
name___X64Compiler_compile$2 db '__X64Compiler_compile$2', 0
name___X64Tester_constructor$0 db '__X64Tester_constructor$0', 0
name___X64Tester_compare$2 db '__X64Tester_compare$2', 0
name___X64Tester_emitByte$1 db '__X64Tester_emitByte$1', 0
name___X64Tester_emitWord$1 db '__X64Tester_emitWord$1', 0
name___X64Tester_emitDword$1 db '__X64Tester_emitDword$1', 0
name___X64Tester_emitQword$1 db '__X64Tester_emitQword$1', 0
name___X64Tester_compileSourceFile$2 db '__X64Tester_compileSourceFile$2', 0
name_start db 'start', 0
name_endOfCodeSection db 'out of code section', 0
