format PE64 console 5.0
entry __MOLD_Main
include 'win64a.inc'
; ------------------------------------------------------------------------------
;                                 Code section
; ------------------------------------------------------------------------------
section '.text' code readable executable
stack 1024*1024*4, 1024*1024*4
include 'x64\Variant.asm'
; -----------------------------------------------
; function __AST_constructor$3
; -----------------------------------------------
__AST_constructor$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 7 , readHits= 9 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  child EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  node EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 5 )
  tmp1298 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1299 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1302 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ child ], xmm0
  xor eax, eax
  mov [node + Variant_t.type], eax
  mov [tmp1298 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp1298 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ NodeId ]
  mov [ tmp1298 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1298 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1298 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1298 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1298 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1298 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1298 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1298 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ tmp1298 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1299 ], 1

  mov eax, dword [ NodeId ]
  add eax, dword [ tmp1299 ]
  mov dword [ NodeId ], eax

  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea rcx, [ node ]
  lea rdx, [ child ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: while
; 
l1300:

  cmp [ node  + Variant_t.type], 0
  jz l1301

  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1298 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 50 )
  lea rcx , [ tmp1298 ]
  lea rdx , [ node ]
  call qword [rbx + 8 * 50 ]

  lea  rcx , [ node ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantLoadFromKey

  jmp l1300

l1301:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1298 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore opcode
  restore value
  restore child
  restore node
  restore tmp1298
  restore tmp1299
  restore tmp1302

; -----------------------------------------------
; function __AST__printTreeInternal$2
; -----------------------------------------------
__AST__printTreeInternal$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 15 )
  prefix EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 3 )
  tmp1308 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1311 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1312 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1313 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  oneChild EQU rbp - 136 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  deepIdx EQU rbp - 140 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp1303 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp1304 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  i EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1307 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov dword [ deepIdx ], r8d
  xor eax, eax
  mov [prefix + Variant_t.type], eax
  mov [tmp1308 + Variant_t.type], eax
  mov [tmp1311 + Variant_t.type], eax
  mov [tmp1312 + Variant_t.type], eax
  mov [tmp1313 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx, [ prefix ]
  call __MOLD_VariantDestroy
  lea rcx, [ prefix ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  mov dword [ tmp1303 ], 1

  mov dword [ i ], 0

; 
; -----------------------------
; BEGIN: for i in tmp1304 .. deepIdx
; 
l1305:

  mov eax, dword [ i ]
  cmp eax, dword [ deepIdx ]
  jge l1306

  lea  rcx , [ prefix ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ prefix ]
  call  __MOLD_VariantStringJoin

  mov eax, dword [ i ]
  add eax, dword [ tmp1303 ]
  mov dword [ i ], eax

  jmp l1305

l1306:

; 
; END: for i in tmp1304 .. deepIdx step tmp1303
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1308 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1308  + Variant_t.type], 0
  jz l1309

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1311 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1312 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1313 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt0 ]
  call __MOLD_PrintFormatFromMemory

  jmp l1310

l1309:

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1313 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1312 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt1 ]
  call __MOLD_PrintFormatFromMemory

l1310:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1312 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l1315

l1314:

  mov dword [ tmp1303 ], 1

  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp1303 ]
  mov dword [ tmp1304 ], eax

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  mov r8d , dword [ tmp1304 ]
  call  __AST__printTreeInternal$2

  ret

l1315:

  lea  rcx , [ tmp1312 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l1314 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ prefix ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1308 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1311 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1312 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1313 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore node
  restore deepIdx
  restore prefix
  restore tmp1303
  restore tmp1304
  restore i
  restore tmp1307
  restore tmp1308
  restore tmp1311
  restore tmp1312
  restore tmp1313
  restore oneChild

; -----------------------------------------------
; function __AST_printTree$0
; -----------------------------------------------
__AST_printTree$0_vcall:
__AST_printTree$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp1316 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt2 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp1316 ], 0

  lea rcx , [ this ]
  lea rdx , [ this ]
  mov r8d , dword [ tmp1316 ]
  call  __AST__printTreeInternal$2


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this
  restore tmp1316

; -----------------------------------------------
; function __Parser_constructor$0
; -----------------------------------------------
__Parser_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  tmp1317 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp1317 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp1317 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1317 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal11 ]
  lea  r8 , [ tmp1317 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1317 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp1317

; -----------------------------------------------
; function __Parser__handleError$3
; -----------------------------------------------
__Parser__handleError$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  line EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  column EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  msg EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1318 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1319 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1320 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1321 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1322 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1323 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1324 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ line ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ column ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ msg ], xmm0
  xor eax, eax
  mov [tmp1318 + Variant_t.type], eax
  mov [tmp1319 + Variant_t.type], eax
  mov [tmp1320 + Variant_t.type], eax
  mov [tmp1321 + Variant_t.type], eax
  mov [tmp1322 + Variant_t.type], eax
  mov [tmp1323 + Variant_t.type], eax
  mov [tmp1324 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1324 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp1323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1324 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp1323 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ line ]
  push rdi
  lea  rdi , [ tmp1324 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1323 ]
  lea  rdx , [ tmp1324 ]
  lea  r8 , [ tmp1322 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1321 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1322 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp1321 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ column ]
  push rdi
  lea  rdi , [ tmp1324 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1320 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1321 ]
  lea  rdx , [ tmp1324 ]
  lea  r8 , [ tmp1320 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1319 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1320 ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp1319 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1318 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1319 ]
  lea  rdx , [ msg ]
  lea  r8 , [ tmp1318 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp1318 ]
  call qword [rbx + 8 * 41 ]


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1318 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1319 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1320 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1321 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1322 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1323 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1324 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret


  restore this
  restore line
  restore column
  restore msg
  restore tmp1318
  restore tmp1319
  restore tmp1320
  restore tmp1321
  restore tmp1322
  restore tmp1323
  restore tmp1324

; -----------------------------------------------
; function __Parser__parseInternal$1
; -----------------------------------------------
__Parser__parseInternal$1:

  ; init frame
  ; ----------
  ast EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 8 )
  text EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  input EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  constantsMap EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 5 )
  currentRet EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 42 , readHits= 5 )
  stackValues EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 84 )
  stackNodes EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 16 )
  stackStates EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 8 )
  stackLines EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 2 )
  stackColumns EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 2 )
  buf EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 13 )
  tmp1325 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 28 , readHits= 28 )
  tmp1330 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 51 , readHits= 51 )
  tmp1362 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 21 , readHits= 21 )
  tmp1368 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 42 , readHits= 42 )
  tmp1409 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp1410 EQU rbp - 280 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1436 EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1470 EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  indexBase EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  indexRow EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  acceptRow EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmpBuf EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  act EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  __cse0 EQU rbp - 408 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  __cse1 EQU rbp - 424 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  firstNode EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  lnode EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  prevNode EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 6 )
  currentNode EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  node EQU rbp - 504 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  go EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  goOn EQU rbp - 524 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  masterIter EQU rbp - 528 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  inputIdx EQU rbp - 532 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 2 )
  inputLen EQU rbp - 536 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  line EQU rbp - 540 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 9 )
  column EQU rbp - 544 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 9 )
  lookupByte EQU rbp - 548 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 2 )
  currentAct EQU rbp - 552 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 5 )
  currentIdx EQU rbp - 556 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 50 )
  currentLhs EQU rbp - 560 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  stackIdx EQU rbp - 564 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 64 )
  currentSym EQU rbp - 568 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  currentLen EQU rbp - 572 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp1326 EQU rbp - 576 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 91 , readHits= 91 )
  tmp1327 EQU rbp - 580 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1338 EQU rbp - 584 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1339 EQU rbp - 588 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1348 EQU rbp - 592 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1352 EQU rbp - 596 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp1353 EQU rbp - 600 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 13 , readHits= 13 )
  tmp1355 EQU rbp - 604 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 23 , readHits= 23 )
  tmp1363 EQU rbp - 608 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 14 , readHits= 14 )
  tmp1365 EQU rbp - 612 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1376 EQU rbp - 616 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 53 , readHits= 53 )
  tmp1445 EQU rbp - 620 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1448 EQU rbp - 624 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp1453 EQU rbp - 628 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1454 EQU rbp - 632 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp1457 EQU rbp - 636 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1462 EQU rbp - 640 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  mach EQU rbp - 644 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 4 )
  length EQU rbp - 648 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 4 )
  chr EQU rbp - 652 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 5 )
  next EQU rbp - 656 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  lexerState EQU rbp - 660 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  isMatched EQU rbp - 664 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  numberOfBytesToRead EQU rbp - 668 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 672 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  state EQU rbp - 676 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  cnt EQU rbp - 680 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  actionIdx EQU rbp - 684 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 5 )
  reduceGoOn EQU rbp - 688 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  currentProductionLength EQU rbp - 692 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  currentEmit EQU rbp - 696 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  firstNodeIdx EQU rbp - 700 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 4 )
  maxNodeIdx EQU rbp - 704 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  k EQU rbp - 708 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  goIdx EQU rbp - 712 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 5 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 752

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  xor eax, eax
  mov [input + Variant_t.type], eax
  mov [constantsMap + Variant_t.type], eax
  mov [currentRet + Variant_t.type], eax
  mov [stackValues + Variant_t.type], eax
  mov [stackNodes + Variant_t.type], eax
  mov [stackStates + Variant_t.type], eax
  mov [stackLines + Variant_t.type], eax
  mov [stackColumns + Variant_t.type], eax
  mov [buf + Variant_t.type], eax
  mov [tmp1325 + Variant_t.type], eax
  mov [tmp1330 + Variant_t.type], eax
  mov [tmp1362 + Variant_t.type], eax
  mov [tmp1368 + Variant_t.type], eax
  mov [tmp1409 + Variant_t.type], eax
  mov [tmp1410 + Variant_t.type], eax
  mov [tmp1436 + Variant_t.type], eax
  mov [tmp1470 + Variant_t.type], eax
  mov [indexBase + Variant_t.type], eax
  mov [indexRow + Variant_t.type], eax
  mov [acceptRow + Variant_t.type], eax
  mov [tmpBuf + Variant_t.type], eax
  mov [act + Variant_t.type], eax
  mov [__cse0 + Variant_t.type], eax
  mov [__cse1 + Variant_t.type], eax
  mov [firstNode + Variant_t.type], eax
  mov [lnode + Variant_t.type], eax
  mov [prevNode + Variant_t.type], eax
  mov [currentNode + Variant_t.type], eax
  mov [node + Variant_t.type], eax
  mov [go + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy

  mov dword [ goOn ], 1

  mov dword [ masterIter ], 1

  lea  rcx, [ input ]
  call __MOLD_VariantDestroy
  lea rcx, [ input ]
  lea rdx, [ text ]
  call __MOLD_VariantMove

  mov dword [ inputIdx ], 0

  ; __mold_syscall( 43 )
  lea rcx , [ text ]
  push rdi
  lea  rdi , [ tmp1325 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1325 + Variant_t.value]
  mov dword [ inputLen ], eax

  mov dword [ line ], 1

  mov dword [ column ], 1

  mov dword [ lookupByte ], 0

  mov dword [ tmp1326 ], 0

  mov eax, dword [ inputLen ]
  cmp eax, dword [ tmp1326 ]
  jle l1328

  mov dword [ tmp1326 ], 0

  lea  rcx , [ input ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 31 )
  lea rcx , [ tmp1330 ]
  push rdi
  lea  rdi , [ tmp1325 ]
  call qword [rbx + 8 * 31 ]
  pop rdi

  cmp [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1325 + Variant_t.value]
  mov dword [ lookupByte ], eax

l1328:

l1329:

  mov dword [ inputIdx ], 1

  lea  rcx , [ this ]
  lea  rdx , [ __literal11 ]
  lea  r8 , [ constantsMap ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ currentAct ], 0

  mov dword [ currentIdx ], 0

  mov dword [ currentLhs ], 0

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy

  mov dword [ stackIdx ], 0

  lea  rcx, [ stackValues ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ __const1331 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx, [ stackNodes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ __const1332 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx, [ stackStates ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ __const1333 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx, [ stackLines ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackLines ]
  lea  rdx , [ __const1334 ]
  call  __MOLD_VariantArrayCreateFromInitList

  lea  rcx, [ stackColumns ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackColumns ]
  lea  rdx , [ __const1335 ]
  call  __MOLD_VariantArrayCreateFromInitList

  mov [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ lookupByte ]
  mov [ tmp1325 + Variant_t.value], rax

  ; __mold_syscall( 32 )
  lea rcx , [ tmp1325 ]
  push rdi
  lea  rdi , [ tmp1330 ]
  call qword [rbx + 8 * 32 ]
  pop rdi

  lea  rcx, [ buf ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal6 ]
  lea  rdx , [ tmp1330 ]
  lea  r8 , [ buf ]
  call  __MOLD_VariantStringJoin

  mov dword [ currentSym ], 0

  mov dword [ currentLen ], 0

; 
; -----------------------------
; BEGIN: while
; 
l1336:

  mov dword [ tmp1338 ], 1

  mov eax, dword [ goOn ]
  cmp eax, dword [ tmp1338 ]
  jnz l1337

  mov dword [ tmp1339 ], 1

  mov eax, dword [ SCANERLESS_MODE_ENABLED ]
  cmp eax, dword [ tmp1339 ]
  jnz l1340

  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1325 + Variant_t.value]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ LexerSelectLUT ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1330 + Variant_t.value]
  mov dword [ mach ], eax

  mov dword [ currentSym ], 0

  mov dword [ currentLen ], 0

  jmp l1341

l1340:

  mov dword [ mach ], 0

l1341:

  lea  rcx , [ LexerIndexBaseLUT ]
  lea  rdx , [ mach ]
  lea  r8 , [ indexBase ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ LexerIndexLUT ]
  lea  rdx , [ mach ]
  lea  r8 , [ indexRow ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ LexerAcceptLUT ]
  lea  rdx , [ mach ]
  lea  r8 , [ acceptRow ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1338 ], 0

  mov dword [ tmp1326 ], -1

  mov eax, dword [ mach ]
  cmp eax, dword [ tmp1326 ]
  jle l1342

  mov dword [ tmp1326 ], 0

  mov dword [ tmp1338 ], 0
  mov ecx, dword [ currentSym ]
  cmp ecx, dword [ tmp1326 ]
  setz byte [ tmp1338 ]

l1342:

  cmp dword [ tmp1338 ], 0
  jz l1343

  mov dword [ length ], 0

  mov dword [ chr ], 0

  mov dword [ tmp1326 ], 0

  lea  rcx , [ buf ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 31 )
  lea rcx , [ tmp1325 ]
  push rdi
  lea  rdi , [ tmp1330 ]
  call qword [rbx + 8 * 31 ]
  pop rdi

  cmp [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1330 + Variant_t.value]
  mov dword [ next ], eax

  mov dword [ lexerState ], 0

; 
; -----------------------------
; BEGIN: while
; 
l1345:

  mov dword [ tmp1339 ], 0

  mov dword [ tmp1326 ], 0

  mov eax, dword [ lexerState ]
  cmp eax, dword [ tmp1326 ]
  jl l1347

  mov dword [ tmp1326 ], 0

  mov dword [ tmp1339 ], 0
  mov ecx, dword [ next ]
  cmp ecx, dword [ tmp1326 ]
  setnz byte [ tmp1339 ]

l1347:

  cmp dword [ tmp1339 ], 0
  jz l1346

  mov dword [ isMatched ], 0

  lea  rcx , [ indexRow ]
  lea  rdx , [ lexerState ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ indexBase ]
  lea  rdx , [ tmp1325 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantAdd

  cmp [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1330 + Variant_t.value]
  mov dword [ chr ], eax

  mov dword [ lexerState ], -1

; 
; -----------------------------
; BEGIN: while
; 
l1349:

  mov dword [ tmp1348 ], 0

  mov dword [ tmp1353 ], 0

  mov eax, dword [ isMatched ]
  cmp eax, dword [ tmp1353 ]
  jnz l1351

  lea  rcx , [ LexerCharsLUT ]
  lea  rdx , [ chr ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1326 ], -1

  mov [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1325 + Variant_t.value], rax

  lea  rcx , [ tmp1325 ]
  lea  rdx , [ tmp1330 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1348 ], eax

l1351:

  cmp dword [ tmp1348 ], 0
  jz l1350

  mov dword [ tmp1352 ], 0

  mov [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ next ]
  mov [ tmp1325 + Variant_t.value], rax

  lea  rcx , [ LexerCharsLUT ]
  lea  rdx , [ chr ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp1325 ]
  lea rdx, [ tmp1330 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l1354

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ next ]
  mov [ tmp1330 + Variant_t.value], rax

  mov dword [ tmp1355 ], 1

  mov eax, dword [ chr ]
  add eax, dword [ tmp1355 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ LexerCharsLUT ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1330 ]
  lea  rdx , [ tmp1325 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp1352 ], eax

l1354:

  cmp dword [ tmp1352 ], 0
  jz l1356

  mov dword [ isMatched ], 1

  jmp l1357

l1356:

  mov dword [ tmp1326 ], 2

  mov eax, dword [ chr ]
  add eax, dword [ tmp1326 ]
  mov dword [ chr ], eax

l1357:

  jmp l1349

l1350:

; 
; END: while
; -----------------------------
; 
  mov dword [ tmp1353 ], 1

  mov eax, dword [ isMatched ]
  cmp eax, dword [ tmp1353 ]
  jnz l1358

  mov dword [ tmp1355 ], 2

  mov  eax, dword [ chr ]
  mov  ecx, dword [ tmp1355 ]
  cdq
  idiv ecx
  mov  dword [ tmp1326 ], eax

  lea  rcx , [ LexerTransLUT ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1325 + Variant_t.value]
  mov dword [ lexerState ], eax

  lea  rcx , [ acceptRow ]
  lea  rdx , [ lexerState ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1326 ], 0

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1330 + Variant_t.value], rax

  lea rcx, [ tmp1325 ]
  lea rdx, [ tmp1330 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1360

  mov dword [ tmp1326 ], 1

  mov eax, dword [ length ]
  add eax, dword [ tmp1326 ]
  mov dword [ currentLen ], eax

  lea  rcx , [ acceptRow ]
  lea  rdx , [ lexerState ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1326 ], 1

  mov [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1362 + Variant_t.value], rax

  lea  rcx , [ tmp1325 ]
  lea  rdx , [ tmp1362 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantSub

  cmp [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1330 + Variant_t.value]
  mov dword [ currentSym ], eax

  mov dword [ tmp1363 ], 1

  mov dword [ tmp1326 ], 0

  mov eax, dword [ currentSym ]
  cmp eax, dword [ tmp1326 ]
  jz l1364

  lea  rcx , [ SymbolsGreedyLUT ]
  lea  rdx , [ currentSym ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1326 ], 0

  mov [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1362 + Variant_t.value], rax

  lea  rcx , [ tmp1330 ]
  lea  rdx , [ tmp1362 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1363 ], eax

l1364:

  cmp dword [ tmp1363 ], 0
  jz l1366

  mov dword [ lexerState ], -1

l1366:

l1367:

l1360:

l1361:

  mov dword [ tmp1326 ], 1

  mov eax, dword [ length ]
  add eax, dword [ tmp1326 ]
  mov dword [ length ], eax

  mov [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ length ]
  mov [ tmp1325 + Variant_t.value], rax

  ; __mold_syscall( 43 )
  lea rcx , [ buf ]
  push rdi
  lea  rdi , [ tmp1368 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea  rcx , [ tmp1325 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantSub

  mov dword [ tmp1326 ], 2

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1368 + Variant_t.value], rax

  lea  rcx , [ tmp1330 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ tmp1362 ]
  call  __MOLD_VariantAdd

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ numberOfBytesToRead ], eax

  mov dword [ tmp1326 ], 0

  mov eax, dword [ numberOfBytesToRead ]
  cmp eax, dword [ tmp1326 ]
  jle l1369

  lea  rcx , [ input ]
  lea  rdx , [ inputIdx ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 31 )
  lea rcx , [ tmp1368 ]
  push rdi
  lea  rdi , [ tmp1362 ]
  call qword [rbx + 8 * 31 ]
  pop rdi

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ lookupByte ], eax

  mov dword [ tmp1326 ], 1

  mov eax, dword [ inputIdx ]
  add eax, dword [ tmp1326 ]
  mov dword [ inputIdx ], eax

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ lookupByte ]
  mov [ tmp1368 + Variant_t.value], rax

  ; __mold_syscall( 32 )
  lea rcx , [ tmp1368 ]
  push rdi
  lea  rdi , [ tmp1362 ]
  call qword [rbx + 8 * 32 ]
  pop rdi

  lea  rcx , [ buf ]
  lea  rdx , [ tmp1362 ]
  lea  r8 , [ buf ]
  call  __MOLD_VariantStringJoin

l1369:

l1370:

  lea  rcx , [ buf ]
  lea  rdx , [ length ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 31 )
  lea rcx , [ tmp1368 ]
  push rdi
  lea  rdi , [ tmp1362 ]
  call qword [rbx + 8 * 31 ]
  pop rdi

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ next ], eax

l1358:

l1359:

  jmp l1345

l1346:

; 
; END: while
; -----------------------------
; 
l1343:

l1344:

  mov dword [ tmp1338 ], 0

  mov dword [ tmp1353 ], 0

  mov eax, dword [ SCANERLESS_MODE_ENABLED ]
  cmp eax, dword [ tmp1353 ]
  jnz l1371

  mov dword [ tmp1326 ], 54

  mov dword [ tmp1338 ], 0
  mov ecx, dword [ currentSym ]
  cmp ecx, dword [ tmp1326 ]
  setz byte [ tmp1338 ]

l1371:

  cmp dword [ tmp1338 ], 0
  jz l1372

  mov dword [ tmp1326 ], 1

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp1355 .. currentLen
; 
l1374:

  mov eax, dword [ idx ]
  cmp eax, dword [ currentLen ]
  jge l1375

  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 31 )
  lea rcx , [ tmp1368 ]
  push rdi
  lea  rdi , [ tmp1362 ]
  call qword [rbx + 8 * 31 ]
  pop rdi

  mov dword [ tmp1376 ], 10

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1376 ]
  mov [ tmp1368 + Variant_t.value], rax

  lea rcx, [ tmp1362 ]
  lea rdx, [ tmp1368 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1377

  mov dword [ tmp1376 ], 1

  mov eax, dword [ line ]
  add eax, dword [ tmp1376 ]
  mov dword [ line ], eax

  mov dword [ column ], 1

  jmp l1378

l1377:

  mov dword [ tmp1376 ], 1

  mov eax, dword [ column ]
  add eax, dword [ tmp1376 ]
  mov dword [ column ], eax

l1378:

  mov eax, dword [ idx ]
  add eax, dword [ tmp1326 ]
  mov dword [ idx ], eax

  jmp l1374

l1375:

; 
; END: for idx in tmp1355 .. currentLen step tmp1326
; -----------------------------
; 
  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLen ]
  mov [ tmp1368 + Variant_t.value], rax

  mov dword [ tmp1355 ], -1

  mov [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1355 ]
  mov [ tmp1362 + Variant_t.value], rax

  ; __mold_syscall( 55 )
  lea rcx , [ buf ]
  lea rdx , [ tmp1368 ]
  lea r8 , [ tmp1362 ]
  push rdi
  lea  rdi , [ buf ]
  call qword [rbx + 8 * 55 ]
  pop rdi

  mov dword [ currentSym ], 0

  mov dword [ currentLen ], 0

  jmp l1373

l1372:

  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1362 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ state ], eax

  lea  rcx , [ ParserActionsLUT ]
  lea  rdx , [ state ]
  lea  r8 , [ act ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 43 )
  lea rcx , [ act ]
  push rdi
  lea  rdi , [ tmp1362 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ cnt ], eax

  mov dword [ currentAct ], -1

  mov dword [ actionIdx ], 0

; 
; -----------------------------
; BEGIN: while
; 
l1379:

  mov dword [ tmp1352 ], 0

  mov eax, dword [ actionIdx ]
  cmp eax, dword [ cnt ]
  jge l1381

  mov dword [ tmp1355 ], -1

  mov dword [ tmp1352 ], 0
  mov ecx, dword [ currentAct ]
  cmp ecx, dword [ tmp1355 ]
  setz byte [ tmp1352 ]

l1381:

  cmp dword [ tmp1352 ], 0
  jz l1380

  lea  rcx , [ act ]
  lea  rdx , [ actionIdx ]
  lea  r8 , [ tmp1362 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentSym ]
  mov [ tmp1368 + Variant_t.value], rax

  lea rcx, [ tmp1362 ]
  lea rdx, [ tmp1368 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1382

  mov dword [ tmp1326 ], 1

  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1326 ]
  mov dword [ tmp1355 ], eax

  lea  rcx , [ act ]
  lea  rdx , [ tmp1355 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1368 + Variant_t.value]
  mov dword [ currentIdx ], eax

  mov dword [ tmp1326 ], 2

  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1326 ]
  mov dword [ tmp1355 ], eax

  lea  rcx , [ act ]
  lea  rdx , [ tmp1355 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1368 + Variant_t.value]
  mov dword [ currentAct ], eax

l1382:

l1383:

  mov dword [ tmp1355 ], 3

  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1355 ]
  mov dword [ actionIdx ], eax

  jmp l1379

l1380:

; 
; END: while
; -----------------------------
; 
  mov dword [ tmp1355 ], -1

  mov eax, dword [ currentAct ]
  cmp eax, dword [ tmp1355 ]
  jnz l1384

  lea  rcx , [ ParserActionsDefaultLUT ]
  lea  rdx , [ state ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1368 + Variant_t.value]
  mov dword [ currentIdx ], eax

  mov dword [ tmp1355 ], -1

  mov eax, dword [ currentIdx ]
  cmp eax, dword [ tmp1355 ]
  jle l1386

  mov dword [ currentAct ], 1

  jmp l1387

l1386:

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1368 + Variant_t.value], rax

  mov [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1362 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1368 ]
  lea r8 , [ tmp1362 ]
; WARNING: Failed to get variable size: __literal15
  lea r9 , [ __literal15 ]
  call  __Parser__handleError$3

l1387:

l1384:

l1385:

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentAct ]
  mov [ tmp1368 + Variant_t.value], rax

  mov dword [ tmp1355 ], 2

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1355 ]
  mov [ tmp1330 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1368 ]
  lea rdx , [ tmp1330 ]
  push rdi
  lea  rdi , [ tmp1362 ]
  call qword [rbx + 8 * 35 ]
  pop rdi

  mov dword [ tmp1355 ], 0

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1355 ]
  mov [ tmp1330 + Variant_t.value], rax

  lea rcx, [ tmp1362 ]
  lea rdx, [ tmp1330 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1388

  mov dword [ tmp1355 ], 1

  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1355 ]
  mov dword [ stackIdx ], eax

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentIdx ]
  mov [ tmp1330 + Variant_t.value], rax

  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1330 + Variant_t.value], rax

  lea  rcx , [ stackLines ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1330 + Variant_t.value], rax

  lea  rcx , [ stackColumns ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx, [ tmp1330 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp1326 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1326 ]
  mov dword [ tmp1355 ], eax

  mov dword [ tmp1326 ], 0

  mov [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1362 + Variant_t.value], rax

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLen ]
  mov [ tmp1368 + Variant_t.value], rax

  ; __mold_syscall( 55 )
  lea rcx , [ buf ]
  lea rdx , [ tmp1362 ]
  lea r8 , [ tmp1368 ]
  push rdi
  lea  rdi , [ tmp1330 ]
  call qword [rbx + 8 * 55 ]
  pop rdi

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1355 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp1355 ], 1

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp1326 .. currentLen
; 
l1390:

  mov eax, dword [ idx ]
  cmp eax, dword [ currentLen ]
  jge l1391

  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 31 )
  lea rcx , [ tmp1368 ]
  push rdi
  lea  rdi , [ tmp1330 ]
  call qword [rbx + 8 * 31 ]
  pop rdi

  mov dword [ tmp1376 ], 10

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1376 ]
  mov [ tmp1368 + Variant_t.value], rax

  lea rcx, [ tmp1330 ]
  lea rdx, [ tmp1368 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1392

  mov dword [ tmp1376 ], 1

  mov eax, dword [ line ]
  add eax, dword [ tmp1376 ]
  mov dword [ line ], eax

  mov dword [ column ], 1

  jmp l1393

l1392:

  mov dword [ tmp1376 ], 1

  mov eax, dword [ column ]
  add eax, dword [ tmp1376 ]
  mov dword [ column ], eax

l1393:

  mov eax, dword [ idx ]
  add eax, dword [ tmp1355 ]
  mov dword [ idx ], eax

  jmp l1390

l1391:

; 
; END: for idx in tmp1326 .. currentLen step tmp1355
; -----------------------------
; 
  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLen ]
  mov [ tmp1368 + Variant_t.value], rax

  mov dword [ tmp1326 ], -1

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1330 + Variant_t.value], rax

  ; __mold_syscall( 55 )
  lea rcx , [ buf ]
  lea rdx , [ tmp1368 ]
  lea r8 , [ tmp1330 ]
  push rdi
  lea  rdi , [ buf ]
  call qword [rbx + 8 * 55 ]
  pop rdi

  mov dword [ currentSym ], 0

  mov dword [ currentLen ], 0

l1388:

l1389:

  mov dword [ reduceGoOn ], 1

; 
; -----------------------------
; BEGIN: while
; 
l1394:

  mov dword [ tmp1353 ], 0

  mov dword [ tmp1365 ], 1

  mov eax, dword [ reduceGoOn ]
  cmp eax, dword [ tmp1365 ]
  jnz l1396

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentAct ]
  mov [ tmp1368 + Variant_t.value], rax

  mov dword [ tmp1326 ], 1

  mov [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1362 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ tmp1368 ]
  lea rdx , [ tmp1362 ]
  push rdi
  lea  rdi , [ tmp1330 ]
  call qword [rbx + 8 * 35 ]
  pop rdi

  mov dword [ tmp1326 ], 0

  mov [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1362 + Variant_t.value], rax

  lea  rcx , [ tmp1330 ]
  lea  rdx , [ tmp1362 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp1353 ], eax

l1396:

  cmp dword [ tmp1353 ], 0
  jz l1395

  mov dword [ tmp1355 ], 3

  mov eax, dword [ tmp1355 ]
  imul eax, dword [ currentIdx ]
  mov dword [ tmp1326 ], eax

  mov [ __cse0 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ __cse0 + Variant_t.value], rax

  mov dword [ tmp1326 ], 2

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1368 + Variant_t.value], rax

  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantAdd

  cmp [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1330 + Variant_t.value]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ GrammarProductionsLUT ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1362 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ currentLhs ], eax

  mov dword [ tmp1326 ], 1

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1368 + Variant_t.value], rax

  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantAdd

  cmp [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1330 + Variant_t.value]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ GrammarProductionsLUT ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1362 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ currentProductionLength ], eax

  mov dword [ tmp1326 ], 0

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1368 + Variant_t.value], rax

  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantAdd

  cmp [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1330 + Variant_t.value]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ GrammarProductionsLUT ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1362 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1362 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1362 + Variant_t.value]
  mov dword [ currentEmit ], eax

  mov eax, dword [ stackIdx ]
  sub eax, dword [ currentProductionLength ]
  mov dword [ tmp1355 ], eax

  mov dword [ tmp1376 ], 1

  mov eax, dword [ tmp1355 ]
  add eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32

; 
; -----------------------------
; BEGIN: switch currentIdx
; 
  mov eax, dword [ currentIdx ]
  sub eax, 5
  cmp eax, 180
  ja l1398
  movsx rax, word [ __jmptable1399 + rax * 2]
  lea rax, [ l1398 + rax]
  jmp rax

l1400:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy

  jmp l1397

l1401:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal16 ]
  call __MOLD_VariantMove

  jmp l1397

l1402:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantMove

  jmp l1397

l1403:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal18 ]
  call __MOLD_VariantMove

  jmp l1397

l1404:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal19 ]
  call __MOLD_VariantMove

  jmp l1397

l1405:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal20 ]
  call __MOLD_VariantMove

  jmp l1397

l1406:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1330 ]
  lea  r8 , [ tmp1362 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1362  + Variant_t.type], 0
  jz l1407

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1330 + Variant_t.value], rax

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1368 + Variant_t.value], rax

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx, [ tmp1410 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal21 ]
  lea  rdx , [ tmp1325 ]
  lea  r8 , [ tmp1410 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1409 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1410 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1409 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1330 ]
  lea r8 , [ tmp1368 ]
  lea r9 , [ tmp1409 ]
  call  __Parser__handleError$3

l1407:

l1408:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l1397

l1411:

  mov dword [ tmp1376 ], 3

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l1397

l1412:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 50 )
  lea rcx , [ currentRet ]
  lea rdx , [ tmp1330 ]
  call qword [rbx + 8 * 50 ]

  jmp l1397

l1413:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l1397

l1414:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentRet ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1330 + Variant_t.value], 0

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ currentRet ]
  lea  rdx , [ tmp1330 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantStoreAtIndex

  jmp l1397

l1415:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal23 ]
  call __MOLD_VariantMove

  jmp l1397

l1416:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal24 ]
  call __MOLD_VariantMove

  jmp l1397

l1417:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentRet ]
  call  __MOLD_VariantMapCreate

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ currentRet ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1397

l1418:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentRet ]
  call  __MOLD_VariantMapCreate

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ currentRet ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ currentRet ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1397

l1419:

  mov dword [ tmp1376 ], 1

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l1397

l1420:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal27 ]
  call __MOLD_VariantMove

  jmp l1397

l1421:

  mov dword [ tmp1326 ], 1

  mov [ currentRet + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ currentRet + Variant_t.value], rax

  jmp l1397

l1422:

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentRet ]
  call  __MOLD_VariantArrayCreate

  jmp l1397

l1423:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1368 ]
  lea  rdx , [ tmp1330 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantAdd

  jmp l1397

l1424:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1330 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantSub

  jmp l1397

l1425:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1368 ]
  lea  rdx , [ tmp1330 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantMul

  jmp l1397

l1426:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1330 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantDiv

  jmp l1397

l1427:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1368 ]
  lea  rdx , [ tmp1330 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStringJoin

  jmp l1397

l1428:

  mov dword [ tmp1376 ], 2

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1330 ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantDivAsInteger

  jmp l1397

l1429:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp1368 ]
  lea  rdx , [ currentRet ]
  call  __MOLD_VariantNeg

  jmp l1397

l1430:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1368 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromKey

  cmp [ currentRet + Variant_t.type ], 0
  jnz l1431

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1368 + Variant_t.value], rax

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1330 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1368 ]
  lea r8 , [ tmp1330 ]
; WARNING: Failed to get variable size: __literal28
  lea r9 , [ __literal28 ]
  call  __Parser__handleError$3

l1431:

l1432:

  jmp l1397

l1433:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 33 )
  lea rcx , [ tmp1330 ]
  push rdi
  lea  rdi , [ currentRet ]
  call qword [rbx + 8 * 33 ]
  pop rdi

  jmp l1397

l1434:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 34 )
  lea rcx , [ tmp1330 ]
  push rdi
  lea  rdi , [ currentRet ]
  call qword [rbx + 8 * 34 ]
  pop rdi

  jmp l1397

l1435:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1326 ], eax

  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1326 ]
  lea  r8 , [ __cse1 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1326 ], 1

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1330 + Variant_t.value], rax

  ; __mold_syscall( 43 )
  lea rcx , [ __cse1 ]
  push rdi
  lea  rdi , [ tmp1325 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp1326 ], 2

  mov [ tmp1436 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1326 ]
  mov [ tmp1436 + Variant_t.value], rax

  lea  rcx , [ tmp1325 ]
  lea  rdx , [ tmp1436 ]
  lea  r8 , [ tmp1368 ]
  call  __MOLD_VariantSub

  ; __mold_syscall( 55 )
  lea rcx , [ __cse1 ]
  lea rdx , [ tmp1330 ]
  lea r8 , [ tmp1368 ]
  push rdi
  lea  rdi , [ currentRet ]
  call qword [rbx + 8 * 55 ]
  pop rdi

  jmp l1397

l1437:

  mov dword [ tmp1363 ], 1

  mov eax, dword [ tmp1363 ]
  mov [ currentRet + Variant_t.type], VARIANT_BOOLEAN
  mov [ currentRet + Variant_t.value], rax

  jmp l1397

l1438:

  mov dword [ tmp1363 ], 0

  mov eax, dword [ tmp1363 ]
  mov [ currentRet + Variant_t.type], VARIANT_BOOLEAN
  mov [ currentRet + Variant_t.value], rax

  jmp l1397

l1439:

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1368 + Variant_t.value], rax

  mov [ tmp1330 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1330 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp1368 ]
  lea r8 , [ tmp1330 ]
; WARNING: Failed to get variable size: __literal29
  lea r9 , [ __literal29 ]
  call  __Parser__handleError$3

  jmp l1397

l1398:

l1397:

; 
; END: switch currentIdx
; -----------------------------
; 
  mov eax, dword [ stackIdx ]
  sub eax, dword [ currentProductionLength ]
  mov dword [ stackIdx ], eax

  mov dword [ tmp1326 ], 1

  mov eax, dword [ currentProductionLength ]
  cmp eax, dword [ tmp1326 ]
  jle l1440

  mov dword [ tmp1326 ], 1

  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1326 ]
  mov dword [ firstNodeIdx ], eax

  lea  rcx , [ stackNodes ]
  lea  rdx , [ firstNodeIdx ]
  lea  r8 , [ firstNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov eax, dword [ stackIdx ]
  add eax, dword [ currentProductionLength ]
  mov dword [ maxNodeIdx ], eax

; 
; -----------------------------
; BEGIN: while
; 
l1442:

  mov dword [ tmp1365 ], 0

  cmp [ firstNode + Variant_t.type ], 0
  jnz l1444

  mov dword [ tmp1365 ], 0
  mov ecx, dword [ firstNodeIdx ]
  cmp ecx, dword [ maxNodeIdx ]
  setl byte [ tmp1365 ]

l1444:

  cmp dword [ tmp1365 ], 0
  jz l1443

  mov dword [ tmp1326 ], 1

  mov eax, dword [ firstNodeIdx ]
  add eax, dword [ tmp1326 ]
  mov dword [ firstNodeIdx ], eax

  lea  rcx , [ stackNodes ]
  lea  rdx , [ firstNodeIdx ]
  lea  r8 , [ firstNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l1442

l1443:

; 
; END: while
; -----------------------------
; 
  cmp [ firstNode  + Variant_t.type], 0
  jz l1446

  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ lnode ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ lnode  + Variant_t.type], 0
  jz l1449

  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ prevNode ]
  lea rdx, [ lnode ]
  call __MOLD_VariantMove

  jmp l1450

l1449:

  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ firstNode ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy

l1450:

  mov dword [ tmp1326 ], 1

  mov dword [ k ], 0

; 
; -----------------------------
; BEGIN: for k in tmp1376 .. currentProductionLength
; 
l1451:

  mov eax, dword [ k ]
  cmp eax, dword [ currentProductionLength ]
  jge l1452

  mov eax, dword [ stackIdx ]
  add eax, dword [ k ]
  mov dword [ tmp1453 ], eax

  mov dword [ tmp1454 ], 1

  mov eax, dword [ tmp1453 ]
  add eax, dword [ tmp1454 ]
  mov dword [ tmp1355 ], eax

  lea  rcx , [ stackNodes ]
  lea  rdx , [ tmp1355 ]
  lea  r8 , [ currentNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ currentNode  + Variant_t.type], 0
  jz l1455

  cmp [ prevNode  + Variant_t.type], 0
  jz l1458

; 
; -----------------------------
; BEGIN: while
; 
l1460:

  lea  rcx , [ prevNode ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ tmp1330 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1330  + Variant_t.type], 0
  jz l1461

  lea  rcx , [ prevNode ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ prevNode ]
  call  __MOLD_VariantLoadFromKey

  jmp l1460

l1461:

; 
; END: while
; -----------------------------
; 
  lea  rcx , [ prevNode ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ currentNode ]
  call  __MOLD_VariantStoreAtKey

l1458:

l1459:

  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ prevNode ]
  lea rdx, [ currentNode ]
  call __MOLD_VariantMove

l1455:

l1456:

  mov eax, dword [ k ]
  add eax, dword [ tmp1326 ]
  mov dword [ k ], eax

  jmp l1451

l1452:

; 
; END: for k in tmp1376 .. currentProductionLength step tmp1326
; -----------------------------
; 
l1446:

l1447:

l1440:

l1441:

  mov dword [ tmp1376 ], 0

  mov eax, dword [ currentEmit ]
  cmp eax, dword [ tmp1376 ]
  jz l1463

  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea  rcx, [ node ]
  lea  rdx, [vtable_AST]
  call __MOLD_VariantObjectCreate

  mov [ tmp1368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentEmit ]
  mov [ tmp1368 + Variant_t.value], rax

  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1436 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ node ]
  lea rdx , [ tmp1368 ]
  lea r8 , [ currentRet ]
  lea r9 , [ tmp1436 ]
  lea  rax , [ tmp1325 ]
  call  __AST_constructor$3

  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1325 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1325 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantStoreAtKey

l1463:

l1464:

  mov dword [ tmp1376 ], 142

  mov eax, dword [ currentLhs ]
  cmp eax, dword [ tmp1376 ]
  jnz l1465

  mov dword [ reduceGoOn ], 0

  jmp l1466

l1465:

  mov dword [ goIdx ], 0

  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1325 + Variant_t.value]
  mov dword [ state ], eax

  lea  rcx , [ ParserGotoLUT ]
  lea  rdx , [ state ]
  lea  r8 , [ go ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 43 )
  lea rcx , [ go ]
  push rdi
  lea  rdi , [ tmp1325 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp1325 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1325 + Variant_t.value]
  mov dword [ cnt ], eax

  mov dword [ currentAct ], -1

; 
; -----------------------------
; BEGIN: while
; 
l1467:

  mov dword [ tmp1445 ], 0

  mov eax, dword [ goIdx ]
  cmp eax, dword [ cnt ]
  jge l1469

  mov dword [ tmp1376 ], -1

  mov dword [ tmp1445 ], 0
  mov ecx, dword [ currentAct ]
  cmp ecx, dword [ tmp1376 ]
  setz byte [ tmp1445 ]

l1469:

  cmp dword [ tmp1445 ], 0
  jz l1468

  lea  rcx , [ go ]
  lea  rdx , [ goIdx ]
  lea  r8 , [ tmp1325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov [ tmp1470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLhs ]
  mov [ tmp1470 + Variant_t.value], rax

  lea rcx, [ tmp1325 ]
  lea rdx, [ tmp1470 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1471

  mov dword [ tmp1326 ], 1

  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1326 ]
  mov dword [ tmp1376 ], eax

  lea  rcx , [ go ]
  lea  rdx , [ tmp1376 ]
  lea  r8 , [ tmp1470 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1470 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1470 + Variant_t.value]
  mov dword [ currentIdx ], eax

  mov dword [ tmp1326 ], 2

  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1326 ]
  mov dword [ tmp1376 ], eax

  lea  rcx , [ go ]
  lea  rdx , [ tmp1376 ]
  lea  r8 , [ tmp1470 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp1470 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1470 + Variant_t.value]
  mov dword [ currentAct ], eax

l1471:

l1472:

  mov dword [ tmp1376 ], 3

  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1376 ]
  mov dword [ goIdx ], eax

  jmp l1467

l1468:

; 
; END: while
; -----------------------------
; 
  mov dword [ tmp1376 ], 1

  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1376 ]
  mov dword [ stackIdx ], eax

  lea  rcx, [ tmp1470 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1470 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ stackValues ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov [ tmp1470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1470 + Variant_t.value], rax

  lea  rcx , [ stackLines ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1470 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov [ tmp1470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1470 + Variant_t.value], rax

  lea  rcx , [ stackColumns ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1470 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov [ tmp1470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentIdx ]
  mov [ tmp1470 + Variant_t.value], rax

  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1470 ]
  call  __MOLD_VariantStoreAtIndex_int32

l1466:

  jmp l1394

l1395:

; 
; END: while
; -----------------------------
; 
  mov dword [ tmp1376 ], 0

  mov eax, dword [ currentIdx ]
  cmp eax, dword [ tmp1376 ]
  jnz l1473

  mov dword [ goOn ], 0

l1473:

l1474:

  mov dword [ tmp1376 ], 1

  mov eax, dword [ masterIter ]
  add eax, dword [ tmp1376 ]
  mov dword [ masterIter ], eax

  mov dword [ tmp1376 ], 1000000

  mov eax, dword [ masterIter ]
  cmp eax, dword [ tmp1376 ]
  jle l1475

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal32
  lea rcx , [ __literal32 ]
  call qword [rbx + 8 * 41 ]

l1475:

l1476:

l1373:

  jmp l1336

l1337:

; 
; END: while
; -----------------------------
; 
  mov dword [ tmp1376 ], 0

  lea  rcx , [ stackNodes ]
  lea  rdx , [ tmp1376 ]
  lea  r8 , [ ast ]
  call  __MOLD_VariantLoadFromIndex_int32


  ; clean frame
  ; -----------
  lea  rcx, [ input ]
  call __MOLD_VariantDestroy
  lea  rcx, [ constantsMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackNodes ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackStates ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackLines ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackColumns ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buf ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1325 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1330 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1362 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1368 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1409 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1410 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1436 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1470 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ indexBase ]
  call __MOLD_VariantDestroy
  lea  rcx, [ indexRow ]
  call __MOLD_VariantDestroy
  lea  rcx, [ acceptRow ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmpBuf ]
  call __MOLD_VariantDestroy
  lea  rcx, [ act ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse0 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ firstNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lnode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea  rcx, [ go ]
  call __MOLD_VariantDestroy

  add  rsp, 752
  pop  rdi
  pop  rbp
  ret


  restore this
  restore text
  restore ast
  restore goOn
  restore masterIter
  restore input
  restore inputIdx
  restore inputLen
  restore line
  restore column
  restore lookupByte
  restore constantsMap
  restore currentAct
  restore currentIdx
  restore currentLhs
  restore currentRet
  restore stackIdx
  restore stackValues
  restore stackNodes
  restore stackStates
  restore stackLines
  restore stackColumns
  restore buf
  restore currentSym
  restore currentLen
  restore tmp1325
  restore tmp1326
  restore tmp1327
  restore tmp1330
  restore tmp1338
  restore tmp1339
  restore tmp1348
  restore tmp1352
  restore tmp1353
  restore tmp1355
  restore tmp1362
  restore tmp1363
  restore tmp1365
  restore tmp1368
  restore tmp1376
  restore tmp1409
  restore tmp1410
  restore tmp1436
  restore tmp1445
  restore tmp1448
  restore tmp1453
  restore tmp1454
  restore tmp1457
  restore tmp1462
  restore tmp1470
  restore mach
  restore indexBase
  restore indexRow
  restore acceptRow
  restore length
  restore chr
  restore next
  restore lexerState
  restore isMatched
  restore numberOfBytesToRead
  restore tmpBuf
  restore idx
  restore state
  restore act
  restore cnt
  restore actionIdx
  restore reduceGoOn
  restore currentProductionLength
  restore currentEmit
  restore __cse0
  restore __cse1
  restore firstNodeIdx
  restore firstNode
  restore maxNodeIdx
  restore lnode
  restore prevNode
  restore k
  restore currentNode
  restore node
  restore goIdx
  restore go

; -----------------------------------------------
; function __Parser_parseFile$1
; -----------------------------------------------
__Parser_parseFile$1_vcall:
__Parser_parseFile$1:

  ; init frame
  ; ----------
  ast EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 2 )
  path EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  source EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ path ], xmm0
  xor eax, eax
  mov [source + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 29 )
  lea rcx , [ path ]
  push rdi
  lea  rdi , [ source ]
  call qword [rbx + 8 * 29 ]
  pop rdi

  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ path ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ source ]
  lea  rax , [ ast ]
  call  __Parser__parseInternal$1


  ; clean frame
  ; -----------
  lea  rcx, [ source ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore path
  restore source
  restore ast

; -----------------------------------------------
; function __Parser_parseText$1
; -----------------------------------------------
__Parser_parseText$1:

  ; init frame
  ; ----------
  ast EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 2 )
  text EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ __literal6 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ text ]
  lea  rax , [ ast ]
  call  __Parser__parseInternal$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore text
  restore ast

; -----------------------------------------------
; function AST_GetNextId
; -----------------------------------------------
AST_GetNextId:

  ; init frame
  ; ----------
  rv EQU rdi
  tmp1477 EQU rbp - 12 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48


  ; code
  ; ----

  mov eax, dword [ NodeId ]
  mov dword [ rv ], eax

  mov dword [ tmp1477 ], 1

  mov eax, dword [ NodeId ]
  add eax, dword [ tmp1477 ]
  mov dword [ NodeId ], eax


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore rv
  restore tmp1477

; -----------------------------------------------
; function AST_CreateNode
; -----------------------------------------------
AST_CreateNode:

  ; init frame
  ; ----------
  rv EQU rdi
  opcode EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  args EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1478 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1479 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ args ], xmm0
  xor eax, eax
  mov [tmp1478 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantMapCreate

  lea  rax , [ tmp1479 ]
  call  AST_GetNextId

  mov [ tmp1478 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1479 ]
  mov [ tmp1478 + Variant_t.value], rax

  lea  rcx , [ rv ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1478 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1478 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1478 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove

  lea  rcx , [ rv ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1478 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1478 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1478 ]
  lea rdx, [ args ]
  call __MOLD_VariantMove

  lea  rcx , [ rv ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1478 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1478 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1478 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  lea  rcx , [ rv ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1478 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1478 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore opcode
  restore value
  restore args
  restore rv
  restore tmp1478
  restore tmp1479

; -----------------------------------------------
; function AST_CreateNodeVariable
; -----------------------------------------------
AST_CreateNodeVariable:

  ; init frame
  ; ----------
  rv EQU rdi
  name EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1481 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1482 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1480 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp1481 + Variant_t.type], eax
  mov [tmp1482 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1480 ], 52

  mov [ tmp1481 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1480 ]
  mov [ tmp1481 + Variant_t.value], rax

  lea  rcx, [ tmp1482 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1482 ]
  call  __MOLD_VariantArrayCreate

  lea rcx , [ tmp1481 ]
  lea rdx , [ name ]
  lea r8 , [ tmp1482 ]
  lea  rax , [ rv ]
  call  AST_CreateNode


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1481 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1482 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore name
  restore rv
  restore tmp1480
  restore tmp1481
  restore tmp1482

; -----------------------------------------------
; function AST_CreateNodeInteger
; -----------------------------------------------
AST_CreateNodeInteger:

  ; init frame
  ; ----------
  rv EQU rdi
  value EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1484 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1485 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1483 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp1484 + Variant_t.type], eax
  mov [tmp1485 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1483 ], 1

  mov [ tmp1484 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1483 ]
  mov [ tmp1484 + Variant_t.value], rax

  lea  rcx, [ tmp1485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1485 ]
  call  __MOLD_VariantArrayCreate

  lea rcx , [ tmp1484 ]
  lea rdx , [ value ]
  lea r8 , [ tmp1485 ]
  lea  rax , [ rv ]
  call  AST_CreateNode


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1484 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1485 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore value
  restore rv
  restore tmp1483
  restore tmp1484
  restore tmp1485

; -----------------------------------------------
; function AST_CreateNodeString
; -----------------------------------------------
AST_CreateNodeString:

  ; init frame
  ; ----------
  rv EQU rdi
  value EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1487 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1488 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1486 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp1487 + Variant_t.type], eax
  mov [tmp1488 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1486 ], 4

  mov [ tmp1487 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1486 ]
  mov [ tmp1487 + Variant_t.value], rax

  lea  rcx, [ tmp1488 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1488 ]
  call  __MOLD_VariantArrayCreate

  lea rcx , [ tmp1487 ]
  lea rdx , [ value ]
  lea r8 , [ tmp1488 ]
  lea  rax , [ rv ]
  call  AST_CreateNode


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1487 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1488 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore value
  restore rv
  restore tmp1486
  restore tmp1487
  restore tmp1488

; -----------------------------------------------
; function AST_CreateNodeCall
; -----------------------------------------------
AST_CreateNodeCall:

  ; init frame
  ; ----------
  rv EQU rdi
  name EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  args EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1490 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1489 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ args ], xmm0
  xor eax, eax
  mov [tmp1490 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1489 ], 42

  mov [ tmp1490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1489 ]
  mov [ tmp1490 + Variant_t.value], rax

  lea rcx , [ tmp1490 ]
  lea rdx , [ name ]
  lea r8 , [ args ]
  lea  rax , [ rv ]
  call  AST_CreateNode


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1490 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore name
  restore args
  restore rv
  restore tmp1489
  restore tmp1490

; -----------------------------------------------
; function AST_CreateNodeBlock
; -----------------------------------------------
AST_CreateNodeBlock:

  ; init frame
  ; ----------
  rv EQU rdi
  children EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1492 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1493 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1491 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ children ], xmm0
  xor eax, eax
  mov [tmp1492 + Variant_t.type], eax
  mov [tmp1493 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1491 ], 31

  mov [ tmp1492 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1491 ]
  mov [ tmp1492 + Variant_t.value], rax

  lea  rcx, [ tmp1493 ]
  call __MOLD_VariantDestroy

  lea rcx , [ tmp1492 ]
  lea rdx , [ tmp1493 ]
  lea r8 , [ children ]
  lea  rax , [ rv ]
  call  AST_CreateNode


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1492 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1493 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore children
  restore rv
  restore tmp1491
  restore tmp1492
  restore tmp1493

; -----------------------------------------------
; function AST_CreateNodeSysCall
; -----------------------------------------------
AST_CreateNodeSysCall:

  ; init frame
  ; ----------
  rv EQU rdi
  sysCallId EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  args EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ sysCallId ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ args ], xmm0

  ; code
  ; ----

; WARNING: Failed to get variable size: __literal33
  lea rcx , [ __literal33 ]
  lea rdx , [ args ]
  lea  rax , [ rv ]
  call  AST_CreateNodeCall

  lea  rcx , [ rv ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ sysCallId ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore sysCallId
  restore args
  restore rv

; -----------------------------------------------
; function AST_GetOpcodeAsText
; -----------------------------------------------
AST_GetOpcodeAsText:

  ; init frame
  ; ----------
  rv EQU rdi
  tmp1537 EQU rbp - 24 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1538 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1539 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 41 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  mov dword [ opcode ], ecx
  xor eax, eax
  mov [tmp1537 + Variant_t.type], eax
  mov [tmp1538 + Variant_t.type], eax
  mov [tmp1539 + Variant_t.type], eax

  ; code
  ; ----

; 
; -----------------------------
; BEGIN: switch opcode
; 
  mov eax, dword [ opcode ]
  sub eax, 1
  cmp eax, 77
  ja l1495
  movsx rax, word [ __jmptable1496 + rax * 2]
  lea rax, [ l1495 + rax]
  jmp rax

l1497:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal35 ]
  call __MOLD_VariantMove

  jmp l1494

l1498:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal36 ]
  call __MOLD_VariantMove

  jmp l1494

l1499:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal37 ]
  call __MOLD_VariantMove

  jmp l1494

l1500:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal38 ]
  call __MOLD_VariantMove

  jmp l1494

l1501:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal39 ]
  call __MOLD_VariantMove

  jmp l1494

l1502:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal40 ]
  call __MOLD_VariantMove

  jmp l1494

l1503:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantMove

  jmp l1494

l1504:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal42 ]
  call __MOLD_VariantMove

  jmp l1494

l1505:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal43 ]
  call __MOLD_VariantMove

  jmp l1494

l1506:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal44 ]
  call __MOLD_VariantMove

  jmp l1494

l1507:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal45 ]
  call __MOLD_VariantMove

  jmp l1494

l1508:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantMove

  jmp l1494

l1509:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal47 ]
  call __MOLD_VariantMove

  jmp l1494

l1510:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal48 ]
  call __MOLD_VariantMove

  jmp l1494

l1511:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal49 ]
  call __MOLD_VariantMove

  jmp l1494

l1512:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal50 ]
  call __MOLD_VariantMove

  jmp l1494

l1513:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal51 ]
  call __MOLD_VariantMove

  jmp l1494

l1514:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal52 ]
  call __MOLD_VariantMove

  jmp l1494

l1515:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal53 ]
  call __MOLD_VariantMove

  jmp l1494

l1516:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal54 ]
  call __MOLD_VariantMove

  jmp l1494

l1517:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal55 ]
  call __MOLD_VariantMove

  jmp l1494

l1518:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal56 ]
  call __MOLD_VariantMove

  jmp l1494

l1519:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal57 ]
  call __MOLD_VariantMove

  jmp l1494

l1520:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal58 ]
  call __MOLD_VariantMove

  jmp l1494

l1521:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal59 ]
  call __MOLD_VariantMove

  jmp l1494

l1522:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal60 ]
  call __MOLD_VariantMove

  jmp l1494

l1523:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal61 ]
  call __MOLD_VariantMove

  jmp l1494

l1524:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal62 ]
  call __MOLD_VariantMove

  jmp l1494

l1525:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal63 ]
  call __MOLD_VariantMove

  jmp l1494

l1526:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal64 ]
  call __MOLD_VariantMove

  jmp l1494

l1527:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal65 ]
  call __MOLD_VariantMove

  jmp l1494

l1528:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal66 ]
  call __MOLD_VariantMove

  jmp l1494

l1529:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal67 ]
  call __MOLD_VariantMove

  jmp l1494

l1530:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal68 ]
  call __MOLD_VariantMove

  jmp l1494

l1531:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal69 ]
  call __MOLD_VariantMove

  jmp l1494

l1532:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal70 ]
  call __MOLD_VariantMove

  jmp l1494

l1533:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal71 ]
  call __MOLD_VariantMove

  jmp l1494

l1534:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal72 ]
  call __MOLD_VariantMove

  jmp l1494

l1535:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal73 ]
  call __MOLD_VariantMove

  jmp l1494

l1536:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal74 ]
  call __MOLD_VariantMove

  jmp l1494

l1495:

  mov [ tmp1539 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1539 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1539 ]
  push rdi
  lea  rdi , [ tmp1538 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1537 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal75 ]
  lea  rdx , [ tmp1538 ]
  lea  r8 , [ tmp1537 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1537 ]
  lea  rdx , [ __literal76 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

l1494:

; 
; END: switch opcode
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1537 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1538 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1539 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore opcode
  restore rv
  restore tmp1537
  restore tmp1538
  restore tmp1539

; -----------------------------------------------
; function AST_GetOpcodeAsShortText
; -----------------------------------------------
AST_GetOpcodeAsShortText:

  ; init frame
  ; ----------
  rv EQU rdi
  tmp1585 EQU rbp - 24 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1586 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1587 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 45 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  mov dword [ opcode ], ecx
  xor eax, eax
  mov [tmp1585 + Variant_t.type], eax
  mov [tmp1586 + Variant_t.type], eax
  mov [tmp1587 + Variant_t.type], eax

  ; code
  ; ----

; 
; -----------------------------
; BEGIN: switch opcode
; 
  mov eax, dword [ opcode ]
  sub eax, 0
  cmp eax, 78
  ja l1541
  movsx rax, word [ __jmptable1542 + rax * 2]
  lea rax, [ l1541 + rax]
  jmp rax

l1543:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal77 ]
  call __MOLD_VariantMove

  jmp l1540

l1544:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal78 ]
  call __MOLD_VariantMove

  jmp l1540

l1545:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal79 ]
  call __MOLD_VariantMove

  jmp l1540

l1546:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal80 ]
  call __MOLD_VariantMove

  jmp l1540

l1547:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal81 ]
  call __MOLD_VariantMove

  jmp l1540

l1548:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal82 ]
  call __MOLD_VariantMove

  jmp l1540

l1549:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal83 ]
  call __MOLD_VariantMove

  jmp l1540

l1550:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal84 ]
  call __MOLD_VariantMove

  jmp l1540

l1551:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal85 ]
  call __MOLD_VariantMove

  jmp l1540

l1552:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal86 ]
  call __MOLD_VariantMove

  jmp l1540

l1553:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal87 ]
  call __MOLD_VariantMove

  jmp l1540

l1554:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal88 ]
  call __MOLD_VariantMove

  jmp l1540

l1555:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal89 ]
  call __MOLD_VariantMove

  jmp l1540

l1556:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal90 ]
  call __MOLD_VariantMove

  jmp l1540

l1557:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal91 ]
  call __MOLD_VariantMove

  jmp l1540

l1558:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal92 ]
  call __MOLD_VariantMove

  jmp l1540

l1559:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal93 ]
  call __MOLD_VariantMove

  jmp l1540

l1560:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal94 ]
  call __MOLD_VariantMove

  jmp l1540

l1561:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal95 ]
  call __MOLD_VariantMove

  jmp l1540

l1562:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal96 ]
  call __MOLD_VariantMove

  jmp l1540

l1563:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal97 ]
  call __MOLD_VariantMove

  jmp l1540

l1564:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal98 ]
  call __MOLD_VariantMove

  jmp l1540

l1565:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal99 ]
  call __MOLD_VariantMove

  jmp l1540

l1566:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal100 ]
  call __MOLD_VariantMove

  jmp l1540

l1567:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal101 ]
  call __MOLD_VariantMove

  jmp l1540

l1568:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal102 ]
  call __MOLD_VariantMove

  jmp l1540

l1569:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal103 ]
  call __MOLD_VariantMove

  jmp l1540

l1570:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal104 ]
  call __MOLD_VariantMove

  jmp l1540

l1571:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal105 ]
  call __MOLD_VariantMove

  jmp l1540

l1572:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal106 ]
  call __MOLD_VariantMove

  jmp l1540

l1573:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal107 ]
  call __MOLD_VariantMove

  jmp l1540

l1574:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal108 ]
  call __MOLD_VariantMove

  jmp l1540

l1575:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal109 ]
  call __MOLD_VariantMove

  jmp l1540

l1576:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal110 ]
  call __MOLD_VariantMove

  jmp l1540

l1577:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal111 ]
  call __MOLD_VariantMove

  jmp l1540

l1578:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal112 ]
  call __MOLD_VariantMove

  jmp l1540

l1579:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal113 ]
  call __MOLD_VariantMove

  jmp l1540

l1580:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal114 ]
  call __MOLD_VariantMove

  jmp l1540

l1581:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal115 ]
  call __MOLD_VariantMove

  jmp l1540

l1582:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal116 ]
  call __MOLD_VariantMove

  jmp l1540

l1583:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal117 ]
  call __MOLD_VariantMove

  jmp l1540

l1584:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal118 ]
  call __MOLD_VariantMove

  jmp l1540

l1541:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal119 ]
  call __MOLD_VariantMove

  mov [ tmp1587 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1587 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1587 ]
  push rdi
  lea  rdi , [ tmp1586 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1585 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal120 ]
  lea  rdx , [ tmp1586 ]
  lea  r8 , [ tmp1585 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp1585 ]
  call qword [rbx + 8 * 41 ]

l1540:

; 
; END: switch opcode
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1585 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1586 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1587 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore opcode
  restore rv
  restore tmp1585
  restore tmp1586
  restore tmp1587

; -----------------------------------------------
; function AST_InvertBoolean
; -----------------------------------------------
AST_InvertBoolean:

  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 12 , readHits= 26 )
  tmp1588 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp1595 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 21 , readHits= 21 )
  __cse2 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  __cse3 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp1629 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 13 )
  tmp1589 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 28 , readHits= 28 )
  tmp1590 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1593 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1594 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1602 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1605 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1608 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1611 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1614 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1617 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1620 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1623 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1626 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp1588 + Variant_t.type], eax
  mov [tmp1595 + Variant_t.type], eax
  mov [__cse2 + Variant_t.type], eax
  mov [__cse3 + Variant_t.type], eax
  mov [tmp1629 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1588 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1588 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1588 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp1589 ], 5

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1591

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1588 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1594 ], 1

  mov eax, dword [ tmp1594 ]
  mov [ tmp1595 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1595 + Variant_t.value], rax

  lea rcx, [ tmp1588 ]
  lea rdx, [ tmp1595 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1596

  mov dword [ tmp1594 ], 0

  mov eax, dword [ tmp1594 ]
  mov [ tmp1595 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1597

l1596:

  mov dword [ tmp1594 ], 1

  mov eax, dword [ tmp1594 ]
  mov [ tmp1595 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

l1597:

  jmp l1592

l1591:

  mov dword [ tmp1589 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1598

  mov dword [ tmp1589 ], 67

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1599

l1598:

  mov dword [ tmp1589 ], 67

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1600

  mov dword [ tmp1589 ], 66

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1601

l1600:

  mov dword [ tmp1589 ], 71

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1603

  mov dword [ tmp1589 ], 68

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1604

l1603:

  mov dword [ tmp1589 ], 70

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1606

  mov dword [ tmp1589 ], 69

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1607

l1606:

  mov dword [ tmp1589 ], 68

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1609

  mov dword [ tmp1589 ], 71

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1610

l1609:

  mov dword [ tmp1589 ], 69

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1612

  mov dword [ tmp1589 ], 70

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1613

l1612:

  mov dword [ tmp1589 ], 72

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1615

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse2 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1589 ], 0

  lea  rcx , [ __cse2 ]
  lea  rdx , [ tmp1589 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1595 ]
  call  AST_InvertBoolean

  mov dword [ tmp1589 ], 1

  lea  rcx , [ __cse2 ]
  lea  rdx , [ tmp1589 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1595 ]
  call  AST_InvertBoolean

  mov dword [ tmp1589 ], 73

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1616

l1615:

  mov dword [ tmp1589 ], 73

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1618

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse3 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1589 ], 0

  lea  rcx , [ __cse3 ]
  lea  rdx , [ tmp1589 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1595 ]
  call  AST_InvertBoolean

  mov dword [ tmp1589 ], 1

  lea  rcx , [ __cse3 ]
  lea  rdx , [ tmp1589 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1595 ]
  call  AST_InvertBoolean

  mov dword [ tmp1589 ], 72

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1619

l1618:

  mov dword [ tmp1589 ], 77

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1621

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1588 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1589 ], 0

  lea  rcx , [ tmp1588 ]
  lea  rdx , [ tmp1589 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1595 ]
  call  AST_InvertBoolean

  jmp l1622

l1621:

  mov dword [ tmp1589 ], 75

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1624

  mov dword [ tmp1589 ], 76

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1625

l1624:

  mov dword [ tmp1589 ], 76

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1589 ]
  jnz l1627

  mov dword [ tmp1589 ], 75

  mov [ tmp1595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1589 ]
  mov [ tmp1595 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1628

l1627:

  mov [ tmp1588 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1588 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1588 ]
  push rdi
  lea  rdi , [ tmp1595 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1629 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal121 ]
  lea  rdx , [ tmp1595 ]
  lea  r8 , [ tmp1629 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp1629 ]
  call qword [rbx + 8 * 41 ]

l1628:

l1625:

l1622:

l1619:

l1616:

l1613:

l1610:

l1607:

l1604:

l1601:

l1599:

l1592:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1588 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1595 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1629 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore node
  restore opcode
  restore tmp1588
  restore tmp1589
  restore tmp1590
  restore tmp1593
  restore tmp1594
  restore tmp1595
  restore tmp1602
  restore tmp1605
  restore tmp1608
  restore tmp1611
  restore tmp1614
  restore __cse2
  restore tmp1617
  restore __cse3
  restore tmp1620
  restore tmp1623
  restore tmp1626
  restore tmp1629

; -----------------------------------------------
; function AST_IsVar
; -----------------------------------------------
AST_IsVar:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1630 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1632 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1631 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1630 + Variant_t.type], eax
  mov [tmp1632 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1630 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1631 ], 52

  mov [ tmp1632 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1631 ]
  mov [ tmp1632 + Variant_t.value], rax

  lea  rcx , [ tmp1630 ]
  lea  rdx , [ tmp1632 ]
  call  __MOLD_VariantCompareEQ
  mov [ rv ], eax


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1630 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1632 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore x
  restore rv
  restore tmp1630
  restore tmp1631
  restore tmp1632

; -----------------------------------------------
; function AST_IsImm
; -----------------------------------------------
AST_IsImm:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 10 )
  tmp1634 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1636 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1640 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1644 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1633 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1635 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp1639 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1643 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1634 + Variant_t.type], eax
  mov [tmp1636 + Variant_t.type], eax
  mov [tmp1640 + Variant_t.type], eax
  mov [tmp1644 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1634 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1635 ], 9

  mov [ tmp1636 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1635 ]
  mov [ tmp1636 + Variant_t.value], rax

  lea rcx, [ tmp1634 ]
  lea rdx, [ tmp1636 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1637

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1636 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1636  + Variant_t.type], 7
  setz al
  mov dword [ rv ], eax

  jmp l1638

l1637:

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1634 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1635 ], 10

  mov [ tmp1640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1635 ]
  mov [ tmp1640 + Variant_t.value], rax

  lea rcx, [ tmp1634 ]
  lea rdx, [ tmp1640 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1641

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1640 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1640  + Variant_t.type], 8
  setz al
  mov dword [ rv ], eax

  jmp l1642

l1641:

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1634 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1635 ], 30

  mov [ tmp1644 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1635 ]
  mov [ tmp1644 + Variant_t.value], rax

  lea rcx, [ tmp1644 ]
  lea rdx, [ tmp1634 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1645

  mov dword [ rv ], 1

  jmp l1646

l1645:

  mov dword [ rv ], 0

l1646:

l1642:

l1638:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1634 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1636 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1644 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore x
  restore rv
  restore tmp1633
  restore tmp1634
  restore tmp1635
  restore tmp1636
  restore tmp1639
  restore tmp1640
  restore tmp1643
  restore tmp1644

; -----------------------------------------------
; function AST_IsPrimitiveImm
; -----------------------------------------------
AST_IsPrimitiveImm:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1648 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1650 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1647 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1649 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1648 + Variant_t.type], eax
  mov [tmp1650 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1648 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1649 ], 6

  mov [ tmp1650 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1649 ]
  mov [ tmp1650 + Variant_t.value], rax

  lea rcx, [ tmp1650 ]
  lea rdx, [ tmp1648 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1651

  mov dword [ rv ], 1

  jmp l1652

l1651:

  mov dword [ rv ], 0

l1652:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1648 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1650 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore x
  restore rv
  restore tmp1647
  restore tmp1648
  restore tmp1649
  restore tmp1650

; -----------------------------------------------
; function AST_IsImmWithValue
; -----------------------------------------------
AST_IsImmWithValue:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1658 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1653 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1655 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1656 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1657 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp1658 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1653 ], 0

  lea rcx , [ x ]
  lea  rax , [ tmp1656 ]
  call  AST_IsImm

  mov dword [ tmp1657 ], 1

  mov eax, dword [ tmp1656 ]
  cmp eax, dword [ tmp1657 ]
  jnz l1654

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1658 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1658 ]
  lea  rdx , [ value ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1653 ], eax

l1654:

  cmp dword [ tmp1653 ], 0
  jz l1659

  mov dword [ rv ], 1

  jmp l1660

l1659:

  mov dword [ rv ], 0

l1660:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1658 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore x
  restore value
  restore rv
  restore tmp1653
  restore tmp1655
  restore tmp1656
  restore tmp1657
  restore tmp1658

; -----------------------------------------------
; function AST_IsEmpty
; -----------------------------------------------
AST_IsEmpty:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1661 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1662 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1663 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp1661 + Variant_t.type], eax
  mov [tmp1662 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ x ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1662 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp1662 ]
  push rdi
  lea  rdi , [ tmp1661 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp1663 ], 0

  mov [ tmp1662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1663 ]
  mov [ tmp1662 + Variant_t.value], rax

  lea  rcx , [ tmp1661 ]
  lea  rdx , [ tmp1662 ]
  call  __MOLD_VariantCompareEQ
  mov [ rv ], eax


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1661 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1662 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore x
  restore rv
  restore tmp1661
  restore tmp1662
  restore tmp1663

; -----------------------------------------------
; function AST_IsImmOrVar
; -----------------------------------------------
AST_IsImmOrVar:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1664 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1666 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1667 EQU rbp - 36 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1668 EQU rbp - 40 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0

  ; code
  ; ----

  mov dword [ tmp1664 ], 1

  lea rcx , [ x ]
  lea  rax , [ tmp1667 ]
  call  AST_IsImm

  mov dword [ tmp1668 ], 1

  mov eax, dword [ tmp1667 ]
  cmp eax, dword [ tmp1668 ]
  jz l1665

  lea rcx , [ x ]
  lea  rax , [ tmp1668 ]
  call  AST_IsVar

  mov dword [ tmp1667 ], 1

  mov dword [ tmp1664 ], 0
  mov ecx, dword [ tmp1668 ]
  cmp ecx, dword [ tmp1667 ]
  setz byte [ tmp1664 ]

l1665:

  cmp dword [ tmp1664 ], 0
  jz l1669

  mov dword [ rv ], 1

  jmp l1670

l1669:

  mov dword [ rv ], 0

l1670:


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore x
  restore rv
  restore tmp1664
  restore tmp1666
  restore tmp1667
  restore tmp1668

; -----------------------------------------------
; function AST_HasSideEffects
; -----------------------------------------------
AST_HasSideEffects:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 16 )
  tmp1671 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1685 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1686 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  opcode EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp1672 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 10 , readHits= 10 )
  tmp1673 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1676 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1678 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp1682 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1684 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  childIdx EQU rbp - 120 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  childrenCnt EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp1671 + Variant_t.type], eax
  mov [tmp1685 + Variant_t.type], eax
  mov [tmp1686 + Variant_t.type], eax
  mov [children + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1671 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp1672 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1672 ]
  jnz l1674

  mov dword [ rv ], 1

  mov dword [ tmp1676 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1671 ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1677

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1671  + Variant_t.type], 2
  setz al
  mov dword [ tmp1676 ], eax

l1677:

  cmp dword [ tmp1676 ], 0
  jz l1679

  mov dword [ tmp1678 ], 1

  mov dword [ tmp1682 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1685 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1672 ], 31

  mov [ tmp1686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1672 ]
  mov [ tmp1686 + Variant_t.value], rax

  lea rcx, [ tmp1685 ]
  lea rdx, [ tmp1686 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l1683

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1686 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1672 ], 44

  mov [ tmp1685 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1672 ]
  mov [ tmp1685 + Variant_t.value], rax

  lea  rcx , [ tmp1686 ]
  lea  rdx , [ tmp1685 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp1682 ], eax

l1683:

  cmp dword [ tmp1682 ], 0
  jnz l1681

  mov dword [ tmp1682 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1685 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1672 ], 56

  mov [ tmp1686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1672 ]
  mov [ tmp1686 + Variant_t.value], rax

  lea rcx, [ tmp1685 ]
  lea rdx, [ tmp1686 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1687

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1686 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1672 ], 57

  mov [ tmp1685 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1672 ]
  mov [ tmp1685 + Variant_t.value], rax

  lea  rcx , [ tmp1686 ]
  lea  rdx , [ tmp1685 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1682 ], eax

l1687:

  mov eax, dword [ tmp1682 ]
  mov dword [ tmp1678 ], eax

l1681:

  cmp dword [ tmp1678 ], 0
  jz l1688

  mov dword [ rv ], 0

l1688:

l1689:

l1679:

l1680:

  jmp l1675

l1674:

  mov dword [ tmp1676 ], 1

  mov dword [ tmp1672 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1672 ]
  jz l1690

  mov dword [ tmp1672 ], 36

  mov dword [ tmp1676 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1672 ]
  setz byte [ tmp1676 ]

l1690:

  cmp dword [ tmp1676 ], 0
  jz l1691

  mov dword [ rv ], 1

  jmp l1692

l1691:

  mov dword [ rv ], 0

  mov dword [ childIdx ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp1685 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp1685 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1685 + Variant_t.value]
  mov dword [ childrenCnt ], eax

; 
; -----------------------------
; BEGIN: while
; 
l1693:

  mov dword [ tmp1678 ], 0

  mov eax, dword [ childIdx ]
  cmp eax, dword [ childrenCnt ]
  jge l1695

  mov dword [ tmp1684 ], 0

  mov dword [ tmp1678 ], 0
  mov ecx, dword [ rv ]
  cmp ecx, dword [ tmp1684 ]
  setz byte [ tmp1678 ]

l1695:

  cmp dword [ tmp1678 ], 0
  jz l1694

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ tmp1685 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1685 ]
  lea  rax , [ rv ]
  call  AST_HasSideEffects

  mov dword [ tmp1672 ], 1

  mov eax, dword [ childIdx ]
  add eax, dword [ tmp1672 ]
  mov dword [ childIdx ], eax

  jmp l1693

l1694:

; 
; END: while
; -----------------------------
; 
l1692:

l1675:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1685 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1686 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore node
  restore opcode
  restore rv
  restore tmp1671
  restore tmp1672
  restore tmp1673
  restore tmp1676
  restore tmp1678
  restore tmp1682
  restore tmp1684
  restore tmp1685
  restore tmp1686
  restore childIdx
  restore children
  restore childrenCnt

; -----------------------------------------------
; function AST_GetHashInternal
; -----------------------------------------------
AST_GetHashInternal:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 45 )
  children EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  childrenCnt EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp1696 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1703 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 13 , readHits= 13 )
  tmp1704 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1710 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 9 , readHits= 9 )
  tmp1711 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp1712 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1724 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 13 , readHits= 13 )
  tmp1727 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp1728 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1741 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1742 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  __cse4 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  item EQU rbp - 264 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  name EQU rbp - 280 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  childNode EQU rbp - 296 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  isCodeMode EQU rbp - 300 ; 4 bytes, (kind= 3 , type= bool32 , writeHits= 0 , readHits= 6 )
  opcode EQU rbp - 304 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 10 )
  tmp1697 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 9 , readHits= 9 )
  tmp1698 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1700 EQU rbp - 316 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1707 EQU rbp - 320 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1713 EQU rbp - 324 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 9 , readHits= 9 )
  tmp1714 EQU rbp - 328 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1721 EQU rbp - 332 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1733 EQU rbp - 336 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1737 EQU rbp - 340 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1738 EQU rbp - 344 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 384

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov dword [ isCodeMode ], edx
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [tmp1696 + Variant_t.type], eax
  mov [tmp1703 + Variant_t.type], eax
  mov [tmp1704 + Variant_t.type], eax
  mov [tmp1710 + Variant_t.type], eax
  mov [tmp1711 + Variant_t.type], eax
  mov [tmp1712 + Variant_t.type], eax
  mov [tmp1724 + Variant_t.type], eax
  mov [tmp1727 + Variant_t.type], eax
  mov [tmp1728 + Variant_t.type], eax
  mov [tmp1741 + Variant_t.type], eax
  mov [tmp1742 + Variant_t.type], eax
  mov [__cse4 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [name + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1696 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1696 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1696 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp1698 ], 1

  mov dword [ tmp1697 ], 10

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1697 ]
  jz l1699

  mov dword [ tmp1697 ], 9

  mov dword [ tmp1698 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1697 ]
  setz byte [ tmp1698 ]

l1699:

  cmp dword [ tmp1698 ], 0
  jz l1701

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1704 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1704 ]
  push rdi
  lea  rdi , [ tmp1696 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal123 ]
  lea  rdx , [ tmp1696 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1702

l1701:

  mov dword [ tmp1697 ], 4

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1697 ]
  jnz l1705

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1696 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1696  + Variant_t.type], 0
  jz l1708

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1704 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1704 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  jmp l1709

l1708:

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse4 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ __cse4 ]
  push rdi
  lea  rdi , [ tmp1712 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1712 ]
  push rdi
  lea  rdi , [ tmp1704 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1711 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp1704 ]
  lea  r8 , [ tmp1711 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1711 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ __cse4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

l1709:

  jmp l1706

l1705:

  lea rcx , [ node ]
  lea  rax , [ tmp1713 ]
  call  AST_IsVar

  mov dword [ tmp1714 ], 1

  mov eax, dword [ tmp1713 ]
  cmp eax, dword [ tmp1714 ]
  jnz l1715

  mov dword [ tmp1713 ], 1

  mov eax, dword [ isCodeMode ]
  cmp eax, dword [ tmp1713 ]
  jnz l1717

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1704 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal123 ]
  lea  rdx , [ tmp1704 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1718

l1717:

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp1704 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1704 + Variant_t.type ], 0
  jnz l1719

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1712 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal123 ]
  lea  rdx , [ tmp1712 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1720

l1719:

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp1712 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1712 + Variant_t.type ], 7
  jnz l1722

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp1724 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l1726

l1725:

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ item ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1728 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1728 ]
  push rdi
  lea  rdi , [ tmp1727 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1727 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  ret

l1726:

  lea  rcx , [ tmp1724 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l1725 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l1723

l1722:

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1727 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1727 ]
  push rdi
  lea  rdi , [ tmp1724 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal123 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

l1723:

l1720:

l1718:

  jmp l1716

l1715:

  lea rcx , [ node ]
  lea  rax , [ tmp1713 ]
  call  AST_IsPrimitiveImm

  mov dword [ tmp1721 ], 1

  mov eax, dword [ tmp1713 ]
  cmp eax, dword [ tmp1721 ]
  jnz l1729

  mov ecx , dword [ opcode ]
  lea  rax , [ tmp1710 ]
  call  AST_GetOpcodeAsShortText

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1727 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1727 ]
  push rdi
  lea  rdi , [ tmp1724 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1730

l1729:

  mov dword [ tmp1721 ], 1

  mov dword [ tmp1697 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1697 ]
  jz l1731

  mov dword [ tmp1713 ], 1

  mov dword [ tmp1697 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1697 ]
  jz l1732

  mov dword [ tmp1697 ], 36

  mov dword [ tmp1713 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1697 ]
  setz byte [ tmp1713 ]

l1732:

  mov eax, dword [ tmp1713 ]
  mov dword [ tmp1721 ], eax

l1731:

  cmp dword [ tmp1721 ], 0
  jz l1734

  mov dword [ tmp1713 ], 0

  mov dword [ tmp1737 ], 0

  mov eax, dword [ isCodeMode ]
  cmp eax, dword [ tmp1737 ]
  jnz l1736

  lea rcx , [ node ]
  lea  rax , [ tmp1737 ]
  call  AST_HasSideEffects

  mov dword [ tmp1738 ], 1

  mov dword [ tmp1713 ], 0
  mov ecx, dword [ tmp1737 ]
  cmp ecx, dword [ tmp1738 ]
  setz byte [ tmp1713 ]

l1736:

  cmp dword [ tmp1713 ], 0
  jz l1739

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1727 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1727 ]
  push rdi
  lea  rdi , [ tmp1724 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal123 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin

  jmp l1740

l1739:

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey

l1740:

  mov ecx , dword [ opcode ]
  lea  rax , [ tmp1742 ]
  call  AST_GetOpcodeAsShortText

  lea  rcx, [ tmp1741 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1742 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp1741 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1711 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1741 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1711 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1711 ]
  lea  rdx , [ __literal127 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ childrenCnt ]
  push rdi
  lea  rdi , [ tmp1724 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1724 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1724 ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1743

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal127 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1727 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1727 ]
  push rdi
  lea  rdi , [ tmp1724 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

l1743:

l1744:

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l1746

l1745:

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal127 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ childNode ]
  mov edx , dword [ isCodeMode ]
  lea  rax , [ tmp1724 ]
  call  AST_GetHashInternal

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  ret

l1746:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l1745 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l1735

l1734:

  mov dword [ tmp1697 ], 77

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1697 ]
  jnz l1747

  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1727 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1727 ]
  push rdi
  lea  rdi , [ tmp1724 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1711 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal128 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ tmp1711 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1711 ]
  lea  rdx , [ __literal127 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  mov dword [ tmp1697 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp1697 ]
  lea  r8 , [ tmp1727 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1727 ]
  mov edx , dword [ isCodeMode ]
  lea  rax , [ tmp1724 ]
  call  AST_GetHashInternal

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l1748

l1747:

  mov ecx , dword [ opcode ]
  lea  rax , [ tmp1711 ]
  call  AST_GetOpcodeAsShortText

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1711 ]
  lea  rdx , [ __literal127 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ childrenCnt ]
  push rdi
  lea  rdi , [ tmp1724 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l1750

l1749:

  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal127 ]
  lea  r8 , [ tmp1710 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ childNode ]
  mov edx , dword [ isCodeMode ]
  lea  rax , [ tmp1724 ]
  call  AST_GetHashInternal

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1710 ]
  lea  rdx , [ tmp1724 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  ret

l1750:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l1749 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
l1748:

l1735:

l1730:

l1716:

l1706:

l1702:

  mov dword [ tmp1700 ], 0

  mov eax, dword [ isCodeMode ]
  cmp eax, dword [ tmp1700 ]
  jnz l1751

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStoreAtKey

l1751:

l1752:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1696 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1703 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1704 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1710 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1711 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1712 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1724 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1727 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1728 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1741 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1742 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse4 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode

  add  rsp, 384
  pop  rdi
  pop  rbp
  ret


  restore node
  restore isCodeMode
  restore opcode
  restore children
  restore childrenCnt
  restore rv
  restore tmp1696
  restore tmp1697
  restore tmp1698
  restore tmp1700
  restore tmp1703
  restore tmp1704
  restore tmp1707
  restore tmp1710
  restore tmp1711
  restore tmp1712
  restore tmp1713
  restore tmp1714
  restore tmp1721
  restore tmp1724
  restore tmp1727
  restore tmp1728
  restore tmp1733
  restore tmp1737
  restore tmp1738
  restore tmp1741
  restore tmp1742
  restore __cse4
  restore item
  restore name
  restore childNode

; -----------------------------------------------
; function AST_PrefetchHash
; -----------------------------------------------
AST_PrefetchHash:

  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  unused EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  tmp1753 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [unused + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1753 ], 0

  lea rcx , [ node ]
  mov edx , dword [ tmp1753 ]
  lea  rax , [ unused ]
  call  AST_GetHashInternal


  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore node
  restore unused
  restore tmp1753

; -----------------------------------------------
; function AST_GetHash
; -----------------------------------------------
AST_GetHash:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1754 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  mov dword [ tmp1754 ], 0

  lea rcx , [ node ]
  mov edx , dword [ tmp1754 ]
  lea  rax , [ rv ]
  call  AST_GetHashInternal


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore tmp1754

; -----------------------------------------------
; function AST_GetHashForCodeComparison
; -----------------------------------------------
AST_GetHashForCodeComparison:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1755 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  mov dword [ tmp1755 ], 1

  lea rcx , [ node ]
  mov edx , dword [ tmp1755 ]
  lea  rax , [ rv ]
  call  AST_GetHashInternal


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore tmp1755

; -----------------------------------------------
; function AST_IsDataNode
; -----------------------------------------------
AST_IsDataNode:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1757 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1759 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1756 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1758 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp1757 + Variant_t.type], eax
  mov [tmp1759 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1757 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1758 ], 30

  mov [ tmp1759 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1758 ]
  mov [ tmp1759 + Variant_t.value], rax

  lea rcx, [ tmp1759 ]
  lea rdx, [ tmp1757 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1760

  mov dword [ rv ], 1

  jmp l1761

l1760:

  mov dword [ rv ], 0

l1761:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1757 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1759 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore tmp1756
  restore tmp1757
  restore tmp1758
  restore tmp1759

; -----------------------------------------------
; function AST_ConvertDataTypeToText
; -----------------------------------------------
AST_ConvertDataTypeToText:

  ; init frame
  ; ----------
  rv EQU rdi
  dataType EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp1766 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1762 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1764 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1765 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ dataType ], xmm0
  xor eax, eax
  mov [tmp1766 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1762 ], 0

  cmp [ dataType  + Variant_t.type], 0
  jz l1763

  mov dword [ tmp1765 ], 0

  mov [ tmp1766 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1765 ]
  mov [ tmp1766 + Variant_t.value], rax

  lea  rcx , [ tmp1766 ]
  lea  rdx , [ dataType ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1762 ], eax

l1763:

  cmp dword [ tmp1762 ], 0
  jz l1767

  cmp [ dataType + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataType + Variant_t.value]
  mov dword [ tmp1765 ], eax

  lea  rcx , [ AST_DataTypeNames ]
  lea  rdx , [ tmp1765 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l1768

l1767:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove

l1768:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1766 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore dataType
  restore rv
  restore tmp1762
  restore tmp1764
  restore tmp1765
  restore tmp1766

; -----------------------------------------------
; function AST_ConvertDataTypeToMIR
; -----------------------------------------------
AST_ConvertDataTypeToMIR:

  ; init frame
  ; ----------
  rv EQU rdi
  dataType EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp1773 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1769 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1771 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1772 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ dataType ], xmm0
  xor eax, eax
  mov [tmp1773 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp1769 ], 0

  cmp [ dataType  + Variant_t.type], 0
  jz l1770

  mov dword [ tmp1772 ], 0

  mov [ tmp1773 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1772 ]
  mov [ tmp1773 + Variant_t.value], rax

  lea  rcx , [ tmp1773 ]
  lea  rdx , [ dataType ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1769 ], eax

l1770:

  cmp dword [ tmp1769 ], 0
  jz l1774

  cmp [ dataType + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataType + Variant_t.value]
  mov dword [ tmp1772 ], eax

  lea  rcx , [ AST_DataTypeForMIR ]
  lea  rdx , [ tmp1772 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l1775

l1774:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove

l1775:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1773 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore dataType
  restore rv
  restore tmp1769
  restore tmp1771
  restore tmp1772
  restore tmp1773

; -----------------------------------------------
; function AST_GetDataType
; -----------------------------------------------
AST_GetDataType:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 29 )
  tmp1777 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1780 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1789 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1790 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp1803 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1805 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1808 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1811 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp1812 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1815 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1863 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  box EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 8 )
  children EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  xType EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1776 EQU rbp - 268 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1781 EQU rbp - 272 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 38 , readHits= 38 )
  tmp1782 EQU rbp - 276 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1784 EQU rbp - 280 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp1786 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp1788 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp1823 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp1825 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp1832 EQU rbp - 300 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp1840 EQU rbp - 304 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp1846 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp1854 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 316 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 20 )
  childrenCnt EQU rbp - 320 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  x EQU rbp - 324 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  y EQU rbp - 328 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 368

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp1777 + Variant_t.type], eax
  mov [tmp1780 + Variant_t.type], eax
  mov [tmp1789 + Variant_t.type], eax
  mov [tmp1790 + Variant_t.type], eax
  mov [tmp1803 + Variant_t.type], eax
  mov [tmp1805 + Variant_t.type], eax
  mov [tmp1808 + Variant_t.type], eax
  mov [tmp1811 + Variant_t.type], eax
  mov [tmp1812 + Variant_t.type], eax
  mov [tmp1815 + Variant_t.type], eax
  mov [tmp1863 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax
  mov [box + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [xType + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ rv ], -1

  lea  rcx , [ node ]
  lea  rdx , [ __literal131 ]
  lea  r8 , [ tmp1777 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1777  + Variant_t.type], 0
  jz l1778

  lea  rcx , [ node ]
  lea  rdx , [ __literal131 ]
  lea  r8 , [ tmp1780 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1780 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1780 + Variant_t.value]
  mov dword [ rv ], eax

  jmp l1779

l1778:

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1780 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1780 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1780 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ rv ], -1

  mov dword [ tmp1782 ], 1

  mov dword [ tmp1781 ], 1

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jnz l1783

  mov dword [ tmp1784 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1780 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1780 + Variant_t.type ], 2
  jnz l1785

  mov dword [ tmp1786 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1789 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1781 ], -2147483648

  mov [ tmp1790 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1781 ]
  mov [ tmp1790 + Variant_t.value], rax

  lea rcx, [ tmp1789 ]
  lea rdx, [ tmp1790 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l1787

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1790 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1781 ], 2147483647

  mov [ tmp1789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1781 ]
  mov [ tmp1789 + Variant_t.value], rax

  lea  rcx , [ tmp1790 ]
  lea  rdx , [ tmp1789 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp1786 ], eax

l1787:

  mov eax, dword [ tmp1786 ]
  mov dword [ tmp1784 ], eax

l1785:

  mov eax, dword [ tmp1784 ]
  mov dword [ tmp1782 ], eax

l1783:

  cmp dword [ tmp1782 ], 0
  jz l1791

; 
; -----------------------------
; BEGIN: switch opcode
; 
  mov eax, dword [ opcode ]
  sub eax, 8
  cmp eax, 69
  ja l1794
  movsx rax, word [ __jmptable1795 + rax * 2]
  lea rax, [ l1794 + rax]
  jmp rax

l1796:

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1784 ], 0

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l1797

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp1789 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1789  + Variant_t.type], 0
  setnz al
  mov dword [ tmp1784 ], eax

l1797:

  cmp dword [ tmp1784 ], 0
  jz l1798

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp1790 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1790 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1790 + Variant_t.value]
  mov dword [ rv ], eax

l1798:

l1799:

  jmp l1793

l1800:

  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1790 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1790 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1790 + Variant_t.value]
  mov dword [ rv ], eax

  jmp l1793

l1801:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1790 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1781 ], 0

  lea  rcx , [ tmp1790 ]
  lea  rdx , [ tmp1781 ]
  lea  r8 , [ box ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp1784 ], 0

  lea  rcx , [ box ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1790 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1781 ], 52

  mov [ tmp1803 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1781 ]
  mov [ tmp1803 + Variant_t.value], rax

  lea rcx, [ tmp1790 ]
  lea rdx, [ tmp1803 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1802

  mov dword [ tmp1786 ], 0

  lea  rcx , [ box ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1803 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1803  + Variant_t.type], 0
  jz l1804

  lea  rcx , [ box ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1805 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp1790 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1790  + Variant_t.type], 0
  setnz al
  mov dword [ tmp1786 ], eax

l1804:

  mov eax, dword [ tmp1786 ]
  mov dword [ tmp1784 ], eax

l1802:

  cmp dword [ tmp1784 ], 0
  jz l1806

  lea  rcx , [ box ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1808 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1808 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1805 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1805 + Variant_t.value]
  mov dword [ rv ], eax

l1806:

l1807:

  jmp l1793

l1809:

  mov dword [ tmp1784 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1805  + Variant_t.type], 0
  jz l1810

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1812 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1812 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp1811 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1811 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1808 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp1808  + Variant_t.type], 0
  setnz al
  mov dword [ tmp1784 ], eax

l1810:

  cmp dword [ tmp1784 ], 0
  jz l1813

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp1815 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1815 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp1812 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1812 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1811 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1811 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1811 + Variant_t.value]
  mov dword [ rv ], eax

l1813:

l1814:

  jmp l1793

l1816:

  mov dword [ rv ], 6

  jmp l1793

l1817:

  mov dword [ rv ], -1

  jmp l1793

l1794:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp1811 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp1811 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1811 + Variant_t.value]
  mov dword [ childrenCnt ], eax

  lea rcx , [ node ]
  lea  rax , [ tmp1786 ]
  call  AST_IsDataNode

  mov dword [ tmp1788 ], 1

  mov eax, dword [ tmp1786 ]
  cmp eax, dword [ tmp1788 ]
  jnz l1818

  mov eax, dword [ opcode ]
  mov dword [ rv ], eax

  jmp l1819

l1818:

  mov dword [ tmp1781 ], 2

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp1781 ]
  jnz l1820

  mov dword [ tmp1781 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp1781 ]
  lea  r8 , [ tmp1811 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1811 ]
  lea  rax , [ x ]
  call  AST_GetDataType

  mov dword [ tmp1781 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp1781 ]
  lea  r8 , [ tmp1811 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1811 ]
  lea  rax , [ y ]
  call  AST_GetDataType

  mov dword [ tmp1786 ], 1

  mov dword [ tmp1781 ], 58

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jz l1822

  mov dword [ tmp1823 ], 1

  mov dword [ tmp1781 ], 60

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jz l1824

  mov dword [ tmp1781 ], 59

  mov dword [ tmp1823 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1781 ]
  setz byte [ tmp1823 ]

l1824:

  mov eax, dword [ tmp1823 ]
  mov dword [ tmp1786 ], eax

l1822:

  cmp dword [ tmp1786 ], 0
  jz l1826

  mov dword [ tmp1823 ], 1

  mov dword [ tmp1781 ], 3

  mov eax, dword [ x ]
  cmp eax, dword [ tmp1781 ]
  jz l1828

  mov dword [ tmp1781 ], 3

  mov dword [ tmp1823 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1781 ]
  setz byte [ tmp1823 ]

l1828:

  cmp dword [ tmp1823 ], 0
  jz l1829

  mov dword [ rv ], 3

  jmp l1830

l1829:

  mov dword [ tmp1825 ], 1

  mov dword [ tmp1781 ], -1

  mov eax, dword [ x ]
  cmp eax, dword [ tmp1781 ]
  jz l1831

  mov dword [ tmp1781 ], -1

  mov dword [ tmp1825 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1781 ]
  setz byte [ tmp1825 ]

l1831:

  cmp dword [ tmp1825 ], 0
  jz l1833

  mov dword [ rv ], -1

  jmp l1834

l1833:

  mov eax, dword [ x ]
  mov dword [ rv ], eax

l1834:

l1830:

  jmp l1827

l1826:

  mov dword [ tmp1781 ], 65

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jnz l1835

  mov dword [ rv ], 4

  jmp l1836

l1835:

  mov dword [ tmp1781 ], 61

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jnz l1837

  mov dword [ tmp1832 ], 1

  mov dword [ tmp1781 ], -1

  mov eax, dword [ x ]
  cmp eax, dword [ tmp1781 ]
  jz l1839

  mov dword [ tmp1781 ], -1

  mov dword [ tmp1832 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1781 ]
  setz byte [ tmp1832 ]

l1839:

  cmp dword [ tmp1832 ], 0
  jz l1841

  mov dword [ rv ], -1

  jmp l1842

l1841:

  mov dword [ rv ], 3

l1842:

  jmp l1838

l1837:

  mov dword [ tmp1781 ], 64

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jnz l1843

  mov dword [ tmp1840 ], 1

  mov dword [ tmp1781 ], -1

  mov eax, dword [ x ]
  cmp eax, dword [ tmp1781 ]
  jz l1845

  mov dword [ tmp1781 ], -1

  mov dword [ tmp1840 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1781 ]
  setz byte [ tmp1840 ]

l1845:

  cmp dword [ tmp1840 ], 0
  jz l1847

  mov dword [ rv ], -1

  jmp l1848

l1847:

  mov dword [ rv ], 1

l1848:

  jmp l1844

l1843:

  mov dword [ tmp1840 ], 0

  mov dword [ tmp1781 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jl l1849

  mov dword [ tmp1781 ], 73

  mov dword [ tmp1840 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1781 ]
  setle byte [ tmp1840 ]

l1849:

  cmp dword [ tmp1840 ], 0
  jz l1850

  mov dword [ rv ], 5

l1850:

l1851:

l1844:

l1838:

l1836:

l1827:

  jmp l1821

l1820:

  mov dword [ tmp1781 ], 1

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp1781 ]
  jnz l1852

  mov dword [ tmp1854 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp1854 ]
  lea  r8 , [ tmp1811 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp1811 ]
  lea  rax , [ tmp1781 ]
  call  AST_GetDataType

  mov [ xType + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1781 ]
  mov [ xType + Variant_t.value], rax

  mov dword [ tmp1781 ], 57

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jnz l1855

  cmp [ xType + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ xType + Variant_t.value]
  mov dword [ rv ], eax

  jmp l1856

l1855:

  mov dword [ tmp1825 ], 1

  mov dword [ tmp1781 ], 74

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jz l1857

  mov dword [ tmp1832 ], 1

  mov dword [ tmp1781 ], 75

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1781 ]
  jz l1858

  mov dword [ tmp1781 ], 76

  mov dword [ tmp1832 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1781 ]
  setz byte [ tmp1832 ]

l1858:

  mov eax, dword [ tmp1832 ]
  mov dword [ tmp1825 ], eax

l1857:

  cmp dword [ tmp1825 ], 0
  jz l1859

  mov dword [ rv ], 5

l1859:

l1860:

l1856:

l1852:

l1853:

l1821:

l1819:

l1793:

; 
; END: switch opcode
; -----------------------------
; 
l1791:

l1792:

  jmp l1861

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1812 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp1812 ]
  push rdi
  lea  rdi , [ tmp1811 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp1863 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal136 ]
  lea  rdx , [ tmp1811 ]
  lea  r8 , [ tmp1863 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp1863 ]
  call qword [rbx + 8 * 41 ]

l1861:

l1862:

l1779:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1777 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1780 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1789 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1790 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1808 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1811 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1812 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1815 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1863 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy

  add  rsp, 368
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore tmp1776
  restore tmp1777
  restore tmp1780
  restore tmp1781
  restore tmp1782
  restore tmp1784
  restore tmp1786
  restore tmp1788
  restore tmp1789
  restore tmp1790
  restore tmp1803
  restore tmp1805
  restore tmp1808
  restore tmp1811
  restore tmp1812
  restore tmp1815
  restore tmp1823
  restore tmp1825
  restore tmp1832
  restore tmp1840
  restore tmp1846
  restore tmp1854
  restore tmp1863
  restore opcode
  restore symbolInfo
  restore box
  restore children
  restore childrenCnt
  restore x
  restore y
  restore xType

; -----------------------------------------------
; function AST_TypeCast
; -----------------------------------------------
AST_TypeCast:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 6 )
  tmp1865 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1867 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1888 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1889 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dstDataType EQU rbp - 92 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 6 )
  tmp1864 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1866 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 8 , readHits= 8 )
  tmp1870 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1873 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1875 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1879 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1883 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  srcDataType EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov dword [ dstDataType ], edx
  xor eax, eax
  mov [tmp1865 + Variant_t.type], eax
  mov [tmp1867 + Variant_t.type], eax
  mov [tmp1888 + Variant_t.type], eax
  mov [tmp1889 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1865 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1866 ], 77

  mov [ tmp1867 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1866 ]
  mov [ tmp1867 + Variant_t.value], rax

  lea rcx, [ tmp1865 ]
  lea rdx, [ tmp1867 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1868

  mov [ tmp1867 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstDataType ]
  mov [ tmp1867 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1867 ]
  call  __MOLD_VariantStoreAtKey

  jmp l1869

l1868:

  lea rcx , [ node ]
  lea  rax , [ srcDataType ]
  call  AST_GetDataType

  mov eax, dword [ srcDataType ]
  cmp eax, dword [ dstDataType ]
  jz l1871

  mov dword [ tmp1873 ], 1

  mov dword [ tmp1866 ], 4

  mov eax, dword [ srcDataType ]
  cmp eax, dword [ tmp1866 ]
  jnz l1874

  mov dword [ tmp1866 ], -1

  mov dword [ tmp1873 ], 0
  mov ecx, dword [ dstDataType ]
  cmp ecx, dword [ tmp1866 ]
  setnz byte [ tmp1873 ]

l1874:

  cmp dword [ tmp1873 ], 0
  jz l1876

  mov dword [ tmp1875 ], 1

  mov dword [ tmp1866 ], 4

  mov eax, dword [ dstDataType ]
  cmp eax, dword [ tmp1866 ]
  jnz l1878

  mov dword [ tmp1866 ], -1

  mov dword [ tmp1875 ], 0
  mov ecx, dword [ srcDataType ]
  cmp ecx, dword [ tmp1866 ]
  setnz byte [ tmp1875 ]

l1878:

  cmp dword [ tmp1875 ], 0
  jz l1880

  mov dword [ tmp1879 ], 1

  mov dword [ tmp1866 ], 6

  mov eax, dword [ srcDataType ]
  cmp eax, dword [ tmp1866 ]
  jnz l1882

  mov dword [ tmp1866 ], -1

  mov dword [ tmp1879 ], 0
  mov ecx, dword [ dstDataType ]
  cmp ecx, dword [ tmp1866 ]
  setnz byte [ tmp1879 ]

l1882:

  cmp dword [ tmp1879 ], 0
  jz l1884

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __const1886 ]
  lea  r8 , [ __const1887 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rax , [ tmp1866 ]
  call  AST_GetNextId

  mov [ tmp1867 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1866 ]
  mov [ tmp1867 + Variant_t.value], rax

  lea  rcx , [ rv ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1867 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp1867 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstDataType ]
  mov [ tmp1867 + Variant_t.value], rax

  lea  rcx , [ rv ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1867 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1865 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp1888 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1888 + Variant_t.value], 0

  lea  rcx, [ tmp1889 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1889 ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1865 ]
  lea  rdx , [ tmp1888 ]
  lea  r8 , [ tmp1889 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx, [ tmp1867 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1867 ]
  lea rdx, [ tmp1865 ]
  call __MOLD_VariantMove

  lea  rcx , [ rv ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1867 ]
  call  __MOLD_VariantStoreAtKey

l1884:

l1885:

l1880:

l1881:

l1876:

l1877:

l1871:

l1872:

l1869:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1865 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1867 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1888 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1889 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore node
  restore dstDataType
  restore rv
  restore tmp1864
  restore tmp1865
  restore tmp1866
  restore tmp1867
  restore tmp1870
  restore tmp1873
  restore tmp1875
  restore tmp1879
  restore tmp1883
  restore tmp1888
  restore tmp1889
  restore srcDataType

; -----------------------------------------------
; function AST_GetTopNodeInBlock
; -----------------------------------------------
AST_GetTopNodeInBlock:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1893 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1894 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1892 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1895 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp1893 + Variant_t.type], eax
  mov [tmp1894 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: while
; 
l1890:

  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1894 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1894 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1893 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1895 ], 31

  mov [ tmp1894 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1895 ]
  mov [ tmp1894 + Variant_t.value], rax

  lea rcx, [ tmp1893 ]
  lea rdx, [ tmp1894 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1891

  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  jmp l1890

l1891:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1893 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1894 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore tmp1892
  restore tmp1893
  restore tmp1894
  restore tmp1895

; -----------------------------------------------
; function AST_GetParentBlock
; -----------------------------------------------
AST_GetParentBlock:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1896 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp1896 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ node ]
  lea  rax , [ tmp1896 ]
  call  AST_GetTopNodeInBlock

  lea  rcx , [ tmp1896 ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1896 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore tmp1896

; -----------------------------------------------
; function AST_IsOkAsBox
; -----------------------------------------------
AST_IsOkAsBox:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  tmp1900 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1902 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1897 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1899 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp1901 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp1904 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp1900 + Variant_t.type], eax
  mov [tmp1902 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ rv ], 0

  mov dword [ tmp1897 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1900 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1901 ], 52

  mov [ tmp1902 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1901 ]
  mov [ tmp1902 + Variant_t.value], rax

  lea rcx, [ tmp1900 ]
  lea rdx, [ tmp1902 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1898

  mov dword [ tmp1899 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1902 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1901 ], 54

  mov [ tmp1900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1901 ]
  mov [ tmp1900 + Variant_t.value], rax

  lea rcx, [ tmp1902 ]
  lea rdx, [ tmp1900 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1903

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1900 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1901 ], 55

  mov [ tmp1902 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1901 ]
  mov [ tmp1902 + Variant_t.value], rax

  lea  rcx , [ tmp1900 ]
  lea  rdx , [ tmp1902 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1899 ], eax

l1903:

  mov eax, dword [ tmp1899 ]
  mov dword [ tmp1897 ], eax

l1898:

  cmp dword [ tmp1897 ], 0
  jz l1905

  mov dword [ rv ], 1

l1905:

l1906:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1900 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1902 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore tmp1897
  restore tmp1899
  restore tmp1900
  restore tmp1901
  restore tmp1902
  restore tmp1904

; -----------------------------------------------
; function AST_CloneNode
; -----------------------------------------------
AST_CloneNode:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  newChildren EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  propertyId EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  propertyValue EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp1909 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp1912 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oneChild EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  idx EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp1913 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [newChildren + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp1909 + Variant_t.type], eax
  mov [tmp1912 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantMapCreate

; 
; -----------------------------
; BEGIN: for keys propertyId values propertyValue
; 
  jmp l1908

l1907:

  lea  rcx , [ rv ]
  lea  rdx , [ propertyId ]
  lea  r8 , [ propertyValue ]
  call  __MOLD_VariantStoreAtKey

  ret

l1908:

  lea rcx , [ node ]
  lea rdx , [ propertyId ]
  lea r8 , [ propertyValue ]
  lea r9 , [ l1907 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys propertyId values propertyValue
; -----------------------------
; 
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1909 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys idx values oneChild
; 
  jmp l1911

l1910:

  lea rcx , [ oneChild ]
  lea  rax , [ tmp1912 ]
  call  AST_CloneNode

  lea  rcx , [ newChildren ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1912 ]
  call  __MOLD_VariantStoreAtIndex_int32

  ret

l1911:

  lea  rcx , [ tmp1909 ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l1910 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys idx values oneChild
; -----------------------------
; 
  lea  rcx , [ rv ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  lea  rax , [ tmp1913 ]
  call  AST_GetNextId

  mov [ tmp1909 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1913 ]
  mov [ tmp1909 + Variant_t.value], rax

  lea  rcx , [ rv ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1909 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1909 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1909 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator propertyId
  ; Skipped loop iterator propertyValue
  lea  rcx, [ tmp1909 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1912 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore node
  restore rv
  restore newChildren
  restore propertyId
  restore propertyValue
  restore tmp1909
  restore tmp1912
  restore idx
  restore oneChild
  restore tmp1913

; -----------------------------------------------
; function SymbolTable_GetNextId
; -----------------------------------------------
SymbolTable_GetNextId:

  ; init frame
  ; ----------
  rv EQU rdi
  tmp1914 EQU rbp - 12 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 48


  ; code
  ; ----

  mov eax, dword [ SymbolTable_NextId ]
  mov dword [ rv ], eax

  mov dword [ tmp1914 ], 1

  mov eax, dword [ rv ]
  add eax, dword [ tmp1914 ]
  mov dword [ SymbolTable_NextId ], eax


  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rdi
  pop  rbp
  ret


  restore rv
  restore tmp1914

; -----------------------------------------------
; function __SymbolTable_constructor$1
; -----------------------------------------------
__SymbolTable_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 11 , readHits= 12 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1916 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp1917 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1918 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1921 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1922 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1915 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp1916 + Variant_t.type], eax
  mov [tmp1917 + Variant_t.type], eax
  mov [tmp1918 + Variant_t.type], eax
  mov [tmp1921 + Variant_t.type], eax
  mov [tmp1922 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal146
  lea rdx , [ __literal146 ]
  call  __SymbolTable__debug$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1915 ], 0

  mov [ tmp1916 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1915 ]
  mov [ tmp1916 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1915 ], 128

  mov [ tmp1916 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1915 ]
  mov [ tmp1916 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1915 ], 0

  mov [ tmp1916 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1915 ]
  mov [ tmp1916 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1915 ], 0

  mov [ tmp1916 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1915 ]
  mov [ tmp1916 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1916 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1916 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1916 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1916 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __const1919 ]
  lea  r8 , [ __const1920 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1921 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1917 ]
  lea rdx, [ tmp1918 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1916 ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __const1923 ]
  lea  r8 , [ __const1924 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1921 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1917 ]
  lea rdx, [ tmp1918 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1916 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __const1925 ]
  lea  r8 , [ __const1926 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1921 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1917 ]
  lea rdx, [ tmp1918 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1916 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __const1927 ]
  lea  r8 , [ __const1928 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1921 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1917 ]
  lea rdx, [ tmp1918 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1916 ]
  lea  rdx , [ __literal159 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __const1929 ]
  lea  r8 , [ __const1930 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1921 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1917 ]
  lea rdx, [ tmp1918 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1916 ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __const1931 ]
  lea  r8 , [ __const1932 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1921 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ tmp1918 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1917 ]
  lea rdx, [ tmp1918 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1916 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1916 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp1916 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1916 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1916 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1916 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1922 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore app
  restore tmp1915
  restore tmp1916
  restore tmp1917
  restore tmp1918
  restore tmp1921
  restore tmp1922

; -----------------------------------------------
; function __SymbolTable__debug$1
; -----------------------------------------------
__SymbolTable__debug$1:

  ret


  restore this
  restore app
  restore tmp1915
  restore tmp1916
  restore tmp1917
  restore tmp1918
  restore tmp1921
  restore tmp1922

; -----------------------------------------------
; function __SymbolTable__error$1
; -----------------------------------------------
__SymbolTable__error$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  msg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1933 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1934 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  xor eax, eax
  mov [tmp1933 + Variant_t.type], eax
  mov [tmp1934 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp1934 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1934 ]
  lea rdx , [ msg ]
  lea  rax , [ tmp1933 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6455
  movsxd rax, dword [ tmp1933 + Variant_t.value ]
  mov    qword [ tmp1933 + Variant_t.value ], rax
l6455:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp1933 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1934 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore msg
  restore tmp1933
  restore tmp1934

; -----------------------------------------------
; function __SymbolTable__errorTypeMismatch$2
; -----------------------------------------------
__SymbolTable__errorTypeMismatch$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  oldType EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newType EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1935 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1936 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1937 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1938 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ oldType ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ newType ], xmm0
  xor eax, eax
  mov [tmp1935 + Variant_t.type], eax
  mov [tmp1936 + Variant_t.type], eax
  mov [tmp1937 + Variant_t.type], eax
  mov [tmp1938 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ newType ]
  lea  rax , [ tmp1938 ]
  call  AST_ConvertDataTypeToText

  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal164 ]
  lea  rdx , [ tmp1938 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1936 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1937 ]
  lea  rdx , [ __literal165 ]
  lea  r8 , [ tmp1936 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ oldType ]
  lea  rax , [ tmp1938 ]
  call  AST_ConvertDataTypeToText

  lea  rcx, [ tmp1935 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1936 ]
  lea  rdx , [ tmp1938 ]
  lea  r8 , [ tmp1935 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1935 ]
  call  __SymbolTable__error$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1935 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1936 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1938 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore oldType
  restore newType
  restore tmp1935
  restore tmp1936
  restore tmp1937
  restore tmp1938

; -----------------------------------------------
; function __SymbolTable__errorIfUsedAsNumber$1
; -----------------------------------------------
__SymbolTable__errorIfUsedAsNumber$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp1940 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1943 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1944 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1939 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp1940 + Variant_t.type], eax
  mov [tmp1943 + Variant_t.type], eax
  mov [tmp1944 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal166 ]
  lea  r8 , [ tmp1940 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1940  + Variant_t.type], 0
  jz l1941

  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1943 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1944 ]
  lea  rdx , [ __literal167 ]
  lea  r8 , [ tmp1943 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1943 ]
  call  __SymbolTable__error$1

l1941:

l1942:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1940 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1943 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore name
  restore symbolInfo
  restore tmp1939
  restore tmp1940
  restore tmp1943
  restore tmp1944

; -----------------------------------------------
; function __SymbolTable_getDeep$0
; -----------------------------------------------
__SymbolTable_getDeep$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __SymbolTable_exportSymbols$0
; -----------------------------------------------
__SymbolTable_exportSymbols$0_vcall:
__SymbolTable_exportSymbols$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __SymbolTable_insert$2
; -----------------------------------------------
__SymbolTable_insert$2_vcall:
__SymbolTable_insert$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 6 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 3 )
  entry EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 3 , readHits= 4 )
  tmp1946 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1947 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp1950 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1951 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1945 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1952 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ entry ], xmm0
  xor eax, eax
  mov [tmp1946 + Variant_t.type], eax
  mov [tmp1947 + Variant_t.type], eax
  mov [tmp1950 + Variant_t.type], eax
  mov [tmp1951 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1947 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1947 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1946 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp1946  + Variant_t.type], 0
  jz l1948

  lea  rcx, [ tmp1951 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal168 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1951 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1950 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1951 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1950 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1950 ]
  call  __SymbolTable__error$1

  jmp l1949

l1948:

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1947 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1947 ]
  lea  rdx , [ name ]
  lea  r8 , [ entry ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1952 ], 0

  mov [ tmp1947 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1952 ]
  mov [ tmp1947 + Variant_t.value], rax

  lea  rcx , [ entry ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp1947 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp1952 ], 0

  mov [ tmp1947 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1952 ]
  mov [ tmp1947 + Variant_t.value], rax

  lea  rcx , [ entry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1947 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1947 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ entry ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1947 ]
  call  __MOLD_VariantStoreAtKey

l1949:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1946 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1947 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1950 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1951 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore name
  restore entry
  restore tmp1945
  restore tmp1946
  restore tmp1947
  restore tmp1950
  restore tmp1951
  restore tmp1952

; -----------------------------------------------
; function __SymbolTable_remove$1
; -----------------------------------------------
__SymbolTable_remove$1_vcall:
__SymbolTable_remove$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  entry EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  newSymbols EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1953 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1957 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1958 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  id EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  symbolInfo EQU rbp - 152 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 4 )
  tmp1956 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [entry + Variant_t.type], eax
  mov [newSymbols + Variant_t.type], eax
  mov [tmp1953 + Variant_t.type], eax
  mov [tmp1957 + Variant_t.type], eax
  mov [tmp1958 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ entry ]
  call  __SymbolTable_lookup$1

  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newSymbols ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1953 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys id values symbolInfo
; 
  jmp l1955

l1954:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1957 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ entry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1958 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1957 ]
  lea rdx, [ tmp1958 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1959

  lea  rcx , [ newSymbols ]
  lea  rdx , [ id ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey

l1959:

l1960:

  ret

l1955:

  lea rcx , [ tmp1953 ]
  lea rdx , [ id ]
  lea r8 , [ symbolInfo ]
  lea r9 , [ l1954 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys id values symbolInfo
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ newSymbols ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1953 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1957 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1958 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator id
  ; Skipped loop iterator symbolInfo

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore name
  restore entry
  restore newSymbols
  restore tmp1953
  restore tmp1956
  restore tmp1957
  restore tmp1958
  restore id
  restore symbolInfo

; -----------------------------------------------
; function __SymbolTable_importExternalVariable$1
; -----------------------------------------------
__SymbolTable_importExternalVariable$1_vcall:
__SymbolTable_importExternalVariable$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1961 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1964 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp1961 + Variant_t.type], eax
  mov [tmp1964 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1961 ]
  lea  rdx , [ __const1962 ]
  lea  r8 , [ __const1963 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp1964 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1964 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp1961 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1964 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ tmp1961 ]
  call  __SymbolTable_insert$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1964 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore tmp1961
  restore tmp1964

; -----------------------------------------------
; function __SymbolTable_insertGlobal$2
; -----------------------------------------------
__SymbolTable_insertGlobal$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  entry EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1965 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1966 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1967 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ entry ], xmm0
  xor eax, eax
  mov [tmp1965 + Variant_t.type], eax
  mov [tmp1966 + Variant_t.type], eax
  mov [tmp1967 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp1967 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp1967 ]
  lea  rax , [ tmp1966 ]
  mov  r10d, 1
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6456
  movsxd rax, dword [ tmp1966 + Variant_t.value ]
  mov    qword [ tmp1966 + Variant_t.value ], rax
l6456:


  lea rcx , [ tmp1966 ]
  lea rdx , [ name ]
  lea r8 , [ entry ]
  lea  rax , [ tmp1965 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6457
  movsxd rax, dword [ tmp1965 + Variant_t.value ]
  mov    qword [ tmp1965 + Variant_t.value ], rax
l6457:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp1965 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1966 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1967 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore name
  restore entry
  restore tmp1965
  restore tmp1966
  restore tmp1967

; -----------------------------------------------
; function __SymbolTable__lookupInternal$1
; -----------------------------------------------
__SymbolTable__lookupInternal$1_vcall:
__SymbolTable__lookupInternal$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 2 )
  tab EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 7 )
  tmp1968 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp1975 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  x EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp1971 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1973 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1974 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp1978 EQU rbp - 120 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp1980 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp1984 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tab + Variant_t.type], eax
  mov [tmp1968 + Variant_t.type], eax
  mov [tmp1975 + Variant_t.type], eax
  mov [x + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp1968 ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tab ]
  call __MOLD_VariantDestroy
  lea rcx, [ tab ]
  lea rdx, [ this ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: while
; 
l1969:

  mov dword [ tmp1971 ], 0

  cmp [ rv + Variant_t.type ], 0
  jnz l1972

  lea  rcx , [ tab ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1974 ], 0

  mov [ tmp1975 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1974 ]
  mov [ tmp1975 + Variant_t.value], rax

  lea  rcx , [ tmp1975 ]
  lea  rdx , [ tmp1968 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1971 ], eax

l1972:

  cmp dword [ tmp1971 ], 0
  jz l1970

  lea  rcx , [ tab ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tab ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tab ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  mov  r10d, 3
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6458
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l6458:


  jmp l1969

l1970:

; 
; END: while
; -----------------------------
; 
  cmp [ rv  + Variant_t.type], 0
  jz l1976

  mov dword [ tmp1978 ], 0

  lea  rcx , [ tab ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1975 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1974 ], 0

  mov [ tmp1968 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1974 ]
  mov [ tmp1968 + Variant_t.value], rax

  lea rcx, [ tmp1975 ]
  lea rdx, [ tmp1968 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l1979

  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1974 ], 0

  mov [ tmp1975 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1974 ]
  mov [ tmp1975 + Variant_t.value], rax

  lea  rcx , [ tmp1975 ]
  lea  rdx , [ tmp1968 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp1978 ], eax

l1979:

  cmp dword [ tmp1978 ], 0
  jz l1981

  mov dword [ tmp1980 ], 1

  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1975 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1974 ], 1

  mov [ tmp1968 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1974 ]
  mov [ tmp1968 + Variant_t.value], rax

  lea rcx, [ tmp1975 ]
  lea rdx, [ tmp1968 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l1983

  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1974 ], 2

  mov [ tmp1975 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1974 ]
  mov [ tmp1975 + Variant_t.value], rax

  lea  rcx , [ tmp1968 ]
  lea  rdx , [ tmp1975 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp1980 ], eax

l1983:

  cmp dword [ tmp1980 ], 0
  jz l1985

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  call  __MOLD_VariantArrayCreate

  mov dword [ tmp1974 ], 0

  lea  rcx , [ x ]
  lea  rdx , [ tmp1974 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

l1985:

l1986:

l1981:

l1982:

l1976:

l1977:


  ; clean frame
  ; -----------
  lea  rcx, [ tab ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1968 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1975 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tab
  restore tmp1968
  restore tmp1971
  restore tmp1973
  restore tmp1974
  restore tmp1975
  restore tmp1978
  restore tmp1980
  restore tmp1984
  restore x

; -----------------------------------------------
; function __SymbolTable_lookup$1
; -----------------------------------------------
__SymbolTable_lookup$1_vcall:
__SymbolTable_lookup$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp1990 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1991 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp1992 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1993 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp1987 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp1990 + Variant_t.type], eax
  mov [tmp1991 + Variant_t.type], eax
  mov [tmp1992 + Variant_t.type], eax
  mov [tmp1993 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  call  __SymbolTable__lookupInternal$1

  cmp [ rv + Variant_t.type ], 0
  jnz l1988

  lea  rcx, [ tmp1991 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1991 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp1990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1991 ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp1990 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp1990 ]
  call  __SymbolTable__error$1

l1988:

l1989:

  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1992 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rv ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1993 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp1992 ]
  lea rdx, [ tmp1993 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l1994

  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1993 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rv ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1993 ]
  call  __MOLD_VariantStoreAtKey

l1994:

l1995:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1990 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1991 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1992 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1993 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp1987
  restore tmp1990
  restore tmp1991
  restore tmp1992
  restore tmp1993

; -----------------------------------------------
; function __SymbolTable_lookupForRead$1
; -----------------------------------------------
__SymbolTable_lookupForRead$1_vcall:
__SymbolTable_lookupForRead$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp1996 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1997 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1999 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp1998 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp1996 + Variant_t.type], eax
  mov [tmp1997 + Variant_t.type], eax
  mov [tmp1999 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1997 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp1998 ], 1

  mov [ tmp1999 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1998 ]
  mov [ tmp1999 + Variant_t.value], rax

  lea  rcx , [ tmp1997 ]
  lea  rdx , [ tmp1999 ]
  lea  r8 , [ tmp1996 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1996 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp1996 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1997 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1999 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp1996
  restore tmp1997
  restore tmp1998
  restore tmp1999

; -----------------------------------------------
; function __SymbolTable_lookupForCall$3
; -----------------------------------------------
__SymbolTable_lookupForCall$3_vcall:
__SymbolTable_lookupForCall$3:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  isRetValUsed EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2002 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2003 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2004 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2000 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2001 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ isRetValUsed ], xmm0
  xor eax, eax
  mov [tmp2002 + Variant_t.type], eax
  mov [tmp2003 + Variant_t.type], eax
  mov [tmp2004 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ paramsCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp2000 ], eax

  cmp [ isRetValUsed + Variant_t.type], VARIANT_BOOLEAN
  jnz __MOLD_PrintErrorAndDie.booleanExpected
  mov eax, dword [ isRetValUsed + Variant_t.value]
  mov dword [ tmp2001 ], eax

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2000 ]
  mov r9d , dword [ tmp2001 ]
  lea  rax , [ rv ]
  call  __SymbolTable_lookupFunction$3

  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2003 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2000 ], 1

  mov [ tmp2004 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2000 ]
  mov [ tmp2004 + Variant_t.value], rax

  lea  rcx , [ tmp2003 ]
  lea  rdx , [ tmp2004 ]
  lea  r8 , [ tmp2002 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2002 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2002 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2003 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2004 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore paramsCnt
  restore isRetValUsed
  restore rv
  restore tmp2000
  restore tmp2001
  restore tmp2002
  restore tmp2003
  restore tmp2004

; -----------------------------------------------
; function __SymbolTable_lookupForWrite$1
; -----------------------------------------------
__SymbolTable_lookupForWrite$1_vcall:
__SymbolTable_lookupForWrite$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2005 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2006 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2008 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2007 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2005 + Variant_t.type], eax
  mov [tmp2006 + Variant_t.type], eax
  mov [tmp2008 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ rv ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2006 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2007 ], 1

  mov [ tmp2008 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2007 ]
  mov [ tmp2008 + Variant_t.value], rax

  lea  rcx , [ tmp2006 ]
  lea  rdx , [ tmp2008 ]
  lea  r8 , [ tmp2005 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2005 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2005 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2006 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2008 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp2005
  restore tmp2006
  restore tmp2007
  restore tmp2008

; -----------------------------------------------
; function __SymbolTable_lookupForReadAndWrite$1
; -----------------------------------------------
__SymbolTable_lookupForReadAndWrite$1_vcall:
__SymbolTable_lookupForReadAndWrite$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2009 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2010 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2012 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2011 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2009 + Variant_t.type], eax
  mov [tmp2010 + Variant_t.type], eax
  mov [tmp2012 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2011 ], 1

  mov [ tmp2012 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2011 ]
  mov [ tmp2012 + Variant_t.value], rax

  lea  rcx , [ tmp2010 ]
  lea  rdx , [ tmp2012 ]
  lea  r8 , [ tmp2009 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2009 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ rv ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2012 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2011 ], 1

  mov [ tmp2010 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2011 ]
  mov [ tmp2010 + Variant_t.value], rax

  lea  rcx , [ tmp2012 ]
  lea  rdx , [ tmp2010 ]
  lea  r8 , [ tmp2009 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2009 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2009 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2012 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp2009
  restore tmp2010
  restore tmp2011
  restore tmp2012

; -----------------------------------------------
; function __SymbolTable_lookupForWriteOrInsert$1
; -----------------------------------------------
__SymbolTable_lookupForWriteOrInsert$1_vcall:
__SymbolTable_lookupForWriteOrInsert$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp2013 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2014 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2015 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ tmp2014 ]
  call  __SymbolTable_isset$1

  mov dword [ tmp2015 ], 0

  mov eax, dword [ tmp2014 ]
  cmp eax, dword [ tmp2015 ]
  jnz l2016

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable_insertLocal$1

l2016:

l2017:

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  call  __SymbolTable_lookupForWrite$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp2013
  restore tmp2014
  restore tmp2015

; -----------------------------------------------
; function __SymbolTable_lookupGlobal$1
; -----------------------------------------------
__SymbolTable_lookupGlobal$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2018 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2018 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2018 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2018 ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6459
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l6459:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp2018 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp2018

; -----------------------------------------------
; function __SymbolTable_decreaseReadHits$1
; -----------------------------------------------
__SymbolTable_decreaseReadHits$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  entry EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  tmp2019 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2020 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2022 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2021 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [entry + Variant_t.type], eax
  mov [tmp2019 + Variant_t.type], eax
  mov [tmp2020 + Variant_t.type], eax
  mov [tmp2022 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ entry ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ entry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2020 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2021 ], 1

  mov [ tmp2022 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2021 ]
  mov [ tmp2022 + Variant_t.value], rax

  lea  rcx , [ tmp2020 ]
  lea  rdx , [ tmp2022 ]
  lea  r8 , [ tmp2019 ]
  call  __MOLD_VariantSub

  lea  rcx , [ entry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2019 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2019 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2020 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2022 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore name
  restore entry
  restore tmp2019
  restore tmp2020
  restore tmp2021
  restore tmp2022

; -----------------------------------------------
; function __SymbolTable_decreaseWriteHits$1
; -----------------------------------------------
__SymbolTable_decreaseWriteHits$1_vcall:
__SymbolTable_decreaseWriteHits$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  entry EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  tmp2023 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2024 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2026 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2025 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [entry + Variant_t.type], eax
  mov [tmp2023 + Variant_t.type], eax
  mov [tmp2024 + Variant_t.type], eax
  mov [tmp2026 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ entry ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ entry ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2024 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2025 ], 1

  mov [ tmp2026 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2025 ]
  mov [ tmp2026 + Variant_t.value], rax

  lea  rcx , [ tmp2024 ]
  lea  rdx , [ tmp2026 ]
  lea  r8 , [ tmp2023 ]
  call  __MOLD_VariantSub

  lea  rcx , [ entry ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2023 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2023 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2024 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2026 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore name
  restore entry
  restore tmp2023
  restore tmp2024
  restore tmp2025
  restore tmp2026

; -----------------------------------------------
; function __SymbolTable_isset$1
; -----------------------------------------------
__SymbolTable_isset$1_vcall:
  mov  [rax + Variant_t.type], VARIANT_BOOLEAN
  mov  [rax + Variant_t.value], 0
  add  rax, Variant_t.value

__SymbolTable_isset$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2027 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2027 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ tmp2027 ]
  call  __SymbolTable__lookupInternal$1

  xor eax, eax
  cmp [ tmp2027  + Variant_t.type], 0
  setnz al
  mov dword [ rv ], eax


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2027 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp2027

; -----------------------------------------------
; function __SymbolTable_useAsArray$1
; -----------------------------------------------
__SymbolTable_useAsArray$1_vcall:
__SymbolTable_useAsArray$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2029 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2028 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2029 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$1

  mov dword [ tmp2028 ], 9

  mov [ tmp2029 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2028 ]
  mov [ tmp2029 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ tmp2029 ]
  call  __SymbolTable_assignTypeAndFreeze$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2029 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2028
  restore tmp2029

; -----------------------------------------------
; function __SymbolTable_useAsArrayOrString$1
; -----------------------------------------------
__SymbolTable_useAsArrayOrString$1_vcall:
__SymbolTable_useAsArrayOrString$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2031 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2030 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2031 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$1

  mov dword [ tmp2030 ], -1

  mov [ tmp2031 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2030 ]
  mov [ tmp2031 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ tmp2031 ]
  call  __SymbolTable_assignTypeAndFreeze$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2031 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2030
  restore tmp2031

; -----------------------------------------------
; function __SymbolTable_useAsMap$1
; -----------------------------------------------
__SymbolTable_useAsMap$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2033 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2032 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2033 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$1

  mov dword [ tmp2032 ], 10

  mov [ tmp2033 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2032 ]
  mov [ tmp2033 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ tmp2033 ]
  call  __SymbolTable_assignTypeAndFreeze$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2033 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2032
  restore tmp2033

; -----------------------------------------------
; function __SymbolTable_useAsIndex$1
; -----------------------------------------------
__SymbolTable_useAsIndex$1_vcall:
__SymbolTable_useAsIndex$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2034 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  mov dword [ tmp2034 ], 1

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2034 ]
  call  __SymbolTable_assignType$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2034

; -----------------------------------------------
; function __SymbolTable_useAsInteger$1
; -----------------------------------------------
__SymbolTable_useAsInteger$1_vcall:
__SymbolTable_useAsInteger$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2035 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  mov dword [ tmp2035 ], 1

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2035 ]
  call  __SymbolTable_assignType$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2035

; -----------------------------------------------
; function __SymbolTable_useAsFloat$1
; -----------------------------------------------
__SymbolTable_useAsFloat$1_vcall:
__SymbolTable_useAsFloat$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2036 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  mov dword [ tmp2036 ], 3

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2036 ]
  call  __SymbolTable_assignType$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2036

; -----------------------------------------------
; function __SymbolTable_useAsString$1
; -----------------------------------------------
__SymbolTable_useAsString$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2037 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$1

  mov dword [ tmp2037 ], 4

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2037 ]
  call  __SymbolTable_assignType$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2037

; -----------------------------------------------
; function __SymbolTable_useAsKey$1
; -----------------------------------------------
__SymbolTable_useAsKey$1_vcall:
__SymbolTable_useAsKey$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2038 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$1

  mov dword [ tmp2038 ], 4

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2038 ]
  call  __SymbolTable_assignType$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2038

; -----------------------------------------------
; function __SymbolTable_useAsObject$1
; -----------------------------------------------
__SymbolTable_useAsObject$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2039 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$1

  mov dword [ tmp2039 ], 6

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2039 ]
  call  __SymbolTable_assignType$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2039

; -----------------------------------------------
; function __SymbolTable_useAsMapOrObject$1
; -----------------------------------------------
__SymbolTable_useAsMapOrObject$1_vcall:
__SymbolTable_useAsMapOrObject$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2041 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2040 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2041 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$1

  mov dword [ tmp2040 ], -1

  mov [ tmp2041 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2040 ]
  mov [ tmp2041 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ tmp2041 ]
  call  __SymbolTable_assignTypeAndFreeze$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2041 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2040
  restore tmp2041

; -----------------------------------------------
; function __SymbolTable_useAsTypeofArg$1
; -----------------------------------------------
__SymbolTable_useAsTypeofArg$1_vcall:
__SymbolTable_useAsTypeofArg$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2043 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2042 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2043 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2042 ], -1

  mov [ tmp2043 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2042 ]
  mov [ tmp2043 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ tmp2043 ]
  call  __SymbolTable_assignTypeAndFreeze$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore name
  restore tmp2042
  restore tmp2043

; -----------------------------------------------
; function __SymbolTable_useAsNumber$1
; -----------------------------------------------
__SymbolTable_useAsNumber$1_vcall:
__SymbolTable_useAsNumber$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  tmp2045 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2044 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp2045 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  mov dword [ tmp2044 ], 1

  mov eax, dword [ tmp2044 ]
  mov [ tmp2045 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2045 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal166 ]
  lea  r8 , [ tmp2045 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2045 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore symbolInfo
  restore tmp2044
  restore tmp2045

; -----------------------------------------------
; function __SymbolTable_enterScope$0
; -----------------------------------------------
__SymbolTable_enterScope$0_vcall:
__SymbolTable_enterScope$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 19 )
  tmp2047 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp2048 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2051 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2052 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2053 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2055 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2046 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2054 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2047 + Variant_t.type], eax
  mov [tmp2048 + Variant_t.type], eax
  mov [tmp2051 + Variant_t.type], eax
  mov [tmp2052 + Variant_t.type], eax
  mov [tmp2053 + Variant_t.type], eax
  mov [tmp2055 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2048 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp2047 ]
  lea rdx, [ tmp2048 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2049

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2047 ]
  push rdi
  lea  rdi , [ tmp2048 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2052 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal175 ]
  lea  rdx , [ tmp2048 ]
  lea  r8 , [ tmp2052 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2051 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2052 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2051 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2051 ]
  call  __SymbolTable__error$1

l2049:

l2050:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rv ]
  lea  rdx, [vtable_SymbolTable]
  call __MOLD_VariantObjectCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2048 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ rv ]
  lea rdx , [ tmp2048 ]
  lea  rax , [ tmp2047 ]
  call  __SymbolTable_constructor$1

  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2053 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2054 ], 1

  mov [ tmp2055 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2054 ]
  mov [ tmp2055 + Variant_t.value], rax

  lea  rcx , [ tmp2053 ]
  lea  rdx , [ tmp2055 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rv ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rv ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rv ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp2047 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2047 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2048 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2051 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2052 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2053 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2055 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp2046
  restore tmp2047
  restore tmp2048
  restore tmp2051
  restore tmp2052
  restore tmp2053
  restore tmp2054
  restore tmp2055

; -----------------------------------------------
; function __SymbolTable_enterScopeForLoop$0
; -----------------------------------------------
__SymbolTable_enterScopeForLoop$0_vcall:
__SymbolTable_enterScopeForLoop$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  tmp2056 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2057 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2059 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2058 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2056 + Variant_t.type], eax
  mov [tmp2057 + Variant_t.type], eax
  mov [tmp2059 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ rv ]
  call  __SymbolTable_enterScope$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp2057 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2058 ], 1

  mov [ tmp2059 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2058 ]
  mov [ tmp2059 + Variant_t.value], rax

  lea  rcx , [ tmp2057 ]
  lea  rdx , [ tmp2059 ]
  lea  r8 , [ tmp2056 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp2056 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2056 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2057 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2059 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp2056
  restore tmp2057
  restore tmp2058
  restore tmp2059

; -----------------------------------------------
; function __SymbolTable_enterScopeForProcedure$1
; -----------------------------------------------
__SymbolTable_enterScopeForProcedure$1_vcall:
__SymbolTable_enterScopeForProcedure$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  functionName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2060 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2061 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2063 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2062 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ functionName ], xmm0
  xor eax, eax
  mov [tmp2060 + Variant_t.type], eax
  mov [tmp2061 + Variant_t.type], eax
  mov [tmp2063 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ rv ]
  call  __SymbolTable_enterScope$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2061 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2062 ], 1

  mov [ tmp2063 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2062 ]
  mov [ tmp2063 + Variant_t.value], rax

  lea  rcx , [ tmp2061 ]
  lea  rdx , [ tmp2063 ]
  lea  r8 , [ tmp2060 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ rv ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2060 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ rv ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ functionName ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2060 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2061 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2063 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore functionName
  restore rv
  restore tmp2060
  restore tmp2061
  restore tmp2062
  restore tmp2063

; -----------------------------------------------
; function __SymbolTable_leaveScope$0
; -----------------------------------------------
__SymbolTable_leaveScope$0_vcall:
__SymbolTable_leaveScope$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  tmp2065 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2067 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2064 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2066 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2065 + Variant_t.type], eax
  mov [tmp2067 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2065 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2066 ], 1

  mov [ tmp2067 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2066 ]
  mov [ tmp2067 + Variant_t.value], rax

  lea rcx, [ tmp2067 ]
  lea rdx, [ tmp2065 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2068

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal179
  lea rdx , [ __literal179 ]
  call  __SymbolTable__error$1

l2068:

l2069:

  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2065 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2067 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp2064
  restore tmp2065
  restore tmp2066
  restore tmp2067

; -----------------------------------------------
; function __SymbolTable_insertFunction$2
; -----------------------------------------------
__SymbolTable_insertFunction$2_vcall:
__SymbolTable_insertFunction$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  proto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newEntry EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2072 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  xor eax, eax
  mov [newEntry + Variant_t.type], eax
  mov [tmp2072 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newEntry ]
  lea  rdx , [ __const2070 ]
  lea  r8 , [ __const2071 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2072 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2072 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2072 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2072 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2072 ]
  lea rdx, [ proto ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2072 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  call  __SymbolTable_insertGlobal$2


  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2072 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore name
  restore proto
  restore newEntry
  restore tmp2072

; -----------------------------------------------
; function __SymbolTable_lookupFunction$3
; -----------------------------------------------
__SymbolTable_lookupFunction$3_vcall:
  cmp [r8 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r8, [r8 + Variant_t.value]

  cmp [r9 + Variant_t.type], VARIANT_BOOLEAN
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r9, [r9 + Variant_t.value]

__SymbolTable_lookupFunction$3:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  tmp2074 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp2076 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2079 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp2080 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp2085 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp2088 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2091 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2092 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2093 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2094 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2095 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paramsCnt EQU rbp - 220 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 1 , readHits= 3 )
  isRetValUsed EQU rbp - 224 ; 4 bytes, (kind= 3 , type= bool32 , writeHits= 0 , readHits= 2 )
  tmp2073 EQU rbp - 228 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2075 EQU rbp - 232 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp2081 EQU rbp - 236 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2084 EQU rbp - 240 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2096 EQU rbp - 244 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2098 EQU rbp - 248 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2099 EQU rbp - 252 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2103 EQU rbp - 256 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov dword [ paramsCnt ], r8d
  mov dword [ isRetValUsed ], r9d
  xor eax, eax
  mov [tmp2074 + Variant_t.type], eax
  mov [tmp2076 + Variant_t.type], eax
  mov [tmp2079 + Variant_t.type], eax
  mov [tmp2080 + Variant_t.type], eax
  mov [tmp2085 + Variant_t.type], eax
  mov [tmp2088 + Variant_t.type], eax
  mov [tmp2091 + Variant_t.type], eax
  mov [tmp2092 + Variant_t.type], eax
  mov [tmp2093 + Variant_t.type], eax
  mov [tmp2094 + Variant_t.type], eax
  mov [tmp2095 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2074 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2075 ], 7

  mov [ tmp2076 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2075 ]
  mov [ tmp2076 + Variant_t.value], rax

  lea rcx, [ tmp2074 ]
  lea rdx, [ tmp2076 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2077

  lea  rcx, [ tmp2080 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp2080 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2079 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2080 ]
  lea  rdx , [ __literal180 ]
  lea  r8 , [ tmp2079 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2079 ]
  call  __SymbolTable__error$1

  jmp l2078

l2077:

  lea  rcx , [ rv ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2074 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2074 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp2076 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2076 + Variant_t.type ], 0
  jnz l2082

  lea  rcx , [ rv ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2085 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2085 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2074 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2075 ], 34

  mov [ tmp2085 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2075 ]
  mov [ tmp2085 + Variant_t.value], rax

  lea rcx, [ tmp2074 ]
  lea rdx, [ tmp2085 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2086

  mov dword [ tmp2075 ], 1

  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp2075 ]
  mov dword [ paramsCnt ], eax

l2086:

l2087:

  lea  rcx , [ rv ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2088 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2088 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2074 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp2074 ]
  push rdi
  lea  rdi , [ tmp2085 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov [ tmp2074 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp2074 + Variant_t.value], rax

  lea rcx, [ tmp2085 ]
  lea rdx, [ tmp2074 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2089

  lea  rcx, [ tmp2094 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal183 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp2094 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2093 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2094 ]
  lea  rdx , [ __literal184 ]
  lea  r8 , [ tmp2093 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ rv ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2095 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2095 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2088 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp2088 ]
  push rdi
  lea  rdi , [ tmp2085 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2085 ]
  push rdi
  lea  rdi , [ tmp2074 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2092 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2093 ]
  lea  rdx , [ tmp2074 ]
  lea  r8 , [ tmp2092 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2091 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2092 ]
  lea  rdx , [ __literal185 ]
  lea  r8 , [ tmp2091 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp2085 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp2085 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2085 ]
  push rdi
  lea  rdi , [ tmp2074 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2080 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2091 ]
  lea  rdx , [ tmp2074 ]
  lea  r8 , [ tmp2080 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2079 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2080 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp2079 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2079 ]
  call  __SymbolTable__error$1

  jmp l2090

l2089:

  mov dword [ tmp2096 ], 0

  mov dword [ tmp2099 ], 1

  mov eax, dword [ isRetValUsed ]
  cmp eax, dword [ tmp2099 ]
  jnz l2097

  lea  rcx , [ rv ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2085 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2085 ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2074 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp2074  + Variant_t.type], 0
  setz al
  mov dword [ tmp2096 ], eax

l2097:

  cmp dword [ tmp2096 ], 0
  jz l2100

  lea  rcx, [ tmp2080 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal183 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp2080 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2079 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2080 ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp2079 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2079 ]
  call  __SymbolTable__error$1

  jmp l2101

l2100:

  mov dword [ tmp2098 ], 0

  mov dword [ tmp2103 ], 0

  mov eax, dword [ isRetValUsed ]
  cmp eax, dword [ tmp2103 ]
  jnz l2102

  lea  rcx , [ rv ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2088 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2088 ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2085 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp2085  + Variant_t.type], 0
  setnz al
  mov dword [ tmp2098 ], eax

l2102:

  cmp dword [ tmp2098 ], 0
  jz l2104

  lea  rcx, [ tmp2080 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal188 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp2080 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2079 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2080 ]
  lea  rdx , [ __literal189 ]
  lea  r8 , [ tmp2079 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2079 ]
  call  __SymbolTable__error$1

l2104:

l2105:

l2101:

l2090:

l2082:

l2083:

l2078:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2074 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2076 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2079 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2080 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2085 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2088 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2091 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2092 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2093 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2094 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2095 ]
  call __MOLD_VariantDestroy

  add  rsp, 288
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore paramsCnt
  restore isRetValUsed
  restore rv
  restore tmp2073
  restore tmp2074
  restore tmp2075
  restore tmp2076
  restore tmp2079
  restore tmp2080
  restore tmp2081
  restore tmp2084
  restore tmp2085
  restore tmp2088
  restore tmp2091
  restore tmp2092
  restore tmp2093
  restore tmp2094
  restore tmp2095
  restore tmp2096
  restore tmp2098
  restore tmp2099
  restore tmp2103

; -----------------------------------------------
; function __SymbolTable_getCurrentFunctionName$0
; -----------------------------------------------
__SymbolTable_getCurrentFunctionName$0_vcall:
__SymbolTable_getCurrentFunctionName$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __SymbolTable_insertClass$2
; -----------------------------------------------
__SymbolTable_insertClass$2_vcall:
__SymbolTable_insertClass$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  proto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newEntry EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2108 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  xor eax, eax
  mov [newEntry + Variant_t.type], eax
  mov [tmp2108 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newEntry ]
  lea  rdx , [ __const2106 ]
  lea  r8 , [ __const2107 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2108 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2108 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2108 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2108 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2108 ]
  lea rdx, [ proto ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2108 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  call  __SymbolTable_insertGlobal$2


  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2108 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore name
  restore proto
  restore newEntry
  restore tmp2108

; -----------------------------------------------
; function __SymbolTable_lookupClass$1
; -----------------------------------------------
__SymbolTable_lookupClass$1_vcall:
__SymbolTable_lookupClass$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2110 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2112 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2115 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2116 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2109 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2111 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2110 + Variant_t.type], eax
  mov [tmp2112 + Variant_t.type], eax
  mov [tmp2115 + Variant_t.type], eax
  mov [tmp2116 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  call  __SymbolTable_lookupGlobal$1

  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2110 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2111 ], 8

  mov [ tmp2112 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2111 ]
  mov [ tmp2112 + Variant_t.value], rax

  lea rcx, [ tmp2110 ]
  lea rdx, [ tmp2112 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2113

  lea  rcx, [ tmp2116 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp2116 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2115 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2116 ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp2115 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2115 ]
  call  __SymbolTable__error$1

l2113:

l2114:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2115 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2116 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp2109
  restore tmp2110
  restore tmp2111
  restore tmp2112
  restore tmp2115
  restore tmp2116

; -----------------------------------------------
; function __SymbolTable_insertLocal$1
; -----------------------------------------------
__SymbolTable_insertLocal$1_vcall:
__SymbolTable_insertLocal$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  newEntry EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2118 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2120 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2117 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2119 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [newEntry + Variant_t.type], eax
  mov [tmp2118 + Variant_t.type], eax
  mov [tmp2120 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2118 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2119 ], 1

  mov [ tmp2120 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2119 ]
  mov [ tmp2120 + Variant_t.value], rax

  lea rcx, [ tmp2120 ]
  lea rdx, [ tmp2118 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2121

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal191
  lea rdx , [ __literal191 ]
  call  __SymbolTable__error$1

l2121:

l2122:

  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newEntry ]
  lea  rdx , [ __const2123 ]
  lea  r8 , [ __const2124 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2120 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2120 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2120 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  call  __SymbolTable_insert$2


  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2118 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2120 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore name
  restore newEntry
  restore tmp2117
  restore tmp2118
  restore tmp2119
  restore tmp2120

; -----------------------------------------------
; function __SymbolTable_importGlobal$1
; -----------------------------------------------
__SymbolTable_importGlobal$1_vcall:
__SymbolTable_importGlobal$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 12 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 18 )
  tmp2126 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp2128 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp2140 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2141 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  mainScope EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 5 )
  writeHits EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  readHits EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  loopLevel EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp2125 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2127 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp2131 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2132 EQU rbp - 200 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2133 EQU rbp - 204 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp2126 + Variant_t.type], eax
  mov [tmp2128 + Variant_t.type], eax
  mov [tmp2140 + Variant_t.type], eax
  mov [tmp2141 + Variant_t.type], eax
  mov [mainScope + Variant_t.type], eax
  mov [writeHits + Variant_t.type], eax
  mov [readHits + Variant_t.type], eax
  mov [loopLevel + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2127 ], 1

  mov [ tmp2128 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2127 ]
  mov [ tmp2128 + Variant_t.value], rax

  lea rcx, [ tmp2128 ]
  lea rdx, [ tmp2126 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2129

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal192
  lea rdx , [ __literal192 ]
  call  __SymbolTable__error$1

  jmp l2130

l2129:

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ tmp2132 ]
  call  __SymbolTable_isset$1

  mov dword [ tmp2133 ], 1

  mov eax, dword [ tmp2132 ]
  cmp eax, dword [ tmp2133 ]
  jnz l2134

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2128 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2127 ], 2

  mov [ tmp2126 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2127 ]
  mov [ tmp2126 + Variant_t.value], rax

  lea rcx, [ tmp2128 ]
  lea rdx, [ tmp2126 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2136

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2127 ], 5

  mov [ tmp2128 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2127 ]
  mov [ tmp2128 + Variant_t.value], rax

  lea rcx, [ tmp2126 ]
  lea rdx, [ tmp2128 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2138

  lea  rcx, [ tmp2141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal193 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp2141 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2140 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2141 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp2140 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2140 ]
  call  __SymbolTable__error$1

l2138:

l2139:

l2136:

l2137:

  jmp l2135

l2134:

  lea  rcx, [ mainScope ]
  call __MOLD_VariantDestroy
  lea rcx, [ mainScope ]
  lea rdx, [ this ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: while
; 
l2142:

  lea  rcx , [ mainScope ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2128 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2127 ], 1

  mov [ tmp2126 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2127 ]
  mov [ tmp2126 + Variant_t.value], rax

  lea rcx, [ tmp2128 ]
  lea rdx, [ tmp2126 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2143

  lea  rcx , [ mainScope ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ mainScope ]
  call  __MOLD_VariantLoadFromKey

  jmp l2142

l2143:

; 
; END: while
; -----------------------------
; 
  lea rcx , [ mainScope ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6460
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6460:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ loopLevel ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2127 ], 2

  mov [ tmp2128 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2127 ]
  mov [ tmp2128 + Variant_t.value], rax

  lea rcx, [ tmp2126 ]
  lea rdx, [ tmp2128 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2144

  mov dword [ tmp2127 ], 2

  mov [ tmp2128 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2127 ]
  mov [ tmp2128 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2128 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2126 ]
  lea rdx , [ name ]
  lea r8 , [ symbolInfo ]
  lea  rax , [ tmp2128 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6461
  movsxd rax, dword [ tmp2128 + Variant_t.value ]
  mov    qword [ tmp2128 + Variant_t.value ], rax
l6461:


l2144:

l2145:

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ symbolInfo ]
  call  __SymbolTable_insert$2

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp2128 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ loopLevel ]
  lea rdx, [ tmp2128 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2146

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ loopLevel ]
  call  __MOLD_VariantStoreAtKey

l2146:

l2147:

l2135:

l2130:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2126 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2128 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2140 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2141 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mainScope ]
  call __MOLD_VariantDestroy
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLevel ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret


  restore this
  restore name
  restore symbolInfo
  restore tmp2125
  restore tmp2126
  restore tmp2127
  restore tmp2128
  restore tmp2131
  restore tmp2132
  restore tmp2133
  restore tmp2140
  restore tmp2141
  restore mainScope
  restore writeHits
  restore readHits
  restore loopLevel

; -----------------------------------------------
; function __SymbolTable_insertParam$2
; -----------------------------------------------
__SymbolTable_insertParam$2_vcall:
__SymbolTable_insertParam$2:

  ; init frame
  ; ----------
  newEntry EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  paramId EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2150 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramId ], xmm0
  xor eax, eax
  mov [tmp2150 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newEntry ]
  lea  rdx , [ __const2148 ]
  lea  r8 , [ __const2149 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2150 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2150 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2150 ]
  lea rdx, [ paramId ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2150 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  call  __SymbolTable_insert$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore paramId
  restore newEntry
  restore tmp2150

; -----------------------------------------------
; function __SymbolTable_insertRetVal$1
; -----------------------------------------------
__SymbolTable_insertRetVal$1:

  ; init frame
  ; ----------
  newEntry EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  unused EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  tmp2153 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [unused + Variant_t.type], eax
  mov [tmp2153 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newEntry ]
  lea  rdx , [ __const2151 ]
  lea  r8 , [ __const2152 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2153 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2153 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2153 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  call  __SymbolTable_insert$2

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ unused ]
  call  __SymbolTable_lookupForRead$1


  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2153 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore newEntry
  restore unused
  restore tmp2153

; -----------------------------------------------
; function __SymbolTable_insertConst$2
; -----------------------------------------------
__SymbolTable_insertConst$2_vcall:
__SymbolTable_insertConst$2:

  ; init frame
  ; ----------
  newEntry EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2156 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2157 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp2156 + Variant_t.type], eax
  mov [tmp2157 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newEntry ]
  lea  rdx , [ __const2154 ]
  lea  r8 , [ __const2155 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2156 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2156 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2156 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2156 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2156 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2156 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  call  __SymbolTable_insert$2

  lea  rcx , [ this ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2157 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2157 ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  lea  rax , [ tmp2156 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6462
  movsxd rax, dword [ tmp2156 + Variant_t.value ]
  mov    qword [ tmp2156 + Variant_t.value ], rax
l6462:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp2156 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2157 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore value
  restore newEntry
  restore tmp2156
  restore tmp2157

; -----------------------------------------------
; function __SymbolTable_insertLiteral$1
; -----------------------------------------------
__SymbolTable_insertLiteral$1_vcall:
__SymbolTable_insertLiteral$1:

  ; init frame
  ; ----------
  literalEntry EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 4 )
  text EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 3 )
  tmp2158 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp2159 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  name EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2160 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2163 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  xor eax, eax
  mov [tmp2158 + Variant_t.type], eax
  mov [tmp2159 + Variant_t.type], eax
  mov [name + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2159 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2159 ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2158 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2158 ]
  lea  rdx , [ text ]
  lea  r8 , [ literalEntry ]
  call  __MOLD_VariantLoadFromKey

  cmp [ literalEntry + Variant_t.type ], 0
  jnz l2161

  lea  rax , [ tmp2163 ]
  call  SymbolTable_GetNextId

  mov [ tmp2159 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2163 ]
  mov [ tmp2159 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2159 ]
  push rdi
  lea  rdi , [ tmp2158 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal194 ]
  lea  rdx , [ tmp2158 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ text ]
  lea  rax , [ literalEntry ]
  call  __SymbolTable_insertConst$2

  lea  rcx , [ this ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2159 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2159 ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2158 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2158 ]
  lea  rdx , [ text ]
  lea  r8 , [ literalEntry ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2163 ], 4

  mov [ tmp2158 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2163 ]
  mov [ tmp2158 + Variant_t.value], rax

  lea  rcx , [ literalEntry ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2158 ]
  call  __MOLD_VariantStoreAtKey

l2161:

l2162:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2158 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2159 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore text
  restore literalEntry
  restore tmp2158
  restore tmp2159
  restore tmp2160
  restore tmp2163
  restore name

; -----------------------------------------------
; function __SymbolTable_lookupLiteralForRead$1
; -----------------------------------------------
__SymbolTable_lookupLiteralForRead$1_vcall:
__SymbolTable_lookupLiteralForRead$1:

  ; init frame
  ; ----------
  literalEntry EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  text EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2164 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2165 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2167 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2166 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  xor eax, eax
  mov [tmp2164 + Variant_t.type], eax
  mov [tmp2165 + Variant_t.type], eax
  mov [tmp2167 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ text ]
  lea  rax , [ literalEntry ]
  call  __SymbolTable_insertLiteral$1

  lea  rcx , [ literalEntry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2165 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2166 ], 1

  mov [ tmp2167 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2166 ]
  mov [ tmp2167 + Variant_t.value], rax

  lea  rcx , [ tmp2165 ]
  lea  rdx , [ tmp2167 ]
  lea  r8 , [ tmp2164 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ literalEntry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2164 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2164 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2165 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2167 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore text
  restore literalEntry
  restore tmp2164
  restore tmp2165
  restore tmp2166
  restore tmp2167

; -----------------------------------------------
; function __SymbolTable_createConstFromValue$1
; -----------------------------------------------
__SymbolTable_createConstFromValue$1_vcall:
__SymbolTable_createConstFromValue$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  unused EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  tmp2168 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2170 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2169 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [unused + Variant_t.type], eax
  mov [tmp2168 + Variant_t.type], eax
  mov [tmp2170 + Variant_t.type], eax

  ; code
  ; ----

  lea  rax , [ tmp2169 ]
  call  SymbolTable_GetNextId

  mov [ tmp2170 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2169 ]
  mov [ tmp2170 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2170 ]
  push rdi
  lea  rdi , [ tmp2168 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal195 ]
  lea  rdx , [ tmp2168 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ value ]
  lea  rax , [ unused ]
  call  __SymbolTable_insertConst$2


  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2168 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2170 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore value
  restore rv
  restore unused
  restore tmp2168
  restore tmp2169
  restore tmp2170

; -----------------------------------------------
; function __SymbolTable_assignValue$2
; -----------------------------------------------
__SymbolTable_assignValue$2_vcall:
__SymbolTable_assignValue$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolInfo EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore value
  restore symbolInfo

; -----------------------------------------------
; function __SymbolTable_assignNode$2
; -----------------------------------------------
__SymbolTable_assignNode$2_vcall:
__SymbolTable_assignNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolInfo EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore node
  restore symbolInfo

; -----------------------------------------------
; function __SymbolTable_assignType$2
; -----------------------------------------------
__SymbolTable_assignType$2_vcall:
  cmp [r8 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r8, [r8 + Variant_t.value]

__SymbolTable_assignType$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 14 )
  oldType EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  tmp2174 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp2183 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp2193 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  newType EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 7 )
  tmp2171 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2173 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2179 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2181 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2182 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp2185 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2191 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2192 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  goOn EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov dword [ newType ], r8d
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [oldType + Variant_t.type], eax
  mov [tmp2174 + Variant_t.type], eax
  mov [tmp2183 + Variant_t.type], eax
  mov [tmp2193 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ oldType ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2171 ], 1

  cmp [ oldType  + Variant_t.type], 0
  jz l2172

  mov [ tmp2174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newType ]
  mov [ tmp2174 + Variant_t.value], rax

  lea  rcx , [ tmp2174 ]
  lea  rdx , [ oldType ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2171 ], eax

l2172:

  cmp dword [ tmp2171 ], 0
  jz l2175

  mov dword [ goOn ], 0

  cmp [ oldType + Variant_t.type ], 0
  jnz l2177

  mov dword [ goOn ], 1

  jmp l2178

l2177:

  mov dword [ tmp2179 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2174 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2182 ], 1

  mov [ tmp2183 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2182 ]
  mov [ tmp2183 + Variant_t.value], rax

  lea rcx, [ tmp2174 ]
  lea rdx, [ tmp2183 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2180

  mov dword [ tmp2181 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2183 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2182 ], 2

  mov [ tmp2174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2182 ]
  mov [ tmp2174 + Variant_t.value], rax

  lea rcx, [ tmp2183 ]
  lea rdx, [ tmp2174 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2184

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2174 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2182 ], 3

  mov [ tmp2183 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2182 ]
  mov [ tmp2183 + Variant_t.value], rax

  lea  rcx , [ tmp2174 ]
  lea  rdx , [ tmp2183 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2181 ], eax

l2184:

  mov eax, dword [ tmp2181 ]
  mov dword [ tmp2179 ], eax

l2180:

  cmp dword [ tmp2179 ], 0
  jz l2186

  mov dword [ tmp2182 ], -1

  mov [ tmp2183 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2182 ]
  mov [ tmp2183 + Variant_t.value], rax

  lea rcx, [ oldType ]
  lea rdx, [ tmp2183 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2188

  mov dword [ tmp2185 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2183 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2183  + Variant_t.type], 0
  jz l2190

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2174 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2192 ], 0

  mov eax, dword [ tmp2192 ]
  mov [ tmp2193 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2193 + Variant_t.value], rax

  lea  rcx , [ tmp2174 ]
  lea  rdx , [ tmp2193 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2185 ], eax

l2190:

  cmp dword [ tmp2185 ], 0
  jz l2194

  mov dword [ goOn ], 1

l2194:

l2195:

  jmp l2189

l2188:

  mov dword [ tmp2182 ], -1

  mov eax, dword [ newType ]
  cmp eax, dword [ tmp2182 ]
  jz l2196

  mov [ tmp2193 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newType ]
  mov [ tmp2193 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ oldType ]
  lea r8 , [ tmp2193 ]
  call  __SymbolTable__errorTypeMismatch$2

l2196:

l2197:

l2189:

l2186:

l2187:

l2178:

  mov dword [ tmp2179 ], 1

  mov eax, dword [ goOn ]
  cmp eax, dword [ tmp2179 ]
  jnz l2198

  mov [ tmp2193 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newType ]
  mov [ tmp2193 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2193 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp2174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newType ]
  mov [ tmp2174 + Variant_t.value], rax

  lea rcx , [ tmp2174 ]
  lea  rax , [ tmp2193 ]
  call  AST_ConvertDataTypeToMIR

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp2193 ]
  call  __MOLD_VariantStoreAtKey

l2198:

l2199:

l2175:

l2176:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2174 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2183 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2193 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore name
  restore newType
  restore symbolInfo
  restore oldType
  restore tmp2171
  restore tmp2173
  restore tmp2174
  restore tmp2179
  restore tmp2181
  restore tmp2182
  restore tmp2183
  restore tmp2185
  restore tmp2191
  restore tmp2192
  restore tmp2193
  restore goOn

; -----------------------------------------------
; function __SymbolTable_freezeType$1
; -----------------------------------------------
__SymbolTable_freezeType$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  tmp2201 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2200 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp2201 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  mov dword [ tmp2200 ], 1

  mov eax, dword [ tmp2200 ]
  mov [ tmp2201 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2201 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2201 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2201 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore symbolInfo
  restore tmp2200
  restore tmp2201

; -----------------------------------------------
; function __SymbolTable_assignTypeAndFreeze$2
; -----------------------------------------------
__SymbolTable_assignTypeAndFreeze$2_vcall:
__SymbolTable_assignTypeAndFreeze$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  newType EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2202 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ newType ], xmm0

  ; code
  ; ----

  cmp [ newType + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ newType + Variant_t.value]
  mov dword [ tmp2202 ], eax

  lea rcx , [ this ]
  lea rdx , [ name ]
  mov r8d , dword [ tmp2202 ]
  call  __SymbolTable_assignType$2

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __SymbolTable_freezeType$1


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore name
  restore newType
  restore tmp2202

; -----------------------------------------------
; function __SymbolTable_assignMirType$2
; -----------------------------------------------
__SymbolTable_assignMirType$2_vcall:
__SymbolTable_assignMirType$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  type EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolInfo EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ type ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ type ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore type
  restore symbolInfo

; -----------------------------------------------
; function __SymbolTable_removeUnusedSymbols$0
; -----------------------------------------------
__SymbolTable_removeUnusedSymbols$0_vcall:
__SymbolTable_removeUnusedSymbols$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  newSymbols EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2203 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2209 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp2211 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  symbolId EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 14 )
  tmp2206 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2208 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2210 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp2213 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2215 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [newSymbols + Variant_t.type], eax
  mov [tmp2203 + Variant_t.type], eax
  mov [tmp2209 + Variant_t.type], eax
  mov [tmp2211 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newSymbols ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2203 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys symbolId values symbolInfo
; 
  jmp l2205

l2204:

  mov dword [ tmp2206 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2209 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2210 ], 0

  mov [ tmp2211 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2210 ]
  mov [ tmp2211 + Variant_t.value], rax

  lea rcx, [ tmp2211 ]
  lea rdx, [ tmp2209 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2207

  mov dword [ tmp2208 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2211 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2210 ], 0

  mov [ tmp2209 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2210 ]
  mov [ tmp2209 + Variant_t.value], rax

  lea rcx, [ tmp2209 ]
  lea rdx, [ tmp2211 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2212

  mov dword [ tmp2213 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2209 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2210 ], 3

  mov [ tmp2211 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2210 ]
  mov [ tmp2211 + Variant_t.value], rax

  lea rcx, [ tmp2209 ]
  lea rdx, [ tmp2211 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2214

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2211 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2210 ], 4

  mov [ tmp2209 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2210 ]
  mov [ tmp2209 + Variant_t.value], rax

  lea  rcx , [ tmp2211 ]
  lea  rdx , [ tmp2209 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2213 ], eax

l2214:

  mov eax, dword [ tmp2213 ]
  mov dword [ tmp2208 ], eax

l2212:

  mov eax, dword [ tmp2208 ]
  mov dword [ tmp2206 ], eax

l2207:

  cmp dword [ tmp2206 ], 0
  jz l2216

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2209 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ newSymbols ]
  lea  rdx , [ tmp2209 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey

l2216:

l2217:

  ret

l2205:

  lea rcx , [ tmp2203 ]
  lea rdx , [ symbolId ]
  lea r8 , [ symbolInfo ]
  lea r9 , [ l2204 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys symbolId values symbolInfo
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ newSymbols ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2203 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2209 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2211 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolId
  ; Skipped loop iterator symbolInfo

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore newSymbols
  restore tmp2203
  restore tmp2206
  restore tmp2208
  restore tmp2209
  restore tmp2210
  restore tmp2211
  restore tmp2213
  restore tmp2215
  restore symbolId
  restore symbolInfo

; -----------------------------------------------
; function __SymbolTable_createLabel$0
; -----------------------------------------------
__SymbolTable_createLabel$0_vcall:
__SymbolTable_createLabel$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp2218 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2220 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2219 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp2218 + Variant_t.type], eax
  mov [tmp2220 + Variant_t.type], eax

  ; code
  ; ----

  lea  rax , [ tmp2219 ]
  call  SymbolTable_GetNextId

  mov [ tmp2220 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2219 ]
  mov [ tmp2220 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2220 ]
  push rdi
  lea  rdi , [ tmp2218 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal204 ]
  lea  rdx , [ tmp2218 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2218 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2218 ]
  lea  rdx , [ __const2221 ]
  lea  r8 , [ __const2222 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2220 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2218 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp2218 ]
  call  __SymbolTable_insert$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2218 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp2218
  restore tmp2219
  restore tmp2220

; -----------------------------------------------
; function __SymbolTable_insertJmpTable$1
; -----------------------------------------------
__SymbolTable_insertJmpTable$1_vcall:
__SymbolTable_insertJmpTable$1:

  ; init frame
  ; ----------
  newEntry EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  jmpTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  name EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  tmp2223 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2225 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2224 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ jmpTable ], xmm0
  xor eax, eax
  mov [name + Variant_t.type], eax
  mov [tmp2223 + Variant_t.type], eax
  mov [tmp2225 + Variant_t.type], eax

  ; code
  ; ----

  lea  rax , [ tmp2224 ]
  call  SymbolTable_GetNextId

  mov [ tmp2225 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2224 ]
  mov [ tmp2225 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2225 ]
  push rdi
  lea  rdi , [ tmp2223 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal205 ]
  lea  rdx , [ tmp2223 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newEntry ]
  lea  rdx , [ __const2226 ]
  lea  r8 , [ __const2227 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp2223 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2223 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2223 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2223 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2223 ]
  lea rdx, [ jmpTable ]
  call __MOLD_VariantMove

  lea  rcx , [ newEntry ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp2223 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ newEntry ]
  call  __SymbolTable_insertGlobal$2


  ; clean frame
  ; -----------
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2223 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2225 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore jmpTable
  restore name
  restore newEntry
  restore tmp2223
  restore tmp2224
  restore tmp2225

; -----------------------------------------------
; function __SymbolTable_getTempVar$1
; -----------------------------------------------
__SymbolTable_getTempVar$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 9 )
  wantedType EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 5 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 4 )
  tmp2229 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2230 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 10 , readHits= 10 )
  tmp2231 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  poolObj EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 5 )
  tmp2236 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2228 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2232 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp2235 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  poolCnt EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp2229 + Variant_t.type], eax
  mov [tmp2230 + Variant_t.type], eax
  mov [tmp2231 + Variant_t.type], eax
  mov [poolObj + Variant_t.type], eax
  mov [tmp2236 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp2231 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2231 ]
  lea  rdx , [ wantedType ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2230 ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp2229 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2232 ], 0

  mov [ tmp2230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2232 ]
  mov [ tmp2230 + Variant_t.value], rax

  lea rcx, [ tmp2229 ]
  lea rdx, [ tmp2230 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2233

  lea  rcx , [ this ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2230 ]
  lea  rdx , [ wantedType ]
  lea  r8 , [ poolObj ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp2229 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2232 ], 1

  mov [ tmp2231 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2232 ]
  mov [ tmp2231 + Variant_t.value], rax

  lea  rcx , [ tmp2229 ]
  lea  rdx , [ tmp2231 ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantSub

  cmp [ tmp2230 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2230 + Variant_t.value]
  mov dword [ poolCnt ], eax

  mov [ tmp2230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ poolCnt ]
  mov [ tmp2230 + Variant_t.value], rax

  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2230 ]
  lea  rdx , [ poolCnt ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  mov dword [ tmp2235 ], 0

  mov eax, dword [ tmp2235 ]
  mov [ tmp2230 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2230 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal209 ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2234

l2233:

  lea  rax , [ tmp2232 ]
  call  SymbolTable_GetNextId

  mov [ tmp2231 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2232 ]
  mov [ tmp2231 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2231 ]
  push rdi
  lea  rdi , [ tmp2230 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal210 ]
  lea  rdx , [ tmp2230 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __SymbolTable_insertLocal$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable_lookup$1

  mov dword [ tmp2235 ], 1

  mov eax, dword [ tmp2235 ]
  mov [ tmp2230 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2230 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal211 ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2235 ], 0

  mov eax, dword [ tmp2235 ]
  mov [ tmp2230 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2230 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal209 ]
  lea  r8 , [ tmp2230 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ wantedType ]
  call  __MOLD_VariantStoreAtKey

l2234:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2229 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2230 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2231 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rdi
  pop  rbp
  ret


  restore this
  restore wantedType
  restore rv
  restore symbolInfo
  restore tmp2228
  restore tmp2229
  restore tmp2230
  restore tmp2231
  restore tmp2232
  restore tmp2235
  restore poolObj
  restore poolCnt
  restore tmp2236

; -----------------------------------------------
; function __SymbolTable_getTempVarForWrite$1
; -----------------------------------------------
__SymbolTable_getTempVarForWrite$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  wantedType EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  unused EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  xor eax, eax
  mov [unused + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ wantedType ]
  lea  rax , [ rv ]
  call  __SymbolTable_getTempVar$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea  rax , [ unused ]
  call  __SymbolTable_lookupForWrite$1


  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore wantedType
  restore rv
  restore unused

; -----------------------------------------------
; function __SymbolTable_getTempVarForReadAndWrite$1
; -----------------------------------------------
__SymbolTable_getTempVarForReadAndWrite$1_vcall:
__SymbolTable_getTempVarForReadAndWrite$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  wantedType EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  unused EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  xor eax, eax
  mov [unused + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ wantedType ]
  lea  rax , [ rv ]
  call  __SymbolTable_getTempVar$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea  rax , [ unused ]
  call  __SymbolTable_lookupForReadAndWrite$1


  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore wantedType
  restore rv
  restore unused

; -----------------------------------------------
; function __SymbolTable_releaseTempVar$1
; -----------------------------------------------
__SymbolTable_releaseTempVar$1_vcall:
__SymbolTable_releaseTempVar$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 14 )
  tmp2242 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2245 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp2247 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp2253 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  mirType EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  poolObj EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 6 )
  tmp2237 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2239 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2241 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2244 EQU rbp - 168 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2246 EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2252 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp2242 + Variant_t.type], eax
  mov [tmp2245 + Variant_t.type], eax
  mov [tmp2247 + Variant_t.type], eax
  mov [tmp2253 + Variant_t.type], eax
  mov [mirType + Variant_t.type], eax
  mov [poolObj + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  call  __SymbolTable__lookupInternal$1

  mov dword [ tmp2237 ], 0

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l2238

  mov dword [ tmp2239 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal211 ]
  lea  r8 , [ tmp2242 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2242  + Variant_t.type], 0
  jz l2240

  mov dword [ tmp2241 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal211 ]
  lea  r8 , [ tmp2245 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2246 ], 1

  mov eax, dword [ tmp2246 ]
  mov [ tmp2247 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2247 + Variant_t.value], rax

  lea rcx, [ tmp2245 ]
  lea rdx, [ tmp2247 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2243

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal209 ]
  lea  r8 , [ tmp2247 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2246 ], 0

  mov eax, dword [ tmp2246 ]
  mov [ tmp2245 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2245 + Variant_t.value], rax

  lea  rcx , [ tmp2247 ]
  lea  rdx , [ tmp2245 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2241 ], eax

l2243:

  mov eax, dword [ tmp2241 ]
  mov dword [ tmp2239 ], eax

l2240:

  mov eax, dword [ tmp2239 ]
  mov dword [ tmp2237 ], eax

l2238:

  cmp dword [ tmp2237 ], 0
  jz l2248

  mov dword [ tmp2239 ], 1

  mov eax, dword [ tmp2239 ]
  mov [ tmp2245 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2245 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal209 ]
  lea  r8 , [ tmp2245 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ mirType ]
  call  __MOLD_VariantLoadFromKey

  cmp [ mirType  + Variant_t.type], 0
  jz l2250

  lea  rcx , [ this ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp2245 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2245 ]
  lea  rdx , [ mirType ]
  lea  r8 , [ poolObj ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2245 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp2247 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2247 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2247 + Variant_t.value]
  mov dword [ tmp2252 ], eax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2247 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2245 ]
  lea  rdx , [ tmp2252 ]
  lea  r8 , [ tmp2247 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp2245 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2252 ], 1

  mov [ tmp2253 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2252 ]
  mov [ tmp2253 + Variant_t.value], rax

  lea  rcx , [ tmp2245 ]
  lea  rdx , [ tmp2253 ]
  lea  r8 , [ tmp2247 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp2247 ]
  call  __MOLD_VariantStoreAtKey

l2250:

l2251:

l2248:

l2249:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2242 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2245 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2247 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2253 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore this
  restore name
  restore symbolInfo
  restore tmp2237
  restore tmp2239
  restore tmp2241
  restore tmp2242
  restore tmp2244
  restore tmp2245
  restore tmp2246
  restore tmp2247
  restore tmp2252
  restore tmp2253
  restore mirType
  restore poolObj

; -----------------------------------------------
; function __ASTModuleResolver_constructor$1
; -----------------------------------------------
__ASTModuleResolver_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 4 , readHits= 3 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2254 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2255 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp2254 + Variant_t.type], eax
  mov [tmp2255 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2254 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2254 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal216 ]
  lea  r8 , [ tmp2254 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2254 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2254 ]
  lea  rdx, [vtable_Parser]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp2254 ]
  lea  rax , [ tmp2255 ]
  call  __Parser_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal217 ]
  lea  r8 , [ tmp2254 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2254 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2255 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore app
  restore tmp2254
  restore tmp2255

; -----------------------------------------------
; function __ASTModuleResolver_resolveImports$1
; -----------------------------------------------
__ASTModuleResolver_resolveImports$1_vcall:
__ASTModuleResolver_resolveImports$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 8 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  program EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  newChildren EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp2256 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp2263 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp2266 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp2270 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2271 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2272 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oneChild EQU rbp - 200 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 8 )
  moduleName EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 4 )
  importedAst EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  importedProgram EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  importedChildren EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  oneImportedChild EQU rbp - 280 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp2257 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp2260 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2262 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2269 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 336

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [program + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [newChildren + Variant_t.type], eax
  mov [tmp2256 + Variant_t.type], eax
  mov [tmp2263 + Variant_t.type], eax
  mov [tmp2266 + Variant_t.type], eax
  mov [tmp2270 + Variant_t.type], eax
  mov [tmp2271 + Variant_t.type], eax
  mov [tmp2272 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [moduleName + Variant_t.type], eax
  mov [importedAst + Variant_t.type], eax
  mov [importedProgram + Variant_t.type], eax
  mov [importedChildren + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2256 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2257 ], 0

  lea  rcx , [ tmp2256 ]
  lea  rdx , [ tmp2257 ]
  lea  r8 , [ program ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ program ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l2259

l2258:

  mov dword [ tmp2260 ], 0

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2256 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2257 ], 42

  mov [ tmp2263 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2257 ]
  mov [ tmp2263 + Variant_t.value], rax

  lea rcx, [ tmp2256 ]
  lea rdx, [ tmp2263 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2261

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2263 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2263 ]
  lea  rdx , [ __literal18 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2260 ], eax

l2261:

  cmp dword [ tmp2260 ], 0
  jz l2264

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2266 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2257 ], 0

  lea  rcx , [ tmp2266 ]
  lea  rdx , [ tmp2257 ]
  lea  r8 , [ tmp2256 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2256 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ moduleName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal216 ]
  lea  r8 , [ tmp2256 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2256 ]
  lea  rdx , [ moduleName ]
  lea  r8 , [ tmp2263 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2263 + Variant_t.type ], 0
  jnz l2267

  lea  rcx , [ this ]
  lea  rdx , [ __literal216 ]
  lea  r8 , [ tmp2256 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2269 ], 1

  mov eax, dword [ tmp2269 ]
  mov [ tmp2266 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2266 + Variant_t.value], rax

  lea  rcx , [ tmp2256 ]
  lea  rdx , [ moduleName ]
  lea  r8 , [ tmp2266 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2256 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ moduleName ]
  push rdi
  lea  rdi , [ tmp2272 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2271 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal218 ]
  lea  rdx , [ tmp2272 ]
  lea  r8 , [ tmp2271 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2270 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2271 ]
  lea  rdx , [ __literal219 ]
  lea  r8 , [ tmp2270 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2256 ]
  lea rdx , [ tmp2270 ]
  lea  rax , [ tmp2266 ]
  mov  r10d, 5
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6463
  movsxd rax, dword [ tmp2266 + Variant_t.value ]
  mov    qword [ tmp2266 + Variant_t.value ], rax
l6463:


  lea  rcx , [ this ]
  lea  rdx , [ __literal217 ]
  lea  r8 , [ tmp2266 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2266 ]
  lea rdx , [ moduleName ]
  lea  rax , [ importedAst ]
  mov  r10d, 6
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6464
  movsxd rax, dword [ importedAst + Variant_t.value ]
  mov    qword [ importedAst + Variant_t.value ], rax
l6464:


  lea rcx , [ this ]
  lea rdx , [ importedAst ]
  call  __ASTModuleResolver_resolveImports$1

  lea  rcx , [ importedAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2266 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2257 ], 0

  lea  rcx , [ tmp2266 ]
  lea  rdx , [ tmp2257 ]
  lea  r8 , [ importedProgram ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ importedProgram ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ importedChildren ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneImportedChild
; 
  jmp l2274

l2273:

  ; __mold_syscall( 50 )
  lea rcx , [ newChildren ]
  lea rdx , [ oneImportedChild ]
  call qword [rbx + 8 * 50 ]

  ret

l2274:

  lea  rcx , [ importedChildren ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneImportedChild ]
  lea  r9 , [ l2273 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneImportedChild
; -----------------------------
; 
l2267:

l2268:

  jmp l2265

l2264:

  ; __mold_syscall( 50 )
  lea rcx , [ newChildren ]
  lea rdx , [ oneChild ]
  call qword [rbx + 8 * 50 ]

l2265:

  ret

l2259:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2258 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea  rcx , [ program ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ program ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2256 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2263 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2266 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2270 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2271 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2272 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ moduleName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedProgram ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedChildren ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneImportedChild

  add  rsp, 336
  pop  rbp
  ret


  restore this
  restore ast
  restore program
  restore children
  restore newChildren
  restore tmp2256
  restore tmp2257
  restore tmp2260
  restore tmp2262
  restore tmp2263
  restore tmp2266
  restore tmp2269
  restore tmp2270
  restore tmp2271
  restore tmp2272
  restore oneChild
  restore moduleName
  restore importedAst
  restore importedProgram
  restore importedChildren
  restore oneImportedChild

; -----------------------------------------------
; function __ASTSymbolsCollector_constructor$1
; -----------------------------------------------
__ASTSymbolsCollector_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2275 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp2275 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2275 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ tmp2275 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2275 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore app
  restore tmp2275

; -----------------------------------------------
; function __ASTSymbolsCollector__debug$1
; -----------------------------------------------
__ASTSymbolsCollector__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2276 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2277 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp2277 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp2277 ]
  jnz l2278

  lea rcx, [__fmt3 ]
  call __MOLD_PrintFormatFromMemory

l2278:

l2279:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp2276
  restore tmp2277

; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbolsFromLeftNode$2
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbolsFromLeftNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  symbolTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2280 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  mov dword [ tmp2280 ], 1

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ node ]
  mov r9d , dword [ tmp2280 ]
  call  __ASTSymbolsCollector__collectSymbols$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore symbolTable
  restore node
  restore tmp2280

; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbolsFromRightNode$2
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbolsFromRightNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  symbolTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2281 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  mov dword [ tmp2281 ], 0

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ node ]
  mov r9d , dword [ tmp2281 ]
  call  __ASTSymbolsCollector__collectSymbols$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore symbolTable
  restore node
  restore tmp2281

; -----------------------------------------------
; function __ASTSymbolsCollector__updateVariableSymbolInfo$3
; -----------------------------------------------
__ASTSymbolsCollector__updateVariableSymbolInfo$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 8 )
  variableName EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  newSymbolInfo EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2283 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2285 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  item EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp2282 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2284 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2288 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ variableName ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ newSymbolInfo ], xmm0
  xor eax, eax
  mov [tmp2283 + Variant_t.type], eax
  mov [tmp2285 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2283 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2284 ], 52

  mov [ tmp2285 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2284 ]
  mov [ tmp2285 + Variant_t.value], rax

  lea rcx, [ tmp2283 ]
  lea rdx, [ tmp2285 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2286

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2285 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp2285 ]
  lea rdx, [ variableName ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2289

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ newSymbolInfo ]
  call  __MOLD_VariantStoreAtKey

l2289:

l2290:

  jmp l2287

l2286:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2285 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2292

l2291:

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea r8 , [ variableName ]
  lea r9 , [ newSymbolInfo ]
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$3

  ret

l2292:

  lea  rcx , [ tmp2285 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2291 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
l2287:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2283 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2285 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore node
  restore variableName
  restore newSymbolInfo
  restore tmp2282
  restore tmp2283
  restore tmp2284
  restore tmp2285
  restore tmp2288
  restore item

; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbols$3
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbols$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 47 )
  symbolTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 70 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 13 , readHits= 74 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 74 )
  tmp2293 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 17 , readHits= 17 )
  tmp2294 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 10 , readHits= 10 )
  item EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 2 , readHits= 2 )
  symbolInfo EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2322 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 7 , readHits= 7 )
  tmp2323 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 6 , readHits= 6 )
  tmp2324 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp2325 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp2326 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  className EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  baseName EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  vtable EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  baseMethods EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 6 )
  classProto EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  __cse5 EQU rbp - 312 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  baseProto EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  oneMethodName EQU rbp - 344 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  methodProto EQU rbp - 360 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  child EQU rbp - 376 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 5 , readHits= 13 )
  methodName EQU rbp - 392 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 4 )
  methodParamsCnt EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  __cse6 EQU rbp - 424 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  baseMethodProto EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2335 EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2338 EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 12 , readHits= 12 )
  tmp2341 EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 15 , readHits= 15 )
  tmp2347 EQU rbp - 504 ; 16 bytes, (kind= 1 , type= variant , writeHits= 16 , readHits= 16 )
  tmp2348 EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 44 , readHits= 44 )
  nodeBody EQU rbp - 536 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 20 )
  funcProto EQU rbp - 552 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 25 )
  value EQU rbp - 568 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 8 )
  funcName EQU rbp - 584 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 4 )
  astTypeParams EQU rbp - 600 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  __cse7 EQU rbp - 616 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  paramName EQU rbp - 632 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  __cse8 EQU rbp - 648 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp2372 EQU rbp - 664 ; 16 bytes, (kind= 1 , type= variant , writeHits= 16 , readHits= 16 )
  tmp2378 EQU rbp - 680 ; 16 bytes, (kind= 1 , type= variant , writeHits= 21 , readHits= 21 )
  nodeBox EQU rbp - 696 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  nodeIdx EQU rbp - 712 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  nodeKey EQU rbp - 728 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  tmp2397 EQU rbp - 744 ; 16 bytes, (kind= 1 , type= variant , writeHits= 14 , readHits= 14 )
  lval EQU rbp - 760 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 15 )
  rval EQU rbp - 776 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 20 )
  oldClassProto EQU rbp - 792 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  newClassProto EQU rbp - 808 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp2433 EQU rbp - 824 ; 16 bytes, (kind= 1 , type= variant , writeHits= 14 , readHits= 14 )
  tmp2434 EQU rbp - 840 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  symbolTable1 EQU rbp - 856 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  symbolTable2 EQU rbp - 872 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  symbols1 EQU rbp - 888 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  symbols2 EQU rbp - 904 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse9 EQU rbp - 920 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  symbolInfo1 EQU rbp - 936 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 4 , readHits= 29 )
  symbolInfo2 EQU rbp - 952 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  readHits EQU rbp - 968 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  writeHits EQU rbp - 984 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  __cse10 EQU rbp - 1000 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  typeName1 EQU rbp - 1016 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  typeName2 EQU rbp - 1032 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  id EQU rbp - 1048 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  classProto1 EQU rbp - 1064 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  classProto2 EQU rbp - 1080 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2440 EQU rbp - 1096 ; 16 bytes, (kind= 1 , type= variant , writeHits= 23 , readHits= 23 )
  tmp2443 EQU rbp - 1112 ; 16 bytes, (kind= 1 , type= variant , writeHits= 31 , readHits= 31 )
  tmp2444 EQU rbp - 1128 ; 16 bytes, (kind= 1 , type= variant , writeHits= 19 , readHits= 19 )
  iterNode EQU rbp - 1144 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 12 )
  idxStartNode EQU rbp - 1160 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  idxEndNode EQU rbp - 1176 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  idxStepNode EQU rbp - 1192 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  bodyNode EQU rbp - 1208 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 8 )
  __cse12 EQU rbp - 1224 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  __cse11 EQU rbp - 1240 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  boxNode EQU rbp - 1256 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 4 )
  __cse13 EQU rbp - 1272 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  condNode EQU rbp - 1288 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2487 EQU rbp - 1304 ; 16 bytes, (kind= 1 , type= variant , writeHits= 20 , readHits= 20 )
  x EQU rbp - 1320 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 18 )
  y EQU rbp - 1336 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 14 )
  currentFunctionName EQU rbp - 1352 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  baseClassProto EQU rbp - 1368 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse14 EQU rbp - 1384 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  isLeftNode EQU rbp - 1388 ; 4 bytes, (kind= 3 , type= bool32 , writeHits= 2 , readHits= 8 )
  opcode EQU rbp - 1392 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 40 )
  childrenCnt EQU rbp - 1396 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  tmp2295 EQU rbp - 1400 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 97 , readHits= 97 )
  tmp2298 EQU rbp - 1404 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2300 EQU rbp - 1408 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp2310 EQU rbp - 1412 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 20 , readHits= 20 )
  tmp2329 EQU rbp - 1416 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 23 , readHits= 23 )
  tmp2342 EQU rbp - 1420 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 27 , readHits= 27 )
  paramShift EQU rbp - 1424 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  paramIdx EQU rbp - 1428 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp2394 EQU rbp - 1432 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 17 , readHits= 17 )
  tmp2403 EQU rbp - 1436 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 21 , readHits= 21 )
  tmp2425 EQU rbp - 1440 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 16 , readHits= 16 )
  tmp2430 EQU rbp - 1444 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  astType1 EQU rbp - 1448 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 5 )
  astType2 EQU rbp - 1452 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 5 )
  tmp2451 EQU rbp - 1456 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 9 , readHits= 9 )
  tmp2456 EQU rbp - 1460 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  iteratorsCnt EQU rbp - 1464 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  idx EQU rbp - 1468 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp2506 EQU rbp - 1472 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2508 EQU rbp - 1476 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2510 EQU rbp - 1480 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2512 EQU rbp - 1484 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  goOnIntoChildren EQU rbp - 1488 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  isRetValUsed EQU rbp - 1492 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  xType EQU rbp - 1496 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  yType EQU rbp - 1500 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 1536

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov dword [ isLeftNode ], r9d
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [tmp2293 + Variant_t.type], eax
  mov [tmp2294 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp2322 + Variant_t.type], eax
  mov [tmp2323 + Variant_t.type], eax
  mov [tmp2324 + Variant_t.type], eax
  mov [tmp2325 + Variant_t.type], eax
  mov [tmp2326 + Variant_t.type], eax
  mov [className + Variant_t.type], eax
  mov [baseName + Variant_t.type], eax
  mov [vtable + Variant_t.type], eax
  mov [baseMethods + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [__cse5 + Variant_t.type], eax
  mov [baseProto + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [methodName + Variant_t.type], eax
  mov [methodParamsCnt + Variant_t.type], eax
  mov [__cse6 + Variant_t.type], eax
  mov [baseMethodProto + Variant_t.type], eax
  mov [tmp2335 + Variant_t.type], eax
  mov [tmp2338 + Variant_t.type], eax
  mov [tmp2341 + Variant_t.type], eax
  mov [tmp2347 + Variant_t.type], eax
  mov [tmp2348 + Variant_t.type], eax
  mov [nodeBody + Variant_t.type], eax
  mov [funcProto + Variant_t.type], eax
  mov [value + Variant_t.type], eax
  mov [funcName + Variant_t.type], eax
  mov [astTypeParams + Variant_t.type], eax
  mov [__cse7 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [__cse8 + Variant_t.type], eax
  mov [tmp2372 + Variant_t.type], eax
  mov [tmp2378 + Variant_t.type], eax
  mov [nodeBox + Variant_t.type], eax
  mov [nodeIdx + Variant_t.type], eax
  mov [nodeKey + Variant_t.type], eax
  mov [tmp2397 + Variant_t.type], eax
  mov [lval + Variant_t.type], eax
  mov [rval + Variant_t.type], eax
  mov [oldClassProto + Variant_t.type], eax
  mov [newClassProto + Variant_t.type], eax
  mov [tmp2433 + Variant_t.type], eax
  mov [tmp2434 + Variant_t.type], eax
  mov [symbolTable1 + Variant_t.type], eax
  mov [symbolTable2 + Variant_t.type], eax
  mov [symbols1 + Variant_t.type], eax
  mov [symbols2 + Variant_t.type], eax
  mov [__cse9 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [symbolInfo2 + Variant_t.type], eax
  mov [readHits + Variant_t.type], eax
  mov [writeHits + Variant_t.type], eax
  mov [__cse10 + Variant_t.type], eax
  mov [typeName1 + Variant_t.type], eax
  mov [typeName2 + Variant_t.type], eax
  mov [id + Variant_t.type], eax
  mov [classProto1 + Variant_t.type], eax
  mov [classProto2 + Variant_t.type], eax
  mov [tmp2440 + Variant_t.type], eax
  mov [tmp2443 + Variant_t.type], eax
  mov [tmp2444 + Variant_t.type], eax
  mov [iterNode + Variant_t.type], eax
  mov [idxStartNode + Variant_t.type], eax
  mov [idxEndNode + Variant_t.type], eax
  mov [idxStepNode + Variant_t.type], eax
  mov [bodyNode + Variant_t.type], eax
  mov [__cse12 + Variant_t.type], eax
  mov [__cse11 + Variant_t.type], eax
  mov [boxNode + Variant_t.type], eax
  mov [__cse13 + Variant_t.type], eax
  mov [condNode + Variant_t.type], eax
  mov [tmp2487 + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [currentFunctionName + Variant_t.type], eax
  mov [baseClassProto + Variant_t.type], eax
  mov [__cse14 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2294 ]
  lea rdx , [ node ]
  lea  rax , [ tmp2293 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6465
  movsxd rax, dword [ tmp2293 + Variant_t.value ]
  mov    qword [ tmp2293 + Variant_t.value ], rax
l6465:


  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2293 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2293 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp2293 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp2293 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2293 + Variant_t.value]
  mov dword [ childrenCnt ], eax

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2297

l2296:

  lea  rcx , [ item ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey

  ret

l2297:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2296 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  mov dword [ tmp2298 ], 1

  mov dword [ tmp2295 ], 52

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2299

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2293 ]
  lea  rdx , [ __literal27 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2298 ], eax

l2299:

  cmp dword [ tmp2298 ], 0
  jz l2301

; 
; -----------------------------
; BEGIN: switch opcode
; 
  mov eax, dword [ opcode ]
  sub eax, 4
  cmp eax, 29
  ja l2304
  movsx rax, word [ __jmptable2305 + rax * 2]
  lea rax, [ l2304 + rax]
  jmp rax

l2306:

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2294 ]
  lea  rax , [ tmp2293 ]
  mov  r10d, 1
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6466
  movsxd rax, dword [ tmp2293 + Variant_t.value ]
  mov    qword [ tmp2293 + Variant_t.value ], rax
l6466:


  lea rcx, [ symbolTable ]
  lea rdx, [ tmp2293 ]
  call __MOLD_VariantMove

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2308

l2307:

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp2293 ]
  lea r8 , [ item ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  ret

l2308:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2307 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2303

l2309:

  mov dword [ tmp2310 ], 1

  mov eax, dword [ isLeftNode ]
  cmp eax, dword [ tmp2310 ]
  jnz l2311

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2294 ]
; WARNING: Failed to get variable size: __literal223
  lea rdx , [ __literal223 ]
  lea  rax , [ tmp2293 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6467
  movsxd rax, dword [ tmp2293 + Variant_t.value ]
  mov    qword [ tmp2293 + Variant_t.value ], rax
l6467:


l2311:

l2312:

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2293 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 8
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6468
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6468:


  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey

  jmp l2303

l2313:

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse5 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ __cse5 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ __cse5 ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ baseName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseMethods ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp2293 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2293 ]
  lea rdx, [ className ]
  call __MOLD_VariantMove

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2293 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2293 ]
  lea rdx, [ baseName ]
  call __MOLD_VariantMove

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2293 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2293 ]
  lea rdx, [ vtable ]
  call __MOLD_VariantMove

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey

  cmp [ baseName  + Variant_t.type], 0
  jz l2314

  lea rcx , [ symbolTable ]
  lea rdx , [ baseName ]
  lea  rax , [ tmp2293 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6469
  movsxd rax, dword [ tmp2293 + Variant_t.value ]
  mov    qword [ tmp2293 + Variant_t.value ], rax
l6469:


  lea  rcx , [ tmp2293 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ baseProto ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ baseProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ baseMethods ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys oneMethodName values methodProto
; 
  jmp l2317

l2316:

  lea  rcx , [ vtable ]
  lea  rdx , [ oneMethodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantStoreAtKey

  ret

l2317:

  lea rcx , [ baseMethods ]
  lea rdx , [ oneMethodName ]
  lea r8 , [ methodProto ]
  lea r9 , [ l2316 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys oneMethodName values methodProto
; -----------------------------
; 
l2314:

l2315:

; 
; -----------------------------
; BEGIN: for keys undefined values child
; 
  jmp l2319

l2318:

  lea  rcx , [ child ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2293 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2293 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp2295 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2320

  lea  rcx , [ child ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse6 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ __cse6 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ __cse6 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp2293 ]
  push rdi
  lea  rdi , [ methodParamsCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea  rcx, [ tmp2326 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal226 ]
  lea  rdx , [ className ]
  lea  r8 , [ tmp2326 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2325 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2326 ]
  lea  rdx , [ __literal227 ]
  lea  r8 , [ tmp2325 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2324 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2325 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp2324 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2324 ]
  lea  rdx , [ __literal228 ]
  lea  r8 , [ tmp2323 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ methodParamsCnt ]
  push rdi
  lea  rdi , [ tmp2293 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2323 ]
  lea  rdx , [ tmp2293 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ child ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ child ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ child ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ baseMethods ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp2293 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2293  + Variant_t.type], 0
  jz l2327

  lea  rcx , [ baseMethods ]
  lea  rdx , [ methodName ]
  lea  r8 , [ baseMethodProto ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ child ]
  lea  rdx , [ __literal231 ]
  lea  r8 , [ baseMethodProto ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2329 ], 1

  mov eax, dword [ tmp2329 ]
  mov [ tmp2294 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2294 + Variant_t.value], rax

  lea  rcx , [ baseMethodProto ]
  lea  rdx , [ __literal232 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantStoreAtKey

l2327:

l2328:

  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ child ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ child ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

l2320:

l2321:

  ret

l2319:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ child ]
  lea  r9 , [ l2318 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values child
; -----------------------------
; 
  lea  rcx, [ tmp2294 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ symbolTable ]
  lea rdx , [ className ]
  lea r8 , [ classProto ]
  lea  rax , [ tmp2294 ]
  mov  r10d, 10
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6470
  movsxd rax, dword [ tmp2294 + Variant_t.value ]
  mov    qword [ tmp2294 + Variant_t.value ], rax
l6470:


  jmp l2303

l2304:

  mov dword [ tmp2300 ], 1

  mov dword [ tmp2295 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2330

  mov dword [ tmp2295 ], 34

  mov dword [ tmp2300 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2295 ]
  setz byte [ tmp2300 ]

l2330:

  cmp dword [ tmp2300 ], 0
  jz l2331

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ nodeBody ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ value ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ value ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ value ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp2294 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2294  + Variant_t.type], 0
  jz l2333

  lea  rcx , [ node ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey

  jmp l2334

l2333:

  lea  rcx , [ value ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey

l2334:

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ astTypeParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ astTypeParams ]
  call  __MOLD_VariantArrayCreate

  lea rcx , [ symbolTable ]
  lea rdx , [ funcName ]
  lea r8 , [ funcProto ]
  lea  rax , [ tmp2335 ]
  mov  r10d, 11
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6471
  movsxd rax, dword [ tmp2335 + Variant_t.value ]
  mov    qword [ tmp2335 + Variant_t.value ], rax
l6471:


  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2335 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2335 + Variant_t.type ], 0
  jnz l2336

  lea rcx , [ symbolTable ]
  lea rdx , [ funcName ]
  lea  rax , [ tmp2338 ]
  mov  r10d, 12
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6472
  movsxd rax, dword [ tmp2338 + Variant_t.value ]
  mov    qword [ tmp2338 + Variant_t.value ], rax
l6472:


  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ paramShift ], 0

  mov dword [ tmp2295 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2339

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse7 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 0

  mov [ tmp2338 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2338 + Variant_t.value], rax

  lea rcx , [ __cse7 ]
; WARNING: Failed to get variable size: __literal233
  lea rdx , [ __literal233 ]
  lea r8 , [ tmp2338 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 13
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6473
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6473:


  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2295 ], 6

  mov [ tmp2341 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2341 + Variant_t.value], rax

  lea rcx , [ __cse7 ]
; WARNING: Failed to get variable size: __literal233
  lea rdx , [ __literal233 ]
  lea r8 , [ tmp2341 ]
  lea  rax , [ tmp2338 ]
  mov  r10d, 14
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6474
  movsxd rax, dword [ tmp2338 + Variant_t.value ]
  mov    qword [ tmp2338 + Variant_t.value ], rax
l6474:


  mov dword [ paramShift ], 1

  mov dword [ tmp2295 ], -1

  mov [ tmp2338 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2338 + Variant_t.value], rax

  ; __mold_syscall( 50 )
  lea rcx , [ astTypeParams ]
  lea rdx , [ tmp2338 ]
  call qword [rbx + 8 * 50 ]

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp2338 ]
  lea rdx, [ __literal234 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2343

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2341 ]
; WARNING: Failed to get variable size: __literal233
  lea rdx , [ __literal233 ]
  lea  rax , [ tmp2338 ]
  mov  r10d, 15
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6475
  movsxd rax, dword [ tmp2338 + Variant_t.value ]
  mov    qword [ tmp2338 + Variant_t.value ], rax
l6475:


l2343:

l2344:

l2339:

l2340:

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys paramIdx values paramName
; 
  jmp l2346

l2345:

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  mov eax, dword [ paramShift ]
  add eax, dword [ paramIdx ]
  mov dword [ tmp2295 ], eax

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx , [ tmp2347 ]
  lea rdx , [ paramName ]
  lea r8 , [ tmp2348 ]
  lea  rax , [ tmp2341 ]
  mov  r10d, 13
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6476
  movsxd rax, dword [ tmp2341 + Variant_t.value ]
  mov    qword [ tmp2341 + Variant_t.value ], rax
l6476:


  ret

l2346:

  lea  rcx , [ tmp2338 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramName ]
  lea  r9 , [ l2345 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys paramIdx values paramName
; -----------------------------
; 
l2336:

l2337:

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp2338 ]
  lea r8 , [ nodeBody ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys paramIdx values paramName
; 
  jmp l2350

l2349:

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2341 ]
  lea rdx , [ paramName ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6477
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6477:


  mov dword [ tmp2310 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 0

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx, [ tmp2341 ]
  lea rdx, [ tmp2348 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2351

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 0

  mov [ tmp2341 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2341 + Variant_t.value], rax

  lea  rcx , [ tmp2348 ]
  lea  rdx , [ tmp2341 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2310 ], eax

l2351:

  cmp dword [ tmp2310 ], 0
  jz l2352

  mov dword [ tmp2295 ], 0

  mov [ tmp2341 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2341 + Variant_t.value], rax

  ; __mold_syscall( 50 )
  lea rcx , [ astTypeParams ]
  lea rdx , [ tmp2341 ]
  call qword [rbx + 8 * 50 ]

  jmp l2353

l2352:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 50 )
  lea rcx , [ astTypeParams ]
  lea rdx , [ tmp2341 ]
  call qword [rbx + 8 * 50 ]

l2353:

  ret

l2350:

  lea  rcx , [ tmp2338 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramName ]
  lea  r9 , [ l2349 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys paramIdx values paramName
; -----------------------------
; 
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal235 ]
  lea  r8 , [ astTypeParams ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2338 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2338  + Variant_t.type], 0
  jz l2354

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2348 ]
  lea rdx , [ tmp2347 ]
  lea  rax , [ tmp2341 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6478
  movsxd rax, dword [ tmp2341 + Variant_t.value ]
  mov    qword [ tmp2341 + Variant_t.value ], rax
l6478:


  mov dword [ tmp2342 ], 1

  mov eax, dword [ tmp2342 ]
  mov [ tmp2347 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2347 + Variant_t.value], rax

  lea rcx, [ tmp2341 ]
  lea rdx, [ tmp2347 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2356

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2347 ]
  lea rdx , [ tmp2341 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6479
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6479:


  mov dword [ tmp2295 ], 4

  mov [ tmp2341 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2341 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 1

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea  rcx , [ tmp2347 ]
  lea  rdx , [ tmp2348 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2357

l2356:

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2325 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal236 ]
  lea  rdx , [ tmp2347 ]
  lea  r8 , [ tmp2325 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2324 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2325 ]
  lea  rdx , [ __literal237 ]
  lea  r8 , [ tmp2324 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2324 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2323 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2323 ]
  lea  rdx , [ __literal189 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2348 ]
  lea rdx , [ tmp2322 ]
  lea  rax , [ tmp2341 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6480
  movsxd rax, dword [ tmp2341 + Variant_t.value ]
  mov    qword [ tmp2341 + Variant_t.value ], rax
l6480:


l2357:

l2354:

l2355:

  jmp l2332

l2331:

; 
; -----------------------------
; BEGIN: switch opcode
; 
  mov eax, dword [ opcode ]
  sub eax, 31
  cmp eax, 25
  ja l2359
  movsx rax, word [ __jmptable2360 + rax * 2]
  lea rax, [ l2359 + rax]
  jmp rax

l2361:

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2341 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2341 + Variant_t.type ], 0
  jnz l2362

  lea rcx , [ symbolTable ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 17
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6481
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6481:


  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2347 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 1

  mov [ tmp2347 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2347 + Variant_t.value], rax

  lea rcx, [ tmp2348 ]
  lea rdx, [ tmp2347 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2364

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse8 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse8 ]
; WARNING: Failed to get variable size: __literal238
  lea rdx , [ __literal238 ]
  lea  rax , [ tmp2347 ]
  mov  r10d, 18
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6482
  movsxd rax, dword [ tmp2347 + Variant_t.value ]
  mov    qword [ tmp2347 + Variant_t.value ], rax
l6482:


  lea rcx , [ __cse8 ]
; WARNING: Failed to get variable size: __literal239
  lea rdx , [ __literal239 ]
  lea  rax , [ tmp2347 ]
  mov  r10d, 18
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6483
  movsxd rax, dword [ tmp2347 + Variant_t.value ]
  mov    qword [ tmp2347 + Variant_t.value ], rax
l6483:


l2364:

l2365:

l2362:

l2363:

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2367

l2366:

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp2347 ]
  lea r8 , [ item ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  ret

l2367:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2366 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2348 ]
  lea  rax , [ tmp2347 ]
  mov  r10d, 19
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6484
  movsxd rax, dword [ tmp2347 + Variant_t.value ]
  mov    qword [ tmp2347 + Variant_t.value ], rax
l6484:


  jmp l2358

l2368:

  mov dword [ tmp2329 ], 1

  mov eax, dword [ isLeftNode ]
  cmp eax, dword [ tmp2329 ]
  jnz l2369

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2347 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 15
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6485
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6485:


  jmp l2370

l2369:

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2347 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6486
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6486:


l2370:

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2310 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal240 ]
  lea  r8 , [ tmp2347 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2347  + Variant_t.type], 0
  jz l2371

  lea  rcx , [ node ]
  lea  rdx , [ __literal240 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2342 ], 1

  mov eax, dword [ tmp2342 ]
  mov [ tmp2372 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2372 + Variant_t.value], rax

  lea  rcx , [ tmp2348 ]
  lea  rdx , [ tmp2372 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2310 ], eax

l2371:

  cmp dword [ tmp2310 ], 0
  jz l2373

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2348 ]
  lea  rax , [ tmp2372 ]
  mov  r10d, 21
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6487
  movsxd rax, dword [ tmp2372 + Variant_t.value ]
  mov    qword [ tmp2372 + Variant_t.value ], rax
l6487:


l2373:

l2374:

  jmp l2358

l2375:

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ nodeBox ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ nodeIdx ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ nodeBox ]
  mov r9d , dword [ isLeftNode ]
  call  __ASTSymbolsCollector__collectSymbols$3

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ nodeIdx ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx, [ tmp2372 ]
  lea rdx, [ tmp2348 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2376

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2378 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2372 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6488
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6488:


  mov dword [ tmp2342 ], 1

  mov eax, dword [ isLeftNode ]
  cmp eax, dword [ tmp2342 ]
  jnz l2379

  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2372 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 22
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6489
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6489:


  jmp l2380

l2379:

  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2372 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 23
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6490
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6490:


l2380:

l2376:

l2377:

  lea  rcx , [ nodeIdx ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2372 + Variant_t.value], rax

  lea rcx, [ tmp2348 ]
  lea rdx, [ tmp2372 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2381

  lea  rcx , [ nodeIdx ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2348 ]
  lea  rax , [ tmp2372 ]
  mov  r10d, 24
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6491
  movsxd rax, dword [ tmp2372 + Variant_t.value ]
  mov    qword [ tmp2372 + Variant_t.value ], rax
l6491:


l2381:

l2382:

  jmp l2358

l2383:

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ nodeBox ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ nodeKey ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ nodeBox ]
  mov r9d , dword [ isLeftNode ]
  call  __ASTSymbolsCollector__collectSymbols$3

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ nodeKey ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx, [ tmp2372 ]
  lea rdx, [ tmp2348 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2384

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2378 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2372 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6492
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6492:


  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2372 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 25
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6493
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6493:


l2384:

l2385:

  lea  rcx , [ nodeKey ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2372 + Variant_t.value], rax

  lea rcx, [ tmp2348 ]
  lea rdx, [ tmp2372 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2386

  lea  rcx , [ nodeKey ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2348 ]
  lea  rax , [ tmp2372 ]
  mov  r10d, 26
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6494
  movsxd rax, dword [ tmp2372 + Variant_t.value ]
  mov    qword [ tmp2372 + Variant_t.value ], rax
l6494:


l2386:

l2387:

  jmp l2358

l2388:

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx, [ tmp2372 ]
  lea rdx, [ tmp2348 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2389

  mov dword [ tmp2329 ], 0

  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 9

  mov [ tmp2372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2372 + Variant_t.value], rax

  lea rcx, [ tmp2348 ]
  lea rdx, [ tmp2372 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2391

  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2372 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp2372  + Variant_t.type], 7
  setz al
  mov dword [ tmp2329 ], eax

l2391:

  cmp dword [ tmp2329 ], 0
  jz l2392

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2348 ]
  lea r8 , [ tmp2378 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 27
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6495
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6495:


  mov dword [ tmp2295 ], 78

  mov [ tmp2378 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2378 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2393

l2392:

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2378 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 28
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6496
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6496:


l2393:

  lea  rcx , [ lval ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ rval ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2348 ]
  lea r8 , [ lval ]
  lea  rax , [ tmp2378 ]
  mov  r10d, 29
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6497
  movsxd rax, dword [ tmp2378 + Variant_t.value ]
  mov    qword [ tmp2378 + Variant_t.value ], rax
l6497:


  lea rcx , [ rval ]
  lea  rax , [ tmp2342 ]
  call  AST_IsImm

  mov dword [ tmp2394 ], 1

  mov eax, dword [ tmp2342 ]
  cmp eax, dword [ tmp2394 ]
  jnz l2395

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2348 ]
  lea r8 , [ tmp2397 ]
  lea  rax , [ tmp2378 ]
  mov  r10d, 30
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6498
  movsxd rax, dword [ tmp2378 + Variant_t.value ]
  mov    qword [ tmp2378 + Variant_t.value ], rax
l6498:


l2395:

l2396:

  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 37

  mov [ tmp2397 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2397 + Variant_t.value], rax

  lea rcx, [ tmp2378 ]
  lea rdx, [ tmp2397 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2398

  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2378 ]
  lea  rax , [ tmp2397 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6499
  movsxd rax, dword [ tmp2397 + Variant_t.value ]
  mov    qword [ tmp2397 + Variant_t.value ], rax
l6499:


  mov dword [ tmp2342 ], 1

  mov eax, dword [ tmp2342 ]
  mov [ tmp2378 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2378 + Variant_t.value], rax

  lea rcx, [ tmp2397 ]
  lea rdx, [ tmp2378 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2400

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ oldClassProto ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2397 ]
  lea  rax , [ tmp2378 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6500
  movsxd rax, dword [ tmp2378 + Variant_t.value ]
  mov    qword [ tmp2378 + Variant_t.value ], rax
l6500:


  lea  rcx , [ tmp2378 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ newClassProto ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2342 ], 0

  cmp [ oldClassProto  + Variant_t.type], 0
  jz l2402

  lea  rcx , [ oldClassProto ]
  lea  rdx , [ newClassProto ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2342 ], eax

l2402:

  cmp dword [ tmp2342 ], 0
  jz l2404

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2397 ]
  push rdi
  lea  rdi , [ tmp2378 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal241 ]
  lea  rdx , [ tmp2378 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2322 ]
  call  __ASTSymbolsCollector__debug$1

  lea  rcx, [ tmp2378 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2405

l2404:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ newClassProto ]
  call  __MOLD_VariantStoreAtKey

l2405:

l2400:

l2401:

l2398:

l2399:

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ rval ]
  lea  rax , [ tmp2295 ]
  call  AST_GetDataType

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2397 ]
  lea r8 , [ tmp2348 ]
  lea  rax , [ tmp2378 ]
  mov  r10d, 14
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6501
  movsxd rax, dword [ tmp2378 + Variant_t.value ]
  mov    qword [ tmp2378 + Variant_t.value ], rax
l6501:


  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 8

  mov [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2348 + Variant_t.value], rax

  lea rcx, [ tmp2378 ]
  lea rdx, [ tmp2348 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2406

  mov dword [ tmp2394 ], 1

  mov eax, dword [ tmp2394 ]
  mov [ tmp2348 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2348 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantStoreAtKey

l2406:

l2407:

  jmp l2390

l2389:

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ lval ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ rval ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

l2390:

  jmp l2358

l2408:

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ tmp2348 ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ tmp2348 ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  mov dword [ tmp2295 ], 3

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp2295 ]
  jnz l2409

  mov dword [ tmp2295 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ __cse9 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ __cse9 ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2348 ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable1 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ __cse9 ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable2 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable1 ]
  lea  rax , [ symbols1 ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6502
  movsxd rax, dword [ symbols1 + Variant_t.value ]
  mov    qword [ symbols1 + Variant_t.value ], rax
l6502:


  lea rcx , [ symbolTable2 ]
  lea  rax , [ symbols2 ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6503
  movsxd rax, dword [ symbols2 + Variant_t.value ]
  mov    qword [ symbols2 + Variant_t.value ], rax
l6503:


; 
; -----------------------------
; BEGIN: for keys undefined values symbolInfo1
; 
  jmp l2412

l2411:

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbols2 ]
  lea  rdx , [ tmp2348 ]
  lea  r8 , [ symbolInfo2 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolInfo2  + Variant_t.type], 0
  jz l2413

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2348 ]
  lea  rdx , [ tmp2378 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantAdd

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2378 ]
  lea  rdx , [ tmp2348 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantAdd

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ __cse10 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable1 ]
  lea rdx , [ __cse10 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 32
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6504
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6504:


  lea rcx , [ symbolTable2 ]
  lea rdx , [ __cse10 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 32
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6505
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6505:


  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2378 ]
  lea  rax , [ tmp2348 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6506
  movsxd rax, dword [ tmp2348 + Variant_t.value ]
  mov    qword [ tmp2348 + Variant_t.value ], rax
l6506:


  mov dword [ tmp2342 ], 0

  mov eax, dword [ tmp2342 ]
  mov [ tmp2378 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2378 + Variant_t.value], rax

  lea rcx, [ tmp2348 ]
  lea rdx, [ tmp2378 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2415

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2348 ]
  lea r8 , [ symbolInfo1 ]
  lea  rax , [ tmp2378 ]
  mov  r10d, 2
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6507
  movsxd rax, dword [ tmp2378 + Variant_t.value ]
  mov    qword [ tmp2378 + Variant_t.value ], rax
l6507:


l2415:

l2416:

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ astType1 ], -1

  mov dword [ astType2 ], -1

  lea  rcx , [ symbolTable1 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2378 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2378  + Variant_t.type], 0
  jz l2417

  lea  rcx , [ symbolTable1 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2348 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2348 + Variant_t.value]
  mov dword [ astType1 ], eax

l2417:

l2418:

  lea  rcx , [ symbolTable2 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2348 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2348  + Variant_t.type], 0
  jz l2419

  lea  rcx , [ symbolTable2 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2397 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2397 + Variant_t.value]
  mov dword [ astType2 ], eax

l2419:

l2420:

  mov eax, dword [ astType1 ]
  cmp eax, dword [ astType2 ]
  jz l2421

  mov dword [ tmp2342 ], 1

  mov dword [ tmp2295 ], -1

  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp2295 ]
  jnz l2423

  mov dword [ tmp2403 ], 0

  mov dword [ tmp2295 ], 4

  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp2295 ]
  jz l2424

  mov dword [ tmp2295 ], 6

  mov dword [ tmp2403 ], 0
  mov ecx, dword [ astType2 ]
  cmp ecx, dword [ tmp2295 ]
  setl byte [ tmp2403 ]

l2424:

  mov eax, dword [ tmp2403 ]
  mov dword [ tmp2342 ], eax

l2423:

  cmp dword [ tmp2342 ], 0
  jz l2426

  mov dword [ tmp2403 ], 1

  mov dword [ tmp2295 ], -1

  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp2295 ]
  jnz l2428

  mov dword [ tmp2425 ], 0

  mov dword [ tmp2295 ], 4

  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp2295 ]
  jz l2429

  mov dword [ tmp2295 ], 6

  mov dword [ tmp2425 ], 0
  mov ecx, dword [ astType1 ]
  cmp ecx, dword [ tmp2295 ]
  setl byte [ tmp2425 ]

l2429:

  mov eax, dword [ tmp2425 ]
  mov dword [ tmp2403 ], eax

l2428:

  cmp dword [ tmp2403 ], 0
  jz l2431

  mov [ tmp2397 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType1 ]
  mov [ tmp2397 + Variant_t.value], rax

  lea rcx , [ tmp2397 ]
  lea  rax , [ typeName1 ]
  call  AST_ConvertDataTypeToText

  mov [ tmp2397 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType2 ]
  mov [ tmp2397 + Variant_t.value], rax

  lea rcx , [ tmp2397 ]
  lea  rax , [ typeName2 ]
  call  AST_ConvertDataTypeToText

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2434 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal242 ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp2434 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2326 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2434 ]
  lea  rdx , [ __literal243 ]
  lea  r8 , [ tmp2326 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2325 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2326 ]
  lea  rdx , [ typeName2 ]
  lea  r8 , [ tmp2325 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2324 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2325 ]
  lea  rdx , [ __literal244 ]
  lea  r8 , [ tmp2324 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2324 ]
  lea  rdx , [ typeName1 ]
  lea  r8 , [ tmp2323 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2323 ]
  lea  rdx , [ __literal245 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2433 ]
  lea rdx , [ tmp2322 ]
  lea  rax , [ tmp2397 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6508
  movsxd rax, dword [ tmp2397 + Variant_t.value ]
  mov    qword [ tmp2397 + Variant_t.value ], rax
l6508:


l2431:

l2432:

l2426:

l2427:

  jmp l2422

l2421:

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ classProto1 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ classProto2 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ classProto1 ]
  lea rdx, [ classProto2 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2435

  lea  rcx, [ tmp2397 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantStoreAtKey

l2435:

l2436:

l2422:

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp2397 ]
  lea r8 , [ tmp2433 ]
  lea r9 , [ symbolInfo1 ]
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$3

  mov dword [ tmp2295 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp2433 ]
  lea r8 , [ tmp2397 ]
  lea r9 , [ symbolInfo1 ]
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$3

l2413:

l2414:

  ret

l2412:

  lea  rcx , [ symbols1 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo1 ]
  lea  r9 , [ l2411 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values symbolInfo1
; -----------------------------
; 
l2409:

l2410:

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2397 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2397 + Variant_t.type ], 0
  jnz l2437

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey

l2437:

l2438:

  jmp l2358

l2439:

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ iterNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ idxStartNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ idxEndNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 3

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ idxStepNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 4

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2440 ]
  lea  rax , [ tmp2433 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6509
  movsxd rax, dword [ tmp2433 + Variant_t.value ]
  mov    qword [ tmp2433 + Variant_t.value ], rax
l6509:


  mov dword [ tmp2329 ], 1

  mov eax, dword [ tmp2329 ]
  mov [ tmp2440 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2440 + Variant_t.value], rax

  lea rcx, [ tmp2433 ]
  lea rdx, [ tmp2440 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2441

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ __cse11 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse11 ]
  lea rdx , [ iterNode ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6510
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6510:


  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp2433 ]
  lea  r8 , [ tmp2323 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2323 ]
  lea  rdx , [ __literal246 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ __cse11 ]
  lea rdx , [ tmp2322 ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6511
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6511:


l2441:

l2442:

  lea rcx , [ symbolTable ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 33
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6512
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6512:


  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse12 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2433 ]
  lea rdx , [ __cse12 ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 34
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6513
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6513:


  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2433 ]
  lea rdx , [ __cse12 ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 35
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6514
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6514:


  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 1

  mov [ tmp2444 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2444 + Variant_t.value], rax

  lea rcx , [ tmp2433 ]
  lea rdx , [ tmp2443 ]
  lea r8 , [ tmp2444 ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 14
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6515
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6515:


  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ idxStartNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ idxEndNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ idxStepNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ bodyNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  jmp l2358

l2359:

  mov dword [ tmp2310 ], 1

  mov dword [ tmp2295 ], 45

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2445

  mov dword [ tmp2329 ], 1

  mov dword [ tmp2295 ], 46

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2446

  mov dword [ tmp2394 ], 1

  mov dword [ tmp2295 ], 47

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2447

  mov dword [ tmp2342 ], 1

  mov dword [ tmp2295 ], 48

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2448

  mov dword [ tmp2295 ], 49

  mov dword [ tmp2342 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2295 ]
  setz byte [ tmp2342 ]

l2448:

  mov eax, dword [ tmp2342 ]
  mov dword [ tmp2394 ], eax

l2447:

  mov eax, dword [ tmp2394 ]
  mov dword [ tmp2329 ], eax

l2446:

  mov eax, dword [ tmp2329 ]
  mov dword [ tmp2310 ], eax

l2445:

  cmp dword [ tmp2310 ], 0
  jz l2449

  mov dword [ tmp2295 ], 2

  mov eax, dword [ childrenCnt ]
  sub eax, dword [ tmp2295 ]
  mov dword [ iteratorsCnt ], eax

  lea  rcx , [ children ]
  lea  rdx , [ iteratorsCnt ]
  lea  r8 , [ boxNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2451 ], 1

  mov eax, dword [ childrenCnt ]
  sub eax, dword [ tmp2451 ]
  mov dword [ tmp2295 ], eax

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ symbolTable ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 33
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6516
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6516:


  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2295 ], 1

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp2451 .. iteratorsCnt
; 
l2452:

  mov eax, dword [ idx ]
  cmp eax, dword [ iteratorsCnt ]
  jge l2453

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ iterNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2444 ]
  lea  rax , [ tmp2440 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6517
  movsxd rax, dword [ tmp2440 + Variant_t.value ]
  mov    qword [ tmp2440 + Variant_t.value ], rax
l6517:


  mov dword [ tmp2394 ], 1

  mov eax, dword [ tmp2394 ]
  mov [ tmp2444 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2444 + Variant_t.value], rax

  lea rcx, [ tmp2440 ]
  lea rdx, [ tmp2444 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2454

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp2443 ]
  lea  r8 , [ tmp2323 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2323 ]
  lea  rdx , [ __literal247 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2440 ]
  lea rdx , [ tmp2322 ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6518
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6518:


l2454:

l2455:

  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse13 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse13 ]
  lea rdx , [ tmp2440 ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 34
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6519
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6519:


  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse13 ]
  lea rdx , [ tmp2440 ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 35
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6520
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6520:


  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2329 ], 1

  mov eax, dword [ tmp2329 ]
  mov [ tmp2440 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2440 + Variant_t.value], rax

  lea  rcx , [ tmp2444 ]
  lea  rdx , [ __literal248 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2456 ], -1

  mov [ tmp2444 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2456 ]
  mov [ tmp2444 + Variant_t.value], rax

  lea  rcx , [ tmp2440 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantStoreAtKey

  mov eax, dword [ idx ]
  add eax, dword [ tmp2295 ]
  mov dword [ idx ], eax

  jmp l2452

l2453:

; 
; END: for idx in tmp2451 .. iteratorsCnt step tmp2295
; -----------------------------
; 
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ boxNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2440 ]
  lea rdx , [ tmp2443 ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6521
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6521:


  lea  rcx , [ boxNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2329 ], 1

  mov dword [ tmp2451 ], 48

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2451 ]
  jz l2457

  mov dword [ tmp2451 ], 49

  mov dword [ tmp2329 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2451 ]
  setz byte [ tmp2329 ]

l2457:

  cmp dword [ tmp2329 ], 0
  jz l2458

  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2451 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2451 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2433 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2443 ]
  lea rdx , [ tmp2440 ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 24
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6522
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6522:


  jmp l2459

l2458:

  mov dword [ tmp2394 ], 1

  mov dword [ tmp2451 ], 46

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2451 ]
  jz l2460

  mov dword [ tmp2451 ], 47

  mov dword [ tmp2394 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2451 ]
  setz byte [ tmp2394 ]

l2460:

  cmp dword [ tmp2394 ], 0
  jz l2461

  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2451 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2451 ]
  lea  r8 , [ tmp2433 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2433 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2440 ]
  lea rdx , [ tmp2443 ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 26
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6523
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6523:


l2461:

l2462:

l2459:

  mov dword [ tmp2451 ], 1

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp2295 .. iteratorsCnt
; 
l2463:

  mov eax, dword [ idx ]
  cmp eax, dword [ iteratorsCnt ]
  jge l2464

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2443 ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2329 ], 1

  mov eax, dword [ tmp2329 ]
  mov [ tmp2443 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2443 + Variant_t.value], rax

  lea  rcx , [ tmp2444 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantStoreAtKey

  mov eax, dword [ idx ]
  add eax, dword [ tmp2451 ]
  mov dword [ idx ], eax

  jmp l2463

l2464:

; 
; END: for idx in tmp2295 .. iteratorsCnt step tmp2451
; -----------------------------
; 
  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ boxNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ bodyNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  jmp l2450

l2449:

  mov dword [ tmp2295 ], 43

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2465

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ condNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ symbolTable ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 33
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6524
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6524:


  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ condNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$2

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ bodyNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2

  jmp l2466

l2465:

  mov dword [ goOnIntoChildren ], 1

  mov dword [ tmp2295 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2295 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2295 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2467

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey

l2467:

l2468:

  mov dword [ tmp2295 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2469

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2342 ], 1

  lea rcx, [ funcName ]
  lea rdx, [ __literal16 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2471

  mov dword [ tmp2403 ], 1

  lea rcx, [ funcName ]
  lea rdx, [ __literal249 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2472

  mov dword [ tmp2425 ], 1

  lea rcx, [ funcName ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2473

  lea  rcx , [ funcName ]
  lea  rdx , [ __literal17 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2425 ], eax

l2473:

  mov eax, dword [ tmp2425 ]
  mov dword [ tmp2403 ], eax

l2472:

  mov eax, dword [ tmp2403 ]
  mov dword [ tmp2342 ], eax

l2471:

  cmp dword [ tmp2342 ], 0
  jz l2474

  lea rcx , [ symbolTable ]
  lea rdx , [ funcName ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6525
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6525:


  mov dword [ tmp2425 ], 0

  mov eax, dword [ tmp2425 ]
  mov [ tmp2444 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2444 + Variant_t.value], rax

  lea rcx, [ tmp2443 ]
  lea rdx, [ tmp2444 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2476

  lea  rcx, [ tmp2443 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2443 ]
  lea  rdx , [ __const2478 ]
  lea  r8 , [ __const2479 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea rcx , [ symbolTable ]
  lea rdx , [ funcName ]
  lea r8 , [ tmp2443 ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 11
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6526
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6526:


l2476:

l2477:

  lea rcx, [ funcName ]
  lea rdx, [ __literal249 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2480

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2444 ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ baseName ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ baseName ]
  lea  rax , [ tmp2444 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6527
  movsxd rax, dword [ tmp2444 + Variant_t.value ]
  mov    qword [ tmp2444 + Variant_t.value ], rax
l6527:


  lea  rcx , [ tmp2444 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ baseClassProto ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ baseClassProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2443 ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal250 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2481

l2480:

  mov dword [ tmp2425 ], 0

  lea rcx, [ funcName ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2482

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp2444  + Variant_t.type], 5
  setz al
  mov dword [ tmp2425 ], eax

l2482:

  cmp dword [ tmp2425 ], 0
  jz l2483

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ __cse14 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ __cse14 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6528
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6528:


  mov dword [ tmp2295 ], 1

  mov [ tmp2440 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2440 + Variant_t.value], rax

  lea rcx , [ symbolTable ]
  lea rdx , [ __cse14 ]
  lea r8 , [ tmp2440 ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 36
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6529
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6529:


  lea  rcx , [ node ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey

l2483:

l2484:

l2481:

l2474:

l2475:

  mov dword [ tmp2403 ], 1

  mov eax, dword [ isLeftNode ]
  cmp eax, dword [ tmp2403 ]
  jnz l2485

  mov dword [ isRetValUsed ], 0

  jmp l2486

l2485:

  mov dword [ isRetValUsed ], 1

l2486:

  mov dword [ isLeftNode ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2440 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp2433 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childrenCnt ]
  mov [ tmp2433 + Variant_t.value], rax

  mov eax, dword [ isRetValUsed ]
  mov [ tmp2487 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2487 + Variant_t.value], rax

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2440 ]
  lea r8 , [ tmp2433 ]
  lea r9 , [ tmp2487 ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 37
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6530
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6530:


  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ symbolTable ]
  lea  rax , [ currentFunctionName ]
  mov  r10d, 38
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6531
  movsxd rax, dword [ currentFunctionName + Variant_t.value ]
  mov    qword [ currentFunctionName + Variant_t.value ], rax
l6531:


  mov dword [ tmp2342 ], 0

  cmp [ currentFunctionName  + Variant_t.type], 0
  jz l2488

  lea  rcx , [ currentFunctionName ]
  lea  rdx , [ funcName ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2342 ], eax

l2488:

  cmp dword [ tmp2342 ], 0
  jz l2489

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2487 ]
  push rdi
  lea  rdi , [ tmp2443 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2325 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal252 ]
  lea  rdx , [ tmp2443 ]
  lea  r8 , [ tmp2325 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2324 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2325 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp2324 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2324 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2323 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2323 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2322 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2322 ]
  call  __ASTSymbolsCollector__debug$1

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2487 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2403 ], 1

  mov eax, dword [ tmp2403 ]
  mov [ tmp2487 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2487 + Variant_t.value], rax

  lea  rcx , [ tmp2443 ]
  lea  rdx , [ __literal254 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantStoreAtKey

l2489:

l2490:

  lea rcx, [ funcName ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2491

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2494

l2493:

  lea  rcx , [ item ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2443 ]
  lea  rax , [ tmp2487 ]
  mov  r10d, 39
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6532
  movsxd rax, dword [ tmp2487 + Variant_t.value ]
  mov    qword [ tmp2487 + Variant_t.value ], rax
l6532:


  ret

l2494:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2493 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  mov dword [ goOnIntoChildren ], 0

l2491:

l2492:

  jmp l2470

l2469:

  mov dword [ tmp2295 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2495

  mov eax, dword [ isLeftNode ]
  mov [ tmp2487 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2487 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal255 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ isLeftNode ], 0

l2495:

l2496:

l2470:

  mov dword [ tmp2342 ], 1

  mov eax, dword [ goOnIntoChildren ]
  cmp eax, dword [ tmp2342 ]
  jnz l2497

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2500

l2499:

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ item ]
  mov r9d , dword [ isLeftNode ]
  call  __ASTSymbolsCollector__collectSymbols$3

  ret

l2500:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2499 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
l2497:

l2498:

  mov dword [ tmp2394 ], 1

  mov dword [ tmp2295 ], 58

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2501

  mov dword [ tmp2342 ], 1

  mov dword [ tmp2295 ], 59

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2502

  mov dword [ tmp2403 ], 1

  mov dword [ tmp2295 ], 60

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2503

  mov dword [ tmp2425 ], 1

  mov dword [ tmp2295 ], 61

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2504

  mov dword [ tmp2430 ], 1

  mov dword [ tmp2295 ], 64

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2505

  mov dword [ tmp2506 ], 1

  mov dword [ tmp2295 ], 70

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2507

  mov dword [ tmp2508 ], 1

  mov dword [ tmp2295 ], 71

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2509

  mov dword [ tmp2510 ], 1

  mov dword [ tmp2295 ], 68

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2511

  mov dword [ tmp2295 ], 69

  mov dword [ tmp2510 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2295 ]
  setz byte [ tmp2510 ]

l2511:

  mov eax, dword [ tmp2510 ]
  mov dword [ tmp2508 ], eax

l2509:

  mov eax, dword [ tmp2508 ]
  mov dword [ tmp2506 ], eax

l2507:

  mov eax, dword [ tmp2506 ]
  mov dword [ tmp2430 ], eax

l2505:

  mov eax, dword [ tmp2430 ]
  mov dword [ tmp2425 ], eax

l2504:

  mov eax, dword [ tmp2425 ]
  mov dword [ tmp2403 ], eax

l2503:

  mov eax, dword [ tmp2403 ]
  mov dword [ tmp2342 ], eax

l2502:

  mov eax, dword [ tmp2342 ]
  mov dword [ tmp2394 ], eax

l2501:

  cmp dword [ tmp2394 ], 0
  jz l2513

  lea rcx , [ x ]
  lea  rax , [ xType ]
  call  AST_GetDataType

  lea rcx , [ y ]
  lea  rax , [ yType ]
  call  AST_GetDataType

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2443 + Variant_t.value], rax

  lea rcx, [ tmp2487 ]
  lea rdx, [ tmp2443 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2515

  mov dword [ tmp2295 ], 1

  mov eax, dword [ yType ]
  cmp eax, dword [ tmp2295 ]
  jnz l2517

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2487 ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 40
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6533
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6533:


  jmp l2518

l2517:

  mov dword [ tmp2295 ], 3

  mov eax, dword [ yType ]
  cmp eax, dword [ tmp2295 ]
  jnz l2519

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2487 ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 41
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6534
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6534:


  jmp l2520

l2519:

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2487 ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 42
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6535
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6535:


l2520:

l2518:

l2515:

l2516:

  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2487 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2487 + Variant_t.value], rax

  lea rcx, [ tmp2443 ]
  lea rdx, [ tmp2487 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2521

  mov dword [ tmp2295 ], 1

  mov eax, dword [ xType ]
  cmp eax, dword [ tmp2295 ]
  jnz l2523

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2443 ]
  lea  rax , [ tmp2487 ]
  mov  r10d, 40
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6536
  movsxd rax, dword [ tmp2487 + Variant_t.value ]
  mov    qword [ tmp2487 + Variant_t.value ], rax
l6536:


  jmp l2524

l2523:

  mov dword [ tmp2295 ], 3

  mov eax, dword [ xType ]
  cmp eax, dword [ tmp2295 ]
  jnz l2525

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2443 ]
  lea  rax , [ tmp2487 ]
  mov  r10d, 41
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6537
  movsxd rax, dword [ tmp2487 + Variant_t.value ]
  mov    qword [ tmp2487 + Variant_t.value ], rax
l6537:


  jmp l2526

l2525:

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2443 ]
  lea  rax , [ tmp2487 ]
  mov  r10d, 42
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6538
  movsxd rax, dword [ tmp2487 + Variant_t.value ]
  mov    qword [ tmp2487 + Variant_t.value ], rax
l6538:


l2526:

l2524:

l2521:

l2522:

  jmp l2514

l2513:

  mov dword [ tmp2295 ], 57

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jnz l2527

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2443 + Variant_t.value], rax

  lea rcx, [ tmp2487 ]
  lea rdx, [ tmp2443 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2529

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2487 ]
  lea  rax , [ tmp2443 ]
  mov  r10d, 42
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6539
  movsxd rax, dword [ tmp2443 + Variant_t.value ]
  mov    qword [ tmp2443 + Variant_t.value ], rax
l6539:


l2529:

l2530:

  jmp l2528

l2527:

  mov dword [ tmp2403 ], 1

  mov dword [ tmp2295 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2295 ]
  jz l2531

  mov dword [ tmp2295 ], 67

  mov dword [ tmp2403 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2295 ]
  setz byte [ tmp2403 ]

l2531:

  cmp dword [ tmp2403 ], 0
  jz l2532

  lea rcx , [ x ]
  lea  rax , [ xType ]
  call  AST_GetDataType

  lea rcx , [ y ]
  lea  rax , [ yType ]
  call  AST_GetDataType

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2487 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2487 + Variant_t.value], rax

  lea rcx, [ tmp2443 ]
  lea rdx, [ tmp2487 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2534

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2443 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp2433 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ yType ]
  mov [ tmp2433 + Variant_t.value], rax

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2443 ]
  lea r8 , [ tmp2433 ]
  lea  rax , [ tmp2487 ]
  mov  r10d, 14
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6540
  movsxd rax, dword [ tmp2487 + Variant_t.value ]
  mov    qword [ tmp2487 + Variant_t.value ], rax
l6540:


l2534:

l2535:

  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2295 ], 52

  mov [ tmp2433 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2295 ]
  mov [ tmp2433 + Variant_t.value], rax

  lea rcx, [ tmp2487 ]
  lea rdx, [ tmp2433 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2536

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2487 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp2443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ xType ]
  mov [ tmp2443 + Variant_t.value], rax

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp2487 ]
  lea r8 , [ tmp2443 ]
  lea  rax , [ tmp2433 ]
  mov  r10d, 14
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6541
  movsxd rax, dword [ tmp2433 + Variant_t.value ]
  mov    qword [ tmp2433 + Variant_t.value ], rax
l6541:


l2536:

l2537:

l2532:

l2533:

l2528:

l2514:

l2466:

l2450:

l2358:

; 
; END: switch opcode
; -----------------------------
; 
l2332:

l2303:

; 
; END: switch opcode
; -----------------------------
; 
l2301:

l2302:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2293 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2294 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2322 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2323 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2324 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2325 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2326 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse5 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseProto ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneMethodName
  ; Skipped loop iterator methodProto
  ; Skipped loop iterator child
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodParamsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse6 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseMethodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2335 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2338 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2341 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2347 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2348 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTypeParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse7 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramName
  lea  rcx, [ __cse8 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2372 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2378 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBox ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeIdx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2397 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2433 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2434 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse9 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo1
  lea  rcx, [ symbolInfo2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse10 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeName1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeName2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2440 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2443 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2444 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxStartNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxEndNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxStepNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse12 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse11 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse13 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ condNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2487 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentFunctionName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse14 ]
  call __MOLD_VariantDestroy

  add  rsp, 1536
  pop  rbp
  ret


  restore this
  restore symbolTable
  restore node
  restore isLeftNode
  restore opcode
  restore children
  restore childrenCnt
  restore tmp2293
  restore tmp2294
  restore tmp2295
  restore item
  restore tmp2298
  restore tmp2300
  restore tmp2310
  restore symbolInfo
  restore tmp2322
  restore tmp2323
  restore tmp2324
  restore tmp2325
  restore tmp2326
  restore tmp2329
  restore className
  restore baseName
  restore vtable
  restore baseMethods
  restore classProto
  restore __cse5
  restore baseProto
  restore oneMethodName
  restore methodProto
  restore child
  restore methodName
  restore methodParamsCnt
  restore __cse6
  restore baseMethodProto
  restore tmp2335
  restore tmp2338
  restore tmp2341
  restore tmp2342
  restore tmp2347
  restore tmp2348
  restore nodeBody
  restore funcProto
  restore value
  restore funcName
  restore astTypeParams
  restore paramShift
  restore __cse7
  restore paramIdx
  restore paramName
  restore __cse8
  restore tmp2372
  restore tmp2378
  restore nodeBox
  restore nodeIdx
  restore nodeKey
  restore tmp2394
  restore tmp2397
  restore tmp2403
  restore lval
  restore rval
  restore oldClassProto
  restore newClassProto
  restore tmp2425
  restore tmp2430
  restore tmp2433
  restore tmp2434
  restore symbolTable1
  restore symbolTable2
  restore symbols1
  restore symbols2
  restore __cse9
  restore symbolInfo1
  restore symbolInfo2
  restore readHits
  restore writeHits
  restore astType1
  restore astType2
  restore __cse10
  restore typeName1
  restore typeName2
  restore id
  restore classProto1
  restore classProto2
  restore tmp2440
  restore tmp2443
  restore tmp2444
  restore iterNode
  restore idxStartNode
  restore idxEndNode
  restore idxStepNode
  restore bodyNode
  restore __cse12
  restore __cse11
  restore tmp2451
  restore tmp2456
  restore iteratorsCnt
  restore boxNode
  restore idx
  restore __cse13
  restore condNode
  restore tmp2487
  restore tmp2506
  restore tmp2508
  restore tmp2510
  restore tmp2512
  restore goOnIntoChildren
  restore x
  restore y
  restore isRetValUsed
  restore currentFunctionName
  restore baseClassProto
  restore __cse14
  restore xType
  restore yType

; -----------------------------------------------
; function __ASTSymbolsCollector_buildSymbolTable$1
; -----------------------------------------------
__ASTSymbolsCollector_buildSymbolTable$1_vcall:
__ASTSymbolsCollector_buildSymbolTable$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 7 )
  tmp2541 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2543 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2538 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2540 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2542 EQU rbp - 84 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp2541 + Variant_t.type], eax
  mov [tmp2543 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp2538 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2541 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2542 ], 31

  mov [ tmp2543 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2542 ]
  mov [ tmp2543 + Variant_t.value], rax

  lea rcx, [ tmp2541 ]
  lea rdx, [ tmp2543 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2539

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2543 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2542 ], 30

  mov [ tmp2541 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2542 ]
  mov [ tmp2541 + Variant_t.value], rax

  lea  rcx , [ tmp2543 ]
  lea  rdx , [ tmp2541 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2538 ], eax

l2539:

  cmp dword [ tmp2538 ], 0
  jz l2544

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal256
  lea rcx , [ __literal256 ]
  call qword [rbx + 8 * 41 ]

l2544:

l2545:

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp2541 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp2541 ]
  lea r8 , [ node ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2541 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2543 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore node
  restore tmp2538
  restore tmp2540
  restore tmp2541
  restore tmp2542
  restore tmp2543

; -----------------------------------------------
; function __ASTEvaluator_constructor$1
; -----------------------------------------------
__ASTEvaluator_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore app

; -----------------------------------------------
; function __ASTEvaluator__debug$1
; -----------------------------------------------
__ASTEvaluator__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2546 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2547 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp2547 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp2547 ]
  jnz l2548

  lea rcx, [__fmt4 ]
  call __MOLD_PrintFormatFromMemory

l2548:

l2549:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp2546
  restore tmp2547

; -----------------------------------------------
; function __ASTEvaluator__assignValue$3
; -----------------------------------------------
__ASTEvaluator__assignValue$3:

  ; init frame
  ; ----------
  valuesMap EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 3 )
  lval EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 3 )
  rval EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  name EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  newValue EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp2550 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ lval ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rval ], xmm0
  xor eax, eax
  mov [name + Variant_t.type], eax
  mov [newValue + Variant_t.type], eax
  mov [tmp2550 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValue ]
  lea rdx, [ rval ]
  call __MOLD_VariantMove

  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ lval ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2550 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore valuesMap
  restore lval
  restore rval
  restore name
  restore newValue
  restore tmp2550

; -----------------------------------------------
; function __ASTEvaluator__getValue$2
; -----------------------------------------------
__ASTEvaluator__getValue$2:

  ; init frame
  ; ----------
  rv EQU rdi
  valuesMap EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 8 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 2 )
  tmp2556 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2557 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2553 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2555 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp2556 + Variant_t.type], eax
  mov [tmp2557 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: while
; 
l2551:

  mov dword [ tmp2553 ], 0

  cmp [ rv + Variant_t.type ], 0
  jnz l2554

  lea  rcx , [ valuesMap ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2556 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp2556  + Variant_t.type], 0
  setnz al
  mov dword [ tmp2553 ], eax

l2554:

  cmp dword [ tmp2553 ], 0
  jz l2552

  lea  rcx , [ valuesMap ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ valuesMap ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  jmp l2551

l2552:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2556 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2557 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore valuesMap
  restore name
  restore rv
  restore tmp2553
  restore tmp2555
  restore tmp2556
  restore tmp2557

; -----------------------------------------------
; function __ASTEvaluator__mergeValues$2
; -----------------------------------------------
__ASTEvaluator__mergeValues$2:

  ; init frame
  ; ----------
  rv EQU rdi
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  y EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  item EQU rbp - 56 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp2558 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2561 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ y ], xmm0
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate

  cmp [ x  + Variant_t.type], 0
  jz l2559

  cmp [ x + Variant_t.type ], 7
  jnz l2562

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2565

l2564:

  ; __mold_syscall( 50 )
  lea rcx , [ rv ]
  lea rdx , [ item ]
  call qword [rbx + 8 * 50 ]

  ret

l2565:

  lea  rcx , [ x ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2564 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2563

l2562:

  ; __mold_syscall( 50 )
  lea rcx , [ rv ]
  lea rdx , [ x ]
  call qword [rbx + 8 * 50 ]

l2563:

l2559:

l2560:

  cmp [ y  + Variant_t.type], 0
  jz l2566

  cmp [ y + Variant_t.type ], 7
  jnz l2568

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2571

l2570:

  ; __mold_syscall( 50 )
  lea rcx , [ rv ]
  lea rdx , [ item ]
  call qword [rbx + 8 * 50 ]

  ret

l2571:

  lea  rcx , [ y ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2570 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2569

l2568:

  ; __mold_syscall( 50 )
  lea rcx , [ rv ]
  lea rdx , [ y ]
  call qword [rbx + 8 * 50 ]

l2569:

l2566:

l2567:


  ; clean frame
  ; -----------
  ; Skipped loop iterator item

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore x
  restore y
  restore rv
  restore tmp2558
  restore tmp2561
  restore item

; -----------------------------------------------
; function __ASTEvaluator__processConditionalNode$2
; -----------------------------------------------
__ASTEvaluator__processConditionalNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  valuesMap EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 3 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newValuesMap EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  tmp2572 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  varId EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 5 )
  oldValue EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  newValue EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2575 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [newValuesMap + Variant_t.type], eax
  mov [tmp2572 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [oldValue + Variant_t.type], eax
  mov [newValue + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newValuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp2572 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2572 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove

  lea  rcx , [ newValuesMap ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp2572 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ newValuesMap ]
  lea r8 , [ node ]
  call  __ASTEvaluator__processNode$2

; 
; -----------------------------
; BEGIN: for keys varId values undefined
; 
  jmp l2574

l2573:

  lea rcx, [ varId ]
  lea rdx, [ __literal258 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2576

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ varId ]
  lea  rax , [ oldValue ]
  call  __ASTEvaluator__getValue$2

  lea  rcx , [ newValuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ oldValue ]
  lea r8 , [ newValue ]
  lea  rax , [ tmp2572 ]
  call  __ASTEvaluator__mergeValues$2

  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2572 ]
  call  __MOLD_VariantStoreAtKey

l2576:

l2577:

  ret

l2574:

  lea rcx , [ newValuesMap ]
  lea rdx , [ varId ]
  lea r8 , [ __TrashBin ]
  lea r9 , [ l2573 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys varId values __TrashBin
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ newValuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2572 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator varId
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore valuesMap
  restore node
  restore newValuesMap
  restore tmp2572
  restore tmp2575
  restore varId
  restore oldValue
  restore newValue

; -----------------------------------------------
; function __ASTEvaluator__processTwoAlternativeNodes$3
; -----------------------------------------------
__ASTEvaluator__processTwoAlternativeNodes$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  valuesMap EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 2 , readHits= 6 )
  node1 EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  node2 EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newValuesMap1 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  newValuesMap2 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  tmp2578 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  varId EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 6 )
  oldValue EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  value1 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  value2 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2581 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ node2 ], xmm0
  xor eax, eax
  mov [newValuesMap1 + Variant_t.type], eax
  mov [newValuesMap2 + Variant_t.type], eax
  mov [tmp2578 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [oldValue + Variant_t.type], eax
  mov [value1 + Variant_t.type], eax
  mov [value2 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newValuesMap1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap1 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp2578 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2578 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove

  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp2578 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ newValuesMap2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap2 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp2578 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2578 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove

  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp2578 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ newValuesMap1 ]
  lea r8 , [ node1 ]
  call  __ASTEvaluator__processNode$2

  lea rcx , [ this ]
  lea rdx , [ newValuesMap2 ]
  lea r8 , [ node2 ]
  call  __ASTEvaluator__processNode$2

; 
; -----------------------------
; BEGIN: for keys varId values undefined
; 
  jmp l2580

l2579:

  lea rcx, [ varId ]
  lea rdx, [ __literal258 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2582

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ varId ]
  lea  rax , [ oldValue ]
  call  __ASTEvaluator__getValue$2

  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value1 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value2 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ value1 ]
  lea r8 , [ value2 ]
  lea  rax , [ tmp2578 ]
  call  __ASTEvaluator__mergeValues$2

  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2578 ]
  call  __MOLD_VariantStoreAtKey

l2582:

l2583:

  ret

l2580:

  lea rcx , [ newValuesMap1 ]
  lea rdx , [ varId ]
  lea r8 , [ __TrashBin ]
  lea r9 , [ l2579 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys varId values __TrashBin
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys varId values undefined
; 
  jmp l2585

l2584:

  lea rcx, [ varId ]
  lea rdx, [ __literal258 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2586

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ varId ]
  lea  rax , [ oldValue ]
  call  __ASTEvaluator__getValue$2

  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value1 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value2 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ value1 ]
  lea r8 , [ value2 ]
  lea  rax , [ tmp2578 ]
  call  __ASTEvaluator__mergeValues$2

  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2578 ]
  call  __MOLD_VariantStoreAtKey

l2586:

l2587:

  ret

l2585:

  lea rcx , [ newValuesMap2 ]
  lea rdx , [ varId ]
  lea r8 , [ __TrashBin ]
  lea r9 , [ l2584 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys varId values __TrashBin
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ newValuesMap1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValuesMap2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2578 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator varId
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value2 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret


  restore this
  restore valuesMap
  restore node1
  restore node2
  restore newValuesMap1
  restore newValuesMap2
  restore tmp2578
  restore tmp2581
  restore varId
  restore oldValue
  restore value1
  restore value2

; -----------------------------------------------
; function __ASTEvaluator__getArrayOfValueNodes$1
; -----------------------------------------------
__ASTEvaluator__getArrayOfValueNodes$1:

  ; init frame
  ; ----------
  rv EQU rdi
  node EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  storedValue EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  tmp2596 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  item EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  tmp2597 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2598 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2588 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2591 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [storedValue + Variant_t.type], eax
  mov [tmp2596 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp2597 + Variant_t.type], eax
  mov [tmp2598 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ storedValue ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate

  cmp [ storedValue  + Variant_t.type], 0
  jz l2589

  cmp [ storedValue + Variant_t.type ], 7
  jnz l2592

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l2595

l2594:

  lea  rcx , [ item ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2596 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 50 )
  lea rcx , [ rv ]
  lea rdx , [ tmp2596 ]
  call qword [rbx + 8 * 50 ]

  ret

l2595:

  lea  rcx , [ storedValue ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2594 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2593

l2592:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2596 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2596 + Variant_t.value], 0

  lea  rcx , [ storedValue ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2597 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rv ]
  lea  rdx , [ tmp2596 ]
  lea  r8 , [ tmp2597 ]
  call  __MOLD_VariantStoreAtIndex

l2593:

l2589:

l2590:


  ; clean frame
  ; -----------
  lea  rcx, [ storedValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2596 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ tmp2597 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2598 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore node
  restore storedValue
  restore rv
  restore tmp2588
  restore tmp2591
  restore tmp2596
  restore item
  restore tmp2597
  restore tmp2598

; -----------------------------------------------
; function __ASTEvaluator__processNode$2
; -----------------------------------------------
__ASTEvaluator__processNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 30 )
  valuesMap EQU rbp - 40 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 22 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 2 , readHits= 14 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 31 )
  tmp2599 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 10 , readHits= 10 )
  tmp2601 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 12 , readHits= 12 )
  symbolInfo EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  tmp2627 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 13 , readHits= 13 )
  tmp2628 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp2629 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp2630 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp2631 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp2632 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 12 , readHits= 12 )
  tmp2644 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  lval EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 12 )
  rval EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 14 )
  classProto EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  methodProto EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  iter EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 4 )
  iterBeginValue EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  body EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  cond EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  childNode EQU rbp - 376 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 8 )
  astType EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  opcode EQU rbp - 396 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 14 )
  childrenCnt EQU rbp - 400 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2600 EQU rbp - 404 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 45 , readHits= 45 )
  tmp2602 EQU rbp - 408 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2605 EQU rbp - 412 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2607 EQU rbp - 416 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2609 EQU rbp - 420 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp2618 EQU rbp - 424 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp2621 EQU rbp - 428 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp2624 EQU rbp - 432 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp2641 EQU rbp - 436 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2668 EQU rbp - 440 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2675 EQU rbp - 444 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2678 EQU rbp - 448 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2680 EQU rbp - 452 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2682 EQU rbp - 456 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2684 EQU rbp - 460 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2686 EQU rbp - 464 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 496

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [tmp2599 + Variant_t.type], eax
  mov [tmp2601 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp2627 + Variant_t.type], eax
  mov [tmp2628 + Variant_t.type], eax
  mov [tmp2629 + Variant_t.type], eax
  mov [tmp2630 + Variant_t.type], eax
  mov [tmp2631 + Variant_t.type], eax
  mov [tmp2632 + Variant_t.type], eax
  mov [tmp2644 + Variant_t.type], eax
  mov [lval + Variant_t.type], eax
  mov [rval + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [methodProto + Variant_t.type], eax
  mov [iter + Variant_t.type], eax
  mov [iterBeginValue + Variant_t.type], eax
  mov [body + Variant_t.type], eax
  mov [cond + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [astType + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2599 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2599 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp2599 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp2599 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2599 + Variant_t.value]
  mov dword [ childrenCnt ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2601 ]
  lea rdx , [ node ]
  lea  rax , [ tmp2599 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6542
  movsxd rax, dword [ tmp2599 + Variant_t.value ]
  mov    qword [ tmp2599 + Variant_t.value ], rax
l6542:


  mov dword [ tmp2600 ], 52

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jnz l2603

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2605 ], 0

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l2606

  mov dword [ tmp2607 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 2

  mov [ tmp2601 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2601 + Variant_t.value], rax

  lea rcx, [ tmp2599 ]
  lea rdx, [ tmp2601 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2608

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 1

  mov [ tmp2599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2599 + Variant_t.value], rax

  lea  rcx , [ tmp2599 ]
  lea  rdx , [ tmp2601 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp2607 ], eax

l2608:

  mov eax, dword [ tmp2607 ]
  mov dword [ tmp2605 ], eax

l2606:

  cmp dword [ tmp2605 ], 0
  jz l2610

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey

  jmp l2611

l2610:

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ tmp2601 ]
  lea  rax , [ tmp2599 ]
  call  __ASTEvaluator__getValue$2

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantStoreAtKey

l2611:

  jmp l2604

l2603:

  mov dword [ tmp2600 ], 56

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jnz l2612

  mov dword [ tmp2600 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2600 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ rval ]
  call  __ASTEvaluator__processNode$2

  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 36

  mov [ tmp2601 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2601 + Variant_t.value], rax

  lea rcx, [ tmp2599 ]
  lea rdx, [ tmp2601 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2614

  lea  rcx , [ rval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 0

  lea  rcx , [ tmp2599 ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2601 ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l2616

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ classProto  + Variant_t.type], 0
  jz l2619

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2601 ]
  lea  rdx , [ tmp2599 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ methodProto  + Variant_t.type], 0
  jz l2622

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2599 + Variant_t.type ], 0
  jnz l2625

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal259 ]
  lea  rdx , [ tmp2632 ]
  lea  r8 , [ tmp2631 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2630 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2631 ]
  lea  rdx , [ __literal260 ]
  lea  r8 , [ tmp2630 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2629 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2630 ]
  lea  rdx , [ tmp2632 ]
  lea  r8 , [ tmp2629 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2628 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2629 ]
  lea  rdx , [ __literal261 ]
  lea  r8 , [ tmp2628 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2627 ]
  lea rdx , [ tmp2628 ]
  lea  rax , [ tmp2601 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6543
  movsxd rax, dword [ tmp2601 + Variant_t.value ]
  mov    qword [ tmp2601 + Variant_t.value ], rax
l6543:


l2625:

l2626:

l2622:

l2623:

l2619:

l2620:

l2616:

l2617:

  jmp l2615

l2614:

  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 36

  mov [ tmp2627 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2627 + Variant_t.value], rax

  lea rcx, [ tmp2601 ]
  lea rdx, [ tmp2627 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2633

  lea  rcx , [ rval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 0

  lea  rcx , [ tmp2601 ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2627 ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l2635

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ classProto  + Variant_t.type], 0
  jz l2637

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2627 ]
  lea  rdx , [ tmp2601 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ methodProto  + Variant_t.type], 0
  jz l2639

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2601 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2601 + Variant_t.type ], 0
  jnz l2642

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2644 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal262 ]
  lea  rdx , [ tmp2644 ]
  lea  r8 , [ tmp2631 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2630 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2631 ]
  lea  rdx , [ __literal260 ]
  lea  r8 , [ tmp2630 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2644 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2629 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2630 ]
  lea  rdx , [ tmp2644 ]
  lea  r8 , [ tmp2629 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2628 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2629 ]
  lea  rdx , [ __literal261 ]
  lea  r8 , [ tmp2628 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2632 ]
  lea rdx , [ tmp2628 ]
  lea  rax , [ tmp2627 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6544
  movsxd rax, dword [ tmp2627 + Variant_t.value ]
  mov    qword [ tmp2627 + Variant_t.value ], rax
l6544:


l2642:

l2643:

l2639:

l2640:

l2637:

l2638:

l2635:

l2636:

l2633:

l2634:

l2615:

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 52

  mov [ tmp2632 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2632 + Variant_t.value], rax

  lea rcx, [ tmp2627 ]
  lea rdx, [ tmp2632 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2645

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ lval ]
  lea r9 , [ rval ]
  call  __ASTEvaluator__assignValue$3

  jmp l2646

l2645:

  mov dword [ tmp2609 ], 1

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 54

  mov [ tmp2627 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2627 + Variant_t.value], rax

  lea rcx, [ tmp2632 ]
  lea rdx, [ tmp2627 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2647

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 55

  mov [ tmp2632 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2632 + Variant_t.value], rax

  lea  rcx , [ tmp2627 ]
  lea  rdx , [ tmp2632 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2609 ], eax

l2647:

  cmp dword [ tmp2609 ], 0
  jz l2648

  lea  rcx , [ lval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 0

  lea  rcx , [ tmp2627 ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp2632 ]
  lea  rax , [ tmp2621 ]
  call  AST_IsOkAsBox

  mov dword [ tmp2624 ], 0

  mov eax, dword [ tmp2621 ]
  cmp eax, dword [ tmp2624 ]
  jnz l2650

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2627 ]
; WARNING: Failed to get variable size: __literal263
  lea rdx , [ __literal263 ]
  lea  rax , [ tmp2632 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6545
  movsxd rax, dword [ tmp2632 + Variant_t.value ]
  mov    qword [ tmp2632 + Variant_t.value ], rax
l6545:


l2650:

l2651:

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ lval ]
  lea r9 , [ lval ]
  call  __ASTEvaluator__assignValue$3

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ lval ]
  call  __ASTEvaluator__processNode$2

l2648:

l2649:

l2646:

  jmp l2613

l2612:

  mov dword [ tmp2600 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jnz l2652

  mov dword [ tmp2600 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ tmp2632 ]
  call  __ASTEvaluator__processNode$2

  mov dword [ tmp2600 ], 2

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp2600 ]
  jnz l2654

  mov dword [ tmp2600 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ tmp2632 ]
  call  __ASTEvaluator__processConditionalNode$2

  jmp l2655

l2654:

  mov dword [ tmp2600 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ tmp2632 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2600 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ tmp2632 ]
  lea r9 , [ tmp2627 ]
  call  __ASTEvaluator__processTwoAlternativeNodes$3

l2655:

  jmp l2653

l2652:

  mov dword [ tmp2600 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jnz l2656

  mov dword [ tmp2600 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ iter ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2600 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ iterBeginValue ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2600 ], 4

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ iter ]
  lea r9 , [ iter ]
  call  __ASTEvaluator__assignValue$3

  lea  rcx, [ tmp2627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2627 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2632 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2632 + Variant_t.value], 0

  lea  rcx, [ tmp2644 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2644 ]
  lea rdx, [ iterBeginValue ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2627 ]
  lea  rdx , [ tmp2632 ]
  lea  r8 , [ tmp2644 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp2632 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2632 + Variant_t.value], 1

  lea  rcx, [ tmp2644 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2644 ]
  lea rdx, [ iter ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2627 ]
  lea  rdx , [ tmp2632 ]
  lea  r8 , [ tmp2644 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ iter ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  jmp l2657

l2656:

  mov dword [ tmp2618 ], 1

  mov dword [ tmp2600 ], 45

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jz l2658

  mov dword [ tmp2624 ], 1

  mov dword [ tmp2600 ], 46

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jz l2659

  mov dword [ tmp2600 ], 48

  mov dword [ tmp2624 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2600 ]
  setz byte [ tmp2624 ]

l2659:

  mov eax, dword [ tmp2624 ]
  mov dword [ tmp2618 ], eax

l2658:

  cmp dword [ tmp2618 ], 0
  jz l2660

  mov dword [ tmp2600 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  jmp l2661

l2660:

  mov dword [ tmp2624 ], 1

  mov dword [ tmp2600 ], 47

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jz l2662

  mov dword [ tmp2600 ], 49

  mov dword [ tmp2624 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2600 ]
  setz byte [ tmp2624 ]

l2662:

  cmp dword [ tmp2624 ], 0
  jz l2663

  mov dword [ tmp2600 ], 3

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  jmp l2664

l2663:

  mov dword [ tmp2600 ], 43

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jnz l2665

  mov dword [ tmp2600 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2600 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2600 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ cond ]
  call  __ASTEvaluator__processNode$2

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ cond ]
  call  __ASTEvaluator__processConditionalNode$2

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$2

  jmp l2666

l2665:

  mov dword [ tmp2641 ], 1

  mov dword [ tmp2600 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jz l2667

  mov dword [ tmp2600 ], 36

  mov dword [ tmp2641 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2600 ]
  setz byte [ tmp2641 ]

l2667:

  cmp dword [ tmp2641 ], 0
  jz l2669

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l2672

l2671:

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2627 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2600 ], 52

  mov [ tmp2644 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2644 + Variant_t.value], rax

  lea rcx, [ tmp2627 ]
  lea rdx, [ tmp2644 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2673

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l2676

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ astType ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2678 ], 1

  cmp [ astType  + Variant_t.type], 0
  jz l2679

  mov dword [ tmp2680 ], 1

  mov dword [ tmp2600 ], -1

  mov [ tmp2644 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2644 + Variant_t.value], rax

  lea rcx, [ astType ]
  lea rdx, [ tmp2644 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2681

  mov dword [ tmp2682 ], 1

  mov dword [ tmp2600 ], 6

  mov [ tmp2644 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2644 + Variant_t.value], rax

  lea rcx, [ astType ]
  lea rdx, [ tmp2644 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2683

  mov dword [ tmp2684 ], 1

  mov dword [ tmp2600 ], 10

  mov [ tmp2644 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2644 + Variant_t.value], rax

  lea rcx, [ astType ]
  lea rdx, [ tmp2644 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2685

  mov dword [ tmp2600 ], 9

  mov [ tmp2644 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2600 ]
  mov [ tmp2644 + Variant_t.value], rax

  lea  rcx , [ astType ]
  lea  rdx , [ tmp2644 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2684 ], eax

l2685:

  mov eax, dword [ tmp2684 ]
  mov dword [ tmp2682 ], eax

l2683:

  mov eax, dword [ tmp2682 ]
  mov dword [ tmp2680 ], eax

l2681:

  mov eax, dword [ tmp2680 ]
  mov dword [ tmp2678 ], eax

l2679:

  cmp dword [ tmp2678 ], 0
  jz l2687

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ childNode ]
  lea r9 , [ childNode ]
  call  __ASTEvaluator__assignValue$3

l2687:

l2688:

l2676:

l2677:

l2673:

l2674:

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ childNode ]
  call  __ASTEvaluator__processNode$2

  ret

l2672:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2671 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l2670

l2669:

  mov dword [ tmp2668 ], 1

  mov dword [ tmp2600 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2600 ]
  jz l2689

  mov dword [ tmp2600 ], 34

  mov dword [ tmp2668 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2600 ]
  setz byte [ tmp2668 ]

l2689:

  cmp dword [ tmp2668 ], 0
  jz l2690

  lea  rcx , [ valuesMap ]
  call  __MOLD_VariantMapCreate

l2690:

l2691:

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l2693

l2692:

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ childNode ]
  call  __ASTEvaluator__processNode$2

  ret

l2693:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2692 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
l2670:

l2666:

l2664:

l2661:

l2657:

l2653:

l2613:

l2604:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2599 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2601 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2627 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2628 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2629 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2630 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2631 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2632 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2644 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterBeginValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ astType ]
  call __MOLD_VariantDestroy

  add  rsp, 496
  pop  rbp
  ret


  restore this
  restore valuesMap
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore tmp2599
  restore tmp2600
  restore tmp2601
  restore tmp2602
  restore tmp2605
  restore tmp2607
  restore tmp2609
  restore symbolInfo
  restore tmp2618
  restore tmp2621
  restore tmp2624
  restore tmp2627
  restore tmp2628
  restore tmp2629
  restore tmp2630
  restore tmp2631
  restore tmp2632
  restore tmp2641
  restore tmp2644
  restore lval
  restore rval
  restore classProto
  restore methodProto
  restore iter
  restore iterBeginValue
  restore body
  restore cond
  restore tmp2668
  restore tmp2675
  restore tmp2678
  restore tmp2680
  restore tmp2682
  restore tmp2684
  restore tmp2686
  restore childNode
  restore astType

; -----------------------------------------------
; function __ASTEvaluator_processNode$1
; -----------------------------------------------
__ASTEvaluator_processNode$1_vcall:
__ASTEvaluator_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  valuesMap EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [valuesMap + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ valuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesMap ]
  call  __MOLD_VariantMapCreate

  lea rcx , [ this ]
  lea rdx , [ valuesMap ]
  lea r8 , [ node ]
  call  __ASTEvaluator__processNode$2


  ; clean frame
  ; -----------
  lea  rcx, [ valuesMap ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore node
  restore valuesMap

; -----------------------------------------------
; function __ASTPreprocessor_constructor$1
; -----------------------------------------------
__ASTPreprocessor_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore app

; -----------------------------------------------
; function __ASTPreprocessor__debug$1
; -----------------------------------------------
__ASTPreprocessor__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2694 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2695 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp2695 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp2695 ]
  jnz l2696

  lea rcx, [__fmt5 ]
  call __MOLD_PrintFormatFromMemory

l2696:

l2697:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp2694
  restore tmp2695

; -----------------------------------------------
; function __ASTPreprocessor__processNode$1
; -----------------------------------------------
__ASTPreprocessor__processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 9 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 12 , readHits= 37 )
  children EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 23 )
  tmp2698 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 28 , readHits= 28 )
  oneChild EQU rbp - 88 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp2702 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 29 , readHits= 29 )
  tmp2715 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp2716 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  x EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  y EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  name EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 3 )
  typeId EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 2 )
  tmp2729 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp2730 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp2731 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2732 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2733 EQU rbp - 280 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2734 EQU rbp - 296 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  funcName EQU rbp - 312 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 4 )
  sysCallId EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  paramsExpectedCnt EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  paramsPassedCnt EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  newChildren EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  childrenCnt EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2747 EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2748 EQU rbp - 424 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2749 EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2750 EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp2751 EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2752 EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2753 EQU rbp - 504 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2754 EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  box EQU rbp - 536 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  selector EQU rbp - 552 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 3 )
  __cse15 EQU rbp - 568 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  __cse16 EQU rbp - 584 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  funcParams EQU rbp - 600 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  funcRetVar EQU rbp - 616 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  funcCode EQU rbp - 632 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 2 )
  oneParamNode EQU rbp - 648 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  className EQU rbp - 664 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  methodName EQU rbp - 680 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  fullMethodName EQU rbp - 696 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 700 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 7 )
  tmp2699 EQU rbp - 704 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 17 , readHits= 17 )
  tmp2703 EQU rbp - 708 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2705 EQU rbp - 712 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2710 EQU rbp - 716 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2717 EQU rbp - 720 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 9 , readHits= 9 )
  tmp2720 EQU rbp - 724 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp2737 EQU rbp - 728 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 17 , readHits= 17 )
  tmp2740 EQU rbp - 732 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2741 EQU rbp - 736 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 740 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp2755 EQU rbp - 744 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2766 EQU rbp - 748 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 784

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [tmp2698 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp2702 + Variant_t.type], eax
  mov [tmp2715 + Variant_t.type], eax
  mov [tmp2716 + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [name + Variant_t.type], eax
  mov [typeId + Variant_t.type], eax
  mov [tmp2729 + Variant_t.type], eax
  mov [tmp2730 + Variant_t.type], eax
  mov [tmp2731 + Variant_t.type], eax
  mov [tmp2732 + Variant_t.type], eax
  mov [tmp2733 + Variant_t.type], eax
  mov [tmp2734 + Variant_t.type], eax
  mov [funcName + Variant_t.type], eax
  mov [sysCallId + Variant_t.type], eax
  mov [paramsExpectedCnt + Variant_t.type], eax
  mov [paramsPassedCnt + Variant_t.type], eax
  mov [newChildren + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [tmp2747 + Variant_t.type], eax
  mov [tmp2748 + Variant_t.type], eax
  mov [tmp2749 + Variant_t.type], eax
  mov [tmp2750 + Variant_t.type], eax
  mov [tmp2751 + Variant_t.type], eax
  mov [tmp2752 + Variant_t.type], eax
  mov [tmp2753 + Variant_t.type], eax
  mov [tmp2754 + Variant_t.type], eax
  mov [box + Variant_t.type], eax
  mov [selector + Variant_t.type], eax
  mov [__cse15 + Variant_t.type], eax
  mov [__cse16 + Variant_t.type], eax
  mov [funcParams + Variant_t.type], eax
  mov [funcRetVar + Variant_t.type], eax
  mov [funcCode + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [className + Variant_t.type], eax
  mov [methodName + Variant_t.type], eax
  mov [fullMethodName + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2698 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2698 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l2701

l2700:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  call  __ASTPreprocessor__processNode$1

  ret

l2701:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2700 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2702 ]
  lea rdx , [ node ]
  lea  rax , [ tmp2698 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6546
  movsxd rax, dword [ tmp2698 + Variant_t.value ]
  mov    qword [ tmp2698 + Variant_t.value ], rax
l6546:


  mov dword [ tmp2703 ], 1

  mov dword [ tmp2699 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2699 ]
  jz l2704

  mov dword [ tmp2699 ], 67

  mov dword [ tmp2703 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2699 ]
  setz byte [ tmp2703 ]

l2704:

  cmp dword [ tmp2703 ], 0
  jz l2706

  mov dword [ tmp2699 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2699 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2699 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2699 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2699 ], 52

  mov [ tmp2702 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2699 ]
  mov [ tmp2702 + Variant_t.value], rax

  lea rcx, [ tmp2698 ]
  lea rdx, [ tmp2702 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2708

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ typeId ]
  call __MOLD_VariantDestroy

  lea rcx, [ name ]
  lea rdx, [ __literal309 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2711

  lea rcx , [ node ]
  call  AST_InvertBoolean

  mov dword [ tmp2699 ], 0

  mov [ typeId + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2699 ]
  mov [ typeId + Variant_t.value], rax

  jmp l2712

l2711:

  lea  rcx , [ MOLD_TYPE_ID_MAP ]
  lea  rdx , [ name ]
  lea  r8 , [ typeId ]
  call  __MOLD_VariantLoadFromKey

l2712:

  cmp [ typeId  + Variant_t.type], 0
  jz l2713

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2715 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2699 ], 75

  mov [ tmp2716 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2699 ]
  mov [ tmp2716 + Variant_t.value], rax

  lea  rcx , [ tmp2715 ]
  lea  rdx , [ tmp2716 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantAdd

  mov dword [ tmp2699 ], 66

  mov [ tmp2716 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2699 ]
  mov [ tmp2716 + Variant_t.value], rax

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ tmp2716 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantSub

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2702 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2702 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2716 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2716 + Variant_t.value], 0

  lea  rcx, [ tmp2698 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2698 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2702 ]
  lea  rdx , [ tmp2716 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ typeId ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2717 ], 1

  mov eax, dword [ tmp2717 ]
  mov [ tmp2702 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2702 + Variant_t.value], rax

  lea  rcx , [ x ]
  lea  rdx , [ __literal240 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2714

l2713:

  lea rcx, [ name ]
  lea rdx, [ __literal310 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2718

  mov dword [ tmp2699 ], 0

  mov dword [ tmp2720 ], 43

  mov [ tmp2698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2720 ]
  mov [ tmp2698 + Variant_t.value], rax

  lea rcx , [ tmp2698 ]
  lea rdx , [ x ]
  lea  rax , [ tmp2702 ]
  call  AST_CreateNodeSysCall

  lea  rcx , [ children ]
  lea  rdx , [ tmp2699 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp2699 ], 1

  mov dword [ tmp2720 ], 0

  mov [ tmp2698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2720 ]
  mov [ tmp2698 + Variant_t.value], rax

  lea rcx , [ tmp2698 ]
  lea  rax , [ tmp2702 ]
  call  AST_CreateNodeInteger

  lea  rcx , [ children ]
  lea  rdx , [ tmp2699 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtIndex_int32

l2718:

l2719:

l2714:

l2708:

l2709:

  jmp l2707

l2706:

  mov dword [ tmp2699 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2699 ]
  jnz l2721

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ MOLD_SYSCALL_MAP ]
  lea  rdx , [ funcName ]
  lea  r8 , [ sysCallId ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ funcName ]
  lea rdx, [ __literal100 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2723

  mov dword [ tmp2699 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2699 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2717 ], 1

  mov eax, dword [ tmp2717 ]
  mov [ tmp2698 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2698 + Variant_t.value], rax

  lea  rcx , [ tmp2702 ]
  lea  rdx , [ __literal240 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtKey

l2723:

l2724:

  cmp [ sysCallId  + Variant_t.type], 0
  jz l2725

  mov dword [ tmp2699 ], 4096

  mov [ tmp2698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2699 ]
  mov [ tmp2698 + Variant_t.value], rax

  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2698 ]
  lea  r8 , [ paramsExpectedCnt ]
  call  __MOLD_VariantDivAsInteger

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp2698 ]
  push rdi
  lea  rdi , [ paramsPassedCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx, [ paramsExpectedCnt ]
  lea rdx, [ paramsPassedCnt ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2727

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2734 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal311 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2734 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2733 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2734 ]
  lea  rdx , [ __literal312 ]
  lea  r8 , [ tmp2733 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ paramsExpectedCnt ]
  push rdi
  lea  rdi , [ tmp2716 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2732 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2733 ]
  lea  rdx , [ tmp2716 ]
  lea  r8 , [ tmp2732 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2731 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2732 ]
  lea  rdx , [ __literal313 ]
  lea  r8 , [ tmp2731 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ paramsPassedCnt ]
  push rdi
  lea  rdi , [ tmp2716 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2730 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2731 ]
  lea  rdx , [ tmp2716 ]
  lea  r8 , [ tmp2730 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2729 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2730 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp2729 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2702 ]
  lea rdx , [ tmp2729 ]
  lea  rax , [ tmp2698 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6547
  movsxd rax, dword [ tmp2698 + Variant_t.value ]
  mov    qword [ tmp2698 + Variant_t.value ], rax
l6547:


l2727:

l2728:

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __literal33 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2699 ], 255

  mov [ tmp2702 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2699 ]
  mov [ tmp2702 + Variant_t.value], rax

  ; __mold_syscall( 35 )
  lea rcx , [ sysCallId ]
  lea rdx , [ tmp2702 ]
  push rdi
  lea  rdi , [ tmp2698 ]
  call qword [rbx + 8 * 35 ]
  pop rdi

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2726

l2725:

  lea rcx, [ funcName ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2735

  mov dword [ tmp2699 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2699 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2702 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp2698 ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp2699 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp2720 ], eax

  mov dword [ idx ], 1

; 
; -----------------------------
; BEGIN: for idx in tmp2737 .. tmp2720
; 
l2738:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp2720 ]
  jge l2739

  mov dword [ tmp2741 ], 1

  mov eax, dword [ idx ]
  sub eax, dword [ tmp2741 ]
  mov dword [ tmp2740 ], eax

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp2740 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp2699 ]
  mov dword [ idx ], eax

  jmp l2738

l2739:

; 
; END: for idx in tmp2737 .. tmp2720 step tmp2699
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

l2735:

l2736:

l2726:

  jmp l2722

l2721:

  mov dword [ tmp2710 ], 0

  mov dword [ tmp2737 ], 54

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2737 ]
  jnz l2742

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2716 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2737 ], 1

  lea  rcx , [ tmp2716 ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2702 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2737 ], 20

  mov [ tmp2702 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2737 ]
  mov [ tmp2702 + Variant_t.value], rax

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ tmp2702 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2710 ], eax

l2742:

  cmp dword [ tmp2710 ], 0
  jz l2743

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse15 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2737 ], 0

  lea  rcx , [ __cse15 ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ box ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2737 ], 1

  lea  rcx , [ __cse15 ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ selector ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ selector ]
  lea rdx, [ __literal314 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2745

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2737 ], 1

  mov dword [ tmp2720 ], 59

  mov [ tmp2716 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2720 ]
  mov [ tmp2716 + Variant_t.value], rax

  lea  rcx, [ tmp2715 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2715 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2747 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2747 + Variant_t.value], 0

  mov dword [ tmp2720 ], 43

  mov [ tmp2750 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2720 ]
  mov [ tmp2750 + Variant_t.value], rax

  lea  rcx, [ tmp2751 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2751 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2752 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2752 + Variant_t.value], 0

  lea rcx , [ box ]
  lea  rax , [ tmp2754 ]
  call  AST_CloneNode

  lea  rcx, [ tmp2753 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2753 ]
  lea rdx, [ tmp2754 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2751 ]
  lea  rdx , [ tmp2752 ]
  lea  r8 , [ tmp2753 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ tmp2750 ]
  lea rdx , [ tmp2751 ]
  lea  rax , [ tmp2749 ]
  call  AST_CreateNodeSysCall

  lea  rcx, [ tmp2748 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2748 ]
  lea rdx, [ tmp2749 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2715 ]
  lea  rdx , [ tmp2747 ]
  lea  r8 , [ tmp2748 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp2747 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2747 + Variant_t.value], 1

  mov dword [ tmp2720 ], 1

  mov [ tmp2751 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2720 ]
  mov [ tmp2751 + Variant_t.value], rax

  lea rcx , [ tmp2751 ]
  lea  rax , [ tmp2749 ]
  call  AST_CreateNodeInteger

  lea  rcx, [ tmp2748 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2748 ]
  lea rdx, [ tmp2749 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2715 ]
  lea  rdx , [ tmp2747 ]
  lea  r8 , [ tmp2748 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ tmp2716 ]
; WARNING: Failed to get variable size: __literal88
  lea rdx , [ __literal88 ]
  lea r8 , [ tmp2715 ]
  lea  rax , [ tmp2698 ]
  call  AST_CreateNode

  lea  rcx , [ tmp2702 ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l2746

l2745:

  lea rcx, [ selector ]
  lea rdx, [ __literal315 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2756

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2737 ], 1

  mov dword [ tmp2720 ], 0

  mov [ tmp2715 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2720 ]
  mov [ tmp2715 + Variant_t.value], rax

  lea rcx , [ tmp2715 ]
  lea  rax , [ tmp2702 ]
  call  AST_CreateNodeInteger

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l2757

l2756:

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ __cse16 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse16 ]
  lea rdx , [ node ]
  lea  rax , [ tmp2702 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6548
  movsxd rax, dword [ tmp2702 + Variant_t.value ]
  mov    qword [ tmp2702 + Variant_t.value ], rax
l6548:


  lea  rcx, [ tmp2730 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal316 ]
  lea  rdx , [ selector ]
  lea  r8 , [ tmp2730 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2729 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2730 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp2729 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ __cse16 ]
  lea rdx , [ tmp2729 ]
  lea  rax , [ tmp2702 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6549
  movsxd rax, dword [ tmp2702 + Variant_t.value ]
  mov    qword [ tmp2702 + Variant_t.value ], rax
l6549:


l2757:

l2746:

  jmp l2744

l2743:

  mov dword [ tmp2717 ], 1

  mov dword [ tmp2737 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2737 ]
  jz l2758

  mov dword [ tmp2737 ], 34

  mov dword [ tmp2717 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2737 ]
  setz byte [ tmp2717 ]

l2758:

  cmp dword [ tmp2717 ], 0
  jz l2759

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ funcParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcParams ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ funcRetVar ]
  call __MOLD_VariantDestroy

  lea  rcx, [ funcCode ]
  call __MOLD_VariantDestroy

  mov dword [ tmp2737 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneParamNode
; 
  jmp l2762

l2761:

  lea  rcx , [ oneParamNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 50 )
  lea rcx , [ funcParams ]
  lea rdx , [ tmp2698 ]
  call qword [rbx + 8 * 50 ]

  ret

l2762:

  lea  rcx , [ tmp2702 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParamNode ]
  lea  r9 , [ l2761 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneParamNode
; -----------------------------
; 
  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp2702 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp2737 ], 3

  mov [ tmp2698 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2737 ]
  mov [ tmp2698 + Variant_t.value], rax

  lea rcx, [ tmp2702 ]
  lea rdx, [ tmp2698 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2763

  mov dword [ tmp2737 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcRetVar ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2737 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ funcCode ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l2764

l2763:

  mov dword [ tmp2737 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2737 ]
  lea  r8 , [ funcCode ]
  call  __MOLD_VariantLoadFromIndex_int32

l2764:

  lea  rcx, [ tmp2698 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2698 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp2702 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2702 ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2702 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2702 ]
  lea rdx, [ funcParams ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2702 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2702 ]
  lea rdx, [ funcRetVar ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp2755 ], 0

  mov dword [ tmp2737 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2737 ]
  jnz l2765

  xor eax, eax
  cmp [ funcCode  + Variant_t.type], 0
  setz al
  mov dword [ tmp2755 ], eax

l2765:

  cmp dword [ tmp2755 ], 0
  jz l2767

  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2702 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea rcx, [ methodName ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove

  lea  rcx, [ tmp2729 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ className ]
  lea  rdx , [ __literal260 ]
  lea  r8 , [ tmp2729 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ fullMethodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2729 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ fullMethodName ]
  call  __MOLD_VariantStringJoin

  mov dword [ tmp2766 ], 1

  mov eax, dword [ tmp2766 ]
  mov [ tmp2698 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2698 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal317 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp2698 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2698 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2702 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2702 + Variant_t.value], 0

  mov dword [ tmp2737 ], 41

  mov [ tmp2748 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2737 ]
  mov [ tmp2748 + Variant_t.value], rax

  lea  rcx, [ tmp2747 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2747 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2749 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2749 + Variant_t.value], 0

  lea  rcx, [ tmp2729 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal318 ]
  lea  rdx , [ fullMethodName ]
  lea  r8 , [ tmp2729 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp2729 ]
  lea  rax , [ tmp2750 ]
  call  AST_CreateNodeString

  lea  rcx, [ tmp2751 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2751 ]
  lea rdx, [ tmp2750 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2747 ]
  lea  rdx , [ tmp2749 ]
  lea  r8 , [ tmp2751 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ tmp2748 ]
  lea rdx , [ tmp2747 ]
  lea  rax , [ tmp2716 ]
  call  AST_CreateNodeSysCall

  lea  rcx, [ tmp2715 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2715 ]
  lea rdx, [ tmp2716 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ tmp2715 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ tmp2698 ]
  lea  rax , [ funcCode ]
  call  AST_CreateNodeBlock

l2767:

l2768:

  lea  rcx, [ tmp2698 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2698 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp2715 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2715 + Variant_t.value], 0

  lea  rcx, [ tmp2702 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2702 ]
  lea rdx, [ funcCode ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp2698 ]
  lea  rdx , [ tmp2715 ]
  lea  r8 , [ tmp2702 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2698 ]
  call  __MOLD_VariantStoreAtKey

l2759:

l2760:

l2744:

l2722:

l2707:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2698 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp2702 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2715 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2716 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2729 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2730 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2731 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2732 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2733 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2734 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsExpectedCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsPassedCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2747 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2748 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2749 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2750 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2751 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2752 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2753 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2754 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ selector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse15 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse16 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcRetVar ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcCode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParamNode
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ fullMethodName ]
  call __MOLD_VariantDestroy

  add  rsp, 784
  pop  rbp
  ret


  restore this
  restore node
  restore opcode
  restore children
  restore tmp2698
  restore tmp2699
  restore oneChild
  restore tmp2702
  restore tmp2703
  restore tmp2705
  restore tmp2710
  restore tmp2715
  restore tmp2716
  restore tmp2717
  restore tmp2720
  restore x
  restore y
  restore name
  restore typeId
  restore tmp2729
  restore tmp2730
  restore tmp2731
  restore tmp2732
  restore tmp2733
  restore tmp2734
  restore tmp2737
  restore tmp2740
  restore tmp2741
  restore funcName
  restore sysCallId
  restore paramsExpectedCnt
  restore paramsPassedCnt
  restore newChildren
  restore childrenCnt
  restore idx
  restore tmp2747
  restore tmp2748
  restore tmp2749
  restore tmp2750
  restore tmp2751
  restore tmp2752
  restore tmp2753
  restore tmp2754
  restore tmp2755
  restore box
  restore selector
  restore __cse15
  restore __cse16
  restore tmp2766
  restore funcParams
  restore funcRetVar
  restore funcCode
  restore oneParamNode
  restore className
  restore methodName
  restore fullMethodName

; -----------------------------------------------
; function __ASTPreprocessor_processNode$1
; -----------------------------------------------
__ASTPreprocessor_processNode$1_vcall:
__ASTPreprocessor_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTPreprocessor__processNode$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore node

; -----------------------------------------------
; function __ASTOptimizerConstantFolding_constructor$1
; -----------------------------------------------
__ASTOptimizerConstantFolding_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp2769 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp2769 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ app ]
  lea  rax , [ tmp2769 ]
  mov  r10d, 1
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6550
  movsxd rax, dword [ tmp2769 + Variant_t.value ]
  mov    qword [ tmp2769 + Variant_t.value ], rax
l6550:


  lea  rcx , [ this ]
  lea  rdx , [ __literal319 ]
  lea  r8 , [ tmp2769 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp2769 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore app
  restore tmp2769

; -----------------------------------------------
; function __ASTOptimizerConstantFolding__debug$1
; -----------------------------------------------
__ASTOptimizerConstantFolding__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp2770 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2771 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp2771 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp2771 ]
  jnz l2772

  lea rcx, [__fmt6 ]
  call __MOLD_PrintFormatFromMemory

l2772:

l2773:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp2770
  restore tmp2771

; -----------------------------------------------
; function __ASTOptimizerConstantFolding__setToImm$2
; -----------------------------------------------
__ASTOptimizerConstantFolding__setToImm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  dst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 4 , readHits= 12 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  type EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 9 )
  tmp2774 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp2775 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp2776 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2777 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2778 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2779 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2780 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2781 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2789 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp2790 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2791 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  newOpcode EQU rbp - 252 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 8 , readHits= 1 )
  tmp2782 EQU rbp - 256 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2783 EQU rbp - 260 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp2786 EQU rbp - 264 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2796 EQU rbp - 268 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2799 EQU rbp - 272 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2802 EQU rbp - 276 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2805 EQU rbp - 280 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2808 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [type + Variant_t.type], eax
  mov [tmp2774 + Variant_t.type], eax
  mov [tmp2775 + Variant_t.type], eax
  mov [tmp2776 + Variant_t.type], eax
  mov [tmp2777 + Variant_t.type], eax
  mov [tmp2778 + Variant_t.type], eax
  mov [tmp2779 + Variant_t.type], eax
  mov [tmp2780 + Variant_t.type], eax
  mov [tmp2781 + Variant_t.type], eax
  mov [tmp2789 + Variant_t.type], eax
  mov [tmp2790 + Variant_t.type], eax
  mov [tmp2791 + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 44 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ type ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea  rcx , [ dst ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2781 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2781 ]
  push rdi
  lea  rdi , [ tmp2774 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2780 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal321 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ tmp2780 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2779 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2780 ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp2779 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ tmp2774 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2778 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2779 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ tmp2778 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2777 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2778 ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp2777 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2776 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2777 ]
  lea  rdx , [ type ]
  lea  r8 , [ tmp2776 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2775 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2776 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2775 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2775 ]
  call  __ASTOptimizerConstantFolding__debug$1

  lea  rcx , [ dst ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2783 ], 52

  mov [ tmp2781 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2783 ]
  mov [ tmp2781 + Variant_t.value], rax

  lea rcx, [ tmp2774 ]
  lea rdx, [ tmp2781 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2784

  lea  rcx , [ dst ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2781 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2781  + Variant_t.type], 0
  jz l2787

  lea  rcx , [ dst ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ dst ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2791 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2791 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2790 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2783 ], 1

  mov [ tmp2791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2783 ]
  mov [ tmp2791 + Variant_t.value], rax

  lea  rcx , [ tmp2790 ]
  lea  rdx , [ tmp2791 ]
  lea  r8 , [ tmp2789 ]
  call  __MOLD_VariantSub

  lea  rcx , [ tmp2774 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2789 ]
  call  __MOLD_VariantStoreAtKey

l2787:

l2788:

l2784:

l2785:

  lea rcx, [ type ]
  lea rdx, [ __literal304 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2792

  mov dword [ newOpcode ], 5

  jmp l2793

l2792:

  lea rcx, [ type ]
  lea rdx, [ __literal302 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2794

  mov dword [ newOpcode ], 1

  jmp l2795

l2794:

  lea rcx, [ type ]
  lea rdx, [ __literal303 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2797

  mov dword [ newOpcode ], 3

  jmp l2798

l2797:

  lea rcx, [ type ]
  lea rdx, [ __literal160 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2800

  mov dword [ newOpcode ], 4

  jmp l2801

l2800:

  lea rcx, [ type ]
  lea rdx, [ __literal301 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2803

  mov dword [ newOpcode ], 8

  jmp l2804

l2803:

  lea rcx, [ type ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2806

  mov dword [ newOpcode ], 9

  jmp l2807

l2806:

  lea rcx, [ type ]
  lea rdx, [ __literal306 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2809

  mov dword [ newOpcode ], 10

  jmp l2810

l2809:

  mov dword [ newOpcode ], -1

  lea  rcx, [ tmp2775 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal324 ]
  lea  rdx , [ type ]
  lea  r8 , [ tmp2775 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp2775 ]
  call qword [rbx + 8 * 41 ]

l2810:

l2807:

l2804:

l2801:

l2798:

l2795:

l2793:

  lea  rcx, [ tmp2789 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2789 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ dst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2789 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp2789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newOpcode ]
  mov [ tmp2789 + Variant_t.value], rax

  lea  rcx , [ dst ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2789 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ dst ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2775 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2776 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2777 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2778 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2779 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2780 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2781 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2789 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2790 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2791 ]
  call __MOLD_VariantDestroy

  add  rsp, 320
  pop  rbp
  ret


  restore this
  restore dst
  restore value
  restore type
  restore newOpcode
  restore tmp2774
  restore tmp2775
  restore tmp2776
  restore tmp2777
  restore tmp2778
  restore tmp2779
  restore tmp2780
  restore tmp2781
  restore tmp2782
  restore tmp2783
  restore tmp2786
  restore tmp2789
  restore tmp2790
  restore tmp2791
  restore tmp2796
  restore tmp2799
  restore tmp2802
  restore tmp2805
  restore tmp2808

; -----------------------------------------------
; function __ASTOptimizerConstantFolding__processNodeArray$1
; -----------------------------------------------
__ASTOptimizerConstantFolding__processNodeArray$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 4 )
  valuesStatic EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp2811 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2815 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  oneChild EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 2 , readHits= 6 )
  isChildChanged EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  childValue EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  useStaticList EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  tmp2814 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2816 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2817 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [valuesStatic + Variant_t.type], eax
  mov [tmp2811 + Variant_t.type], eax
  mov [tmp2815 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [isChildChanged + Variant_t.type], eax
  mov [childValue + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ valuesStatic ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesStatic ]
  call  __MOLD_VariantArrayCreate

  mov dword [ useStaticList ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2811 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l2813

l2812:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  lea  rax , [ tmp2814 ]
  call  __ASTOptimizerConstantFolding_processNode$1

  mov eax, dword [ tmp2814 ]
  mov [ isChildChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isChildChanged + Variant_t.value], rax

  lea rcx , [ oneChild ]
  lea  rax , [ tmp2816 ]
  call  AST_IsImm

  mov dword [ tmp2817 ], 1

  mov eax, dword [ tmp2816 ]
  cmp eax, dword [ tmp2817 ]
  jnz l2818

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ childValue ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ useStaticList ], 1

  mov dword [ tmp2817 ], 1

  mov eax, dword [ tmp2817 ]
  mov [ tmp2815 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2815 + Variant_t.value], rax

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal325 ]
  lea  r8 , [ tmp2815 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2819

l2818:

  lea  rcx, [ childValue ]
  call __MOLD_VariantDestroy

l2819:

  ; __mold_syscall( 50 )
  lea rcx , [ valuesStatic ]
  lea rdx , [ childValue ]
  call qword [rbx + 8 * 50 ]

  ret

l2813:

  lea  rcx , [ tmp2811 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2812 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp2817 ], 1

  mov eax, dword [ useStaticList ]
  cmp eax, dword [ tmp2817 ]
  jnz l2820

  lea  rcx , [ node ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ valuesStatic ]
  call  __MOLD_VariantStoreAtKey

l2820:

l2821:


  ; clean frame
  ; -----------
  lea  rcx, [ valuesStatic ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2811 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2815 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ isChildChanged ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childValue ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore node
  restore valuesStatic
  restore useStaticList
  restore tmp2811
  restore tmp2814
  restore tmp2815
  restore tmp2816
  restore tmp2817
  restore oneChild
  restore isChildChanged
  restore childValue

; -----------------------------------------------
; function __ASTOptimizerConstantFolding__processNodeMap$1
; -----------------------------------------------
__ASTOptimizerConstantFolding__processNodeMap$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 3 )
  valuesStatic EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  childrenCnt EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp2830 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  nodeKey EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  nodeValue EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 5 )
  isKeyChanged EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  isValueChanged EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  childValue EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  useStaticList EQU rbp - 188 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  tmp2822 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2823 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2824 EQU rbp - 200 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2827 EQU rbp - 204 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2828 EQU rbp - 208 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2829 EQU rbp - 212 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp2831 EQU rbp - 216 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2832 EQU rbp - 220 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  idx EQU rbp - 224 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [valuesStatic + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [tmp2830 + Variant_t.type], eax
  mov [nodeKey + Variant_t.type], eax
  mov [nodeValue + Variant_t.type], eax
  mov [isKeyChanged + Variant_t.type], eax
  mov [isValueChanged + Variant_t.type], eax
  mov [childValue + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ valuesStatic ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesStatic ]
  call  __MOLD_VariantMapCreate

  mov dword [ useStaticList ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp2822 ], 2

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp2823 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp2824 .. tmp2823
; 
l2825:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp2823 ]
  jge l2826

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ nodeKey ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2828 ], 1

  mov eax, dword [ idx ]
  add eax, dword [ tmp2828 ]
  mov dword [ tmp2827 ], eax

  lea  rcx , [ children ]
  lea  rdx , [ tmp2827 ]
  lea  r8 , [ nodeValue ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ nodeKey ]
  lea  rax , [ tmp2829 ]
  call  __ASTOptimizerConstantFolding_processNode$1

  mov eax, dword [ tmp2829 ]
  mov [ isKeyChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isKeyChanged + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ nodeValue ]
  lea  rax , [ tmp2829 ]
  call  __ASTOptimizerConstantFolding_processNode$1

  mov eax, dword [ tmp2829 ]
  mov [ isValueChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isValueChanged + Variant_t.value], rax

  lea rcx , [ nodeKey ]
  lea  rax , [ tmp2831 ]
  call  AST_IsImm

  mov dword [ tmp2832 ], 0

  mov eax, dword [ tmp2831 ]
  cmp eax, dword [ tmp2832 ]
  jnz l2833

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal327
  lea rcx , [ __literal327 ]
  call qword [rbx + 8 * 41 ]

l2833:

l2834:

  lea rcx , [ nodeValue ]
  lea  rax , [ tmp2832 ]
  call  AST_IsImm

  mov dword [ tmp2831 ], 1

  mov eax, dword [ tmp2832 ]
  cmp eax, dword [ tmp2831 ]
  jnz l2835

  lea  rcx , [ nodeValue ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ childValue ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ useStaticList ], 1

  mov dword [ tmp2831 ], 1

  mov eax, dword [ tmp2831 ]
  mov [ tmp2830 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2830 + Variant_t.value], rax

  lea  rcx , [ nodeValue ]
  lea  rdx , [ __literal325 ]
  lea  r8 , [ tmp2830 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2836

l2835:

  lea  rcx, [ childValue ]
  call __MOLD_VariantDestroy

l2836:

  lea  rcx , [ nodeKey ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2830 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ valuesStatic ]
  lea  rdx , [ tmp2830 ]
  lea  r8 , [ childValue ]
  call  __MOLD_VariantStoreAtKey

  mov eax, dword [ idx ]
  add eax, dword [ tmp2822 ]
  mov dword [ idx ], eax

  jmp l2825

l2826:

; 
; END: for idx in tmp2824 .. tmp2823 step tmp2822
; -----------------------------
; 
  mov dword [ tmp2831 ], 1

  mov eax, dword [ useStaticList ]
  cmp eax, dword [ tmp2831 ]
  jnz l2837

  lea  rcx , [ node ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ valuesStatic ]
  call  __MOLD_VariantStoreAtKey

l2837:

l2838:


  ; clean frame
  ; -----------
  lea  rcx, [ valuesStatic ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2830 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isKeyChanged ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isValueChanged ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childValue ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret


  restore this
  restore node
  restore valuesStatic
  restore useStaticList
  restore children
  restore childrenCnt
  restore tmp2822
  restore tmp2823
  restore tmp2824
  restore tmp2827
  restore tmp2828
  restore tmp2829
  restore tmp2830
  restore tmp2831
  restore tmp2832
  restore idx
  restore nodeKey
  restore nodeValue
  restore isKeyChanged
  restore isValueChanged
  restore childValue

; -----------------------------------------------
; function __ASTOptimizerConstantFolding_processNode$1
; -----------------------------------------------
__ASTOptimizerConstantFolding_processNode$1_vcall:
  mov  [rax + Variant_t.type], VARIANT_BOOLEAN
  mov  [rax + Variant_t.value], 0
  add  rax, Variant_t.value

__ASTOptimizerConstantFolding_processNode$1:

  ; init frame
  ; ----------
  isNodeChanged EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 12 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 4 , readHits= 49 )
  value EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 12 )
  newValue EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 32 , readHits= 5 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 11 )
  x EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 54 )
  y EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 42 )
  tmp2839 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 64 , readHits= 64 )
  tmp2854 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  tmp2867 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 21 , readHits= 21 )
  tmp2906 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 45 , readHits= 45 )
  tmp2907 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp2908 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp2909 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp2910 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp2911 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp2921 EQU rbp - 280 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp2922 EQU rbp - 296 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  isChildChanged EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  tmp EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  __cse17 EQU rbp - 344 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  __cse18 EQU rbp - 360 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  symbolInfo EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 10 )
  __cse19 EQU rbp - 392 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  newParams EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 9 )
  oneChild EQU rbp - 424 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 17 )
  __cse20 EQU rbp - 440 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  xValue EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 460 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 34 )
  childrenCnt EQU rbp - 464 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  areArgsImm EQU rbp - 468 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  tmp2840 EQU rbp - 472 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 71 , readHits= 71 )
  tmp2841 EQU rbp - 476 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2843 EQU rbp - 480 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2848 EQU rbp - 484 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2851 EQU rbp - 488 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp2853 EQU rbp - 492 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp2859 EQU rbp - 496 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp2868 EQU rbp - 500 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp2872 EQU rbp - 504 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 17 , readHits= 17 )
  tmp2874 EQU rbp - 508 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 17 , readHits= 17 )
  tmp2875 EQU rbp - 512 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 15 , readHits= 15 )
  tmp2876 EQU rbp - 516 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 19 , readHits= 19 )
  tmp2918 EQU rbp - 520 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp2927 EQU rbp - 524 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2928 EQU rbp - 528 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2950 EQU rbp - 532 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp2971 EQU rbp - 536 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2974 EQU rbp - 540 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp2977 EQU rbp - 544 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2980 EQU rbp - 548 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2983 EQU rbp - 552 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp2986 EQU rbp - 556 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2991 EQU rbp - 560 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp2996 EQU rbp - 564 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3001 EQU rbp - 568 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3005 EQU rbp - 572 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp3006 EQU rbp - 576 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp3012 EQU rbp - 580 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  startIdx EQU rbp - 584 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  idx EQU rbp - 588 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  lastWasImm EQU rbp - 592 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 1 )
  sysCallId EQU rbp - 596 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 9 )
  astType EQU rbp - 600 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 640

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [value + Variant_t.type], eax
  mov [newValue + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [tmp2839 + Variant_t.type], eax
  mov [tmp2854 + Variant_t.type], eax
  mov [tmp2867 + Variant_t.type], eax
  mov [tmp2906 + Variant_t.type], eax
  mov [tmp2907 + Variant_t.type], eax
  mov [tmp2908 + Variant_t.type], eax
  mov [tmp2909 + Variant_t.type], eax
  mov [tmp2910 + Variant_t.type], eax
  mov [tmp2911 + Variant_t.type], eax
  mov [tmp2921 + Variant_t.type], eax
  mov [tmp2922 + Variant_t.type], eax
  mov [isChildChanged + Variant_t.type], eax
  mov [tmp + Variant_t.type], eax
  mov [__cse17 + Variant_t.type], eax
  mov [__cse18 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax
  mov [__cse19 + Variant_t.type], eax
  mov [newParams + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [__cse20 + Variant_t.type], eax
  mov [xValue + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ isNodeChanged ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ childrenCnt ], eax

  mov dword [ tmp2840 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp2840 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ areArgsImm ], 1

  mov dword [ tmp2841 ], 1

  mov dword [ tmp2840 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2842

  lea  rcx , [ value ]
  lea  rdx , [ __literal17 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2841 ], eax

l2842:

  cmp dword [ tmp2841 ], 0
  jz l2844

  mov dword [ tmp2840 ], 9

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2846

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTOptimizerConstantFolding__processNodeArray$1

  jmp l2847

l2846:

  mov dword [ tmp2840 ], 10

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2849

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTOptimizerConstantFolding__processNodeMap$1

  jmp l2850

l2849:

  mov dword [ startIdx ], 0

  mov dword [ tmp2851 ], 0

  mov dword [ tmp2840 ], 56

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2852

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 52

  mov [ tmp2854 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2854 + Variant_t.value], rax

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2854 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2851 ], eax

l2852:

  cmp dword [ tmp2851 ], 0
  jz l2855

  mov dword [ startIdx ], 1

l2855:

l2856:

  mov dword [ tmp2840 ], 1

  mov eax, dword [ startIdx ]
  mov dword [ idx ], eax

; 
; -----------------------------
; BEGIN: for idx in startIdx .. childrenCnt
; 
l2857:

  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l2858

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2854 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp2854 ]
  lea  rax , [ tmp2851 ]
  call  __ASTOptimizerConstantFolding_processNodeUntilNotChanged$1

  mov eax, dword [ tmp2851 ]
  mov [ isChildChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isChildChanged + Variant_t.value], rax

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2854 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp2854 ]
  lea  rax , [ tmp2853 ]
  call  AST_IsImm

  mov dword [ tmp2859 ], 0

  mov eax, dword [ tmp2853 ]
  cmp eax, dword [ tmp2859 ]
  jnz l2860

  mov dword [ areArgsImm ], 0

l2860:

l2861:

  mov eax, dword [ idx ]
  add eax, dword [ tmp2840 ]
  mov dword [ idx ], eax

  jmp l2857

l2858:

; 
; END: for idx in startIdx .. childrenCnt step tmp2840
; -----------------------------
; 
  mov dword [ tmp2851 ], 1

  mov dword [ tmp2840 ], 60

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jz l2862

  mov dword [ tmp2840 ], 58

  mov dword [ tmp2851 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2840 ]
  setz byte [ tmp2851 ]

l2862:

  cmp dword [ tmp2851 ], 0
  jz l2863

  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2854 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2839 + Variant_t.value], rax

  lea rcx, [ tmp2854 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2865

  lea  rcx , [ y ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 1

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ y ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2868 ], 0

  lea  rcx , [ tmp2867 ]
  lea  rdx , [ tmp2868 ]
  lea  r8 , [ tmp2854 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2854 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2854 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 0

  lea  rcx , [ tmp2854 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ isNodeChanged ], 1

l2865:

l2866:

  jmp l2864

l2863:

  mov dword [ tmp2840 ], 52

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2869

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ __cse17 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2853 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2854 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2854  + Variant_t.type], 0
  jz l2871

  mov dword [ tmp2872 ], 0

  ; __mold_syscall( 44 )
  lea rcx , [ __cse17 ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ tmp2839 ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2873

  lea rcx , [ __cse17 ]
  lea  rax , [ tmp2875 ]
  call  AST_IsImm

  mov dword [ tmp2876 ], 1

  mov dword [ tmp2872 ], 0
  mov ecx, dword [ tmp2875 ]
  cmp ecx, dword [ tmp2876 ]
  setz byte [ tmp2872 ]

l2873:

  mov eax, dword [ tmp2872 ]
  mov dword [ tmp2853 ], eax

l2871:

  cmp dword [ tmp2853 ], 0
  jz l2877

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 44 )
  lea rcx , [ tmp2867 ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ tmp2839 ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2879

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2867 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse18 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2874 ], 0

  ; __mold_syscall( 44 )
  lea rcx , [ __cse18 ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ tmp2839 ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2881

  ; __mold_syscall( 44 )
  lea rcx , [ __cse18 ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal306 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2874 ], eax

l2881:

  cmp dword [ tmp2874 ], 0
  jz l2882

  lea  rcx , [ this ]
  lea  rdx , [ __literal319 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2867 ]
  lea rdx , [ value ]
  lea  rax , [ tmp2839 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6551
  movsxd rax, dword [ tmp2839 + Variant_t.value ]
  mov    qword [ tmp2839 + Variant_t.value ], rax
l6551:


  mov dword [ tmp2875 ], 0

  mov eax, dword [ tmp2875 ]
  mov [ tmp2867 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2867 + Variant_t.value], rax

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2867 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2884

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2867 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey

l2884:

l2885:

l2882:

l2883:

l2879:

l2880:

l2877:

l2878:

  mov dword [ tmp2853 ], 0

  cmp [ newValue + Variant_t.type ], 0
  jnz l2886

  lea  rcx , [ this ]
  lea  rdx , [ __literal319 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2839 ]
  lea rdx , [ value ]
  lea  rax , [ tmp2867 ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6552
  movsxd rax, dword [ tmp2867 + Variant_t.value ]
  mov    qword [ tmp2867 + Variant_t.value ], rax
l6552:


  mov dword [ tmp2874 ], 1

  mov eax, dword [ tmp2874 ]
  mov [ tmp2839 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2839 + Variant_t.value], rax

  lea  rcx , [ tmp2867 ]
  lea  rdx , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2853 ], eax

l2886:

  cmp dword [ tmp2853 ], 0
  jz l2887

  lea  rcx , [ this ]
  lea  rdx , [ __literal319 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp2839 ]
  lea rdx , [ value ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6553
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6553:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 1

  mov [ tmp2867 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2867 + Variant_t.value], rax

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2867 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2889

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse19 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2874 ], 1

  ; __mold_syscall( 44 )
  lea rcx , [ __cse19 ]
  push rdi
  lea  rdi , [ tmp2867 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ tmp2867 ]
  lea rdx, [ __literal302 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2891

  mov dword [ tmp2876 ], 1

  ; __mold_syscall( 44 )
  lea rcx , [ __cse19 ]
  push rdi
  lea  rdi , [ tmp2867 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ tmp2867 ]
  lea rdx, [ __literal303 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2892

  ; __mold_syscall( 44 )
  lea rcx , [ __cse19 ]
  push rdi
  lea  rdi , [ tmp2867 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea  rcx , [ tmp2867 ]
  lea  rdx , [ __literal304 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2876 ], eax

l2892:

  mov eax, dword [ tmp2876 ]
  mov dword [ tmp2874 ], eax

l2891:

  cmp dword [ tmp2874 ], 0
  jz l2893

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey

l2893:

l2894:

l2889:

l2890:

l2887:

l2888:

  jmp l2870

l2869:

  mov dword [ tmp2853 ], 0

  mov dword [ tmp2840 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2895

  lea  rcx , [ value ]
  lea  rdx , [ __literal16 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2853 ], eax

l2895:

  cmp dword [ tmp2853 ], 0
  jz l2896

  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  call  __MOLD_VariantArrayCreate

  mov dword [ lastWasImm ], 0

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l2899

l2898:

  mov dword [ tmp2872 ], 1

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 30

  mov [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2839 + Variant_t.value], rax

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2867 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2900

  mov dword [ tmp2874 ], 1

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 9

  mov [ tmp2867 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2867 + Variant_t.value], rax

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2867 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2901

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 10

  mov [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2839 + Variant_t.value], rax

  lea  rcx , [ tmp2867 ]
  lea  rdx , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2874 ], eax

l2901:

  mov eax, dword [ tmp2874 ]
  mov dword [ tmp2872 ], eax

l2900:

  cmp dword [ tmp2872 ], 0
  jz l2902

  mov dword [ lastWasImm ], 0

  ; __mold_syscall( 50 )
  lea rcx , [ newParams ]
  lea rdx , [ oneChild ]
  call qword [rbx + 8 * 50 ]

  jmp l2903

l2902:

  mov dword [ tmp2876 ], 1

  mov eax, dword [ lastWasImm ]
  cmp eax, dword [ tmp2876 ]
  jnz l2904

  ; __mold_syscall( 43 )
  lea rcx , [ newParams ]
  push rdi
  lea  rdi , [ tmp2906 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp2840 ], 1

  mov [ tmp2907 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2907 + Variant_t.value], rax

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2907 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantSub

  cmp [ tmp2867 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2867 + Variant_t.value]
  mov dword [ tmp2840 ], eax

  lea  rcx , [ newParams ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 43 )
  lea rcx , [ newParams ]
  push rdi
  lea  rdi , [ tmp2910 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp2840 ], 1

  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2911 + Variant_t.value], rax

  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2911 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantSub

  cmp [ tmp2906 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2906 + Variant_t.value]
  mov dword [ tmp2840 ], eax

  lea  rcx , [ newParams ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2907 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp2907 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp2909 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2867 ]
  lea  rdx , [ __literal328 ]
  lea  r8 , [ tmp2909 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2907 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2907 ]
  push rdi
  lea  rdi , [ tmp2867 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2908 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2909 ]
  lea  rdx , [ tmp2867 ]
  lea  r8 , [ tmp2908 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2908 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2905

l2904:

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 4

  mov [ tmp2867 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2867 + Variant_t.value], rax

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2867 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2912

  ; __mold_syscall( 50 )
  lea rcx , [ newParams ]
  lea rdx , [ oneChild ]
  call qword [rbx + 8 * 50 ]

  jmp l2913

l2912:

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2839 ]
  push rdi
  lea  rdi , [ tmp2867 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  lea r8 , [ tmp2867 ]
  call  __ASTOptimizerConstantFolding__setToImm$2

  ; __mold_syscall( 50 )
  lea rcx , [ newParams ]
  lea rdx , [ oneChild ]
  call qword [rbx + 8 * 50 ]

l2913:

l2905:

  mov dword [ lastWasImm ], 1

l2903:

  ret

l2899:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2898 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newParams ]
  call  __MOLD_VariantStoreAtKey

  jmp l2897

l2896:

  mov dword [ tmp2872 ], 0

  mov dword [ tmp2840 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2914

  mov dword [ tmp2874 ], 0

  lea rcx, [ value ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2915

  mov dword [ tmp2876 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp2867 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2867  + Variant_t.type], 0
  jz l2916

  mov dword [ tmp2875 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp2907 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2907 ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 1

  mov [ tmp2907 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2907 + Variant_t.value], rax

  lea rcx, [ tmp2907 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2917

  lea  rcx , [ node ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2907 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp2907  + Variant_t.type], 2
  setz al
  mov dword [ tmp2875 ], eax

l2917:

  mov eax, dword [ tmp2875 ]
  mov dword [ tmp2876 ], eax

l2916:

  mov eax, dword [ tmp2876 ]
  mov dword [ tmp2874 ], eax

l2915:

  mov eax, dword [ tmp2874 ]
  mov dword [ tmp2872 ], eax

l2914:

  cmp dword [ tmp2872 ], 0
  jz l2919

  lea  rcx , [ node ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse20 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp2906 ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2922 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal329 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ tmp2922 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2921 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2922 ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp2921 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ __cse20 ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp2909 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2921 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ tmp2909 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp2908 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2909 ]
  lea  rdx , [ __literal330 ]
  lea  r8 , [ tmp2908 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp2908 ]
  call  __ASTOptimizerConstantFolding__debug$1

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ __cse20 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 1

  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2910 + Variant_t.value], rax

  lea  rcx , [ tmp2911 ]
  lea  rdx , [ tmp2910 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantSub

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantStoreAtKey

  jmp l2920

l2919:

  mov dword [ tmp2874 ], 0

  mov dword [ tmp2876 ], 1

  mov dword [ tmp2840 ], 54

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jz l2924

  mov dword [ tmp2840 ], 55

  mov dword [ tmp2876 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2840 ]
  setz byte [ tmp2876 ]

l2924:

  cmp dword [ tmp2876 ], 0
  jz l2923

  mov dword [ tmp2876 ], 0

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 52

  mov [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2839 + Variant_t.value], rax

  lea rcx, [ tmp2906 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2925

  mov dword [ tmp2875 ], 0

  lea  rcx , [ x ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 5

  mov [ tmp2906 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2906 + Variant_t.value], rax

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2906 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2926

  lea rcx , [ y ]
  lea  rax , [ tmp2927 ]
  call  AST_IsImm

  mov dword [ tmp2928 ], 1

  mov dword [ tmp2875 ], 0
  mov ecx, dword [ tmp2927 ]
  cmp ecx, dword [ tmp2928 ]
  setz byte [ tmp2875 ]

l2926:

  mov eax, dword [ tmp2875 ]
  mov dword [ tmp2876 ], eax

l2925:

  mov eax, dword [ tmp2876 ]
  mov dword [ tmp2874 ], eax

l2923:

  cmp dword [ tmp2874 ], 0
  jz l2929

  mov dword [ tmp2840 ], 54

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2931

  lea  rcx , [ x ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2840 ], eax

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l2932

l2931:

  lea  rcx , [ x ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey

l2932:

  mov dword [ tmp2876 ], 0

  ; __mold_syscall( 44 )
  lea rcx , [ newValue ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ tmp2839 ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l2933

  ; __mold_syscall( 44 )
  lea rcx , [ newValue ]
  push rdi
  lea  rdi , [ tmp2839 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal306 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2876 ], eax

l2933:

  cmp dword [ tmp2876 ], 0
  jz l2934

  lea  rcx , [ x ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ x ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2911 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 1

  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2911 + Variant_t.value], rax

  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2911 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantSub

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantStoreAtKey

l2934:

l2935:

l2929:

l2930:

l2920:

l2897:

l2870:

l2864:

  mov dword [ tmp2859 ], 1

  mov eax, dword [ areArgsImm ]
  cmp eax, dword [ tmp2859 ]
  jnz l2936

  mov dword [ tmp2840 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2938

  mov dword [ tmp2853 ], 0

  lea rcx, [ value ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l2940

  mov dword [ tmp2840 ], 1

  mov dword [ tmp2853 ], 0
  mov ecx, dword [ childrenCnt ]
  cmp ecx, dword [ tmp2840 ]
  setz byte [ tmp2853 ]

l2940:

  cmp dword [ tmp2853 ], 0
  jz l2941

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2906 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2906 + Variant_t.value]
  mov dword [ sysCallId ], eax

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ xValue ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2872 ], 1

  mov dword [ tmp2840 ], 31

  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2840 ]
  jz l2943

  mov dword [ tmp2874 ], 1

  mov dword [ tmp2840 ], 32

  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2840 ]
  jz l2944

  mov dword [ tmp2876 ], 1

  mov dword [ tmp2840 ], 33

  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2840 ]
  jz l2945

  mov dword [ tmp2875 ], 1

  mov dword [ tmp2840 ], 34

  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2840 ]
  jz l2946

  mov dword [ tmp2918 ], 1

  mov dword [ tmp2840 ], 42

  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2840 ]
  jz l2947

  mov dword [ tmp2928 ], 1

  mov dword [ tmp2840 ], 43

  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2840 ]
  jz l2948

  mov dword [ tmp2927 ], 1

  mov dword [ tmp2840 ], 44

  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2840 ]
  jz l2949

  mov dword [ tmp2840 ], 57

  mov dword [ tmp2927 ], 0
  mov ecx, dword [ sysCallId ]
  cmp ecx, dword [ tmp2840 ]
  setz byte [ tmp2927 ]

l2949:

  mov eax, dword [ tmp2927 ]
  mov dword [ tmp2928 ], eax

l2948:

  mov eax, dword [ tmp2928 ]
  mov dword [ tmp2918 ], eax

l2947:

  mov eax, dword [ tmp2918 ]
  mov dword [ tmp2875 ], eax

l2946:

  mov eax, dword [ tmp2875 ]
  mov dword [ tmp2876 ], eax

l2945:

  mov eax, dword [ tmp2876 ]
  mov dword [ tmp2874 ], eax

l2944:

  mov eax, dword [ tmp2874 ]
  mov dword [ tmp2872 ], eax

l2943:

  cmp dword [ tmp2872 ], 0
  jz l2951

  ; __mold_syscall( sysCallId )
  lea rcx , [ xValue ]
  push rdi
  lea  rdi , [ newValue ]
  mov eax, dword [ sysCallId ]
  call qword [rbx]
  pop rdi

l2951:

l2952:

l2941:

l2942:

  jmp l2939

l2938:

  mov dword [ tmp2840 ], 75

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2953

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 57 )
  lea rcx , [ tmp2839 ]
  push rdi
  lea  rdi , [ tmp2906 ]
  call qword [rbx + 8 * 57 ]
  pop rdi

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ value ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2872 ], eax

  mov eax, dword [ tmp2872 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l2954

l2953:

  mov dword [ tmp2840 ], 76

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2955

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 57 )
  lea rcx , [ tmp2839 ]
  push rdi
  lea  rdi , [ tmp2906 ]
  call qword [rbx + 8 * 57 ]
  pop rdi

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ value ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2874 ], eax

  mov eax, dword [ tmp2874 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l2956

l2955:

  mov dword [ tmp2840 ], 57

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2957

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ newValue ]
  call  __MOLD_VariantNeg

  jmp l2958

l2957:

  mov dword [ tmp2840 ], 2

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp2840 ]
  jnz l2959

  mov dword [ tmp2840 ], 58

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2961

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantAdd

  jmp l2962

l2961:

  mov dword [ tmp2840 ], 65

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2963

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2906 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin

  jmp l2964

l2963:

  mov dword [ tmp2840 ], 59

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2965

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantSub

  jmp l2966

l2965:

  mov dword [ tmp2840 ], 60

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2967

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2906 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantMul

  jmp l2968

l2967:

  mov dword [ tmp2840 ], 61

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2969

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantDiv

  jmp l2970

l2969:

  mov dword [ tmp2840 ], 64

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2972

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2906 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantDivAsInteger

  jmp l2973

l2972:

  mov dword [ tmp2840 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2975

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2977 ], eax

  mov eax, dword [ tmp2977 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l2976

l2975:

  mov dword [ tmp2840 ], 67

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2978

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2906 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp2980 ], eax

  mov eax, dword [ tmp2980 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l2979

l2978:

  mov dword [ tmp2840 ], 70

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2981

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2906 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2984

  mov dword [ tmp2986 ], 1

  mov eax, dword [ tmp2986 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l2985

l2984:

  mov dword [ tmp2986 ], 0

  mov eax, dword [ tmp2986 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

l2985:

  jmp l2982

l2981:

  mov dword [ tmp2840 ], 71

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2987

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp2906 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2989

  mov dword [ tmp2991 ], 1

  mov eax, dword [ tmp2991 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l2990

l2989:

  mov dword [ tmp2991 ], 0

  mov eax, dword [ tmp2991 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

l2990:

  jmp l2988

l2987:

  mov dword [ tmp2840 ], 68

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2992

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp2906 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l2994

  mov dword [ tmp2996 ], 1

  mov eax, dword [ tmp2996 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l2995

l2994:

  mov dword [ tmp2996 ], 0

  mov eax, dword [ tmp2996 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

l2995:

  jmp l2993

l2992:

  mov dword [ tmp2840 ], 69

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l2997

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp2839 ]
  lea rdx, [ tmp2906 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l2999

  mov dword [ tmp3001 ], 1

  mov eax, dword [ tmp3001 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l3000

l2999:

  mov dword [ tmp3001 ], 0

  mov eax, dword [ tmp3001 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

l3000:

  jmp l2998

l2997:

  mov dword [ tmp2840 ], 72

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l3002

  mov dword [ tmp3001 ], 0

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3006 ], 1

  mov eax, dword [ tmp3006 ]
  mov [ tmp2839 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2839 + Variant_t.value], rax

  lea rcx, [ tmp2906 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3004

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3006 ], 1

  mov eax, dword [ tmp3006 ]
  mov [ tmp2906 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2906 + Variant_t.value], rax

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2906 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3001 ], eax

l3004:

  cmp dword [ tmp3001 ], 0
  jz l3007

  mov dword [ tmp3005 ], 1

  mov eax, dword [ tmp3005 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l3008

l3007:

  mov dword [ tmp3005 ], 0

  mov eax, dword [ tmp3005 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

l3008:

  jmp l3003

l3002:

  mov dword [ tmp2840 ], 73

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l3009

  mov dword [ tmp3005 ], 1

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3012 ], 1

  mov eax, dword [ tmp3012 ]
  mov [ tmp2839 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2839 + Variant_t.value], rax

  lea rcx, [ tmp2906 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3011

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3012 ], 1

  mov eax, dword [ tmp3012 ]
  mov [ tmp2906 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2906 + Variant_t.value], rax

  lea  rcx , [ tmp2839 ]
  lea  rdx , [ tmp2906 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3005 ], eax

l3011:

  cmp dword [ tmp3005 ], 0
  jz l3013

  mov dword [ tmp3006 ], 1

  mov eax, dword [ tmp3006 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

  jmp l3014

l3013:

  mov dword [ tmp3006 ], 0

  mov eax, dword [ tmp3006 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax

l3014:

  jmp l3010

l3009:

  mov dword [ tmp2840 ], 54

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l3015

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2840 ], eax

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l3016

l3015:

  mov dword [ tmp2840 ], 55

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l3017

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey

l3017:

l3018:

l3016:

l3010:

l3003:

l2998:

l2993:

l2988:

l2982:

l2979:

l2976:

l2973:

l2970:

l2968:

l2966:

l2964:

l2962:

l2959:

l2960:

l2958:

l2956:

l2954:

l2939:

  jmp l2937

l2936:

  mov dword [ tmp2859 ], 0

  mov dword [ tmp2840 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2840 ]
  jnz l3019

  mov dword [ tmp2853 ], 0

  lea rcx, [ value ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3020

  mov dword [ tmp2872 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp2839 + Variant_t.type ], 2
  jnz l3021

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2906 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp2840 ], 44

  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2840 ]
  mov [ tmp2911 + Variant_t.value], rax

  lea  rcx , [ tmp2906 ]
  lea  rdx , [ tmp2911 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp2872 ], eax

l3021:

  mov eax, dword [ tmp2872 ]
  mov dword [ tmp2853 ], eax

l3020:

  mov eax, dword [ tmp2853 ]
  mov dword [ tmp2859 ], eax

l3019:

  cmp dword [ tmp2859 ], 0
  jz l3022

  lea rcx , [ x ]
  lea  rax , [ astType ]
  call  AST_GetDataType

  mov dword [ tmp2840 ], -1

  mov eax, dword [ astType ]
  cmp eax, dword [ tmp2840 ]
  jz l3024

  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType ]
  mov [ tmp2911 + Variant_t.value], rax

  lea rcx , [ tmp2911 ]
  lea  rax , [ newValue ]
  call  AST_ConvertDataTypeToText

l3024:

l3025:

l3022:

l3023:

l2937:

  cmp [ newValue  + Variant_t.type], 0
  jz l3026

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea r8 , [ newValue ]
  call  __ASTOptimizerConstantFolding__setToImm$2

  mov dword [ isNodeChanged ], 1

  jmp l3027

l3026:

  mov dword [ isNodeChanged ], 0

l3027:

l2850:

l2847:

l2844:

l2845:


  ; clean frame
  ; -----------
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2854 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2867 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2906 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2907 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2908 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2909 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2921 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2922 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isChildChanged ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse17 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse18 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse19 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ __cse20 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xValue ]
  call __MOLD_VariantDestroy

  add  rsp, 640
  pop  rdi
  pop  rbp
  ret


  restore this
  restore node
  restore isNodeChanged
  restore opcode
  restore value
  restore newValue
  restore children
  restore childrenCnt
  restore x
  restore y
  restore areArgsImm
  restore tmp2839
  restore tmp2840
  restore tmp2841
  restore tmp2843
  restore tmp2848
  restore tmp2851
  restore tmp2853
  restore tmp2854
  restore tmp2859
  restore tmp2867
  restore tmp2868
  restore tmp2872
  restore tmp2874
  restore tmp2875
  restore tmp2876
  restore tmp2906
  restore tmp2907
  restore tmp2908
  restore tmp2909
  restore tmp2910
  restore tmp2911
  restore tmp2918
  restore tmp2921
  restore tmp2922
  restore tmp2927
  restore tmp2928
  restore tmp2950
  restore tmp2971
  restore tmp2974
  restore tmp2977
  restore tmp2980
  restore tmp2983
  restore tmp2986
  restore tmp2991
  restore tmp2996
  restore tmp3001
  restore tmp3005
  restore tmp3006
  restore tmp3012
  restore startIdx
  restore idx
  restore isChildChanged
  restore tmp
  restore __cse17
  restore __cse18
  restore symbolInfo
  restore __cse19
  restore newParams
  restore lastWasImm
  restore oneChild
  restore __cse20
  restore sysCallId
  restore xValue
  restore astType

; -----------------------------------------------
; function __ASTOptimizerConstantFolding_processNodeUntilNotChanged$1
; -----------------------------------------------
__ASTOptimizerConstantFolding_processNodeUntilNotChanged$1:

  ; init frame
  ; ----------
  isAnyChangedDone EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3030 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3031 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3032 EQU rbp - 52 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  mov dword [ isAnyChangedDone ], 0

; 
; -----------------------------
; BEGIN: while
; 
l3028:

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea  rax , [ tmp3031 ]
  call  __ASTOptimizerConstantFolding_processNode$1

  mov dword [ tmp3032 ], 1

  mov eax, dword [ tmp3031 ]
  cmp eax, dword [ tmp3032 ]
  jnz l3029

  mov dword [ isAnyChangedDone ], 1

  jmp l3028

l3029:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore node
  restore isAnyChangedDone
  restore tmp3030
  restore tmp3031
  restore tmp3032

; -----------------------------------------------
; function __ASTOptimizerCSE_constructor$1
; -----------------------------------------------
__ASTOptimizerCSE_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3034 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3033 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp3034 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3033 ], 0

  mov [ tmp3034 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3033 ]
  mov [ tmp3034 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal331 ]
  lea  r8 , [ tmp3034 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3034 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore app
  restore tmp3033
  restore tmp3034

; -----------------------------------------------
; function __ASTOptimizerCSE__getNextId$0
; -----------------------------------------------
__ASTOptimizerCSE__getNextId$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  tmp3035 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3036 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3037 EQU rbp - 48 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3035 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal331 ]
  lea  r8 , [ tmp3035 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3035 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3035 + Variant_t.value]
  mov dword [ rv ], eax

  mov dword [ tmp3037 ], 1

  mov eax, dword [ rv ]
  add eax, dword [ tmp3037 ]
  mov dword [ tmp3036 ], eax

  mov [ tmp3035 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3036 ]
  mov [ tmp3035 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal331 ]
  lea  r8 , [ tmp3035 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3035 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp3035
  restore tmp3036
  restore tmp3037

; -----------------------------------------------
; function __ASTOptimizerCSE__createNodeVariable$0
; -----------------------------------------------
__ASTOptimizerCSE__createNodeVariable$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3038 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3039 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3041 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3040 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3038 + Variant_t.type], eax
  mov [tmp3039 + Variant_t.type], eax
  mov [tmp3041 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ tmp3040 ]
  call  __ASTOptimizerCSE__getNextId$0

  mov [ tmp3041 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3040 ]
  mov [ tmp3041 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3041 ]
  push rdi
  lea  rdi , [ tmp3039 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3038 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal332 ]
  lea  rdx , [ tmp3039 ]
  lea  r8 , [ tmp3038 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp3038 ]
  lea  rax , [ rv ]
  call  AST_CreateNodeVariable


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3038 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3039 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp3038
  restore tmp3039
  restore tmp3040
  restore tmp3041

; -----------------------------------------------
; function __ASTOptimizerCSE__debug$1
; -----------------------------------------------
__ASTOptimizerCSE__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3042 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3043 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp3043 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp3043 ]
  jnz l3044

  lea rcx, [__fmt7 ]
  call __MOLD_PrintFormatFromMemory

l3044:

l3045:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp3042
  restore tmp3043

; -----------------------------------------------
; function __ASTOptimizerCSE__processInnerNode$3
; -----------------------------------------------
__ASTOptimizerCSE__processInnerNode$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  mapOfExpressions EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolTable EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  unused EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mapOfExpressions ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ symbolTable ], xmm0
  xor eax, eax
  mov [unused + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  lea  rax , [ unused ]
  call  __ASTOptimizerCSE__processNode$3


  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable
  restore unused

; -----------------------------------------------
; function __ASTOptimizerCSE__processNode$3
; -----------------------------------------------
__ASTOptimizerCSE__processNode$3:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 10 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 36 )
  mapOfExpressions EQU rbp - 56 ; 16 bytes, (kind= 3 , type= variant , writeHits= 5 , readHits= 9 )
  symbolTable EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 7 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 19 )
  tmp3047 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3050 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 31 , readHits= 31 )
  oneChild EQU rbp - 136 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 2 , readHits= 2 )
  tmp3057 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp3066 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp3067 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp3068 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp3069 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  lval EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 9 )
  rval EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  newRval EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  childNode EQU rbp - 280 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 4 )
  newNode EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp3104 EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 19 , readHits= 19 )
  tmp3108 EQU rbp - 328 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3109 EQU rbp - 344 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3118 EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3119 EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3141 EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3142 EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3143 EQU rbp - 424 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  matchedNode EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 32 )
  block1 EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 10 )
  block2 EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 8 )
  lastInstructionNode1 EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 1 )
  lastInstructionNode2 EQU rbp - 504 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 1 )
  commonBlock EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 8 )
  newCommonBlockChildren EQU rbp - 536 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  __cse21 EQU rbp - 552 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  opcode EQU rbp - 556 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 10 )
  goOn EQU rbp - 560 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  tmp3046 EQU rbp - 564 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3051 EQU rbp - 568 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 32 , readHits= 32 )
  tmp3056 EQU rbp - 572 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3061 EQU rbp - 576 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp3063 EQU rbp - 580 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3082 EQU rbp - 584 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3088 EQU rbp - 588 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  childIdx EQU rbp - 592 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp3096 EQU rbp - 596 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp3105 EQU rbp - 600 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3110 EQU rbp - 604 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3113 EQU rbp - 608 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3115 EQU rbp - 612 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp3117 EQU rbp - 616 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3128 EQU rbp - 620 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3131 EQU rbp - 624 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3134 EQU rbp - 628 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3138 EQU rbp - 632 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  isCseEmited EQU rbp - 636 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  deep1 EQU rbp - 640 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  deep2 EQU rbp - 644 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 672

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mapOfExpressions ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ symbolTable ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [tmp3047 + Variant_t.type], eax
  mov [tmp3050 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3057 + Variant_t.type], eax
  mov [tmp3066 + Variant_t.type], eax
  mov [tmp3067 + Variant_t.type], eax
  mov [tmp3068 + Variant_t.type], eax
  mov [tmp3069 + Variant_t.type], eax
  mov [lval + Variant_t.type], eax
  mov [rval + Variant_t.type], eax
  mov [newRval + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], eax
  mov [tmp3104 + Variant_t.type], eax
  mov [tmp3108 + Variant_t.type], eax
  mov [tmp3109 + Variant_t.type], eax
  mov [tmp3118 + Variant_t.type], eax
  mov [tmp3119 + Variant_t.type], eax
  mov [tmp3141 + Variant_t.type], eax
  mov [tmp3142 + Variant_t.type], eax
  mov [tmp3143 + Variant_t.type], eax
  mov [matchedNode + Variant_t.type], eax
  mov [block1 + Variant_t.type], eax
  mov [block2 + Variant_t.type], eax
  mov [lastInstructionNode1 + Variant_t.type], eax
  mov [lastInstructionNode2 + Variant_t.type], eax
  mov [commonBlock + Variant_t.type], eax
  mov [newCommonBlockChildren + Variant_t.type], eax
  mov [__cse21 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3047 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3047  + Variant_t.type], 0
  jz l3048

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

l3048:

l3049:

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3050 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3050 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ goOn ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3053

l3052:

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey

  ret

l3053:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3052 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp3051 ], 56

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3051 ]
  jnz l3054

  mov dword [ tmp3051 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3051 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3051 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3051 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 52

  mov [ tmp3057 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3057 + Variant_t.value], rax

  lea rcx, [ tmp3050 ]
  lea rdx, [ tmp3057 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3058

  lea rcx , [ lval ]
  call  AST_PrefetchHash

l3058:

l3059:

  lea rcx , [ rval ]
  call  AST_PrefetchHash

  lea rcx , [ this ]
  lea rdx , [ rval ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  lea  rax , [ newRval ]
  call  __ASTOptimizerCSE__processNode$3

  mov dword [ tmp3056 ], 0

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 52

  mov [ tmp3050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3050 + Variant_t.value], rax

  lea rcx, [ tmp3057 ]
  lea rdx, [ tmp3050 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3060

  mov dword [ tmp3061 ], 0

  lea  rcx , [ newRval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 52

  mov [ tmp3057 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3057 + Variant_t.value], rax

  lea rcx, [ tmp3050 ]
  lea rdx, [ tmp3057 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3062

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ newRval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3057 ]
  lea  rdx , [ tmp3050 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3061 ], eax

l3062:

  mov eax, dword [ tmp3061 ]
  mov dword [ tmp3056 ], eax

l3060:

  cmp dword [ tmp3056 ], 0
  jz l3064

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3057 ]
  push rdi
  lea  rdi , [ tmp3050 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3069 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal334 ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ tmp3069 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3068 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3069 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp3068 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ lval ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3068 ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3066 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3067 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3066 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3066 ]
  call  __ASTOptimizerCSE__debug$1

  mov dword [ tmp3051 ], 78

  mov [ tmp3050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3050 + Variant_t.value], rax

  lea  rcx , [ rv ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3050 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3050 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ rv ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantStoreAtKey

  jmp l3065

l3064:

  lea rcx, [ newRval ]
  lea rdx, [ rval ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3070

  mov dword [ tmp3051 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3051 ]
  lea  r8 , [ newRval ]
  call  __MOLD_VariantStoreAtIndex_int32

l3070:

l3071:

l3065:

  jmp l3055

l3054:

  mov dword [ tmp3056 ], 1

  mov dword [ tmp3051 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3051 ]
  jz l3072

  mov dword [ tmp3051 ], 50

  mov dword [ tmp3056 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3051 ]
  setz byte [ tmp3056 ]

l3072:

  cmp dword [ tmp3056 ], 0
  jz l3073

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3076

l3075:

  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$3

  ret

l3076:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3075 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  jmp l3074

l3073:

  mov dword [ tmp3051 ], 43

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3051 ]
  jnz l3077

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3080

l3079:

  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$3

  ret

l3080:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3079 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  jmp l3078

l3077:

  mov dword [ tmp3063 ], 1

  mov dword [ tmp3051 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3051 ]
  jz l3081

  mov dword [ tmp3051 ], 34

  mov dword [ tmp3063 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3051 ]
  setz byte [ tmp3063 ]

l3081:

  cmp dword [ tmp3063 ], 0
  jz l3083

  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3086

l3085:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$3

  ret

l3086:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3085 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  jmp l3084

l3083:

  mov dword [ tmp3082 ], 1

  mov dword [ tmp3051 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3051 ]
  jz l3087

  mov dword [ tmp3051 ], 36

  mov dword [ tmp3082 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3051 ]
  setz byte [ tmp3082 ]

l3087:

  cmp dword [ tmp3082 ], 0
  jz l3089

; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l3092

l3091:

  lea rcx , [ childNode ]
  call  AST_PrefetchHash

  lea rcx , [ this ]
  lea rdx , [ childNode ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  lea  rax , [ newNode ]
  call  __ASTOptimizerCSE__processNode$3

  lea rcx, [ newNode ]
  lea rdx, [ childNode ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3093

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ newNode ]
  call  __MOLD_VariantStoreAtIndex_int32

l3093:

l3094:

  ret

l3092:

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3091 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys childIdx values childNode
; -----------------------------
; 
  jmp l3090

l3089:

  mov dword [ tmp3088 ], 0

  mov dword [ tmp3051 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3051 ]
  jl l3095

  mov dword [ tmp3051 ], 49

  mov dword [ tmp3088 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3051 ]
  setl byte [ tmp3088 ]

l3095:

  cmp dword [ tmp3088 ], 0
  jz l3097

  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate

l3097:

l3098:

  mov dword [ tmp3088 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp3057 ]
  push rdi
  lea  rdi , [ tmp3050 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp3051 ], 0

  mov [ tmp3057 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3057 + Variant_t.value], rax

  lea rcx, [ tmp3050 ]
  lea rdx, [ tmp3057 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l3099

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp3057  + Variant_t.type], 0
  setnz al
  mov dword [ tmp3088 ], eax

l3099:

  cmp dword [ tmp3088 ], 0
  jz l3100

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ mapOfExpressions ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ matchedNode ]
  call  __MOLD_VariantLoadFromKey

  cmp [ matchedNode + Variant_t.type ], 0
  jnz l3102

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ mapOfExpressions ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3104 ]
  push rdi
  lea  rdi , [ tmp3050 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3069 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal335 ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ tmp3069 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3068 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3069 ]
  lea  rdx , [ __literal336 ]
  lea  r8 , [ tmp3068 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3068 ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3066 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3067 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3066 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3066 ]
  call  __ASTOptimizerCSE__debug$1

  jmp l3103

l3102:

  lea rcx, [ matchedNode ]
  lea rdx, [ node ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3106

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3104 ]
  push rdi
  lea  rdi , [ tmp3050 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3109 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal337 ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ tmp3109 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3108 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3109 ]
  lea  rdx , [ __literal338 ]
  lea  r8 , [ tmp3108 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3104 ]
  push rdi
  lea  rdi , [ tmp3050 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3069 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3108 ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ tmp3069 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3068 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3069 ]
  lea  rdx , [ __literal339 ]
  lea  r8 , [ tmp3068 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3068 ]
  lea  rdx , [ tmp3050 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3066 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3067 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3066 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3066 ]
  call  __ASTOptimizerCSE__debug$1

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 52

  mov [ tmp3104 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3104 + Variant_t.value], rax

  lea rcx, [ tmp3050 ]
  lea rdx, [ tmp3104 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3111

  mov dword [ tmp3113 ], 0

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3050 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 56

  mov [ tmp3050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3050 + Variant_t.value], rax

  lea rcx, [ tmp3104 ]
  lea rdx, [ tmp3050 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3114

  mov dword [ tmp3115 ], 0

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3119 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3119 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3118 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 0

  lea  rcx , [ tmp3118 ]
  lea  rdx , [ tmp3051 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3104 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 52

  mov [ tmp3104 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3104 + Variant_t.value], rax

  lea rcx, [ tmp3050 ]
  lea rdx, [ tmp3104 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3116

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3118 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3118 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 1

  lea  rcx , [ tmp3050 ]
  lea  rdx , [ tmp3051 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3104 ]
  lea  rdx , [ matchedNode ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3115 ], eax

l3116:

  mov eax, dword [ tmp3115 ]
  mov dword [ tmp3113 ], eax

l3114:

  cmp dword [ tmp3113 ], 0
  jz l3120

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3050 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3051 ], 0

  lea  rcx , [ tmp3104 ]
  lea  rdx , [ tmp3051 ]
  lea  r8 , [ matchedNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l3121

l3120:

  lea rcx , [ matchedNode ]
  lea  rax , [ block1 ]
  call  AST_GetParentBlock

  lea rcx , [ node ]
  lea  rax , [ block2 ]
  call  AST_GetParentBlock

  lea rcx , [ matchedNode ]
  lea  rax , [ lastInstructionNode1 ]
  call  AST_GetTopNodeInBlock

  lea rcx , [ node ]
  lea  rax , [ lastInstructionNode2 ]
  call  AST_GetTopNodeInBlock

  lea rcx, [ block1 ]
  lea rdx, [ block2 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3122

  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea rcx, [ commonBlock ]
  lea rdx, [ block1 ]
  call __MOLD_VariantMove

  jmp l3123

l3122:

  lea  rcx , [ block1 ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3050 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3104 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3104 + Variant_t.value]
  mov dword [ deep1 ], eax

  lea  rcx , [ block2 ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3050 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3104 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3104 + Variant_t.value]
  mov dword [ deep2 ], eax

; 
; -----------------------------
; BEGIN: while
; 
l3124:

  mov eax, dword [ deep1 ]
  cmp eax, dword [ deep2 ]
  jle l3125

  lea rcx , [ block1 ]
  lea  rax , [ lastInstructionNode1 ]
  call  AST_GetTopNodeInBlock

  lea rcx , [ block1 ]
  lea  rax , [ block1 ]
  call  AST_GetParentBlock

  mov dword [ tmp3051 ], 1

  mov eax, dword [ deep1 ]
  sub eax, dword [ tmp3051 ]
  mov dword [ deep1 ], eax

  jmp l3124

l3125:

; 
; END: while
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: while
; 
l3126:

  mov eax, dword [ deep2 ]
  cmp eax, dword [ deep1 ]
  jle l3127

  lea rcx , [ block2 ]
  lea  rax , [ lastInstructionNode2 ]
  call  AST_GetTopNodeInBlock

  lea rcx , [ block2 ]
  lea  rax , [ block2 ]
  call  AST_GetParentBlock

  mov dword [ tmp3051 ], 1

  mov eax, dword [ deep2 ]
  sub eax, dword [ tmp3051 ]
  mov dword [ deep2 ], eax

  jmp l3126

l3127:

; 
; END: while
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: while
; 
l3129:

  lea rcx, [ block1 ]
  lea rdx, [ block2 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3130

  lea rcx , [ block1 ]
  lea  rax , [ lastInstructionNode1 ]
  call  AST_GetTopNodeInBlock

  lea rcx , [ block2 ]
  lea  rax , [ lastInstructionNode2 ]
  call  AST_GetTopNodeInBlock

  lea rcx , [ block1 ]
  lea  rax , [ block1 ]
  call  AST_GetParentBlock

  lea rcx , [ block2 ]
  lea  rax , [ block2 ]
  call  AST_GetParentBlock

  jmp l3129

l3130:

; 
; END: while
; -----------------------------
; 
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea rcx, [ commonBlock ]
  lea rdx, [ block1 ]
  call __MOLD_VariantMove

l3123:

  mov dword [ tmp3051 ], 52

  mov [ tmp3104 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3104 + Variant_t.value], rax

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea  rax , [ tmp3051 ]
  call  __ASTOptimizerCSE__getNextId$0

  mov [ tmp3050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3050 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3050 ]
  push rdi
  lea  rdi , [ tmp3104 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3066 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal332 ]
  lea  rdx , [ tmp3104 ]
  lea  r8 , [ tmp3066 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3066 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3104 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3104 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse21 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse21 ]
  lea rdx , [ tmp3050 ]
  lea  rax , [ tmp3104 ]
  mov  r10d, 28
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6554
  movsxd rax, dword [ tmp3104 + Variant_t.value ]
  mov    qword [ tmp3104 + Variant_t.value ], rax
l6554:


  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3050 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse21 ]
  lea rdx , [ tmp3050 ]
  lea  rax , [ tmp3104 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6555
  movsxd rax, dword [ tmp3104 + Variant_t.value ]
  mov    qword [ tmp3104 + Variant_t.value ], rax
l6555:


  lea  rcx, [ newCommonBlockChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newCommonBlockChildren ]
  call  __MOLD_VariantArrayCreate

  mov dword [ isCseEmited ], 0

  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3133

l3132:

  mov dword [ tmp3134 ], 0

  mov eax, dword [ isCseEmited ]
  cmp eax, dword [ tmp3134 ]
  jnz l3135

  mov dword [ tmp3134 ], 1

  lea rcx, [ oneChild ]
  lea rdx, [ lastInstructionNode1 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3137

  lea  rcx , [ oneChild ]
  lea  rdx , [ lastInstructionNode2 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3134 ], eax

l3137:

  cmp dword [ tmp3134 ], 0
  jz l3139

  mov dword [ isCseEmited ], 1

  mov dword [ tmp3051 ], 56

  mov [ tmp3118 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3051 ]
  mov [ tmp3118 + Variant_t.value], rax

  lea  rcx, [ tmp3119 ]
  call __MOLD_VariantDestroy

  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3141 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3142 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3142 + Variant_t.value], 0

  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3143 ]
  lea rdx, [ matchedNode ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3141 ]
  lea  rdx , [ tmp3142 ]
  lea  r8 , [ tmp3143 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3142 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3142 + Variant_t.value], 1

  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3143 ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3141 ]
  lea  rdx , [ tmp3142 ]
  lea  r8 , [ tmp3143 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ tmp3118 ]
  lea rdx , [ tmp3119 ]
  lea r8 , [ tmp3141 ]
  lea  rax , [ tmp3050 ]
  call  AST_CreateNode

  ; __mold_syscall( 50 )
  lea rcx , [ newCommonBlockChildren ]
  lea rdx , [ tmp3050 ]
  call qword [rbx + 8 * 50 ]

l3139:

l3140:

l3135:

l3136:

  ; __mold_syscall( 50 )
  lea rcx , [ newCommonBlockChildren ]
  lea rdx , [ oneChild ]
  call qword [rbx + 8 * 50 ]

  ret

l3133:

  lea  rcx , [ tmp3104 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3132 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp3134 ], 0

  mov eax, dword [ isCseEmited ]
  cmp eax, dword [ tmp3134 ]
  jnz l3144

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal340
  lea rcx , [ __literal340 ]
  call qword [rbx + 8 * 41 ]

l3144:

l3145:

  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newCommonBlockChildren ]
  call  __MOLD_VariantStoreAtKey

l3121:

l3111:

l3112:

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3104 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3104  + Variant_t.type], 0
  jz l3146

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3141 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3119 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3141 ]
  lea rdx , [ tmp3119 ]
  lea  rax , [ tmp3050 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6556
  movsxd rax, dword [ tmp3050 + Variant_t.value ]
  mov    qword [ tmp3050 + Variant_t.value ], rax
l6556:


l3146:

l3147:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ matchedNode ]
  call __MOLD_VariantMove

  mov dword [ goOn ], 0

l3106:

l3107:

l3103:

l3100:

l3101:

  mov dword [ tmp3096 ], 1

  mov eax, dword [ goOn ]
  cmp eax, dword [ tmp3096 ]
  jnz l3148

; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l3151

l3150:

  lea rcx , [ this ]
  lea rdx , [ childNode ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  lea  rax , [ newNode ]
  call  __ASTOptimizerCSE__processNode$3

  lea rcx, [ newNode ]
  lea rdx, [ childNode ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3152

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ newNode ]
  call  __MOLD_VariantStoreAtIndex_int32

l3152:

l3153:

  ret

l3151:

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3150 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys childIdx values childNode
; -----------------------------
; 
l3148:

l3149:

l3090:

l3084:

l3078:

l3074:

l3055:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3047 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3050 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3066 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3068 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3069 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newRval ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3104 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3108 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3109 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3118 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3119 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3142 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ matchedNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newCommonBlockChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse21 ]
  call __MOLD_VariantDestroy

  add  rsp, 672
  pop  rdi
  pop  rbp
  ret


  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable
  restore opcode
  restore goOn
  restore children
  restore rv
  restore tmp3046
  restore tmp3047
  restore tmp3050
  restore tmp3051
  restore oneChild
  restore tmp3056
  restore tmp3057
  restore tmp3061
  restore tmp3063
  restore tmp3066
  restore tmp3067
  restore tmp3068
  restore tmp3069
  restore lval
  restore rval
  restore newRval
  restore tmp3082
  restore tmp3088
  restore childIdx
  restore childNode
  restore newNode
  restore tmp3096
  restore tmp3104
  restore tmp3105
  restore tmp3108
  restore tmp3109
  restore tmp3110
  restore tmp3113
  restore tmp3115
  restore tmp3117
  restore tmp3118
  restore tmp3119
  restore tmp3128
  restore tmp3131
  restore tmp3134
  restore tmp3138
  restore tmp3141
  restore tmp3142
  restore tmp3143
  restore matchedNode
  restore block1
  restore block2
  restore lastInstructionNode1
  restore lastInstructionNode2
  restore commonBlock
  restore newCommonBlockChildren
  restore isCseEmited
  restore __cse21
  restore deep1
  restore deep2

; -----------------------------------------------
; function __ASTOptimizerCSE_processNode$1
; -----------------------------------------------
__ASTOptimizerCSE_processNode$1_vcall:
__ASTOptimizerCSE_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  mapOfExpressions EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  symbolTable EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [mapOfExpressions + Variant_t.type], eax
  mov [symbolTable + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ mapOfExpressions ]
  call __MOLD_VariantDestroy
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea r8 , [ mapOfExpressions ]
  lea r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$3


  ; clean frame
  ; -----------
  lea  rcx, [ mapOfExpressions ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable

; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove_constructor$1
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore app

; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__debug$1
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3154 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3155 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp3155 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp3155 ]
  jnz l3156

  lea rcx, [__fmt8 ]
  call __MOLD_PrintFormatFromMemory

l3156:

l3157:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp3154
  restore tmp3155

; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__removeNode$1
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__removeNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 2 , readHits= 4 )
  tmp3158 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3159 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3160 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3161 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp3158 + Variant_t.type], eax
  mov [tmp3159 + Variant_t.type], eax
  mov [tmp3160 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3160 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3160 ]
  push rdi
  lea  rdi , [ tmp3159 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3158 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal342 ]
  lea  rdx , [ tmp3159 ]
  lea  r8 , [ tmp3158 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3158 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ tmp3161 ], 78

  mov [ tmp3159 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3161 ]
  mov [ tmp3159 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3159 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3159 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3159 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3159 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3158 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3159 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3160 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore node
  restore tmp3158
  restore tmp3159
  restore tmp3160
  restore tmp3161

; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__moveNode$2
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__moveNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  dst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 3 , readHits= 5 )
  src EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 8 )
  __cse22 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3162 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3163 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3164 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3165 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3166 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  xor eax, eax
  mov [__cse22 + Variant_t.type], eax
  mov [tmp3162 + Variant_t.type], eax
  mov [tmp3163 + Variant_t.type], eax
  mov [tmp3164 + Variant_t.type], eax
  mov [tmp3165 + Variant_t.type], eax
  mov [tmp3166 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ src ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ __cse22 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ dst ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3166 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3166 ]
  push rdi
  lea  rdi , [ tmp3162 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3165 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal343 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3165 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3164 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3165 ]
  lea  rdx , [ __literal344 ]
  lea  r8 , [ tmp3164 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ __cse22 ]
  push rdi
  lea  rdi , [ tmp3162 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3163 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3164 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3163 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3163 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  lea  rcx , [ dst ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ __cse22 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ src ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3162 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ dst ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3162 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ src ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3162 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ dst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3162 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ __cse22 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3162 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3163 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3164 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3165 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3166 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore dst
  restore src
  restore __cse22
  restore tmp3162
  restore tmp3163
  restore tmp3164
  restore tmp3165
  restore tmp3166

; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__processChildNodes$2
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__processChildNodes$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  symbolTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 4 )
  newChildren EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp3167 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3173 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3175 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  childNode EQU rbp - 136 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 4 )
  newNode EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  tmp3170 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3174 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [newChildren + Variant_t.type], eax
  mov [tmp3167 + Variant_t.type], eax
  mov [tmp3173 + Variant_t.type], eax
  mov [tmp3175 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3167 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l3169

l3168:

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ childNode ]
  lea  rax , [ newNode ]
  call  __ASTOptimizerDeadCodeRemove__processNode$2

  lea rcx, [ newNode ]
  lea rdx, [ childNode ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3171

  lea rcx , [ this ]
  lea rdx , [ childNode ]
  lea r8 , [ newNode ]
  call  __ASTOptimizerDeadCodeRemove__moveNode$2

l3171:

l3172:

  lea  rcx , [ newNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3173 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3174 ], 78

  mov [ tmp3175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3174 ]
  mov [ tmp3175 + Variant_t.value], rax

  lea rcx, [ tmp3173 ]
  lea rdx, [ tmp3175 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3176

  ; __mold_syscall( 50 )
  lea rcx , [ newChildren ]
  lea rdx , [ newNode ]
  call qword [rbx + 8 * 50 ]

l3176:

l3177:

  ret

l3169:

  lea  rcx , [ tmp3167 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3168 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3167 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3173 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3175 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore symbolTable
  restore node
  restore newChildren
  restore tmp3167
  restore tmp3170
  restore tmp3173
  restore tmp3174
  restore tmp3175
  restore childNode
  restore newNode

; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__processNode$2
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__processNode$2:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 19 )
  symbolTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 10 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 4 , readHits= 48 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 20 )
  x EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 12 )
  childrenCntOnEnter EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  value EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp3178 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 29 , readHits= 29 )
  tmp3179 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 34 , readHits= 34 )
  tmp3194 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 14 , readHits= 14 )
  tmp3209 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  nodeCond EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  nodeBody EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 7 )
  nodeElse EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  tmp3232 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3233 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3234 EQU rbp - 280 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  symbolInfo EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  rval EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  __cse23 EQU rbp - 328 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3247 EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp3248 EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3249 EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3250 EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  paramType EQU rbp - 408 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  opcode EQU rbp - 412 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 9 )
  childrenCnt EQU rbp - 416 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  removeNode EQU rbp - 420 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 10 , readHits= 2 )
  tmp3180 EQU rbp - 424 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp3185 EQU rbp - 428 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 27 , readHits= 27 )
  tmp3189 EQU rbp - 432 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 10 , readHits= 10 )
  tmp3190 EQU rbp - 436 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp3191 EQU rbp - 440 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 12 , readHits= 12 )
  tmp3201 EQU rbp - 444 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 13 , readHits= 13 )
  tmp3210 EQU rbp - 448 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp3241 EQU rbp - 452 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  paramIdx EQU rbp - 456 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 496

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [childrenCntOnEnter + Variant_t.type], eax
  mov [value + Variant_t.type], eax
  mov [tmp3178 + Variant_t.type], eax
  mov [tmp3179 + Variant_t.type], eax
  mov [tmp3194 + Variant_t.type], eax
  mov [tmp3209 + Variant_t.type], eax
  mov [nodeCond + Variant_t.type], eax
  mov [nodeBody + Variant_t.type], eax
  mov [nodeElse + Variant_t.type], eax
  mov [tmp3232 + Variant_t.type], eax
  mov [tmp3233 + Variant_t.type], eax
  mov [tmp3234 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax
  mov [rval + Variant_t.type], eax
  mov [__cse23 + Variant_t.type], eax
  mov [tmp3247 + Variant_t.type], eax
  mov [tmp3248 + Variant_t.type], eax
  mov [tmp3249 + Variant_t.type], eax
  mov [tmp3250 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3179 ]
  lea rdx , [ node ]
  lea  rax , [ tmp3178 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6557
  movsxd rax, dword [ tmp3178 + Variant_t.value ]
  mov    qword [ tmp3178 + Variant_t.value ], rax
l6557:


  cmp [ symbolTable + Variant_t.type ], 0
  jnz l3181

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal345
  lea rcx , [ __literal345 ]
  call qword [rbx + 8 * 41 ]

l3181:

l3182:

  cmp [ node + Variant_t.type ], 0
  jnz l3183

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal346
  lea rcx , [ __literal346 ]
  call qword [rbx + 8 * 41 ]

l3183:

l3184:

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3178 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3178 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp3185 ], 31

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3185 ]
  jnz l3186

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

l3186:

l3187:

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ node ]
  call  __ASTOptimizerDeadCodeRemove__processChildNodes$2

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3178 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3178 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp3178 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp3178 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3178 + Variant_t.value]
  mov dword [ childrenCnt ], eax

  mov dword [ tmp3185 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov [ childrenCntOnEnter + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childrenCnt ]
  mov [ childrenCntOnEnter + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

  mov dword [ removeNode ], 0

  mov dword [ tmp3180 ], 0

  mov dword [ tmp3185 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3185 ]
  jnz l3188

  mov dword [ tmp3185 ], 4

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp3178 ]
  lea  rax , [ tmp3190 ]
  call  AST_IsEmpty

  mov dword [ tmp3191 ], 1

  mov dword [ tmp3180 ], 0
  mov ecx, dword [ tmp3190 ]
  cmp ecx, dword [ tmp3191 ]
  setz byte [ tmp3180 ]

l3188:

  cmp dword [ tmp3180 ], 0
  jz l3192

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3179 ]
  push rdi
  lea  rdi , [ tmp3178 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal347 ]
  lea  rdx , [ tmp3178 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

  jmp l3193

l3192:

; 
; -----------------------------
; BEGIN: switch opcode
; 
  mov eax, dword [ opcode ]
  sub eax, 32
  cmp eax, 24
  ja l3196
  movsx rax, word [ __jmptable3197 + rax * 2]
  lea rax, [ l3196 + rax]
  jmp rax

l3198:

  mov dword [ tmp3185 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp3178 ]
  lea  rax , [ tmp3191 ]
  call  AST_IsEmpty

  mov dword [ tmp3190 ], 1

  mov eax, dword [ tmp3191 ]
  cmp eax, dword [ tmp3190 ]
  jnz l3199

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3179 ]
  push rdi
  lea  rdi , [ tmp3178 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal348 ]
  lea  rdx , [ tmp3178 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

  jmp l3200

l3199:

  mov dword [ tmp3185 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3201 ], 0

  mov eax, dword [ tmp3201 ]
  mov [ tmp3179 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3179 + Variant_t.value], rax

  lea rcx , [ tmp3178 ]
  lea rdx , [ tmp3179 ]
  lea  rax , [ tmp3191 ]
  call  AST_IsImmWithValue

  mov dword [ tmp3201 ], 1

  mov eax, dword [ tmp3191 ]
  cmp eax, dword [ tmp3201 ]
  jnz l3202

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal349 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

l3202:

l3203:

l3200:

  jmp l3195

l3204:

  mov dword [ tmp3185 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ nodeCond ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3185 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ nodeBody ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3185 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ nodeElse ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3185 ], 3

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3185 ]
  jnz l3205

  lea rcx , [ nodeElse ]
  lea  rax , [ tmp3201 ]
  call  AST_IsEmpty

  mov dword [ tmp3191 ], 1

  mov eax, dword [ tmp3201 ]
  cmp eax, dword [ tmp3191 ]
  jnz l3207

  lea  rcx , [ nodeElse ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal350 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  lea  rcx, [ tmp3179 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3179 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3178 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3178 + Variant_t.value], 0

  lea  rcx, [ tmp3209 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3209 ]
  lea rdx, [ nodeCond ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3179 ]
  lea  rdx , [ tmp3178 ]
  lea  r8 , [ tmp3209 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3178 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3178 + Variant_t.value], 1

  lea  rcx, [ tmp3209 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3209 ]
  lea rdx, [ nodeBody ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3179 ]
  lea  rdx , [ tmp3178 ]
  lea  r8 , [ tmp3209 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ childrenCnt ], 2

  lea rcx , [ nodeBody ]
  lea  rax , [ tmp3201 ]
  call  AST_IsEmpty

  mov dword [ tmp3210 ], 1

  mov eax, dword [ tmp3201 ]
  cmp eax, dword [ tmp3210 ]
  jnz l3211

  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3209 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3209 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal351 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

l3211:

l3212:

  jmp l3208

l3207:

  lea rcx , [ nodeBody ]
  lea  rax , [ tmp3210 ]
  call  AST_IsEmpty

  mov dword [ tmp3201 ], 1

  mov eax, dword [ tmp3210 ]
  cmp eax, dword [ tmp3201 ]
  jnz l3213

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3209 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3209 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal352 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  lea rcx , [ nodeCond ]
  call  AST_InvertBoolean

  lea  rcx, [ tmp3179 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3179 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3209 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3209 + Variant_t.value], 0

  lea  rcx, [ tmp3178 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3178 ]
  lea rdx, [ nodeCond ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3179 ]
  lea  rdx , [ tmp3209 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3209 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3209 + Variant_t.value], 1

  lea  rcx, [ tmp3178 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3178 ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3179 ]
  lea  rdx , [ tmp3209 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea rcx, [ nodeBody ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove

  mov dword [ childrenCnt ], 2

l3213:

l3214:

l3208:

  jmp l3206

l3205:

  lea rcx , [ nodeBody ]
  lea  rax , [ tmp3191 ]
  call  AST_IsEmpty

  mov dword [ tmp3201 ], 1

  mov eax, dword [ tmp3191 ]
  cmp eax, dword [ tmp3201 ]
  jnz l3215

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal353 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

l3215:

l3216:

l3206:

  mov dword [ tmp3190 ], 1

  mov eax, dword [ removeNode ]
  cmp eax, dword [ tmp3190 ]
  jz l3217

  mov dword [ tmp3191 ], 1

  mov eax, dword [ tmp3191 ]
  mov [ tmp3179 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3179 + Variant_t.value], rax

  lea rcx , [ nodeCond ]
  lea rdx , [ tmp3179 ]
  lea  rax , [ tmp3201 ]
  call  AST_IsImmWithValue

  mov dword [ tmp3191 ], 1

  mov eax, dword [ tmp3201 ]
  cmp eax, dword [ tmp3191 ]
  jnz l3219

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal354 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ nodeBody ]
  call __MOLD_VariantMove

  jmp l3220

l3219:

  mov dword [ tmp3210 ], 0

  mov eax, dword [ tmp3210 ]
  mov [ tmp3179 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3179 + Variant_t.value], rax

  lea rcx , [ nodeCond ]
  lea rdx , [ tmp3179 ]
  lea  rax , [ tmp3201 ]
  call  AST_IsImmWithValue

  mov dword [ tmp3210 ], 1

  mov eax, dword [ tmp3201 ]
  cmp eax, dword [ tmp3210 ]
  jnz l3221

  mov dword [ tmp3185 ], 3

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3185 ]
  jnz l3223

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal355 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove

  jmp l3224

l3223:

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal356 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

l3224:

l3221:

l3222:

l3220:

l3217:

l3218:

  jmp l3195

l3225:

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3185 ], 52

  mov [ tmp3178 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3185 ]
  mov [ tmp3178 + Variant_t.value], rax

  lea rcx, [ tmp3179 ]
  lea rdx, [ tmp3178 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3226

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp3178 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6558
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6558:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3185 ], 0

  mov [ tmp3179 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3185 ]
  mov [ tmp3179 + Variant_t.value], rax

  lea rcx, [ tmp3178 ]
  lea rdx, [ tmp3179 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3228

  mov dword [ tmp3185 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ rval ]
  lea  rax , [ tmp3210 ]
  call  AST_HasSideEffects

  mov dword [ tmp3201 ], 1

  mov eax, dword [ tmp3210 ]
  cmp eax, dword [ tmp3201 ]
  jnz l3230

  mov dword [ tmp3201 ], 1

  mov eax, dword [ tmp3201 ]
  mov [ tmp3179 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3179 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal357 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStoreAtKey

  jmp l3231

l3230:

  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse23 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3234 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal358 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3234 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3233 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3234 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp3233 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3232 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3233 ]
  lea  rdx , [ __cse23 ]
  lea  r8 , [ tmp3232 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3232 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

  lea rcx , [ symbolTable ]
  lea rdx , [ __cse23 ]
  lea  rax , [ tmp3179 ]
  mov  r10d, 43
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6559
  movsxd rax, dword [ tmp3179 + Variant_t.value ]
  mov    qword [ tmp3179 + Variant_t.value ], rax
l6559:


l3231:

l3228:

l3229:

l3226:

l3227:

  jmp l3195

l3235:

  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea rdx , [ tmp3179 ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6560
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6560:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3185 ], 0

  mov [ tmp3178 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3185 ]
  mov [ tmp3178 + Variant_t.value], rax

  lea rcx, [ tmp3179 ]
  lea rdx, [ tmp3178 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3236

  mov dword [ removeNode ], 1

  lea  rcx , [ symbolTable ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3209 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3179 ]
  lea rdx , [ tmp3209 ]
  lea  rax , [ tmp3178 ]
  mov  r10d, 32
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6561
  movsxd rax, dword [ tmp3178 + Variant_t.value ]
  mov    qword [ tmp3178 + Variant_t.value ], rax
l6561:


l3236:

l3237:

  jmp l3195

l3196:

  mov dword [ tmp3189 ], 0

  mov dword [ tmp3185 ], 77

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3185 ]
  jnz l3238

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3185 ], 77

  mov [ tmp3209 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3185 ]
  mov [ tmp3209 + Variant_t.value], rax

  lea  rcx , [ tmp3178 ]
  lea  rdx , [ tmp3209 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3189 ], eax

l3238:

  cmp dword [ tmp3189 ], 0
  jz l3239

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3178 ]
  push rdi
  lea  rdi , [ tmp3209 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal359 ]
  lea  rdx , [ tmp3209 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3209 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3185 ], 0

  lea  rcx , [ x ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3241 ], 0

  lea  rcx , [ tmp3179 ]
  lea  rdx , [ tmp3241 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3209 ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3240

l3239:

  mov dword [ tmp3185 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3185 ]
  jnz l3242

  lea rcx , [ symbolTable ]
  lea rdx , [ value ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6562
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6562:


  mov dword [ tmp3191 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp3178 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3178  + Variant_t.type], 0
  jz l3244

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3179 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3209 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp3209  + Variant_t.type], 0
  setnz al
  mov dword [ tmp3191 ], eax

l3244:

  cmp dword [ tmp3191 ], 0
  jz l3245

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3250 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3249 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3185 ], 0

  lea  rcx , [ tmp3249 ]
  lea  rdx , [ tmp3185 ]
  lea  r8 , [ tmp3248 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3248 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3247 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp3247 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp3185 ], 0

  mov [ tmp3247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3185 ]
  mov [ tmp3247 + Variant_t.value], rax

  lea rcx, [ tmp3179 ]
  lea rdx, [ tmp3247 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3251

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3179 ]
  push rdi
  lea  rdi , [ tmp3247 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3234 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal360 ]
  lea  rdx , [ tmp3247 ]
  lea  r8 , [ tmp3234 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3233 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3234 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp3233 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3232 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3233 ]
  lea  rdx , [ value ]
  lea  r8 , [ tmp3232 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3232 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ removeNode ], 1

  jmp l3252

l3251:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3179 ]
  lea  rdx , [ __literal235 ]
  lea  r8 , [ tmp3247 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys paramIdx values paramType
; 
  jmp l3254

l3253:

  mov dword [ tmp3185 ], 0

  mov [ tmp3179 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3185 ]
  mov [ tmp3179 + Variant_t.value], rax

  lea rcx, [ paramType ]
  lea rdx, [ tmp3179 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3255

  lea  rcx , [ children ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp3249 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3249 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3248 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3248 ]
  push rdi
  lea  rdi , [ tmp3179 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal361 ]
  lea  rdx , [ tmp3179 ]
  lea  r8 , [ tmp3194 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3194 ]
  call  __ASTOptimizerDeadCodeRemove__debug$1

  mov dword [ tmp3185 ], 0

  mov [ tmp3248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3185 ]
  mov [ tmp3248 + Variant_t.value], rax

  lea  rcx, [ tmp3249 ]
  call __MOLD_VariantDestroy

  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3250 ]
  call  __MOLD_VariantArrayCreate

  lea rcx , [ tmp3248 ]
  lea rdx , [ tmp3249 ]
  lea r8 , [ tmp3250 ]
  lea  rax , [ tmp3179 ]
  call  AST_CreateNode

  lea  rcx , [ children ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStoreAtIndex_int32

l3255:

l3256:

  ret

l3254:

  lea  rcx , [ tmp3247 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramType ]
  lea  r9 , [ l3253 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys paramIdx values paramType
; -----------------------------
; 
l3252:

l3245:

l3246:

l3242:

l3243:

l3240:

l3195:

; 
; END: switch opcode
; -----------------------------
; 
l3193:

  mov dword [ tmp3189 ], 1

  mov eax, dword [ removeNode ]
  cmp eax, dword [ tmp3189 ]
  jnz l3257

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTOptimizerDeadCodeRemove__removeNode$1

  jmp l3258

l3257:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp3179 ]
  push rdi
  lea  rdi , [ tmp3247 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx, [ childrenCntOnEnter ]
  lea rdx, [ tmp3247 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3259

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ node ]
  call  __ASTOptimizerDeadCodeRemove__processChildNodes$2

l3259:

l3260:

l3258:

  mov dword [ tmp3185 ], 31

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3185 ]
  jnz l3261

  lea rcx , [ symbolTable ]
  lea  rax , [ tmp3247 ]
  mov  r10d, 44
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6563
  movsxd rax, dword [ tmp3247 + Variant_t.value ]
  mov    qword [ tmp3247 + Variant_t.value ], rax
l6563:


l3261:

l3262:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCntOnEnter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3178 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3179 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3194 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3209 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeCond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeElse ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3232 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3233 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3234 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse23 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3247 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3248 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3249 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramType

  add  rsp, 496
  pop  rdi
  pop  rbp
  ret


  restore this
  restore symbolTable
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore x
  restore childrenCntOnEnter
  restore value
  restore rv
  restore removeNode
  restore tmp3178
  restore tmp3179
  restore tmp3180
  restore tmp3185
  restore tmp3189
  restore tmp3190
  restore tmp3191
  restore tmp3194
  restore tmp3201
  restore tmp3209
  restore tmp3210
  restore nodeCond
  restore nodeBody
  restore nodeElse
  restore tmp3232
  restore tmp3233
  restore tmp3234
  restore symbolInfo
  restore rval
  restore __cse23
  restore tmp3241
  restore tmp3247
  restore tmp3248
  restore tmp3249
  restore tmp3250
  restore paramIdx
  restore paramType

; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove_processNode$1
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove_processNode$1_vcall:
__ASTOptimizerDeadCodeRemove_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  newNode EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  tmp3263 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [newNode + Variant_t.type], eax
  mov [tmp3263 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3263 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp3263 ]
  lea r8 , [ node ]
  lea  rax , [ newNode ]
  call  __ASTOptimizerDeadCodeRemove__processNode$2


  ; clean frame
  ; -----------
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3263 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore node
  restore newNode
  restore tmp3263

; -----------------------------------------------
; function __ASTOptimizerVCall_constructor$1
; -----------------------------------------------
__ASTOptimizerVCall_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp3264 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp3264 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ app ]
  lea  rax , [ tmp3264 ]
  mov  r10d, 1
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6564
  movsxd rax, dword [ tmp3264 + Variant_t.value ]
  mov    qword [ tmp3264 + Variant_t.value ], rax
l6564:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3264 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3264 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore app
  restore tmp3264

; -----------------------------------------------
; function __ASTOptimizerVCall__debug$1
; -----------------------------------------------
__ASTOptimizerVCall__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3265 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3266 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp3266 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp3266 ]
  jnz l3267

  lea rcx, [__fmt9 ]
  call __MOLD_PrintFormatFromMemory

l3267:

l3268:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp3265
  restore tmp3266

; -----------------------------------------------
; function __ASTOptimizerVCall__processNode$1
; -----------------------------------------------
__ASTOptimizerVCall__processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 8 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 5 , readHits= 25 )
  children EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  childrenCnt EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3269 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3270 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 15 , readHits= 15 )
  tmp3283 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3290 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3293 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp3294 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp3295 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp3298 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3302 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  thiz EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  symbolInfoThiz EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  classProto EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  methodProto EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 13 )
  blockNode EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  symbolTable EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  currentMethodName EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse24 EQU rbp - 344 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  oneChild EQU rbp - 360 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  opcode EQU rbp - 364 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3271 EQU rbp - 368 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp3272 EQU rbp - 372 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3275 EQU rbp - 376 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3278 EQU rbp - 380 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3280 EQU rbp - 384 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3286 EQU rbp - 388 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3288 EQU rbp - 392 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp3289 EQU rbp - 396 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  isRetValUsed EQU rbp - 400 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 432

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [tmp3269 + Variant_t.type], eax
  mov [tmp3270 + Variant_t.type], eax
  mov [tmp3283 + Variant_t.type], eax
  mov [tmp3290 + Variant_t.type], eax
  mov [tmp3293 + Variant_t.type], eax
  mov [tmp3294 + Variant_t.type], eax
  mov [tmp3295 + Variant_t.type], eax
  mov [tmp3298 + Variant_t.type], eax
  mov [tmp3302 + Variant_t.type], eax
  mov [thiz + Variant_t.type], eax
  mov [symbolInfoThiz + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [methodProto + Variant_t.type], eax
  mov [blockNode + Variant_t.type], eax
  mov [symbolTable + Variant_t.type], eax
  mov [currentMethodName + Variant_t.type], eax
  mov [__cse24 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3270 ]
  lea rdx , [ node ]
  lea  rax , [ tmp3269 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6565
  movsxd rax, dword [ tmp3269 + Variant_t.value ]
  mov    qword [ tmp3269 + Variant_t.value ], rax
l6565:


  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3269 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3269 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3269 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp3271 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3271 ]
  jnz l3273

  mov dword [ tmp3271 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3271 ]
  lea  r8 , [ thiz ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ thiz ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfoThiz ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolInfoThiz  + Variant_t.type], 0
  jz l3276

  lea  rcx , [ thiz ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3269 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3269 ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3278 ], 0

  cmp [ classProto  + Variant_t.type], 0
  jz l3279

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp3269 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp3269  + Variant_t.type], 0
  setnz al
  mov dword [ tmp3278 ], eax

l3279:

  cmp dword [ tmp3278 ], 0
  jz l3281

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3283 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3270 ]
  lea  rdx , [ tmp3283 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ methodProto  + Variant_t.type], 0
  jz l3284

  mov dword [ tmp3286 ], 0

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal232 ]
  lea  r8 , [ tmp3283 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3283  + Variant_t.type], 0
  jz l3287

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal232 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3289 ], 1

  mov eax, dword [ tmp3289 ]
  mov [ tmp3290 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3290 + Variant_t.value], rax

  lea  rcx , [ tmp3270 ]
  lea  rdx , [ tmp3290 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3286 ], eax

l3287:

  cmp dword [ tmp3286 ], 0
  jz l3291

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3290 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp3295 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal363 ]
  lea  rdx , [ tmp3290 ]
  lea  r8 , [ tmp3295 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3294 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3295 ]
  lea  rdx , [ __literal364 ]
  lea  r8 , [ tmp3294 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3270 ]
  push rdi
  lea  rdi , [ tmp3290 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3293 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3294 ]
  lea  rdx , [ tmp3290 ]
  lea  r8 , [ tmp3293 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3293 ]
  call  __ASTOptimizerVCall__debug$1

  jmp l3292

l3291:

  lea  rcx , [ node ]
  lea  rdx , [ __literal255 ]
  lea  r8 , [ tmp3290 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3289 ], 1

  mov eax, dword [ tmp3289 ]
  mov [ tmp3270 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3270 + Variant_t.value], rax

  lea rcx, [ tmp3290 ]
  lea rdx, [ tmp3270 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3296

  mov dword [ isRetValUsed ], 0

  jmp l3297

l3296:

  mov dword [ isRetValUsed ], 1

l3297:

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ __cse24 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse24 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3271 ], 42

  mov [ tmp3270 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3271 ]
  mov [ tmp3270 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3288 ], 1

  mov eax, dword [ tmp3288 ]
  mov [ tmp3270 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3270 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3290 ]
  call  __MOLD_VariantLoadFromKey

  mov eax, dword [ isRetValUsed ]
  mov [ tmp3298 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3298 + Variant_t.value], rax

  lea rcx , [ tmp3290 ]
  lea rdx , [ __cse24 ]
  lea r8 , [ childrenCnt ]
  lea r9 , [ tmp3298 ]
  lea  rax , [ tmp3270 ]
  mov  r10d, 37
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6566
  movsxd rax, dword [ tmp3270 + Variant_t.value ]
  mov    qword [ tmp3270 + Variant_t.value ], rax
l6566:


  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp3295 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal366 ]
  lea  rdx , [ tmp3270 ]
  lea  r8 , [ tmp3295 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3294 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3295 ]
  lea  rdx , [ __literal367 ]
  lea  r8 , [ tmp3294 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3298 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3298 ]
  push rdi
  lea  rdi , [ tmp3270 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3293 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3294 ]
  lea  rdx , [ tmp3270 ]
  lea  r8 , [ tmp3293 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3293 ]
  call  __ASTOptimizerVCall__debug$1

  lea rcx , [ node ]
  lea  rax , [ blockNode ]
  call  AST_GetParentBlock

  lea  rcx , [ blockNode ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ symbolTable ]
  lea  rax , [ currentMethodName ]
  mov  r10d, 38
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6567
  movsxd rax, dword [ currentMethodName + Variant_t.value ]
  mov    qword [ currentMethodName + Variant_t.value ], rax
l6567:


  mov dword [ tmp3288 ], 0

  cmp [ currentMethodName  + Variant_t.type], 0
  jz l3299

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ currentMethodName ]
  lea  rdx , [ tmp3270 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3288 ], eax

l3299:

  cmp dword [ tmp3288 ], 0
  jz l3300

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3298 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3298 ]
  push rdi
  lea  rdi , [ tmp3270 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3302 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal252 ]
  lea  rdx , [ tmp3270 ]
  lea  r8 , [ tmp3302 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3295 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3302 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp3295 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp3294 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3295 ]
  lea  rdx , [ tmp3270 ]
  lea  r8 , [ tmp3294 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3293 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3294 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3293 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3293 ]
  call  __ASTOptimizerVCall__debug$1

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3298 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3298 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp3270 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3289 ], 1

  mov eax, dword [ tmp3289 ]
  mov [ tmp3298 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3298 + Variant_t.value], rax

  lea  rcx , [ tmp3270 ]
  lea  rdx , [ __literal254 ]
  lea  r8 , [ tmp3298 ]
  call  __MOLD_VariantStoreAtKey

l3300:

l3301:

l3292:

l3284:

l3285:

l3281:

l3282:

l3276:

l3277:

  jmp l3274

l3273:

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3304

l3303:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  call  __ASTOptimizerVCall__processNode$1

  ret

l3304:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3303 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
l3274:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3269 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3270 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3283 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3290 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3293 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3294 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3295 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3298 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3302 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfoThiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ blockNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentMethodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse24 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 432
  pop  rbp
  ret


  restore this
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore tmp3269
  restore tmp3270
  restore tmp3271
  restore tmp3272
  restore tmp3275
  restore tmp3278
  restore tmp3280
  restore tmp3283
  restore tmp3286
  restore tmp3288
  restore tmp3289
  restore tmp3290
  restore tmp3293
  restore tmp3294
  restore tmp3295
  restore tmp3298
  restore tmp3302
  restore thiz
  restore symbolInfoThiz
  restore classProto
  restore methodProto
  restore isRetValUsed
  restore blockNode
  restore symbolTable
  restore currentMethodName
  restore __cse24
  restore oneChild

; -----------------------------------------------
; function __ASTOptimizerVCall_processNode$1
; -----------------------------------------------
__ASTOptimizerVCall_processNode$1_vcall:
__ASTOptimizerVCall_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTOptimizerVCall__processNode$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore node

; -----------------------------------------------
; function __ASTOptimizerIf_constructor$1
; -----------------------------------------------
__ASTOptimizerIf_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore app

; -----------------------------------------------
; function __ASTOptimizerIf__debug$1
; -----------------------------------------------
__ASTOptimizerIf__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3305 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3306 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp3306 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp3306 ]
  jnz l3307

  lea rcx, [__fmt10 ]
  call __MOLD_PrintFormatFromMemory

l3307:

l3308:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp3305
  restore tmp3306

; -----------------------------------------------
; function __ASTOptimizerIf__processNode$1
; -----------------------------------------------
__ASTOptimizerIf__processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 4 , readHits= 9 )
  children EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  cond EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 16 )
  tmp3309 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 28 , readHits= 28 )
  tmp3318 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 14 , readHits= 14 )
  tmp3319 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 10 , readHits= 10 )
  tmp3322 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  newChildren EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  caseHashMap EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  exprHash EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  currentIfNode EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 18 )
  caseNode EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 4 )
  caseNodeHash EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  reusedNode EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  lastCaseNode EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oneChild EQU rbp - 280 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  opcode EQU rbp - 284 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  childrenCnt EQU rbp - 288 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3310 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 29 , readHits= 29 )
  tmp3311 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3313 EQU rbp - 300 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3315 EQU rbp - 304 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp3317 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3328 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp3330 EQU rbp - 316 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  valueMin EQU rbp - 320 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  valueMax EQU rbp - 324 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  goOn EQU rbp - 328 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 1 )
  casesCnt EQU rbp - 332 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  caseValue EQU rbp - 336 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 6 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 368

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [cond + Variant_t.type], eax
  mov [tmp3309 + Variant_t.type], eax
  mov [tmp3318 + Variant_t.type], eax
  mov [tmp3319 + Variant_t.type], eax
  mov [tmp3322 + Variant_t.type], eax
  mov [newChildren + Variant_t.type], eax
  mov [caseHashMap + Variant_t.type], eax
  mov [exprHash + Variant_t.type], eax
  mov [currentIfNode + Variant_t.type], eax
  mov [caseNode + Variant_t.type], eax
  mov [caseNodeHash + Variant_t.type], eax
  mov [reusedNode + Variant_t.type], eax
  mov [lastCaseNode + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3309 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp3309 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3309 + Variant_t.value]
  mov dword [ childrenCnt ], eax

  mov dword [ tmp3310 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3311 ], 0

  mov dword [ tmp3310 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3310 ]
  jnz l3312

  mov dword [ tmp3313 ], 0

  mov dword [ tmp3310 ], 3

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3310 ]
  jnz l3314

  mov dword [ tmp3315 ], 0

  lea  rcx , [ cond ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 66

  mov [ tmp3318 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3318 + Variant_t.value], rax

  lea rcx, [ tmp3309 ]
  lea rdx, [ tmp3318 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3316

  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3319 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  lea  rcx , [ tmp3319 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3309 + Variant_t.value], rax

  lea  rcx , [ tmp3318 ]
  lea  rdx , [ tmp3309 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3315 ], eax

l3316:

  mov eax, dword [ tmp3315 ]
  mov dword [ tmp3313 ], eax

l3314:

  mov eax, dword [ tmp3313 ]
  mov dword [ tmp3311 ], eax

l3312:

  cmp dword [ tmp3311 ], 0
  jz l3320

  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3309 + Variant_t.value], 0

  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3322 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 0

  lea  rcx , [ tmp3322 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp3309 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx, [ caseHashMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ caseHashMap ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 0

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp3318 ]
  lea  rax , [ exprHash ]
  call  AST_GetHash

  mov dword [ valueMin ], 2147483647

  mov dword [ valueMax ], -2147483647

  mov dword [ goOn ], 1

  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentIfNode ]
  lea rdx, [ node ]
  call __MOLD_VariantMove

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 0

  lea  rcx , [ tmp3318 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ casesCnt ], 0

; 
; -----------------------------
; BEGIN: while
; 
l3323:

  mov dword [ tmp3315 ], 1

  mov eax, dword [ goOn ]
  cmp eax, dword [ tmp3315 ]
  jnz l3324

  mov dword [ goOn ], 0

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 40

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3309 + Variant_t.value], rax

  lea rcx, [ tmp3318 ]
  lea rdx, [ tmp3309 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3325

  mov dword [ tmp3317 ], 0

  lea  rcx , [ cond ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 66

  mov [ tmp3318 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3318 + Variant_t.value], rax

  lea rcx, [ tmp3309 ]
  lea rdx, [ tmp3318 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3327

  mov dword [ tmp3328 ], 0

  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3319 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  lea  rcx , [ tmp3319 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3309 + Variant_t.value], rax

  lea rcx, [ tmp3318 ]
  lea rdx, [ tmp3309 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3329

  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3319 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 0

  lea  rcx , [ tmp3319 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp3318 ]
  lea  rax , [ tmp3309 ]
  call  AST_GetHash

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ exprHash ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3328 ], eax

l3329:

  mov eax, dword [ tmp3328 ]
  mov dword [ tmp3317 ], eax

l3327:

  cmp dword [ tmp3317 ], 0
  jz l3331

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ caseNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3319 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  lea  rcx , [ tmp3319 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ tmp3318 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3318 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3309 + Variant_t.value]
  mov dword [ caseValue ], eax

  lea rcx , [ caseNode ]
  lea  rax , [ tmp3309 ]
  call  AST_GetHashForCodeComparison

  lea  rcx, [ caseNodeHash ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseNodeHash ]
  lea rdx, [ tmp3309 ]
  call __MOLD_VariantMove

  lea  rcx , [ caseHashMap ]
  lea  rdx , [ caseNodeHash ]
  lea  r8 , [ reusedNode ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  mov eax, dword [ casesCnt ]
  add eax, dword [ tmp3310 ]
  mov dword [ casesCnt ], eax

  cmp [ reusedNode + Variant_t.type ], 0
  jnz l3333

  lea  rcx , [ caseHashMap ]
  lea  rdx , [ caseNodeHash ]
  lea  r8 , [ caseNode ]
  call  __MOLD_VariantStoreAtKey

  ; __mold_syscall( 50 )
  lea rcx , [ newChildren ]
  lea rdx , [ caseNode ]
  call qword [rbx + 8 * 50 ]

  lea  rcx, [ tmp3309 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3309 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3318 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3318 + Variant_t.value], 0

  mov [ tmp3319 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ caseValue ]
  mov [ tmp3319 + Variant_t.value], rax

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ tmp3318 ]
  lea  r8 , [ tmp3319 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ caseNode ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantStoreAtKey

  jmp l3334

l3333:

  lea  rcx , [ reusedNode ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp3319 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ caseValue ]
  mov [ tmp3319 + Variant_t.value], rax

  ; __mold_syscall( 50 )
  lea rcx , [ tmp3309 ]
  lea rdx , [ tmp3319 ]
  call qword [rbx + 8 * 50 ]

l3334:

  mov eax, dword [ caseValue ]
  cmp eax, dword [ valueMax ]
  jle l3335

  mov eax, dword [ caseValue ]
  mov dword [ valueMax ], eax

l3335:

l3336:

  mov eax, dword [ caseValue ]
  cmp eax, dword [ valueMin ]
  jge l3337

  mov eax, dword [ caseValue ]
  mov dword [ valueMin ], eax

l3337:

l3338:

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp3309 ]
  push rdi
  lea  rdi , [ tmp3319 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp3310 ], 3

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3309 + Variant_t.value], rax

  lea rcx, [ tmp3319 ]
  lea rdx, [ tmp3309 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3339

  mov dword [ goOn ], 1

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 2

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ currentIfNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 0

  lea  rcx , [ tmp3309 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32

l3339:

l3340:

l3331:

l3332:

l3325:

l3326:

  jmp l3323

l3324:

; 
; END: while
; -----------------------------
; 
  mov dword [ tmp3310 ], 3

  mov eax, dword [ casesCnt ]
  cmp eax, dword [ tmp3310 ]
  jl l3341

  ; __mold_syscall( 43 )
  lea rcx , [ newChildren ]
  push rdi
  lea  rdi , [ tmp3319 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp3310 ], 1

  mov [ tmp3318 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3318 + Variant_t.value], rax

  lea  rcx , [ tmp3319 ]
  lea  rdx , [ tmp3318 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantSub

  cmp [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3309 + Variant_t.value]
  mov dword [ tmp3310 ], eax

  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ lastCaseNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3317 ], 1

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 40

  mov [ tmp3318 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3318 + Variant_t.value], rax

  lea rcx, [ tmp3309 ]
  lea rdx, [ tmp3318 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3343

  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3319 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3310 ], 1

  lea  rcx , [ tmp3319 ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp3309 ]
  lea  rax , [ tmp3318 ]
  call  AST_GetHashForCodeComparison

  lea rcx , [ lastCaseNode ]
  lea  rax , [ tmp3309 ]
  call  AST_GetHashForCodeComparison

  lea  rcx , [ tmp3318 ]
  lea  rdx , [ tmp3309 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp3317 ], eax

l3343:

  cmp dword [ tmp3317 ], 0
  jz l3344

  ; __mold_syscall( 50 )
  lea rcx , [ newChildren ]
  lea rdx , [ currentIfNode ]
  call qword [rbx + 8 * 50 ]

  lea rcx , [ this ]
  lea rdx , [ currentIfNode ]
  call  __ASTOptimizerIf__processNode$1

l3344:

l3345:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3310 ], 50

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3310 ]
  mov [ tmp3309 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ valueMin ]
  mov [ tmp3309 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp3309 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ valueMax ]
  mov [ tmp3309 + Variant_t.value], rax

  lea  rcx , [ node ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp3309 ]
  call  __MOLD_VariantStoreAtKey

l3341:

l3342:

  jmp l3321

l3320:

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3347

l3346:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  call  __ASTOptimizerIf__processNode$1

  ret

l3347:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3346 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
l3321:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3309 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3318 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3319 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3322 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseHashMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ exprHash ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseNodeHash ]
  call __MOLD_VariantDestroy
  lea  rcx, [ reusedNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastCaseNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 368
  pop  rbp
  ret


  restore this
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore cond
  restore tmp3309
  restore tmp3310
  restore tmp3311
  restore tmp3313
  restore tmp3315
  restore tmp3317
  restore tmp3318
  restore tmp3319
  restore tmp3322
  restore tmp3328
  restore tmp3330
  restore newChildren
  restore caseHashMap
  restore exprHash
  restore valueMin
  restore valueMax
  restore goOn
  restore currentIfNode
  restore casesCnt
  restore caseNode
  restore caseValue
  restore caseNodeHash
  restore reusedNode
  restore lastCaseNode
  restore oneChild

; -----------------------------------------------
; function __ASTOptimizerIf_processNode$1
; -----------------------------------------------
__ASTOptimizerIf_processNode$1_vcall:
__ASTOptimizerIf_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTOptimizerIf__processNode$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore node

; -----------------------------------------------
; function __ASTOptimizerInline_constructor$1
; -----------------------------------------------
__ASTOptimizerInline_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 4 , readHits= 3 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp3348 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp3348 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ app ]
  lea  rax , [ tmp3348 ]
  mov  r10d, 1
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6568
  movsxd rax, dword [ tmp3348 + Variant_t.value ]
  mov    qword [ tmp3348 + Variant_t.value ], rax
l6568:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3348 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ app ]
  lea  rax , [ tmp3348 ]
  mov  r10d, 45
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6569
  movsxd rax, dword [ tmp3348 + Variant_t.value ]
  mov    qword [ tmp3348 + Variant_t.value ], rax
l6569:


  lea  rcx , [ this ]
  lea  rdx , [ __literal372 ]
  lea  r8 , [ tmp3348 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3348 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore app
  restore tmp3348

; -----------------------------------------------
; function __ASTOptimizerInline__debug$1
; -----------------------------------------------
__ASTOptimizerInline__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3349 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3350 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp3350 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp3350 ]
  jnz l3351

  lea rcx, [__fmt11 ]
  call __MOLD_PrintFormatFromMemory

l3351:

l3352:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp3349
  restore tmp3350

; -----------------------------------------------
; function __ASTOptimizerInline__expandCallParams$2
; -----------------------------------------------
__ASTOptimizerInline__expandCallParams$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  paramsReplaceMap EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  tmp3356 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3358 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  oneChild EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 6 )
  replacedNode EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp3355 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3357 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3361 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsReplaceMap ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [tmp3356 + Variant_t.type], eax
  mov [tmp3358 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [replacedNode + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys idx values oneChild
; 
  jmp l3354

l3353:

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3356 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3357 ], 52

  mov [ tmp3358 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3357 ]
  mov [ tmp3358 + Variant_t.value], rax

  lea rcx, [ tmp3356 ]
  lea rdx, [ tmp3358 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3359

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3358 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ paramsReplaceMap ]
  lea  rdx , [ tmp3358 ]
  lea  r8 , [ replacedNode ]
  call  __MOLD_VariantLoadFromKey

  cmp [ replacedNode  + Variant_t.type], 0
  jz l3362

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ replacedNode ]
  call  __MOLD_VariantStoreAtIndex_int32

l3362:

l3363:

  jmp l3360

l3359:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  lea r8 , [ paramsReplaceMap ]
  call  __ASTOptimizerInline__expandCallParams$2

l3360:

  ret

l3354:

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3353 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys idx values oneChild
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3356 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3358 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ replacedNode ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore node
  restore paramsReplaceMap
  restore children
  restore tmp3355
  restore tmp3356
  restore tmp3357
  restore tmp3358
  restore tmp3361
  restore idx
  restore oneChild
  restore replacedNode

; -----------------------------------------------
; function __ASTOptimizerInline__processNode$2
; -----------------------------------------------
__ASTOptimizerInline__processNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  symbolTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 1 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 8 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  tmp3365 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3368 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  tmp3372 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp3378 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3388 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3389 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  childNode EQU rbp - 184 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 2 , readHits= 13 )
  funcProto EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  funcBody EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  callNode EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  paramsReplaceMap EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  paramsNodes EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  clonedNode EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  paramName EQU rbp - 296 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3364 EQU rbp - 300 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3371 EQU rbp - 304 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 9 , readHits= 9 )
  tmp3375 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3377 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3383 EQU rbp - 316 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  childIdx EQU rbp - 320 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  paramBaseIdx EQU rbp - 324 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  paramIdx EQU rbp - 328 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 368

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [tmp3365 + Variant_t.type], eax
  mov [tmp3368 + Variant_t.type], eax
  mov [tmp3372 + Variant_t.type], eax
  mov [tmp3378 + Variant_t.type], eax
  mov [tmp3388 + Variant_t.type], eax
  mov [tmp3389 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [funcProto + Variant_t.type], eax
  mov [funcBody + Variant_t.type], eax
  mov [callNode + Variant_t.type], eax
  mov [paramsReplaceMap + Variant_t.type], eax
  mov [paramsNodes + Variant_t.type], eax
  mov [clonedNode + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3365 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3365  + Variant_t.type], 0
  jz l3366

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

l3366:

l3367:

; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l3370

l3369:

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3371 ], 42

  mov [ tmp3372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3371 ]
  mov [ tmp3372 + Variant_t.value], rax

  lea rcx, [ tmp3368 ]
  lea rdx, [ tmp3372 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3373

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3372 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3372 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ funcBody ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3375 ], 0

  cmp [ funcBody  + Variant_t.type], 0
  jz l3376

  mov dword [ tmp3371 ], 0

  lea  rcx , [ funcBody ]
  lea  rdx , [ tmp3371 ]
  lea  r8 , [ tmp3378 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3378 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp3368 ]
  push rdi
  lea  rdi , [ tmp3372 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp3371 ], 1

  mov [ tmp3368 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3371 ]
  mov [ tmp3368 + Variant_t.value], rax

  lea  rcx , [ tmp3372 ]
  lea  rdx , [ tmp3368 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3375 ], eax

l3376:

  cmp dword [ tmp3375 ], 0
  jz l3379

  mov dword [ tmp3371 ], 0

  lea  rcx , [ funcBody ]
  lea  rdx , [ tmp3371 ]
  lea  r8 , [ tmp3372 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3372 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3371 ], 0

  lea  rcx , [ tmp3368 ]
  lea  rdx , [ tmp3371 ]
  lea  r8 , [ callNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ callNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3371 ], 42

  mov [ tmp3372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3371 ]
  mov [ tmp3372 + Variant_t.value], rax

  lea rcx, [ tmp3368 ]
  lea rdx, [ tmp3372 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3381

  lea  rcx, [ paramsReplaceMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ paramsReplaceMap ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ paramsNodes ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3372 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3372  + Variant_t.type], 0
  jz l3384

  mov dword [ paramBaseIdx ], 1

  mov dword [ tmp3371 ], 0

  lea  rcx , [ paramsNodes ]
  lea  rdx , [ tmp3371 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ paramsReplaceMap ]
  lea  rdx , [ __literal233 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantStoreAtKey

  jmp l3385

l3384:

  mov dword [ paramBaseIdx ], 0

l3385:

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys paramIdx values paramName
; 
  jmp l3387

l3386:

  mov eax, dword [ paramBaseIdx ]
  add eax, dword [ paramIdx ]
  mov dword [ tmp3371 ], eax

  lea  rcx , [ paramsNodes ]
  lea  rdx , [ tmp3371 ]
  lea  r8 , [ tmp3378 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ paramsReplaceMap ]
  lea  rdx , [ paramName ]
  lea  r8 , [ tmp3378 ]
  call  __MOLD_VariantStoreAtKey

  ret

l3387:

  lea  rcx , [ tmp3368 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramName ]
  lea  r9 , [ l3386 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys paramIdx values paramName
; -----------------------------
; 
  lea rcx , [ callNode ]
  lea  rax , [ clonedNode ]
  call  AST_CloneNode

  lea rcx , [ this ]
  lea rdx , [ clonedNode ]
  lea r8 , [ paramsReplaceMap ]
  call  __ASTOptimizerInline__expandCallParams$2

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ clonedNode ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3389 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3389 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp3388 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3371 ], 1

  mov [ tmp3389 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3371 ]
  mov [ tmp3389 + Variant_t.value], rax

  lea  rcx , [ tmp3388 ]
  lea  rdx , [ tmp3389 ]
  lea  r8 , [ tmp3378 ]
  call  __MOLD_VariantSub

  lea  rcx , [ tmp3368 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp3378 ]
  call  __MOLD_VariantStoreAtKey

l3381:

l3382:

l3379:

l3380:

  jmp l3374

l3373:

  lea rcx , [ this ]
  lea rdx , [ symbolTable ]
  lea r8 , [ childNode ]
  call  __ASTOptimizerInline__processNode$2

l3374:

  ret

l3370:

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3369 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys childIdx values childNode
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3365 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3368 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3372 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3378 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3388 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3389 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcBody ]
  call __MOLD_VariantDestroy
  lea  rcx, [ callNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsReplaceMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsNodes ]
  call __MOLD_VariantDestroy
  lea  rcx, [ clonedNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramName

  add  rsp, 368
  pop  rbp
  ret


  restore this
  restore symbolTable
  restore node
  restore children
  restore tmp3364
  restore tmp3365
  restore tmp3368
  restore tmp3371
  restore tmp3372
  restore tmp3375
  restore tmp3377
  restore tmp3378
  restore tmp3383
  restore tmp3388
  restore tmp3389
  restore childIdx
  restore childNode
  restore funcProto
  restore funcBody
  restore callNode
  restore paramsReplaceMap
  restore paramsNodes
  restore paramBaseIdx
  restore clonedNode
  restore paramIdx
  restore paramName

; -----------------------------------------------
; function __ASTOptimizerInline_processNode$1
; -----------------------------------------------
__ASTOptimizerInline_processNode$1_vcall:
__ASTOptimizerInline_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp3390 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp3390 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3390 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp3390 ]
  lea r8 , [ node ]
  call  __ASTOptimizerInline__processNode$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3390 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore node
  restore tmp3390

; -----------------------------------------------
; function __ASTTypeCast_constructor$1
; -----------------------------------------------
__ASTTypeCast_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore app

; -----------------------------------------------
; function __ASTTypeCast__debug$1
; -----------------------------------------------
__ASTTypeCast__debug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3391 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3392 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp3392 ], 1

  mov eax, dword [ DEBUG_AST_OPTIMIZER ]
  cmp eax, dword [ tmp3392 ]
  jnz l3393

  lea rcx, [__fmt12 ]
  call __MOLD_PrintFormatFromMemory

l3393:

l3394:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp3391
  restore tmp3392

; -----------------------------------------------
; function __ASTTypeCast__processNode$1
; -----------------------------------------------
__ASTTypeCast__processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 24 )
  tmp3395 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 24 , readHits= 24 )
  tmp3406 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 35 , readHits= 35 )
  tmp3433 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3434 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3435 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3436 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3437 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3438 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3465 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  children EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 20 , readHits= 60 )
  childrenCnt EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  oneChild EQU rbp - 232 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  x EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  y EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  funcProto EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  astTypeParams EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  classProto EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  childNode EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  opcode EQU rbp - 332 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 19 )
  tmp3396 EQU rbp - 336 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 47 , readHits= 47 )
  tmp3397 EQU rbp - 340 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3402 EQU rbp - 344 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3405 EQU rbp - 348 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3409 EQU rbp - 352 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp3413 EQU rbp - 356 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp3416 EQU rbp - 360 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 26 , readHits= 26 )
  tmp3420 EQU rbp - 364 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3422 EQU rbp - 368 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3424 EQU rbp - 372 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3426 EQU rbp - 376 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3454 EQU rbp - 380 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3457 EQU rbp - 384 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3462 EQU rbp - 388 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp3466 EQU rbp - 392 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 9 , readHits= 9 )
  tmp3467 EQU rbp - 396 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3469 EQU rbp - 400 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3487 EQU rbp - 404 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  astDataTypeLeft EQU rbp - 408 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  astDataTypeRight EQU rbp - 412 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  xType EQU rbp - 416 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  yType EQU rbp - 420 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  firstParamIdx EQU rbp - 424 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  idx EQU rbp - 428 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )
  childOpcode EQU rbp - 432 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 464

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp3395 + Variant_t.type], eax
  mov [tmp3406 + Variant_t.type], eax
  mov [tmp3433 + Variant_t.type], eax
  mov [tmp3434 + Variant_t.type], eax
  mov [tmp3435 + Variant_t.type], eax
  mov [tmp3436 + Variant_t.type], eax
  mov [tmp3437 + Variant_t.type], eax
  mov [tmp3438 + Variant_t.type], eax
  mov [tmp3465 + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [funcProto + Variant_t.type], eax
  mov [astTypeParams + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [childNode + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3395 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp3396 ], 77

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jz l3398

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l3401

l3400:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  call  __ASTTypeCast__processNode$1

  ret

l3401:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3400 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp3396 ], 56

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3403

  mov dword [ tmp3396 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3396 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3396 ], 52

  mov [ tmp3406 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3396 ]
  mov [ tmp3406 + Variant_t.value], rax

  lea rcx, [ tmp3395 ]
  lea rdx, [ tmp3406 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3407

  lea rcx , [ x ]
  lea  rax , [ astDataTypeLeft ]
  call  AST_GetDataType

  lea rcx , [ y ]
  lea  rax , [ astDataTypeRight ]
  call  AST_GetDataType

  mov eax, dword [ astDataTypeLeft ]
  cmp eax, dword [ astDataTypeRight ]
  jz l3410

  mov dword [ tmp3396 ], 1

  lea rcx , [ y ]
  mov edx , dword [ astDataTypeLeft ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

l3410:

l3411:

  jmp l3408

l3407:

  mov dword [ tmp3409 ], 1

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3396 ], 54

  mov [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3396 ]
  mov [ tmp3395 + Variant_t.value], rax

  lea rcx, [ tmp3406 ]
  lea rdx, [ tmp3395 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3412

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3396 ], 55

  mov [ tmp3406 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3396 ]
  mov [ tmp3406 + Variant_t.value], rax

  lea  rcx , [ tmp3395 ]
  lea  rdx , [ tmp3406 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3409 ], eax

l3412:

  cmp dword [ tmp3409 ], 0
  jz l3414

  mov dword [ tmp3396 ], 1

  mov dword [ tmp3416 ], -1

  lea rcx , [ y ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

l3414:

l3415:

l3408:

  jmp l3404

l3403:

  mov dword [ tmp3405 ], 1

  mov dword [ tmp3396 ], 58

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jz l3417

  mov dword [ tmp3409 ], 1

  mov dword [ tmp3396 ], 60

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jz l3418

  mov dword [ tmp3413 ], 1

  mov dword [ tmp3396 ], 59

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jz l3419

  mov dword [ tmp3420 ], 1

  mov dword [ tmp3396 ], 61

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jz l3421

  mov dword [ tmp3422 ], 1

  mov dword [ tmp3396 ], 64

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jz l3423

  mov dword [ tmp3424 ], 0

  mov dword [ tmp3396 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jl l3425

  mov dword [ tmp3396 ], 71

  mov dword [ tmp3424 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3396 ]
  setle byte [ tmp3424 ]

l3425:

  mov eax, dword [ tmp3424 ]
  mov dword [ tmp3422 ], eax

l3423:

  mov eax, dword [ tmp3422 ]
  mov dword [ tmp3420 ], eax

l3421:

  mov eax, dword [ tmp3420 ]
  mov dword [ tmp3413 ], eax

l3419:

  mov eax, dword [ tmp3413 ]
  mov dword [ tmp3409 ], eax

l3418:

  mov eax, dword [ tmp3409 ]
  mov dword [ tmp3405 ], eax

l3417:

  cmp dword [ tmp3405 ], 0
  jz l3427

  mov dword [ tmp3396 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3396 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ x ]
  lea  rax , [ xType ]
  call  AST_GetDataType

  lea rcx , [ y ]
  lea  rax , [ yType ]
  call  AST_GetDataType

  mov eax, dword [ xType ]
  cmp eax, dword [ yType ]
  jz l3429

  mov dword [ tmp3396 ], -1

  mov eax, dword [ xType ]
  cmp eax, dword [ tmp3396 ]
  jnz l3431

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3395 ]
  push rdi
  lea  rdi , [ tmp3406 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3438 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal375 ]
  lea  rdx , [ tmp3406 ]
  lea  r8 , [ tmp3438 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3437 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3438 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp3437 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ xType ]
  mov [ tmp3395 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3395 ]
  push rdi
  lea  rdi , [ tmp3406 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3436 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3437 ]
  lea  rdx , [ tmp3406 ]
  lea  r8 , [ tmp3436 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3436 ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ tmp3435 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ yType ]
  mov [ tmp3395 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3395 ]
  push rdi
  lea  rdi , [ tmp3406 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3434 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3435 ]
  lea  rdx , [ tmp3406 ]
  lea  r8 , [ tmp3434 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3433 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3434 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3433 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3433 ]
  call  __ASTTypeCast__debug$1

  mov dword [ tmp3396 ], 1

  lea rcx , [ y ]
  mov edx , dword [ xType ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3432

l3431:

  mov dword [ tmp3396 ], -1

  mov eax, dword [ yType ]
  cmp eax, dword [ tmp3396 ]
  jnz l3439

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3395 ]
  push rdi
  lea  rdi , [ tmp3406 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3438 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal375 ]
  lea  rdx , [ tmp3406 ]
  lea  r8 , [ tmp3438 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3437 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3438 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp3437 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ xType ]
  mov [ tmp3395 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3395 ]
  push rdi
  lea  rdi , [ tmp3406 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3436 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3437 ]
  lea  rdx , [ tmp3406 ]
  lea  r8 , [ tmp3436 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3436 ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ tmp3435 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ yType ]
  mov [ tmp3395 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3395 ]
  push rdi
  lea  rdi , [ tmp3406 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3434 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3435 ]
  lea  rdx , [ tmp3406 ]
  lea  r8 , [ tmp3434 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3433 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3434 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3433 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp3433 ]
  call  __ASTTypeCast__debug$1

  mov dword [ tmp3396 ], 0

  lea rcx , [ x ]
  mov edx , dword [ yType ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3440

l3439:

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal377
  lea rcx , [ __literal377 ]
  call qword [rbx + 8 * 41 ]

l3440:

l3432:

l3429:

l3430:

  jmp l3428

l3427:

  mov dword [ tmp3409 ], 1

  mov dword [ tmp3396 ], 72

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jz l3441

  mov dword [ tmp3396 ], 73

  mov dword [ tmp3409 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3396 ]
  setz byte [ tmp3409 ]

l3441:

  cmp dword [ tmp3409 ], 0
  jz l3442

  mov dword [ tmp3396 ], 0

  mov dword [ tmp3416 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 5

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3396 ], 1

  mov dword [ tmp3416 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 5

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3443

l3442:

  mov dword [ tmp3396 ], 65

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3444

  mov dword [ tmp3396 ], 0

  mov dword [ tmp3416 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 4

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3396 ], 1

  mov dword [ tmp3416 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 4

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3445

l3444:

  mov dword [ tmp3396 ], 54

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3446

  mov dword [ tmp3396 ], 1

  mov dword [ tmp3416 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 1

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3447

l3446:

  mov dword [ tmp3396 ], 55

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3448

  mov dword [ tmp3396 ], 1

  mov dword [ tmp3416 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 4

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3449

l3448:

  mov dword [ tmp3396 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3450

  mov dword [ tmp3396 ], 1

  mov dword [ tmp3416 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 1

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3396 ], 2

  mov dword [ tmp3416 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 1

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3396 ], 3

  mov dword [ tmp3416 ], 3

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 1

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3451

l3450:

  mov dword [ tmp3396 ], 50

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3452

  mov dword [ tmp3396 ], 0

  mov dword [ tmp3416 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3416 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3416 ], 1

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3416 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ tmp3396 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3453

l3452:

  mov dword [ tmp3396 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3455

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp3406 ]
  lea rdx, [ __literal249 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3458

  lea  rcx , [ node ]
  lea  rdx , [ __literal250 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ firstParamIdx ], 1

  jmp l3459

l3458:

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3406 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ firstParamIdx ], 0

l3459:

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal235 ]
  lea  r8 , [ astTypeParams ]
  call  __MOLD_VariantLoadFromKey

  cmp [ astTypeParams  + Variant_t.type], 0
  jz l3460

  mov dword [ tmp3396 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3416 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3462 .. tmp3416
; 
l3463:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3416 ]
  jge l3464

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov eax, dword [ firstParamIdx ]
  add eax, dword [ idx ]
  mov dword [ tmp3466 ], eax

  lea  rcx , [ astTypeParams ]
  lea  rdx , [ tmp3466 ]
  lea  r8 , [ tmp3465 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp3465 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3465 + Variant_t.value]
  mov dword [ tmp3466 ], eax

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3466 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp3396 ]
  mov dword [ idx ], eax

  jmp l3463

l3464:

; 
; END: for idx in tmp3462 .. tmp3416 step tmp3396
; -----------------------------
; 
  jmp l3461

l3460:

  mov dword [ tmp3467 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp3406 ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3468

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3406 ]
  lea  rdx , [ __literal16 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp3467 ], eax

l3468:

  cmp dword [ tmp3467 ], 0
  jz l3470

  mov dword [ tmp3462 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3416 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3396 .. tmp3416
; 
l3472:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3416 ]
  jge l3473

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3466 ], -1

  lea rcx , [ tmp3395 ]
  mov edx , dword [ tmp3466 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp3462 ]
  mov dword [ idx ], eax

  jmp l3472

l3473:

; 
; END: for idx in tmp3396 .. tmp3416 step tmp3462
; -----------------------------
; 
l3470:

l3471:

l3461:

  jmp l3456

l3455:

  mov dword [ tmp3396 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3396 ]
  jnz l3474

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3465 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3395 ]
  lea rdx , [ tmp3465 ]
  lea  rax , [ tmp3406 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6570
  movsxd rax, dword [ tmp3406 + Variant_t.value ]
  mov    qword [ tmp3406 + Variant_t.value ], rax
l6570:


  lea  rcx , [ tmp3406 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3406 ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ funcProto  + Variant_t.type], 0
  jz l3476

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal235 ]
  lea  r8 , [ astTypeParams ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3396 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3416 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3462 .. tmp3416
; 
l3478:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3416 ]
  jge l3479

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3465 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ astTypeParams ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3395 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp3395 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3395 + Variant_t.value]
  mov dword [ tmp3466 ], eax

  lea rcx , [ tmp3465 ]
  mov edx , dword [ tmp3466 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp3396 ]
  mov dword [ idx ], eax

  jmp l3478

l3479:

; 
; END: for idx in tmp3462 .. tmp3416 step tmp3396
; -----------------------------
; 
l3476:

l3477:

  jmp l3475

l3474:

  mov dword [ tmp3462 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3462 ]
  jnz l3480

  mov dword [ tmp3462 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3416 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3396 .. tmp3416
; 
l3482:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3416 ]
  jge l3483

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3465 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3466 ], -1

  lea rcx , [ tmp3465 ]
  mov edx , dword [ tmp3466 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp3462 ]
  mov dword [ idx ], eax

  jmp l3482

l3483:

; 
; END: for idx in tmp3396 .. tmp3416 step tmp3462
; -----------------------------
; 
  jmp l3481

l3480:

  mov dword [ tmp3396 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3416 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3462 .. tmp3416
; 
l3484:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3416 ]
  jge l3485

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ childNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3406 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3406 + Variant_t.value]
  mov dword [ childOpcode ], eax

  mov dword [ tmp3469 ], 0

  mov dword [ tmp3466 ], 66

  mov eax, dword [ childOpcode ]
  cmp eax, dword [ tmp3466 ]
  jl l3486

  mov dword [ tmp3466 ], 74

  mov dword [ tmp3469 ], 0
  mov ecx, dword [ childOpcode ]
  cmp ecx, dword [ tmp3466 ]
  setle byte [ tmp3469 ]

l3486:

  cmp dword [ tmp3469 ], 0
  jz l3488

  mov dword [ tmp3466 ], 5

  lea rcx , [ childNode ]
  mov edx , dword [ tmp3466 ]
  lea  rax , [ tmp3406 ]
  call  AST_TypeCast

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3406 ]
  call  __MOLD_VariantStoreAtIndex_int32

l3488:

l3489:

  mov eax, dword [ idx ]
  add eax, dword [ tmp3396 ]
  mov dword [ idx ], eax

  jmp l3484

l3485:

; 
; END: for idx in tmp3462 .. tmp3416 step tmp3396
; -----------------------------
; 
l3481:

l3475:

l3456:

l3453:

l3451:

l3449:

l3447:

l3445:

l3443:

l3428:

l3404:

l3398:

l3399:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3395 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3406 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3433 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3434 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3436 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3437 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3438 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3465 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTypeParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy

  add  rsp, 464
  pop  rbp
  ret


  restore this
  restore node
  restore opcode
  restore tmp3395
  restore tmp3396
  restore tmp3397
  restore tmp3402
  restore tmp3405
  restore tmp3406
  restore tmp3409
  restore tmp3413
  restore tmp3416
  restore tmp3420
  restore tmp3422
  restore tmp3424
  restore tmp3426
  restore tmp3433
  restore tmp3434
  restore tmp3435
  restore tmp3436
  restore tmp3437
  restore tmp3438
  restore tmp3454
  restore tmp3457
  restore tmp3462
  restore tmp3465
  restore tmp3466
  restore tmp3467
  restore tmp3469
  restore tmp3487
  restore children
  restore childrenCnt
  restore oneChild
  restore x
  restore y
  restore astDataTypeLeft
  restore astDataTypeRight
  restore xType
  restore yType
  restore funcProto
  restore firstParamIdx
  restore astTypeParams
  restore idx
  restore classProto
  restore childNode
  restore childOpcode

; -----------------------------------------------
; function __ASTTypeCast_processNode$1
; -----------------------------------------------
__ASTTypeCast_processNode$1_vcall:
__ASTTypeCast_processNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTTypeCast__processNode$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore node

; -----------------------------------------------
; function __MIRCode_constructor$0
; -----------------------------------------------
__MIRCode_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 22 , readHits= 21 )
  tmp3490 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 21 , readHits= 21 )
  tmp3491 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 11 , readHits= 11 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3490 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal381 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], -1

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], -1

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal387 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal388 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal390 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal392 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal394 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3490 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal396 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3491 ], 0

  mov [ tmp3490 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3490 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ tmp3490 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3490
  restore tmp3491

; -----------------------------------------------
; function __MIRCode_beginProc$4
; -----------------------------------------------
__MIRCode_beginProc$4_vcall:
__MIRCode_beginProc$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 7 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  params EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3492 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3493 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3495 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3496 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3494 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ params ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramsCnt ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ rv ], xmm0
  xor eax, eax
  mov [tmp3492 + Variant_t.type], eax
  mov [tmp3493 + Variant_t.type], eax
  mov [tmp3495 + Variant_t.type], eax
  mov [tmp3496 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ tmp3492 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3493 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3493 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3493 + Variant_t.value]
  mov dword [ tmp3494 ], eax

  lea  rcx, [ tmp3493 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3493 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp3495 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3495 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3493 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3495 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3495 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3493 ]
  lea  rdx , [ __literal398 ]
  lea  r8 , [ tmp3495 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3495 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3495 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3493 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp3495 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3495 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3495 ]
  lea rdx, [ paramsCnt ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3493 ]
  lea  rdx , [ __literal399 ]
  lea  r8 , [ tmp3495 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3495 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3495 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3493 ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp3495 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ tmp3492 ]
  lea  rdx , [ tmp3494 ]
  lea  r8 , [ tmp3493 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3494 ], -1

  mov [ tmp3493 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3494 ]
  mov [ tmp3493 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ tmp3493 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3494 ], -1

  mov [ tmp3493 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3494 ]
  mov [ tmp3493 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3493 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3492 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3493 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3495 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3496 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore name
  restore params
  restore paramsCnt
  restore rv
  restore tmp3492
  restore tmp3493
  restore tmp3494
  restore tmp3495
  restore tmp3496

; -----------------------------------------------
; function __MIRCode_endProc$0
; -----------------------------------------------
__MIRCode_endProc$0_vcall:
__MIRCode_endProc$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 13 )
  proto EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 5 )
  __cse25 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  __cse26 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3497 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp3499 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3500 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3498 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [proto + Variant_t.type], eax
  mov [__cse25 + Variant_t.type], eax
  mov [__cse26 + Variant_t.type], eax
  mov [tmp3497 + Variant_t.type], eax
  mov [tmp3499 + Variant_t.type], eax
  mov [tmp3500 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ __cse26 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ tmp3497 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ __cse26 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ __cse26 + Variant_t.value]
  mov dword [ tmp3498 ], eax

  lea  rcx , [ tmp3497 ]
  lea  rdx , [ tmp3498 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ __cse25 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ proto ]
  lea  rdx , [ __literal400 ]
  lea  r8 , [ __cse25 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3499 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3498 ], 1

  mov [ tmp3500 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3498 ]
  mov [ tmp3500 + Variant_t.value], rax

  lea  rcx , [ tmp3499 ]
  lea  rdx , [ tmp3500 ]
  lea  r8 , [ tmp3497 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ proto ]
  lea  rdx , [ __literal401 ]
  lea  r8 , [ tmp3497 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ proto ]
  lea  rdx , [ __literal398 ]
  lea  r8 , [ tmp3500 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ __cse25 ]
  lea  rdx , [ tmp3500 ]
  lea  r8 , [ tmp3497 ]
  call  __MOLD_VariantSub

  lea  rcx , [ proto ]
  lea  rdx , [ __literal402 ]
  lea  r8 , [ tmp3497 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp3498 ], 1

  mov [ tmp3500 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3498 ]
  mov [ tmp3500 + Variant_t.value], rax

  lea  rcx , [ __cse26 ]
  lea  rdx , [ tmp3500 ]
  lea  r8 , [ tmp3497 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3497 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse25 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse26 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3497 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3499 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3500 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore proto
  restore __cse25
  restore __cse26
  restore tmp3497
  restore tmp3498
  restore tmp3499
  restore tmp3500

; -----------------------------------------------
; function __MIRCode_resolveLabel$1
; -----------------------------------------------
__MIRCode_resolveLabel$1_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__MIRCode_resolveLabel$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp3501 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  labelId EQU rbp - 44 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ labelId ], edx
  xor eax, eax
  mov [tmp3501 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp3501 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3501 ]
  lea  rdx , [ labelId ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3501 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore labelId
  restore rv
  restore tmp3501

; -----------------------------------------------
; function __MIRCode__resolveJmps$0
; -----------------------------------------------
__MIRCode__resolveJmps$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 10 )
  unresolvedJmps EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  unresolvedJmpsCnt EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  newUnresolvedJmps EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  labels EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  code EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  tmp3507 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3509 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  newUnresolvedJmpsCnt EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  tmp3502 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3503 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3504 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3508 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp3510 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 164 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  sourceIp EQU rbp - 168 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  labelId EQU rbp - 172 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  targetIp EQU rbp - 176 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [unresolvedJmps + Variant_t.type], eax
  mov [unresolvedJmpsCnt + Variant_t.type], eax
  mov [newUnresolvedJmps + Variant_t.type], eax
  mov [labels + Variant_t.type], eax
  mov [code + Variant_t.type], eax
  mov [tmp3507 + Variant_t.type], eax
  mov [tmp3509 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal396 ]
  lea  r8 , [ unresolvedJmps ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ unresolvedJmpsCnt ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ newUnresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newUnresolvedJmps ]
  call  __MOLD_VariantArrayCreate

  mov dword [ newUnresolvedJmpsCnt ], 0

  lea  rcx , [ this ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ labels ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3502 ], 1

  cmp [ unresolvedJmpsCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ unresolvedJmpsCnt + Variant_t.value]
  mov dword [ tmp3503 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp3504 .. tmp3503
; 
l3505:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3503 ]
  jge l3506

  lea  rcx , [ unresolvedJmps ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3507 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp3507 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3507 + Variant_t.value]
  mov dword [ sourceIp ], eax

  lea  rcx , [ code ]
  lea  rdx , [ sourceIp ]
  lea  r8 , [ tmp3509 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3508 ], 1

  lea  rcx , [ tmp3509 ]
  lea  rdx , [ tmp3508 ]
  lea  r8 , [ tmp3507 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp3507 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3507 + Variant_t.value]
  mov dword [ labelId ], eax

  lea  rcx , [ labels ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3507 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp3507 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3507 + Variant_t.value]
  mov dword [ targetIp ], eax

  mov dword [ tmp3508 ], 0

  mov eax, dword [ targetIp ]
  cmp eax, dword [ tmp3508 ]
  jl l3511

  lea  rcx , [ code ]
  lea  rdx , [ sourceIp ]
  lea  r8 , [ tmp3507 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3508 ], 1

  mov [ tmp3509 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ targetIp ]
  mov [ tmp3509 + Variant_t.value], rax

  lea  rcx , [ tmp3507 ]
  lea  rdx , [ tmp3508 ]
  lea  r8 , [ tmp3509 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l3512

l3511:

  mov [ tmp3509 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ sourceIp ]
  mov [ tmp3509 + Variant_t.value], rax

  lea  rcx , [ newUnresolvedJmps ]
  lea  rdx , [ newUnresolvedJmpsCnt ]
  lea  r8 , [ tmp3509 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3508 ], 1

  mov eax, dword [ newUnresolvedJmpsCnt ]
  add eax, dword [ tmp3508 ]
  mov dword [ newUnresolvedJmpsCnt ], eax

l3512:

  mov eax, dword [ idx ]
  add eax, dword [ tmp3502 ]
  mov dword [ idx ], eax

  jmp l3505

l3506:

; 
; END: for idx in tmp3504 .. tmp3503 step tmp3502
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal396 ]
  lea  r8 , [ newUnresolvedJmps ]
  call  __MOLD_VariantStoreAtKey

  mov [ tmp3509 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newUnresolvedJmpsCnt ]
  mov [ tmp3509 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ tmp3509 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ unresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unresolvedJmpsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newUnresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3507 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3509 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore this
  restore unresolvedJmps
  restore unresolvedJmpsCnt
  restore newUnresolvedJmps
  restore newUnresolvedJmpsCnt
  restore labels
  restore code
  restore tmp3502
  restore tmp3503
  restore tmp3504
  restore tmp3507
  restore tmp3508
  restore tmp3509
  restore tmp3510
  restore idx
  restore sourceIp
  restore labelId
  restore targetIp

; -----------------------------------------------
; function __MIRCode_comment$1
; -----------------------------------------------
__MIRCode_comment$1_vcall:
__MIRCode_comment$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 8 )
  msg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3513 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3514 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3516 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3517 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3518 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3515 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  xor eax, eax
  mov [tmp3513 + Variant_t.type], eax
  mov [tmp3514 + Variant_t.type], eax
  mov [tmp3516 + Variant_t.type], eax
  mov [tmp3517 + Variant_t.type], eax
  mov [tmp3518 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal394 ]
  lea  r8 , [ tmp3513 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3514 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3514 + Variant_t.value]
  mov dword [ tmp3515 ], eax

  lea  rcx, [ tmp3514 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3514 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3516 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3516 + Variant_t.value], 0

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3517 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3514 ]
  lea  rdx , [ tmp3516 ]
  lea  r8 , [ tmp3517 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3516 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3516 + Variant_t.value], 1

  lea  rcx, [ tmp3517 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3517 ]
  lea rdx, [ msg ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3514 ]
  lea  rdx , [ tmp3516 ]
  lea  r8 , [ tmp3517 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ tmp3513 ]
  lea  rdx , [ tmp3515 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ tmp3513 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3515 ], 1

  mov [ tmp3517 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3515 ]
  mov [ tmp3517 + Variant_t.value], rax

  lea  rcx , [ tmp3513 ]
  lea  rdx , [ tmp3517 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3513 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3514 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3516 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3517 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3518 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore msg
  restore tmp3513
  restore tmp3514
  restore tmp3515
  restore tmp3516
  restore tmp3517
  restore tmp3518

; -----------------------------------------------
; function __MIRCode_push0$1
; -----------------------------------------------
__MIRCode_push0$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 6 )
  op EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3519 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3520 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3522 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3523 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3521 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  xor eax, eax
  mov [tmp3519 + Variant_t.type], eax
  mov [tmp3520 + Variant_t.type], eax
  mov [tmp3522 + Variant_t.type], eax
  mov [tmp3523 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3519 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3520 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3520 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3520 + Variant_t.value]
  mov dword [ tmp3521 ], eax

  lea  rcx, [ tmp3520 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3520 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3522 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3522 + Variant_t.value], 0

  lea  rcx, [ tmp3523 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3523 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3520 ]
  lea  rdx , [ tmp3522 ]
  lea  r8 , [ tmp3523 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ tmp3519 ]
  lea  rdx , [ tmp3521 ]
  lea  r8 , [ tmp3520 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3519 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3521 ], 1

  mov [ tmp3523 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3521 ]
  mov [ tmp3523 + Variant_t.value], rax

  lea  rcx , [ tmp3519 ]
  lea  rdx , [ tmp3523 ]
  lea  r8 , [ tmp3520 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3520 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3519 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3520 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3522 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3523 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore op
  restore tmp3519
  restore tmp3520
  restore tmp3521
  restore tmp3522
  restore tmp3523

; -----------------------------------------------
; function __MIRCode_push1$2
; -----------------------------------------------
__MIRCode_push1$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 6 )
  op EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  arg EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3524 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3525 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3527 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3528 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3526 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg ], xmm0
  xor eax, eax
  mov [tmp3524 + Variant_t.type], eax
  mov [tmp3525 + Variant_t.type], eax
  mov [tmp3527 + Variant_t.type], eax
  mov [tmp3528 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3524 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3525 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3525 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3525 + Variant_t.value]
  mov dword [ tmp3526 ], eax

  lea  rcx, [ tmp3525 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3525 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3527 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3527 + Variant_t.value], 0

  lea  rcx, [ tmp3528 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3528 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3525 ]
  lea  rdx , [ tmp3527 ]
  lea  r8 , [ tmp3528 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3527 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3527 + Variant_t.value], 1

  lea  rcx, [ tmp3528 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3528 ]
  lea rdx, [ arg ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3525 ]
  lea  rdx , [ tmp3527 ]
  lea  r8 , [ tmp3528 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ tmp3524 ]
  lea  rdx , [ tmp3526 ]
  lea  r8 , [ tmp3525 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3524 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3526 ], 1

  mov [ tmp3528 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3526 ]
  mov [ tmp3528 + Variant_t.value], rax

  lea  rcx , [ tmp3524 ]
  lea  rdx , [ tmp3528 ]
  lea  r8 , [ tmp3525 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3525 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3524 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3525 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3527 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3528 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore op
  restore arg
  restore tmp3524
  restore tmp3525
  restore tmp3526
  restore tmp3527
  restore tmp3528

; -----------------------------------------------
; function __MIRCode_push2$3
; -----------------------------------------------
__MIRCode_push2$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 6 )
  op EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  arg1 EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  arg2 EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3529 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3530 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3532 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3533 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3531 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ arg2 ], xmm0
  xor eax, eax
  mov [tmp3529 + Variant_t.type], eax
  mov [tmp3530 + Variant_t.type], eax
  mov [tmp3532 + Variant_t.type], eax
  mov [tmp3533 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3529 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3530 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3530 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3530 + Variant_t.value]
  mov dword [ tmp3531 ], eax

  lea  rcx, [ tmp3530 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3530 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3532 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3532 + Variant_t.value], 0

  lea  rcx, [ tmp3533 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3533 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3530 ]
  lea  rdx , [ tmp3532 ]
  lea  r8 , [ tmp3533 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3532 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3532 + Variant_t.value], 1

  lea  rcx, [ tmp3533 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3533 ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3530 ]
  lea  rdx , [ tmp3532 ]
  lea  r8 , [ tmp3533 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3532 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3532 + Variant_t.value], 2

  lea  rcx, [ tmp3533 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3533 ]
  lea rdx, [ arg2 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3530 ]
  lea  rdx , [ tmp3532 ]
  lea  r8 , [ tmp3533 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ tmp3529 ]
  lea  rdx , [ tmp3531 ]
  lea  r8 , [ tmp3530 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3529 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3531 ], 1

  mov [ tmp3533 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3531 ]
  mov [ tmp3533 + Variant_t.value], rax

  lea  rcx , [ tmp3529 ]
  lea  rdx , [ tmp3533 ]
  lea  r8 , [ tmp3530 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3530 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3529 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3530 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3532 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3533 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore op
  restore arg1
  restore arg2
  restore tmp3529
  restore tmp3530
  restore tmp3531
  restore tmp3532
  restore tmp3533

; -----------------------------------------------
; function __MIRCode_push3$4
; -----------------------------------------------
__MIRCode_push3$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 6 )
  op EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  arg1 EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  arg2 EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  arg3 EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3534 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3535 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3537 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3538 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3536 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ arg2 ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ arg3 ], xmm0
  xor eax, eax
  mov [tmp3534 + Variant_t.type], eax
  mov [tmp3535 + Variant_t.type], eax
  mov [tmp3537 + Variant_t.type], eax
  mov [tmp3538 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3534 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3535 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3535 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3535 + Variant_t.value]
  mov dword [ tmp3536 ], eax

  lea  rcx, [ tmp3535 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3535 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp3537 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3537 + Variant_t.value], 0

  lea  rcx, [ tmp3538 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3538 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3535 ]
  lea  rdx , [ tmp3537 ]
  lea  r8 , [ tmp3538 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3537 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3537 + Variant_t.value], 1

  lea  rcx, [ tmp3538 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3538 ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3535 ]
  lea  rdx , [ tmp3537 ]
  lea  r8 , [ tmp3538 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3537 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3537 + Variant_t.value], 2

  lea  rcx, [ tmp3538 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3538 ]
  lea rdx, [ arg2 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3535 ]
  lea  rdx , [ tmp3537 ]
  lea  r8 , [ tmp3538 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp3537 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3537 + Variant_t.value], 3

  lea  rcx, [ tmp3538 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3538 ]
  lea rdx, [ arg3 ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp3535 ]
  lea  rdx , [ tmp3537 ]
  lea  r8 , [ tmp3538 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ tmp3534 ]
  lea  rdx , [ tmp3536 ]
  lea  r8 , [ tmp3535 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3534 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3536 ], 1

  mov [ tmp3538 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3536 ]
  mov [ tmp3538 + Variant_t.value], rax

  lea  rcx , [ tmp3534 ]
  lea  rdx , [ tmp3538 ]
  lea  r8 , [ tmp3535 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3535 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3534 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3535 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3537 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3538 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore op
  restore arg1
  restore arg2
  restore arg3
  restore tmp3534
  restore tmp3535
  restore tmp3536
  restore tmp3537
  restore tmp3538

; -----------------------------------------------
; function __MIRCode_nop$0
; -----------------------------------------------
__MIRCode_nop$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3540 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3539 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3540 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3539 ], 0

  mov [ tmp3540 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3539 ]
  mov [ tmp3540 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3540 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3540 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3539
  restore tmp3540

; -----------------------------------------------
; function __MIRCode_neg$0
; -----------------------------------------------
__MIRCode_neg$0_vcall:
__MIRCode_neg$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3542 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3541 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3542 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3541 ], 1

  mov [ tmp3542 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3541 ]
  mov [ tmp3542 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3542 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3542 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3541
  restore tmp3542

; -----------------------------------------------
; function __MIRCode_add$0
; -----------------------------------------------
__MIRCode_add$0_vcall:
__MIRCode_add$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3544 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3543 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3544 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3543 ], 2

  mov [ tmp3544 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3543 ]
  mov [ tmp3544 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3544 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3544 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3543
  restore tmp3544

; -----------------------------------------------
; function __MIRCode_sub$0
; -----------------------------------------------
__MIRCode_sub$0_vcall:
__MIRCode_sub$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3546 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3545 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3546 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3545 ], 3

  mov [ tmp3546 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3545 ]
  mov [ tmp3546 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3546 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3546 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3545
  restore tmp3546

; -----------------------------------------------
; function __MIRCode_mul$0
; -----------------------------------------------
__MIRCode_mul$0_vcall:
__MIRCode_mul$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3548 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3547 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3548 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3547 ], 4

  mov [ tmp3548 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3547 ]
  mov [ tmp3548 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3548 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3548 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3547
  restore tmp3548

; -----------------------------------------------
; function __MIRCode_div$0
; -----------------------------------------------
__MIRCode_div$0_vcall:
__MIRCode_div$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3550 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3549 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3550 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3549 ], 5

  mov [ tmp3550 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3549 ]
  mov [ tmp3550 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3550 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3550 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3549
  restore tmp3550

; -----------------------------------------------
; function __MIRCode_idiv$0
; -----------------------------------------------
__MIRCode_idiv$0_vcall:
__MIRCode_idiv$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3552 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3551 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3552 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3551 ], 6

  mov [ tmp3552 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3551 ]
  mov [ tmp3552 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3552 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3552 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3551
  restore tmp3552

; -----------------------------------------------
; function __MIRCode_stringJoin$0
; -----------------------------------------------
__MIRCode_stringJoin$0_vcall:
__MIRCode_stringJoin$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3554 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3553 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3554 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3553 ], 49

  mov [ tmp3554 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3553 ]
  mov [ tmp3554 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3554 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3554 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3553
  restore tmp3554

; -----------------------------------------------
; function __MIRCode_loadNull$0
; -----------------------------------------------
__MIRCode_loadNull$0_vcall:
__MIRCode_loadNull$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3556 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3555 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3556 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3555 ], 10

  mov [ tmp3556 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3555 ]
  mov [ tmp3556 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3556 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3556 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3555
  restore tmp3556

; -----------------------------------------------
; function __MIRCode_loadArray$0
; -----------------------------------------------
__MIRCode_loadArray$0_vcall:
__MIRCode_loadArray$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3558 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3557 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3558 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3557 ], 8

  mov [ tmp3558 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3557 ]
  mov [ tmp3558 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3558 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3558 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3557
  restore tmp3558

; -----------------------------------------------
; function __MIRCode_loadMap$0
; -----------------------------------------------
__MIRCode_loadMap$0_vcall:
__MIRCode_loadMap$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3560 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3559 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3560 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3559 ], 9

  mov [ tmp3560 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3559 ]
  mov [ tmp3560 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3560 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3559
  restore tmp3560

; -----------------------------------------------
; function __MIRCode_loadImm$1
; -----------------------------------------------
__MIRCode_loadImm$1_vcall:
__MIRCode_loadImm$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3562 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3561 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp3562 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3561 ], 7

  mov [ tmp3562 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3561 ]
  mov [ tmp3562 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3562 ]
  lea r8 , [ value ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3562 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore value
  restore tmp3561
  restore tmp3562

; -----------------------------------------------
; function __MIRCode_cmpEQ$0
; -----------------------------------------------
__MIRCode_cmpEQ$0_vcall:
__MIRCode_cmpEQ$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3564 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3563 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3564 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3563 ], 11

  mov [ tmp3564 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3563 ]
  mov [ tmp3564 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3564 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3564 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3563
  restore tmp3564

; -----------------------------------------------
; function __MIRCode_cmpNEQ$0
; -----------------------------------------------
__MIRCode_cmpNEQ$0_vcall:
__MIRCode_cmpNEQ$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3566 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3565 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3566 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3565 ], 12

  mov [ tmp3566 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3565 ]
  mov [ tmp3566 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3566 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3566 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3565
  restore tmp3566

; -----------------------------------------------
; function __MIRCode_cmpGT$0
; -----------------------------------------------
__MIRCode_cmpGT$0_vcall:
__MIRCode_cmpGT$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3568 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3567 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3568 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3567 ], 13

  mov [ tmp3568 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3567 ]
  mov [ tmp3568 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3568 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3568 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3567
  restore tmp3568

; -----------------------------------------------
; function __MIRCode_cmpGE$0
; -----------------------------------------------
__MIRCode_cmpGE$0_vcall:
__MIRCode_cmpGE$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3570 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3569 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3570 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3569 ], 14

  mov [ tmp3570 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3569 ]
  mov [ tmp3570 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3570 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3570 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3569
  restore tmp3570

; -----------------------------------------------
; function __MIRCode_cmpLT$0
; -----------------------------------------------
__MIRCode_cmpLT$0_vcall:
__MIRCode_cmpLT$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3572 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3571 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3572 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3571 ], 15

  mov [ tmp3572 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3571 ]
  mov [ tmp3572 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3572 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3572 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3571
  restore tmp3572

; -----------------------------------------------
; function __MIRCode_cmpLE$0
; -----------------------------------------------
__MIRCode_cmpLE$0_vcall:
__MIRCode_cmpLE$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3574 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3573 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3574 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3573 ], 16

  mov [ tmp3574 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3573 ]
  mov [ tmp3574 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3574 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3574 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3573
  restore tmp3574

; -----------------------------------------------
; function __MIRCode_loadLocal$1
; -----------------------------------------------
__MIRCode_loadLocal$1_vcall:
__MIRCode_loadLocal$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 4 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp3576 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3575 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3577 EQU rbp - 64 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  xor eax, eax
  mov [tmp3576 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3575 ], 17

  mov [ tmp3576 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3575 ]
  mov [ tmp3576 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3576 ]
  lea r8 , [ id ]
  call  __MIRCode_push1$2

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3576 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ id ]
  lea rdx, [ tmp3576 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l3578

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantStoreAtKey

l3578:

l3579:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3576 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore id
  restore tmp3575
  restore tmp3576
  restore tmp3577

; -----------------------------------------------
; function __MIRCode_loadParamN$1
; -----------------------------------------------
__MIRCode_loadParamN$1_vcall:
__MIRCode_loadParamN$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3581 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3580 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  xor eax, eax
  mov [tmp3581 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3580 ], 18

  mov [ tmp3581 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3580 ]
  mov [ tmp3581 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3581 ]
  lea r8 , [ id ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3581 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore id
  restore tmp3580
  restore tmp3581

; -----------------------------------------------
; function __MIRCode_loadGlobal$1
; -----------------------------------------------
__MIRCode_loadGlobal$1_vcall:
__MIRCode_loadGlobal$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3583 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3582 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  xor eax, eax
  mov [tmp3583 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3582 ], 19

  mov [ tmp3583 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3582 ]
  mov [ tmp3583 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3583 ]
  lea r8 , [ id ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3583 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore id
  restore tmp3582
  restore tmp3583

; -----------------------------------------------
; function __MIRCode_loadRetVal$0
; -----------------------------------------------
__MIRCode_loadRetVal$0_vcall:
__MIRCode_loadRetVal$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3585 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3584 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3585 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3584 ], 20

  mov [ tmp3585 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3584 ]
  mov [ tmp3585 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3585 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3584
  restore tmp3585

; -----------------------------------------------
; function __MIRCode_loadFromIndex$0
; -----------------------------------------------
__MIRCode_loadFromIndex$0_vcall:
__MIRCode_loadFromIndex$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3587 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3586 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3587 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3586 ], 21

  mov [ tmp3587 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3586 ]
  mov [ tmp3587 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3587 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3587 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3586
  restore tmp3587

; -----------------------------------------------
; function __MIRCode_loadFromKey$0
; -----------------------------------------------
__MIRCode_loadFromKey$0_vcall:
__MIRCode_loadFromKey$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3589 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3588 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3589 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3588 ], 22

  mov [ tmp3589 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3588 ]
  mov [ tmp3589 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3589 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3589 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3588
  restore tmp3589

; -----------------------------------------------
; function __MIRCode_allocateLocalId$0
; -----------------------------------------------
__MIRCode_allocateLocalId$0_vcall:
__MIRCode_allocateLocalId$0:

  ; init frame
  ; ----------
  newId EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  tmp3590 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3592 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3591 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3590 + Variant_t.type], eax
  mov [tmp3592 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3590 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3591 ], 1

  mov [ tmp3592 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3591 ]
  mov [ tmp3592 + Variant_t.value], rax

  lea  rcx , [ tmp3590 ]
  lea  rdx , [ tmp3592 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3590 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3592 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore newId
  restore tmp3590
  restore tmp3591
  restore tmp3592

; -----------------------------------------------
; function __MIRCode_storeLocal$1
; -----------------------------------------------
__MIRCode_storeLocal$1_vcall:
__MIRCode_storeLocal$1:

  ; init frame
  ; ----------
  newId EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 4 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp3596 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3598 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3593 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3597 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  xor eax, eax
  mov [tmp3596 + Variant_t.type], eax
  mov [tmp3598 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ id + Variant_t.type ], 0
  jnz l3594

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3597 ], 1

  mov [ tmp3598 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3597 ]
  mov [ tmp3598 + Variant_t.value], rax

  lea  rcx , [ tmp3596 ]
  lea  rdx , [ tmp3598 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey

  jmp l3595

l3594:

  lea  rcx, [ newId ]
  call __MOLD_VariantDestroy
  lea rcx, [ newId ]
  lea rdx, [ id ]
  call __MOLD_VariantMove

l3595:

  mov dword [ tmp3597 ], 24

  mov [ tmp3598 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3597 ]
  mov [ tmp3598 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3598 ]
  lea r8 , [ newId ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3598 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore id
  restore newId
  restore tmp3593
  restore tmp3596
  restore tmp3597
  restore tmp3598

; -----------------------------------------------
; function __MIRCode_storeParamN$1
; -----------------------------------------------
__MIRCode_storeParamN$1_vcall:
__MIRCode_storeParamN$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3600 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3599 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  xor eax, eax
  mov [tmp3600 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3599 ], 25

  mov [ tmp3600 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3599 ]
  mov [ tmp3600 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3600 ]
  lea r8 , [ id ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3600 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore id
  restore tmp3599
  restore tmp3600

; -----------------------------------------------
; function __MIRCode_storeGlobal$1
; -----------------------------------------------
__MIRCode_storeGlobal$1_vcall:
__MIRCode_storeGlobal$1:

  ; init frame
  ; ----------
  newId EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 4 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp3604 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3606 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3601 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3605 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  xor eax, eax
  mov [tmp3604 + Variant_t.type], eax
  mov [tmp3606 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ id + Variant_t.type ], 0
  jnz l3602

  lea  rcx , [ this ]
  lea  rdx , [ __literal387 ]
  lea  r8 , [ tmp3604 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3605 ], 1

  mov [ tmp3606 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3605 ]
  mov [ tmp3606 + Variant_t.value], rax

  lea  rcx , [ tmp3604 ]
  lea  rdx , [ tmp3606 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal387 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey

  jmp l3603

l3602:

  lea  rcx, [ newId ]
  call __MOLD_VariantDestroy
  lea rcx, [ newId ]
  lea rdx, [ id ]
  call __MOLD_VariantMove

l3603:

  mov dword [ tmp3605 ], 26

  mov [ tmp3606 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3605 ]
  mov [ tmp3606 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3606 ]
  lea r8 , [ newId ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3604 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3606 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore id
  restore newId
  restore tmp3601
  restore tmp3604
  restore tmp3605
  restore tmp3606

; -----------------------------------------------
; function __MIRCode_storeRetVal$0
; -----------------------------------------------
__MIRCode_storeRetVal$0_vcall:
__MIRCode_storeRetVal$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3608 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3607 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3608 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3607 ], 27

  mov [ tmp3608 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3607 ]
  mov [ tmp3608 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3608 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3608 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3607
  restore tmp3608

; -----------------------------------------------
; function __MIRCode_storeAtIndex$0
; -----------------------------------------------
__MIRCode_storeAtIndex$0_vcall:
__MIRCode_storeAtIndex$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3610 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3609 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3610 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3609 ], 28

  mov [ tmp3610 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3609 ]
  mov [ tmp3610 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3610 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3610 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3609
  restore tmp3610

; -----------------------------------------------
; function __MIRCode_storeAtKey$0
; -----------------------------------------------
__MIRCode_storeAtKey$0_vcall:
__MIRCode_storeAtKey$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3612 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3611 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3612 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3611 ], 29

  mov [ tmp3612 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3611 ]
  mov [ tmp3612 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3612 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3612 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3611
  restore tmp3612

; -----------------------------------------------
; function __MIRCode_moveBack$0
; -----------------------------------------------
__MIRCode_moveBack$0_vcall:
__MIRCode_moveBack$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3614 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3613 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3614 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3613 ], 34

  mov [ tmp3614 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3613 ]
  mov [ tmp3614 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3614 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3614 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3613
  restore tmp3614

; -----------------------------------------------
; function __MIRCode_drop$0
; -----------------------------------------------
__MIRCode_drop$0_vcall:
__MIRCode_drop$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3616 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3615 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3616 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3615 ], 30

  mov [ tmp3616 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3615 ]
  mov [ tmp3616 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3616 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3615
  restore tmp3616

; -----------------------------------------------
; function __MIRCode_dropN$1
; -----------------------------------------------
__MIRCode_dropN$1_vcall:
__MIRCode_dropN$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  n EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3618 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3617 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ n ], xmm0
  xor eax, eax
  mov [tmp3618 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3617 ], 31

  mov [ tmp3618 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3617 ]
  mov [ tmp3618 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3618 ]
  lea r8 , [ n ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3618 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore n
  restore tmp3617
  restore tmp3618

; -----------------------------------------------
; function __MIRCode_dup$0
; -----------------------------------------------
__MIRCode_dup$0_vcall:
__MIRCode_dup$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3620 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3619 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3620 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3619 ], 32

  mov [ tmp3620 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3619 ]
  mov [ tmp3620 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3620 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3620 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3619
  restore tmp3620

; -----------------------------------------------
; function __MIRCode_over$0
; -----------------------------------------------
__MIRCode_over$0_vcall:
__MIRCode_over$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3622 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3621 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3622 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3621 ], 33

  mov [ tmp3622 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3621 ]
  mov [ tmp3622 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3622 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3622 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3621
  restore tmp3622

; -----------------------------------------------
; function __MIRCode_loadArgc$0
; -----------------------------------------------
__MIRCode_loadArgc$0_vcall:
__MIRCode_loadArgc$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3624 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3623 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3624 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3623 ], 252

  mov [ tmp3624 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3623 ]
  mov [ tmp3624 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3624 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3624 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3623
  restore tmp3624

; -----------------------------------------------
; function __MIRCode_loadArgv$0
; -----------------------------------------------
__MIRCode_loadArgv$0_vcall:
__MIRCode_loadArgv$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3626 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3625 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3626 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3625 ], 253

  mov [ tmp3626 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3625 ]
  mov [ tmp3626 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3626 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3626 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3625
  restore tmp3626

; -----------------------------------------------
; function __MIRCode_createObject$1
; -----------------------------------------------
__MIRCode_createObject$1_vcall:
__MIRCode_createObject$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  classProto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3628 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3627 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classProto ], xmm0
  xor eax, eax
  mov [tmp3628 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3627 ], 36

  mov [ tmp3628 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3627 ]
  mov [ tmp3628 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3628 ]
  lea r8 , [ classProto ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3628 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore classProto
  restore tmp3627
  restore tmp3628

; -----------------------------------------------
; function __MIRCode__jmpInternal$2
; -----------------------------------------------
__MIRCode__jmpInternal$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 12 )
  labelId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  opcode EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  addr EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp3632 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3636 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3637 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3641 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3642 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3629 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3633 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  tmp3638 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ opcode ], xmm0
  xor eax, eax
  mov [addr + Variant_t.type], eax
  mov [tmp3632 + Variant_t.type], eax
  mov [tmp3636 + Variant_t.type], eax
  mov [tmp3637 + Variant_t.type], eax
  mov [tmp3641 + Variant_t.type], eax
  mov [tmp3642 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ labelId + Variant_t.type ], 0
  jnz l3630

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal403
  lea rcx , [ __literal403 ]
  call qword [rbx + 8 * 41 ]

l3630:

l3631:

  lea  rcx , [ this ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp3632 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ labelId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3633 ], eax

  lea  rcx , [ tmp3632 ]
  lea  rdx , [ tmp3633 ]
  lea  r8 , [ addr ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ addr + Variant_t.type ], 0
  jnz l3634

  ; __mold_syscall( 42 )
  lea rcx , [ labelId ]
  push rdi
  lea  rdi , [ tmp3632 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal404 ]
  lea  rdx , [ tmp3632 ]
  lea  r8 , [ tmp3637 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3636 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3637 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp3636 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp3636 ]
  call qword [rbx + 8 * 41 ]

  jmp l3635

l3634:

  mov dword [ tmp3633 ], -1

  mov [ tmp3632 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3633 ]
  mov [ tmp3632 + Variant_t.value], rax

  lea rcx, [ addr ]
  lea rdx, [ tmp3632 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3639

  lea  rcx , [ this ]
  lea  rdx , [ __literal396 ]
  lea  r8 , [ tmp3632 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ tmp3641 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3641 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3641 + Variant_t.value]
  mov dword [ tmp3633 ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3641 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3632 ]
  lea  rdx , [ tmp3633 ]
  lea  r8 , [ tmp3641 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ tmp3632 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3633 ], 1

  mov [ tmp3642 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3633 ]
  mov [ tmp3642 + Variant_t.value], rax

  lea  rcx , [ tmp3632 ]
  lea  rdx , [ tmp3642 ]
  lea  r8 , [ tmp3641 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ tmp3641 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ labelId ]
  call  __MIRCode_push1$2

  jmp l3640

l3639:

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ addr ]
  call  __MIRCode_push1$2

l3640:

l3635:


  ; clean frame
  ; -----------
  lea  rcx, [ addr ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3632 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3636 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3637 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3641 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3642 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore labelId
  restore opcode
  restore addr
  restore tmp3629
  restore tmp3632
  restore tmp3633
  restore tmp3636
  restore tmp3637
  restore tmp3638
  restore tmp3641
  restore tmp3642

; -----------------------------------------------
; function __MIRCode_jmp$1
; -----------------------------------------------
__MIRCode_jmp$1_vcall:
__MIRCode_jmp$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  labelId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3644 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3643 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  xor eax, eax
  mov [tmp3644 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3643 ], 39

  mov [ tmp3644 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3643 ]
  mov [ tmp3644 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ labelId ]
  lea r8 , [ tmp3644 ]
  call  __MIRCode__jmpInternal$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3644 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore labelId
  restore tmp3643
  restore tmp3644

; -----------------------------------------------
; function __MIRCode_jmpIfTrue$1
; -----------------------------------------------
__MIRCode_jmpIfTrue$1_vcall:
__MIRCode_jmpIfTrue$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  labelId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3646 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3645 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  xor eax, eax
  mov [tmp3646 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3645 ], 40

  mov [ tmp3646 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3645 ]
  mov [ tmp3646 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ labelId ]
  lea r8 , [ tmp3646 ]
  call  __MIRCode__jmpInternal$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3646 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore labelId
  restore tmp3645
  restore tmp3646

; -----------------------------------------------
; function __MIRCode_jmpIfFalse$1
; -----------------------------------------------
__MIRCode_jmpIfFalse$1_vcall:
__MIRCode_jmpIfFalse$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  labelId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3648 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3647 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  xor eax, eax
  mov [tmp3648 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3647 ], 41

  mov [ tmp3648 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3647 ]
  mov [ tmp3648 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ labelId ]
  lea r8 , [ tmp3648 ]
  call  __MIRCode__jmpInternal$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3648 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore labelId
  restore tmp3647
  restore tmp3648

; -----------------------------------------------
; function __MIRCode_ret$1
; -----------------------------------------------
__MIRCode_ret$1_vcall:
__MIRCode_ret$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  frameSize EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3650 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3649 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ frameSize ], xmm0
  xor eax, eax
  mov [tmp3650 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3649 ], 43

  mov [ tmp3650 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3649 ]
  mov [ tmp3650 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3650 ]
  lea r8 , [ frameSize ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3650 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore frameSize
  restore tmp3649
  restore tmp3650

; -----------------------------------------------
; function __MIRCode_innerRet$0
; -----------------------------------------------
__MIRCode_innerRet$0_vcall:
__MIRCode_innerRet$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp3652 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3651 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3652 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3651 ], 44

  mov [ tmp3652 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3651 ]
  mov [ tmp3652 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3652 ]
  call  __MIRCode_push0$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3652 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp3651
  restore tmp3652

; -----------------------------------------------
; function __MIRCode_call$1
; -----------------------------------------------
__MIRCode_call$1_vcall:
__MIRCode_call$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  proto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3654 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3653 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ proto ], xmm0
  xor eax, eax
  mov [tmp3654 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3653 ], 42

  mov [ tmp3654 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3653 ]
  mov [ tmp3654 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3654 ]
  lea r8 , [ proto ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3654 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore proto
  restore tmp3653
  restore tmp3654

; -----------------------------------------------
; function __MIRCode_vcall$2
; -----------------------------------------------
__MIRCode_vcall$2_vcall:
__MIRCode_vcall$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3656 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3655 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [tmp3656 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3655 ], 37

  mov [ tmp3656 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3655 ]
  mov [ tmp3656 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3656 ]
  lea r8 , [ name ]
  lea r9 , [ paramsCnt ]
  call  __MIRCode_push2$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3656 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore paramsCnt
  restore tmp3655
  restore tmp3656

; -----------------------------------------------
; function __MIRCode_callPrint$1
; -----------------------------------------------
__MIRCode_callPrint$1_vcall:
__MIRCode_callPrint$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3658 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3657 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [tmp3658 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3657 ], 35

  mov [ tmp3658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3657 ]
  mov [ tmp3658 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3658 ]
  lea r8 , [ paramsCnt ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3658 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore paramsCnt
  restore tmp3657
  restore tmp3658

; -----------------------------------------------
; function __MIRCode_initFrame$1
; -----------------------------------------------
__MIRCode_initFrame$1_vcall:
__MIRCode_initFrame$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3660 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3659 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [tmp3660 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3659 ], 46

  mov [ tmp3660 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3659 ]
  mov [ tmp3660 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3660 ]
  lea r8 , [ paramsCnt ]
  call  __MIRCode_push1$2


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3660 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore paramsCnt
  restore tmp3659
  restore tmp3660

; -----------------------------------------------
; function __MIRCode_createLabel$0
; -----------------------------------------------
__MIRCode_createLabel$0_vcall:
__MIRCode_createLabel$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 8 )
  tmp3661 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3662 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3665 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3663 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3664 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3661 + Variant_t.type], eax
  mov [tmp3662 + Variant_t.type], eax
  mov [tmp3665 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp3661 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3662 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3662 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3662 + Variant_t.value]
  mov dword [ tmp3663 ], eax

  mov dword [ tmp3664 ], -1

  mov [ tmp3662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3664 ]
  mov [ tmp3662 + Variant_t.value], rax

  lea  rcx , [ tmp3661 ]
  lea  rdx , [ tmp3663 ]
  lea  r8 , [ tmp3662 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3661 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3663 ], 1

  mov [ tmp3665 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3663 ]
  mov [ tmp3665 + Variant_t.value], rax

  lea  rcx , [ tmp3661 ]
  lea  rdx , [ tmp3665 ]
  lea  r8 , [ tmp3662 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3662 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3661 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3662 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3665 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp3661
  restore tmp3662
  restore tmp3663
  restore tmp3664
  restore tmp3665

; -----------------------------------------------
; function __MIRCode_emitLabel$1
; -----------------------------------------------
__MIRCode_emitLabel$1_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__MIRCode_emitLabel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 14 )
  targetId EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmp3666 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp3670 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3671 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3676 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3677 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  labelId EQU rbp - 124 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp3667 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3672 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3673 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ labelId ], edx
  xor eax, eax
  mov [targetId + Variant_t.type], eax
  mov [tmp3666 + Variant_t.type], eax
  mov [tmp3670 + Variant_t.type], eax
  mov [tmp3671 + Variant_t.type], eax
  mov [tmp3676 + Variant_t.type], eax
  mov [tmp3677 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp3666 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3666 ]
  lea  rdx , [ labelId ]
  lea  r8 , [ targetId ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ targetId + Variant_t.type ], 0
  jnz l3668

  ; __mold_syscall( 42 )
  lea rcx , [ targetId ]
  push rdi
  lea  rdi , [ tmp3666 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal404 ]
  lea  rdx , [ tmp3666 ]
  lea  r8 , [ tmp3671 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3670 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3671 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp3670 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp3670 ]
  call qword [rbx + 8 * 41 ]

  jmp l3669

l3668:

  mov dword [ tmp3673 ], 0

  mov [ tmp3666 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3673 ]
  mov [ tmp3666 + Variant_t.value], rax

  lea rcx, [ targetId ]
  lea rdx, [ tmp3666 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l3674

  ; __mold_syscall( 42 )
  lea rcx , [ targetId ]
  push rdi
  lea  rdi , [ tmp3666 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal405 ]
  lea  rdx , [ tmp3666 ]
  lea  r8 , [ tmp3671 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3670 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3671 ]
  lea  rdx , [ __literal406 ]
  lea  r8 , [ tmp3670 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp3670 ]
  call qword [rbx + 8 * 41 ]

  jmp l3675

l3674:

  lea  rcx , [ this ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp3666 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3676 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3666 ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3676 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal381 ]
  lea  r8 , [ tmp3676 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3666 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3666 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3666 + Variant_t.value]
  mov dword [ tmp3673 ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3666 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3676 ]
  lea  rdx , [ tmp3673 ]
  lea  r8 , [ tmp3666 ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3676 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3673 ], 1

  mov [ tmp3677 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3673 ]
  mov [ tmp3677 + Variant_t.value], rax

  lea  rcx , [ tmp3676 ]
  lea  rdx , [ tmp3677 ]
  lea  r8 , [ tmp3666 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3666 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  call  __MIRCode__resolveJmps$0

l3675:

l3669:


  ; clean frame
  ; -----------
  lea  rcx, [ targetId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3666 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3670 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3676 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3677 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore labelId
  restore targetId
  restore tmp3666
  restore tmp3667
  restore tmp3670
  restore tmp3671
  restore tmp3672
  restore tmp3673
  restore tmp3676
  restore tmp3677

; -----------------------------------------------
; function __MIRCode_createAndEmitLabel$0
; -----------------------------------------------
__MIRCode_createAndEmitLabel$0_vcall:
__MIRCode_createAndEmitLabel$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp3678 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ rv ]
  call  __MIRCode_createLabel$0

  cmp [ rv + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ rv + Variant_t.value]
  mov dword [ tmp3678 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp3678 ]
  call  __MIRCode_emitLabel$1


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp3678

; -----------------------------------------------
; function __MIRCode_createMethod$1
; -----------------------------------------------
__MIRCode_createMethod$1_vcall:
  mov  [rax + Variant_t.type], VARIANT_INTEGER
  mov  [rax + Variant_t.value], 0
  add  rax, Variant_t.value

__MIRCode_createMethod$1:

  ; init frame
  ; ----------
  id EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 7 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 3 )
  methodsMap EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  methodsList EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  tmp3679 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3684 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3680 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3681 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3685 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [methodsMap + Variant_t.type], eax
  mov [methodsList + Variant_t.type], eax
  mov [tmp3679 + Variant_t.type], eax
  mov [tmp3684 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3679 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3679 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3679 + Variant_t.value]
  mov dword [ id ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ methodsMap ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal392 ]
  lea  r8 , [ methodsList ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ methodsMap ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp3679 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3679 + Variant_t.type ], 0
  jnz l3682

  mov [ tmp3684 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ id ]
  mov [ tmp3684 + Variant_t.value], rax

  lea  rcx , [ methodsMap ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ methodsList ]
  lea  rdx , [ id ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3685 ], 1

  mov eax, dword [ id ]
  add eax, dword [ tmp3685 ]
  mov dword [ tmp3680 ], eax

  mov [ tmp3684 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3680 ]
  mov [ tmp3684 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantStoreAtKey

l3682:

l3683:


  ; clean frame
  ; -----------
  lea  rcx, [ methodsMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3679 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  or dword [ id ], 0
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore id
  restore methodsMap
  restore methodsList
  restore tmp3679
  restore tmp3680
  restore tmp3681
  restore tmp3684
  restore tmp3685

; -----------------------------------------------
; function __MIRCode_createClass$1
; -----------------------------------------------
__MIRCode_createClass$1_vcall:
  mov  [rax + Variant_t.type], VARIANT_INTEGER
  mov  [rax + Variant_t.value], 0
  add  rax, Variant_t.value

__MIRCode_createClass$1:

  ; init frame
  ; ----------
  id EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 7 )
  proto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  className EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  classMap EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  classList EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  tmp3686 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3687 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp3688 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ proto ], xmm0
  xor eax, eax
  mov [className + Variant_t.type], eax
  mov [classMap + Variant_t.type], eax
  mov [classList + Variant_t.type], eax
  mov [tmp3686 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal390 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3686 + Variant_t.value]
  mov dword [ id ], eax

  lea  rcx , [ proto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal388 ]
  lea  r8 , [ classMap ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ id ]
  mov [ tmp3686 + Variant_t.value], rax

  lea  rcx , [ classMap ]
  lea  rdx , [ className ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ classList ]
  lea  rdx , [ id ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp3688 ], 1

  mov eax, dword [ id ]
  add eax, dword [ tmp3688 ]
  mov dword [ tmp3687 ], eax

  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3687 ]
  mov [ tmp3686 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal390 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  or dword [ id ], 0
  pop  rdi
  pop  rbp
  ret


  restore this
  restore proto
  restore id
  restore className
  restore classMap
  restore classList
  restore tmp3686
  restore tmp3687
  restore tmp3688

; -----------------------------------------------
; function __MIRCode_getClassProtoById$1
; -----------------------------------------------
__MIRCode_getClassProtoById$1:

  ; init frame
  ; ----------
  proto EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  classList EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  classId EQU rbp - 44 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ classId ], edx
  xor eax, eax
  mov [classList + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ classList ]
  lea  rdx , [ classId ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32


  ; clean frame
  ; -----------
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore classId
  restore classList
  restore proto

; -----------------------------------------------
; function __MIRCode_retValGuard$2
; -----------------------------------------------
__MIRCode_retValGuard$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rvName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  funcName EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3690 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3689 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rvName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcName ], xmm0
  xor eax, eax
  mov [tmp3690 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3689 ], 45

  mov [ tmp3690 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3689 ]
  mov [ tmp3690 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3690 ]
  lea r8 , [ rvName ]
  lea r9 , [ funcName ]
  call  __MIRCode_push2$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3690 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore rvName
  restore funcName
  restore tmp3689
  restore tmp3690

; -----------------------------------------------
; function __MIRCode_forEachIndexes$3
; -----------------------------------------------
__MIRCode_forEachIndexes$3_vcall:
__MIRCode_forEachIndexes$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  idxId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  valueId EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cb EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3692 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3691 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idxId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ valueId ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ cb ], xmm0
  xor eax, eax
  mov [tmp3692 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3691 ], 101

  mov [ tmp3692 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3691 ]
  mov [ tmp3692 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3692 ]
  lea r8 , [ idxId ]
  lea r9 , [ valueId ]
  lea rax, [ cb ]
  push rax
  call  __MIRCode_push3$4
  add rsp, 8


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3692 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore idxId
  restore valueId
  restore cb
  restore tmp3691
  restore tmp3692

; -----------------------------------------------
; function __MIRCode_forEachKeys$3
; -----------------------------------------------
__MIRCode_forEachKeys$3_vcall:
__MIRCode_forEachKeys$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  keyId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  valueId EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cb EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3694 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3693 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ keyId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ valueId ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ cb ], xmm0
  xor eax, eax
  mov [tmp3694 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3693 ], 100

  mov [ tmp3694 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3693 ]
  mov [ tmp3694 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3694 ]
  lea r8 , [ keyId ]
  lea r9 , [ valueId ]
  lea rax, [ cb ]
  push rax
  call  __MIRCode_push3$4
  add rsp, 8


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3694 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore keyId
  restore valueId
  restore cb
  restore tmp3693
  restore tmp3694

; -----------------------------------------------
; function __MIRCode_syscall$2
; -----------------------------------------------
__MIRCode_syscall$2_vcall:
__MIRCode_syscall$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3696 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3695 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [tmp3696 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp3695 ], 48

  mov [ tmp3696 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3695 ]
  mov [ tmp3696 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp3696 ]
  lea r8 , [ id ]
  lea r9 , [ paramsCnt ]
  call  __MIRCode_push2$3


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3696 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore id
  restore paramsCnt
  restore tmp3695
  restore tmp3696

; -----------------------------------------------
; function __AppMold_constructor$0
; -----------------------------------------------
__AppMold_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 14 , readHits= 28 )
  tmp3697 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 13 , readHits= 13 )
  tmp3698 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 13 , readHits= 13 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3697 + Variant_t.type], eax
  mov [tmp3698 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal146
  lea rdx , [ __literal146 ]
  call  __AppMold_logDebug$1

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_SymbolTable]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __SymbolTable_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTOptimizerConstantFolding]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTOptimizerConstantFolding_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal407 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTSymbolsCollector]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTSymbolsCollector_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal408 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTEvaluator]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTEvaluator_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTPreprocessor]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTPreprocessor_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal410 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTOptimizerCSE]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTOptimizerCSE_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal411 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTOptimizerDeadCodeRemove]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTOptimizerDeadCodeRemove_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal412 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTOptimizerVCall]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTOptimizerVCall_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal413 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTOptimizerIf]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTOptimizerIf_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal414 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTOptimizerInline]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTOptimizerInline_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal415 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTTypeCast]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTTypeCast_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal416 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_ASTModuleResolver]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea rdx , [ this ]
  lea  rax , [ tmp3698 ]
  call  __ASTModuleResolver_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal417 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  call  __AppMold_clearLogContext$0

  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3697 ]
  lea  rdx, [vtable_MIRCode]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp3697 ]
  lea  rax , [ tmp3698 ]
  call  __MIRCode_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3697 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal418
  lea rdx , [ __literal418 ]
  call  __AppMold_logDebug$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3698 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp3697
  restore tmp3698

; -----------------------------------------------
; function __AppMold_clearLogContext$0
; -----------------------------------------------
__AppMold_clearLogContext$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3699 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3702 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp3699 + Variant_t.type], eax
  mov [tmp3702 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp3699 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3699 ]
  lea  rdx , [ __const3700 ]
  lea  r8 , [ __const3701 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx , [ this ]
  lea  rdx , [ __literal419 ]
  lea  r8 , [ tmp3699 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp3699 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3702 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp3699
  restore tmp3702

; -----------------------------------------------
; function __AppMold_setLogContext$1
; -----------------------------------------------
__AppMold_setLogContext$1_vcall:
__AppMold_setLogContext$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  ctx EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ctx ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal419 ]
  lea  r8 , [ ctx ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore ctx

; -----------------------------------------------
; function __AppMold_logDebug$1
; -----------------------------------------------
__AppMold_logDebug$1_vcall:
__AppMold_logDebug$1:

  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp3703 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3704 EQU rbp - 32 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  mov dword [ tmp3704 ], 1

  mov eax, dword [ DEBUG_MOLD ]
  cmp eax, dword [ tmp3704 ]
  jnz l3705

  lea rcx, [__fmt13 ]
  call __MOLD_PrintFormatFromMemory

l3705:

l3706:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore msg
  restore tmp3703
  restore tmp3704

; -----------------------------------------------
; function __AppMold_logError$1
; -----------------------------------------------
__AppMold_logError$1_vcall:
__AppMold_logError$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  msg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  logCtx EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  msgPrefix EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3707 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3708 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3709 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3710 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3711 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3712 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  xor eax, eax
  mov [logCtx + Variant_t.type], eax
  mov [msgPrefix + Variant_t.type], eax
  mov [tmp3707 + Variant_t.type], eax
  mov [tmp3708 + Variant_t.type], eax
  mov [tmp3709 + Variant_t.type], eax
  mov [tmp3710 + Variant_t.type], eax
  mov [tmp3711 + Variant_t.type], eax
  mov [tmp3712 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal419 ]
  lea  r8 , [ logCtx ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3712 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3712 ]
  push rdi
  lea  rdi , [ tmp3711 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3711 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp3712 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3712 ]
  push rdi
  lea  rdi , [ tmp3711 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3709 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3710 ]
  lea  rdx , [ tmp3711 ]
  lea  r8 , [ tmp3709 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3708 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3709 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp3708 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ tmp3712 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3712 ]
  push rdi
  lea  rdi , [ tmp3711 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3708 ]
  lea  rdx , [ tmp3711 ]
  lea  r8 , [ tmp3707 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ msgPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3707 ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ msgPrefix ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ msgPrefix ]
  lea  rdx , [ msg ]
  lea  r8 , [ tmp3707 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp3707 ]
  call qword [rbx + 8 * 41 ]


  ; clean frame
  ; -----------
  lea  rcx, [ logCtx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ msgPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3707 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3708 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3709 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3711 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3712 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore this
  restore msg
  restore logCtx
  restore msgPrefix
  restore tmp3707
  restore tmp3708
  restore tmp3709
  restore tmp3710
  restore tmp3711
  restore tmp3712

; -----------------------------------------------
; function __AppMold_getMir1Code$0
; -----------------------------------------------
__AppMold_getMir1Code$0_vcall:
__AppMold_getMir1Code$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getSymbolTable$0
; -----------------------------------------------
__AppMold_getSymbolTable$0_vcall:
__AppMold_getSymbolTable$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstSymbolsCollector$0
; -----------------------------------------------
__AppMold_getAstSymbolsCollector$0_vcall:
__AppMold_getAstSymbolsCollector$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal408 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstOptimizerConstantFolding$0
; -----------------------------------------------
__AppMold_getAstOptimizerConstantFolding$0_vcall:
__AppMold_getAstOptimizerConstantFolding$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal407 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstPreprocessor$0
; -----------------------------------------------
__AppMold_getAstPreprocessor$0_vcall:
__AppMold_getAstPreprocessor$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal410 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstEvaluator$0
; -----------------------------------------------
__AppMold_getAstEvaluator$0_vcall:
__AppMold_getAstEvaluator$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstOptimizerCSE$0
; -----------------------------------------------
__AppMold_getAstOptimizerCSE$0_vcall:
__AppMold_getAstOptimizerCSE$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal411 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstOptimizerDeadCodeRemove$0
; -----------------------------------------------
__AppMold_getAstOptimizerDeadCodeRemove$0_vcall:
__AppMold_getAstOptimizerDeadCodeRemove$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal412 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstOptimizerVCall$0
; -----------------------------------------------
__AppMold_getAstOptimizerVCall$0_vcall:
__AppMold_getAstOptimizerVCall$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal413 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstOptimizerIf$0
; -----------------------------------------------
__AppMold_getAstOptimizerIf$0_vcall:
__AppMold_getAstOptimizerIf$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal414 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstOptimizerInline$0
; -----------------------------------------------
__AppMold_getAstOptimizerInline$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal415 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstModuleResolver$0
; -----------------------------------------------
__AppMold_getAstModuleResolver$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal417 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __AppMold_getAstTypeCast$0
; -----------------------------------------------
__AppMold_getAstTypeCast$0_vcall:
__AppMold_getAstTypeCast$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal416 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTPrinterText__printNode_twoArgsOp$2
; -----------------------------------------------
__ASTPrinterText__printNode_twoArgsOp$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 12 )
  op EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  x EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  y EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp3717 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3718 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3729 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3730 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  useParentForX EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  useParentForY EQU rbp - 176 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  tmp3713 EQU rbp - 180 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp3714 EQU rbp - 184 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3716 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp3720 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3722 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3724 EQU rbp - 200 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ op ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [tmp3717 + Variant_t.type], eax
  mov [tmp3718 + Variant_t.type], eax
  mov [tmp3729 + Variant_t.type], eax
  mov [tmp3730 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3713 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3713 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3713 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3713 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ useParentForX ], 0

  mov dword [ useParentForY ], 0

  mov dword [ tmp3714 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3717 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3713 ], 60

  mov [ tmp3718 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3713 ]
  mov [ tmp3718 + Variant_t.value], rax

  lea rcx, [ tmp3717 ]
  lea rdx, [ tmp3718 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3715

  mov dword [ tmp3716 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3718 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3713 ], 61

  mov [ tmp3717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3713 ]
  mov [ tmp3717 + Variant_t.value], rax

  lea rcx, [ tmp3718 ]
  lea rdx, [ tmp3717 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3719

  mov dword [ tmp3720 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3717 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3713 ], 64

  mov [ tmp3718 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3713 ]
  mov [ tmp3718 + Variant_t.value], rax

  lea rcx, [ tmp3717 ]
  lea rdx, [ tmp3718 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3721

  mov dword [ tmp3722 ], 1

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3718 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3713 ], 72

  mov [ tmp3717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3713 ]
  mov [ tmp3717 + Variant_t.value], rax

  lea rcx, [ tmp3718 ]
  lea rdx, [ tmp3717 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3723

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3717 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3713 ], 73

  mov [ tmp3718 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3713 ]
  mov [ tmp3718 + Variant_t.value], rax

  lea  rcx , [ tmp3717 ]
  lea  rdx , [ tmp3718 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3722 ], eax

l3723:

  mov eax, dword [ tmp3722 ]
  mov dword [ tmp3720 ], eax

l3721:

  mov eax, dword [ tmp3720 ]
  mov dword [ tmp3716 ], eax

l3719:

  mov eax, dword [ tmp3716 ]
  mov dword [ tmp3714 ], eax

l3715:

  cmp dword [ tmp3714 ], 0
  jz l3725

  lea rcx , [ x ]
  lea  rax , [ tmp3716 ]
  call  AST_IsImmOrVar

  mov dword [ tmp3720 ], 1

  mov dword [ useParentForX ], 0
  mov ecx, dword [ tmp3716 ]
  cmp ecx, dword [ tmp3720 ]
  setnz byte [ useParentForX ]

  lea rcx , [ y ]
  lea  rax , [ tmp3720 ]
  call  AST_IsImmOrVar

  mov dword [ tmp3716 ], 1

  mov dword [ useParentForY ], 0
  mov ecx, dword [ tmp3720 ]
  cmp ecx, dword [ tmp3716 ]
  setnz byte [ useParentForY ]

l3725:

l3726:

  mov dword [ tmp3716 ], 1

  mov eax, dword [ useParentForX ]
  cmp eax, dword [ tmp3716 ]
  jnz l3727

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal421
  lea rcx , [ __literal421 ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ x ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal176
  lea rcx , [ __literal176 ]
  call qword [rbx + 8 * 45 ]

  jmp l3728

l3727:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ x ]
  call  __ASTPrinterText__printNode$2

l3728:

  lea  rcx, [ tmp3730 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal328 ]
  lea  rdx , [ op ]
  lea  r8 , [ tmp3730 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3729 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3730 ]
  lea  rdx , [ __literal328 ]
  lea  r8 , [ tmp3729 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3729 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3716 ], 1

  mov eax, dword [ useParentForY ]
  cmp eax, dword [ tmp3716 ]
  jnz l3731

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal421
  lea rcx , [ __literal421 ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ y ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal176
  lea rcx , [ __literal176 ]
  call qword [rbx + 8 * 45 ]

  jmp l3732

l3731:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ y ]
  call  __ASTPrinterText__printNode$2

l3732:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3717 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3718 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3729 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3730 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret


  restore this
  restore node
  restore op
  restore children
  restore x
  restore y
  restore useParentForX
  restore useParentForY
  restore tmp3713
  restore tmp3714
  restore tmp3716
  restore tmp3717
  restore tmp3718
  restore tmp3720
  restore tmp3722
  restore tmp3724
  restore tmp3729
  restore tmp3730

; -----------------------------------------------
; function __ASTPrinterText__printNode_codeBlock$2
; -----------------------------------------------
__ASTPrinterText__printNode_codeBlock$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  prefix EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 1 , readHits= 2 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 11 )
  tmp3736 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp3738 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp3745 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  childNode EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 8 )
  tmp3733 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3735 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3737 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 7 , readHits= 7 )
  tmp3740 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3750 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ prefix ], xmm0
  or [ prefix  + Variant_t.flags ], VARIANT_FLAG_DUPLICATE_ON_FIRST_WRITE
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp3736 + Variant_t.type], eax
  mov [tmp3738 + Variant_t.type], eax
  mov [tmp3745 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  mov dword [ tmp3733 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3736 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3737 ], 33

  mov [ tmp3738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3737 ]
  mov [ tmp3738 + Variant_t.value], rax

  lea rcx, [ tmp3736 ]
  lea rdx, [ tmp3738 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3734

  mov dword [ tmp3735 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3737 ], 32

  mov [ tmp3736 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3737 ]
  mov [ tmp3736 + Variant_t.value], rax

  lea rcx, [ tmp3738 ]
  lea rdx, [ tmp3736 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3739

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3736 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3737 ], 34

  mov [ tmp3738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3737 ]
  mov [ tmp3738 + Variant_t.value], rax

  lea  rcx , [ tmp3736 ]
  lea  rdx , [ tmp3738 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp3735 ], eax

l3739:

  mov eax, dword [ tmp3735 ]
  mov dword [ tmp3733 ], eax

l3734:

  cmp dword [ tmp3733 ], 0
  jz l3741

  lea  rcx , [ prefix ]
  lea  rdx , [ __literal422 ]
  lea  r8 , [ prefix ]
  call  __MOLD_VariantStringJoin

l3741:

l3742:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3738 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l3744

l3743:

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3736 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3737 ], 78

  mov [ tmp3745 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3737 ]
  mov [ tmp3745 + Variant_t.value], rax

  lea rcx, [ tmp3736 ]
  lea rdx, [ tmp3745 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3746

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ childNode ]
  call  __ASTPrinterText__printNode$2

  mov dword [ tmp3735 ], 0

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3745 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3737 ], 31

  mov [ tmp3736 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3737 ]
  mov [ tmp3736 + Variant_t.value], rax

  lea rcx, [ tmp3745 ]
  lea rdx, [ tmp3736 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3748

  mov dword [ tmp3740 ], 0

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3736 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3737 ], 40

  mov [ tmp3745 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3737 ]
  mov [ tmp3745 + Variant_t.value], rax

  lea rcx, [ tmp3736 ]
  lea rdx, [ tmp3745 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3749

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3745 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3737 ], 33

  mov [ tmp3736 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3737 ]
  mov [ tmp3736 + Variant_t.value], rax

  lea  rcx , [ tmp3745 ]
  lea  rdx , [ tmp3736 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp3740 ], eax

l3749:

  mov eax, dword [ tmp3740 ]
  mov dword [ tmp3735 ], eax

l3748:

  cmp dword [ tmp3735 ], 0
  jz l3751

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

l3751:

l3752:

l3746:

l3747:

  ret

l3744:

  lea  rcx , [ tmp3738 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3743 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3736 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3738 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3745 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore prefix
  restore node
  restore tmp3733
  restore tmp3735
  restore tmp3736
  restore tmp3737
  restore tmp3738
  restore tmp3740
  restore tmp3745
  restore tmp3750
  restore childNode

; -----------------------------------------------
; function __ASTPrinterText__printNode_paramsList$3
; -----------------------------------------------
__ASTPrinterText__printNode_paramsList$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  beginIdx EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  childrenCnt EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  sep EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  tmp3762 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  parenthesis EQU rbp - 124 ; 4 bytes, (kind= 3 , type= bool32 , writeHits= 0 , readHits= 2 )
  tmp3753 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3754 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3757 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3758 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp3759 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 148 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ beginIdx ], xmm0
  mov dword [ parenthesis ], r9d
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [sep + Variant_t.type], eax
  mov [tmp3762 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  mov dword [ tmp3754 ], 1

  mov eax, dword [ parenthesis ]
  cmp eax, dword [ tmp3754 ]
  jnz l3755

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal421
  lea rcx , [ __literal421 ]
  call qword [rbx + 8 * 45 ]

l3755:

l3756:

  mov dword [ tmp3757 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3758 ], eax

  cmp [ beginIdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ beginIdx + Variant_t.value]
  mov dword [ idx ], eax

; 
; -----------------------------
; BEGIN: for idx in tmp3759 .. tmp3758
; 
l3760:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3758 ]
  jge l3761

  ; __mold_syscall( 45 )
  lea rcx , [ sep ]
  call qword [rbx + 8 * 45 ]

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3762 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3762 ]
  call  __ASTPrinterText__printNode$2

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal423 ]
  call __MOLD_VariantMove

  mov eax, dword [ idx ]
  add eax, dword [ tmp3757 ]
  mov dword [ idx ], eax

  jmp l3760

l3761:

; 
; END: for idx in tmp3759 .. tmp3758 step tmp3757
; -----------------------------
; 
  mov dword [ tmp3754 ], 1

  mov eax, dword [ parenthesis ]
  cmp eax, dword [ tmp3754 ]
  jnz l3763

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal176
  lea rcx , [ __literal176 ]
  call qword [rbx + 8 * 45 ]

l3763:

l3764:


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3762 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore node
  restore beginIdx
  restore parenthesis
  restore children
  restore childrenCnt
  restore sep
  restore tmp3753
  restore tmp3754
  restore tmp3757
  restore tmp3758
  restore tmp3759
  restore tmp3762
  restore idx

; -----------------------------------------------
; function __ASTPrinterText__printNode$2
; -----------------------------------------------
__ASTPrinterText__printNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 51 )
  prefix EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 38 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 55 )
  value EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 10 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 61 )
  lval EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  rval EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  x EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  tmp3765 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3776 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  sep EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  childNode EQU rbp - 200 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3784 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 26 , readHits= 26 )
  tmp3786 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  symbolTable EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  symbols EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  item EQU rbp - 280 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 9 )
  tmp3819 EQU rbp - 296 ; 16 bytes, (kind= 1 , type= string , writeHits= 10 , readHits= 10 )
  oneParam EQU rbp - 312 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3828 EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 26 , readHits= 26 )
  arrayOfValues EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  oneValue EQU rbp - 360 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3884 EQU rbp - 376 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3885 EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  symbolInfo EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  opcode EQU rbp - 412 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 40 )
  childrenCnt EQU rbp - 416 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp3766 EQU rbp - 420 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 38 , readHits= 38 )
  tmp3767 EQU rbp - 424 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3770 EQU rbp - 428 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3773 EQU rbp - 432 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3781 EQU rbp - 436 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3785 EQU rbp - 440 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3795 EQU rbp - 444 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3798 EQU rbp - 448 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3803 EQU rbp - 452 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3805 EQU rbp - 456 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 9 , readHits= 9 )
  tmp3809 EQU rbp - 460 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp3833 EQU rbp - 464 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3836 EQU rbp - 468 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3841 EQU rbp - 472 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3846 EQU rbp - 476 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 43 , readHits= 43 )
  tmp3853 EQU rbp - 480 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 484 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  tmp3858 EQU rbp - 488 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3861 EQU rbp - 492 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3864 EQU rbp - 496 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3869 EQU rbp - 500 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3874 EQU rbp - 504 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3877 EQU rbp - 508 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3879 EQU rbp - 512 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3881 EQU rbp - 516 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3892 EQU rbp - 520 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3895 EQU rbp - 524 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3897 EQU rbp - 528 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3904 EQU rbp - 532 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3907 EQU rbp - 536 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3910 EQU rbp - 540 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3913 EQU rbp - 544 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3916 EQU rbp - 548 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3919 EQU rbp - 552 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3922 EQU rbp - 556 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3925 EQU rbp - 560 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3928 EQU rbp - 564 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3931 EQU rbp - 568 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3934 EQU rbp - 572 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3937 EQU rbp - 576 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 608

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ prefix ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [value + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [lval + Variant_t.type], eax
  mov [rval + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [tmp3765 + Variant_t.type], eax
  mov [tmp3776 + Variant_t.type], eax
  mov [sep + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3784 + Variant_t.type], eax
  mov [tmp3786 + Variant_t.type], eax
  mov [symbolTable + Variant_t.type], eax
  mov [symbols + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3819 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3828 + Variant_t.type], eax
  mov [arrayOfValues + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3884 + Variant_t.type], eax
  mov [tmp3885 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3765 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3765 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3765 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp3765 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp3765 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3765 + Variant_t.value]
  mov dword [ childrenCnt ], eax

  mov dword [ tmp3766 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp3766 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ lval ]
  call __MOLD_VariantMove

  mov dword [ tmp3766 ], 4

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3768

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal22
  lea rcx , [ __literal22 ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
  lea rcx , [ value ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal22
  lea rcx , [ __literal22 ]
  call qword [rbx + 8 * 45 ]

  jmp l3769

l3768:

  mov dword [ tmp3766 ], 9

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3771

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3765 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3765 + Variant_t.type ], 7
  jnz l3774

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3776 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt15 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3775

l3774:

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal424
  lea rcx , [ __literal424 ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l3778

l3777:

  ; __mold_syscall( 45 )
  lea rcx , [ sep ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ childNode ]
  call  __ASTPrinterText__printNode$2

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal423 ]
  call __MOLD_VariantMove

  ret

l3778:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3777 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal76
  lea rcx , [ __literal76 ]
  call qword [rbx + 8 * 45 ]

l3775:

  jmp l3772

l3771:

  mov dword [ tmp3766 ], 10

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3779

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3776 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3776 + Variant_t.type ], 8
  jnz l3782

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt16 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3783

l3782:

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3786 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp3786 ]
  push rdi
  lea  rdi , [ tmp3784 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp3766 ], 0

  mov [ tmp3786 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3786 + Variant_t.value], rax

  lea rcx, [ tmp3784 ]
  lea rdx, [ tmp3786 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3787

  lea rcx, [__fmt17 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3788

l3787:

  lea rcx, [__fmt18 ]
  call __MOLD_PrintFormatFromMemory

l3788:

l3783:

  jmp l3780

l3779:

  mov dword [ tmp3766 ], 30

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jge l3789

  ; __mold_syscall( 45 )
  lea rcx , [ value ]
  call qword [rbx + 8 * 45 ]

  jmp l3790

l3789:

  mov dword [ tmp3766 ], 30

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3791

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l3794

l3793:

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ childNode ]
  call  __ASTPrinterText__printNode$2

  ret

l3794:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3793 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l3792

l3791:

  mov dword [ tmp3766 ], 31

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3796

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolTable  + Variant_t.type], 0
  jz l3799

  lea rcx , [ symbolTable ]
  lea  rax , [ symbols ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6571
  movsxd rax, dword [ symbols + Variant_t.value ]
  mov    qword [ symbols + Variant_t.value ], rax
l6571:


; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l3802

l3801:

  mov dword [ tmp3803 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3786 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3766 ], 5

  mov [ tmp3784 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3784 + Variant_t.value], rax

  lea rcx, [ tmp3786 ]
  lea rdx, [ tmp3784 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3804

  lea  rcx , [ item ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3766 ], 0

  mov [ tmp3786 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3786 + Variant_t.value], rax

  lea  rcx , [ tmp3786 ]
  lea  rdx , [ tmp3784 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp3803 ], eax

l3804:

  cmp dword [ tmp3803 ], 0
  jz l3806

  lea  rcx , [ item ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3805 ], 1

  cmp [ value  + Variant_t.type], 7
  jz l3808

  xor eax, eax
  cmp [ value  + Variant_t.type], 8
  setz al
  mov dword [ tmp3805 ], eax

l3808:

  cmp dword [ tmp3805 ], 0
  jz l3810

  lea  rcx , [ item ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3786 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt19 ]
  call __MOLD_PrintFormatFromMemory

l3810:

l3811:

l3806:

l3807:

  ret

l3802:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3801 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
l3799:

l3800:

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ node ]
  call  __ASTPrinterText__printNode_codeBlock$2

  jmp l3797

l3796:

  mov dword [ tmp3766 ], 33

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3812

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal428
  lea rcx , [ __literal428 ]
  call qword [rbx + 8 * 45 ]

  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3786 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3786 ]
  call qword [rbx + 8 * 45 ]

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ node ]
  call  __ASTPrinterText__printNode_codeBlock$2

  lea rcx, [__fmt20 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3813

l3812:

  mov dword [ tmp3803 ], 1

  mov dword [ tmp3766 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jz l3814

  mov dword [ tmp3766 ], 32

  mov dword [ tmp3803 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3766 ]
  setz byte [ tmp3803 ]

l3814:

  cmp dword [ tmp3803 ], 0
  jz l3815

  mov dword [ tmp3766 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3817

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal430 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3819 ]
  call qword [rbx + 8 * 45 ]

  jmp l3818

l3817:

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal431 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3819 ]
  call qword [rbx + 8 * 45 ]

l3818:

  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3786 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3786 ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal421
  lea rcx , [ __literal421 ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  lea  rcx , [ node ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp3786 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneParam
; 
  jmp l3821

l3820:

  ; __mold_syscall( 45 )
  lea rcx , [ sep ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
  lea rcx , [ oneParam ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal423 ]
  call __MOLD_VariantMove

  ret

l3821:

  lea  rcx , [ tmp3786 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l3820 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal176
  lea rcx , [ __literal176 ]
  call qword [rbx + 8 * 45 ]

  lea  rcx , [ node ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp3786 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3786  + Variant_t.type], 0
  jz l3822

  lea  rcx , [ node ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt21 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3823

l3822:

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

l3823:

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ node ]
  call  __ASTPrinterText__printNode_codeBlock$2

  mov dword [ tmp3766 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3824

  lea rcx, [__fmt22 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3825

l3824:

  lea rcx, [__fmt23 ]
  call __MOLD_PrintFormatFromMemory

l3825:

  jmp l3816

l3815:

  mov dword [ tmp3766 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3826

  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3828 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3766 ], 31

  mov [ tmp3828 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3828 + Variant_t.value], rax

  lea rcx, [ tmp3784 ]
  lea rdx, [ tmp3828 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3829

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

l3829:

l3830:

  mov dword [ tmp3766 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal260
  lea rcx , [ __literal260 ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
  lea rcx , [ value ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3766 ], 1

  mov [ tmp3828 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3828 + Variant_t.value], rax

  mov dword [ tmp3809 ], 1

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea r8 , [ tmp3828 ]
  mov r9d , dword [ tmp3809 ]
  call  __ASTPrinterText__printNode_paramsList$3

  jmp l3827

l3826:

  mov dword [ tmp3766 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3831

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal435
  lea rcx , [ __literal435 ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
  lea rcx , [ value ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3766 ], 1

  mov [ tmp3828 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3828 + Variant_t.value], rax

  mov dword [ tmp3833 ], 1

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea r8 , [ tmp3828 ]
  mov r9d , dword [ tmp3833 ]
  call  __ASTPrinterText__printNode_paramsList$3

  jmp l3832

l3831:

  mov dword [ tmp3766 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3834

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal436 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3819 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3766 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp3766 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3784 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3766 ], 40

  mov [ tmp3784 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3784 + Variant_t.value], rax

  lea rcx, [ tmp3828 ]
  lea rdx, [ tmp3784 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3837

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal422 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  mov dword [ tmp3766 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp3819 ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

  jmp l3838

l3837:

  mov dword [ tmp3766 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

l3838:

  mov dword [ tmp3766 ], 3

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3766 ]
  jnz l3839

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  lea rcx, [__fmt24 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp3766 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3828 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3766 ], 40

  mov [ tmp3828 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3766 ]
  mov [ tmp3828 + Variant_t.value], rax

  lea rcx, [ tmp3784 ]
  lea rdx, [ tmp3828 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3842

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal422 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  mov dword [ tmp3766 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp3819 ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

  jmp l3843

l3842:

  mov dword [ tmp3766 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

l3843:

l3839:

l3840:

  lea rcx, [__fmt25 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3835

l3834:

  mov dword [ tmp3766 ], 50

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3766 ]
  jnz l3844

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal439 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 45 )
  lea rcx , [ tmp3819 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3766 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3766 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp3766 ], 1

  mov dword [ idx ], 1

; 
; -----------------------------
; BEGIN: for idx in tmp3846 .. childrenCnt
; 
l3847:

  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l3848

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3828 ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ arrayOfValues ]
  call  __MOLD_VariantLoadFromKey

  cmp [ arrayOfValues  + Variant_t.type], 0
  jz l3849

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal440
  lea rcx , [ __literal440 ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys undefined values oneValue
; 
  jmp l3852

l3851:

  ; __mold_syscall( 45 )
  lea rcx , [ sep ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
  lea rcx , [ oneValue ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal423 ]
  call __MOLD_VariantMove

  ret

l3852:

  lea  rcx , [ arrayOfValues ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneValue ]
  lea  r9 , [ l3851 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneValue
; -----------------------------
; 
  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3850

l3849:

  lea rcx, [__fmt26 ]
  call __MOLD_PrintFormatFromMemory

l3850:

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3784 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3853 ], 31

  mov [ tmp3784 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3853 ]
  mov [ tmp3784 + Variant_t.value], rax

  lea rcx, [ tmp3828 ]
  lea rdx, [ tmp3784 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3854

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal422 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp3819 ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

  jmp l3855

l3854:

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal442 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp3819 ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

l3855:

  mov eax, dword [ idx ]
  add eax, dword [ tmp3766 ]
  mov dword [ idx ], eax

  jmp l3847

l3848:

; 
; END: for idx in tmp3846 .. childrenCnt step tmp3766
; -----------------------------
; 
  lea rcx, [__fmt27 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3845

l3844:

  mov dword [ tmp3846 ], 77

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3856

  mov dword [ tmp3846 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

  jmp l3857

l3856:

  mov dword [ tmp3846 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3859

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
  lea rcx , [ value ]
  call qword [rbx + 8 * 45 ]

  lea rcx, [ value ]
  lea rdx, [ __literal16 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3862

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal328
  lea rcx , [ __literal328 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 0

  mov [ tmp3784 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3846 ]
  mov [ tmp3784 + Variant_t.value], rax

  mov dword [ tmp3864 ], 0

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea r8 , [ tmp3784 ]
  mov r9d , dword [ tmp3864 ]
  call  __ASTPrinterText__printNode_paramsList$3

  jmp l3863

l3862:

  mov dword [ tmp3846 ], 0

  mov [ tmp3784 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3846 ]
  mov [ tmp3784 + Variant_t.value], rax

  mov dword [ tmp3864 ], 1

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea r8 , [ tmp3784 ]
  mov r9d , dword [ tmp3864 ]
  call  __ASTPrinterText__printNode_paramsList$3

l3863:

  jmp l3860

l3859:

  mov dword [ tmp3846 ], 43

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3865

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal446
  lea rcx , [ __literal446 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp3846 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode_codeBlock$2

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal447
  lea rcx , [ __literal447 ]
  call qword [rbx + 8 * 45 ]

  jmp l3866

l3865:

  mov dword [ tmp3846 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3867

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal448
  lea rcx , [ __literal448 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal449
  lea rcx , [ __literal449 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal450
  lea rcx , [ __literal450 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3784 ]
  call  __ASTPrinterText__printNode$2

  mov dword [ tmp3846 ], 3

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp3828 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3846 ], 1

  mov [ tmp3828 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3846 ]
  mov [ tmp3828 + Variant_t.value], rax

  lea rcx, [ tmp3784 ]
  lea rdx, [ tmp3828 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3870

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal451
  lea rcx , [ __literal451 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 3

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

l3870:

l3871:

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp3846 ], 4

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode_codeBlock$2

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal452
  lea rcx , [ __literal452 ]
  call qword [rbx + 8 * 45 ]

  jmp l3868

l3867:

  mov dword [ tmp3846 ], 45

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3872

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal453
  lea rcx , [ __literal453 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal449
  lea rcx , [ __literal449 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3846 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode$2

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp3846 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp3846 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ prefix ]
  lea r8 , [ tmp3828 ]
  call  __ASTPrinterText__printNode_codeBlock$2

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal452
  lea rcx , [ __literal452 ]
  call qword [rbx + 8 * 45 ]

  jmp l3873

l3872:

  mov dword [ tmp3846 ], 52

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3875

  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3877 ], 0

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l3878

  mov dword [ tmp3879 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3846 ], 5

  mov [ tmp3784 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3846 ]
  mov [ tmp3784 + Variant_t.value], rax

  lea rcx, [ tmp3828 ]
  lea rdx, [ tmp3784 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l3880

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3784 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp3784  + Variant_t.type], 5
  setz al
  mov dword [ tmp3879 ], eax

l3880:

  mov eax, dword [ tmp3879 ]
  mov dword [ tmp3877 ], eax

l3878:

  cmp dword [ tmp3877 ], 0
  jz l3882

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3885 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3885 ]
  push rdi
  lea  rdi , [ tmp3828 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3884 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp3828 ]
  lea  r8 , [ tmp3884 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3884 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin

l3882:

l3883:

  ; __mold_syscall( 45 )
  lea rcx , [ value ]
  call qword [rbx + 8 * 45 ]

  jmp l3876

l3875:

  mov dword [ tmp3846 ], 54

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3886

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ lval ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal424
  lea rcx , [ __literal424 ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ rval ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal76
  lea rcx , [ __literal76 ]
  call qword [rbx + 8 * 45 ]

  jmp l3887

l3886:

  mov dword [ tmp3846 ], 55

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3888

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ lval ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal454
  lea rcx , [ __literal454 ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ rval ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal455
  lea rcx , [ __literal455 ]
  call qword [rbx + 8 * 45 ]

  jmp l3889

l3888:

  mov dword [ tmp3846 ], 56

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3890

  ; __mold_syscall( 45 )
  lea rcx , [ prefix ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ lval ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal456
  lea rcx , [ __literal456 ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ rval ]
  call  __ASTPrinterText__printNode$2

  jmp l3891

l3890:

  mov dword [ tmp3846 ], 57

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3893

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal457
  lea rcx , [ __literal457 ]
  call qword [rbx + 8 * 45 ]

  mov dword [ tmp3895 ], 1

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3828 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3846 ], 58

  mov [ tmp3885 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3846 ]
  mov [ tmp3885 + Variant_t.value], rax

  lea rcx, [ tmp3828 ]
  lea rdx, [ tmp3885 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l3896

  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3885 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3846 ], 59

  mov [ tmp3828 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3846 ]
  mov [ tmp3828 + Variant_t.value], rax

  lea  rcx , [ tmp3885 ]
  lea  rdx , [ tmp3828 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3895 ], eax

l3896:

  cmp dword [ tmp3895 ], 0
  jz l3898

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal421
  lea rcx , [ __literal421 ]
  call qword [rbx + 8 * 45 ]

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ x ]
  call  __ASTPrinterText__printNode$2

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal176
  lea rcx , [ __literal176 ]
  call qword [rbx + 8 * 45 ]

  jmp l3899

l3898:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ x ]
  call  __ASTPrinterText__printNode$2

l3899:

  jmp l3894

l3893:

  mov dword [ tmp3846 ], 58

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3900

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal89
  lea r8 , [ __literal89 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3901

l3900:

  mov dword [ tmp3846 ], 59

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3902

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal88
  lea r8 , [ __literal88 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3903

l3902:

  mov dword [ tmp3846 ], 60

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3905

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal91
  lea r8 , [ __literal91 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3906

l3905:

  mov dword [ tmp3846 ], 61

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3908

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal92
  lea r8 , [ __literal92 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3909

l3908:

  mov dword [ tmp3846 ], 64

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3911

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal93
  lea r8 , [ __literal93 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3912

l3911:

  mov dword [ tmp3846 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3914

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal458
  lea r8 , [ __literal458 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3915

l3914:

  mov dword [ tmp3846 ], 67

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3917

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal459
  lea r8 , [ __literal459 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3918

l3917:

  mov dword [ tmp3846 ], 68

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3920

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal460
  lea r8 , [ __literal460 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3921

l3920:

  mov dword [ tmp3846 ], 69

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3923

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal461
  lea r8 , [ __literal461 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3924

l3923:

  mov dword [ tmp3846 ], 70

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3926

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal462
  lea r8 , [ __literal462 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3927

l3926:

  mov dword [ tmp3846 ], 71

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3929

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal463
  lea r8 , [ __literal463 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3930

l3929:

  mov dword [ tmp3846 ], 72

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3932

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal86
  lea r8 , [ __literal86 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3933

l3932:

  mov dword [ tmp3846 ], 73

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jnz l3935

  lea rcx , [ this ]
  lea rdx , [ node ]
; WARNING: Failed to get variable size: __literal87
  lea r8 , [ __literal87 ]
  call  __ASTPrinterText__printNode_twoArgsOp$2

  jmp l3936

l3935:

  mov dword [ tmp3846 ], 78

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3846 ]
  jz l3938

  mov [ tmp3885 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp3885 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp3885 ]
  push rdi
  lea  rdi , [ tmp3828 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal120 ]
  lea  rdx , [ tmp3828 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp3819 ]
  call qword [rbx + 8 * 41 ]

l3938:

l3939:

l3936:

l3933:

l3930:

l3927:

l3924:

l3921:

l3918:

l3915:

l3912:

l3909:

l3906:

l3903:

l3901:

l3894:

l3891:

l3889:

l3887:

l3876:

l3873:

l3868:

l3866:

l3860:

l3857:

l3845:

l3835:

l3832:

l3827:

l3816:

l3813:

l3797:

l3792:

l3790:

l3780:

l3772:

l3769:


  ; clean frame
  ; -----------
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3776 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ tmp3784 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3786 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam
  lea  rcx, [ tmp3828 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneValue
  lea  rcx, [ tmp3884 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3885 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 608
  pop  rbp
  ret


  restore this
  restore prefix
  restore node
  restore opcode
  restore value
  restore children
  restore childrenCnt
  restore lval
  restore rval
  restore x
  restore tmp3765
  restore tmp3766
  restore tmp3767
  restore tmp3770
  restore tmp3773
  restore tmp3776
  restore sep
  restore childNode
  restore tmp3781
  restore tmp3784
  restore tmp3785
  restore tmp3786
  restore tmp3795
  restore tmp3798
  restore tmp3803
  restore tmp3805
  restore tmp3809
  restore symbolTable
  restore symbols
  restore item
  restore tmp3819
  restore oneParam
  restore tmp3828
  restore tmp3833
  restore tmp3836
  restore tmp3841
  restore tmp3846
  restore tmp3853
  restore idx
  restore arrayOfValues
  restore oneValue
  restore tmp3858
  restore tmp3861
  restore tmp3864
  restore tmp3869
  restore tmp3874
  restore tmp3877
  restore tmp3879
  restore tmp3881
  restore tmp3884
  restore tmp3885
  restore symbolInfo
  restore tmp3892
  restore tmp3895
  restore tmp3897
  restore tmp3904
  restore tmp3907
  restore tmp3910
  restore tmp3913
  restore tmp3916
  restore tmp3919
  restore tmp3922
  restore tmp3925
  restore tmp3928
  restore tmp3931
  restore tmp3934
  restore tmp3937

; -----------------------------------------------
; function __ASTPrinterText_printNode$1
; -----------------------------------------------
__ASTPrinterText_printNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  lea r8 , [ node ]
  call  __ASTPrinterText__printNode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore node

; -----------------------------------------------
; function __ASTPrinterHtml__printSymbolTable$1
; -----------------------------------------------
__ASTPrinterHtml__printSymbolTable$1:

  ; init frame
  ; ----------
  symbolTable EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbols EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp3943 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp3946 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp3950 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3951 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3955 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  symbolId EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 152 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 21 )
  value EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp3942 EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3947 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp3952 EQU rbp - 180 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  xor eax, eax
  mov [symbols + Variant_t.type], eax
  mov [tmp3943 + Variant_t.type], eax
  mov [tmp3946 + Variant_t.type], eax
  mov [tmp3950 + Variant_t.type], eax
  mov [tmp3951 + Variant_t.type], eax
  mov [tmp3955 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [value + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ symbolTable ]
  lea  rax , [ symbols ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6572
  movsxd rax, dword [ symbols + Variant_t.value ]
  mov    qword [ symbols + Variant_t.value ], rax
l6572:


  lea rcx, [__fmt28 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys symbolId values symbolInfo
; 
  jmp l3941

l3940:

  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ __literal88 ]
  call __MOLD_VariantMove

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3943 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3943  + Variant_t.type], 0
  jz l3944

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey


  lea  rcx, [ tmp3950 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal466 ]
  lea  rdx , [ value ]
  lea  r8 , [ tmp3950 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3950 ]
  lea  rdx , [ __literal466 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin

l3948:

l3949:

l3944:

l3945:

  lea rcx, [__fmt29 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3946 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt30 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp3946 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt30 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp3946 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt31 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3951 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3951 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3951 + Variant_t.value]
  mov dword [ tmp3952 ], eax

  lea  rcx , [ SYMBOL_KIND_AS_TEXT ]
  lea  rdx , [ tmp3952 ]
  lea  r8 , [ tmp3946 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt30 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp3951 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3951 ]
  lea  rax , [ tmp3946 ]
  call  AST_ConvertDataTypeToText

  lea rcx, [__fmt30 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp3946 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt30 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp3946 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3946  + Variant_t.type], 0
  jz l3953

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp3955 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp3955 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3951 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt32 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3954

l3953:

  lea rcx, [__fmt33 ]
  call __MOLD_PrintFormatFromMemory

l3954:

  lea rcx, [__fmt34 ]
  call __MOLD_PrintFormatFromMemory

  ret

l3941:

  lea rcx , [ symbols ]
  lea rdx , [ symbolId ]
  lea r8 , [ symbolInfo ]
  lea r9 , [ l3940 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys symbolId values symbolInfo
; -----------------------------
; 
  lea rcx, [__fmt35 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3943 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3946 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3950 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3951 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3955 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolId
  ; Skipped loop iterator symbolInfo
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore symbolTable
  restore symbols
  restore tmp3942
  restore tmp3943
  restore tmp3946
  restore tmp3947
  restore tmp3950
  restore tmp3951
  restore tmp3952
  restore tmp3955
  restore symbolId
  restore symbolInfo
  restore value

; -----------------------------------------------
; function __ASTPrinterHtml__printNode$1
; -----------------------------------------------
__ASTPrinterHtml__printNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 34 )
  children EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  tmp3956 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp3958 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp3962 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp3965 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp3967 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  childNode EQU rbp - 152 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp3994 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3995 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3996 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp3997 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  value EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  tmp4008 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4011 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  item EQU rbp - 280 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  opcode EQU rbp - 284 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 12 )
  tmp3957 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 13 , readHits= 13 )
  tmp3959 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp3964 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 9 , readHits= 9 )
  tmp3966 EQU rbp - 300 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp3985 EQU rbp - 304 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp3987 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp3989 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 352

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [tmp3956 + Variant_t.type], eax
  mov [tmp3958 + Variant_t.type], eax
  mov [tmp3962 + Variant_t.type], eax
  mov [tmp3965 + Variant_t.type], eax
  mov [tmp3967 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp3994 + Variant_t.type], eax
  mov [tmp3995 + Variant_t.type], eax
  mov [tmp3996 + Variant_t.type], eax
  mov [tmp3997 + Variant_t.type], eax
  mov [value + Variant_t.type], eax
  mov [tmp4008 + Variant_t.type], eax
  mov [tmp4011 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3956 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3956 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3956 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt36 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3956 ]
  call  __MOLD_VariantLoadFromKey

  mov ecx , dword [ opcode ]
  lea  rax , [ tmp3958 ]
  call  AST_GetOpcodeAsText

  lea rcx, [__fmt37 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3956 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3956  + Variant_t.type], 0
  jz l3960

  lea  rcx , [ node ]
  lea  rdx , [ __literal122 ]
  lea  r8 , [ tmp3962 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt38 ]
  call __MOLD_PrintFormatFromMemory

l3960:

l3961:

  mov dword [ tmp3959 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal357 ]
  lea  r8 , [ tmp3962 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3962  + Variant_t.type], 0
  jz l3963

  lea  rcx , [ node ]
  lea  rdx , [ __literal357 ]
  lea  r8 , [ tmp3965 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp3966 ], 1

  mov eax, dword [ tmp3966 ]
  mov [ tmp3967 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3967 + Variant_t.value], rax

  lea  rcx , [ tmp3965 ]
  lea  rdx , [ tmp3967 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp3959 ], eax

l3963:

  cmp dword [ tmp3959 ], 0
  jz l3968

  lea rcx, [__fmt39 ]
  call __MOLD_PrintFormatFromMemory

l3968:

l3969:

  mov dword [ tmp3959 ], 1

  mov dword [ tmp3957 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jz l3970

  mov dword [ tmp3957 ], 34

  mov dword [ tmp3959 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3957 ]
  setz byte [ tmp3959 ]

l3970:

  cmp dword [ tmp3959 ], 0
  jz l3971

  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3967 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt40 ]
  call __MOLD_PrintFormatFromMemory

l3971:

l3972:

  mov dword [ tmp3959 ], 1

  mov dword [ tmp3957 ], 31

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jz l3973

  mov dword [ tmp3957 ], 30

  mov dword [ tmp3959 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3957 ]
  setz byte [ tmp3959 ]

l3973:

  cmp dword [ tmp3959 ], 0
  jz l3974

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3967 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3967  + Variant_t.type], 0
  jz l3976

  lea rcx, [__fmt41 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ node ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp3965 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp3965 ]
  call  __ASTPrinterHtml__printSymbolTable$1

  lea rcx, [__fmt42 ]
  call __MOLD_PrintFormatFromMemory

l3976:

l3977:

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l3979

l3978:

  lea rcx, [__fmt41 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx , [ this ]
  lea rdx , [ childNode ]
  call  __ASTPrinterHtml__printNode$1

  lea rcx, [__fmt42 ]
  call __MOLD_PrintFormatFromMemory

  ret

l3979:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3978 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l3975

l3974:

  mov dword [ tmp3957 ], 33

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jnz l3980

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l3983

l3982:

  lea rcx, [__fmt41 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx , [ this ]
  lea rdx , [ childNode ]
  call  __ASTPrinterHtml__printNode$1

  lea rcx, [__fmt42 ]
  call __MOLD_PrintFormatFromMemory

  ret

l3983:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3982 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l3981

l3980:

  mov dword [ tmp3966 ], 1

  mov dword [ tmp3957 ], 30

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jl l3984

  mov dword [ tmp3985 ], 1

  mov dword [ tmp3957 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jz l3986

  mov dword [ tmp3987 ], 1

  mov dword [ tmp3957 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jz l3988

  mov dword [ tmp3957 ], 52

  mov dword [ tmp3987 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3957 ]
  setz byte [ tmp3987 ]

l3988:

  mov eax, dword [ tmp3987 ]
  mov dword [ tmp3985 ], eax

l3986:

  mov eax, dword [ tmp3985 ]
  mov dword [ tmp3966 ], eax

l3984:

  cmp dword [ tmp3966 ], 0
  jz l3990

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  cmp [ value + Variant_t.type ], 5
  jnz l3992

  lea  rcx, [ tmp3996 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ value ]
  lea  r8 , [ tmp3996 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp3995 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3996 ]
  lea  rdx , [ __literal482 ]
  lea  r8 , [ tmp3995 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ node ]
  lea  rax , [ tmp3957 ]
  call  AST_GetDataType

  mov [ tmp3997 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3957 ]
  mov [ tmp3997 + Variant_t.value], rax

  lea rcx , [ tmp3997 ]
  lea  rax , [ tmp3965 ]
  call  AST_ConvertDataTypeToText

  lea  rcx, [ tmp3994 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3995 ]
  lea  rdx , [ tmp3965 ]
  lea  r8 , [ tmp3994 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3994 ]
  lea  rdx , [ __literal483 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin

l3992:

l3993:

  lea rcx, [__fmt43 ]
  call __MOLD_PrintFormatFromMemory

  jmp l3991

l3990:

  mov dword [ tmp3957 ], 77

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jnz l3998

  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp3997 ]
  lea  rax , [ tmp3965 ]
  call  AST_ConvertDataTypeToText

  lea rcx, [__fmt44 ]
  call __MOLD_PrintFormatFromMemory

l3998:

l3999:

l3991:

  lea rcx, [__fmt29 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l4001

l4000:

  lea rcx, [__fmt45 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx , [ this ]
  lea rdx , [ childNode ]
  call  __ASTPrinterHtml__printNode$1

  lea rcx, [__fmt46 ]
  call __MOLD_PrintFormatFromMemory

  ret

l4001:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l4000 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  lea rcx, [__fmt34 ]
  call __MOLD_PrintFormatFromMemory

l3981:

l3975:

  mov dword [ tmp3957 ], 52

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3957 ]
  jnz l4002

  lea rcx, [__fmt47 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp3965 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3965 + Variant_t.type ], 7
  jnz l4004

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l4007

l4006:

  lea  rcx , [ item ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4008 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt48 ]
  call __MOLD_PrintFormatFromMemory

  ret

l4007:

  lea  rcx , [ tmp3997 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4006 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l4005

l4004:

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp3997 + Variant_t.type ], 0
  jnz l4009

  lea rcx, [__fmt49 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4010

l4009:

  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp4011 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4011 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4008 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt50 ]
  call __MOLD_PrintFormatFromMemory

l4010:

l4005:

  lea rcx, [__fmt42 ]
  call __MOLD_PrintFormatFromMemory

l4002:

l4003:

  lea rcx, [__fmt35 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3956 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3958 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3962 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3965 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3967 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ tmp3994 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3995 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3996 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4008 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4011 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 352
  pop  rbp
  ret


  restore this
  restore node
  restore opcode
  restore children
  restore tmp3956
  restore tmp3957
  restore tmp3958
  restore tmp3959
  restore tmp3962
  restore tmp3964
  restore tmp3965
  restore tmp3966
  restore tmp3967
  restore childNode
  restore tmp3985
  restore tmp3987
  restore tmp3989
  restore tmp3994
  restore tmp3995
  restore tmp3996
  restore tmp3997
  restore value
  restore tmp4008
  restore tmp4011
  restore item

; -----------------------------------------------
; function __ASTPrinterHtml_printNode$1
; -----------------------------------------------
__ASTPrinterHtml_printNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt51 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx , [ this ]
  lea rdx , [ node ]
  call  __ASTPrinterHtml__printNode$1

  lea rcx, [__fmt52 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore node

; -----------------------------------------------
; function __ASTTranslator_constructor$1
; -----------------------------------------------
__ASTTranslator_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 5 , readHits= 4 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4012 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp4012 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4012 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ tmp4012 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4012 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal491 ]
  lea  r8 , [ tmp4012 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4012 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal492 ]
  lea  r8 , [ tmp4012 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4012 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore app
  restore tmp4012

; -----------------------------------------------
; function __ASTTranslator__debug$1
; -----------------------------------------------
__ASTTranslator__debug$1:

  ret


  restore this
  restore app
  restore tmp4012

; -----------------------------------------------
; function __ASTTranslator__error$1
; -----------------------------------------------
__ASTTranslator__error$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  msg EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4013 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4014 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  xor eax, eax
  mov [tmp4013 + Variant_t.type], eax
  mov [tmp4014 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4014 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4014 ]
  lea rdx , [ msg ]
  lea  rax , [ tmp4013 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6573
  movsxd rax, dword [ tmp4013 + Variant_t.value ]
  mov    qword [ tmp4013 + Variant_t.value ], rax
l6573:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4013 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4014 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadArgsVector$1
; -----------------------------------------------
__ASTTranslator__loadArgsVector$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslator__loadArgsVector$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadArgsCount$1
; -----------------------------------------------
__ASTTranslator__loadArgsCount$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslator__loadArgsCount$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__syscall$4
; -----------------------------------------------
__ASTTranslator__syscall$4_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ id ]
  ; skipped unused parameter [ params ]
  ; skipped unused parameter [ paramsCnt ]
__ASTTranslator__syscall$4:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadArray$1
; -----------------------------------------------
__ASTTranslator__loadArray$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslator__loadArray$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadMap$1
; -----------------------------------------------
__ASTTranslator__loadMap$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslator__loadMap$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadNull$1
; -----------------------------------------------
__ASTTranslator__loadNull$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslator__loadNull$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadImm$2
; -----------------------------------------------
__ASTTranslator__loadImm$2_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ value ]
__ASTTranslator__loadImm$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadImmAsVariant$2
; -----------------------------------------------
__ASTTranslator__loadImmAsVariant$2_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ value ]
__ASTTranslator__loadImmAsVariant$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadVariable$1
; -----------------------------------------------
__ASTTranslator__loadVariable$1_vcall:
  ; skipped unused parameter [ name ]
__ASTTranslator__loadVariable$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__call$4
; -----------------------------------------------
__ASTTranslator__call$4_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ funcProto ]
  ; skipped unused parameter [ params ]
  ; skipped unused parameter [ paramsCnt ]
__ASTTranslator__call$4:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__invokeMethod$3
; -----------------------------------------------
__ASTTranslator__invokeMethod$3_vcall:
  ; skipped unused parameter [ methodName ]
  ; skipped unused parameter [ params ]
  ; skipped unused parameter [ paramsCnt ]
__ASTTranslator__invokeMethod$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__neg$2
; -----------------------------------------------
__ASTTranslator__neg$2_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ value ]
__ASTTranslator__neg$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__add$3
; -----------------------------------------------
__ASTTranslator__add$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__add$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__stringJoin$3
; -----------------------------------------------
__ASTTranslator__stringJoin$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__stringJoin$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__sub$3
; -----------------------------------------------
__ASTTranslator__sub$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__sub$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__mul$3
; -----------------------------------------------
__ASTTranslator__mul$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__mul$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__div$3
; -----------------------------------------------
__ASTTranslator__div$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__div$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__idiv$3
; -----------------------------------------------
__ASTTranslator__idiv$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__idiv$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__compareEQ$3
; -----------------------------------------------
__ASTTranslator__compareEQ$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__compareEQ$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__compareNEQ$3
; -----------------------------------------------
__ASTTranslator__compareNEQ$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__compareNEQ$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__compareLT$3
; -----------------------------------------------
__ASTTranslator__compareLT$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__compareLT$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__compareLE$3
; -----------------------------------------------
__ASTTranslator__compareLE$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__compareLE$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__compareGT$3
; -----------------------------------------------
__ASTTranslator__compareGT$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__compareGT$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__compareGE$3
; -----------------------------------------------
__ASTTranslator__compareGE$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslator__compareGE$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__boolAnd$3
; -----------------------------------------------
__ASTTranslator__boolAnd$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__boolOr$3
; -----------------------------------------------
__ASTTranslator__boolOr$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__isTypeOf$3
; -----------------------------------------------
__ASTTranslator__isTypeOf$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ typeId ]
__ASTTranslator__isTypeOf$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__isNotTypeOf$3
; -----------------------------------------------
__ASTTranslator__isNotTypeOf$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ typeId ]
__ASTTranslator__isNotTypeOf$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadFromIndex$3
; -----------------------------------------------
__ASTTranslator__loadFromIndex$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ box ]
  ; skipped unused parameter [ idx ]
__ASTTranslator__loadFromIndex$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__loadFromKey$3
; -----------------------------------------------
__ASTTranslator__loadFromKey$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ box ]
  ; skipped unused parameter [ key ]
__ASTTranslator__loadFromKey$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__storeAtIndex$3
; -----------------------------------------------
__ASTTranslator__storeAtIndex$3_vcall:
  ; skipped unused parameter [ box ]
  ; skipped unused parameter [ idx ]
  ; skipped unused parameter [ value ]
__ASTTranslator__storeAtIndex$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__storeAtKey$3
; -----------------------------------------------
__ASTTranslator__storeAtKey$3_vcall:
  ; skipped unused parameter [ box ]
  ; skipped unused parameter [ key ]
  ; skipped unused parameter [ value ]
__ASTTranslator__storeAtKey$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__storeAtIndexAndDrop$3
; -----------------------------------------------
__ASTTranslator__storeAtIndexAndDrop$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ idx ]
  ; skipped unused parameter [ value ]
__ASTTranslator__storeAtIndexAndDrop$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__storeAtKeyAndDrop$3
; -----------------------------------------------
__ASTTranslator__storeAtKeyAndDrop$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ key ]
  ; skipped unused parameter [ value ]
__ASTTranslator__storeAtKeyAndDrop$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__createObject$2
; -----------------------------------------------
__ASTTranslator__createObject$2_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ classProto ]
__ASTTranslator__createObject$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__convert$4
; -----------------------------------------------
__ASTTranslator__convert$4_vcall:
  ; skipped unused parameter [ dst ]
  ; skipped unused parameter [ src ]
  ; skipped unused parameter [ srcType ]
  ; skipped unused parameter [ dstType ]
__ASTTranslator__convert$4:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__emitFunctionBody$2
; -----------------------------------------------
__ASTTranslator__emitFunctionBody$2_vcall:
  ; skipped unused parameter [ funcName ]
  ; skipped unused parameter [ funcProto ]
__ASTTranslator__emitFunctionBody$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__dropRetVal$0
; -----------------------------------------------
__ASTTranslator__dropRetVal$0_vcall:
__ASTTranslator__dropRetVal$0:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__declareFunction$2
; -----------------------------------------------
__ASTTranslator__declareFunction$2_vcall:
  ; skipped unused parameter [ funcName ]
  ; skipped unused parameter [ funcProto ]
__ASTTranslator__declareFunction$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__declareClass$2
; -----------------------------------------------
__ASTTranslator__declareClass$2_vcall:
  ; skipped unused parameter [ className ]
  ; skipped unused parameter [ classProto ]
__ASTTranslator__declareClass$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__declareVariable$1
; -----------------------------------------------
__ASTTranslator__declareVariable$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__assign$2
; -----------------------------------------------
__ASTTranslator__assign$2_vcall:
  ; skipped unused parameter [ name ]
  ; skipped unused parameter [ value ]
__ASTTranslator__assign$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__evaluateNodeLazyBoolAnd$3
; -----------------------------------------------
__ASTTranslator__evaluateNodeLazyBoolAnd$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ leftAst ]
  ; skipped unused parameter [ rightAst ]
__ASTTranslator__evaluateNodeLazyBoolAnd$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__evaluateNodeLazyBoolOr$3
; -----------------------------------------------
__ASTTranslator__evaluateNodeLazyBoolOr$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ leftAst ]
  ; skipped unused parameter [ rightAst ]
__ASTTranslator__evaluateNodeLazyBoolOr$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__executeNodeFor$5
; -----------------------------------------------
__ASTTranslator__executeNodeFor$5_vcall:
  ; skipped unused parameter [ iteratorName ]
  ; skipped unused parameter [ valueStart ]
  ; skipped unused parameter [ valueEnd ]
  ; skipped unused parameter [ valueStep ]
  ; skipped unused parameter [ bodyAst ]
__ASTTranslator__executeNodeFor$5:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__executeNodeForEach$5
; -----------------------------------------------
__ASTTranslator__executeNodeForEach$5_vcall:
  ; skipped unused parameter [ iteratorKey ]
  ; skipped unused parameter [ iteratorValue ]
  ; skipped unused parameter [ box ]
  ; skipped unused parameter [ bodyAst ]
  ; skipped unused parameter [ isMapMode ]
__ASTTranslator__executeNodeForEach$5:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__executeNodeWhile$2
; -----------------------------------------------
__ASTTranslator__executeNodeWhile$2_vcall:
  ; skipped unused parameter [ condAst ]
  ; skipped unused parameter [ bodyAst ]
__ASTTranslator__executeNodeWhile$2:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__executeNodeIf$3
; -----------------------------------------------
__ASTTranslator__executeNodeIf$3_vcall:
  ; skipped unused parameter [ cond ]
  ; skipped unused parameter [ codeIfTrue ]
  ; skipped unused parameter [ codeIfFalse ]
__ASTTranslator__executeNodeIf$3:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__executeNodeSwitch$1
; -----------------------------------------------
__ASTTranslator__executeNodeSwitch$1_vcall:
  ; skipped unused parameter [ node ]
__ASTTranslator__executeNodeSwitch$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__executeNodePrint$1
; -----------------------------------------------
__ASTTranslator__executeNodePrint$1_vcall:
  ; skipped unused parameter [ node ]
__ASTTranslator__executeNodePrint$1:

  jmp __MOLD_PrintErrorAndDie.notImplemented


  restore this
  restore msg
  restore tmp4013
  restore tmp4014

; -----------------------------------------------
; function __ASTTranslator__declareExternalFunction$2
; -----------------------------------------------
__ASTTranslator__declareExternalFunction$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  funcName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  funcProto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4015 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4016 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  xor eax, eax
  mov [tmp4015 + Variant_t.type], eax
  mov [tmp4016 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4016 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4016 ]
  lea rdx , [ funcName ]
  lea r8 , [ funcProto ]
  lea  rax , [ tmp4015 ]
  mov  r10d, 11
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6574
  movsxd rax, dword [ tmp4015 + Variant_t.value ]
  mov    qword [ tmp4015 + Variant_t.value ], rax
l6574:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4015 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4016 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore funcName
  restore funcProto
  restore tmp4015
  restore tmp4016

; -----------------------------------------------
; function __ASTTranslator__getTempVar$1
; -----------------------------------------------
__ASTTranslator__getTempVar$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  wantedType EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4017 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  xor eax, eax
  mov [tmp4017 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal492 ]
  lea  r8 , [ tmp4017 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4017 ]
  lea rdx , [ wantedType ]
  lea  rax , [ rv ]
  mov  r10d, 46
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6575
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l6575:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4017 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore wantedType
  restore rv
  restore tmp4017

; -----------------------------------------------
; function __ASTTranslator__getTempVarOrReuse$2
; -----------------------------------------------
__ASTTranslator__getTempVarOrReuse$2:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  currentVar EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  wantedType EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp4021 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4025 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmp4018 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4022 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4024 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ currentVar ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ wantedType ], xmm0
  xor eax, eax
  mov [tmp4021 + Variant_t.type], eax
  mov [tmp4025 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy

  cmp [ currentVar + Variant_t.type ], 5
  jnz l4019

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4021 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4021 ]
  lea rdx , [ currentVar ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6576
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6576:


  mov dword [ tmp4022 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4021 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4021  + Variant_t.type], 0
  jz l4023

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4025 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4025 ]
  lea  rdx , [ wantedType ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4022 ], eax

l4023:

  cmp dword [ tmp4022 ], 0
  jz l4026

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ currentVar ]
  call __MOLD_VariantMove

l4026:

l4027:

l4019:

l4020:

  cmp [ rv + Variant_t.type ], 0
  jnz l4028

  lea rcx , [ this ]
  lea rdx , [ wantedType ]
  lea  rax , [ rv ]
  call  __ASTTranslator__getTempVar$1

l4028:

l4029:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4021 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4025 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore this
  restore currentVar
  restore wantedType
  restore rv
  restore tmp4018
  restore tmp4021
  restore tmp4022
  restore tmp4024
  restore tmp4025
  restore symbolInfo

; -----------------------------------------------
; function __ASTTranslator__releaseTempVar$1
; -----------------------------------------------
__ASTTranslator__releaseTempVar$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4030 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4031 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp4030 + Variant_t.type], eax
  mov [tmp4031 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal492 ]
  lea  r8 , [ tmp4031 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4031 ]
  lea rdx , [ name ]
  lea  rax , [ tmp4030 ]
  mov  r10d, 47
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6577
  movsxd rax, dword [ tmp4030 + Variant_t.value ]
  mov    qword [ tmp4030 + Variant_t.value ], rax
l6577:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4030 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4031 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore tmp4030
  restore tmp4031

; -----------------------------------------------
; function __ASTTranslator__enterScope$1
; -----------------------------------------------
__ASTTranslator__enterScope$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp4032 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [tmp4032 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ ast ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4032 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4032 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4032 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore ast
  restore tmp4032

; -----------------------------------------------
; function __ASTTranslator__leaveScope$0
; -----------------------------------------------
__ASTTranslator__leaveScope$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 9 )
  childTable EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  symbolsCurrent EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 7 )
  symbolsChild EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp4033 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4040 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4041 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4044 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4062 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4063 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4064 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4065 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4066 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4067 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4068 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  item EQU rbp - 264 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 8 )
  id EQU rbp - 280 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 5 )
  typeName1 EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  typeName2 EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4036 EQU rbp - 316 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4039 EQU rbp - 320 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4045 EQU rbp - 324 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 8 , readHits= 8 )
  tmp4050 EQU rbp - 328 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4052 EQU rbp - 332 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4054 EQU rbp - 336 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp4059 EQU rbp - 340 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  astType1 EQU rbp - 344 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 5 )
  astType2 EQU rbp - 348 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 5 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 384

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [childTable + Variant_t.type], eax
  mov [symbolsCurrent + Variant_t.type], eax
  mov [symbolsChild + Variant_t.type], eax
  mov [tmp4033 + Variant_t.type], eax
  mov [tmp4040 + Variant_t.type], eax
  mov [tmp4041 + Variant_t.type], eax
  mov [tmp4044 + Variant_t.type], eax
  mov [tmp4062 + Variant_t.type], eax
  mov [tmp4063 + Variant_t.type], eax
  mov [tmp4064 + Variant_t.type], eax
  mov [tmp4065 + Variant_t.type], eax
  mov [tmp4066 + Variant_t.type], eax
  mov [tmp4067 + Variant_t.type], eax
  mov [tmp4068 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [id + Variant_t.type], eax
  mov [typeName1 + Variant_t.type], eax
  mov [typeName2 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ childTable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ childTable ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp4033 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4033 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4033 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4033 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ symbolsCurrent ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ childTable ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ symbolsChild ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l4035

l4034:

  lea  rcx , [ item ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp4033 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4033 + Variant_t.type ], 0
  jnz l4037

  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtKey

  jmp l4038

l4037:

  mov dword [ astType1 ], -1

  mov dword [ astType2 ], -1

  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp4041 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4041 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp4040 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4040  + Variant_t.type], 0
  jz l4042

  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp4044 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4044 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp4041 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4041 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4041 + Variant_t.value]
  mov dword [ astType1 ], eax

l4042:

l4043:

  lea  rcx , [ item ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp4041 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4041  + Variant_t.type], 0
  jz l4046

  lea  rcx , [ item ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp4044 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4044 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4044 + Variant_t.value]
  mov dword [ astType2 ], eax

l4046:

l4047:

  mov eax, dword [ astType1 ]
  cmp eax, dword [ astType2 ]
  jz l4048

  mov dword [ tmp4050 ], 1

  mov dword [ tmp4045 ], -1

  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp4045 ]
  jnz l4051

  mov dword [ tmp4052 ], 0

  mov dword [ tmp4045 ], 4

  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp4045 ]
  jz l4053

  mov dword [ tmp4045 ], 6

  mov dword [ tmp4052 ], 0
  mov ecx, dword [ astType2 ]
  cmp ecx, dword [ tmp4045 ]
  setl byte [ tmp4052 ]

l4053:

  mov eax, dword [ tmp4052 ]
  mov dword [ tmp4050 ], eax

l4051:

  cmp dword [ tmp4050 ], 0
  jz l4055

  mov dword [ tmp4052 ], 1

  mov dword [ tmp4045 ], -1

  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp4045 ]
  jnz l4057

  mov dword [ tmp4054 ], 0

  mov dword [ tmp4045 ], 4

  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp4045 ]
  jz l4058

  mov dword [ tmp4045 ], 6

  mov dword [ tmp4054 ], 0
  mov ecx, dword [ astType1 ]
  cmp ecx, dword [ tmp4045 ]
  setl byte [ tmp4054 ]

l4058:

  mov eax, dword [ tmp4054 ]
  mov dword [ tmp4052 ], eax

l4057:

  cmp dword [ tmp4052 ], 0
  jz l4060

  mov [ tmp4044 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType1 ]
  mov [ tmp4044 + Variant_t.value], rax

  lea rcx , [ tmp4044 ]
  lea  rax , [ typeName1 ]
  call  AST_ConvertDataTypeToText

  mov [ tmp4044 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType2 ]
  mov [ tmp4044 + Variant_t.value], rax

  lea rcx , [ tmp4044 ]
  lea  rax , [ typeName2 ]
  call  AST_ConvertDataTypeToText

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4062 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp4068 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal242 ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp4068 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4068 ]
  lea  rdx , [ __literal243 ]
  lea  r8 , [ tmp4067 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4066 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4067 ]
  lea  rdx , [ typeName2 ]
  lea  r8 , [ tmp4066 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4065 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4066 ]
  lea  rdx , [ __literal244 ]
  lea  r8 , [ tmp4065 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4064 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4065 ]
  lea  rdx , [ typeName1 ]
  lea  r8 , [ tmp4064 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4063 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4064 ]
  lea  rdx , [ __literal245 ]
  lea  r8 , [ tmp4063 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4062 ]
  lea rdx , [ tmp4063 ]
  lea  rax , [ tmp4044 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6578
  movsxd rax, dword [ tmp4044 + Variant_t.value ]
  mov    qword [ tmp4044 + Variant_t.value ], rax
l6578:


l4060:

l4061:

l4055:

l4056:

l4048:

l4049:

l4038:

  ret

l4035:

  lea  rcx , [ symbolsChild ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4034 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ childTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsCurrent ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsChild ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4033 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4040 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4041 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4044 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4062 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4063 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4064 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4065 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4066 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4067 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4068 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeName1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeName2 ]
  call __MOLD_VariantDestroy

  add  rsp, 384
  pop  rbp
  ret


  restore this
  restore childTable
  restore symbolsCurrent
  restore symbolsChild
  restore tmp4033
  restore tmp4036
  restore tmp4039
  restore tmp4040
  restore tmp4041
  restore tmp4044
  restore tmp4045
  restore tmp4050
  restore tmp4052
  restore tmp4054
  restore tmp4059
  restore tmp4062
  restore tmp4063
  restore tmp4064
  restore tmp4065
  restore tmp4066
  restore tmp4067
  restore tmp4068
  restore item
  restore id
  restore astType1
  restore astType2
  restore typeName1
  restore typeName2

; -----------------------------------------------
; function __ASTTranslator__verifyNumberOfParameters$3
; -----------------------------------------------
__ASTTranslator__verifyNumberOfParameters$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsExpectedCnt EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  paramsPassedCnt EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp4072 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4073 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4074 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4075 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4076 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4077 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4078 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4079 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4080 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4069 EQU rbp - 220 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsExpectedCnt ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramsPassedCnt ], xmm0
  xor eax, eax
  mov [tmp4072 + Variant_t.type], eax
  mov [tmp4073 + Variant_t.type], eax
  mov [tmp4074 + Variant_t.type], eax
  mov [tmp4075 + Variant_t.type], eax
  mov [tmp4076 + Variant_t.type], eax
  mov [tmp4077 + Variant_t.type], eax
  mov [tmp4078 + Variant_t.type], eax
  mov [tmp4079 + Variant_t.type], eax
  mov [tmp4080 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx, [ paramsPassedCnt ]
  lea rdx, [ paramsExpectedCnt ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4070

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp4079 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal183 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4079 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4078 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4079 ]
  lea  rdx , [ __literal184 ]
  lea  r8 , [ tmp4078 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ paramsExpectedCnt ]
  push rdi
  lea  rdi , [ tmp4080 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4078 ]
  lea  rdx , [ tmp4080 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4077 ]
  lea  rdx , [ __literal313 ]
  lea  r8 , [ tmp4076 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ paramsPassedCnt ]
  push rdi
  lea  rdi , [ tmp4080 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4076 ]
  lea  rdx , [ tmp4080 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4074 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4074 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4073 ]
  lea rdx , [ tmp4074 ]
  lea  rax , [ tmp4072 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6579
  movsxd rax, dword [ tmp4072 + Variant_t.value ]
  mov    qword [ tmp4072 + Variant_t.value ], rax
l6579:


l4070:

l4071:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4074 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4076 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4078 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4079 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4080 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret


  restore this
  restore name
  restore paramsExpectedCnt
  restore paramsPassedCnt
  restore tmp4069
  restore tmp4072
  restore tmp4073
  restore tmp4074
  restore tmp4075
  restore tmp4076
  restore tmp4077
  restore tmp4078
  restore tmp4079
  restore tmp4080

; -----------------------------------------------
; function __ASTTranslator__emitFunction$1
; -----------------------------------------------
__ASTTranslator__emitFunction$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 8 , readHits= 18 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 7 )
  funcProto EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  funcName EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4084 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4085 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  tmp4086 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4087 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4088 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4093 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oldSymbolTable EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp4081 EQU rbp - 204 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4089 EQU rbp - 208 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4090 EQU rbp - 212 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [funcProto + Variant_t.type], eax
  mov [funcName + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [tmp4084 + Variant_t.type], eax
  mov [tmp4085 + Variant_t.type], eax
  mov [tmp4086 + Variant_t.type], eax
  mov [tmp4087 + Variant_t.type], eax
  mov [tmp4088 + Variant_t.type], eax
  mov [tmp4093 + Variant_t.type], eax
  mov [oldSymbolTable + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ ast ]
  call __MOLD_VariantMove

  lea  rcx , [ ast ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  cmp [ children  + Variant_t.type], 0
  jz l4082

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4085 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp4087 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal544 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4087 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4086 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4087 ]
  lea  rdx , [ __literal545 ]
  lea  r8 , [ tmp4086 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4085 ]
  lea rdx , [ tmp4086 ]
  lea  rax , [ tmp4084 ]
  mov  r10d, 5
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6580
  movsxd rax, dword [ tmp4084 + Variant_t.value ]
  mov    qword [ tmp4084 + Variant_t.value ], rax
l6580:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4088 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4089 ], 0

  lea  rcx , [ tmp4088 ]
  lea  rdx , [ tmp4089 ]
  lea  r8 , [ tmp4085 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4085 ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4084 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4084 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4084 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal492 ]
  lea  r8 , [ tmp4084 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp4084 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4084  + Variant_t.type], 0
  jz l4091

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp4093 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ oldSymbolTable ]
  lea rdx , [ tmp4093 ]
  lea  rax , [ tmp4088 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6581
  movsxd rax, dword [ tmp4088 + Variant_t.value ]
  mov    qword [ tmp4088 + Variant_t.value ], rax
l6581:


  lea  rcx , [ tmp4088 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp4085 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ tmp4085 ]
  call  __MOLD_VariantStoreAtKey

l4091:

l4092:

  lea  rcx , [ this ]
  lea  rdx , [ __literal491 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ funcName ]
  lea r8 , [ funcProto ]
  lea  rax , [ tmp4085 ]
  mov  r10d, 48
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6582
  movsxd rax, dword [ tmp4085 + Variant_t.value ]
  mov    qword [ tmp4085 + Variant_t.value ], rax
l6582:


  lea rcx , [ this ]
  lea rdx , [ funcName ]
  lea r8 , [ funcProto ]
  lea  rax , [ tmp4085 ]
  mov  r10d, 49
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6583
  movsxd rax, dword [ tmp4085 + Variant_t.value ]
  mov    qword [ tmp4085 + Variant_t.value ], rax
l6583:


  lea  rcx, [ tmp4085 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal491 ]
  lea  r8 , [ tmp4085 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4085 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ tmp4085 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4085 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal492 ]
  lea  r8 , [ tmp4085 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4088 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp4086 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal546 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4086 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4088 ]
  lea rdx , [ tmp4086 ]
  lea  rax , [ tmp4085 ]
  mov  r10d, 5
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6584
  movsxd rax, dword [ tmp4085 + Variant_t.value ]
  mov    qword [ tmp4085 + Variant_t.value ], rax
l6584:


l4082:

l4083:


  ; clean frame
  ; -----------
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4084 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4085 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4086 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4087 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4088 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4093 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret


  restore this
  restore ast
  restore funcProto
  restore funcName
  restore children
  restore tmp4081
  restore tmp4084
  restore tmp4085
  restore tmp4086
  restore tmp4087
  restore tmp4088
  restore tmp4089
  restore tmp4090
  restore tmp4093
  restore oldSymbolTable

; -----------------------------------------------
; function __ASTTranslator__emitGlobals$0
; -----------------------------------------------
__ASTTranslator__emitGlobals$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  symbols EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  arrayOfSymbols EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp4094 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  oneSymbol EQU rbp - 88 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4106 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4107 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 136 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 9 )
  tmp4099 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp4100 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4103 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  symbolKind EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [symbols + Variant_t.type], eax
  mov [arrayOfSymbols + Variant_t.type], eax
  mov [tmp4094 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp4106 + Variant_t.type], eax
  mov [tmp4107 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4094 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4094 ]
  lea  rax , [ symbols ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6585
  movsxd rax, dword [ symbols + Variant_t.value ]
  mov    qword [ symbols + Variant_t.value ], rax
l6585:


  lea  rcx, [ arrayOfSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfSymbols ]
  call  __MOLD_VariantArrayCreate

; 
; -----------------------------
; BEGIN: for keys undefined values oneSymbol
; 
  jmp l4096

l4095:

  ; __mold_syscall( 50 )
  lea rcx , [ arrayOfSymbols ]
  lea rdx , [ oneSymbol ]
  call qword [rbx + 8 * 50 ]

  ret

l4096:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneSymbol ]
  lea  r9 , [ l4095 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneSymbol
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys undefined values symbolInfo
; 
  jmp l4098

l4097:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4094 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4094 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4094 + Variant_t.value]
  mov dword [ symbolKind ], eax

  mov dword [ tmp4099 ], 7

  mov eax, dword [ symbolKind ]
  cmp eax, dword [ tmp4099 ]
  jnz l4101

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp4094 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp4094 ]
  call  __ASTTranslator__emitFunction$1

  jmp l4102

l4101:

  mov dword [ tmp4099 ], 8

  mov eax, dword [ symbolKind ]
  cmp eax, dword [ tmp4099 ]
  jnz l4104

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4106 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp4107 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp4106 ]
  lea r8 , [ tmp4107 ]
  lea  rax , [ tmp4094 ]
  mov  r10d, 50
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6586
  movsxd rax, dword [ tmp4094 + Variant_t.value ]
  mov    qword [ tmp4094 + Variant_t.value ], rax
l6586:


l4104:

l4105:

l4102:

  ret

l4098:

  lea  rcx , [ arrayOfSymbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l4097 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4094 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneSymbol
  lea  rcx, [ tmp4106 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4107 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore symbols
  restore arrayOfSymbols
  restore tmp4094
  restore oneSymbol
  restore tmp4099
  restore tmp4100
  restore tmp4103
  restore tmp4106
  restore tmp4107
  restore symbolInfo
  restore symbolKind

; -----------------------------------------------
; function __ASTTranslator__callSuper$3
; -----------------------------------------------
__ASTTranslator__callSuper$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 11 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  params EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  methodProto EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 16 )
  classProto EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  tmp4111 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4114 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4123 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp4124 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp4125 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4129 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp4131 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp4134 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4135 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4136 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  newParams EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  oneParam EQU rbp - 280 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4108 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4110 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4117 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4120 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4126 EQU rbp - 300 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4130 EQU rbp - 304 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4140 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4141 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4142 EQU rbp - 316 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  paramIdx EQU rbp - 320 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 352

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ params ], xmm0
  ; skipped unused param [ unusedParamsCnt ]
  xor eax, eax
  mov [methodProto + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [tmp4111 + Variant_t.type], eax
  mov [tmp4114 + Variant_t.type], eax
  mov [tmp4123 + Variant_t.type], eax
  mov [tmp4124 + Variant_t.type], eax
  mov [tmp4125 + Variant_t.type], eax
  mov [tmp4129 + Variant_t.type], eax
  mov [tmp4131 + Variant_t.type], eax
  mov [tmp4134 + Variant_t.type], eax
  mov [tmp4135 + Variant_t.type], eax
  mov [tmp4136 + Variant_t.type], eax
  mov [newParams + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal491 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4108 ], 1

  cmp [ methodProto  + Variant_t.type], 0
  jz l4109

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp4111 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp4111  + Variant_t.type], 0
  setz al
  mov dword [ tmp4108 ], eax

l4109:

  cmp dword [ tmp4108 ], 0
  jz l4112

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal549
  lea rdx , [ __literal549 ]
  call  __ASTTranslator__error$1

  jmp l4113

l4112:

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4114 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp4114 ]
  lea rdx, [ __literal234 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4115

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal550
  lea rdx , [ __literal550 ]
  call  __ASTTranslator__error$1

  jmp l4116

l4115:

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4114 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp4114 ]
  lea rdx, [ __literal234 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4118

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal550
  lea rdx , [ __literal550 ]
  call  __ASTTranslator__error$1

  jmp l4119

l4118:

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp4114 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4114 + Variant_t.type ], 0
  jnz l4121

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4125 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp4124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal428 ]
  lea  rdx , [ tmp4125 ]
  lea  r8 , [ tmp4124 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4124 ]
  lea  rdx , [ __literal551 ]
  lea  r8 , [ tmp4123 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4123 ]
  call  __ASTTranslator__error$1

  jmp l4122

l4121:

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal231 ]
  lea  r8 , [ tmp4125 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4125 + Variant_t.type ], 0
  jnz l4127

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp4129 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp4124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal428 ]
  lea  rdx , [ tmp4129 ]
  lea  r8 , [ tmp4124 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4124 ]
  lea  rdx , [ __literal552 ]
  lea  r8 , [ tmp4123 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4123 ]
  call  __ASTTranslator__error$1

  jmp l4128

l4127:

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4131 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp4131 ]
  push rdi
  lea  rdi , [ tmp4129 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp4131 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx, [ tmp4129 ]
  lea rdx, [ tmp4131 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4132

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4136 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp4136 ]
  push rdi
  lea  rdi , [ tmp4129 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4129 ]
  push rdi
  lea  rdi , [ tmp4131 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4135 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal553 ]
  lea  rdx , [ tmp4131 ]
  lea  r8 , [ tmp4135 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4134 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4135 ]
  lea  rdx , [ __literal185 ]
  lea  r8 , [ tmp4134 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp4129 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4129 ]
  push rdi
  lea  rdi , [ tmp4131 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4134 ]
  lea  rdx , [ tmp4131 ]
  lea  r8 , [ tmp4124 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4124 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4123 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4123 ]
  call  __ASTTranslator__error$1

  jmp l4133

l4132:

  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  lea  rdx , [ __const4137 ]
  call  __MOLD_VariantArrayCreateFromInitList

; 
; -----------------------------
; BEGIN: for keys paramIdx values oneParam
; 
  jmp l4139

l4138:

  mov dword [ tmp4141 ], 1

  mov eax, dword [ paramIdx ]
  add eax, dword [ tmp4141 ]
  mov dword [ tmp4140 ], eax

  lea  rcx , [ newParams ]
  lea  rdx , [ tmp4140 ]
  lea  r8 , [ oneParam ]
  call  __MOLD_VariantStoreAtIndex_int32

  ret

l4139:

  lea  rcx , [ params ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4138 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys paramIdx values oneParam
; -----------------------------
; 
  mov dword [ tmp4142 ], 1

  mov eax, dword [ tmp4142 ]
  mov [ tmp4129 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4129 + Variant_t.value], rax

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal555 ]
  lea  r8 , [ tmp4129 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal231 ]
  lea  r8 , [ tmp4131 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ newParams ]
  push rdi
  lea  rdi , [ tmp4136 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4131 ]
  lea r9 , [ newParams ]
  lea rax, [ tmp4136 ]
  push rax
  lea  rax , [ tmp4129 ]
  mov  r10d, 51
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6587
  movsxd rax, dword [ tmp4129 + Variant_t.value ]
  mov    qword [ tmp4129 + Variant_t.value ], rax
l6587:

  add rsp, 8

l4133:

l4128:

l4122:

l4119:

l4116:

l4113:


  ; clean frame
  ; -----------
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4111 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4114 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4123 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4124 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4125 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4129 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4131 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4134 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4135 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4136 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam

  add  rsp, 352
  pop  rbp
  ret


  restore this
  restore rv
  restore params
  restore methodProto
  restore classProto
  restore tmp4108
  restore tmp4110
  restore tmp4111
  restore tmp4114
  restore tmp4117
  restore tmp4120
  restore tmp4123
  restore tmp4124
  restore tmp4125
  restore tmp4126
  restore tmp4129
  restore tmp4130
  restore tmp4131
  restore tmp4134
  restore tmp4135
  restore tmp4136
  restore tmp4140
  restore tmp4141
  restore tmp4142
  restore newParams
  restore paramIdx
  restore oneParam

; -----------------------------------------------
; function __ASTTranslator__getClassProto$1
; -----------------------------------------------
__ASTTranslator__getClassProto$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  className EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4143 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4144 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ className ], xmm0
  xor eax, eax
  mov [tmp4143 + Variant_t.type], eax
  mov [tmp4144 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4144 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4144 ]
  lea rdx , [ className ]
  lea  rax , [ tmp4143 ]
  mov  r10d, 9
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6588
  movsxd rax, dword [ tmp4143 + Variant_t.value ]
  mov    qword [ tmp4143 + Variant_t.value ], rax
l6588:


  lea  rcx , [ tmp4143 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4143 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4144 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore className
  restore rv
  restore tmp4143
  restore tmp4144

; -----------------------------------------------
; function __ASTTranslator__isset$1
; -----------------------------------------------
__ASTTranslator__isset$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4145 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp4145 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4145 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4145 ]
  lea rdx , [ name ]
  lea  rax , [ rv ]
  mov  r10d, 16
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6589
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l6589:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4145 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rdi
  pop  rbp
  ret


  restore this
  restore name
  restore rv
  restore tmp4145

; -----------------------------------------------
; function __ASTTranslator__importGlobal$1
; -----------------------------------------------
__ASTTranslator__importGlobal$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4146 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4147 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp4146 + Variant_t.type], eax
  mov [tmp4147 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4147 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4147 ]
  lea rdx , [ name ]
  lea  rax , [ tmp4146 ]
  mov  r10d, 39
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6590
  movsxd rax, dword [ tmp4146 + Variant_t.value ]
  mov    qword [ tmp4146 + Variant_t.value ], rax
l6590:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4146 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4147 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore tmp4146
  restore tmp4147

; -----------------------------------------------
; function __ASTTranslator__declareVariableIfNotSet$1
; -----------------------------------------------
__ASTTranslator__declareVariableIfNotSet$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp4149 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4151 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4148 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4150 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [tmp4149 + Variant_t.type], eax
  mov [tmp4151 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea  rax , [ tmp4149 ]
  call  __ASTTranslator__isset$1

  mov dword [ tmp4150 ], 0

  mov eax, dword [ tmp4150 ]
  mov [ tmp4151 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4151 + Variant_t.value], rax

  lea rcx, [ tmp4149 ]
  lea rdx, [ tmp4151 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4152

  lea rcx , [ this ]
  ; skipped unused call param
  call  __ASTTranslator__declareVariable$1

l4152:

l4153:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4149 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4151 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore tmp4148
  restore tmp4149
  restore tmp4150
  restore tmp4151

; -----------------------------------------------
; function __ASTTranslator__declareAndAssign$2
; -----------------------------------------------
__ASTTranslator__declareAndAssign$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4154 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp4154 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ value ]
  lea  rax , [ tmp4154 ]
  mov  r10d, 52
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6591
  movsxd rax, dword [ tmp4154 + Variant_t.value ]
  mov    qword [ tmp4154 + Variant_t.value ], rax
l6591:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4154 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore value
  restore tmp4154

; -----------------------------------------------
; function __ASTTranslator__evaluateNode$1
; -----------------------------------------------
__ASTTranslator__evaluateNode$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 86 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 37 )
  value EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 14 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 31 )
  tmp4155 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4157 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp4163 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 23 , readHits= 23 )
  tmp4164 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 17 , readHits= 17 )
  tmp4165 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp4172 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4173 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4174 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 42 , readHits= 42 )
  __cse27 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  srcNode EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  src EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  dstTypeMir EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  srcTypeMir EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4211 EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4226 EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp4228 EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp4303 EQU rbp - 344 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4304 EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  mirDataType EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  key EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  valueAsVariant EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  childNode EQU rbp - 424 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 5 )
  keyNode EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  valueNode EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  x EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  classProto EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  methodProto EQU rbp - 504 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 5 )
  params EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  paramsCnt EQU rbp - 536 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  unusedRv EQU rbp - 552 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  left EQU rbp - 568 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 15 )
  right EQU rbp - 584 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 15 )
  opcode EQU rbp - 588 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 32 )
  childrenCnt EQU rbp - 592 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 6 )
  tmp4156 EQU rbp - 596 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 39 , readHits= 39 )
  tmp4158 EQU rbp - 600 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp4160 EQU rbp - 604 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp4162 EQU rbp - 608 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp4169 EQU rbp - 612 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4183 EQU rbp - 616 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp4188 EQU rbp - 620 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  srcType EQU rbp - 624 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  dstType EQU rbp - 628 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp4201 EQU rbp - 632 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4208 EQU rbp - 636 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp4218 EQU rbp - 640 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 19 , readHits= 19 )
  tmp4221 EQU rbp - 644 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp4222 EQU rbp - 648 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4223 EQU rbp - 652 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4227 EQU rbp - 656 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4233 EQU rbp - 660 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4236 EQU rbp - 664 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4239 EQU rbp - 668 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4242 EQU rbp - 672 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4245 EQU rbp - 676 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4248 EQU rbp - 680 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4251 EQU rbp - 684 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4254 EQU rbp - 688 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4259 EQU rbp - 692 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4264 EQU rbp - 696 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4267 EQU rbp - 700 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4270 EQU rbp - 704 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4273 EQU rbp - 708 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4276 EQU rbp - 712 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4279 EQU rbp - 716 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4282 EQU rbp - 720 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4285 EQU rbp - 724 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4288 EQU rbp - 728 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4291 EQU rbp - 732 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4294 EQU rbp - 736 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4297 EQU rbp - 740 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4300 EQU rbp - 744 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  astDataType EQU rbp - 748 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  childIdx EQU rbp - 752 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  idx EQU rbp - 756 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 784

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [value + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [tmp4155 + Variant_t.type], eax
  mov [tmp4157 + Variant_t.type], eax
  mov [tmp4163 + Variant_t.type], eax
  mov [tmp4164 + Variant_t.type], eax
  mov [tmp4165 + Variant_t.type], eax
  mov [tmp4172 + Variant_t.type], eax
  mov [tmp4173 + Variant_t.type], eax
  mov [tmp4174 + Variant_t.type], eax
  mov [__cse27 + Variant_t.type], eax
  mov [srcNode + Variant_t.type], eax
  mov [src + Variant_t.type], eax
  mov [dstTypeMir + Variant_t.type], eax
  mov [srcTypeMir + Variant_t.type], eax
  mov [tmp4211 + Variant_t.type], eax
  mov [tmp4226 + Variant_t.type], eax
  mov [tmp4228 + Variant_t.type], eax
  mov [tmp4303 + Variant_t.type], eax
  mov [tmp4304 + Variant_t.type], eax
  mov [mirDataType + Variant_t.type], eax
  mov [key + Variant_t.type], eax
  mov [valueAsVariant + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [keyNode + Variant_t.type], eax
  mov [valueNode + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [methodProto + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  mov [paramsCnt + Variant_t.type], eax
  mov [unusedRv + Variant_t.type], eax
  mov [left + Variant_t.type], eax
  mov [right + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ ast ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4155 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4155 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4155 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp4155 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp4155 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4155 + Variant_t.value]
  mov dword [ childrenCnt ], eax

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4157 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4157 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp4155 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6592
  movsxd rax, dword [ tmp4155 + Variant_t.value ]
  mov    qword [ tmp4155 + Variant_t.value ], rax
l6592:


  mov dword [ tmp4158 ], 0

  lea  rcx , [ ast ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp4155 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4155  + Variant_t.type], 0
  jz l4159

  mov dword [ tmp4160 ], 0

  lea  rcx , [ ast ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4163 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4157 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4156 ], 56

  mov [ tmp4163 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4156 ]
  mov [ tmp4163 + Variant_t.value], rax

  lea rcx, [ tmp4157 ]
  lea rdx, [ tmp4163 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4161

  lea  rcx , [ ast ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp4165 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4165 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4156 ], 0

  lea  rcx , [ tmp4164 ]
  lea  rdx , [ tmp4156 ]
  lea  r8 , [ tmp4157 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4157 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4156 ], 52

  mov [ tmp4157 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4156 ]
  mov [ tmp4157 + Variant_t.value], rax

  lea  rcx , [ tmp4163 ]
  lea  rdx , [ tmp4157 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4160 ], eax

l4161:

  mov eax, dword [ tmp4160 ]
  mov dword [ tmp4158 ], eax

l4159:

  cmp dword [ tmp4158 ], 0
  jz l4166

  lea  rcx , [ ast ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4164 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4156 ], 0

  lea  rcx , [ tmp4163 ]
  lea  rdx , [ tmp4156 ]
  lea  r8 , [ tmp4157 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4157 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

l4166:

l4167:

  mov dword [ tmp4158 ], 0

  lea  rcx , [ ast ]
  lea  rdx , [ __literal557 ]
  lea  r8 , [ tmp4157 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4157  + Variant_t.type], 0
  jz l4168

  lea rcx , [ ast ]
  lea  rax , [ tmp4162 ]
  call  AST_IsImmOrVar

  mov dword [ tmp4169 ], 0

  mov dword [ tmp4158 ], 0
  mov ecx, dword [ tmp4162 ]
  cmp ecx, dword [ tmp4169 ]
  setz byte [ tmp4158 ]

l4168:

  cmp dword [ tmp4158 ], 0
  jz l4170

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4174 ]
  push rdi
  lea  rdi , [ tmp4165 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4173 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal558 ]
  lea  rdx , [ tmp4165 ]
  lea  r8 , [ tmp4173 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4173 ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp4172 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4164 ]
  lea rdx , [ tmp4172 ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6593
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6593:


l4170:

l4171:

  mov dword [ tmp4158 ], 1

  mov eax, dword [ tmp4158 ]
  mov [ tmp4163 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4163 + Variant_t.value], rax

  lea  rcx , [ ast ]
  lea  rdx , [ __literal557 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp4156 ], 4

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4175

  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse27 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4164 ]
  lea rdx , [ __cse27 ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 53
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6594
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6594:


  lea  rcx , [ tmp4163 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ __cse27 ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 54
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6595
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6595:


  jmp l4176

l4175:

  mov dword [ tmp4156 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4177

  lea rcx , [ this ]
  lea rdx , [ rv ]
; WARNING: Failed to get variable size: __literal118
  lea r8 , [ __literal118 ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 54
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6596
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6596:


  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal118 ]
  call __MOLD_VariantMove

  jmp l4178

l4177:

  mov dword [ tmp4156 ], 52

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4179

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ value ]
  call __MOLD_VariantMove

  lea rcx, [ value ]
  lea rdx, [ __literal238 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4181

  lea rcx , [ this ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 55
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6597
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6597:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4164 ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4156 ], 0

  mov [ tmp4164 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4156 ]
  mov [ tmp4164 + Variant_t.value], rax

  lea rcx, [ tmp4163 ]
  lea rdx, [ tmp4164 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l4184

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4163 ]
; WARNING: Failed to get variable size: __literal238
  lea rdx , [ __literal238 ]
  lea  rax , [ tmp4164 ]
  mov  r10d, 39
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6598
  movsxd rax, dword [ tmp4164 + Variant_t.value ]
  mov    qword [ tmp4164 + Variant_t.value ], rax
l6598:


l4184:

l4185:

  jmp l4182

l4181:

  lea rcx, [ value ]
  lea rdx, [ __literal239 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4186

  lea rcx , [ this ]
  lea  rax , [ tmp4164 ]
  mov  r10d, 56
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6599
  movsxd rax, dword [ tmp4164 + Variant_t.value ]
  mov    qword [ tmp4164 + Variant_t.value ], rax
l6599:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4163 ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4156 ], 0

  mov [ tmp4163 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4156 ]
  mov [ tmp4163 + Variant_t.value], rax

  lea rcx, [ tmp4164 ]
  lea rdx, [ tmp4163 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l4189

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4164 ]
; WARNING: Failed to get variable size: __literal239
  lea rdx , [ __literal239 ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 39
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6600
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6600:


l4189:

l4190:

  jmp l4187

l4186:

  lea rcx , [ this ]
  lea rdx , [ value ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 57
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6601
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6601:


l4187:

l4182:

  jmp l4180

l4179:

  mov dword [ tmp4156 ], 77

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4191

  mov dword [ tmp4156 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4156 ]
  lea  r8 , [ srcNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ srcNode ]
  lea  rax , [ srcType ]
  call  AST_GetDataType

  lea rcx , [ ast ]
  lea  rax , [ dstType ]
  call  AST_GetDataType

  lea rcx , [ this ]
  lea rdx , [ srcNode ]
  lea  rax , [ src ]
  call  __ASTTranslator__evaluateNode$1

  mov eax, dword [ srcType ]
  cmp eax, dword [ dstType ]
  jnz l4193

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ src ]
  call __MOLD_VariantMove

  jmp l4194

l4193:

  mov [ tmp4163 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstType ]
  mov [ tmp4163 + Variant_t.value], rax

  lea rcx , [ tmp4163 ]
  lea  rax , [ dstTypeMir ]
  call  AST_ConvertDataTypeToMIR

  mov [ tmp4163 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ srcType ]
  mov [ tmp4163 + Variant_t.value], rax

  lea rcx , [ tmp4163 ]
  lea  rax , [ srcTypeMir ]
  call  AST_ConvertDataTypeToMIR

  lea rcx, [ dstTypeMir ]
  lea rdx, [ srcTypeMir ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4195

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ src ]
  call __MOLD_VariantMove

  jmp l4196

l4195:

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ dstTypeMir ]
  lea  rax , [ rv ]
  call  __ASTTranslator__getTempVarOrReuse$2

  lea rcx , [ this ]
  lea rdx , [ src ]
  call  __ASTTranslator__releaseTempVar$1

  mov [ tmp4164 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ srcType ]
  mov [ tmp4164 + Variant_t.value], rax

  mov [ tmp4165 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstType ]
  mov [ tmp4165 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ src ]
  lea r9 , [ tmp4164 ]
  lea rax, [ tmp4165 ]
  push rax
  lea  rax , [ tmp4163 ]
  mov  r10d, 58
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6602
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6602:

  add rsp, 8

l4196:

l4194:

  jmp l4192

l4191:

  lea rcx , [ ast ]
  lea  rax , [ astDataType ]
  call  AST_GetDataType

  mov [ tmp4163 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astDataType ]
  mov [ tmp4163 + Variant_t.value], rax

  lea rcx , [ tmp4163 ]
  lea  rax , [ mirDataType ]
  call  AST_ConvertDataTypeToMIR

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ mirDataType ]
  lea  rax , [ rv ]
  call  __ASTTranslator__getTempVarOrReuse$2

  mov dword [ tmp4156 ], 8

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4197

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea  rax , [ tmp4163 ]
  mov  r10d, 59
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6603
  movsxd rax, dword [ tmp4163 + Variant_t.value ]
  mov    qword [ tmp4163 + Variant_t.value ], rax
l6603:


  jmp l4198

l4197:

  mov dword [ tmp4156 ], 9

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4199

  lea  rcx , [ ast ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ tmp4163 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4163  + Variant_t.type], 0
  jz l4202

  lea  rcx , [ ast ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4164 ]
  lea  rax , [ tmp4165 ]
  mov  r10d, 54
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6604
  movsxd rax, dword [ tmp4165 + Variant_t.value ]
  mov    qword [ tmp4165 + Variant_t.value ], rax
l6604:


  jmp l4203

l4202:

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea  rax , [ tmp4165 ]
  mov  r10d, 60
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6605
  movsxd rax, dword [ tmp4165 + Variant_t.value ]
  mov    qword [ tmp4165 + Variant_t.value ], rax
l6605:


l4203:

  mov dword [ tmp4156 ], 0

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp4156 ]
  jle l4204

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal130
  lea rdx , [ __literal130 ]
  lea  rax , [ key ]
  call  __ASTTranslator__getTempVar$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal130
  lea rdx , [ __literal130 ]
  lea  rax , [ valueAsVariant ]
  call  __ASTTranslator__getTempVar$1

; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l4207

l4206:

  lea  rcx , [ childNode ]
  lea  rdx , [ __literal325 ]
  lea  r8 , [ tmp4165 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4165 + Variant_t.type ], 0
  jnz l4209

  mov [ tmp4174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childIdx ]
  mov [ tmp4174 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ key ]
  lea r8 , [ tmp4174 ]
  lea  rax , [ tmp4164 ]
  mov  r10d, 61
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6606
  movsxd rax, dword [ tmp4164 + Variant_t.value ]
  mov    qword [ tmp4164 + Variant_t.value ], rax
l6606:


  lea rcx , [ this ]
  lea rdx , [ childNode ]
  lea  rax , [ tmp4164 ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ tmp4164 ]
  call __MOLD_VariantMove

  lea rcx , [ childNode ]
  lea  rax , [ tmp4156 ]
  call  AST_GetDataType

  mov [ tmp4174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4156 ]
  mov [ tmp4174 + Variant_t.value], rax

  mov dword [ tmp4156 ], -1

  mov [ tmp4211 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4156 ]
  mov [ tmp4211 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ valueAsVariant ]
  lea r8 , [ value ]
  lea r9 , [ tmp4174 ]
  lea rax, [ tmp4211 ]
  push rax
  lea  rax , [ tmp4164 ]
  mov  r10d, 58
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6607
  movsxd rax, dword [ tmp4164 + Variant_t.value ]
  mov    qword [ tmp4164 + Variant_t.value ], rax
l6607:

  add rsp, 8

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ key ]
  lea r9 , [ valueAsVariant ]
  lea  rax , [ tmp4164 ]
  mov  r10d, 62
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6608
  movsxd rax, dword [ tmp4164 + Variant_t.value ]
  mov    qword [ tmp4164 + Variant_t.value ], rax
l6608:


  lea rcx , [ this ]
  lea rdx , [ value ]
  call  __ASTTranslator__releaseTempVar$1

l4209:

l4210:

  ret

l4207:

  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l4206 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys childIdx values childNode
; -----------------------------
; 
  lea rcx , [ this ]
  lea rdx , [ key ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ valueAsVariant ]
  call  __ASTTranslator__releaseTempVar$1

l4204:

l4205:

  jmp l4200

l4199:

  mov dword [ tmp4156 ], 10

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4212

  lea  rcx , [ ast ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ tmp4164 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4164  + Variant_t.type], 0
  jz l4214

  lea  rcx , [ ast ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4174 ]
  lea  rax , [ tmp4211 ]
  mov  r10d, 54
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6609
  movsxd rax, dword [ tmp4211 + Variant_t.value ]
  mov    qword [ tmp4211 + Variant_t.value ], rax
l6609:


  jmp l4215

l4214:

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea  rax , [ tmp4211 ]
  mov  r10d, 63
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6610
  movsxd rax, dword [ tmp4211 + Variant_t.value ]
  mov    qword [ tmp4211 + Variant_t.value ], rax
l6610:


l4215:

  mov dword [ tmp4156 ], 0

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp4156 ]
  jle l4216

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal130
  lea rdx , [ __literal130 ]
  lea  rax , [ valueAsVariant ]
  call  __ASTTranslator__getTempVar$1

  mov dword [ tmp4156 ], 2

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp4218 .. childrenCnt
; 
l4219:

  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l4220

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ keyNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4222 ], 1

  mov eax, dword [ idx ]
  add eax, dword [ tmp4222 ]
  mov dword [ tmp4221 ], eax

  lea  rcx , [ children ]
  lea  rdx , [ tmp4221 ]
  lea  r8 , [ valueNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ valueNode ]
  lea  rdx , [ __literal325 ]
  lea  r8 , [ tmp4211 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4211 + Variant_t.type ], 0
  jnz l4224

  lea rcx , [ this ]
  lea rdx , [ keyNode ]
  lea  rax , [ key ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ valueNode ]
  lea  rax , [ tmp4174 ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ tmp4174 ]
  call __MOLD_VariantMove

  mov dword [ tmp4227 ], 1

  mov eax, dword [ idx ]
  add eax, dword [ tmp4227 ]
  mov dword [ tmp4222 ], eax

  lea  rcx , [ children ]
  lea  rdx , [ tmp4222 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp4226 ]
  lea  rax , [ tmp4221 ]
  call  AST_GetDataType

  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4221 ]
  mov [ tmp4226 + Variant_t.value], rax

  mov dword [ tmp4221 ], -1

  mov [ tmp4228 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4221 ]
  mov [ tmp4228 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ valueAsVariant ]
  lea r8 , [ value ]
  lea r9 , [ tmp4226 ]
  lea rax, [ tmp4228 ]
  push rax
  lea  rax , [ tmp4174 ]
  mov  r10d, 58
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6611
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6611:

  add rsp, 8

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ key ]
  lea r9 , [ valueAsVariant ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 64
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6612
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6612:


  lea rcx , [ this ]
  lea rdx , [ key ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ value ]
  call  __ASTTranslator__releaseTempVar$1

l4224:

l4225:

  mov eax, dword [ idx ]
  add eax, dword [ tmp4156 ]
  mov dword [ idx ], eax

  jmp l4219

l4220:

; 
; END: for idx in tmp4218 .. childrenCnt step tmp4156
; -----------------------------
; 
  lea rcx , [ this ]
  lea rdx , [ valueAsVariant ]
  call  __ASTTranslator__releaseTempVar$1

l4216:

l4217:

  jmp l4213

l4212:

  mov dword [ tmp4218 ], 30

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jge l4229

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ value ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 54
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6613
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6613:


  jmp l4230

l4229:

  mov dword [ tmp4218 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4231

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeCall$2

  jmp l4232

l4231:

  mov dword [ tmp4218 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4234

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeInvokeMethod$2

  jmp l4235

l4234:

  mov dword [ tmp4218 ], 57

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4237

  mov dword [ tmp4218 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4218 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4174 ]
  lea  rax , [ x ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ x ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ x ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 65
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6614
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6614:


  jmp l4238

l4237:

  mov dword [ tmp4218 ], 72

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4240

  mov dword [ tmp4218 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4218 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4218 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4218 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4228 ]
  lea r9 , [ tmp4226 ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 66
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6615
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6615:


  jmp l4241

l4240:

  mov dword [ tmp4218 ], 73

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4243

  mov dword [ tmp4218 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4218 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4218 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4218 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4226 ]
  lea r9 , [ tmp4228 ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 67
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6616
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6616:


  jmp l4244

l4243:

  mov dword [ tmp4218 ], 75

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4246

  mov dword [ tmp4218 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4218 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4174 ]
  lea  rax , [ x ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ x ]
  lea r9 , [ value ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 68
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6617
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6617:


  jmp l4247

l4246:

  mov dword [ tmp4218 ], 76

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4249

  mov dword [ tmp4218 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4218 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4174 ]
  lea  rax , [ x ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ x ]
  lea r9 , [ value ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 69
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6618
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6618:


  jmp l4250

l4249:

  mov dword [ tmp4218 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4218 ]
  jnz l4252

  lea rcx , [ this ]
  lea rdx , [ value ]
  lea  rax , [ classProto ]
  call  __ASTTranslator__getClassProto$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ classProto ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 70
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6619
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6619:


  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4174 ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ methodProto  + Variant_t.type], 0
  jz l4255

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp4174 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4174 + Variant_t.value], 0

  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4228 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ params ]
  lea  rdx , [ tmp4174 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp4174 ]
  push rdi
  lea  rdi , [ tmp4228 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp4218 ], 1

  mov [ tmp4174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4218 ]
  mov [ tmp4174 + Variant_t.value], rax

  lea  rcx , [ tmp4228 ]
  lea  rdx , [ tmp4174 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantAdd

  mov [ tmp4174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childrenCnt ]
  mov [ tmp4174 + Variant_t.value], rax

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal234
  lea rdx , [ __literal234 ]
  lea r8 , [ paramsCnt ]
  lea r9 , [ tmp4174 ]
  call  __ASTTranslator__verifyNumberOfParameters$3

  mov dword [ tmp4218 ], 1

  mov dword [ idx ], 1

; 
; -----------------------------
; BEGIN: for idx in tmp4156 .. childrenCnt
; 
l4257:

  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l4258

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4228 ]
  lea  rax , [ tmp4174 ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp4218 ]
  mov dword [ idx ], eax

  jmp l4257

l4258:

; 
; END: for idx in tmp4156 .. childrenCnt step tmp4218
; -----------------------------
; 
  mov dword [ tmp4259 ], 1

  mov eax, dword [ tmp4259 ]
  mov [ tmp4174 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4174 + Variant_t.value], rax

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal555 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal130
  lea rdx , [ __literal130 ]
  lea  rax , [ unusedRv ]
  call  __ASTTranslator__getTempVar$1

  lea rcx , [ this ]
  lea rdx , [ unusedRv ]
  lea r8 , [ methodProto ]
  lea r9 , [ params ]
  lea rax, [ paramsCnt ]
  push rax
  lea  rax , [ tmp4174 ]
  mov  r10d, 51
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6620
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6620:

  add rsp, 8

  lea rcx , [ this ]
  lea rdx , [ unusedRv ]
  call  __ASTTranslator__releaseTempVar$1

l4255:

l4256:

  jmp l4253

l4252:

  mov dword [ tmp4156 ], 2

  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp4156 ]
  jnz l4260

  mov dword [ tmp4156 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4156 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4174 ]
  lea  rax , [ left ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4156 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4156 ]
  lea  r8 , [ tmp4174 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4174 ]
  lea  rax , [ right ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ left ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ right ]
  call  __ASTTranslator__releaseTempVar$1

  mov dword [ tmp4156 ], 54

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4262

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 71
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6621
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6621:


  jmp l4263

l4262:

  mov dword [ tmp4156 ], 55

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4265

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 72
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6622
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6622:


  jmp l4266

l4265:

  mov dword [ tmp4156 ], 66

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4268

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 73
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6623
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6623:


  jmp l4269

l4268:

  mov dword [ tmp4156 ], 67

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4271

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 74
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6624
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6624:


  jmp l4272

l4271:

  mov dword [ tmp4156 ], 68

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4274

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 75
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6625
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6625:


  jmp l4275

l4274:

  mov dword [ tmp4156 ], 69

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4277

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 76
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6626
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6626:


  jmp l4278

l4277:

  mov dword [ tmp4156 ], 70

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4280

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 77
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6627
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6627:


  jmp l4281

l4280:

  mov dword [ tmp4156 ], 71

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4283

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 78
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6628
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6628:


  jmp l4284

l4283:

  mov dword [ tmp4156 ], 58

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4286

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 79
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6629
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6629:


  jmp l4287

l4286:

  mov dword [ tmp4156 ], 59

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4289

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 80
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6630
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6630:


  jmp l4290

l4289:

  mov dword [ tmp4156 ], 60

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4292

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 81
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6631
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6631:


  jmp l4293

l4292:

  mov dword [ tmp4156 ], 61

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4295

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 82
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6632
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6632:


  jmp l4296

l4295:

  mov dword [ tmp4156 ], 64

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4298

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 83
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6633
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6633:


  jmp l4299

l4298:

  mov dword [ tmp4156 ], 65

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4156 ]
  jnz l4301

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ left ]
  lea r9 , [ right ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 84
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6634
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6634:


l4301:

l4302:

l4299:

l4296:

l4293:

l4290:

l4287:

l4284:

l4281:

l4278:

l4275:

l4272:

l4269:

l4266:

l4263:

  jmp l4261

l4260:

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp4304 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp4304 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4304 ]
  push rdi
  lea  rdi , [ tmp4226 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4303 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal560 ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4303 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4173 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4303 ]
  lea  rdx , [ __literal328 ]
  lea  r8 , [ tmp4173 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ tmp4226 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4173 ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4172 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4228 ]
  lea rdx , [ tmp4172 ]
  lea  rax , [ tmp4174 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6635
  movsxd rax, dword [ tmp4174 + Variant_t.value ]
  mov    qword [ tmp4174 + Variant_t.value ], rax
l6635:


l4261:

l4253:

l4250:

l4247:

l4244:

l4241:

l4238:

l4235:

l4232:

l4230:

l4213:

l4200:

l4198:

l4192:

l4180:

l4178:

l4176:


  ; clean frame
  ; -----------
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4155 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4157 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4163 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4164 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4165 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4172 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4173 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4174 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse27 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dstTypeMir ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcTypeMir ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4211 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4303 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4304 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueAsVariant ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ keyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ left ]
  call __MOLD_VariantDestroy
  lea  rcx, [ right ]
  call __MOLD_VariantDestroy

  add  rsp, 784
  pop  rdi
  pop  rbp
  ret


  restore this
  restore ast
  restore opcode
  restore value
  restore children
  restore childrenCnt
  restore rv
  restore tmp4155
  restore tmp4156
  restore tmp4157
  restore tmp4158
  restore tmp4160
  restore tmp4162
  restore tmp4163
  restore tmp4164
  restore tmp4165
  restore tmp4169
  restore tmp4172
  restore tmp4173
  restore tmp4174
  restore __cse27
  restore tmp4183
  restore tmp4188
  restore srcNode
  restore srcType
  restore dstType
  restore src
  restore dstTypeMir
  restore srcTypeMir
  restore tmp4201
  restore tmp4208
  restore tmp4211
  restore tmp4218
  restore tmp4221
  restore tmp4222
  restore tmp4223
  restore tmp4226
  restore tmp4227
  restore tmp4228
  restore tmp4233
  restore tmp4236
  restore tmp4239
  restore tmp4242
  restore tmp4245
  restore tmp4248
  restore tmp4251
  restore tmp4254
  restore tmp4259
  restore tmp4264
  restore tmp4267
  restore tmp4270
  restore tmp4273
  restore tmp4276
  restore tmp4279
  restore tmp4282
  restore tmp4285
  restore tmp4288
  restore tmp4291
  restore tmp4294
  restore tmp4297
  restore tmp4300
  restore tmp4303
  restore tmp4304
  restore astDataType
  restore mirDataType
  restore key
  restore valueAsVariant
  restore childIdx
  restore childNode
  restore idx
  restore keyNode
  restore valueNode
  restore x
  restore classProto
  restore methodProto
  restore params
  restore paramsCnt
  restore unusedRv
  restore left
  restore right

; -----------------------------------------------
; function __ASTTranslator__evaluateNodeCall$2
; -----------------------------------------------
__ASTTranslator__evaluateNodeCall$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 8 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  ast EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  funcName EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 4 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  childrenCnt EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  params EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 6 )
  paramsCnt EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp4305 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  oneChild EQU rbp - 168 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  oneParam EQU rbp - 184 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4318 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  funcEntry EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  funcProto EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4306 EQU rbp - 236 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  idx EQU rbp - 240 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  tmp4315 EQU rbp - 244 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  isRetValUsed EQU rbp - 248 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [funcName + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  mov [paramsCnt + Variant_t.type], eax
  mov [tmp4305 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp4318 + Variant_t.type], eax
  mov [funcEntry + Variant_t.type], eax
  mov [funcProto + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx, [ funcName ]
  lea rdx, [ __literal249 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4307

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal233
  lea rdx , [ __literal233 ]
  lea  rax , [ tmp4305 ]
  mov  r10d, 57
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6636
  movsxd rax, dword [ tmp4305 + Variant_t.value ]
  mov    qword [ tmp4305 + Variant_t.value ], rax
l6636:


l4307:

l4308:

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramsCnt ]
  lea rdx, [ childrenCnt ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys idx values oneChild
; 
  jmp l4310

l4309:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  lea  rax , [ tmp4305 ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4305 ]
  call  __MOLD_VariantStoreAtIndex_int32

  ret

l4310:

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4309 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys idx values oneChild
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys undefined values oneParam
; 
  jmp l4312

l4311:

  lea rcx , [ this ]
  lea rdx , [ oneParam ]
  call  __ASTTranslator__releaseTempVar$1

  ret

l4312:

  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4311 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  lea rcx, [ funcName ]
  lea rdx, [ __literal249 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4313

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ params ]
  ; skipped unused call param
  call  __ASTTranslator__callSuper$3

  jmp l4314

l4313:

  lea rcx, [ funcName ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4316

  lea  rcx , [ ast ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp4318 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4318 ]
  lea r9 , [ params ]
  lea rax, [ paramsCnt ]
  push rax
  lea  rax , [ tmp4305 ]
  mov  r10d, 85
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6637
  movsxd rax, dword [ tmp4305 + Variant_t.value ]
  mov    qword [ tmp4305 + Variant_t.value ], rax
l6637:

  add rsp, 8

  jmp l4317

l4316:

  xor eax, eax
  cmp [ rv  + Variant_t.type], 0
  setnz al
  mov dword [ isRetValUsed ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4305 ]
  call  __MOLD_VariantLoadFromKey

  mov eax, dword [ isRetValUsed ]
  mov [ tmp4318 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4318 + Variant_t.value], rax

  lea rcx , [ tmp4305 ]
  lea rdx , [ funcName ]
  lea r8 , [ childrenCnt ]
  lea r9 , [ tmp4318 ]
  lea  rax , [ funcEntry ]
  mov  r10d, 86
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6638
  movsxd rax, dword [ funcEntry + Variant_t.value ]
  mov    qword [ funcEntry + Variant_t.value ], rax
l6638:


  lea  rcx , [ funcEntry ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ funcProto ]
  lea r9 , [ params ]
  lea rax, [ paramsCnt ]
  push rax
  lea  rax , [ tmp4318 ]
  mov  r10d, 51
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6639
  movsxd rax, dword [ tmp4318 + Variant_t.value ]
  mov    qword [ tmp4318 + Variant_t.value ], rax
l6639:

  add rsp, 8

l4317:

l4314:


  ; clean frame
  ; -----------
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4305 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  ; Skipped loop iterator oneParam
  lea  rcx, [ tmp4318 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy

  add  rsp, 288
  pop  rbp
  ret


  restore this
  restore rv
  restore ast
  restore funcName
  restore children
  restore childrenCnt
  restore params
  restore paramsCnt
  restore tmp4305
  restore tmp4306
  restore idx
  restore oneChild
  restore oneParam
  restore tmp4315
  restore tmp4318
  restore isRetValUsed
  restore funcEntry
  restore funcProto

; -----------------------------------------------
; function __ASTTranslator__evaluateNodeInvokeMethod$2
; -----------------------------------------------
__ASTTranslator__evaluateNodeInvokeMethod$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  ast EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 4 )
  methodName EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  childrenCnt EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  thiz EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  params EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 5 )
  paramsCnt EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4319 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4325 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oneParam EQU rbp - 200 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4320 EQU rbp - 204 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp4321 EQU rbp - 208 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4322 EQU rbp - 212 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 216 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [methodName + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [thiz + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  mov [paramsCnt + Variant_t.type], eax
  mov [tmp4319 + Variant_t.type], eax
  mov [tmp4325 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp4320 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4320 ]
  lea  r8 , [ tmp4319 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4319 ]
  lea  rax , [ thiz ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate

  mov dword [ tmp4320 ], 0

  lea  rcx , [ params ]
  lea  rdx , [ tmp4320 ]
  lea  r8 , [ thiz ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramsCnt ]
  lea rdx, [ childrenCnt ]
  call __MOLD_VariantMove

  mov dword [ tmp4320 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4321 ], eax

  mov dword [ idx ], 1

; 
; -----------------------------
; BEGIN: for idx in tmp4322 .. tmp4321
; 
l4323:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4321 ]
  jge l4324

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4325 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4325 ]
  lea  rax , [ tmp4319 ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4319 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp4320 ]
  mov dword [ idx ], eax

  jmp l4323

l4324:

; 
; END: for idx in tmp4322 .. tmp4321 step tmp4320
; -----------------------------
; 
  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ methodName ]
  lea r9 , [ params ]
  lea rax, [ paramsCnt ]
  push rax
  lea  rax , [ tmp4319 ]
  mov  r10d, 87
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6640
  movsxd rax, dword [ tmp4319 + Variant_t.value ]
  mov    qword [ tmp4319 + Variant_t.value ], rax
l6640:

  add rsp, 8

; 
; -----------------------------
; BEGIN: for keys undefined values oneParam
; 
  jmp l4327

l4326:

  lea rcx , [ this ]
  lea rdx , [ oneParam ]
  call  __ASTTranslator__releaseTempVar$1

  ret

l4327:

  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4326 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4319 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4325 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam

  add  rsp, 256
  pop  rbp
  ret


  restore this
  restore rv
  restore ast
  restore methodName
  restore children
  restore childrenCnt
  restore thiz
  restore params
  restore paramsCnt
  restore tmp4319
  restore tmp4320
  restore tmp4321
  restore tmp4322
  restore tmp4325
  restore idx
  restore oneParam

; -----------------------------------------------
; function __ASTTranslator__executeNode$1
; -----------------------------------------------
__ASTTranslator__executeNode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 7 , readHits= 75 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 23 )
  value EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 3 )
  children EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 57 )
  tmp4328 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4329 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 24 , readHits= 24 )
  tmp4334 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 42 , readHits= 42 )
  tmp4335 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp4336 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp4337 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp4338 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  funcProto EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  oldSymbolTable EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oneChild EQU rbp - 232 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4364 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  lval EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 21 )
  rval EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  symbolInfo EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  boxNode EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  indexNode EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  valueNode EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  box EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  idxOrKey EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  __cse28 EQU rbp - 392 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  iteratorName EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  valueStep EQU rbp - 424 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  valueEnd EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  valueStart EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  bodyAst EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  mirDataType EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  __cse29 EQU rbp - 504 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  iteratorValue EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  loopBodyNode EQU rbp - 536 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  iteratorKey EQU rbp - 552 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  condAst EQU rbp - 568 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  cond EQU rbp - 584 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  codeIfTrue EQU rbp - 600 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  codeIfFalse EQU rbp - 616 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paramName EQU rbp - 632 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  unusedRv EQU rbp - 648 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  opcode EQU rbp - 652 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 21 )
  tmp4330 EQU rbp - 656 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 54 , readHits= 54 )
  tmp4331 EQU rbp - 660 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4343 EQU rbp - 664 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4348 EQU rbp - 668 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4351 EQU rbp - 672 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4354 EQU rbp - 676 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4356 EQU rbp - 680 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  astDataType EQU rbp - 684 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4370 EQU rbp - 688 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  isMapMode EQU rbp - 692 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4374 EQU rbp - 696 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4379 EQU rbp - 700 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4382 EQU rbp - 704 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4385 EQU rbp - 708 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4388 EQU rbp - 712 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4393 EQU rbp - 716 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4402 EQU rbp - 720 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4405 EQU rbp - 724 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 752

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [value + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [tmp4328 + Variant_t.type], eax
  mov [tmp4329 + Variant_t.type], eax
  mov [tmp4334 + Variant_t.type], eax
  mov [tmp4335 + Variant_t.type], eax
  mov [tmp4336 + Variant_t.type], eax
  mov [tmp4337 + Variant_t.type], eax
  mov [tmp4338 + Variant_t.type], eax
  mov [funcProto + Variant_t.type], eax
  mov [oldSymbolTable + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp4364 + Variant_t.type], eax
  mov [lval + Variant_t.type], eax
  mov [rval + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax
  mov [boxNode + Variant_t.type], eax
  mov [indexNode + Variant_t.type], eax
  mov [valueNode + Variant_t.type], eax
  mov [box + Variant_t.type], eax
  mov [idxOrKey + Variant_t.type], eax
  mov [__cse28 + Variant_t.type], eax
  mov [iteratorName + Variant_t.type], eax
  mov [valueStep + Variant_t.type], eax
  mov [valueEnd + Variant_t.type], eax
  mov [valueStart + Variant_t.type], eax
  mov [bodyAst + Variant_t.type], eax
  mov [mirDataType + Variant_t.type], eax
  mov [__cse29 + Variant_t.type], eax
  mov [iteratorValue + Variant_t.type], eax
  mov [loopBodyNode + Variant_t.type], eax
  mov [iteratorKey + Variant_t.type], eax
  mov [condAst + Variant_t.type], eax
  mov [cond + Variant_t.type], eax
  mov [codeIfTrue + Variant_t.type], eax
  mov [codeIfFalse + Variant_t.type], eax
  mov [paramName + Variant_t.type], eax
  mov [unusedRv + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4329 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp4328 ]
  mov  r10d, 7
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6641
  movsxd rax, dword [ tmp4328 + Variant_t.value ]
  mov    qword [ tmp4328 + Variant_t.value ], rax
l6641:


  lea  rcx , [ ast ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4328 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4328 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4328 + Variant_t.value]
  mov dword [ opcode ], eax

  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal557 ]
  lea  r8 , [ tmp4328 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4328  + Variant_t.type], 0
  jz l4332

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4338 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4338 ]
  push rdi
  lea  rdi , [ tmp4337 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal558 ]
  lea  rdx , [ tmp4337 ]
  lea  r8 , [ tmp4336 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4336 ]
  lea  rdx , [ __literal562 ]
  lea  r8 , [ tmp4335 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4334 ]
  lea rdx , [ tmp4335 ]
  lea  rax , [ tmp4329 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6642
  movsxd rax, dword [ tmp4329 + Variant_t.value ]
  mov    qword [ tmp4329 + Variant_t.value ], rax
l6642:


l4332:

l4333:

  mov dword [ tmp4331 ], 1

  mov eax, dword [ tmp4331 ]
  mov [ tmp4329 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4329 + Variant_t.value], rax

  lea  rcx , [ ast ]
  lea  rdx , [ __literal557 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp4330 ], 30

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4339

  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __const4341 ]
  lea  r8 , [ __const4342 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4329 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal491 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4337 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 0

  lea  rcx , [ tmp4337 ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4334 ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal492 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal563
  lea rdx , [ __literal563 ]
  lea r8 , [ funcProto ]
  lea  rax , [ tmp4329 ]
  mov  r10d, 49
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6643
  movsxd rax, dword [ tmp4329 + Variant_t.value ]
  mov    qword [ tmp4329 + Variant_t.value ], rax
l6643:


  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal491 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantStoreAtKey

  jmp l4340

l4339:

  mov dword [ tmp4330 ], 31

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4344

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ ast ]
  call  __ASTTranslator__enterScope$1

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l4347

l4346:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  call  __ASTTranslator__executeNode$1

  ret

l4347:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4346 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea rcx , [ this ]
  call  __ASTTranslator__leaveScope$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey

  jmp l4345

l4344:

  mov dword [ tmp4330 ], 56

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4349

  mov dword [ tmp4330 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 52

  mov [ tmp4334 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4330 ]
  mov [ tmp4334 + Variant_t.value], rax

  lea rcx, [ tmp4329 ]
  lea rdx, [ tmp4334 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4352

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ rval ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ lval ]
  lea r8 , [ rval ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 52
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6644
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6644:


  mov dword [ tmp4354 ], 0

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4329 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 65

  mov [ tmp4329 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4330 ]
  mov [ tmp4329 + Variant_t.value], rax

  lea rcx, [ tmp4334 ]
  lea rdx, [ tmp4329 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4355

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4338 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4338 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4337 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 0

  lea  rcx , [ tmp4337 ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4334 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ lval ]
  lea  rdx , [ tmp4329 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4354 ], eax

l4355:

  cmp dword [ tmp4354 ], 0
  jz l4357

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4329 ]
  lea rdx , [ lval ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6645
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6645:


  mov dword [ tmp4356 ], 1

  mov eax, dword [ tmp4356 ]
  mov [ tmp4329 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4329 + Variant_t.value], rax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantStoreAtKey

l4357:

l4358:

  lea rcx , [ this ]
  lea rdx , [ rval ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4353

l4352:

  mov dword [ tmp4354 ], 1

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 54

  mov [ tmp4334 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4330 ]
  mov [ tmp4334 + Variant_t.value], rax

  lea rcx, [ tmp4329 ]
  lea rdx, [ tmp4334 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4359

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 55

  mov [ tmp4329 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4330 ]
  mov [ tmp4329 + Variant_t.value], rax

  lea  rcx , [ tmp4334 ]
  lea  rdx , [ tmp4329 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4354 ], eax

l4359:

  cmp dword [ tmp4354 ], 0
  jz l4360

  lea  rcx , [ lval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse28 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 0

  lea  rcx , [ __cse28 ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ boxNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4330 ], 1

  lea  rcx , [ __cse28 ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ indexNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ valueNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ boxNode ]
  lea  rax , [ box ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ indexNode ]
  lea  rax , [ idxOrKey ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea rdx , [ valueNode ]
  lea  rax , [ rval ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 54

  mov [ tmp4334 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4330 ]
  mov [ tmp4334 + Variant_t.value], rax

  lea rcx, [ tmp4329 ]
  lea rdx, [ tmp4334 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4362

  lea rcx , [ this ]
  lea rdx , [ box ]
  lea r8 , [ idxOrKey ]
  lea r9 , [ rval ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 88
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6646
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6646:


  jmp l4363

l4362:

  lea rcx , [ this ]
  lea rdx , [ box ]
  lea r8 , [ idxOrKey ]
  lea r9 , [ rval ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 89
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6647
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6647:


l4363:

  lea rcx , [ this ]
  lea rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ idxOrKey ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ rval ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4361

l4360:

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4338 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4338 ]
  push rdi
  lea  rdi , [ tmp4337 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4364 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal565 ]
  lea  rdx , [ tmp4337 ]
  lea  r8 , [ tmp4364 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4364 ]
  lea  rdx , [ __literal328 ]
  lea  r8 , [ tmp4336 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp4338 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4338 ]
  push rdi
  lea  rdi , [ tmp4337 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4336 ]
  lea  rdx , [ tmp4337 ]
  lea  r8 , [ tmp4335 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4329 ]
  lea rdx , [ tmp4335 ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6648
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6648:


l4361:

l4353:

  jmp l4350

l4349:

  mov dword [ tmp4330 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4365

  mov dword [ tmp4330 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ __cse29 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ __cse29 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorName ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 3

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ valueStep ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4330 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ valueEnd ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ valueStart ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4330 ], 4

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ bodyAst ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ bodyAst ]
  call  __ASTTranslator__enterScope$1

  lea rcx , [ __cse29 ]
  lea  rax , [ astDataType ]
  call  AST_GetDataType

  mov [ tmp4334 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astDataType ]
  mov [ tmp4334 + Variant_t.value], rax

  lea rcx , [ tmp4334 ]
  lea  rax , [ mirDataType ]
  call  AST_ConvertDataTypeToMIR

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4329 ]
  lea rdx , [ iteratorName ]
  lea r8 , [ mirDataType ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 90
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6649
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6649:


  lea rcx , [ this ]
  lea rdx , [ iteratorName ]
  lea r8 , [ valueStart ]
  lea r9 , [ valueEnd ]
  lea rax, [ valueStep ]
  push rax
  lea rax, [ bodyAst ]
  push rax
  lea  rax , [ tmp4334 ]
  mov  r10d, 91
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6650
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6650:

  add rsp, 16

  lea rcx , [ this ]
  call  __ASTTranslator__leaveScope$0

  lea rcx , [ this ]
  lea rdx , [ valueStep ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ valueEnd ]
  call  __ASTTranslator__releaseTempVar$1

  lea rcx , [ this ]
  lea rdx , [ valueStart ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4366

l4365:

  mov dword [ tmp4330 ], 45

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4367

  mov dword [ tmp4330 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4334 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorValue ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ box ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4330 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ loopBodyNode ]
  call  __ASTTranslator__enterScope$1

  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy

  mov dword [ tmp4356 ], 0

  mov eax, dword [ tmp4356 ]
  mov [ tmp4337 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4337 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp4329 ]
  lea r8 , [ iteratorValue ]
  lea r9 , [ box ]
  lea rax, [ loopBodyNode ]
  push rax
  lea rax, [ tmp4337 ]
  push rax
  lea  rax , [ tmp4334 ]
  mov  r10d, 92
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6651
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6651:

  add rsp, 16

  lea rcx , [ this ]
  call  __ASTTranslator__leaveScope$0

  lea rcx , [ this ]
  lea rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4368

l4367:

  mov dword [ tmp4356 ], 1

  mov dword [ tmp4330 ], 46

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jz l4369

  mov dword [ tmp4330 ], 48

  mov dword [ tmp4356 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp4330 ]
  setz byte [ tmp4356 ]

l4369:

  cmp dword [ tmp4356 ], 0
  jz l4371

  mov dword [ tmp4330 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4334 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorKey ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ box ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4330 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4330 ], 46

  mov dword [ isMapMode ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp4330 ]
  setz byte [ isMapMode ]

  lea rcx , [ this ]
  lea rdx , [ loopBodyNode ]
  call  __ASTTranslator__enterScope$1

  lea  rcx, [ tmp4337 ]
  call __MOLD_VariantDestroy

  mov eax, dword [ isMapMode ]
  mov [ tmp4329 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4329 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ iteratorKey ]
  lea r8 , [ tmp4337 ]
  lea r9 , [ box ]
  lea rax, [ loopBodyNode ]
  push rax
  lea rax, [ tmp4329 ]
  push rax
  lea  rax , [ tmp4334 ]
  mov  r10d, 92
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6652
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6652:

  add rsp, 16

  lea rcx , [ this ]
  call  __ASTTranslator__leaveScope$0

  lea rcx , [ this ]
  lea rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4372

l4371:

  mov dword [ tmp4370 ], 1

  mov dword [ tmp4330 ], 47

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jz l4373

  mov dword [ tmp4330 ], 49

  mov dword [ tmp4370 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp4330 ]
  setz byte [ tmp4370 ]

l4373:

  cmp dword [ tmp4370 ], 0
  jz l4375

  mov dword [ tmp4330 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4334 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorKey ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4334 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorValue ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4330 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ box ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4330 ], 3

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4330 ], 47

  mov dword [ isMapMode ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp4330 ]
  setz byte [ isMapMode ]

  lea rcx , [ this ]
  lea rdx , [ loopBodyNode ]
  call  __ASTTranslator__enterScope$1

  mov eax, dword [ isMapMode ]
  mov [ tmp4329 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4329 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ iteratorKey ]
  lea r8 , [ iteratorValue ]
  lea r9 , [ box ]
  lea rax, [ loopBodyNode ]
  push rax
  lea rax, [ tmp4329 ]
  push rax
  lea  rax , [ tmp4334 ]
  mov  r10d, 92
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6653
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6653:

  add rsp, 16

  lea rcx , [ this ]
  call  __ASTTranslator__leaveScope$0

  lea rcx , [ this ]
  lea rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4376

l4375:

  mov dword [ tmp4330 ], 43

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4377

  mov dword [ tmp4330 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ condAst ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ bodyAst ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ bodyAst ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ condAst ]
  lea r8 , [ bodyAst ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 93
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6654
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6654:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey

  jmp l4378

l4377:

  mov dword [ tmp4330 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4380

  mov dword [ tmp4330 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea  rax , [ cond ]
  call  __ASTTranslator__evaluateNode$1

  mov dword [ tmp4330 ], 1

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ codeIfTrue ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4330 ], 2

  lea  rcx , [ children ]
  lea  rdx , [ tmp4330 ]
  lea  r8 , [ codeIfFalse ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ cond ]
  lea r8 , [ codeIfTrue ]
  lea r9 , [ codeIfFalse ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 94
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6655
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6655:


  lea rcx , [ this ]
  lea rdx , [ cond ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4381

l4380:

  mov dword [ tmp4330 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jz l4383

  mov dword [ tmp4330 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4386

  lea rcx, [ value ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4389

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l4392

l4391:

  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ paramName ]
  call  __MOLD_VariantLoadFromKey

  cmp [ paramName  + Variant_t.type], 5
  jz l4394

  ; __mold_syscall( 44 )
  lea rcx , [ paramName ]
  push rdi
  lea  rdi , [ tmp4334 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea  rcx, [ tmp4336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal566 ]
  lea  rdx , [ tmp4334 ]
  lea  r8 , [ tmp4336 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4336 ]
  lea  rdx , [ __literal567 ]
  lea  r8 , [ tmp4335 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4335 ]
  call  __ASTTranslator__error$1

  jmp l4395

l4394:

  lea rcx , [ this ]
  lea rdx , [ paramName ]
  call  __ASTTranslator__importGlobal$1

l4395:

  ret

l4392:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4391 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  jmp l4390

l4389:

  lea rcx, [ value ]
  lea rdx, [ __literal16 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4396

  lea rcx , [ this ]
  lea rdx , [ ast ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 95
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6656
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6656:


  jmp l4397

l4396:

  lea  rcx, [ tmp4334 ]
  call __MOLD_VariantDestroy

  lea rcx , [ this ]
  lea rdx , [ tmp4334 ]
  lea r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeCall$2

l4397:

l4390:

  jmp l4387

l4386:

  mov dword [ tmp4330 ], 50

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4398

  lea rcx , [ this ]
  lea rdx , [ ast ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 96
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6657
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6657:


  jmp l4399

l4398:

  mov dword [ tmp4330 ], 33

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jz l4400

  mov dword [ tmp4330 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jnz l4403

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal130
  lea rdx , [ __literal130 ]
  lea  rax , [ unusedRv ]
  call  __ASTTranslator__getTempVar$1

  lea rcx , [ this ]
  lea rdx , [ unusedRv ]
  lea r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeInvokeMethod$2

  lea rcx , [ this ]
  lea  rax , [ tmp4334 ]
  mov  r10d, 97
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6658
  movsxd rax, dword [ tmp4334 + Variant_t.value ]
  mov    qword [ tmp4334 + Variant_t.value ], rax
l6658:


  lea rcx , [ this ]
  lea rdx , [ unusedRv ]
  call  __ASTTranslator__releaseTempVar$1

  jmp l4404

l4403:

  mov dword [ tmp4330 ], 78

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4330 ]
  jz l4406

  mov [ tmp4329 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp4329 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4329 ]
  push rdi
  lea  rdi , [ tmp4334 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal568 ]
  lea  rdx , [ tmp4334 ]
  lea  r8 , [ tmp4335 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4335 ]
  call  __ASTTranslator__error$1

l4406:

l4407:

l4404:

l4400:

l4401:

l4399:

l4387:

l4383:

l4384:

l4381:

l4378:

l4376:

l4372:

l4368:

l4366:

l4350:

l4345:

l4340:


  ; clean frame
  ; -----------
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4328 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4334 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4336 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4337 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4338 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp4364 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ indexNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxOrKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse28 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueStep ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueStart ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse29 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ condAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeIfTrue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeIfFalse ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy

  add  rsp, 752
  pop  rbp
  ret


  restore this
  restore ast
  restore opcode
  restore value
  restore children
  restore tmp4328
  restore tmp4329
  restore tmp4330
  restore tmp4331
  restore tmp4334
  restore tmp4335
  restore tmp4336
  restore tmp4337
  restore tmp4338
  restore funcProto
  restore tmp4343
  restore oldSymbolTable
  restore oneChild
  restore tmp4348
  restore tmp4351
  restore tmp4354
  restore tmp4356
  restore tmp4364
  restore lval
  restore rval
  restore symbolInfo
  restore boxNode
  restore indexNode
  restore valueNode
  restore box
  restore idxOrKey
  restore __cse28
  restore iteratorName
  restore valueStep
  restore valueEnd
  restore valueStart
  restore bodyAst
  restore astDataType
  restore mirDataType
  restore __cse29
  restore iteratorValue
  restore loopBodyNode
  restore tmp4370
  restore iteratorKey
  restore isMapMode
  restore tmp4374
  restore condAst
  restore tmp4379
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore tmp4382
  restore tmp4385
  restore tmp4388
  restore tmp4393
  restore paramName
  restore tmp4402
  restore unusedRv
  restore tmp4405

; -----------------------------------------------
; function __ASTTranslator_run$1
; -----------------------------------------------
__ASTTranslator_run$1_vcall:
__ASTTranslator_run$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ ast ]
  call  __ASTTranslator__executeNode$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore ast

; -----------------------------------------------
; function __ASTTranslatorMIR0_constructor$1
; -----------------------------------------------
__ASTTranslatorMIR0_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4408 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4409 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp4408 + Variant_t.type], eax
  mov [tmp4409 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ app ]
  call  __ASTTranslator_constructor$1

  lea  rcx, [ tmp4408 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4408 ]
  lea  rdx, [vtable_MIRCode]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp4408 ]
  lea  rax , [ tmp4409 ]
  call  __MIRCode_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4408 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4408 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4409 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore app
  restore tmp4408
  restore tmp4409

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArgsVector$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadArgsVector$0_vcall:
__ASTTranslatorMIR0__loadArgsVector$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4410 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4411 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4410 + Variant_t.type], eax
  mov [tmp4411 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4411 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4411 ]
  lea  rax , [ tmp4410 ]
  mov  r10d, 98
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6659
  movsxd rax, dword [ tmp4410 + Variant_t.value ]
  mov    qword [ tmp4410 + Variant_t.value ], rax
l6659:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4410 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4410
  restore tmp4411

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArgsCount$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadArgsCount$0_vcall:
__ASTTranslatorMIR0__loadArgsCount$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4412 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4413 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4412 + Variant_t.type], eax
  mov [tmp4413 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4413 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4413 ]
  lea  rax , [ tmp4412 ]
  mov  r10d, 99
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6660
  movsxd rax, dword [ tmp4412 + Variant_t.value ]
  mov    qword [ tmp4412 + Variant_t.value ], rax
l6660:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4412 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4413 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4412
  restore tmp4413

; -----------------------------------------------
; function __ASTTranslatorMIR0__neg$2
; -----------------------------------------------
__ASTTranslatorMIR0__neg$2_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ value ]
__ASTTranslatorMIR0__neg$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4414 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4415 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]
  xor eax, eax
  mov [tmp4414 + Variant_t.type], eax
  mov [tmp4415 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4415 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4415 ]
  lea  rax , [ tmp4414 ]
  mov  r10d, 100
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6661
  movsxd rax, dword [ tmp4414 + Variant_t.value ]
  mov    qword [ tmp4414 + Variant_t.value ], rax
l6661:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4415 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4414
  restore tmp4415

; -----------------------------------------------
; function __ASTTranslatorMIR0__add$3
; -----------------------------------------------
__ASTTranslatorMIR0__add$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__add$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4416 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4417 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4416 + Variant_t.type], eax
  mov [tmp4417 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4417 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4417 ]
  lea  rax , [ tmp4416 ]
  mov  r10d, 101
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6662
  movsxd rax, dword [ tmp4416 + Variant_t.value ]
  mov    qword [ tmp4416 + Variant_t.value ], rax
l6662:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4416 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4417 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4416
  restore tmp4417

; -----------------------------------------------
; function __ASTTranslatorMIR0__stringJoin$3
; -----------------------------------------------
__ASTTranslatorMIR0__stringJoin$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__stringJoin$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4418 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4419 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4418 + Variant_t.type], eax
  mov [tmp4419 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4419 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4419 ]
  lea  rax , [ tmp4418 ]
  mov  r10d, 102
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6663
  movsxd rax, dword [ tmp4418 + Variant_t.value ]
  mov    qword [ tmp4418 + Variant_t.value ], rax
l6663:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4418 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4419 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4418
  restore tmp4419

; -----------------------------------------------
; function __ASTTranslatorMIR0__sub$3
; -----------------------------------------------
__ASTTranslatorMIR0__sub$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__sub$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4420 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4421 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4420 + Variant_t.type], eax
  mov [tmp4421 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4421 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4421 ]
  lea  rax , [ tmp4420 ]
  mov  r10d, 103
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6664
  movsxd rax, dword [ tmp4420 + Variant_t.value ]
  mov    qword [ tmp4420 + Variant_t.value ], rax
l6664:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4420 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4421 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4420
  restore tmp4421

; -----------------------------------------------
; function __ASTTranslatorMIR0__mul$3
; -----------------------------------------------
__ASTTranslatorMIR0__mul$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__mul$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4422 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4423 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4422 + Variant_t.type], eax
  mov [tmp4423 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4423 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4423 ]
  lea  rax , [ tmp4422 ]
  mov  r10d, 104
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6665
  movsxd rax, dword [ tmp4422 + Variant_t.value ]
  mov    qword [ tmp4422 + Variant_t.value ], rax
l6665:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4422
  restore tmp4423

; -----------------------------------------------
; function __ASTTranslatorMIR0__div$3
; -----------------------------------------------
__ASTTranslatorMIR0__div$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__div$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4424 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4425 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4424 + Variant_t.type], eax
  mov [tmp4425 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4425 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4425 ]
  lea  rax , [ tmp4424 ]
  mov  r10d, 105
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6666
  movsxd rax, dword [ tmp4424 + Variant_t.value ]
  mov    qword [ tmp4424 + Variant_t.value ], rax
l6666:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4424 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4425 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4424
  restore tmp4425

; -----------------------------------------------
; function __ASTTranslatorMIR0__idiv$3
; -----------------------------------------------
__ASTTranslatorMIR0__idiv$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__idiv$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4426 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4427 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4426 + Variant_t.type], eax
  mov [tmp4427 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4427 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4427 ]
  lea  rax , [ tmp4426 ]
  mov  r10d, 106
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6667
  movsxd rax, dword [ tmp4426 + Variant_t.value ]
  mov    qword [ tmp4426 + Variant_t.value ], rax
l6667:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4426 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4427 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4426
  restore tmp4427

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArray$1
; -----------------------------------------------
__ASTTranslatorMIR0__loadArray$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslatorMIR0__loadArray$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4428 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4429 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  xor eax, eax
  mov [tmp4428 + Variant_t.type], eax
  mov [tmp4429 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4429 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4429 ]
  lea  rax , [ tmp4428 ]
  mov  r10d, 107
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6668
  movsxd rax, dword [ tmp4428 + Variant_t.value ]
  mov    qword [ tmp4428 + Variant_t.value ], rax
l6668:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4428 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4429 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4428
  restore tmp4429

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadMap$1
; -----------------------------------------------
__ASTTranslatorMIR0__loadMap$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslatorMIR0__loadMap$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4430 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4431 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  xor eax, eax
  mov [tmp4430 + Variant_t.type], eax
  mov [tmp4431 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4431 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4431 ]
  lea  rax , [ tmp4430 ]
  mov  r10d, 108
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6669
  movsxd rax, dword [ tmp4430 + Variant_t.value ]
  mov    qword [ tmp4430 + Variant_t.value ], rax
l6669:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4430 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4431 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4430
  restore tmp4431

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadNull$1
; -----------------------------------------------
__ASTTranslatorMIR0__loadNull$1_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslatorMIR0__loadNull$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4432 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4433 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  xor eax, eax
  mov [tmp4432 + Variant_t.type], eax
  mov [tmp4433 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4433 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4433 ]
  lea  rax , [ tmp4432 ]
  mov  r10d, 109
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6670
  movsxd rax, dword [ tmp4432 + Variant_t.value ]
  mov    qword [ tmp4432 + Variant_t.value ], rax
l6670:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4433 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4432
  restore tmp4433

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadImm$2
; -----------------------------------------------
__ASTTranslatorMIR0__loadImm$2_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslatorMIR0__loadImm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  value EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4434 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4435 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp4434 + Variant_t.type], eax
  mov [tmp4435 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4435 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4435 ]
  lea rdx , [ value ]
  lea  rax , [ tmp4434 ]
  mov  r10d, 110
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6671
  movsxd rax, dword [ tmp4434 + Variant_t.value ]
  mov    qword [ tmp4434 + Variant_t.value ], rax
l6671:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4434 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4435 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore value
  restore tmp4434
  restore tmp4435

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadImmAsVariant$2
; -----------------------------------------------
__ASTTranslatorMIR0__loadImmAsVariant$2_vcall:
__ASTTranslatorMIR0__loadImmAsVariant$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  ; skipped unused call param
  lea r8 , [ value ]
  call  __ASTTranslatorMIR0__loadImm$2


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rv
  restore value

; -----------------------------------------------
; function __ASTTranslatorMIR0__convert$4
; -----------------------------------------------
__ASTTranslatorMIR0__convert$4_vcall:
  ; skipped unused parameter [ dst ]
  ; skipped unused parameter [ src ]
  ; skipped unused parameter [ srcType ]
  ; skipped unused parameter [ dstType ]
__ASTTranslatorMIR0__convert$4:

  ret


  restore this
  restore rv
  restore value

; -----------------------------------------------
; function __ASTTranslatorMIR0__compareEQ$3
; -----------------------------------------------
__ASTTranslatorMIR0__compareEQ$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__compareEQ$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4436 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4437 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4436 + Variant_t.type], eax
  mov [tmp4437 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4437 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4437 ]
  lea  rax , [ tmp4436 ]
  mov  r10d, 111
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6672
  movsxd rax, dword [ tmp4436 + Variant_t.value ]
  mov    qword [ tmp4436 + Variant_t.value ], rax
l6672:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4436 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4437 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4436
  restore tmp4437

; -----------------------------------------------
; function __ASTTranslatorMIR0__compareNEQ$3
; -----------------------------------------------
__ASTTranslatorMIR0__compareNEQ$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__compareNEQ$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4438 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4439 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4438 + Variant_t.type], eax
  mov [tmp4439 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4439 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4439 ]
  lea  rax , [ tmp4438 ]
  mov  r10d, 112
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6673
  movsxd rax, dword [ tmp4438 + Variant_t.value ]
  mov    qword [ tmp4438 + Variant_t.value ], rax
l6673:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4438 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4439 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4438
  restore tmp4439

; -----------------------------------------------
; function __ASTTranslatorMIR0__compareLT$3
; -----------------------------------------------
__ASTTranslatorMIR0__compareLT$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__compareLT$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4440 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4441 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4440 + Variant_t.type], eax
  mov [tmp4441 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4441 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4441 ]
  lea  rax , [ tmp4440 ]
  mov  r10d, 113
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6674
  movsxd rax, dword [ tmp4440 + Variant_t.value ]
  mov    qword [ tmp4440 + Variant_t.value ], rax
l6674:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4440 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4441 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4440
  restore tmp4441

; -----------------------------------------------
; function __ASTTranslatorMIR0__compareLE$3
; -----------------------------------------------
__ASTTranslatorMIR0__compareLE$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__compareLE$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4442 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4443 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4442 + Variant_t.type], eax
  mov [tmp4443 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4443 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4443 ]
  lea  rax , [ tmp4442 ]
  mov  r10d, 114
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6675
  movsxd rax, dword [ tmp4442 + Variant_t.value ]
  mov    qword [ tmp4442 + Variant_t.value ], rax
l6675:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4442 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4443 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4442
  restore tmp4443

; -----------------------------------------------
; function __ASTTranslatorMIR0__compareGT$3
; -----------------------------------------------
__ASTTranslatorMIR0__compareGT$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__compareGT$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4444 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4445 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4444 + Variant_t.type], eax
  mov [tmp4445 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4445 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4445 ]
  lea  rax , [ tmp4444 ]
  mov  r10d, 115
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6676
  movsxd rax, dword [ tmp4444 + Variant_t.value ]
  mov    qword [ tmp4444 + Variant_t.value ], rax
l6676:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4444 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4444
  restore tmp4445

; -----------------------------------------------
; function __ASTTranslatorMIR0__compareGE$3
; -----------------------------------------------
__ASTTranslatorMIR0__compareGE$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR0__compareGE$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4446 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4447 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  xor eax, eax
  mov [tmp4446 + Variant_t.type], eax
  mov [tmp4447 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4447 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4447 ]
  lea  rax , [ tmp4446 ]
  mov  r10d, 116
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6677
  movsxd rax, dword [ tmp4446 + Variant_t.value ]
  mov    qword [ tmp4446 + Variant_t.value ], rax
l6677:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4446 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4447 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4446
  restore tmp4447

; -----------------------------------------------
; function __ASTTranslatorMIR0__isTypeOf$3
; -----------------------------------------------
__ASTTranslatorMIR0__isTypeOf$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
__ASTTranslatorMIR0__isTypeOf$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  typeId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  __cse30 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  tmp4448 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4450 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4451 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4449 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  movdqu xmm0 , [ r9 ]
  movdqu [ typeId ], xmm0
  xor eax, eax
  mov [__cse30 + Variant_t.type], eax
  mov [tmp4448 + Variant_t.type], eax
  mov [tmp4450 + Variant_t.type], eax
  mov [tmp4451 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ __cse30 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4449 ], 57

  mov [ tmp4450 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4449 ]
  mov [ tmp4450 + Variant_t.value], rax

  mov dword [ tmp4449 ], 1

  mov [ tmp4451 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4449 ]
  mov [ tmp4451 + Variant_t.value], rax

  lea rcx , [ __cse30 ]
  lea rdx , [ tmp4450 ]
  lea r8 , [ tmp4451 ]
  lea  rax , [ tmp4448 ]
  mov  r10d, 117
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6678
  movsxd rax, dword [ tmp4448 + Variant_t.value ]
  mov    qword [ tmp4448 + Variant_t.value ], rax
l6678:


  lea rcx , [ __cse30 ]
  lea rdx , [ typeId ]
  lea  rax , [ tmp4448 ]
  mov  r10d, 110
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6679
  movsxd rax, dword [ tmp4448 + Variant_t.value ]
  mov    qword [ tmp4448 + Variant_t.value ], rax
l6679:


  lea rcx , [ __cse30 ]
  lea  rax , [ tmp4448 ]
  mov  r10d, 111
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6680
  movsxd rax, dword [ tmp4448 + Variant_t.value ]
  mov    qword [ tmp4448 + Variant_t.value ], rax
l6680:



  ; clean frame
  ; -----------
  lea  rcx, [ __cse30 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4448 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4450 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4451 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore typeId
  restore __cse30
  restore tmp4448
  restore tmp4449
  restore tmp4450
  restore tmp4451

; -----------------------------------------------
; function __ASTTranslatorMIR0__isNotTypeOf$3
; -----------------------------------------------
__ASTTranslatorMIR0__isNotTypeOf$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ x ]
__ASTTranslatorMIR0__isNotTypeOf$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  typeId EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  __cse31 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  tmp4452 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4454 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4455 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4453 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  movdqu xmm0 , [ r9 ]
  movdqu [ typeId ], xmm0
  xor eax, eax
  mov [__cse31 + Variant_t.type], eax
  mov [tmp4452 + Variant_t.type], eax
  mov [tmp4454 + Variant_t.type], eax
  mov [tmp4455 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ __cse31 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4453 ], 57

  mov [ tmp4454 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4453 ]
  mov [ tmp4454 + Variant_t.value], rax

  mov dword [ tmp4453 ], 1

  mov [ tmp4455 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4453 ]
  mov [ tmp4455 + Variant_t.value], rax

  lea rcx , [ __cse31 ]
  lea rdx , [ tmp4454 ]
  lea r8 , [ tmp4455 ]
  lea  rax , [ tmp4452 ]
  mov  r10d, 117
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6681
  movsxd rax, dword [ tmp4452 + Variant_t.value ]
  mov    qword [ tmp4452 + Variant_t.value ], rax
l6681:


  lea rcx , [ __cse31 ]
  lea rdx , [ typeId ]
  lea  rax , [ tmp4452 ]
  mov  r10d, 110
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6682
  movsxd rax, dword [ tmp4452 + Variant_t.value ]
  mov    qword [ tmp4452 + Variant_t.value ], rax
l6682:


  lea rcx , [ __cse31 ]
  lea  rax , [ tmp4452 ]
  mov  r10d, 112
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6683
  movsxd rax, dword [ tmp4452 + Variant_t.value ]
  mov    qword [ tmp4452 + Variant_t.value ], rax
l6683:



  ; clean frame
  ; -----------
  lea  rcx, [ __cse31 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4452 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4454 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4455 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore typeId
  restore __cse31
  restore tmp4452
  restore tmp4453
  restore tmp4454
  restore tmp4455

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadVariable$1
; -----------------------------------------------
__ASTTranslatorMIR0__loadVariable$1_vcall:
__ASTTranslatorMIR0__loadVariable$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 13 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  id EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp4456 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp4461 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4474 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4475 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4476 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4477 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4478 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  kind EQU rbp - 188 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 6 )
  tmp4457 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp4458 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4462 EQU rbp - 200 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4465 EQU rbp - 204 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4468 EQU rbp - 208 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4471 EQU rbp - 212 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [id + Variant_t.type], eax
  mov [tmp4456 + Variant_t.type], eax
  mov [tmp4461 + Variant_t.type], eax
  mov [tmp4474 + Variant_t.type], eax
  mov [tmp4475 + Variant_t.type], eax
  mov [tmp4476 + Variant_t.type], eax
  mov [tmp4477 + Variant_t.type], eax
  mov [tmp4478 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4456 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4456 ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6684
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6684:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4456 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4456 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4456 + Variant_t.value]
  mov dword [ kind ], eax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4457 ], 1

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4457 ]
  jnz l4459

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4461 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4461 ]
  lea rdx , [ id ]
  lea  rax , [ tmp4456 ]
  mov  r10d, 118
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6685
  movsxd rax, dword [ tmp4456 + Variant_t.value ]
  mov    qword [ tmp4456 + Variant_t.value ], rax
l6685:


  jmp l4460

l4459:

  mov dword [ tmp4457 ], 2

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4457 ]
  jnz l4463

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4461 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4461 ]
  lea rdx , [ id ]
  lea  rax , [ tmp4456 ]
  mov  r10d, 119
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6686
  movsxd rax, dword [ tmp4456 + Variant_t.value ]
  mov    qword [ tmp4456 + Variant_t.value ], rax
l6686:


  jmp l4464

l4463:

  mov dword [ tmp4457 ], 3

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4457 ]
  jnz l4466

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4461 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4461 ]
  lea rdx , [ id ]
  lea  rax , [ tmp4456 ]
  mov  r10d, 120
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6687
  movsxd rax, dword [ tmp4456 + Variant_t.value ]
  mov    qword [ tmp4456 + Variant_t.value ], rax
l6687:


  jmp l4467

l4466:

  mov dword [ tmp4457 ], 4

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4457 ]
  jnz l4469

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4461 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4461 ]
  lea  rax , [ tmp4456 ]
  mov  r10d, 121
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6688
  movsxd rax, dword [ tmp4456 + Variant_t.value ]
  mov    qword [ tmp4456 + Variant_t.value ], rax
l6688:


  jmp l4470

l4469:

  mov dword [ tmp4457 ], 5

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4457 ]
  jnz l4472

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4461 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp4474 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4461 ]
  lea rdx , [ tmp4474 ]
  lea  rax , [ tmp4456 ]
  mov  r10d, 110
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6689
  movsxd rax, dword [ tmp4456 + Variant_t.value ]
  mov    qword [ tmp4456 + Variant_t.value ], rax
l6689:


  jmp l4473

l4472:

  lea  rcx, [ tmp4478 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal569 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4478 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4477 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4478 ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4477 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp4474 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ kind ]
  mov [ tmp4474 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4474 ]
  push rdi
  lea  rdi , [ tmp4456 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4476 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4477 ]
  lea  rdx , [ tmp4456 ]
  lea  r8 , [ tmp4476 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4475 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4476 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp4475 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4475 ]
  call  __ASTTranslator__error$1

l4473:

l4470:

l4467:

l4464:

l4460:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4456 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4461 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4474 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4475 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4476 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4477 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4478 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret


  restore this
  restore name
  restore symbolInfo
  restore kind
  restore id
  restore tmp4456
  restore tmp4457
  restore tmp4458
  restore tmp4461
  restore tmp4462
  restore tmp4465
  restore tmp4468
  restore tmp4471
  restore tmp4474
  restore tmp4475
  restore tmp4476
  restore tmp4477
  restore tmp4478

; -----------------------------------------------
; function __ASTTranslatorMIR0__assign$2
; -----------------------------------------------
__ASTTranslatorMIR0__assign$2_vcall:
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR0__assign$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 11 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  symbolInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 6 )
  id EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  tmp4479 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp4484 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4494 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4495 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4496 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4497 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  kind EQU rbp - 172 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  tmp4480 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp4481 EQU rbp - 180 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4485 EQU rbp - 184 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4488 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4491 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [symbolInfo + Variant_t.type], eax
  mov [id + Variant_t.type], eax
  mov [tmp4479 + Variant_t.type], eax
  mov [tmp4484 + Variant_t.type], eax
  mov [tmp4494 + Variant_t.type], eax
  mov [tmp4495 + Variant_t.type], eax
  mov [tmp4496 + Variant_t.type], eax
  mov [tmp4497 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4479 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4479 ]
  lea rdx , [ name ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6690
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6690:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4479 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4479 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4479 + Variant_t.value]
  mov dword [ kind ], eax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4480 ], 1

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4480 ]
  jnz l4482

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4484 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4484 ]
  lea rdx , [ id ]
  lea  rax , [ tmp4479 ]
  mov  r10d, 122
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6691
  movsxd rax, dword [ tmp4479 + Variant_t.value ]
  mov    qword [ tmp4479 + Variant_t.value ], rax
l6691:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4479 ]
  call  __MOLD_VariantStoreAtKey

  jmp l4483

l4482:

  mov dword [ tmp4480 ], 2

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4480 ]
  jnz l4486

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4484 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4484 ]
  lea rdx , [ id ]
  lea  rax , [ tmp4479 ]
  mov  r10d, 123
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6692
  movsxd rax, dword [ tmp4479 + Variant_t.value ]
  mov    qword [ tmp4479 + Variant_t.value ], rax
l6692:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4479 ]
  call  __MOLD_VariantStoreAtKey

  jmp l4487

l4486:

  mov dword [ tmp4480 ], 3

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4480 ]
  jnz l4489

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4484 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4484 ]
  lea rdx , [ id ]
  lea  rax , [ tmp4479 ]
  mov  r10d, 124
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6693
  movsxd rax, dword [ tmp4479 + Variant_t.value ]
  mov    qword [ tmp4479 + Variant_t.value ], rax
l6693:


  jmp l4490

l4489:

  mov dword [ tmp4480 ], 4

  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4480 ]
  jnz l4492

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4484 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4484 ]
  lea  rax , [ tmp4479 ]
  mov  r10d, 125
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6694
  movsxd rax, dword [ tmp4479 + Variant_t.value ]
  mov    qword [ tmp4479 + Variant_t.value ], rax
l6694:


  jmp l4493

l4492:

  lea  rcx, [ tmp4497 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal569 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4497 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4496 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4497 ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4496 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp4484 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ kind ]
  mov [ tmp4484 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4484 ]
  push rdi
  lea  rdi , [ tmp4479 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4495 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4496 ]
  lea  rdx , [ tmp4479 ]
  lea  r8 , [ tmp4495 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4494 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4495 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp4494 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4494 ]
  call  __ASTTranslator__error$1

l4493:

l4490:

l4487:

l4483:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4479 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4484 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4494 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4495 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4496 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4497 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret


  restore this
  restore name
  restore symbolInfo
  restore kind
  restore id
  restore tmp4479
  restore tmp4480
  restore tmp4481
  restore tmp4484
  restore tmp4485
  restore tmp4488
  restore tmp4491
  restore tmp4494
  restore tmp4495
  restore tmp4496
  restore tmp4497

; -----------------------------------------------
; function __ASTTranslatorMIR0__syscall$4
; -----------------------------------------------
__ASTTranslatorMIR0__syscall$4_vcall:
  ; skipped unused parameter [ params ]
__ASTTranslatorMIR0__syscall$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  id EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4498 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4499 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4500 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  ; skipped unused param [ params ]
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [tmp4498 + Variant_t.type], eax
  mov [tmp4499 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4499 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4499 ]
  lea rdx , [ id ]
  lea r8 , [ paramsCnt ]
  lea  rax , [ tmp4498 ]
  mov  r10d, 117
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6695
  movsxd rax, dword [ tmp4498 + Variant_t.value ]
  mov    qword [ tmp4498 + Variant_t.value ], rax
l6695:


  cmp [ rv + Variant_t.type ], 0
  jnz l4501

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4499 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4499 ]
  lea  rax , [ tmp4498 ]
  mov  r10d, 126
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6696
  movsxd rax, dword [ tmp4498 + Variant_t.value ]
  mov    qword [ tmp4498 + Variant_t.value ], rax
l6696:


l4501:

l4502:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4498 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4499 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore rv
  restore id
  restore paramsCnt
  restore tmp4498
  restore tmp4499
  restore tmp4500

; -----------------------------------------------
; function __ASTTranslatorMIR0__call$4
; -----------------------------------------------
__ASTTranslatorMIR0__call$4_vcall:
  ; skipped unused parameter [ params ]
  ; skipped unused parameter [ paramsCnt ]
__ASTTranslatorMIR0__call$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  proto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4503 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4504 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4505 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]
  xor eax, eax
  mov [tmp4503 + Variant_t.type], eax
  mov [tmp4504 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4504 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4504 ]
  lea rdx , [ proto ]
  lea  rax , [ tmp4503 ]
  mov  r10d, 127
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6697
  movsxd rax, dword [ tmp4503 + Variant_t.value ]
  mov    qword [ tmp4503 + Variant_t.value ], rax
l6697:


  cmp [ rv + Variant_t.type ], 0
  jnz l4506

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4504 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4504 ]
  lea  rax , [ tmp4503 ]
  mov  r10d, 126
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6698
  movsxd rax, dword [ tmp4503 + Variant_t.value ]
  mov    qword [ tmp4503 + Variant_t.value ], rax
l6698:


l4506:

l4507:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4503 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4504 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore rv
  restore proto
  restore tmp4503
  restore tmp4504
  restore tmp4505

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadFromIndex$3
; -----------------------------------------------
__ASTTranslatorMIR0__loadFromIndex$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedIdx ]
__ASTTranslatorMIR0__loadFromIndex$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4508 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4509 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  xor eax, eax
  mov [tmp4508 + Variant_t.type], eax
  mov [tmp4509 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4509 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4509 ]
  lea  rax , [ tmp4508 ]
  mov  r10d, 128
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6699
  movsxd rax, dword [ tmp4508 + Variant_t.value ]
  mov    qword [ tmp4508 + Variant_t.value ], rax
l6699:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4508 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4509 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4508
  restore tmp4509

; -----------------------------------------------
; function __ASTTranslatorMIR0__loadFromKey$3
; -----------------------------------------------
__ASTTranslatorMIR0__loadFromKey$3_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedKey ]
__ASTTranslatorMIR0__loadFromKey$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4510 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4511 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  xor eax, eax
  mov [tmp4510 + Variant_t.type], eax
  mov [tmp4511 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4511 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4511 ]
  lea  rax , [ tmp4510 ]
  mov  r10d, 129
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6700
  movsxd rax, dword [ tmp4510 + Variant_t.value ]
  mov    qword [ tmp4510 + Variant_t.value ], rax
l6700:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4510 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4511 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4510
  restore tmp4511

; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtIndex$3
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtIndex$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedIdx ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR0__storeAtIndex$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4512 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4513 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [tmp4512 + Variant_t.type], eax
  mov [tmp4513 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4513 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4513 ]
  lea  rax , [ tmp4512 ]
  mov  r10d, 130
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6701
  movsxd rax, dword [ tmp4512 + Variant_t.value ]
  mov    qword [ tmp4512 + Variant_t.value ], rax
l6701:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4512 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4512
  restore tmp4513

; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtKey$3
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtKey$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedKey ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR0__storeAtKey$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4514 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4515 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [tmp4514 + Variant_t.type], eax
  mov [tmp4515 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4515 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4515 ]
  lea  rax , [ tmp4514 ]
  mov  r10d, 131
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6702
  movsxd rax, dword [ tmp4514 + Variant_t.value ]
  mov    qword [ tmp4514 + Variant_t.value ], rax
l6702:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4514 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4515 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4514
  restore tmp4515

; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtIndexAndDrop$3
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtIndexAndDrop$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedIdx ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR0__storeAtIndexAndDrop$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  __cse32 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4516 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [__cse32 + Variant_t.type], eax
  mov [tmp4516 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ __cse32 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse32 ]
  lea  rax , [ tmp4516 ]
  mov  r10d, 130
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6703
  movsxd rax, dword [ tmp4516 + Variant_t.value ]
  mov    qword [ tmp4516 + Variant_t.value ], rax
l6703:


  lea rcx , [ __cse32 ]
  lea  rax , [ tmp4516 ]
  mov  r10d, 126
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6704
  movsxd rax, dword [ tmp4516 + Variant_t.value ]
  mov    qword [ tmp4516 + Variant_t.value ], rax
l6704:



  ; clean frame
  ; -----------
  lea  rcx, [ __cse32 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4516 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore __cse32
  restore tmp4516

; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtKeyAndDrop$3
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtKeyAndDrop$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedKey ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR0__storeAtKeyAndDrop$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  __cse33 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4517 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [__cse33 + Variant_t.type], eax
  mov [tmp4517 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ __cse33 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse33 ]
  lea  rax , [ tmp4517 ]
  mov  r10d, 131
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6705
  movsxd rax, dword [ tmp4517 + Variant_t.value ]
  mov    qword [ tmp4517 + Variant_t.value ], rax
l6705:


  lea rcx , [ __cse33 ]
  lea  rax , [ tmp4517 ]
  mov  r10d, 126
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6706
  movsxd rax, dword [ tmp4517 + Variant_t.value ]
  mov    qword [ tmp4517 + Variant_t.value ], rax
l6706:



  ; clean frame
  ; -----------
  lea  rcx, [ __cse33 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4517 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore __cse33
  restore tmp4517

; -----------------------------------------------
; function __ASTTranslatorMIR0__createObject$2
; -----------------------------------------------
__ASTTranslatorMIR0__createObject$2_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslatorMIR0__createObject$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  classProto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4518 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4519 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  xor eax, eax
  mov [tmp4518 + Variant_t.type], eax
  mov [tmp4519 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4519 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4519 ]
  lea rdx , [ classProto ]
  lea  rax , [ tmp4518 ]
  mov  r10d, 132
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6707
  movsxd rax, dword [ tmp4518 + Variant_t.value ]
  mov    qword [ tmp4518 + Variant_t.value ], rax
l6707:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4519 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore classProto
  restore tmp4518
  restore tmp4519

; -----------------------------------------------
; function __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3
; -----------------------------------------------
__ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 12 )
  leftAst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rightAst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  endLabelId EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  x EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  y EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  __cse34 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4520 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4522 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4521 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  xor eax, eax
  mov [endLabelId + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [__cse34 + Variant_t.type], eax
  mov [tmp4520 + Variant_t.type], eax
  mov [tmp4522 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ __cse34 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse34 ]
  lea  rax , [ endLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6708
  movsxd rax, dword [ endLabelId + Variant_t.value ]
  mov    qword [ endLabelId + Variant_t.value ], rax
l6708:


  mov dword [ tmp4521 ], 0

  mov eax, dword [ tmp4521 ]
  mov [ tmp4522 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4522 + Variant_t.value], rax

  lea rcx , [ __cse34 ]
  lea rdx , [ tmp4522 ]
  lea  rax , [ tmp4520 ]
  mov  r10d, 110
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6709
  movsxd rax, dword [ tmp4520 + Variant_t.value ]
  mov    qword [ tmp4520 + Variant_t.value ], rax
l6709:


  lea rcx , [ this ]
  lea rdx , [ leftAst ]
  lea  rax , [ x ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4522 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4522 ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4520 ]
  mov  r10d, 134
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6710
  movsxd rax, dword [ tmp4520 + Variant_t.value ]
  mov    qword [ tmp4520 + Variant_t.value ], rax
l6710:


  lea rcx , [ this ]
  lea rdx , [ rightAst ]
  lea  rax , [ y ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4522 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4522 ]
  lea  rax , [ tmp4520 ]
  mov  r10d, 135
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6711
  movsxd rax, dword [ tmp4520 + Variant_t.value ]
  mov    qword [ tmp4520 + Variant_t.value ], rax
l6711:


  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4522 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4522 ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4520 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6712
  movsxd rax, dword [ tmp4520 + Variant_t.value ]
  mov    qword [ tmp4520 + Variant_t.value ], rax
l6712:



  ; clean frame
  ; -----------
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse34 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4520 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4522 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore leftAst
  restore rightAst
  restore endLabelId
  restore x
  restore y
  restore __cse34
  restore tmp4520
  restore tmp4521
  restore tmp4522

; -----------------------------------------------
; function __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3
; -----------------------------------------------
__ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3_vcall:
  ; skipped unused parameter [ rv ]
__ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 12 )
  leftAst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rightAst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  endLabelId EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  x EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  y EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  __cse35 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4523 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4525 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4524 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  xor eax, eax
  mov [endLabelId + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [__cse35 + Variant_t.type], eax
  mov [tmp4523 + Variant_t.type], eax
  mov [tmp4525 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ __cse35 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse35 ]
  lea  rax , [ endLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6713
  movsxd rax, dword [ endLabelId + Variant_t.value ]
  mov    qword [ endLabelId + Variant_t.value ], rax
l6713:


  mov dword [ tmp4524 ], 1

  mov eax, dword [ tmp4524 ]
  mov [ tmp4525 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4525 + Variant_t.value], rax

  lea rcx , [ __cse35 ]
  lea rdx , [ tmp4525 ]
  lea  rax , [ tmp4523 ]
  mov  r10d, 110
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6714
  movsxd rax, dword [ tmp4523 + Variant_t.value ]
  mov    qword [ tmp4523 + Variant_t.value ], rax
l6714:


  lea rcx , [ this ]
  lea rdx , [ leftAst ]
  lea  rax , [ x ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4525 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4525 ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4523 ]
  mov  r10d, 137
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6715
  movsxd rax, dword [ tmp4523 + Variant_t.value ]
  mov    qword [ tmp4523 + Variant_t.value ], rax
l6715:


  lea rcx , [ this ]
  lea rdx , [ rightAst ]
  lea  rax , [ y ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4525 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4525 ]
  lea  rax , [ tmp4523 ]
  mov  r10d, 135
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6716
  movsxd rax, dword [ tmp4523 + Variant_t.value ]
  mov    qword [ tmp4523 + Variant_t.value ], rax
l6716:


  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4525 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4525 ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4523 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6717
  movsxd rax, dword [ tmp4523 + Variant_t.value ]
  mov    qword [ tmp4523 + Variant_t.value ], rax
l6717:



  ; clean frame
  ; -----------
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse35 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4523 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4525 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore leftAst
  restore rightAst
  restore endLabelId
  restore x
  restore y
  restore __cse35
  restore tmp4523
  restore tmp4524
  restore tmp4525

; -----------------------------------------------
; function __ASTTranslatorMIR0__invokeMethod$4
; -----------------------------------------------
__ASTTranslatorMIR0__invokeMethod$4_vcall:
  ; skipped unused parameter [ rv ]
  ; skipped unused parameter [ params ]
__ASTTranslatorMIR0__invokeMethod$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  methodName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4526 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4527 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ methodName ], xmm0
  ; skipped unused param [ params ]
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [tmp4526 + Variant_t.type], eax
  mov [tmp4527 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4527 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4527 ]
  lea rdx , [ methodName ]
  lea r8 , [ paramsCnt ]
  lea  rax , [ tmp4526 ]
  mov  r10d, 138
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6718
  movsxd rax, dword [ tmp4526 + Variant_t.value ]
  mov    qword [ tmp4526 + Variant_t.value ], rax
l6718:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4526 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4527 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore methodName
  restore paramsCnt
  restore tmp4526
  restore tmp4527

; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeFor$5
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeFor$5_vcall:
  ; skipped unused parameter [ valueStart ]
  ; skipped unused parameter [ valueEnd ]
  ; skipped unused parameter [ valueStep ]
__ASTTranslatorMIR0__executeNodeFor$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  iterName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  bodyAst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolTable EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  code EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 15 )
  loopLabelId EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  endLabelId EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  iterSymbolInfo EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  iterId EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmp4528 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 13 , readHits= 13 )
  tmp4530 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4529 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iterName ], xmm0
  ; skipped unused param [ valueStart ]
  ; skipped unused param [ valueEnd ]
  ; skipped unused param [ valueStep ]
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  xor eax, eax
  mov [symbolTable + Variant_t.type], eax
  mov [code + Variant_t.type], eax
  mov [loopLabelId + Variant_t.type], eax
  mov [endLabelId + Variant_t.type], eax
  mov [iterSymbolInfo + Variant_t.type], eax
  mov [iterId + Variant_t.type], eax
  mov [tmp4528 + Variant_t.type], eax
  mov [tmp4530 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ code ]
  lea  rax , [ loopLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6719
  movsxd rax, dword [ loopLabelId + Variant_t.value ]
  mov    qword [ loopLabelId + Variant_t.value ], rax
l6719:


  lea rcx , [ code ]
  lea  rax , [ endLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6720
  movsxd rax, dword [ endLabelId + Variant_t.value ]
  mov    qword [ endLabelId + Variant_t.value ], rax
l6720:


  lea rcx , [ symbolTable ]
  lea rdx , [ iterName ]
  lea  rax , [ iterSymbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6721
  movsxd rax, dword [ iterSymbolInfo + Variant_t.value ]
  mov    qword [ iterSymbolInfo + Variant_t.value ], rax
l6721:


  lea  rcx , [ iterSymbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4528 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ code ]
  lea rdx , [ tmp4528 ]
  lea  rax , [ iterId ]
  mov  r10d, 122
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6722
  movsxd rax, dword [ iterId + Variant_t.value ]
  mov    qword [ iterId + Variant_t.value ], rax
l6722:


  lea  rcx , [ iterSymbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ iterId ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ code ]
  lea rdx , [ loopLabelId ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6723
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6723:


  lea rcx , [ code ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 139
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6724
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6724:


  lea rcx , [ code ]
  lea rdx , [ iterId ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 118
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6725
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6725:


  lea rcx , [ code ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 114
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6726
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6726:


  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 137
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6727
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6727:


  lea rcx , [ this ]
  lea rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$1

  lea rcx , [ code ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 140
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6728
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6728:


  lea rcx , [ code ]
  lea rdx , [ iterId ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 118
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6729
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6729:


  lea rcx , [ code ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 101
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6730
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6730:


  lea rcx , [ code ]
  lea rdx , [ iterId ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 122
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6731
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6731:


  lea rcx , [ code ]
  lea rdx , [ loopLabelId ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 141
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6732
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6732:


  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6733
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6733:


  mov dword [ tmp4529 ], 2

  mov [ tmp4530 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4529 ]
  mov [ tmp4530 + Variant_t.value], rax

  lea rcx , [ code ]
  lea rdx , [ tmp4530 ]
  lea  rax , [ tmp4528 ]
  mov  r10d, 142
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6734
  movsxd rax, dword [ tmp4528 + Variant_t.value ]
  mov    qword [ tmp4528 + Variant_t.value ], rax
l6734:



  ; clean frame
  ; -----------
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterSymbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4528 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4530 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret


  restore this
  restore iterName
  restore bodyAst
  restore symbolTable
  restore code
  restore loopLabelId
  restore endLabelId
  restore iterSymbolInfo
  restore iterId
  restore tmp4528
  restore tmp4529
  restore tmp4530

; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeForEach$5
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeForEach$5_vcall:
  ; skipped unused parameter [ box ]
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_BOOLEAN
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__ASTTranslatorMIR0__executeNodeForEach$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  iteratorKey EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  iteratorValue EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  bodyAst EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  symbolTable EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  code EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 11 )
  loopLabelId EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  endLabelId EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  keyId EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  valueId EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  bodyIp EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp4531 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  symbolInfo EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  isMapMode EQU rbp - 220 ; 4 bytes, (kind= 3 , type= bool32 , writeHits= 0 , readHits= 1 )
  tmp4532 EQU rbp - 224 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4537 EQU rbp - 228 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iteratorKey ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ iteratorValue ], xmm0
  ; skipped unused param [ box ]
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ isMapMode ], eax
  xor eax, eax
  mov [symbolTable + Variant_t.type], eax
  mov [code + Variant_t.type], eax
  mov [loopLabelId + Variant_t.type], eax
  mov [endLabelId + Variant_t.type], eax
  mov [keyId + Variant_t.type], eax
  mov [valueId + Variant_t.type], eax
  mov [bodyIp + Variant_t.type], eax
  mov [tmp4531 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ code ]
  lea  rax , [ loopLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6735
  movsxd rax, dword [ loopLabelId + Variant_t.value ]
  mov    qword [ loopLabelId + Variant_t.value ], rax
l6735:


  lea rcx , [ code ]
  lea  rax , [ endLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6736
  movsxd rax, dword [ endLabelId + Variant_t.value ]
  mov    qword [ endLabelId + Variant_t.value ], rax
l6736:


  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy

  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy

  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4531 ]
  mov  r10d, 141
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6737
  movsxd rax, dword [ tmp4531 + Variant_t.value ]
  mov    qword [ tmp4531 + Variant_t.value ], rax
l6737:


  cmp [ iteratorKey  + Variant_t.type], 0
  jz l4533

  lea rcx , [ symbolTable ]
  lea rdx , [ iteratorKey ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6738
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6738:


  lea rcx , [ code ]
  lea  rax , [ keyId ]
  mov  r10d, 143
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6739
  movsxd rax, dword [ keyId + Variant_t.value ]
  mov    qword [ keyId + Variant_t.value ], rax
l6739:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ keyId ]
  call  __MOLD_VariantStoreAtKey

l4533:

l4534:

  cmp [ iteratorValue  + Variant_t.type], 0
  jz l4535

  lea rcx , [ symbolTable ]
  lea rdx , [ iteratorValue ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6740
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6740:


  lea rcx , [ code ]
  lea  rax , [ valueId ]
  mov  r10d, 143
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6741
  movsxd rax, dword [ valueId + Variant_t.value ]
  mov    qword [ valueId + Variant_t.value ], rax
l6741:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantStoreAtKey

l4535:

l4536:

  lea rcx , [ code ]
  lea rdx , [ loopLabelId ]
  lea  rax , [ tmp4531 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6742
  movsxd rax, dword [ tmp4531 + Variant_t.value ]
  mov    qword [ tmp4531 + Variant_t.value ], rax
l6742:


  lea rcx , [ this ]
  lea rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$1

  lea rcx , [ code ]
  lea  rax , [ tmp4531 ]
  mov  r10d, 144
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6743
  movsxd rax, dword [ tmp4531 + Variant_t.value ]
  mov    qword [ tmp4531 + Variant_t.value ], rax
l6743:


  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4531 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6744
  movsxd rax, dword [ tmp4531 + Variant_t.value ]
  mov    qword [ tmp4531 + Variant_t.value ], rax
l6744:


  lea rcx , [ code ]
  lea rdx , [ loopLabelId ]
  lea  rax , [ bodyIp ]
  mov  r10d, 145
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6745
  movsxd rax, dword [ bodyIp + Variant_t.value ]
  mov    qword [ bodyIp + Variant_t.value ], rax
l6745:


  mov dword [ tmp4537 ], 1

  mov eax, dword [ isMapMode ]
  cmp eax, dword [ tmp4537 ]
  jnz l4538

  lea rcx , [ code ]
  lea rdx , [ keyId ]
  lea r8 , [ valueId ]
  lea r9 , [ bodyIp ]
  lea  rax , [ tmp4531 ]
  mov  r10d, 146
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6746
  movsxd rax, dword [ tmp4531 + Variant_t.value ]
  mov    qword [ tmp4531 + Variant_t.value ], rax
l6746:


  jmp l4539

l4538:

  lea rcx , [ code ]
  lea rdx , [ keyId ]
  lea r8 , [ valueId ]
  lea r9 , [ bodyIp ]
  lea  rax , [ tmp4531 ]
  mov  r10d, 147
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6747
  movsxd rax, dword [ tmp4531 + Variant_t.value ]
  mov    qword [ tmp4531 + Variant_t.value ], rax
l6747:


l4539:


  ; clean frame
  ; -----------
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyIp ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4531 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret


  restore this
  restore iteratorKey
  restore iteratorValue
  restore bodyAst
  restore isMapMode
  restore symbolTable
  restore code
  restore loopLabelId
  restore endLabelId
  restore keyId
  restore valueId
  restore bodyIp
  restore tmp4531
  restore tmp4532
  restore symbolInfo
  restore tmp4537

; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeWhile$2
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeWhile$2_vcall:
__ASTTranslatorMIR0__executeNodeWhile$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  condAst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  bodyAst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  code EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  loopLabelId EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  endLabelId EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  cond EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  tmp4540 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ condAst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ bodyAst ], xmm0
  xor eax, eax
  mov [code + Variant_t.type], eax
  mov [loopLabelId + Variant_t.type], eax
  mov [endLabelId + Variant_t.type], eax
  mov [cond + Variant_t.type], eax
  mov [tmp4540 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ code ]
  lea  rax , [ loopLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6748
  movsxd rax, dword [ loopLabelId + Variant_t.value ]
  mov    qword [ loopLabelId + Variant_t.value ], rax
l6748:


  lea rcx , [ code ]
  lea  rax , [ endLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6749
  movsxd rax, dword [ endLabelId + Variant_t.value ]
  mov    qword [ endLabelId + Variant_t.value ], rax
l6749:


  lea rcx , [ code ]
  lea rdx , [ loopLabelId ]
  lea  rax , [ tmp4540 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6750
  movsxd rax, dword [ tmp4540 + Variant_t.value ]
  mov    qword [ tmp4540 + Variant_t.value ], rax
l6750:


  lea rcx , [ this ]
  lea rdx , [ condAst ]
  lea  rax , [ cond ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4540 ]
  mov  r10d, 134
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6751
  movsxd rax, dword [ tmp4540 + Variant_t.value ]
  mov    qword [ tmp4540 + Variant_t.value ], rax
l6751:


  lea rcx , [ this ]
  lea rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$1

  lea rcx , [ code ]
  lea rdx , [ loopLabelId ]
  lea  rax , [ tmp4540 ]
  mov  r10d, 141
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6752
  movsxd rax, dword [ tmp4540 + Variant_t.value ]
  mov    qword [ tmp4540 + Variant_t.value ], rax
l6752:


  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4540 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6753
  movsxd rax, dword [ tmp4540 + Variant_t.value ]
  mov    qword [ tmp4540 + Variant_t.value ], rax
l6753:



  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4540 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore condAst
  restore bodyAst
  restore code
  restore loopLabelId
  restore endLabelId
  restore cond
  restore tmp4540

; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeIf$3
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeIf$3_vcall:
  ; skipped unused parameter [ cond ]
__ASTTranslatorMIR0__executeNodeIf$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  codeIfTrue EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  codeIfFalse EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  code EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  falseLabelId EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  endLabelId EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp4541 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4542 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ cond ]
  movdqu xmm0 , [ r8 ]
  movdqu [ codeIfTrue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ codeIfFalse ], xmm0
  xor eax, eax
  mov [code + Variant_t.type], eax
  mov [falseLabelId + Variant_t.type], eax
  mov [endLabelId + Variant_t.type], eax
  mov [tmp4541 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ code ]
  lea  rax , [ falseLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6754
  movsxd rax, dword [ falseLabelId + Variant_t.value ]
  mov    qword [ falseLabelId + Variant_t.value ], rax
l6754:


  lea rcx , [ code ]
  lea  rax , [ endLabelId ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6755
  movsxd rax, dword [ endLabelId + Variant_t.value ]
  mov    qword [ endLabelId + Variant_t.value ], rax
l6755:


  lea rcx , [ code ]
  lea rdx , [ falseLabelId ]
  lea  rax , [ tmp4541 ]
  mov  r10d, 134
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6756
  movsxd rax, dword [ tmp4541 + Variant_t.value ]
  mov    qword [ tmp4541 + Variant_t.value ], rax
l6756:


  lea rcx , [ this ]
  lea rdx , [ codeIfTrue ]
  call  __ASTTranslator__executeNode$1

  cmp [ codeIfFalse  + Variant_t.type], 0
  jz l4543

  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4541 ]
  mov  r10d, 141
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6757
  movsxd rax, dword [ tmp4541 + Variant_t.value ]
  mov    qword [ tmp4541 + Variant_t.value ], rax
l6757:


  lea rcx , [ code ]
  lea rdx , [ falseLabelId ]
  lea  rax , [ tmp4541 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6758
  movsxd rax, dword [ tmp4541 + Variant_t.value ]
  mov    qword [ tmp4541 + Variant_t.value ], rax
l6758:


  lea rcx , [ this ]
  lea rdx , [ codeIfFalse ]
  call  __ASTTranslator__executeNode$1

  jmp l4544

l4543:

  lea rcx , [ code ]
  lea rdx , [ falseLabelId ]
  lea  rax , [ tmp4541 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6759
  movsxd rax, dword [ tmp4541 + Variant_t.value ]
  mov    qword [ tmp4541 + Variant_t.value ], rax
l6759:


l4544:

  lea rcx , [ code ]
  lea rdx , [ endLabelId ]
  lea  rax , [ tmp4541 ]
  mov  r10d, 136
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6760
  movsxd rax, dword [ tmp4541 + Variant_t.value ]
  mov    qword [ tmp4541 + Variant_t.value ], rax
l6760:



  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ falseLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4541 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore codeIfTrue
  restore codeIfFalse
  restore code
  restore falseLabelId
  restore endLabelId
  restore tmp4541
  restore tmp4542

; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodePrint$1
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodePrint$1_vcall:
__ASTTranslatorMIR0__executeNodePrint$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  children EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  params EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmp4547 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  childNode EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  oneParam EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4550 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4551 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  mov [tmp4547 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp4550 + Variant_t.type], eax
  mov [tmp4551 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l4546

l4545:

  lea rcx , [ this ]
  lea rdx , [ childNode ]
  lea  rax , [ tmp4547 ]
  call  __ASTTranslator__evaluateNode$1

  ; __mold_syscall( 50 )
  lea rcx , [ params ]
  lea rdx , [ tmp4547 ]
  call qword [rbx + 8 * 50 ]

  ret

l4546:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l4545 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys undefined values oneParam
; 
  jmp l4549

l4548:

  lea rcx , [ this ]
  lea rdx , [ oneParam ]
  call  __ASTTranslator__releaseTempVar$1

  ret

l4549:

  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4548 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4550 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp4551 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx , [ tmp4550 ]
  lea rdx , [ tmp4551 ]
  lea  rax , [ tmp4547 ]
  mov  r10d, 148
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6761
  movsxd rax, dword [ tmp4547 + Variant_t.value ]
  mov    qword [ tmp4547 + Variant_t.value ], rax
l6761:



  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4547 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  ; Skipped loop iterator oneParam
  lea  rcx, [ tmp4550 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4551 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore node
  restore children
  restore params
  restore tmp4547
  restore childNode
  restore oneParam
  restore tmp4550
  restore tmp4551

; -----------------------------------------------
; function __ASTTranslatorMIR0__declareFunction$2
; -----------------------------------------------
__ASTTranslatorMIR0__declareFunction$2_vcall:
  ; skipped unused parameter [ funcName ]
__ASTTranslatorMIR0__declareFunction$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  funcProto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 1 )
  tmp4552 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4553 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ funcName ]
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  xor eax, eax
  mov [tmp4552 + Variant_t.type], eax
  mov [tmp4553 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4553 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4553 ]
  lea  rax , [ tmp4552 ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6762
  movsxd rax, dword [ tmp4552 + Variant_t.value ]
  mov    qword [ tmp4552 + Variant_t.value ], rax
l6762:


  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4552 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4552 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4553 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore funcProto
  restore tmp4552
  restore tmp4553

; -----------------------------------------------
; function __ASTTranslatorMIR0__declareClass$2
; -----------------------------------------------
__ASTTranslatorMIR0__declareClass$2_vcall:
  ; skipped unused parameter [ className ]
__ASTTranslatorMIR0__declareClass$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  classProto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4554 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4555 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ className ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  xor eax, eax
  mov [tmp4554 + Variant_t.type], eax
  mov [tmp4555 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4555 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4555 ]
  lea rdx , [ classProto ]
  lea  rax , [ tmp4554 ]
  mov  r10d, 149
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6763
  movsxd rax, dword [ tmp4554 + Variant_t.value ]
  mov    qword [ tmp4554 + Variant_t.value ], rax
l6763:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4554 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4555 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore classProto
  restore tmp4554
  restore tmp4555

; -----------------------------------------------
; function __ASTTranslatorMIR0__emitFunctionBody$2
; -----------------------------------------------
__ASTTranslatorMIR0__emitFunctionBody$2_vcall:
__ASTTranslatorMIR0__emitFunctionBody$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 9 )
  funcName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  funcProto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 11 )
  params EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  codeAst EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  rvName EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  code EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 9 )
  oldSymbolTable EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  labelId EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4556 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp4558 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4559 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4563 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  item EQU rbp - 248 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  paramsCnt EQU rbp - 252 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 4 )
  tmp4557 EQU rbp - 256 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp4560 EQU rbp - 260 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  xor eax, eax
  mov [params + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [codeAst + Variant_t.type], eax
  mov [rvName + Variant_t.type], eax
  mov [code + Variant_t.type], eax
  mov [oldSymbolTable + Variant_t.type], eax
  mov [labelId + Variant_t.type], eax
  mov [tmp4556 + Variant_t.type], eax
  mov [tmp4558 + Variant_t.type], eax
  mov [tmp4559 + Variant_t.type], eax
  mov [tmp4563 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp4556 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp4556 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4556 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4557 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4557 ]
  lea  r8 , [ codeAst ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4556 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4556 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ code ]
  lea  rax , [ labelId ]
  mov  r10d, 150
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6764
  movsxd rax, dword [ labelId + Variant_t.value ]
  mov    qword [ labelId + Variant_t.value ], rax
l6764:


  lea rcx , [ code ]
  lea rdx , [ labelId ]
  lea  rax , [ tmp4556 ]
  mov  r10d, 145
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6765
  movsxd rax, dword [ tmp4556 + Variant_t.value ]
  mov    qword [ tmp4556 + Variant_t.value ], rax
l6765:


  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal573 ]
  lea  r8 , [ tmp4556 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ code ]
; WARNING: Failed to get variable size: __literal574
  lea rdx , [ __literal574 ]
  lea  rax , [ tmp4556 ]
  mov  r10d, 151
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6766
  movsxd rax, dword [ tmp4556 + Variant_t.value ]
  mov    qword [ tmp4556 + Variant_t.value ], rax
l6766:


  lea  rcx, [ tmp4558 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal431 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4558 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ code ]
  lea rdx , [ tmp4558 ]
  lea  rax , [ tmp4556 ]
  mov  r10d, 151
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6767
  movsxd rax, dword [ tmp4556 + Variant_t.value ]
  mov    qword [ tmp4556 + Variant_t.value ], rax
l6767:


  lea rcx , [ code ]
; WARNING: Failed to get variable size: __literal574
  lea rdx , [ __literal574 ]
  lea  rax , [ tmp4556 ]
  mov  r10d, 151
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6768
  movsxd rax, dword [ tmp4556 + Variant_t.value ]
  mov    qword [ tmp4556 + Variant_t.value ], rax
l6768:


  mov [ tmp4559 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp4559 + Variant_t.value], rax

  lea rcx , [ code ]
  lea rdx , [ funcName ]
  lea r8 , [ params ]
  lea r9 , [ tmp4559 ]
  lea rax, [ rvName ]
  push rax
  lea  rax , [ tmp4556 ]
  mov  r10d, 152
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6769
  movsxd rax, dword [ tmp4556 + Variant_t.value ]
  mov    qword [ tmp4556 + Variant_t.value ], rax
l6769:

  add rsp, 8

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp4556 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4556  + Variant_t.type], 0
  jz l4561

  mov dword [ tmp4557 ], 1

  mov eax, dword [ paramsCnt ]
  add eax, dword [ tmp4557 ]
  mov dword [ paramsCnt ], eax

l4561:

l4562:

  mov [ tmp4563 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp4563 + Variant_t.value], rax

  lea rcx , [ code ]
  lea rdx , [ tmp4563 ]
  lea  rax , [ tmp4559 ]
  mov  r10d, 153
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6770
  movsxd rax, dword [ tmp4559 + Variant_t.value ]
  mov    qword [ tmp4559 + Variant_t.value ], rax
l6770:


  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4559 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l4565

l4564:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __ASTTranslator__executeNode$1

  ret

l4565:

  lea  rcx , [ tmp4559 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4564 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  mov [ tmp4563 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp4563 + Variant_t.value], rax

  lea rcx , [ code ]
  lea rdx , [ tmp4563 ]
  lea  rax , [ tmp4559 ]
  mov  r10d, 154
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6771
  movsxd rax, dword [ tmp4559 + Variant_t.value ]
  mov    qword [ tmp4559 + Variant_t.value ], rax
l6771:


  lea rcx , [ code ]
  lea  rax , [ tmp4559 ]
  mov  r10d, 155
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6772
  movsxd rax, dword [ tmp4559 + Variant_t.value ]
  mov    qword [ tmp4559 + Variant_t.value ], rax
l6772:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4556 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4558 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4559 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4563 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 288
  pop  rbp
  ret


  restore this
  restore funcName
  restore funcProto
  restore params
  restore paramsCnt
  restore children
  restore codeAst
  restore rvName
  restore code
  restore oldSymbolTable
  restore labelId
  restore tmp4556
  restore tmp4557
  restore tmp4558
  restore tmp4559
  restore tmp4560
  restore tmp4563
  restore item

; -----------------------------------------------
; function __ASTTranslatorMIR0__dropRetVal$0
; -----------------------------------------------
__ASTTranslatorMIR0__dropRetVal$0_vcall:
__ASTTranslatorMIR0__dropRetVal$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4566 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4567 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4566 + Variant_t.type], eax
  mov [tmp4567 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4567 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4567 ]
  lea  rax , [ tmp4566 ]
  mov  r10d, 126
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6773
  movsxd rax, dword [ tmp4566 + Variant_t.value ]
  mov    qword [ tmp4566 + Variant_t.value ], rax
l6773:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4566 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4567 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4566
  restore tmp4567

; -----------------------------------------------
; function __ASTTranslatorMIR0_run$1
; -----------------------------------------------
__ASTTranslatorMIR0_run$1_vcall:
__ASTTranslatorMIR0_run$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp4568 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [tmp4568 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ ast ]
  call  __ASTTranslator__executeNode$1

  lea  rcx , [ ast ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4568 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4568 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  call  __ASTTranslator__emitGlobals$0


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4568 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore ast
  restore tmp4568

; -----------------------------------------------
; function __Stack_constructor$0
; -----------------------------------------------
__Stack_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  tmp4569 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4570 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4569 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4569 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp4570 ], 0

  mov [ tmp4569 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4570 ]
  mov [ tmp4569 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp4569
  restore tmp4570

; -----------------------------------------------
; function __Stack_getItems$0
; -----------------------------------------------
__Stack_getItems$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  data EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  size EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4576 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4571 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4572 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4573 EQU rbp - 84 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 88 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [data + Variant_t.type], eax
  mov [size + Variant_t.type], eax
  mov [tmp4576 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ data ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ size ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4571 ], 1

  cmp [ size + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ size + Variant_t.value]
  mov dword [ tmp4572 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp4573 .. tmp4572
; 
l4574:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4572 ]
  jge l4575

  lea  rcx , [ data ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4576 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ rv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4576 ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp4571 ]
  mov dword [ idx ], eax

  jmp l4574

l4575:

; 
; END: for idx in tmp4573 .. tmp4572 step tmp4571
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ data ]
  call __MOLD_VariantDestroy
  lea  rcx, [ size ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4576 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore data
  restore size
  restore tmp4571
  restore tmp4572
  restore tmp4573
  restore tmp4576
  restore idx

; -----------------------------------------------
; function __Stack_push$1
; -----------------------------------------------
__Stack_push$1_vcall:
__Stack_push$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 6 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4577 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4578 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4580 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4579 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp4577 + Variant_t.type], eax
  mov [tmp4578 + Variant_t.type], eax
  mov [tmp4580 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4577 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4578 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4578 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4578 + Variant_t.value]
  mov dword [ tmp4579 ], eax

  lea  rcx , [ tmp4577 ]
  lea  rdx , [ tmp4579 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4578 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4579 ], 1

  mov [ tmp4580 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4579 ]
  mov [ tmp4580 + Variant_t.value], rax

  lea  rcx , [ tmp4578 ]
  lea  rdx , [ tmp4580 ]
  lea  r8 , [ tmp4577 ]
  call  __MOLD_VariantAdd

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4577 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4577 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4578 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4580 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore x
  restore tmp4577
  restore tmp4578
  restore tmp4579
  restore tmp4580

; -----------------------------------------------
; function __Stack_pop$0
; -----------------------------------------------
__Stack_pop$0_vcall:
__Stack_pop$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 9 )
  tmp4582 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4584 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4587 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4581 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4583 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4582 + Variant_t.type], eax
  mov [tmp4584 + Variant_t.type], eax
  mov [tmp4587 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4582 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4583 ], 0

  mov [ tmp4584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4583 ]
  mov [ tmp4584 + Variant_t.value], rax

  lea rcx, [ tmp4582 ]
  lea rdx, [ tmp4584 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4585

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal578
  lea rcx , [ __literal578 ]
  call qword [rbx + 8 * 41 ]

  jmp l4586

l4585:

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4582 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4583 ], 1

  mov [ tmp4587 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4583 ]
  mov [ tmp4587 + Variant_t.value], rax

  lea  rcx , [ tmp4582 ]
  lea  rdx , [ tmp4587 ]
  lea  r8 , [ tmp4584 ]
  call  __MOLD_VariantSub

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4584 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4584 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4587 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4587 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4587 + Variant_t.value]
  mov dword [ tmp4583 ], eax

  lea  rcx , [ tmp4584 ]
  lea  rdx , [ tmp4583 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

l4586:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4582 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4584 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4587 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp4581
  restore tmp4582
  restore tmp4583
  restore tmp4584
  restore tmp4587

; -----------------------------------------------
; function __Stack_over$0
; -----------------------------------------------
__Stack_over$0_vcall:
__Stack_over$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  tmp4588 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4589 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4590 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4591 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4593 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4592 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4588 + Variant_t.type], eax
  mov [tmp4589 + Variant_t.type], eax
  mov [tmp4590 + Variant_t.type], eax
  mov [tmp4591 + Variant_t.type], eax
  mov [tmp4593 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4589 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4591 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4592 ], 2

  mov [ tmp4593 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4592 ]
  mov [ tmp4593 + Variant_t.value], rax

  lea  rcx , [ tmp4591 ]
  lea  rdx , [ tmp4593 ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantSub

  cmp [ tmp4590 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4592 ], eax

  lea  rcx , [ tmp4589 ]
  lea  rdx , [ tmp4592 ]
  lea  r8 , [ tmp4588 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4588 ]
  call  __Stack_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4588 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4589 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4591 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4593 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore tmp4588
  restore tmp4589
  restore tmp4590
  restore tmp4591
  restore tmp4592
  restore tmp4593

; -----------------------------------------------
; function __Stack_dup$0
; -----------------------------------------------
__Stack_dup$0_vcall:
__Stack_dup$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  tmp4594 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4595 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4596 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4597 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4599 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4598 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4594 + Variant_t.type], eax
  mov [tmp4595 + Variant_t.type], eax
  mov [tmp4596 + Variant_t.type], eax
  mov [tmp4597 + Variant_t.type], eax
  mov [tmp4599 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4595 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4597 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4598 ], 1

  mov [ tmp4599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4598 ]
  mov [ tmp4599 + Variant_t.value], rax

  lea  rcx , [ tmp4597 ]
  lea  rdx , [ tmp4599 ]
  lea  r8 , [ tmp4596 ]
  call  __MOLD_VariantSub

  cmp [ tmp4596 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4596 + Variant_t.value]
  mov dword [ tmp4598 ], eax

  lea  rcx , [ tmp4595 ]
  lea  rdx , [ tmp4598 ]
  lea  r8 , [ tmp4594 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4594 ]
  call  __Stack_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4594 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4595 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4597 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4599 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore tmp4594
  restore tmp4595
  restore tmp4596
  restore tmp4597
  restore tmp4598
  restore tmp4599

; -----------------------------------------------
; function __Stack_eat$0
; -----------------------------------------------
__Stack_eat$0_vcall:
__Stack_eat$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  tmp4600 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4601 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4603 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4602 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4600 + Variant_t.type], eax
  mov [tmp4601 + Variant_t.type], eax
  mov [tmp4603 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4601 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4602 ], 1

  mov [ tmp4603 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4602 ]
  mov [ tmp4603 + Variant_t.value], rax

  lea  rcx , [ tmp4601 ]
  lea  rdx , [ tmp4603 ]
  lea  r8 , [ tmp4600 ]
  call  __MOLD_VariantSub

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4600 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4600 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4601 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4603 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore tmp4600
  restore tmp4601
  restore tmp4602
  restore tmp4603

; -----------------------------------------------
; function __Stack_eatN$1
; -----------------------------------------------
__Stack_eatN$1_vcall:
__Stack_eatN$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  n EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4604 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4605 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ n ], xmm0
  xor eax, eax
  mov [tmp4604 + Variant_t.type], eax
  mov [tmp4605 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4605 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4605 ]
  lea  rdx , [ n ]
  lea  r8 , [ tmp4604 ]
  call  __MOLD_VariantSub

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4604 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4604 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4605 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore n
  restore tmp4604
  restore tmp4605

; -----------------------------------------------
; function __Stack_setByAbsoluteIdx$2
; -----------------------------------------------
__Stack_setByAbsoluteIdx$2_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__Stack_setByAbsoluteIdx$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  val EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4606 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ idx ], edx
  movdqu xmm0 , [ r8 ]
  movdqu [ val ], xmm0
  xor eax, eax
  mov [tmp4606 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4606 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4606 ]
  lea  rdx , [ idx ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtIndex_int32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4606 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore idx
  restore val
  restore tmp4606

; -----------------------------------------------
; function __Stack_getByAbsoluteIdx$1
; -----------------------------------------------
__Stack_getByAbsoluteIdx$1_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__Stack_getByAbsoluteIdx$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4607 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 44 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ idx ], edx
  xor eax, eax
  mov [tmp4607 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4607 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4607 ]
  lea  rdx , [ idx ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4607 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore idx
  restore rv
  restore tmp4607

; -----------------------------------------------
; function __Stack_peek$0
; -----------------------------------------------
__Stack_peek$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  tmp4609 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4611 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4614 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4615 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4608 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4610 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4609 + Variant_t.type], eax
  mov [tmp4611 + Variant_t.type], eax
  mov [tmp4614 + Variant_t.type], eax
  mov [tmp4615 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4609 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4610 ], 0

  mov [ tmp4611 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4610 ]
  mov [ tmp4611 + Variant_t.value], rax

  lea rcx, [ tmp4609 ]
  lea rdx, [ tmp4611 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l4612

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4611 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4614 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4610 ], 1

  mov [ tmp4615 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4610 ]
  mov [ tmp4615 + Variant_t.value], rax

  lea  rcx , [ tmp4614 ]
  lea  rdx , [ tmp4615 ]
  lea  r8 , [ tmp4609 ]
  call  __MOLD_VariantSub

  cmp [ tmp4609 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4609 + Variant_t.value]
  mov dword [ tmp4610 ], eax

  lea  rcx , [ tmp4611 ]
  lea  rdx , [ tmp4610 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l4613

l4612:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal579
  lea rcx , [ __literal579 ]
  call qword [rbx + 8 * 41 ]

l4613:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4609 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4615 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp4608
  restore tmp4609
  restore tmp4610
  restore tmp4611
  restore tmp4614
  restore tmp4615

; -----------------------------------------------
; function __Stack_peekN$1
; -----------------------------------------------
__Stack_peekN$1_vcall:
__Stack_peekN$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 8 )
  idx EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp4617 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4620 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4621 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4623 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4624 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4625 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4626 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4616 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4622 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idx ], xmm0
  xor eax, eax
  mov [tmp4617 + Variant_t.type], eax
  mov [tmp4620 + Variant_t.type], eax
  mov [tmp4621 + Variant_t.type], eax
  mov [tmp4623 + Variant_t.type], eax
  mov [tmp4624 + Variant_t.type], eax
  mov [tmp4625 + Variant_t.type], eax
  mov [tmp4626 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4617 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp4617 ]
  lea rdx, [ idx ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l4618

  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ tmp4617 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4621 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4621 ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4620 ]
  call  __MOLD_VariantSub

  cmp [ tmp4620 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4620 + Variant_t.value]
  mov dword [ tmp4622 ], eax

  lea  rcx , [ tmp4617 ]
  lea  rdx , [ tmp4622 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l4619

l4618:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy

  ; __mold_syscall( 42 )
  lea rcx , [ idx ]
  push rdi
  lea  rdi , [ tmp4617 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4626 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal580 ]
  lea  rdx , [ tmp4617 ]
  lea  r8 , [ tmp4626 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4625 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4626 ]
  lea  rdx , [ __literal581 ]
  lea  r8 , [ tmp4625 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ this ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4620 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4620 ]
  push rdi
  lea  rdi , [ tmp4617 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4624 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4625 ]
  lea  rdx , [ tmp4617 ]
  lea  r8 , [ tmp4624 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4623 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4624 ]
  lea  rdx , [ __literal582 ]
  lea  r8 , [ tmp4623 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp4623 ]
  call qword [rbx + 8 * 41 ]

l4619:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4617 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4620 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4621 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4623 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4624 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4625 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4626 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rdi
  pop  rbp
  ret


  restore this
  restore idx
  restore rv
  restore tmp4616
  restore tmp4617
  restore tmp4620
  restore tmp4621
  restore tmp4622
  restore tmp4623
  restore tmp4624
  restore tmp4625
  restore tmp4626

; -----------------------------------------------
; function __ASTTranslatorMIR1_constructor$1
; -----------------------------------------------
__ASTTranslatorMIR1_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 8 , readHits= 7 )
  app EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp4627 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp4628 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  xor eax, eax
  mov [tmp4627 + Variant_t.type], eax
  mov [tmp4628 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ app ]
  call  __ASTTranslator_constructor$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ app ]
  lea  rax , [ tmp4627 ]
  mov  r10d, 156
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6774
  movsxd rax, dword [ tmp4627 + Variant_t.value ]
  mov    qword [ tmp4627 + Variant_t.value ], rax
l6774:


  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4627 ]
  lea  rdx, [vtable_Stack]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp4627 ]
  lea  rax , [ tmp4628 ]
  call  __Stack_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4627 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal585 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4627 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4627 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4628 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore app
  restore tmp4627
  restore tmp4628

; -----------------------------------------------
; function __ASTTranslatorMIR1__emitOneItem$1
; -----------------------------------------------
__ASTTranslatorMIR1__emitOneItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4629 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4630 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp4629 + Variant_t.type], eax
  mov [tmp4630 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ tmp4630 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4630 ]
  lea rdx , [ item ]
  lea  rax , [ tmp4629 ]
  mov  r10d, 157
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6775
  movsxd rax, dword [ tmp4629 + Variant_t.value ]
  mov    qword [ tmp4629 + Variant_t.value ], rax
l6775:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4629 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4630 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore item
  restore tmp4629
  restore tmp4630

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitZeroArgsOpcode$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitZeroArgsOpcode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newQuad EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4631 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4632 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  xor eax, eax
  mov [newQuad + Variant_t.type], eax
  mov [tmp4631 + Variant_t.type], eax
  mov [tmp4632 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newQuad ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp4631 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4631 + Variant_t.value], 0

  lea  rcx, [ tmp4632 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4632 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4631 ]
  lea  r8 , [ tmp4632 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$1


  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4631 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4632 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore opcode
  restore newQuad
  restore tmp4631
  restore tmp4632

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitTargetOnlyOpcode$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitTargetOnlyOpcode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newQuad EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4633 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4634 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  xor eax, eax
  mov [newQuad + Variant_t.type], eax
  mov [tmp4633 + Variant_t.type], eax
  mov [tmp4634 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newQuad ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp4633 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4633 + Variant_t.value], 0

  lea  rcx, [ tmp4634 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4634 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4633 ]
  lea  r8 , [ tmp4634 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4633 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4633 + Variant_t.value], 1

  lea  rcx, [ tmp4634 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4634 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4633 ]
  lea  r8 , [ tmp4634 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$1


  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4633 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4634 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore opcode
  restore rv
  restore newQuad
  restore tmp4633
  restore tmp4634

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitOneArgOpcode$3
; -----------------------------------------------
__ASTTranslatorMIR1_emitOneArgOpcode$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newQuad EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4635 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4636 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [newQuad + Variant_t.type], eax
  mov [tmp4635 + Variant_t.type], eax
  mov [tmp4636 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newQuad ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp4635 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4635 + Variant_t.value], 0

  lea  rcx, [ tmp4636 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4636 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4635 ]
  lea  r8 , [ tmp4636 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4635 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4635 + Variant_t.value], 1

  lea  rcx, [ tmp4636 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4636 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4635 ]
  lea  r8 , [ tmp4636 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4635 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4635 + Variant_t.value], 2

  lea  rcx, [ tmp4636 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4636 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4635 ]
  lea  r8 , [ tmp4636 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$1


  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4635 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4636 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore opcode
  restore rv
  restore x
  restore newQuad
  restore tmp4635
  restore tmp4636

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitTwoArgsOpcode$4
; -----------------------------------------------
__ASTTranslatorMIR1_emitTwoArgsOpcode$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newQuad EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4637 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4638 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ x ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ y ], xmm0
  xor eax, eax
  mov [newQuad + Variant_t.type], eax
  mov [tmp4637 + Variant_t.type], eax
  mov [tmp4638 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newQuad ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp4637 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4637 + Variant_t.value], 0

  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4638 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4637 ]
  lea  r8 , [ tmp4638 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4637 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4637 + Variant_t.value], 1

  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4638 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4637 ]
  lea  r8 , [ tmp4638 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4637 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4637 + Variant_t.value], 2

  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4638 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4637 ]
  lea  r8 , [ tmp4638 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4637 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4637 + Variant_t.value], 3

  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4638 ]
  lea rdx, [ y ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4637 ]
  lea  r8 , [ tmp4638 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$1


  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4637 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore opcode
  restore rv
  restore x
  restore y
  restore newQuad
  restore tmp4637
  restore tmp4638

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitComment$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitComment$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  comment EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ comment ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal588
  lea rdx , [ __literal588 ]
  lea r8 , [ comment ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore comment

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitLabel$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitLabel$1_vcall:
__ASTTranslatorMIR1_emitLabel$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  label EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ label ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal142
  lea rdx , [ __literal142 ]
  lea r8 , [ label ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore label

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitJmp$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitJmp$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  label EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ label ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal589
  lea rdx , [ __literal589 ]
  lea r8 , [ label ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore label

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitJmpByTable$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitJmpByTable$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  jmpTable EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  labelIdx EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  newQuad EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4640 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4641 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ jmpTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ labelIdx ], xmm0
  xor eax, eax
  mov [newQuad + Variant_t.type], eax
  mov [tmp4640 + Variant_t.type], eax
  mov [tmp4641 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newQuad ]
  lea  rdx , [ __const4639 ]
  call  __MOLD_VariantArrayCreateFromInitList

  mov [ tmp4640 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4640 + Variant_t.value], 1

  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4641 ]
  lea rdx, [ jmpTable ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4640 ]
  lea  r8 , [ tmp4641 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4640 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4640 + Variant_t.value], 2

  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4641 ]
  lea rdx, [ labelIdx ]
  call __MOLD_VariantMove

  lea  rcx , [ newQuad ]
  lea  rdx , [ tmp4640 ]
  lea  r8 , [ tmp4641 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$1


  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore jmpTable
  restore labelIdx
  restore newQuad
  restore tmp4640
  restore tmp4641

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitMoveVariantOpcode$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitMoveVariantOpcode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  dst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal591
  lea rdx , [ __literal591 ]
  lea r8 , [ dst ]
  lea r9 , [ src ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore dst
  restore src

; -----------------------------------------------
; function __ASTTranslatorMIR1_popForRead$0
; -----------------------------------------------
__ASTTranslatorMIR1_popForRead$0_vcall:
__ASTTranslatorMIR1_popForRead$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4642 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4642 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4642 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4642 ]
  lea  rax , [ rv ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6776
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l6776:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp4642

; -----------------------------------------------
; function __ASTTranslatorMIR1_popForWrite$0
; -----------------------------------------------
__ASTTranslatorMIR1_popForWrite$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4643 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4643 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4643 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4643 ]
  lea  rax , [ rv ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6777
  movsxd rax, dword [ rv + Variant_t.value ]
  mov    qword [ rv + Variant_t.value ], rax
l6777:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4643 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv
  restore tmp4643

; -----------------------------------------------
; function __ASTTranslatorMIR1_push$1
; -----------------------------------------------
__ASTTranslatorMIR1_push$1_vcall:
__ASTTranslatorMIR1_push$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4644 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4645 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp4644 + Variant_t.type], eax
  mov [tmp4645 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4645 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4645 ]
  lea rdx , [ x ]
  lea  rax , [ tmp4644 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6778
  movsxd rax, dword [ tmp4644 + Variant_t.value ]
  mov    qword [ tmp4644 + Variant_t.value ], rax
l6778:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4644 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4645 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore x
  restore tmp4644
  restore tmp4645

; -----------------------------------------------
; function __ASTTranslatorMIR1_popOneArgAndEmitOpcode$2
; -----------------------------------------------
__ASTTranslatorMIR1_popOneArgAndEmitOpcode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  x EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  xor eax, eax
  mov [x + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ x ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ rv ]
  lea r9 , [ x ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3


  ; clean frame
  ; -----------
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore opcode
  restore rv
  restore x

; -----------------------------------------------
; function __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2
; -----------------------------------------------
__ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  opcode EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  y EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  x EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  xor eax, eax
  mov [y + Variant_t.type], eax
  mov [x + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ y ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ x ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ rv ]
  lea r9 , [ x ]
  lea rax, [ y ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8


  ; clean frame
  ; -----------
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore opcode
  restore rv
  restore y
  restore x

; -----------------------------------------------
; function __ASTTranslatorMIR1_popParametersBeforeCall$1
; -----------------------------------------------
__ASTTranslatorMIR1_popParametersBeforeCall$1:

  ; init frame
  ; ----------
  params EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  tmp4650 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4652 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  item EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4653 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paramsCnt EQU rbp - 92 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  tmp4646 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4647 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4651 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ paramsCnt ], edx
  xor eax, eax
  mov [tmp4650 + Variant_t.type], eax
  mov [tmp4652 + Variant_t.type], eax
  mov [item + Variant_t.type], eax
  mov [tmp4653 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate

  mov dword [ tmp4646 ], 1

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp4647 .. paramsCnt
; 
l4648:

  mov eax, dword [ idx ]
  cmp eax, dword [ paramsCnt ]
  jge l4649

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4650 ]
  call  __MOLD_VariantLoadFromKey

  mov eax, dword [ paramsCnt ]
  sub eax, dword [ idx ]
  mov dword [ tmp4651 ], eax

  mov [ tmp4652 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4651 ]
  mov [ tmp4652 + Variant_t.value], rax

  lea rcx , [ tmp4650 ]
  lea rdx , [ tmp4652 ]
  lea  rax , [ item ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6779
  movsxd rax, dword [ item + Variant_t.value ]
  mov    qword [ item + Variant_t.value ], rax
l6779:


  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov eax, dword [ idx ]
  add eax, dword [ tmp4646 ]
  mov dword [ idx ], eax

  jmp l4648

l4649:

; 
; END: for idx in tmp4647 .. paramsCnt step tmp4646
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4650 ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp4653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp4653 + Variant_t.value], rax

  lea rcx , [ tmp4650 ]
  lea rdx , [ tmp4653 ]
  lea  rax , [ tmp4652 ]
  mov  r10d, 161
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6780
  movsxd rax, dword [ tmp4652 + Variant_t.value ]
  mov    qword [ tmp4652 + Variant_t.value ], rax
l6780:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4650 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4652 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore this
  restore paramsCnt
  restore params
  restore tmp4646
  restore tmp4647
  restore tmp4650
  restore tmp4651
  restore tmp4652
  restore idx
  restore item
  restore tmp4653

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitProcBegin$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitProcBegin$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  procMeta EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ procMeta ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal592
  lea rdx , [ __literal592 ]
  lea r8 , [ procMeta ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore procMeta

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitInitFrame$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitInitFrame$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  procMeta EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ procMeta ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal593
  lea rdx , [ __literal593 ]
  lea r8 , [ procMeta ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore procMeta

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitProcEnd$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitProcEnd$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal594
  lea rdx , [ __literal594 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$1


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitRet$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitRet$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal595
  lea rdx , [ __literal595 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$1


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __ASTTranslatorMIR1_emitMoveBackVariant$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitMoveBackVariant$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  src EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dst EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [src + Variant_t.type], eax
  mov [dst + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ src ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ dst ]
  call  __ASTTranslatorMIR1_popForWrite$0

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ src ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$2

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore src
  restore dst

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArgsVector$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadArgsVector$0_vcall:
__ASTTranslatorMIR1__loadArgsVector$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal238
  lea rdx , [ __literal238 ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArgsCount$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadArgsCount$0_vcall:
__ASTTranslatorMIR1__loadArgsCount$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal239
  lea rdx , [ __literal239 ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this

; -----------------------------------------------
; function __ASTTranslatorMIR1__neg$2
; -----------------------------------------------
__ASTTranslatorMIR1__neg$2_vcall:
  ; skipped unused parameter [ value ]
__ASTTranslatorMIR1__neg$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ value ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal596
  lea rdx , [ __literal596 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__add$3
; -----------------------------------------------
__ASTTranslatorMIR1__add$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__add$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal597
  lea rdx , [ __literal597 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__stringJoin$3
; -----------------------------------------------
__ASTTranslatorMIR1__stringJoin$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__stringJoin$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal598
  lea rdx , [ __literal598 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__sub$3
; -----------------------------------------------
__ASTTranslatorMIR1__sub$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__sub$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal599
  lea rdx , [ __literal599 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__mul$3
; -----------------------------------------------
__ASTTranslatorMIR1__mul$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__mul$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal600
  lea rdx , [ __literal600 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__div$3
; -----------------------------------------------
__ASTTranslatorMIR1__div$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__div$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal601
  lea rdx , [ __literal601 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__idiv$3
; -----------------------------------------------
__ASTTranslatorMIR1__idiv$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__idiv$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal602
  lea rdx , [ __literal602 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArray$1
; -----------------------------------------------
__ASTTranslatorMIR1__loadArray$1_vcall:
__ASTTranslatorMIR1__loadArray$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal603
  lea rdx , [ __literal603 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadMap$1
; -----------------------------------------------
__ASTTranslatorMIR1__loadMap$1_vcall:
__ASTTranslatorMIR1__loadMap$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal604
  lea rdx , [ __literal604 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadNull$1
; -----------------------------------------------
__ASTTranslatorMIR1__loadNull$1_vcall:
__ASTTranslatorMIR1__loadNull$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal605
  lea rdx , [ __literal605 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadImm$2
; -----------------------------------------------
__ASTTranslatorMIR1__loadImm$2_vcall:
__ASTTranslatorMIR1__loadImm$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 21 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 7 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 16 )
  tmp4661 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  newConst EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse36 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  arrayOfValues EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  arrayOfKeys EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  newConstKeys EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  newConstValues EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse37 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 4 )
  k EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  v EQU rbp - 216 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4679 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4680 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4681 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4654 EQU rbp - 268 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4657 EQU rbp - 272 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4659 EQU rbp - 276 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4660 EQU rbp - 280 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4668 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4671 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4674 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [tmp4661 + Variant_t.type], eax
  mov [newConst + Variant_t.type], eax
  mov [__cse36 + Variant_t.type], eax
  mov [arrayOfValues + Variant_t.type], eax
  mov [arrayOfKeys + Variant_t.type], eax
  mov [newConstKeys + Variant_t.type], eax
  mov [newConstValues + Variant_t.type], eax
  mov [__cse37 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp4679 + Variant_t.type], eax
  mov [tmp4680 + Variant_t.type], eax
  mov [tmp4681 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ value + Variant_t.type ], 2
  jnz l4655

  mov dword [ tmp4657 ], 0

  mov dword [ tmp4660 ], -2147483648

  mov [ tmp4661 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4660 ]
  mov [ tmp4661 + Variant_t.value], rax

  lea rcx, [ value ]
  lea rdx, [ tmp4661 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l4658

  mov dword [ tmp4660 ], 2147483647

  mov [ tmp4661 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4660 ]
  mov [ tmp4661 + Variant_t.value], rax

  lea  rcx , [ value ]
  lea  rdx , [ tmp4661 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp4657 ], eax

l4658:

  cmp dword [ tmp4657 ], 0
  jz l4662

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal606
  lea rdx , [ __literal606 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  jmp l4663

l4662:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal607
  lea rdx , [ __literal607 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

l4663:

  jmp l4656

l4655:

  cmp [ value + Variant_t.type ], 4
  jnz l4664

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal608
  lea rdx , [ __literal608 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  jmp l4665

l4664:

  cmp [ value + Variant_t.type ], 6
  jnz l4666

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal609
  lea rdx , [ __literal609 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  jmp l4667

l4666:

  cmp [ value  + Variant_t.type], 5
  jz l4669

  cmp [ value + Variant_t.type ], 7
  jnz l4672

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse36 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse36 ]
  lea rdx , [ value ]
  lea  rax , [ newConst ]
  mov  r10d, 162
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6781
  movsxd rax, dword [ newConst + Variant_t.value ]
  mov    qword [ newConst + Variant_t.value ], rax
l6781:


  lea rcx , [ __cse36 ]
  lea rdx , [ newConst ]
  lea  rax , [ tmp4661 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6782
  movsxd rax, dword [ tmp4661 + Variant_t.value ]
  mov    qword [ tmp4661 + Variant_t.value ], rax
l6782:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal603
  lea rdx , [ __literal603 ]
  lea r8 , [ rv ]
  lea r9 , [ newConst ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  jmp l4673

l4672:

  cmp [ value + Variant_t.type ], 8
  jnz l4675

  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfValues ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ arrayOfKeys ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfKeys ]
  call  __MOLD_VariantArrayCreate

; 
; -----------------------------
; BEGIN: for keys k values v
; 
  jmp l4678

l4677:

  ; __mold_syscall( 50 )
  lea rcx , [ arrayOfKeys ]
  lea rdx , [ k ]
  call qword [rbx + 8 * 50 ]

  ; __mold_syscall( 50 )
  lea rcx , [ arrayOfValues ]
  lea rdx , [ v ]
  call qword [rbx + 8 * 50 ]

  ret

l4678:

  lea rcx , [ value ]
  lea rdx , [ k ]
  lea r8 , [ v ]
  lea r9 , [ l4677 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys k values v
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse37 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse37 ]
  lea rdx , [ arrayOfKeys ]
  lea  rax , [ newConstKeys ]
  mov  r10d, 162
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6783
  movsxd rax, dword [ newConstKeys + Variant_t.value ]
  mov    qword [ newConstKeys + Variant_t.value ], rax
l6783:


  lea rcx , [ __cse37 ]
  lea rdx , [ arrayOfValues ]
  lea  rax , [ newConstValues ]
  mov  r10d, 162
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6784
  movsxd rax, dword [ newConstValues + Variant_t.value ]
  mov    qword [ newConstValues + Variant_t.value ], rax
l6784:


  lea rcx , [ __cse37 ]
  lea rdx , [ newConstKeys ]
  lea  rax , [ tmp4661 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6785
  movsxd rax, dword [ tmp4661 + Variant_t.value ]
  mov    qword [ tmp4661 + Variant_t.value ], rax
l6785:


  lea rcx , [ __cse37 ]
  lea rdx , [ newConstValues ]
  lea  rax , [ tmp4661 ]
  mov  r10d, 20
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6786
  movsxd rax, dword [ tmp4661 + Variant_t.value ]
  mov    qword [ tmp4661 + Variant_t.value ], rax
l6786:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal604
  lea rdx , [ __literal604 ]
  lea r8 , [ rv ]
  lea r9 , [ newConstKeys ]
  lea rax, [ newConstValues ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8

  jmp l4676

l4675:

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4679 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 44 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ tmp4681 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea  rcx, [ tmp4680 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal610 ]
  lea  rdx , [ tmp4681 ]
  lea  r8 , [ tmp4680 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4679 ]
  lea rdx , [ tmp4680 ]
  lea  rax , [ tmp4661 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6787
  movsxd rax, dword [ tmp4661 + Variant_t.value ]
  mov    qword [ tmp4661 + Variant_t.value ], rax
l6787:


l4676:

l4673:

l4669:

l4670:

l4667:

l4665:

l4656:

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4661 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse36 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfKeys ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newConstKeys ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newConstValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse37 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator k
  ; Skipped loop iterator v
  lea  rcx, [ tmp4679 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4680 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4681 ]
  call __MOLD_VariantDestroy

  add  rsp, 320
  pop  rbp
  ret


  restore this
  restore rv
  restore value
  restore tmp4654
  restore tmp4657
  restore tmp4659
  restore tmp4660
  restore tmp4661
  restore tmp4668
  restore tmp4671
  restore newConst
  restore __cse36
  restore tmp4674
  restore arrayOfValues
  restore arrayOfKeys
  restore newConstKeys
  restore newConstValues
  restore __cse37
  restore k
  restore v
  restore tmp4679
  restore tmp4680
  restore tmp4681

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadImmAsVariant$2
; -----------------------------------------------
__ASTTranslatorMIR1__loadImmAsVariant$2_vcall:
__ASTTranslatorMIR1__loadImmAsVariant$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 7 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 7 )
  type EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 6 )
  tmp4682 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4701 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4702 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4703 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4683 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4686 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4688 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4689 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4696 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4698 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  xor eax, eax
  mov [type + Variant_t.type], eax
  mov [tmp4682 + Variant_t.type], eax
  mov [tmp4701 + Variant_t.type], eax
  mov [tmp4702 + Variant_t.type], eax
  mov [tmp4703 + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 44 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ type ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ type ]
  lea rdx, [ __literal302 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4684

  mov dword [ tmp4686 ], 0

  mov dword [ tmp4689 ], -2147483648

  mov [ tmp4682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4689 ]
  mov [ tmp4682 + Variant_t.value], rax

  lea rcx, [ value ]
  lea rdx, [ tmp4682 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l4687

  mov dword [ tmp4689 ], 2147483647

  mov [ tmp4682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4689 ]
  mov [ tmp4682 + Variant_t.value], rax

  lea  rcx , [ value ]
  lea  rdx , [ tmp4682 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp4686 ], eax

l4687:

  cmp dword [ tmp4686 ], 0
  jz l4690

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal611
  lea rdx , [ __literal611 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  jmp l4691

l4690:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal607
  lea rdx , [ __literal607 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

l4691:

  jmp l4685

l4684:

  lea rcx, [ type ]
  lea rdx, [ __literal303 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4692

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal612
  lea rdx , [ __literal612 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  jmp l4693

l4692:

  lea rcx, [ type ]
  lea rdx, [ __literal304 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4694

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal613
  lea rdx , [ __literal613 ]
  lea r8 , [ rv ]
  lea r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  jmp l4695

l4694:

  mov dword [ tmp4696 ], 0

  lea rcx, [ type ]
  lea rdx, [ __literal160 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4697

  lea  rcx , [ type ]
  lea  rdx , [ __literal305 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp4696 ], eax

l4697:

  cmp dword [ tmp4696 ], 0
  jz l4699

  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  lea  r8 , [ tmp4701 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ type ]
  push rdi
  lea  rdi , [ tmp4703 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal610 ]
  lea  rdx , [ tmp4703 ]
  lea  r8 , [ tmp4702 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ tmp4701 ]
  lea rdx , [ tmp4702 ]
  lea  rax , [ tmp4682 ]
  mov  r10d, 0
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6788
  movsxd rax, dword [ tmp4682 + Variant_t.value ]
  mov    qword [ tmp4682 + Variant_t.value ], rax
l6788:


l4699:

l4700:

l4695:

l4693:

l4685:

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4682 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4701 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4703 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore rv
  restore value
  restore type
  restore tmp4682
  restore tmp4683
  restore tmp4686
  restore tmp4688
  restore tmp4689
  restore tmp4696
  restore tmp4698
  restore tmp4701
  restore tmp4702
  restore tmp4703

; -----------------------------------------------
; function __ASTTranslatorMIR1__convert$4
; -----------------------------------------------
__ASTTranslatorMIR1__convert$4_vcall:
  ; skipped unused parameter [ unusedSrc ]
__ASTTranslatorMIR1__convert$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  srcType EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  dstType EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  srcTypeMIR EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  dstTypeMIR EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp4707 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4708 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  opcode EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4704 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedSrc ]
  movdqu xmm0 , [ r9 ]
  movdqu [ srcType ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dstType ], xmm0
  xor eax, eax
  mov [srcTypeMIR + Variant_t.type], eax
  mov [dstTypeMIR + Variant_t.type], eax
  mov [tmp4707 + Variant_t.type], eax
  mov [tmp4708 + Variant_t.type], eax
  mov [opcode + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ srcType ]
  lea  rax , [ srcTypeMIR ]
  call  AST_ConvertDataTypeToMIR

  lea rcx , [ dstType ]
  lea  rax , [ dstTypeMIR ]
  call  AST_ConvertDataTypeToMIR

  lea rcx, [ srcTypeMIR ]
  lea rdx, [ dstTypeMIR ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4705

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal591
  lea rdx , [ __literal591 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$2

  jmp l4706

l4705:

  lea  rcx, [ tmp4708 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal444 ]
  lea  rdx , [ srcTypeMIR ]
  lea  r8 , [ tmp4708 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4708 ]
  lea  rdx , [ __literal445 ]
  lea  r8 , [ tmp4707 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4707 ]
  lea  rdx , [ dstTypeMIR ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$2

l4706:


  ; clean frame
  ; -----------
  lea  rcx, [ srcTypeMIR ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dstTypeMIR ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4707 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4708 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore rv
  restore srcType
  restore dstType
  restore srcTypeMIR
  restore dstTypeMIR
  restore tmp4704
  restore tmp4707
  restore tmp4708
  restore opcode

; -----------------------------------------------
; function __ASTTranslatorMIR1__compareEQ$3
; -----------------------------------------------
__ASTTranslatorMIR1__compareEQ$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__compareEQ$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal614
  lea rdx , [ __literal614 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__compareNEQ$3
; -----------------------------------------------
__ASTTranslatorMIR1__compareNEQ$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__compareNEQ$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal615
  lea rdx , [ __literal615 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__compareLT$3
; -----------------------------------------------
__ASTTranslatorMIR1__compareLT$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__compareLT$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal616
  lea rdx , [ __literal616 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__compareLE$3
; -----------------------------------------------
__ASTTranslatorMIR1__compareLE$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__compareLE$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal617
  lea rdx , [ __literal617 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__compareGT$3
; -----------------------------------------------
__ASTTranslatorMIR1__compareGT$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__compareGT$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal618
  lea rdx , [ __literal618 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__compareGE$3
; -----------------------------------------------
__ASTTranslatorMIR1__compareGE$3_vcall:
  ; skipped unused parameter [ x ]
  ; skipped unused parameter [ y ]
__ASTTranslatorMIR1__compareGE$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal619
  lea rdx , [ __literal619 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__isTypeOf$3
; -----------------------------------------------
__ASTTranslatorMIR1__isTypeOf$3_vcall:
  ; skipped unused parameter [ x ]
__ASTTranslatorMIR1__isTypeOf$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  typeId EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  movdqu xmm0 , [ r9 ]
  movdqu [ typeId ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ typeId ]
  call  __ASTTranslatorMIR1_push$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal620
  lea rdx , [ __literal620 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rv
  restore typeId

; -----------------------------------------------
; function __ASTTranslatorMIR1__isNotTypeOf$3
; -----------------------------------------------
__ASTTranslatorMIR1__isNotTypeOf$3_vcall:
  ; skipped unused parameter [ x ]
__ASTTranslatorMIR1__isNotTypeOf$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  typeId EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  movdqu xmm0 , [ r9 ]
  movdqu [ typeId ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ typeId ]
  call  __ASTTranslatorMIR1_push$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal621
  lea rdx , [ __literal621 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore rv
  restore typeId

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadVariable$1
; -----------------------------------------------
__ASTTranslatorMIR1__loadVariable$1_vcall:
__ASTTranslatorMIR1__loadVariable$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore name

; -----------------------------------------------
; function __ASTTranslatorMIR1__assign$2
; -----------------------------------------------
__ASTTranslatorMIR1__assign$2_vcall:
__ASTTranslatorMIR1__assign$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  dst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  src EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4712 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4709 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  xor eax, eax
  mov [tmp4712 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx, [ dst ]
  lea rdx, [ src ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4710

  lea rcx , [ this ]
  lea  rax , [ tmp4712 ]
  mov  r10d, 163
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6789
  movsxd rax, dword [ tmp4712 + Variant_t.value ]
  mov    qword [ tmp4712 + Variant_t.value ], rax
l6789:


  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ tmp4712 ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$2

l4710:

l4711:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4712 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore dst
  restore src
  restore tmp4709
  restore tmp4712

; -----------------------------------------------
; function __ASTTranslatorMIR1__call$4
; -----------------------------------------------
__ASTTranslatorMIR1__call$4_vcall:
  ; skipped unused parameter [ unusedParams ]
__ASTTranslatorMIR1__call$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  proto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 8 )
  paramsCnt EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  params EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  name EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4717 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4719 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4720 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4713 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4714 EQU rbp - 160 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4722 EQU rbp - 164 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4723 EQU rbp - 168 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  ; skipped unused param [ unusedParams ]
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [params + Variant_t.type], eax
  mov [name + Variant_t.type], eax
  mov [tmp4717 + Variant_t.type], eax
  mov [tmp4719 + Variant_t.type], eax
  mov [tmp4720 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ paramsCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp4713 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp4713 ]
  lea  rax , [ params ]
  call  __ASTTranslatorMIR1_popParametersBeforeCall$1

  lea  rcx , [ proto ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey

  cmp [ name + Variant_t.type ], 0
  jnz l4715

  lea  rcx , [ proto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey

l4715:

l4716:

  lea  rcx, [ tmp4717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4717 ]
  lea  rdx , [ __const4718 ]
  call  __MOLD_VariantArrayCreateFromInitList

  mov [ tmp4719 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4719 + Variant_t.value], 1

  lea  rcx, [ tmp4720 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4720 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4717 ]
  lea  rdx , [ tmp4719 ]
  lea  r8 , [ tmp4720 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4719 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4719 + Variant_t.value], 2

  lea  rcx, [ tmp4720 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4720 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4717 ]
  lea  rdx , [ tmp4719 ]
  lea  r8 , [ tmp4720 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4719 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4719 + Variant_t.value], 3

  lea  rcx, [ tmp4720 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4720 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4717 ]
  lea  rdx , [ tmp4719 ]
  lea  r8 , [ tmp4720 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ tmp4717 ]
  call  __ASTTranslatorMIR1__emitOneItem$1

  mov dword [ tmp4714 ], 0

  lea  rcx , [ proto ]
  lea  rdx , [ __literal555 ]
  lea  r8 , [ tmp4717 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4717  + Variant_t.type], 0
  jz l4721

  lea  rcx , [ proto ]
  lea  rdx , [ __literal555 ]
  lea  r8 , [ tmp4720 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4723 ], 1

  mov eax, dword [ tmp4723 ]
  mov [ tmp4719 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4719 + Variant_t.value], rax

  lea  rcx , [ tmp4720 ]
  lea  rdx , [ tmp4719 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4714 ], eax

l4721:

  cmp dword [ tmp4714 ], 0
  jz l4724

  mov dword [ tmp4713 ], 0

  lea  rcx , [ params ]
  lea  rdx , [ tmp4713 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4719 ]
  call  __ASTTranslatorMIR1_push$1

  jmp l4725

l4724:

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1

l4725:


  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4717 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4720 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore this
  restore rv
  restore proto
  restore paramsCnt
  restore params
  restore name
  restore tmp4713
  restore tmp4714
  restore tmp4717
  restore tmp4719
  restore tmp4720
  restore tmp4722
  restore tmp4723

; -----------------------------------------------
; function __ASTTranslatorMIR1__syscall$4
; -----------------------------------------------
__ASTTranslatorMIR1__syscall$4_vcall:
  ; skipped unused parameter [ unusedParams ]
__ASTTranslatorMIR1__syscall$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  id EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  paramsCnt EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  params EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4727 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4729 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4730 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4726 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  ; skipped unused param [ unusedParams ]
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [params + Variant_t.type], eax
  mov [tmp4727 + Variant_t.type], eax
  mov [tmp4729 + Variant_t.type], eax
  mov [tmp4730 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ paramsCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp4726 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp4726 ]
  lea  rax , [ params ]
  call  __ASTTranslatorMIR1_popParametersBeforeCall$1

  lea  rcx, [ tmp4727 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4727 ]
  lea  rdx , [ __const4728 ]
  call  __MOLD_VariantArrayCreateFromInitList

  mov [ tmp4729 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4729 + Variant_t.value], 1

  lea  rcx, [ tmp4730 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4730 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4727 ]
  lea  rdx , [ tmp4729 ]
  lea  r8 , [ tmp4730 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4729 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4729 + Variant_t.value], 2

  lea  rcx, [ tmp4730 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4730 ]
  lea rdx, [ id ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4727 ]
  lea  rdx , [ tmp4729 ]
  lea  r8 , [ tmp4730 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4729 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4729 + Variant_t.value], 3

  lea  rcx, [ tmp4730 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4730 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4727 ]
  lea  rdx , [ tmp4729 ]
  lea  r8 , [ tmp4730 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ tmp4727 ]
  call  __ASTTranslatorMIR1__emitOneItem$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4727 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4729 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4730 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore rv
  restore id
  restore paramsCnt
  restore params
  restore tmp4726
  restore tmp4727
  restore tmp4729
  restore tmp4730

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadFromIndex$3
; -----------------------------------------------
__ASTTranslatorMIR1__loadFromIndex$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedIdx ]
__ASTTranslatorMIR1__loadFromIndex$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal623
  lea rdx , [ __literal623 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__loadFromKey$3
; -----------------------------------------------
__ASTTranslatorMIR1__loadFromKey$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedKey ]
__ASTTranslatorMIR1__loadFromKey$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal624
  lea rdx , [ __literal624 ]
  lea r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtIndex$3
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtIndex$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedIdx ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR1__storeAtIndex$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  val EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  box EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [val + Variant_t.type], eax
  mov [idx + Variant_t.type], eax
  mov [box + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ val ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ idx ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ box ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal625
  lea rdx , [ __literal625 ]
  lea r8 , [ box ]
  lea r9 , [ idx ]
  lea rax, [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8

  lea rcx , [ this ]
  lea rdx , [ box ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore val
  restore idx
  restore box

; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtKey$3
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtKey$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedKey ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR1__storeAtKey$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  val EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  key EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  box EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [val + Variant_t.type], eax
  mov [key + Variant_t.type], eax
  mov [box + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ val ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ key ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ box ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal626
  lea rdx , [ __literal626 ]
  lea r8 , [ box ]
  lea r9 , [ key ]
  lea rax, [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8

  lea rcx , [ this ]
  lea rdx , [ box ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore val
  restore key
  restore box

; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtIndexAndDrop$3
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtIndexAndDrop$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedIdx ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR1__storeAtIndexAndDrop$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  val EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  box EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [val + Variant_t.type], eax
  mov [idx + Variant_t.type], eax
  mov [box + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ val ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ idx ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ box ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal625
  lea rdx , [ __literal625 ]
  lea r8 , [ box ]
  lea r9 , [ idx ]
  lea rax, [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8


  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore val
  restore idx
  restore box

; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtKeyAndDrop$3
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtKeyAndDrop$3_vcall:
  ; skipped unused parameter [ unusedBox ]
  ; skipped unused parameter [ unusedKey ]
  ; skipped unused parameter [ unusedValue ]
__ASTTranslatorMIR1__storeAtKeyAndDrop$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  val EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  key EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  box EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  xor eax, eax
  mov [val + Variant_t.type], eax
  mov [key + Variant_t.type], eax
  mov [box + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea  rax , [ val ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ key ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
  lea  rax , [ box ]
  call  __ASTTranslatorMIR1_popForRead$0

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal626
  lea rdx , [ __literal626 ]
  lea r8 , [ box ]
  lea r9 , [ key ]
  lea rax, [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8


  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore val
  restore key
  restore box

; -----------------------------------------------
; function __ASTTranslatorMIR1__createObject$2
; -----------------------------------------------
__ASTTranslatorMIR1__createObject$2_vcall:
__ASTTranslatorMIR1__createObject$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  classProto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp4734 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4731 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  xor eax, eax
  mov [tmp4734 + Variant_t.type], eax

  ; code
  ; ----

  cmp [ classProto + Variant_t.type ], 0
  jnz l4732

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal627
  lea rdx , [ __literal627 ]
  call  __ASTTranslator__error$1

  jmp l4733

l4732:

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4734 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal628
  lea rdx , [ __literal628 ]
  lea r8 , [ rv ]
  lea r9 , [ tmp4734 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1

l4733:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4734 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore rv
  restore classProto
  restore tmp4731
  restore tmp4734

; -----------------------------------------------
; function __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3
; -----------------------------------------------
__ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3_vcall:
__ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 13 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  leftAst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rightAst EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  endLabel EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  x EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  y EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4735 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4737 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4736 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  xor eax, eax
  mov [endLabel + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [tmp4735 + Variant_t.type], eax
  mov [tmp4737 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4735 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4735 ]
  lea  rax , [ endLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6790
  movsxd rax, dword [ endLabel + Variant_t.value ]
  mov    qword [ endLabel + Variant_t.value ], rax
l6790:


  mov dword [ tmp4736 ], 0

  mov eax, dword [ tmp4736 ]
  mov [ tmp4735 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4735 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4735 ]
  call  __ASTTranslatorMIR1__loadImm$2

  lea rcx , [ this ]
  lea rdx , [ leftAst ]
  lea  rax , [ x ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea  rax , [ tmp4735 ]
  mov  r10d, 163
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6791
  movsxd rax, dword [ tmp4735 + Variant_t.value ]
  mov    qword [ tmp4735 + Variant_t.value ], rax
l6791:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal629
  lea rdx , [ __literal629 ]
  lea r8 , [ endLabel ]
  lea r9 , [ tmp4735 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  lea rcx , [ this ]
  lea rdx , [ x ]
  call  __ASTTranslator__releaseTempVar$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4737 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4737 ]
  lea rdx , [ rv ]
; WARNING: Failed to get variable size: __literal159
  lea r8 , [ __literal159 ]
  lea  rax , [ tmp4735 ]
  mov  r10d, 90
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6792
  movsxd rax, dword [ tmp4735 + Variant_t.value ]
  mov    qword [ tmp4735 + Variant_t.value ], rax
l6792:


  lea rcx , [ this ]
  lea rdx , [ rightAst ]
  lea  rax , [ y ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  call  __ASTTranslatorMIR1_emitMoveBackVariant$0

  lea rcx , [ this ]
  lea rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
  lea rdx , [ y ]
  call  __ASTTranslator__releaseTempVar$1


  ; clean frame
  ; -----------
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4735 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4737 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabel
  restore x
  restore y
  restore tmp4735
  restore tmp4736
  restore tmp4737

; -----------------------------------------------
; function __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3
; -----------------------------------------------
__ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3_vcall:
__ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 13 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  leftAst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  rightAst EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  endLabel EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  x EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  y EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4738 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4740 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4739 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  xor eax, eax
  mov [endLabel + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [tmp4738 + Variant_t.type], eax
  mov [tmp4740 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4738 ]
  lea  rax , [ endLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6793
  movsxd rax, dword [ endLabel + Variant_t.value ]
  mov    qword [ endLabel + Variant_t.value ], rax
l6793:


  mov dword [ tmp4739 ], 1

  mov eax, dword [ tmp4739 ]
  mov [ tmp4738 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4738 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ rv ]
  lea r8 , [ tmp4738 ]
  call  __ASTTranslatorMIR1__loadImm$2

  lea rcx , [ this ]
  lea rdx , [ leftAst ]
  lea  rax , [ x ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea  rax , [ tmp4738 ]
  mov  r10d, 163
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6794
  movsxd rax, dword [ tmp4738 + Variant_t.value ]
  mov    qword [ tmp4738 + Variant_t.value ], rax
l6794:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal630
  lea rdx , [ __literal630 ]
  lea r8 , [ endLabel ]
  lea r9 , [ tmp4738 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  lea rcx , [ this ]
  lea rdx , [ x ]
  call  __ASTTranslator__releaseTempVar$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4740 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4740 ]
  lea rdx , [ rv ]
; WARNING: Failed to get variable size: __literal159
  lea r8 , [ __literal159 ]
  lea  rax , [ tmp4738 ]
  mov  r10d, 90
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6795
  movsxd rax, dword [ tmp4738 + Variant_t.value ]
  mov    qword [ tmp4738 + Variant_t.value ], rax
l6795:


  lea rcx , [ this ]
  lea rdx , [ rightAst ]
  lea  rax , [ y ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  call  __ASTTranslatorMIR1_emitMoveBackVariant$0

  lea rcx , [ this ]
  lea rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
  lea rdx , [ y ]
  call  __ASTTranslator__releaseTempVar$1


  ; clean frame
  ; -----------
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4738 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4740 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabel
  restore x
  restore y
  restore tmp4738
  restore tmp4739
  restore tmp4740

; -----------------------------------------------
; function __ASTTranslatorMIR1__invokeMethod$4
; -----------------------------------------------
__ASTTranslatorMIR1__invokeMethod$4_vcall:
  ; skipped unused parameter [ unusedParams ]
__ASTTranslatorMIR1__invokeMethod$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 12 )
  rv EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  methodName EQU rbp - 56 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 5 )
  paramsCnt EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  methodId EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  params EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4741 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4742 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4748 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4751 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4743 EQU rbp - 172 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4749 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ methodName ], xmm0
  ; skipped unused param [ unusedParams ]
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  xor eax, eax
  mov [methodId + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  mov [tmp4741 + Variant_t.type], eax
  mov [tmp4742 + Variant_t.type], eax
  mov [tmp4748 + Variant_t.type], eax
  mov [tmp4751 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4742 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4742 ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ tmp4741 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4741 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodId ]
  call  __MOLD_VariantLoadFromKey

  cmp [ methodId + Variant_t.type ], 0
  jnz l4744

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4741 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4741 ]
  lea rdx , [ methodName ]
  lea  rax , [ methodId ]
  mov  r10d, 164
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6796
  movsxd rax, dword [ methodId + Variant_t.value ]
  mov    qword [ methodId + Variant_t.value ], rax
l6796:


l4744:

l4745:

  lea  rcx , [ this ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ tmp4742 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4742 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4741 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4741 + Variant_t.type ], 0
  jnz l4746

  lea  rcx , [ this ]
  lea  rdx , [ __literal585 ]
  lea  r8 , [ tmp4742 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 50 )
  lea rcx , [ tmp4742 ]
  lea rdx , [ methodName ]
  call qword [rbx + 8 * 50 ]

l4746:

l4747:

  lea  rcx , [ this ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ tmp4742 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4743 ], 1

  mov eax, dword [ tmp4743 ]
  mov [ tmp4748 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4748 + Variant_t.value], rax

  lea  rcx , [ tmp4742 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4748 ]
  call  __MOLD_VariantStoreAtKey

  cmp [ paramsCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp4749 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp4749 ]
  lea  rax , [ params ]
  call  __ASTTranslatorMIR1_popParametersBeforeCall$1

  lea  rcx, [ tmp4748 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4748 ]
  lea  rdx , [ __const4750 ]
  call  __MOLD_VariantArrayCreateFromInitList

  mov [ tmp4742 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4742 + Variant_t.value], 1

  lea  rcx, [ tmp4751 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4751 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4748 ]
  lea  rdx , [ tmp4742 ]
  lea  r8 , [ tmp4751 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4742 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4742 + Variant_t.value], 2

  lea  rcx, [ tmp4751 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4751 ]
  lea rdx, [ methodId ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4748 ]
  lea  rdx , [ tmp4742 ]
  lea  r8 , [ tmp4751 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4742 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4742 + Variant_t.value], 3

  lea  rcx, [ tmp4751 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4751 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4748 ]
  lea  rdx , [ tmp4742 ]
  lea  r8 , [ tmp4751 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ tmp4748 ]
  call  __ASTTranslatorMIR1__emitOneItem$1

  lea rcx , [ this ]
  lea rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$1


  ; clean frame
  ; -----------
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4741 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4742 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4748 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4751 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret


  restore this
  restore rv
  restore methodName
  restore paramsCnt
  restore methodId
  restore params
  restore tmp4741
  restore tmp4742
  restore tmp4743
  restore tmp4748
  restore tmp4749
  restore tmp4751

; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeFor$5
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeFor$5_vcall:
__ASTTranslatorMIR1__executeNodeFor$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 19 )
  iterName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  idxStart EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  idxEnd EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  idxStep EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  bodyAst EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  labelForBegin EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  labelForEnd EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse38 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4752 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  tmp4753 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4754 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4755 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4756 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4757 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  oneChild EQU rbp - 264 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4760 EQU rbp - 280 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4761 EQU rbp - 296 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 336

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iterName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ idxStart ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ idxEnd ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ idxStep ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  xor eax, eax
  mov [labelForBegin + Variant_t.type], eax
  mov [labelForEnd + Variant_t.type], eax
  mov [__cse38 + Variant_t.type], eax
  mov [tmp4752 + Variant_t.type], eax
  mov [tmp4753 + Variant_t.type], eax
  mov [tmp4754 + Variant_t.type], eax
  mov [tmp4755 + Variant_t.type], eax
  mov [tmp4756 + Variant_t.type], eax
  mov [tmp4757 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp4760 + Variant_t.type], eax
  mov [tmp4761 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse38 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse38 ]
  lea  rax , [ labelForBegin ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6797
  movsxd rax, dword [ labelForBegin + Variant_t.value ]
  mov    qword [ labelForBegin + Variant_t.value ], rax
l6797:


  lea rcx , [ __cse38 ]
  lea  rax , [ labelForEnd ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6798
  movsxd rax, dword [ labelForEnd + Variant_t.value ]
  mov    qword [ labelForEnd + Variant_t.value ], rax
l6798:


  lea rcx , [ this ]
  lea rdx , [ iterName ]
  lea r8 , [ idxStart ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$2

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  ; __mold_syscall( 42 )
  lea rcx , [ iterName ]
  push rdi
  lea  rdi , [ tmp4752 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4757 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal632 ]
  lea  rdx , [ tmp4752 ]
  lea  r8 , [ tmp4757 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4756 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4757 ]
  lea  rdx , [ __literal449 ]
  lea  r8 , [ tmp4756 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ idxStart ]
  push rdi
  lea  rdi , [ tmp4752 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4755 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4756 ]
  lea  rdx , [ tmp4752 ]
  lea  r8 , [ tmp4755 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4754 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4755 ]
  lea  rdx , [ __literal450 ]
  lea  r8 , [ tmp4754 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ idxEnd ]
  push rdi
  lea  rdi , [ tmp4752 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4753 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4754 ]
  lea  rdx , [ tmp4752 ]
  lea  r8 , [ tmp4753 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4753 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
  lea rdx , [ labelForBegin ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal633
  lea rdx , [ __literal633 ]
  lea r8 , [ labelForEnd ]
  lea r9 , [ iterName ]
  lea rax, [ idxEnd ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8

  lea  rcx , [ bodyAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4752 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneChild
; 
  jmp l4759

l4758:

  lea rcx , [ this ]
  lea rdx , [ oneChild ]
  call  __ASTTranslator__executeNode$1

  ret

l4759:

  lea  rcx , [ tmp4752 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4758 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal597
  lea rdx , [ __literal597 ]
  lea r8 , [ iterName ]
  lea r9 , [ iterName ]
  lea rax, [ idxStep ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$4
  add rsp, 8

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal589
  lea rdx , [ __literal589 ]
  lea r8 , [ labelForBegin ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2

  lea rcx , [ this ]
  lea rdx , [ labelForEnd ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  ; __mold_syscall( 42 )
  lea rcx , [ iterName ]
  push rdi
  lea  rdi , [ tmp4752 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4761 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal634 ]
  lea  rdx , [ tmp4752 ]
  lea  r8 , [ tmp4761 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4760 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4761 ]
  lea  rdx , [ __literal449 ]
  lea  r8 , [ tmp4760 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ idxStart ]
  push rdi
  lea  rdi , [ tmp4752 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4757 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4760 ]
  lea  rdx , [ tmp4752 ]
  lea  r8 , [ tmp4757 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4756 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4757 ]
  lea  rdx , [ __literal450 ]
  lea  r8 , [ tmp4756 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ idxEnd ]
  push rdi
  lea  rdi , [ tmp4752 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4755 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4756 ]
  lea  rdx , [ tmp4752 ]
  lea  r8 , [ tmp4755 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4754 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4755 ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ tmp4754 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ idxStep ]
  push rdi
  lea  rdi , [ tmp4752 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4753 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4754 ]
  lea  rdx , [ tmp4752 ]
  lea  r8 , [ tmp4753 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4753 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1


  ; clean frame
  ; -----------
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse38 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4752 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4753 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4754 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4755 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4756 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4757 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp4760 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4761 ]
  call __MOLD_VariantDestroy

  add  rsp, 336
  pop  rbp
  ret


  restore this
  restore iterName
  restore idxStart
  restore idxEnd
  restore idxStep
  restore bodyAst
  restore labelForBegin
  restore labelForEnd
  restore __cse38
  restore tmp4752
  restore tmp4753
  restore tmp4754
  restore tmp4755
  restore tmp4756
  restore tmp4757
  restore oneChild
  restore tmp4760
  restore tmp4761

; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeForEach$5
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeForEach$5_vcall:
  mov r10, [rsp + 8 ]
  cmp [r10 + Variant_t.type], VARIANT_BOOLEAN
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov r10, [r10 + Variant_t.value]
  mov [rsp + 8 ], r10

__ASTTranslatorMIR1__executeNodeForEach$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 18 )
  iteratorKey EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 4 )
  iteratorValue EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 4 )
  box EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  bodyAst EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  labelForBegin EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  labelForEnd EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  funcName EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  params EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  __cse39 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4762 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4763 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4764 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4765 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4774 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4776 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  isMapMode EQU rbp - 268 ; 4 bytes, (kind= 3 , type= bool32 , writeHits= 0 , readHits= 1 )
  tmp4766 EQU rbp - 272 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4771 EQU rbp - 276 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iteratorKey ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ iteratorValue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ box ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ isMapMode ], eax
  xor eax, eax
  mov [labelForBegin + Variant_t.type], eax
  mov [labelForEnd + Variant_t.type], eax
  mov [funcName + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  mov [__cse39 + Variant_t.type], eax
  mov [tmp4762 + Variant_t.type], eax
  mov [tmp4763 + Variant_t.type], eax
  mov [tmp4764 + Variant_t.type], eax
  mov [tmp4765 + Variant_t.type], eax
  mov [tmp4774 + Variant_t.type], eax
  mov [tmp4776 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse39 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse39 ]
  lea  rax , [ labelForBegin ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6799
  movsxd rax, dword [ labelForBegin + Variant_t.value ]
  mov    qword [ labelForBegin + Variant_t.value ], rax
l6799:


  lea rcx , [ __cse39 ]
  lea  rax , [ labelForEnd ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6800
  movsxd rax, dword [ labelForEnd + Variant_t.value ]
  mov    qword [ labelForEnd + Variant_t.value ], rax
l6800:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  ; __mold_syscall( 42 )
  lea rcx , [ iteratorKey ]
  push rdi
  lea  rdi , [ tmp4762 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4765 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal636 ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4765 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4764 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4765 ]
  lea  rdx , [ __literal637 ]
  lea  r8 , [ tmp4764 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ iteratorValue ]
  push rdi
  lea  rdi , [ tmp4762 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4763 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4764 ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4763 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4763 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal589
  lea rdx , [ __literal589 ]
  lea r8 , [ labelForEnd ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2

  lea rcx , [ this ]
  lea rdx , [ labelForBegin ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
  lea rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal638
  lea rdx , [ __literal638 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$1

  lea rcx , [ this ]
  lea rdx , [ labelForEnd ]
  call  __ASTTranslatorMIR1_emitLabel$1

  cmp [ iteratorKey + Variant_t.type ], 0
  jnz l4767

  lea rcx, [ iteratorKey ]
  lea rdx, [ __literal639 ]
  call __MOLD_VariantMove

l4767:

l4768:

  cmp [ iteratorValue + Variant_t.type ], 0
  jnz l4769

  lea rcx, [ iteratorValue ]
  lea rdx, [ __literal639 ]
  call __MOLD_VariantMove

l4769:

l4770:

  mov dword [ tmp4771 ], 1

  mov eax, dword [ isMapMode ]
  cmp eax, dword [ tmp4771 ]
  jnz l4772

  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcName ]
  lea rdx, [ __literal640 ]
  call __MOLD_VariantMove

  jmp l4773

l4772:

  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcName ]
  lea rdx, [ __literal641 ]
  call __MOLD_VariantMove

l4773:

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp4762 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4762 + Variant_t.value], 0

  lea  rcx, [ tmp4774 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4774 ]
  lea rdx, [ box ]
  call __MOLD_VariantMove

  lea  rcx , [ params ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4774 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4762 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4762 + Variant_t.value], 1

  lea  rcx, [ tmp4774 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4774 ]
  lea rdx, [ iteratorKey ]
  call __MOLD_VariantMove

  lea  rcx , [ params ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4774 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4762 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4762 + Variant_t.value], 2

  lea  rcx, [ tmp4774 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4774 ]
  lea rdx, [ iteratorValue ]
  call __MOLD_VariantMove

  lea  rcx , [ params ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4774 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4762 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4762 + Variant_t.value], 3

  lea  rcx, [ tmp4774 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4774 ]
  lea rdx, [ labelForBegin ]
  call __MOLD_VariantMove

  lea  rcx , [ params ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4774 ]
  call  __MOLD_VariantStoreAtIndex

  lea  rcx, [ tmp4774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4774 ]
  lea  rdx , [ __const4775 ]
  call  __MOLD_VariantArrayCreateFromInitList

  mov [ tmp4762 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4762 + Variant_t.value], 2

  lea  rcx, [ tmp4776 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4776 ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4774 ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4776 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp4762 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4762 + Variant_t.value], 3

  lea  rcx, [ tmp4776 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4776 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp4774 ]
  lea  rdx , [ tmp4762 ]
  lea  r8 , [ tmp4776 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ tmp4774 ]
  call  __ASTTranslatorMIR1__emitOneItem$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  ; __mold_syscall( 42 )
  lea rcx , [ iteratorKey ]
  push rdi
  lea  rdi , [ tmp4774 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4765 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal642 ]
  lea  rdx , [ tmp4774 ]
  lea  r8 , [ tmp4765 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4764 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4765 ]
  lea  rdx , [ __literal637 ]
  lea  r8 , [ tmp4764 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ iteratorValue ]
  push rdi
  lea  rdi , [ tmp4774 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4763 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4764 ]
  lea  rdx , [ tmp4774 ]
  lea  r8 , [ tmp4763 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4763 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1


  ; clean frame
  ; -----------
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse39 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4762 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4763 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4764 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4774 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4776 ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret


  restore this
  restore iteratorKey
  restore iteratorValue
  restore box
  restore bodyAst
  restore isMapMode
  restore labelForBegin
  restore labelForEnd
  restore funcName
  restore params
  restore __cse39
  restore tmp4762
  restore tmp4763
  restore tmp4764
  restore tmp4765
  restore tmp4766
  restore tmp4771
  restore tmp4774
  restore tmp4776

; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeWhile$2
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeWhile$2_vcall:
__ASTTranslatorMIR1__executeNodeWhile$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 19 )
  condAst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  bodyAst EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  loopLabel EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  endLabel EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  cond EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  __cse40 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4777 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ condAst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ bodyAst ], xmm0
  xor eax, eax
  mov [loopLabel + Variant_t.type], eax
  mov [endLabel + Variant_t.type], eax
  mov [cond + Variant_t.type], eax
  mov [__cse40 + Variant_t.type], eax
  mov [tmp4777 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse40 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse40 ]
  lea  rax , [ loopLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6801
  movsxd rax, dword [ loopLabel + Variant_t.value ]
  mov    qword [ loopLabel + Variant_t.value ], rax
l6801:


  lea rcx , [ __cse40 ]
  lea  rax , [ endLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6802
  movsxd rax, dword [ endLabel + Variant_t.value ]
  mov    qword [ endLabel + Variant_t.value ], rax
l6802:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal643
  lea rdx , [ __literal643 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
  lea rdx , [ loopLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
  lea rdx , [ condAst ]
  lea  rax , [ cond ]
  call  __ASTTranslator__evaluateNode$1

  lea rcx , [ this ]
  lea  rax , [ tmp4777 ]
  mov  r10d, 163
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6803
  movsxd rax, dword [ tmp4777 + Variant_t.value ]
  mov    qword [ tmp4777 + Variant_t.value ], rax
l6803:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal629
  lea rdx , [ __literal629 ]
  lea r8 , [ endLabel ]
  lea r9 , [ tmp4777 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  lea rcx , [ this ]
  lea rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$1

  lea rcx , [ this ]
  lea rdx , [ loopLabel ]
  call  __ASTTranslatorMIR1_emitJmp$1

  lea rcx , [ this ]
  lea rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal644
  lea rdx , [ __literal644 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1


  ; clean frame
  ; -----------
  lea  rcx, [ loopLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse40 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4777 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore condAst
  restore bodyAst
  restore loopLabel
  restore endLabel
  restore cond
  restore __cse40
  restore tmp4777

; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeIf$3
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeIf$3_vcall:
  ; skipped unused parameter [ cond ]
__ASTTranslatorMIR1__executeNodeIf$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 12 )
  codeIfTrue EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  codeIfFalse EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  falseLabel EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  endLabel EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  __cse41 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4778 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4779 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ cond ]
  movdqu xmm0 , [ r8 ]
  movdqu [ codeIfTrue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ codeIfFalse ], xmm0
  xor eax, eax
  mov [falseLabel + Variant_t.type], eax
  mov [endLabel + Variant_t.type], eax
  mov [__cse41 + Variant_t.type], eax
  mov [tmp4778 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ __cse41 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ __cse41 ]
  lea  rax , [ falseLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6804
  movsxd rax, dword [ falseLabel + Variant_t.value ]
  mov    qword [ falseLabel + Variant_t.value ], rax
l6804:


  lea rcx , [ __cse41 ]
  lea  rax , [ endLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6805
  movsxd rax, dword [ endLabel + Variant_t.value ]
  mov    qword [ endLabel + Variant_t.value ], rax
l6805:


  lea rcx , [ this ]
  lea  rax , [ tmp4778 ]
  mov  r10d, 163
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6806
  movsxd rax, dword [ tmp4778 + Variant_t.value ]
  mov    qword [ tmp4778 + Variant_t.value ], rax
l6806:


  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal629
  lea rdx , [ __literal629 ]
  lea r8 , [ falseLabel ]
  lea r9 , [ tmp4778 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$3

  lea rcx , [ this ]
  lea rdx , [ codeIfTrue ]
  call  __ASTTranslator__executeNode$1

  cmp [ codeIfFalse  + Variant_t.type], 0
  jz l4780

  lea rcx , [ this ]
  lea rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitJmp$1

  lea rcx , [ this ]
  lea rdx , [ falseLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
  lea rdx , [ codeIfFalse ]
  call  __ASTTranslator__executeNode$1

  jmp l4781

l4780:

  lea rcx , [ this ]
  lea rdx , [ falseLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

l4781:

  lea rcx , [ this ]
  lea rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1


  ; clean frame
  ; -----------
  lea  rcx, [ falseLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse41 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4778 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore codeIfTrue
  restore codeIfFalse
  restore falseLabel
  restore endLabel
  restore __cse41
  restore tmp4778
  restore tmp4779

; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeSwitch$1
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeSwitch$1_vcall:
__ASTTranslatorMIR1__executeNodeSwitch$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 24 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  children EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 11 )
  childrenCnt EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  varName EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  doneLabel EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  defaultLabel EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  jmpTable EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  symbolInfo EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 5 )
  tmp4782 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 12 , readHits= 12 )
  tmp4784 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  arrayOfValues EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  caseLabel EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  oneValue EQU rbp - 232 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  caseDefaultIdx EQU rbp - 236 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4783 EQU rbp - 240 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4785 EQU rbp - 244 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4786 EQU rbp - 248 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4789 EQU rbp - 252 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4792 EQU rbp - 256 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4793 EQU rbp - 260 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4794 EQU rbp - 264 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4799 EQU rbp - 268 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 272 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [childrenCnt + Variant_t.type], eax
  mov [varName + Variant_t.type], eax
  mov [doneLabel + Variant_t.type], eax
  mov [defaultLabel + Variant_t.type], eax
  mov [jmpTable + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax
  mov [tmp4782 + Variant_t.type], eax
  mov [tmp4784 + Variant_t.type], eax
  mov [arrayOfValues + Variant_t.type], eax
  mov [caseLabel + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ childrenCnt ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp4783 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4783 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4782 ]
  lea  rax , [ varName ]
  call  __ASTTranslator__evaluateNode$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4782 ]
  lea  rax , [ doneLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6807
  movsxd rax, dword [ doneLabel + Variant_t.value ]
  mov    qword [ doneLabel + Variant_t.value ], rax
l6807:


  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4782 ]
  lea  rax , [ defaultLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6808
  movsxd rax, dword [ defaultLabel + Variant_t.value ]
  mov    qword [ defaultLabel + Variant_t.value ], rax
l6808:


  lea  rcx, [ jmpTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ jmpTable ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4782 ]
  lea rdx , [ jmpTable ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 165
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6809
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6809:


  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal645 ]
  lea  r8 , [ defaultLabel ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ node ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea  rcx, [ tmp4784 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal646 ]
  lea  rdx , [ varName ]
  lea  r8 , [ tmp4784 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4784 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp4782 ]
  lea r8 , [ varName ]
  call  __ASTTranslatorMIR1_emitJmpByTable$2

  mov dword [ caseDefaultIdx ], -1

  mov dword [ tmp4783 ], 1

  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4785 ], eax

  mov dword [ idx ], 1

; 
; -----------------------------
; BEGIN: for idx in tmp4786 .. tmp4785
; 
l4787:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4785 ]
  jge l4788

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp4782 ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ arrayOfValues ]
  call  __MOLD_VariantLoadFromKey

  cmp [ arrayOfValues  + Variant_t.type], 0
  jz l4790

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ tmp4782 ]
  lea  rax , [ tmp4793 ]
  call  AST_IsEmpty

  mov dword [ tmp4794 ], 1

  mov eax, dword [ tmp4793 ]
  cmp eax, dword [ tmp4794 ]
  jnz l4795

  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseLabel ]
  lea rdx, [ doneLabel ]
  call __MOLD_VariantMove

  jmp l4796

l4795:

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4782 ]
  lea  rax , [ caseLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6810
  movsxd rax, dword [ caseLabel + Variant_t.value ]
  mov    qword [ caseLabel + Variant_t.value ], rax
l6810:


  lea rcx , [ this ]
  lea rdx , [ caseLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4782 ]
  call  __ASTTranslator__executeNode$1

  lea rcx , [ this ]
  lea rdx , [ doneLabel ]
  call  __ASTTranslatorMIR1_emitJmp$1

l4796:

; 
; -----------------------------
; BEGIN: for keys undefined values oneValue
; 
  jmp l4798

l4797:

  cmp [ oneValue + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ oneValue + Variant_t.value]
  mov dword [ tmp4799 ], eax

  lea  rcx , [ jmpTable ]
  lea  rdx , [ tmp4799 ]
  lea  r8 , [ caseLabel ]
  call  __MOLD_VariantStoreAtIndex_int32

  ret

l4798:

  lea  rcx , [ arrayOfValues ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneValue ]
  lea  r9 , [ l4797 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneValue
; -----------------------------
; 
  jmp l4791

l4790:

  mov eax, dword [ idx ]
  mov dword [ caseDefaultIdx ], eax

l4791:

  mov eax, dword [ idx ]
  add eax, dword [ tmp4783 ]
  mov dword [ idx ], eax

  jmp l4787

l4788:

; 
; END: for idx in tmp4786 .. tmp4785 step tmp4783
; -----------------------------
; 
  lea rcx , [ this ]
  lea rdx , [ defaultLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  mov dword [ tmp4786 ], -1

  mov eax, dword [ caseDefaultIdx ]
  cmp eax, dword [ tmp4786 ]
  jz l4800

  lea  rcx , [ children ]
  lea  rdx , [ caseDefaultIdx ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4782 ]
  call  __ASTTranslator__executeNode$1

l4800:

l4801:

  lea rcx , [ this ]
  lea rdx , [ doneLabel ]
  call  __ASTTranslatorMIR1_emitLabel$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea  rcx, [ tmp4784 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal647 ]
  lea  rdx , [ varName ]
  lea  r8 , [ tmp4784 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4784 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal631
  lea rdx , [ __literal631 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal6
  lea rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$1


  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ varName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ doneLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ jmpTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4782 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4784 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneValue

  add  rsp, 304
  pop  rbp
  ret


  restore this
  restore node
  restore children
  restore childrenCnt
  restore varName
  restore doneLabel
  restore defaultLabel
  restore jmpTable
  restore symbolInfo
  restore caseDefaultIdx
  restore tmp4782
  restore tmp4783
  restore tmp4784
  restore tmp4785
  restore tmp4786
  restore tmp4789
  restore tmp4792
  restore tmp4793
  restore tmp4794
  restore tmp4799
  restore idx
  restore arrayOfValues
  restore caseLabel
  restore oneValue

; -----------------------------------------------
; function __ASTTranslatorMIR1__evaluateStringFormatItemNode$2
; -----------------------------------------------
__ASTTranslatorMIR1__evaluateStringFormatItemNode$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  fmt EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  node EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 17 )
  tmp4803 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4805 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  __cse42 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4815 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4802 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4804 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp4808 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4810 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4812 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4814 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ fmt ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [tmp4803 + Variant_t.type], eax
  mov [tmp4805 + Variant_t.type], eax
  mov [__cse42 + Variant_t.type], eax
  mov [tmp4815 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4803 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4804 ], 65

  mov [ tmp4805 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4804 ]
  mov [ tmp4805 + Variant_t.value], rax

  lea rcx, [ tmp4803 ]
  lea rdx, [ tmp4805 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4806

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse42 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4804 ], 0

  lea  rcx , [ __cse42 ]
  lea  rdx , [ tmp4804 ]
  lea  r8 , [ tmp4805 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ fmt ]
  lea r8 , [ tmp4805 ]
  call  __ASTTranslatorMIR1__evaluateStringFormatItemNode$2

  ; __mold_syscall( 50 )
  lea rcx , [ fmt ]
; WARNING: Failed to get variable size: __literal648
  lea rdx , [ __literal648 ]
  call qword [rbx + 8 * 50 ]

  mov dword [ tmp4804 ], 1

  lea  rcx , [ __cse42 ]
  lea  rdx , [ tmp4804 ]
  lea  r8 , [ tmp4805 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ fmt ]
  lea r8 , [ tmp4805 ]
  call  __ASTTranslatorMIR1__evaluateStringFormatItemNode$2

  jmp l4807

l4806:

  mov dword [ tmp4808 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4805 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4804 ], 42

  mov [ tmp4803 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4804 ]
  mov [ tmp4803 + Variant_t.value], rax

  lea rcx, [ tmp4805 ]
  lea rdx, [ tmp4803 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4809

  mov dword [ tmp4810 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp4803 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp4803 ]
  lea rdx, [ __literal33 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4811

  mov dword [ tmp4812 ], 0

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp4803 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4803 + Variant_t.type ], 2
  jnz l4813

  lea  rcx , [ node ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp4805 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4804 ], 42

  mov [ tmp4815 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4804 ]
  mov [ tmp4815 + Variant_t.value], rax

  lea  rcx , [ tmp4805 ]
  lea  rdx , [ tmp4815 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4812 ], eax

l4813:

  mov eax, dword [ tmp4812 ]
  mov dword [ tmp4810 ], eax

l4811:

  mov eax, dword [ tmp4810 ]
  mov dword [ tmp4808 ], eax

l4809:

  cmp dword [ tmp4808 ], 0
  jz l4816

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4805 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4804 ], 0

  lea  rcx , [ tmp4805 ]
  lea  rdx , [ tmp4804 ]
  lea  r8 , [ tmp4815 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ fmt ]
  lea r8 , [ tmp4815 ]
  call  __ASTTranslatorMIR1__evaluateStringFormatItemNode$2

  jmp l4817

l4816:

  lea rcx , [ this ]
  lea rdx , [ node ]
  lea  rax , [ tmp4815 ]
  call  __ASTTranslator__evaluateNode$1

  ; __mold_syscall( 50 )
  lea rcx , [ fmt ]
  lea rdx , [ tmp4815 ]
  call qword [rbx + 8 * 50 ]

l4817:

l4807:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4803 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4805 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse42 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4815 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore fmt
  restore node
  restore tmp4802
  restore tmp4803
  restore tmp4804
  restore tmp4805
  restore __cse42
  restore tmp4808
  restore tmp4810
  restore tmp4812
  restore tmp4814
  restore tmp4815

; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodePrint$1
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodePrint$1_vcall:
__ASTTranslatorMIR1__executeNodePrint$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  node EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  children EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  params EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  childNode EQU rbp - 88 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  oneParam EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  tmp4825 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4826 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4827 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4822 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  xor eax, eax
  mov [children + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp4825 + Variant_t.type], eax
  mov [tmp4826 + Variant_t.type], eax
  mov [tmp4827 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate

; 
; -----------------------------
; BEGIN: for keys undefined values childNode
; 
  jmp l4819

l4818:

  lea rcx , [ this ]
  lea rdx , [ params ]
  lea r8 , [ childNode ]
  call  __ASTTranslatorMIR1__evaluateStringFormatItemNode$2

  ret

l4819:

  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l4818 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys undefined values oneParam
; 
  jmp l4821

l4820:

  lea rcx, [ oneParam ]
  lea rdx, [ __literal648 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4823

  lea rcx , [ this ]
  lea rdx , [ oneParam ]
  call  __ASTTranslator__releaseTempVar$1

l4823:

l4824:

  ret

l4821:

  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4820 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal649
  lea rdx , [ __literal649 ]
  lea r8 , [ params ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4826 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ children ]
  push rdi
  lea  rdi , [ tmp4827 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx , [ tmp4826 ]
  lea rdx , [ tmp4827 ]
  lea  rax , [ tmp4825 ]
  mov  r10d, 161
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6811
  movsxd rax, dword [ tmp4825 + Variant_t.value ]
  mov    qword [ tmp4825 + Variant_t.value ], rax
l6811:



  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  ; Skipped loop iterator oneParam
  lea  rcx, [ tmp4825 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4826 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4827 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore node
  restore children
  restore params
  restore childNode
  restore tmp4822
  restore oneParam
  restore tmp4825
  restore tmp4826
  restore tmp4827

; -----------------------------------------------
; function __ASTTranslatorMIR1__declareFunction$2
; -----------------------------------------------
__ASTTranslatorMIR1__declareFunction$2_vcall:
  ; skipped unused parameter [ funcName ]
  ; skipped unused parameter [ funcProto ]
__ASTTranslatorMIR1__declareFunction$2:

  ret


  restore this
  restore node
  restore children
  restore params
  restore childNode
  restore tmp4822
  restore oneParam
  restore tmp4825
  restore tmp4826
  restore tmp4827

; -----------------------------------------------
; function __ASTTranslatorMIR1__declareClass$2
; -----------------------------------------------
__ASTTranslatorMIR1__declareClass$2_vcall:
  ; skipped unused parameter [ className ]
__ASTTranslatorMIR1__declareClass$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  classProto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4828 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4829 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ className ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  xor eax, eax
  mov [tmp4828 + Variant_t.type], eax
  mov [tmp4829 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4829 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4829 ]
  lea rdx , [ classProto ]
  lea  rax , [ tmp4828 ]
  mov  r10d, 149
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6812
  movsxd rax, dword [ tmp4828 + Variant_t.value ]
  mov    qword [ tmp4828 + Variant_t.value ], rax
l6812:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4828 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4829 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore classProto
  restore tmp4828
  restore tmp4829

; -----------------------------------------------
; function __ASTTranslatorMIR1__emitFunctionBody$2
; -----------------------------------------------
__ASTTranslatorMIR1__emitFunctionBody$2_vcall:
__ASTTranslatorMIR1__emitFunctionBody$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 21 )
  funcName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  funcProto EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 14 )
  params EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  children EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  codeAst EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  rvName EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oldSymbolTable EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  procMeta EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp4831 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4832 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4834 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4835 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  item EQU rbp - 232 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4830 EQU rbp - 236 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4833 EQU rbp - 240 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4838 EQU rbp - 244 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  xor eax, eax
  mov [params + Variant_t.type], eax
  mov [children + Variant_t.type], eax
  mov [codeAst + Variant_t.type], eax
  mov [rvName + Variant_t.type], eax
  mov [oldSymbolTable + Variant_t.type], eax
  mov [procMeta + Variant_t.type], eax
  mov [tmp4831 + Variant_t.type], eax
  mov [tmp4832 + Variant_t.type], eax
  mov [tmp4834 + Variant_t.type], eax
  mov [tmp4835 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4830 ], 0

  lea  rcx , [ children ]
  lea  rdx , [ tmp4830 ]
  lea  r8 , [ codeAst ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ tmp4831 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4832 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4833 ], 1

  mov eax, dword [ tmp4833 ]
  mov [ tmp4834 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4834 + Variant_t.value], rax

  lea  rcx , [ tmp4831 ]
  lea  rdx , [ tmp4832 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal574
  lea rdx , [ __literal574 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea  rcx, [ tmp4835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal431 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4835 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ tmp4835 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal574
  lea rdx , [ __literal574 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ procMeta ]
  call __MOLD_VariantDestroy
  lea  rcx , [ procMeta ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp4834 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4834 ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove

  lea  rcx , [ procMeta ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ procMeta ]
  lea  rdx , [ __literal650 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4831 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4831 ]
  lea  rax , [ tmp4832 ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6813
  movsxd rax, dword [ tmp4832 + Variant_t.value ]
  mov    qword [ tmp4832 + Variant_t.value ], rax
l6813:


  lea  rcx, [ tmp4834 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4834 ]
  lea rdx, [ tmp4832 ]
  call __MOLD_VariantMove

  lea  rcx , [ procMeta ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ procMeta ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4834 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4834 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove

  lea  rcx , [ procMeta ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4834 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4834 ]
  lea rdx, [ rvName ]
  call __MOLD_VariantMove

  lea  rcx , [ procMeta ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  lea rdx , [ procMeta ]
  call  __ASTTranslatorMIR1_emitProcBegin$1

  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal317 ]
  lea  r8 , [ tmp4834 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4834  + Variant_t.type], 0
  jz l4836

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal651
  lea rdx , [ __literal651 ]
  call  __ASTTranslatorMIR1_emitJmp$1

  jmp l4837

l4836:

  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4831 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp4831 ]
  push rdi
  lea  rdi , [ tmp4832 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp4830 ], 0

  mov [ tmp4831 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4830 ]
  mov [ tmp4831 + Variant_t.value], rax

  lea rcx, [ tmp4832 ]
  lea rdx, [ tmp4831 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l4839

  lea rcx , [ this ]
  lea rdx , [ procMeta ]
  call  __ASTTranslatorMIR1_emitInitFrame$1

  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4831 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l4842

l4841:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __ASTTranslator__executeNode$1

  ret

l4842:

  lea  rcx , [ tmp4831 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4841 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea rcx , [ this ]
  call  __ASTTranslatorMIR1_emitRet$0

  jmp l4840

l4839:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal638
  lea rdx , [ __literal638 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$1

l4840:

l4837:

  lea rcx , [ this ]
  call  __ASTTranslatorMIR1_emitProcEnd$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ procMeta ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4831 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4832 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4834 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4835 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 272
  pop  rbp
  ret


  restore this
  restore funcName
  restore funcProto
  restore params
  restore children
  restore codeAst
  restore rvName
  restore oldSymbolTable
  restore procMeta
  restore tmp4830
  restore tmp4831
  restore tmp4832
  restore tmp4833
  restore tmp4834
  restore tmp4835
  restore tmp4838
  restore item

; -----------------------------------------------
; function __ASTTranslatorMIR1__dropRetVal$0
; -----------------------------------------------
__ASTTranslatorMIR1__dropRetVal$0_vcall:
__ASTTranslatorMIR1__dropRetVal$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  tmp4843 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4844 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4843 + Variant_t.type], eax
  mov [tmp4844 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4844 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp4844 ]
  lea  rax , [ tmp4843 ]
  mov  r10d, 166
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6814
  movsxd rax, dword [ tmp4843 + Variant_t.value ]
  mov    qword [ tmp4843 + Variant_t.value ], rax
l6814:



  ; clean frame
  ; -----------
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4844 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp4843
  restore tmp4844

; -----------------------------------------------
; function __ASTTranslatorMIR1_run$1
; -----------------------------------------------
__ASTTranslatorMIR1_run$1_vcall:
__ASTTranslatorMIR1_run$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 16 )
  ast EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp4845 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4846 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4850 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4853 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4854 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  methodName EQU rbp - 136 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  tmp4849 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  xor eax, eax
  mov [tmp4845 + Variant_t.type], eax
  mov [tmp4846 + Variant_t.type], eax
  mov [tmp4850 + Variant_t.type], eax
  mov [tmp4853 + Variant_t.type], eax
  mov [tmp4854 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ ast ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4845 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4845 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ this ]
  call  __ASTTranslator__emitGlobals$0

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal574
  lea rdx , [ __literal574 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal652
  lea rdx , [ __literal652 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal574
  lea rdx , [ __literal574 ]
  call  __ASTTranslatorMIR1_emitComment$1

  lea rcx , [ this ]
  lea rdx , [ ast ]
  call  __ASTTranslator__executeNode$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4845 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4846 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4845 ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp4846 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal585 ]
  lea  r8 , [ tmp4846 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values methodName
; 
  jmp l4848

l4847:

  lea  rcx , [ this ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ tmp4850 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4850 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4845 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4845 + Variant_t.type ], 0
  jnz l4851

  lea  rcx, [ tmp4854 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal653 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4854 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp4853 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4854 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp4853 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp4853 ]
  call qword [rbx + 8 * 41 ]

l4851:

l4852:

  ret

l4848:

  lea  rcx , [ tmp4846 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ methodName ]
  lea  r9 , [ l4847 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values methodName
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4845 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4846 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4850 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4853 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4854 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator methodName

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore ast
  restore tmp4845
  restore tmp4846
  restore tmp4849
  restore tmp4850
  restore tmp4853
  restore tmp4854
  restore methodName

; -----------------------------------------------
; function __ASTTranslatorMIR1_connectTo$1
; -----------------------------------------------
__ASTTranslatorMIR1_connectTo$1_vcall:
__ASTTranslatorMIR1_connectTo$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  obj EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ obj ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ obj ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ obj ]
  call __MOLD_VariantMove


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore obj
  restore rv

; -----------------------------------------------
; function __PipeAbstract_constructor$0
; -----------------------------------------------
__PipeAbstract_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 4 , readHits= 3 )
  tmp4855 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4856 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4855 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp4855 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ tmp4855 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4855 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4855 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4855 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp4856 ], 0

  mov eax, dword [ tmp4856 ]
  mov [ tmp4855 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4855 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp4855 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4855 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp4855
  restore tmp4856

; -----------------------------------------------
; function __PipeAbstract__emitOneItem$1
; -----------------------------------------------
__PipeAbstract__emitOneItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp4858 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4860 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  buffer EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  outputObject EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4857 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4859 EQU rbp - 112 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4863 EQU rbp - 116 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  cnt EQU rbp - 120 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp4858 + Variant_t.type], eax
  mov [tmp4860 + Variant_t.type], eax
  mov [buffer + Variant_t.type], eax
  mov [outputObject + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp4858 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4859 ], 1

  mov eax, dword [ tmp4859 ]
  mov [ tmp4860 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4860 + Variant_t.value], rax

  lea rcx, [ tmp4858 ]
  lea rdx, [ tmp4860 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4861

  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ buffer ]
  push rdi
  lea  rdi , [ tmp4860 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp4860 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4860 + Variant_t.value]
  mov dword [ cnt ], eax

  lea  rcx , [ buffer ]
  lea  rdx , [ cnt ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l4862

l4861:

  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ outputObject ]
  lea rdx , [ item ]
  lea  rax , [ tmp4860 ]
  mov  r10d, 157
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6815
  movsxd rax, dword [ tmp4860 + Variant_t.value ]
  mov    qword [ tmp4860 + Variant_t.value ], rax
l6815:


l4862:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4858 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4860 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret


  restore this
  restore item
  restore tmp4857
  restore tmp4858
  restore tmp4859
  restore tmp4860
  restore tmp4863
  restore buffer
  restore cnt
  restore outputObject

; -----------------------------------------------
; function __PipeAbstract__replaceLastItem$1
; -----------------------------------------------
__PipeAbstract__replaceLastItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4865 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4867 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  buffer EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4864 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4866 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4870 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp4871 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  cnt EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp4865 + Variant_t.type], eax
  mov [tmp4867 + Variant_t.type], eax
  mov [buffer + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp4865 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4866 ], 1

  mov eax, dword [ tmp4866 ]
  mov [ tmp4867 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4867 + Variant_t.value], rax

  lea rcx, [ tmp4865 ]
  lea rdx, [ tmp4867 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4868

  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ buffer ]
  push rdi
  lea  rdi , [ tmp4867 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp4867 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4867 + Variant_t.value]
  mov dword [ cnt ], eax

  mov dword [ tmp4871 ], 1

  mov eax, dword [ cnt ]
  sub eax, dword [ tmp4871 ]
  mov dword [ tmp4870 ], eax

  lea  rcx , [ buffer ]
  lea  rdx , [ tmp4870 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l4869

l4868:

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal656
  lea rcx , [ __literal656 ]
  call qword [rbx + 8 * 41 ]

l4869:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4865 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4867 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore item
  restore tmp4864
  restore tmp4865
  restore tmp4866
  restore tmp4867
  restore tmp4870
  restore tmp4871
  restore buffer
  restore cnt

; -----------------------------------------------
; function __PipeAbstract_connectTo$1
; -----------------------------------------------
__PipeAbstract_connectTo$1_vcall:
__PipeAbstract_connectTo$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  outputObject EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ outputObject ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ outputObject ]
  call __MOLD_VariantMove


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore this
  restore outputObject
  restore rv

; -----------------------------------------------
; function __PipeAbstract_processOneItem$1
; -----------------------------------------------
__PipeAbstract_processOneItem$1_vcall:
  ; skipped unused parameter [ item ]
__PipeAbstract_processOneItem$1:

  ret


  restore this
  restore outputObject
  restore rv

; -----------------------------------------------
; function __PipeAbstract_processArrayOfItems$1
; -----------------------------------------------
__PipeAbstract_processArrayOfItems$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  arrayOfItems EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp4874 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  oneItem EQU rbp - 72 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ arrayOfItems ], xmm0
  xor eax, eax
  mov [tmp4874 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l4873

l4872:

  lea rcx , [ this ]
  lea rdx , [ oneItem ]
  lea  rax , [ tmp4874 ]
  mov  r10d, 157
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6816
  movsxd rax, dword [ tmp4874 + Variant_t.value ]
  mov    qword [ tmp4874 + Variant_t.value ], rax
l6816:


  ret

l4873:

  lea  rcx , [ arrayOfItems ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l4872 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4874 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore arrayOfItems
  restore tmp4874
  restore oneItem

; -----------------------------------------------
; function __PipeAbstract_flush$0
; -----------------------------------------------
__PipeAbstract_flush$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 5 )
  buffer EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  outputObject EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4877 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  oneItem EQU rbp - 88 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [buffer + Variant_t.type], eax
  mov [outputObject + Variant_t.type], eax
  mov [tmp4877 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l4876

l4875:

  lea rcx , [ outputObject ]
  lea rdx , [ oneItem ]
  lea  rax , [ tmp4877 ]
  mov  r10d, 157
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6817
  movsxd rax, dword [ tmp4877 + Variant_t.value ]
  mov    qword [ tmp4877 + Variant_t.value ], rax
l6817:


  ret

l4876:

  lea  rcx , [ buffer ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l4875 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx, [ tmp4877 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4877 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4877 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4877 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore buffer
  restore outputObject
  restore tmp4877
  restore oneItem

; -----------------------------------------------
; function __MIRQuadCollector_constructor$0
; -----------------------------------------------
__MIRQuadCollector_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  tmp4878 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4879 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4880 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4878 + Variant_t.type], eax
  mov [tmp4879 + Variant_t.type], eax
  mov [tmp4880 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp4878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4878 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ tmp4878 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4878 ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ tmp4879 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4879 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ tmp4878 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp4879 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal658 ]
  lea  r8 , [ tmp4878 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4878 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4879 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4880 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore tmp4878
  restore tmp4879
  restore tmp4880

; -----------------------------------------------
; function __MIRQuadCollector__pad$2
; -----------------------------------------------
__MIRQuadCollector__pad$2:

  ; init frame
  ; ----------
  rv EQU rdi
  item EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 5 )
  desiredLen EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4888 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4889 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  sep EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  v EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  padCnt EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4881 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4890 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4891 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4892 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 176

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ desiredLen ], xmm0
  xor eax, eax
  mov [tmp4888 + Variant_t.type], eax
  mov [tmp4889 + Variant_t.type], eax
  mov [sep + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [padCnt + Variant_t.type], eax

  ; code
  ; ----

  cmp [ item + Variant_t.type ], 0
  jnz l4882

  lea rcx, [ item ]
  lea rdx, [ __literal88 ]
  call __MOLD_VariantMove

l4882:

l4883:

  cmp [ item + Variant_t.type ], 7
  jnz l4884

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal424 ]
  call __MOLD_VariantMove

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys undefined values v
; 
  jmp l4887

l4886:

  lea  rcx, [ tmp4888 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ sep ]
  lea  r8 , [ tmp4888 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ v ]
  push rdi
  lea  rdi , [ tmp4889 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4888 ]
  lea  rdx , [ tmp4889 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal423 ]
  call __MOLD_VariantMove

  ret

l4887:

  lea  rcx , [ item ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ v ]
  lea  r9 , [ l4886 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values v
; -----------------------------
; 
  lea  rcx , [ rv ]
  lea  rdx , [ __literal76 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l4885

l4884:

  ; __mold_syscall( 42 )
  lea rcx , [ item ]
  push rdi
  lea  rdi , [ rv ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  ; __mold_syscall( 43 )
  lea rcx , [ rv ]
  push rdi
  lea  rdi , [ tmp4889 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea  rcx , [ desiredLen ]
  lea  rdx , [ tmp4889 ]
  lea  r8 , [ padCnt ]
  call  __MOLD_VariantSub

  mov dword [ tmp4890 ], 1

  cmp [ padCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ padCnt + Variant_t.value]
  mov dword [ tmp4891 ], eax

  mov dword [ idx ], 0

; 
; -----------------------------
; BEGIN: for idx in tmp4892 .. tmp4891
; 
l4893:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4891 ]
  jge l4894

  lea  rcx , [ rv ]
  lea  rdx , [ __literal328 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  mov eax, dword [ idx ]
  add eax, dword [ tmp4890 ]
  mov dword [ idx ], eax

  jmp l4893

l4894:

; 
; END: for idx in tmp4892 .. tmp4891 step tmp4890
; -----------------------------
; 
l4885:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4888 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4889 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator v
  lea  rcx, [ padCnt ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rdi
  pop  rbp
  ret


  restore item
  restore desiredLen
  restore rv
  restore tmp4881
  restore tmp4888
  restore tmp4889
  restore sep
  restore v
  restore tmp4890
  restore tmp4891
  restore tmp4892
  restore padCnt
  restore idx

; -----------------------------------------------
; function __MIRQuadCollector_processOneItem$1
; -----------------------------------------------
__MIRQuadCollector_processOneItem$1_vcall:
__MIRQuadCollector_processOneItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 3 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp4895 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4896 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  cnt EQU rbp - 76 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp4897 EQU rbp - 80 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [tmp4895 + Variant_t.type], eax
  mov [tmp4896 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ tmp4896 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp4896 ]
  push rdi
  lea  rdi , [ tmp4895 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp4895 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4895 + Variant_t.value]
  mov dword [ cnt ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ tmp4895 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4895 ]
  lea  rdx , [ cnt ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4895 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4896 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore item
  restore cnt
  restore tmp4895
  restore tmp4896
  restore tmp4897

; -----------------------------------------------
; function __MIRQuadCollector_getQuads$0
; -----------------------------------------------
__MIRQuadCollector_getQuads$0:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rdi
  pop  rbp
  ret


  restore this
  restore rv

; -----------------------------------------------
; function __MIRQuadCollector__printSymbolInfoRow$5
; -----------------------------------------------
__MIRQuadCollector__printSymbolInfoRow$5:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 5 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  readHits EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  writeHits EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  type EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  kind EQU rbp - 104 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp4898 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 5 , readHits= 5 )
  tmp4900 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp4899 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ readHits ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ writeHits ], xmm0
  mov rax, qword [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ type ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ kind ], xmm0
  xor eax, eax
  mov [tmp4898 + Variant_t.type], eax
  mov [tmp4900 + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp4899 ], 10

  mov [ tmp4900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4899 ]
  mov [ tmp4900 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ tmp4900 ]
  lea  rax , [ tmp4898 ]
  call  __MIRQuadCollector__pad$2

  lea rcx, [ name ]
  lea rdx, [ tmp4898 ]
  call __MOLD_VariantMove

  mov dword [ tmp4899 ], 4

  mov [ tmp4900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4899 ]
  mov [ tmp4900 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ readHits ]
  lea r8 , [ tmp4900 ]
  lea  rax , [ tmp4898 ]
  call  __MIRQuadCollector__pad$2

  lea rcx, [ readHits ]
  lea rdx, [ tmp4898 ]
  call __MOLD_VariantMove

  mov dword [ tmp4899 ], 4

  mov [ tmp4900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4899 ]
  mov [ tmp4900 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ writeHits ]
  lea r8 , [ tmp4900 ]
  lea  rax , [ tmp4898 ]
  call  __MIRQuadCollector__pad$2

  lea rcx, [ writeHits ]
  lea rdx, [ tmp4898 ]
  call __MOLD_VariantMove

  mov dword [ tmp4899 ], 9

  mov [ tmp4900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4899 ]
  mov [ tmp4900 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ type ]
  lea r8 , [ tmp4900 ]
  lea  rax , [ tmp4898 ]
  call  __MIRQuadCollector__pad$2

  lea rcx, [ type ]
  lea rdx, [ tmp4898 ]
  call __MOLD_VariantMove

  mov dword [ tmp4899 ], 8

  mov [ tmp4900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4899 ]
  mov [ tmp4900 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ kind ]
  lea r8 , [ tmp4900 ]
  lea  rax , [ tmp4898 ]
  call  __MIRQuadCollector__pad$2

  lea rcx, [ kind ]
  lea rdx, [ tmp4898 ]
  call __MOLD_VariantMove

  lea rcx, [__fmt53 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4898 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4900 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret


  restore this
  restore name
  restore readHits
  restore writeHits
  restore type
  restore kind
  restore tmp4898
  restore tmp4899
  restore tmp4900

; -----------------------------------------------
; function __MIRQuadCollector__dumpFrameInfo$1
; -----------------------------------------------
__MIRQuadCollector__dumpFrameInfo$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  frameInfo EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp4903 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4904 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4905 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4906 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4907 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4908 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  item EQU rbp - 152 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 11 )
  tmp4909 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ frameInfo ], xmm0
  xor eax, eax
  mov [tmp4903 + Variant_t.type], eax
  mov [tmp4904 + Variant_t.type], eax
  mov [tmp4905 + Variant_t.type], eax
  mov [tmp4906 + Variant_t.type], eax
  mov [tmp4907 + Variant_t.type], eax
  mov [tmp4908 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal660
  lea rdx , [ __literal660 ]
; WARNING: Failed to get variable size: __literal661
  lea r8 , [ __literal661 ]
; WARNING: Failed to get variable size: __literal662
  lea r9 , [ __literal662 ]
; WARNING: Failed to get variable size: __literal663
  lea rax, [ __literal663 ]
  push rax
; WARNING: Failed to get variable size: __literal171
  lea rax, [ __literal171 ]
  push rax
  call  __MIRQuadCollector__printSymbolInfoRow$5
  add rsp, 16

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal664
  lea rdx , [ __literal664 ]
; WARNING: Failed to get variable size: __literal665
  lea r8 , [ __literal665 ]
; WARNING: Failed to get variable size: __literal665
  lea r9 , [ __literal665 ]
; WARNING: Failed to get variable size: __literal666
  lea rax, [ __literal666 ]
  push rax
; WARNING: Failed to get variable size: __literal667
  lea rax, [ __literal667 ]
  push rax
  call  __MIRQuadCollector__printSymbolInfoRow$5
  add rsp, 16

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l4902

l4901:

  lea  rcx , [ item ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4903 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp4904 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp4905 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4906 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ item ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4908 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4908 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4908 + Variant_t.value]
  mov dword [ tmp4909 ], eax

  lea  rcx , [ SYMBOL_KIND_AS_TEXT ]
  lea  rdx , [ tmp4909 ]
  lea  r8 , [ tmp4907 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
  lea rdx , [ tmp4903 ]
  lea r8 , [ tmp4904 ]
  lea r9 , [ tmp4905 ]
  lea rax, [ tmp4906 ]
  push rax
  lea rax, [ tmp4907 ]
  push rax
  call  __MIRQuadCollector__printSymbolInfoRow$5
  add rsp, 16

  ret

l4902:

  lea  rcx , [ frameInfo ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4901 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4903 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4904 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4905 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4906 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4907 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4908 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore frameInfo
  restore tmp4903
  restore tmp4904
  restore tmp4905
  restore tmp4906
  restore tmp4907
  restore tmp4908
  restore tmp4909
  restore item

; -----------------------------------------------
; function __MIRQuadCollector_printQuads$0
; -----------------------------------------------
__MIRQuadCollector_printQuads$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 12 )
  code EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp4912 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 16 , readHits= 16 )
  tmp4932 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp4936 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4937 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4938 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 5 , readHits= 5 )
  item EQU rbp - 136 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 27 )
  opcode EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 10 )
  __cse43 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  dst EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  x EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  y EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paddedOpcode EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paddedDst EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paddedX EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paddedY EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp4913 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 19 , readHits= 19 )
  tmp4914 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4917 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4920 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4923 EQU rbp - 300 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4926 EQU rbp - 304 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4929 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4933 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 352

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [code + Variant_t.type], eax
  mov [tmp4912 + Variant_t.type], eax
  mov [tmp4932 + Variant_t.type], eax
  mov [tmp4936 + Variant_t.type], eax
  mov [tmp4937 + Variant_t.type], eax
  mov [tmp4938 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [opcode + Variant_t.type], eax
  mov [__cse43 + Variant_t.type], eax
  mov [dst + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [paddedOpcode + Variant_t.type], eax
  mov [paddedDst + Variant_t.type], eax
  mov [paddedX + Variant_t.type], eax
  mov [paddedY + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l4911

l4910:

  mov dword [ tmp4913 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ opcode ]
  lea rdx, [ __literal592 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4915

  mov dword [ tmp4913 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ __cse43 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ __cse43 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4912 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt54 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ __cse43 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp4912 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp4912 ]
  call  __MIRQuadCollector__dumpFrameInfo$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal658 ]
  lea  r8 , [ __cse43 ]
  call  __MOLD_VariantStoreAtKey

  jmp l4916

l4915:

  lea rcx, [ opcode ]
  lea rdx, [ __literal593 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4918

  lea rcx, [__fmt55 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4919

l4918:

  lea rcx, [ opcode ]
  lea rdx, [ __literal594 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4921

  lea rcx, [__fmt56 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4922

l4921:

  lea rcx, [ opcode ]
  lea rdx, [ __literal588 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4924

  mov dword [ tmp4913 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ tmp4912 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt57 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4925

l4924:

  lea rcx, [ opcode ]
  lea rdx, [ __literal142 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4927

  mov dword [ tmp4913 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ tmp4912 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt58 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4928

l4927:

  lea rcx, [ opcode ]
  lea rdx, [ __literal649 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4930

  mov dword [ tmp4913 ], 28

  mov [ tmp4912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ tmp4912 ]
  lea  rax , [ tmp4932 ]
  call  __MIRQuadCollector__pad$2

  mov dword [ tmp4913 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ tmp4912 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt59 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4931

l4930:

  lea rcx, [ opcode ]
  lea rdx, [ __literal103 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4934

  mov dword [ tmp4913 ], 28

  mov [ tmp4912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ tmp4912 ]
  lea  rax , [ tmp4932 ]
  call  __MIRQuadCollector__pad$2

  mov dword [ tmp4913 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ tmp4912 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4913 ], 8

  mov [ tmp4937 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4937 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp4912 ]
  lea r8 , [ tmp4937 ]
  lea  rax , [ tmp4936 ]
  call  __MIRQuadCollector__pad$2

  mov dword [ tmp4913 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ tmp4937 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4913 ], 8

  mov [ tmp4912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ tmp4937 ]
  lea r8 , [ tmp4912 ]
  lea  rax , [ tmp4938 ]
  call  __MIRQuadCollector__pad$2

  mov dword [ tmp4913 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ tmp4912 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt60 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4935

l4934:

  mov dword [ tmp4913 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4913 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4913 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp4913 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp4913 ], 28

  mov [ tmp4912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ opcode ]
  lea r8 , [ tmp4912 ]
  lea  rax , [ tmp4938 ]
  call  __MIRQuadCollector__pad$2

  lea  rcx, [ paddedOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedOpcode ]
  lea rdx, [ tmp4938 ]
  call __MOLD_VariantMove

  mov dword [ tmp4913 ], 8

  mov [ tmp4912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ tmp4912 ]
  lea  rax , [ tmp4938 ]
  call  __MIRQuadCollector__pad$2

  lea  rcx, [ paddedDst ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedDst ]
  lea rdx, [ tmp4938 ]
  call __MOLD_VariantMove

  mov dword [ tmp4913 ], 8

  mov [ tmp4912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ x ]
  lea r8 , [ tmp4912 ]
  lea  rax , [ tmp4938 ]
  call  __MIRQuadCollector__pad$2

  lea  rcx, [ paddedX ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedX ]
  lea rdx, [ tmp4938 ]
  call __MOLD_VariantMove

  mov dword [ tmp4913 ], 8

  mov [ tmp4912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4913 ]
  mov [ tmp4912 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ y ]
  lea r8 , [ tmp4912 ]
  lea  rax , [ tmp4938 ]
  call  __MIRQuadCollector__pad$2

  lea  rcx, [ paddedY ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedY ]
  lea rdx, [ tmp4938 ]
  call __MOLD_VariantMove

  lea rcx, [__fmt61 ]
  call __MOLD_PrintFormatFromMemory

l4935:

l4931:

l4928:

l4925:

l4922:

l4919:

l4916:

  ret

l4911:

  lea  rcx , [ code ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4910 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4912 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4932 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4936 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4937 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4938 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse43 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedDst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedX ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedY ]
  call __MOLD_VariantDestroy

  add  rsp, 352
  pop  rbp
  ret


  restore this
  restore code
  restore tmp4912
  restore tmp4913
  restore tmp4914
  restore tmp4917
  restore tmp4920
  restore tmp4923
  restore tmp4926
  restore tmp4929
  restore tmp4932
  restore tmp4933
  restore tmp4936
  restore tmp4937
  restore tmp4938
  restore item
  restore opcode
  restore __cse43
  restore dst
  restore x
  restore y
  restore paddedOpcode
  restore paddedDst
  restore paddedX
  restore paddedY

; -----------------------------------------------
; function __CodeGeneratorX64_constructor$0
; -----------------------------------------------
__CodeGeneratorX64_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 5 , readHits= 4 )
  tmp4939 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4940 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp4939 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp4939 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4939 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp4939 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp4940 ], 0

  mov eax, dword [ tmp4940 ]
  mov [ tmp4939 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4939 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal680 ]
  lea  r8 , [ tmp4939 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4939 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4939 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ tmp4939 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp4939 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4939 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal682 ]
  lea  r8 , [ tmp4939 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4939 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore tmp4939
  restore tmp4940

; -----------------------------------------------
; function __CodeGeneratorX64_lea$2
; -----------------------------------------------
__CodeGeneratorX64_lea$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt62 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64_push$1
; -----------------------------------------------
__CodeGeneratorX64_push$1_vcall:
__CodeGeneratorX64_push$1:

  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt63 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore x

; -----------------------------------------------
; function __CodeGeneratorX64_pop$1
; -----------------------------------------------
__CodeGeneratorX64_pop$1_vcall:
__CodeGeneratorX64_pop$1:

  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt64 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore x

; -----------------------------------------------
; function __CodeGeneratorX64_mov$2
; -----------------------------------------------
__CodeGeneratorX64_mov$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt65 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64_store$2
; -----------------------------------------------
__CodeGeneratorX64_store$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt66 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64_store32$2
; -----------------------------------------------
__CodeGeneratorX64_store32$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt67 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64_store64$2
; -----------------------------------------------
__CodeGeneratorX64_store64$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt68 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64_call$1
; -----------------------------------------------
__CodeGeneratorX64_call$1_vcall:
__CodeGeneratorX64_call$1:

  ; init frame
  ; ----------
  name EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt69 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore name

; -----------------------------------------------
; function __CodeGeneratorX64_call1$2
; -----------------------------------------------
__CodeGeneratorX64_call1$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal693
  lea rdx , [ __literal693 ]
  lea r8 , [ x ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __CodeGeneratorX64_call$1


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore name
  restore x

; -----------------------------------------------
; function __CodeGeneratorX64_call2$3
; -----------------------------------------------
__CodeGeneratorX64_call2$3:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal693
  lea rdx , [ __literal693 ]
  lea r8 , [ x ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal694
  lea rdx , [ __literal694 ]
  lea r8 , [ y ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __CodeGeneratorX64_call$1


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore name
  restore x
  restore y

; -----------------------------------------------
; function __CodeGeneratorX64_call3$4
; -----------------------------------------------
__CodeGeneratorX64_call3$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 4 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  z EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ z ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal693
  lea rdx , [ __literal693 ]
  lea r8 , [ x ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal694
  lea rdx , [ __literal694 ]
  lea r8 , [ y ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal695
  lea rdx , [ __literal695 ]
  lea r8 , [ z ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __CodeGeneratorX64_call$1


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore name
  restore x
  restore y
  restore z

; -----------------------------------------------
; function __CodeGeneratorX64_call3AndDestroy$4
; -----------------------------------------------
__CodeGeneratorX64_call3AndDestroy$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  x EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  y EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  dst EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 5 )
  tmp4941 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4943 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dst ], xmm0

  ; code
  ; ----

  mov dword [ tmp4941 ], 1

  lea rcx, [ x ]
  lea rdx, [ dst ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4942

  lea  rcx , [ y ]
  lea  rdx , [ dst ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4941 ], eax

l4942:

  cmp dword [ tmp4941 ], 0
  jz l4944

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal693
  lea rdx , [ __literal693 ]
  lea r8 , [ x ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal694
  lea rdx , [ __literal694 ]
  lea r8 , [ y ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal695
  lea rdx , [ __literal695 ]
  lea r8 , [ dst ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __CodeGeneratorX64_call$1

  jmp l4945

l4944:

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

l4945:


  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret


  restore this
  restore name
  restore x
  restore y
  restore dst
  restore tmp4941
  restore tmp4943

; -----------------------------------------------
; function __CodeGeneratorX64_variantMove$2
; -----------------------------------------------
__CodeGeneratorX64_variantMove$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt70 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64_variantDestroy$1
; -----------------------------------------------
__CodeGeneratorX64_variantDestroy$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 2 )
  xInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  tmp4946 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp4953 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp4947 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4949 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4951 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp4952 EQU rbp - 104 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp4955 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [xInfo + Variant_t.type], eax
  mov [tmp4946 + Variant_t.type], eax
  mov [tmp4953 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp4946 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4946 ]
  lea  rdx , [ x ]
  lea  r8 , [ xInfo ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4947 ], 1

  cmp [ xInfo  + Variant_t.type], 0
  jz l4948

  mov dword [ tmp4949 ], 1

  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4946 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4952 ], 1

  mov [ tmp4953 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4952 ]
  mov [ tmp4953 + Variant_t.value], rax

  lea rcx, [ tmp4946 ]
  lea rdx, [ tmp4953 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4950

  mov dword [ tmp4951 ], 1

  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4953 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4952 ], 2

  mov [ tmp4946 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4952 ]
  mov [ tmp4946 + Variant_t.value], rax

  lea rcx, [ tmp4953 ]
  lea rdx, [ tmp4946 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4954

  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4946 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp4952 ], 4

  mov [ tmp4953 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4952 ]
  mov [ tmp4953 + Variant_t.value], rax

  lea  rcx , [ tmp4946 ]
  lea  rdx , [ tmp4953 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4951 ], eax

l4954:

  mov eax, dword [ tmp4951 ]
  mov dword [ tmp4949 ], eax

l4950:

  mov eax, dword [ tmp4949 ]
  mov dword [ tmp4947 ], eax

l4948:

  cmp dword [ tmp4947 ], 0
  jz l4956

  lea rcx, [__fmt71 ]
  call __MOLD_PrintFormatFromMemory

l4956:

l4957:


  ; clean frame
  ; -----------
  lea  rcx, [ xInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4946 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4953 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore x
  restore xInfo
  restore tmp4946
  restore tmp4947
  restore tmp4949
  restore tmp4951
  restore tmp4952
  restore tmp4953
  restore tmp4955

; -----------------------------------------------
; function __CodeGeneratorX64_getVariableSize$1
; -----------------------------------------------
__CodeGeneratorX64_getVariableSize$1:

  ; init frame
  ; ----------
  varSize EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  varName EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 3 )
  tmp4961 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp4970 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp4980 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp4981 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 17 )
  tmp4958 EQU rbp - 124 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4962 EQU rbp - 128 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4965 EQU rbp - 132 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4967 EQU rbp - 136 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp4969 EQU rbp - 140 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp4977 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ varName ], xmm0
  xor eax, eax
  mov [tmp4961 + Variant_t.type], eax
  mov [tmp4970 + Variant_t.type], eax
  mov [tmp4980 + Variant_t.type], eax
  mov [tmp4981 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea rcx, [ varName ]
  lea rdx, [ __literal639 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l4959

  mov dword [ varSize ], 16

  jmp l4960

l4959:

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp4961 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4961 ]
  lea  rdx , [ varName ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolInfo + Variant_t.type ], 0
  jnz l4963

  lea rcx, [__fmt72 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ varSize ], 16

  jmp l4964

l4963:

  mov dword [ tmp4965 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4961 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp4961  + Variant_t.type], 0
  jz l4966

  mov dword [ tmp4967 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4970 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp4970 ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4968

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4970 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4970 ]
  lea  rdx , [ __literal160 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4967 ], eax

l4968:

  mov eax, dword [ tmp4967 ]
  mov dword [ tmp4965 ], eax

l4966:

  cmp dword [ tmp4965 ], 0
  jz l4971

  mov dword [ varSize ], 16

  jmp l4972

l4971:

  mov dword [ tmp4967 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4970 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp4970 ]
  lea rdx, [ __literal157 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4973

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4970 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4970 ]
  lea  rdx , [ __literal158 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4967 ], eax

l4973:

  cmp dword [ tmp4967 ], 0
  jz l4974

  mov dword [ varSize ], 8

  jmp l4975

l4974:

  mov dword [ tmp4969 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4970 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp4970 ]
  lea rdx, [ __literal154 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l4976

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4970 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp4970 ]
  lea  rdx , [ __literal159 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp4969 ], eax

l4976:

  cmp dword [ tmp4969 ], 0
  jz l4978

  mov dword [ varSize ], 4

  jmp l4979

l4978:

  mov dword [ varSize ], -1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp4981 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp4981 ]
  push rdi
  lea  rdi , [ tmp4970 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp4980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal702 ]
  lea  rdx , [ tmp4970 ]
  lea  r8 , [ tmp4980 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp4980 ]
  call qword [rbx + 8 * 41 ]

l4979:

l4975:

l4972:

l4964:

l4960:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4961 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4970 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4980 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4981 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rdi
  pop  rbp
  ret


  restore this
  restore varName
  restore varSize
  restore tmp4958
  restore tmp4961
  restore tmp4962
  restore tmp4965
  restore tmp4967
  restore tmp4969
  restore tmp4970
  restore tmp4977
  restore tmp4980
  restore tmp4981
  restore symbolInfo

; -----------------------------------------------
; function __CodeGeneratorX64_pushOneParameterBeforeCall$2
; -----------------------------------------------
__CodeGeneratorX64_pushOneParameterBeforeCall$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  param EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 7 )
  tmp4990 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  paramIdx EQU rbp - 60 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 4 )
  varSize EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 6 )
  tmp4982 EQU rbp - 68 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp4983 EQU rbp - 72 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ param ], xmm0
  mov dword [ paramIdx ], r8d
  xor eax, eax
  mov [tmp4990 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ param ]
  lea  rax , [ varSize ]
  call  __CodeGeneratorX64_getVariableSize$1

  mov dword [ tmp4983 ], 4

  mov eax, dword [ paramIdx ]
  cmp eax, dword [ tmp4983 ]
  jge l4984

; 
; -----------------------------
; BEGIN: switch varSize
; 
  mov eax, dword [ varSize ]
  sub eax, 4
  cmp eax, 12
  ja l4987
  movsx rax, word [ __jmptable4988 + rax * 2]
  lea rax, [ l4987 + rax]
  jmp rax

l4989:

  lea  rcx , [ REG_PARAMS32 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp4990 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt73 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4986

l4991:

  lea  rcx , [ REG_PARAMS64 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp4990 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt74 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4986

l4992:

  lea  rcx , [ REG_PARAMS64 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp4990 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt75 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4986

l4987:

l4986:

; 
; END: switch varSize
; -----------------------------
; 
  jmp l4985

l4984:

; 
; -----------------------------
; BEGIN: switch varSize
; 
  mov eax, dword [ varSize ]
  sub eax, 4
  cmp eax, 12
  ja l4994
  movsx rax, word [ __jmptable4995 + rax * 2]
  lea rax, [ l4994 + rax]
  jmp rax

l4996:

  lea rcx, [__fmt76 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4993

l4997:

  lea rcx, [__fmt77 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4993

l4998:

  lea rcx, [__fmt78 ]
  call __MOLD_PrintFormatFromMemory

  jmp l4993

l4994:

l4993:

; 
; END: switch varSize
; -----------------------------
; 
l4985:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp4990 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret


  restore this
  restore param
  restore paramIdx
  restore varSize
  restore tmp4982
  restore tmp4983
  restore tmp4990

; -----------------------------------------------
; function __CodeGeneratorX64_pushParametersBeforeCall$1
; -----------------------------------------------
__CodeGeneratorX64_pushParametersBeforeCall$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  params EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  oneParam EQU rbp - 56 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  tmp5001 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 64 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ params ], xmm0
  ; Skipped loop iterator undefined

  ; code
  ; ----

; 
; -----------------------------
; BEGIN: for keys idx values oneParam
; 
  jmp l5000

l4999:

  cmp [ oneParam  + Variant_t.type], 0
  jz l5002

  lea rcx , [ this ]
  lea rdx , [ oneParam ]
  mov r8d , dword [ idx ]
  call  __CodeGeneratorX64_pushOneParameterBeforeCall$2

  jmp l5003

l5002:

  lea rcx, [__fmt79 ]
  call __MOLD_PrintFormatFromMemory

l5003:

  ret

l5000:

  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4999 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys idx values oneParam
; -----------------------------
; 

  ; clean frame
  ; -----------
  ; Skipped loop iterator oneParam

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore params
  restore tmp5001
  restore idx
  restore oneParam

; -----------------------------------------------
; function __CodeGeneratorX64__hash$1
; -----------------------------------------------
__CodeGeneratorX64__hash$1:

  ; init frame
  ; ----------
  rv EQU rdi
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 6 )
  tmp5004 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp5008 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp5009 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  item EQU rbp - 104 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp5005 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  xor eax, eax
  mov [tmp5004 + Variant_t.type], eax
  mov [tmp5008 + Variant_t.type], eax
  mov [tmp5009 + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  ; __mold_syscall( 44 )
  lea rcx , [ x ]
  push rdi
  lea  rdi , [ tmp5004 ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5004 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  cmp [ x + Variant_t.type ], 7
  jnz l5006

  ; __mold_syscall( 43 )
  lea rcx , [ x ]
  push rdi
  lea  rdi , [ tmp5009 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5009 ]
  push rdi
  lea  rdi , [ tmp5004 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp5008 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ tmp5004 ]
  lea  r8 , [ tmp5008 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5008 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l5011

l5010:

  lea rcx , [ this ]
  lea rdx , [ item ]
  lea  rax , [ tmp5008 ]
  call  __CodeGeneratorX64__hash$1

  lea  rcx , [ rv ]
  lea  rdx , [ tmp5008 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  ret

l5011:

  lea  rcx , [ x ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l5010 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l5007

l5006:

  ; __mold_syscall( 42 )
  lea rcx , [ x ]
  push rdi
  lea  rdi , [ tmp5004 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx , [ rv ]
  lea  rdx , [ tmp5004 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

l5007:

  lea  rcx , [ rv ]
  lea  rdx , [ __literal669 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin


  ; clean frame
  ; -----------
  lea  rcx, [ tmp5004 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5008 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5009 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 144
  pop  rdi
  pop  rbp
  ret


  restore this
  restore x
  restore rv
  restore tmp5004
  restore tmp5005
  restore tmp5008
  restore tmp5009
  restore item

; -----------------------------------------------
; function __CodeGeneratorX64_emitConstant$4
; -----------------------------------------------
__CodeGeneratorX64_emitConstant$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 7 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 10 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 7 )
  wantDeepIdx EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  type EQU rbp - 88 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 11 )
  tmp5012 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp5024 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp5025 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  bufferName EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 4 )
  hash EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  valueAsInteger EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  deepIdx EQU rbp - 188 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 3 )
  tmp5013 EQU rbp - 192 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5016 EQU rbp - 196 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5018 EQU rbp - 200 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp5023 EQU rbp - 204 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5032 EQU rbp - 208 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5035 EQU rbp - 212 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5038 EQU rbp - 216 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5039 EQU rbp - 220 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5046 EQU rbp - 224 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp5047 EQU rbp - 228 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ deepIdx ], eax
  xor eax, eax
  mov [type + Variant_t.type], eax
  mov [tmp5012 + Variant_t.type], eax
  mov [tmp5024 + Variant_t.type], eax
  mov [tmp5025 + Variant_t.type], eax
  mov [bufferName + Variant_t.type], eax
  mov [hash + Variant_t.type], eax
  mov [valueAsInteger + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 44 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ type ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  mov [ tmp5012 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp5012 + Variant_t.value], rax

  lea rcx, [ wantDeepIdx ]
  lea rdx, [ tmp5012 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5014

  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy

  mov dword [ tmp5016 ], 1

  lea rcx, [ type ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5017

  lea  rcx , [ type ]
  lea  rdx , [ __literal160 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5016 ], eax

l5017:

  cmp dword [ tmp5016 ], 0
  jz l5019

  lea rcx , [ this ]
  lea rdx , [ value ]
  lea  rax , [ hash ]
  call  __CodeGeneratorX64__hash$1

  lea  rcx , [ this ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ tmp5012 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5012 ]
  lea  rdx , [ hash ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantLoadFromKey

  cmp [ bufferName  + Variant_t.type], 0
  jz l5021

  lea rcx, [__fmt80 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ this ]
  lea  rdx , [ __literal682 ]
  lea  r8 , [ tmp5012 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5023 ], 1

  mov eax, dword [ tmp5023 ]
  mov [ tmp5024 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5024 + Variant_t.value], rax

  lea  rcx , [ tmp5012 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp5024 ]
  call  __MOLD_VariantStoreAtKey

  jmp l5022

l5021:

  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ this ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ tmp5024 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5024 ]
  lea  rdx , [ hash ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStoreAtKey

l5022:

l5019:

l5020:

  lea rcx, [ type ]
  lea rdx, [ __literal302 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5026

  lea rcx, [__fmt81 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5027

l5026:

  lea rcx, [ type ]
  lea rdx, [ __literal303 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5028

  lea rcx, [__fmt82 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5029

l5028:

  lea rcx, [ type ]
  lea rdx, [ __literal160 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5030

  lea rcx, [__fmt83 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5031

l5030:

  lea rcx, [ type ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5033

  lea rcx, [__fmt84 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5034

l5033:

  lea rcx, [ type ]
  lea rdx, [ __literal304 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5036

  mov dword [ tmp5039 ], 1

  mov eax, dword [ tmp5039 ]
  mov [ tmp5024 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5024 + Variant_t.value], rax

  lea rcx, [ value ]
  lea rdx, [ tmp5024 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5040

  lea  rcx, [ valueAsInteger ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsInteger ]
  lea rdx, [ __literal718 ]
  call __MOLD_VariantMove

  jmp l5041

l5040:

  lea  rcx, [ valueAsInteger ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsInteger ]
  lea rdx, [ __literal719 ]
  call __MOLD_VariantMove

l5041:

  lea rcx, [__fmt85 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5037

l5036:

  lea rcx, [ type ]
  lea rdx, [ __literal301 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5042

  lea rcx, [__fmt86 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5043

l5042:

  lea  rcx, [ tmp5025 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal722 ]
  lea  rdx , [ type ]
  lea  r8 , [ tmp5025 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp5025 ]
  call qword [rbx + 8 * 41 ]

l5043:

l5037:

l5034:

l5031:

l5029:

l5027:

l5014:

l5015:

  lea rcx, [ type ]
  lea rdx, [ __literal305 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5044

  mov dword [ tmp5047 ], 1

  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp5047 ]
  mov dword [ tmp5046 ], eax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ value ]
  lea r9 , [ wantDeepIdx ]
  mov  eax, dword [ tmp5046 ]
  push rax
  call  __CodeGeneratorX64_emitArrayBufferHead$4
  add rsp, 8

  jmp l5045

l5044:

  lea rcx, [ type ]
  lea rdx, [ __literal160 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5048

  mov dword [ tmp5047 ], 1

  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp5047 ]
  mov dword [ tmp5046 ], eax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ value ]
  lea r9 , [ wantDeepIdx ]
  mov  eax, dword [ tmp5046 ]
  push rax
  call  __CodeGeneratorX64_emitStringBufferHead$4
  add rsp, 8

l5048:

l5049:

l5045:


  ; clean frame
  ; -----------
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5012 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5024 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5025 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ hash ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueAsInteger ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret


  restore this
  restore name
  restore value
  restore wantDeepIdx
  restore deepIdx
  restore type
  restore tmp5012
  restore tmp5013
  restore tmp5016
  restore tmp5018
  restore tmp5023
  restore tmp5024
  restore tmp5025
  restore tmp5032
  restore tmp5035
  restore tmp5038
  restore tmp5039
  restore bufferName
  restore hash
  restore valueAsInteger
  restore tmp5046
  restore tmp5047

; -----------------------------------------------
; function __CodeGeneratorX64_emitStringBufferHead$4
; -----------------------------------------------
__CodeGeneratorX64_emitStringBufferHead$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 4 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  wantDeep EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp5051 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5052 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp5058 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5060 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  bufferName EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  bufferNameBytes EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  deepIdx EQU rbp - 172 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp5050 EQU rbp - 176 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5055 EQU rbp - 180 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5059 EQU rbp - 184 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp5061 EQU rbp - 188 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeep ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ deepIdx ], eax
  xor eax, eax
  mov [tmp5051 + Variant_t.type], eax
  mov [tmp5052 + Variant_t.type], eax
  mov [tmp5058 + Variant_t.type], eax
  mov [tmp5060 + Variant_t.type], eax
  mov [bufferName + Variant_t.type], eax
  mov [bufferNameBytes + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal682 ]
  lea  r8 , [ tmp5052 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5052 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp5051 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5051 + Variant_t.type ], 0
  jnz l5053

  mov [ tmp5052 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp5052 + Variant_t.value], rax

  lea rcx, [ wantDeep ]
  lea rdx, [ tmp5052 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5056

  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal723 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 43 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ tmp5058 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp5059 ], 1

  mov [ tmp5060 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5059 ]
  mov [ tmp5060 + Variant_t.value], rax

  lea  rcx , [ tmp5058 ]
  lea  rdx , [ tmp5060 ]
  lea  r8 , [ tmp5052 ]
  call  __MOLD_VariantAdd

  lea rcx, [__fmt87 ]
  call __MOLD_PrintFormatFromMemory

l5056:

l5057:

  mov dword [ tmp5061 ], 1

  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp5061 ]
  mov dword [ tmp5059 ], eax

  mov [ tmp5052 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5059 ]
  mov [ tmp5052 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ value ]
  lea r9 , [ wantDeep ]
  lea rax, [ tmp5052 ]
  push rax
  call  __CodeGeneratorX64_emitStringBufferContent$4
  add rsp, 8

l5053:

l5054:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp5051 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5052 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5058 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5060 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret


  restore this
  restore name
  restore value
  restore wantDeep
  restore deepIdx
  restore tmp5050
  restore tmp5051
  restore tmp5052
  restore tmp5055
  restore tmp5058
  restore tmp5059
  restore tmp5060
  restore tmp5061
  restore bufferName
  restore bufferNameBytes

; -----------------------------------------------
; function __CodeGeneratorX64_escapeString$1
; -----------------------------------------------
__CodeGeneratorX64_escapeString$1:

  ; init frame
  ; ----------
  rv EQU rdi
  text EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  character EQU rbp - 40 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  tmp5064 EQU rbp - 44 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal466 ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys undefined values character
; 
  jmp l5063

l5062:

  lea rcx, [ character ]
  lea rdx, [ __literal466 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5065

  lea  rcx , [ rv ]
  lea  rdx , [ __literal726 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  jmp l5066

l5065:

  lea  rcx , [ rv ]
  lea  rdx , [ character ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

l5066:

  ret

l5063:

  lea  rcx , [ text ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ character ]
  lea  r9 , [ l5062 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values character
; -----------------------------
; 
  lea  rcx , [ rv ]
  lea  rdx , [ __literal466 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin


  ; clean frame
  ; -----------
  ; Skipped loop iterator character

  add  rsp, 80
  pop  rdi
  pop  rbp
  ret


  restore text
  restore rv
  restore tmp5064
  restore character

; -----------------------------------------------
; function __CodeGeneratorX64_emitStringBufferContent$4
; -----------------------------------------------
__CodeGeneratorX64_emitStringBufferContent$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  value EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  wantDeep EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  deepIdx EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp5070 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp5071 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  bufferNameBytes EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  bufferData EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5067 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeep ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ deepIdx ], xmm0
  xor eax, eax
  mov [tmp5070 + Variant_t.type], eax
  mov [tmp5071 + Variant_t.type], eax
  mov [bufferNameBytes + Variant_t.type], eax
  mov [bufferData + Variant_t.type], eax

  ; code
  ; ----

  lea rcx, [ wantDeep ]
  lea rdx, [ deepIdx ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5068

  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal723 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ this ]
  lea rdx , [ value ]
  lea  rax , [ tmp5070 ]
  call  __CodeGeneratorX64_escapeString$1

  lea  rcx, [ bufferData ]
  call __MOLD_VariantDestroy
  lea rcx, [ bufferData ]
  lea rdx, [ tmp5070 ]
  call __MOLD_VariantMove

  ; __mold_syscall( 43 )
  lea rcx , [ value ]
  push rdi
  lea  rdi , [ tmp5071 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea rcx, [__fmt88 ]
  call __MOLD_PrintFormatFromMemory

l5068:

l5069:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp5070 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5071 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferData ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore name
  restore value
  restore wantDeep
  restore deepIdx
  restore tmp5067
  restore tmp5070
  restore tmp5071
  restore bufferNameBytes
  restore bufferData

; -----------------------------------------------
; function __CodeGeneratorX64_emitArrayBufferHead$4
; -----------------------------------------------
__CodeGeneratorX64_emitArrayBufferHead$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 3 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 4 )
  items EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  wantDeepIdx EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp5073 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5074 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  bufferName EQU rbp - 120 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  bufferNameBytes EQU rbp - 136 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  deepIdx EQU rbp - 140 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 0 , readHits= 2 )
  tmp5072 EQU rbp - 144 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5077 EQU rbp - 148 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5080 EQU rbp - 152 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 3 , readHits= 3 )
  tmp5081 EQU rbp - 156 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  itemsCnt EQU rbp - 160 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ items ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov eax, dword [rbp + 16 + 8 * 0 ]
  mov dword [ deepIdx ], eax
  xor eax, eax
  mov [tmp5073 + Variant_t.type], eax
  mov [tmp5074 + Variant_t.type], eax
  mov [bufferName + Variant_t.type], eax
  mov [bufferNameBytes + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal682 ]
  lea  r8 , [ tmp5074 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5074 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp5073 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5073 + Variant_t.type ], 0
  jnz l5075

  mov [ tmp5074 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp5074 + Variant_t.value], rax

  lea rcx, [ wantDeepIdx ]
  lea rdx, [ tmp5074 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5078

  ; __mold_syscall( 43 )
  lea rcx , [ items ]
  push rdi
  lea  rdi , [ tmp5074 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5074 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5074 + Variant_t.value]
  mov dword [ itemsCnt ], eax

  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal723 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin

  mov dword [ tmp5081 ], 16

  mov eax, dword [ itemsCnt ]
  imul eax, dword [ tmp5081 ]
  mov dword [ tmp5080 ], eax

  lea rcx, [__fmt89 ]
  call __MOLD_PrintFormatFromMemory

l5078:

l5079:

  mov dword [ tmp5081 ], 1

  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp5081 ]
  mov dword [ tmp5080 ], eax

  mov [ tmp5074 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5080 ]
  mov [ tmp5074 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ items ]
  lea r9 , [ wantDeepIdx ]
  lea rax, [ tmp5074 ]
  push rax
  call  __CodeGeneratorX64_emitArrayBufferContent$4
  add rsp, 8

l5075:

l5076:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp5073 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5074 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret


  restore this
  restore name
  restore items
  restore wantDeepIdx
  restore deepIdx
  restore tmp5072
  restore tmp5073
  restore tmp5074
  restore tmp5077
  restore tmp5080
  restore tmp5081
  restore itemsCnt
  restore bufferName
  restore bufferNameBytes

; -----------------------------------------------
; function __CodeGeneratorX64_emitArrayBufferContent$4
; -----------------------------------------------
__CodeGeneratorX64_emitArrayBufferContent$4:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  name EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  items EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 15 )
  wantDeepIdx EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  deepIdx EQU rbp - 88 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp5082 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 10 , readHits= 10 )
  tmp5121 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  innerType EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  innerTypeForEmit EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 2 )
  innerAsmType EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 1 )
  itemValue EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 7 )
  bufferNameBytes EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  itemType EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  sep EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  tmp5124 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp5125 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp5126 EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  itemsCnt EQU rbp - 284 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 4 )
  tmp5083 EQU rbp - 288 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 14 , readHits= 14 )
  tmp5084 EQU rbp - 292 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5089 EQU rbp - 296 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5091 EQU rbp - 300 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp5092 EQU rbp - 304 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5097 EQU rbp - 308 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5099 EQU rbp - 312 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5101 EQU rbp - 316 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp5106 EQU rbp - 320 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp5111 EQU rbp - 324 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5116 EQU rbp - 328 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  innerSize EQU rbp - 332 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 4 , readHits= 4 )
  innerItemIdx EQU rbp - 336 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  goOn EQU rbp - 340 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  itemIdx EQU rbp - 344 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  tmp5127 EQU rbp - 348 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 384

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ items ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ deepIdx ], xmm0
  xor eax, eax
  mov [tmp5082 + Variant_t.type], eax
  mov [tmp5121 + Variant_t.type], eax
  mov [innerType + Variant_t.type], eax
  mov [innerTypeForEmit + Variant_t.type], eax
  mov [innerAsmType + Variant_t.type], eax
  mov [itemValue + Variant_t.type], eax
  mov [bufferNameBytes + Variant_t.type], eax
  mov [itemType + Variant_t.type], eax
  mov [sep + Variant_t.type], eax
  mov [tmp5124 + Variant_t.type], eax
  mov [tmp5125 + Variant_t.type], eax
  mov [tmp5126 + Variant_t.type], eax

  ; code
  ; ----

  ; __mold_syscall( 43 )
  lea rcx , [ items ]
  push rdi
  lea  rdi , [ tmp5082 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5082 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5082 + Variant_t.value]
  mov dword [ itemsCnt ], eax

  lea rcx, [ wantDeepIdx ]
  lea rdx, [ deepIdx ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5085

  mov dword [ tmp5083 ], 0

  lea  rcx , [ items ]
  lea  rdx , [ tmp5083 ]
  lea  r8 , [ tmp5082 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 44 )
  lea rcx , [ tmp5082 ]
  push rdi
  lea  rdi , [ innerType ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  mov dword [ innerSize ], 0

  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal719 ]
  call __MOLD_VariantMove

  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal730 ]
  call __MOLD_VariantMove

  mov dword [ innerItemIdx ], 0

  lea  rcx, [ itemValue ]
  call __MOLD_VariantDestroy

  mov dword [ goOn ], 1

; 
; -----------------------------
; BEGIN: while
; 
l5087:

  mov dword [ tmp5089 ], 0

  mov dword [ tmp5092 ], 1

  mov eax, dword [ goOn ]
  cmp eax, dword [ tmp5092 ]
  jnz l5090

  mov dword [ tmp5089 ], 0
  mov ecx, dword [ innerItemIdx ]
  cmp ecx, dword [ itemsCnt ]
  setl byte [ tmp5089 ]

l5090:

  cmp dword [ tmp5089 ], 0
  jz l5088

  lea  rcx , [ items ]
  lea  rdx , [ innerItemIdx ]
  lea  r8 , [ itemValue ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 44 )
  lea rcx , [ itemValue ]
  push rdi
  lea  rdi , [ itemType ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ itemType ]
  lea rdx, [ innerType ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5093

  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal719 ]
  call __MOLD_VariantMove

  mov dword [ goOn ], 0

  jmp l5094

l5093:

  lea rcx, [ itemType ]
  lea rdx, [ __literal302 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5095

  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal671 ]
  call __MOLD_VariantMove

  mov dword [ tmp5097 ], 0

  mov dword [ tmp5083 ], 3

  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp5083 ]
  jge l5098

  mov dword [ tmp5099 ], 1

  mov dword [ tmp5083 ], -2147483648

  mov [ tmp5082 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5083 ]
  mov [ tmp5082 + Variant_t.value], rax

  lea rcx, [ itemValue ]
  lea rdx, [ tmp5082 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l5100

  mov dword [ tmp5083 ], 2147483647

  mov [ tmp5082 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5083 ]
  mov [ tmp5082 + Variant_t.value], rax

  lea  rcx , [ tmp5082 ]
  lea  rdx , [ itemValue ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5099 ], eax

l5100:

  mov eax, dword [ tmp5099 ]
  mov dword [ tmp5097 ], eax

l5098:

  cmp dword [ tmp5097 ], 0
  jz l5102

  mov dword [ innerSize ], 3

  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal731 ]
  call __MOLD_VariantMove

  jmp l5103

l5102:

  mov dword [ tmp5099 ], 0

  mov dword [ tmp5083 ], 2

  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp5083 ]
  jge l5104

  mov dword [ tmp5101 ], 1

  mov dword [ tmp5083 ], -32768

  mov [ tmp5082 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5083 ]
  mov [ tmp5082 + Variant_t.value], rax

  lea rcx, [ itemValue ]
  lea rdx, [ tmp5082 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l5105

  mov dword [ tmp5083 ], 32767

  mov [ tmp5082 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5083 ]
  mov [ tmp5082 + Variant_t.value], rax

  lea  rcx , [ tmp5082 ]
  lea  rdx , [ itemValue ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5101 ], eax

l5105:

  mov eax, dword [ tmp5101 ]
  mov dword [ tmp5099 ], eax

l5104:

  cmp dword [ tmp5099 ], 0
  jz l5107

  mov dword [ innerSize ], 2

  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal732 ]
  call __MOLD_VariantMove

  jmp l5108

l5107:

  mov dword [ tmp5101 ], 0

  mov dword [ tmp5083 ], 2

  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp5083 ]
  jge l5109

  mov dword [ tmp5106 ], 1

  mov dword [ tmp5083 ], -128

  mov [ tmp5082 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5083 ]
  mov [ tmp5082 + Variant_t.value], rax

  lea rcx, [ itemValue ]
  lea rdx, [ tmp5082 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l5110

  mov dword [ tmp5083 ], 127

  mov [ tmp5082 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5083 ]
  mov [ tmp5082 + Variant_t.value], rax

  lea  rcx , [ tmp5082 ]
  lea  rdx , [ itemValue ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5106 ], eax

l5110:

  mov eax, dword [ tmp5106 ]
  mov dword [ tmp5101 ], eax

l5109:

  cmp dword [ tmp5101 ], 0
  jz l5112

  mov dword [ innerSize ], 1

  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal733 ]
  call __MOLD_VariantMove

l5112:

l5113:

l5108:

l5103:

l5095:

l5096:

l5094:

  mov dword [ tmp5083 ], 1

  mov eax, dword [ innerItemIdx ]
  add eax, dword [ tmp5083 ]
  mov dword [ innerItemIdx ], eax

  jmp l5087

l5088:

; 
; END: while
; -----------------------------
; 
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal723 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin

  lea rcx, [__fmt90 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal719 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5114

  ; __mold_syscall( 45 )
  lea rcx , [ innerAsmType ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal328 ]
  call __MOLD_VariantMove

  mov dword [ tmp5083 ], 1

  mov dword [ itemIdx ], 0

; 
; -----------------------------
; BEGIN: for itemIdx in tmp5116 .. itemsCnt
; 
l5117:

  mov eax, dword [ itemIdx ]
  cmp eax, dword [ itemsCnt ]
  jge l5118

  ; __mold_syscall( 45 )
  lea rcx , [ sep ]
  call qword [rbx + 8 * 45 ]

  lea  rcx , [ items ]
  lea  rdx , [ itemIdx ]
  lea  r8 , [ tmp5082 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp5082  + Variant_t.type], 0
  jz l5119

  lea  rcx , [ items ]
  lea  rdx , [ itemIdx ]
  lea  r8 , [ tmp5121 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 45 )
  lea rcx , [ tmp5121 ]
  call qword [rbx + 8 * 45 ]

  jmp l5120

l5119:

  ; __mold_syscall( 45 )
; WARNING: Failed to get variable size: __literal719
  lea rcx , [ __literal719 ]
  call qword [rbx + 8 * 45 ]

l5120:

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal423 ]
  call __MOLD_VariantMove

  mov eax, dword [ itemIdx ]
  add eax, dword [ tmp5083 ]
  mov dword [ itemIdx ], eax

  jmp l5117

l5118:

; 
; END: for itemIdx in tmp5116 .. itemsCnt step tmp5083
; -----------------------------
; 
  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ itemsCnt ], -1

l5114:

l5115:

l5085:

l5086:

  mov dword [ tmp5116 ], 1

  mov dword [ itemIdx ], 0

; 
; -----------------------------
; BEGIN: for itemIdx in tmp5083 .. itemsCnt
; 
l5122:

  mov eax, dword [ itemIdx ]
  cmp eax, dword [ itemsCnt ]
  jge l5123

  lea  rcx, [ tmp5125 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal227 ]
  lea  r8 , [ tmp5125 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp5126 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ itemIdx ]
  mov [ tmp5126 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5126 ]
  push rdi
  lea  rdi , [ tmp5121 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp5124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5125 ]
  lea  rdx , [ tmp5121 ]
  lea  r8 , [ tmp5124 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ items ]
  lea  rdx , [ itemIdx ]
  lea  r8 , [ tmp5121 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ deepIdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ deepIdx + Variant_t.value]
  mov dword [ tmp5127 ], eax

  lea rcx , [ this ]
  lea rdx , [ tmp5124 ]
  lea r8 , [ tmp5121 ]
  lea r9 , [ wantDeepIdx ]
  mov  eax, dword [ tmp5127 ]
  push rax
  call  __CodeGeneratorX64_emitConstant$4
  add rsp, 8

  mov eax, dword [ itemIdx ]
  add eax, dword [ tmp5116 ]
  mov dword [ itemIdx ], eax

  jmp l5122

l5123:

; 
; END: for itemIdx in tmp5083 .. itemsCnt step tmp5116
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5082 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5121 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ innerType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ itemValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx, [ itemType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5124 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5125 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5126 ]
  call __MOLD_VariantDestroy

  add  rsp, 384
  pop  rbp
  ret


  restore this
  restore name
  restore items
  restore wantDeepIdx
  restore deepIdx
  restore itemsCnt
  restore tmp5082
  restore tmp5083
  restore tmp5084
  restore tmp5089
  restore tmp5091
  restore tmp5092
  restore tmp5097
  restore tmp5099
  restore tmp5101
  restore tmp5106
  restore tmp5111
  restore tmp5116
  restore tmp5121
  restore innerType
  restore innerSize
  restore innerTypeForEmit
  restore innerAsmType
  restore innerItemIdx
  restore itemValue
  restore goOn
  restore bufferNameBytes
  restore itemType
  restore sep
  restore itemIdx
  restore tmp5124
  restore tmp5125
  restore tmp5126
  restore tmp5127

; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_int64$4
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_int64$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt91 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore cc

; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_int32$4
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_int32$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt92 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore cc

; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_float64$4
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_float64$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt93 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore cc

; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_int64$4
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_int64$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt94 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore cc

; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_int32$4
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_int32$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  cc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  tmp5128 EQU rbp - 76 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0

  ; code
  ; ----

  cmp [ y + Variant_t.type ], 2
  jnz l5129

  lea rcx, [__fmt95 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5130

l5129:

  lea rcx, [__fmt96 ]
  call __MOLD_PrintFormatFromMemory

l5130:

  lea rcx, [__fmt97 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore cc
  restore tmp5128

; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_variant$4
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_variant$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt98 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore cc

; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_float64$4
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_float64$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  cc EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt99 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore cc

; -----------------------------------------------
; function __CodeGeneratorX64__alu2_float64$4
; -----------------------------------------------
__CodeGeneratorX64__alu2_float64$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ opcode ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt100 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore opcode

; -----------------------------------------------
; function __CodeGeneratorX64__alu2_int32$4
; -----------------------------------------------
__CodeGeneratorX64__alu2_int32$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ opcode ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt101 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore opcode

; -----------------------------------------------
; function __CodeGeneratorX64__alu2_int64$4
; -----------------------------------------------
__CodeGeneratorX64__alu2_int64$4:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  x EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  y EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  opcode EQU rbp - 72 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov rax, qword [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ opcode ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt102 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret


  restore dst
  restore x
  restore y
  restore opcode

; -----------------------------------------------
; function __CodeGeneratorX64__move_int32$2
; -----------------------------------------------
__CodeGeneratorX64__move_int32$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt103 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64__move_int64$2
; -----------------------------------------------
__CodeGeneratorX64__move_int64$2:

  ; init frame
  ; ----------
  dst EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx, [__fmt104 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64__move_float64$2
; -----------------------------------------------
__CodeGeneratorX64__move_float64$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  dst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )
  src EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ src ]
  call  __CodeGeneratorX64__move_int64$2


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64__loadString$2
; -----------------------------------------------
__CodeGeneratorX64__loadString$2:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  dst EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  src EQU rbp - 56 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx, [__fmt105 ]
  call __MOLD_PrintFormatFromMemory


  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore dst
  restore src

; -----------------------------------------------
; function __CodeGeneratorX64__getSymbolType$2
; -----------------------------------------------
__CodeGeneratorX64__getSymbolType$2:

  ; init frame
  ; ----------
  rv EQU rdi
  symbolsMap EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  id EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 2 )
  tmp5137 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5140 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  tmp5131 EQU rbp - 92 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5134 EQU rbp - 96 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5136 EQU rbp - 100 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp

  push rdi
  mov  rdi, rax

  sub  rsp, 128

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolsMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  xor eax, eax
  mov [tmp5137 + Variant_t.type], eax
  mov [tmp5140 + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove

  cmp [ id + Variant_t.type ], 5
  jnz l5132

  lea  rcx , [ symbolsMap ]
  lea  rdx , [ id ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5134 ], 0

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l5135

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5137 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp5137  + Variant_t.type], 0
  setnz al
  mov dword [ tmp5134 ], eax

l5135:

  cmp dword [ tmp5134 ], 0
  jz l5138

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

l5138:

l5139:

l5132:

l5133:


  ; clean frame
  ; -----------
  lea  rcx, [ tmp5137 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5140 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rdi
  pop  rbp
  ret


  restore symbolsMap
  restore id
  restore rv
  restore tmp5131
  restore tmp5134
  restore tmp5136
  restore tmp5137
  restore tmp5140
  restore symbolInfo

; -----------------------------------------------
; function __CodeGeneratorX64__syscall$1
; -----------------------------------------------
__CodeGeneratorX64__syscall$1_vcall:
__CodeGeneratorX64__syscall$1:

  ; init frame
  ; ----------
  id EQU rbp - 24 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 3 )
  tmp5141 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0

  ; code
  ; ----

  cmp [ id + Variant_t.type ], 2
  jnz l5142

  lea rcx, [__fmt106 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5143

l5142:

  lea rcx, [__fmt107 ]
  call __MOLD_PrintFormatFromMemory

l5143:


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore id
  restore tmp5141

; -----------------------------------------------
; function __CodeGeneratorX64_run$1
; -----------------------------------------------
__CodeGeneratorX64_run$1_vcall:
__CodeGeneratorX64_run$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 139 )
  codeObj EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 28 )
  quads EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  currentProcName EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 8 )
  currentProcRv EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 5 )
  currentProcRvType EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  currentSymbols EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 12 )
  dst EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 157 )
  x EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 139 )
  y EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 97 )
  opcode EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 151 )
  originalOpcode EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 22 )
  symbols EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 17 )
  arrayOfProcedures EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  arrayOfMessageFormats EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  fmtHashToIdMap EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  fakeSymbolInfoForEOL EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  fakeSymbolInfoForGlued EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  globals EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 6 )
  classListCnt EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  classList EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  methodsList EQU rbp - 360 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  tmp5146 EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 35 , readHits= 35 )
  tmp5171 EQU rbp - 392 ; 16 bytes, (kind= 1 , type= string , writeHits= 10 , readHits= 10 )
  tmp5172 EQU rbp - 408 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp5173 EQU rbp - 424 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp5390 EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp5391 EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 19 , readHits= 19 )
  tmp5651 EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp5674 EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5675 EQU rbp - 504 ; 16 bytes, (kind= 1 , type= variant , writeHits= 17 , readHits= 17 )
  tmp5676 EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 13 , readHits= 13 )
  tmp5682 EQU rbp - 536 ; 16 bytes, (kind= 1 , type= variant , writeHits= 12 , readHits= 12 )
  tmp5735 EQU rbp - 552 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp5736 EQU rbp - 568 ; 16 bytes, (kind= 1 , type= variant , writeHits= 6 , readHits= 6 )
  tmp5737 EQU rbp - 584 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp5738 EQU rbp - 600 ; 16 bytes, (kind= 1 , type= variant , writeHits= 29 , readHits= 29 )
  tmp5768 EQU rbp - 616 ; 16 bytes, (kind= 1 , type= variant , writeHits= 8 , readHits= 8 )
  tmp5799 EQU rbp - 632 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  item EQU rbp - 648 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 30 )
  dstType EQU rbp - 664 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  xType EQU rbp - 680 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  idxType EQU rbp - 696 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  symbolInfo EQU rbp - 712 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 10 )
  params EQU rbp - 728 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  encodedFormat EQU rbp - 744 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  encodedFormatHash EQU rbp - 760 ; 16 bytes, (kind= 1 , type= string , writeHits= 6 , readHits= 7 )
  messageFormatId EQU rbp - 776 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  oneParam EQU rbp - 792 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 6 )
  rv EQU rbp - 808 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  sysCallId EQU rbp - 824 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  name EQU rbp - 840 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 5 )
  methodId EQU rbp - 856 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  signOkLabel EQU rbp - 872 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  oneItem EQU rbp - 888 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 15 )
  proto EQU rbp - 904 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 14 )
  paramName EQU rbp - 920 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  symbolType EQU rbp - 936 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  expectedType EQU rbp - 952 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  rvVariantType EQU rbp - 968 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  currentFrame EQU rbp - 984 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 10 )
  symbol EQU rbp - 1000 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 2 , readHits= 26 )
  srcPtr EQU rbp - 1016 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 3 )
  tmp5837 EQU rbp - 1032 ; 16 bytes, (kind= 1 , type= variant , writeHits= 14 , readHits= 14 )
  tmp5852 EQU rbp - 1048 ; 16 bytes, (kind= 1 , type= variant , writeHits= 16 , readHits= 16 )
  tmp5863 EQU rbp - 1064 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp5866 EQU rbp - 1080 ; 16 bytes, (kind= 1 , type= variant , writeHits= 11 , readHits= 11 )
  type EQU rbp - 1096 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 3 )
  msgContent EQU rbp - 1112 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  value EQU rbp - 1128 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5887 EQU rbp - 1144 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  labels EQU rbp - 1160 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  defaultLabel EQU rbp - 1176 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  nextLabel EQU rbp - 1192 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  classProto EQU rbp - 1208 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  className EQU rbp - 1224 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  vtable EQU rbp - 1240 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  methodName EQU rbp - 1256 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  methodProto EQU rbp - 1272 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  methodPtr EQU rbp - 1288 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  procName EQU rbp - 1304 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 3 )
  currentFrameSize EQU rbp - 1308 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 10 )
  isInsideVcall EQU rbp - 1312 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 1 )
  paramsCnt EQU rbp - 1316 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 6 , readHits= 6 )
  tmp5151 EQU rbp - 1320 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 61 , readHits= 61 )
  tmp5152 EQU rbp - 1324 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp5154 EQU rbp - 1328 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 15 , readHits= 15 )
  tmp5158 EQU rbp - 1332 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 9 , readHits= 9 )
  tmp5160 EQU rbp - 1336 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 8 , readHits= 8 )
  tmp5162 EQU rbp - 1340 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp5164 EQU rbp - 1344 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 9 , readHits= 9 )
  tmp5166 EQU rbp - 1348 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp5191 EQU rbp - 1352 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5196 EQU rbp - 1356 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5199 EQU rbp - 1360 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5202 EQU rbp - 1364 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5205 EQU rbp - 1368 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5208 EQU rbp - 1372 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5211 EQU rbp - 1376 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5214 EQU rbp - 1380 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5217 EQU rbp - 1384 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5220 EQU rbp - 1388 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5223 EQU rbp - 1392 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5226 EQU rbp - 1396 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5229 EQU rbp - 1400 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5232 EQU rbp - 1404 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5235 EQU rbp - 1408 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5238 EQU rbp - 1412 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5241 EQU rbp - 1416 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5244 EQU rbp - 1420 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5247 EQU rbp - 1424 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5250 EQU rbp - 1428 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5253 EQU rbp - 1432 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5256 EQU rbp - 1436 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5259 EQU rbp - 1440 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5262 EQU rbp - 1444 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5265 EQU rbp - 1448 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5268 EQU rbp - 1452 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5271 EQU rbp - 1456 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5274 EQU rbp - 1460 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5277 EQU rbp - 1464 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5280 EQU rbp - 1468 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5283 EQU rbp - 1472 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5286 EQU rbp - 1476 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5289 EQU rbp - 1480 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5292 EQU rbp - 1484 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5295 EQU rbp - 1488 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5298 EQU rbp - 1492 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5301 EQU rbp - 1496 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5304 EQU rbp - 1500 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5307 EQU rbp - 1504 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5310 EQU rbp - 1508 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5313 EQU rbp - 1512 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5316 EQU rbp - 1516 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5319 EQU rbp - 1520 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5322 EQU rbp - 1524 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5327 EQU rbp - 1528 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5332 EQU rbp - 1532 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5334 EQU rbp - 1536 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5339 EQU rbp - 1540 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5342 EQU rbp - 1544 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5345 EQU rbp - 1548 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5348 EQU rbp - 1552 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5350 EQU rbp - 1556 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5354 EQU rbp - 1560 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5359 EQU rbp - 1564 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5362 EQU rbp - 1568 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5365 EQU rbp - 1572 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5368 EQU rbp - 1576 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5371 EQU rbp - 1580 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5374 EQU rbp - 1584 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5377 EQU rbp - 1588 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5380 EQU rbp - 1592 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5385 EQU rbp - 1596 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5392 EQU rbp - 1600 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5394 EQU rbp - 1604 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5398 EQU rbp - 1608 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5403 EQU rbp - 1612 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5406 EQU rbp - 1616 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5409 EQU rbp - 1620 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5412 EQU rbp - 1624 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5415 EQU rbp - 1628 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5418 EQU rbp - 1632 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5421 EQU rbp - 1636 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5424 EQU rbp - 1640 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5427 EQU rbp - 1644 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5430 EQU rbp - 1648 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5431 EQU rbp - 1652 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5439 EQU rbp - 1656 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5442 EQU rbp - 1660 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5445 EQU rbp - 1664 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5448 EQU rbp - 1668 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5451 EQU rbp - 1672 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5454 EQU rbp - 1676 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5457 EQU rbp - 1680 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5460 EQU rbp - 1684 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5463 EQU rbp - 1688 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5466 EQU rbp - 1692 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5469 EQU rbp - 1696 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5472 EQU rbp - 1700 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5475 EQU rbp - 1704 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5480 EQU rbp - 1708 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5485 EQU rbp - 1712 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5488 EQU rbp - 1716 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5491 EQU rbp - 1720 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5494 EQU rbp - 1724 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5497 EQU rbp - 1728 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5500 EQU rbp - 1732 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5503 EQU rbp - 1736 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5506 EQU rbp - 1740 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5509 EQU rbp - 1744 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5512 EQU rbp - 1748 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5515 EQU rbp - 1752 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5518 EQU rbp - 1756 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5523 EQU rbp - 1760 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5526 EQU rbp - 1764 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5529 EQU rbp - 1768 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5540 EQU rbp - 1772 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5543 EQU rbp - 1776 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5546 EQU rbp - 1780 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5551 EQU rbp - 1784 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5553 EQU rbp - 1788 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp5555 EQU rbp - 1792 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5562 EQU rbp - 1796 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 36 , readHits= 36 )
  tmp5563 EQU rbp - 1800 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 9 , readHits= 9 )
  tmp5574 EQU rbp - 1804 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5577 EQU rbp - 1808 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5580 EQU rbp - 1812 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5585 EQU rbp - 1816 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5590 EQU rbp - 1820 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5595 EQU rbp - 1824 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5600 EQU rbp - 1828 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5605 EQU rbp - 1832 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5608 EQU rbp - 1836 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5609 EQU rbp - 1840 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5612 EQU rbp - 1844 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5623 EQU rbp - 1848 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5626 EQU rbp - 1852 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5629 EQU rbp - 1856 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5632 EQU rbp - 1860 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5635 EQU rbp - 1864 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5640 EQU rbp - 1868 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp5642 EQU rbp - 1872 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp5644 EQU rbp - 1876 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 13 , readHits= 13 )
  tmp5646 EQU rbp - 1880 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 22 , readHits= 22 )
  tmp5699 EQU rbp - 1884 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 16 , readHits= 16 )
  tmp5725 EQU rbp - 1888 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 15 , readHits= 15 )
  tmp5729 EQU rbp - 1892 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 12 , readHits= 12 )
  tmp5731 EQU rbp - 1896 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 11 , readHits= 11 )
  tmp5753 EQU rbp - 1900 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 30 , readHits= 30 )
  tmp5784 EQU rbp - 1904 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5788 EQU rbp - 1908 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5821 EQU rbp - 1912 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5826 EQU rbp - 1916 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5829 EQU rbp - 1920 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  itemCnt EQU rbp - 1924 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  paramIdx EQU rbp - 1928 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  symbolSize EQU rbp - 1932 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 1 )
  paramOffset EQU rbp - 1936 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  rvSize EQU rbp - 1940 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  paramsPassedCnt EQU rbp - 1944 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  isRaxZero EQU rbp - 1948 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 1 )
  varSize EQU rbp - 1952 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  formatId EQU rbp - 1956 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  msgLength EQU rbp - 1960 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  deepIdx EQU rbp - 1964 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  labelIdx EQU rbp - 1968 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )
  tmp5902 EQU rbp - 1972 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp5903 EQU rbp - 1976 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  classIdx EQU rbp - 1980 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  firstUsedMethodIdx EQU rbp - 1984 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 3 )
  lastUsedMethodIdx EQU rbp - 1988 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  firstMethodFound EQU rbp - 1992 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  methodIdx EQU rbp - 1996 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 2032

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ codeObj ], xmm0
  xor eax, eax
  mov [quads + Variant_t.type], eax
  mov [currentProcName + Variant_t.type], eax
  mov [currentProcRv + Variant_t.type], eax
  mov [currentProcRvType + Variant_t.type], eax
  mov [currentSymbols + Variant_t.type], eax
  mov [dst + Variant_t.type], eax
  mov [x + Variant_t.type], eax
  mov [y + Variant_t.type], eax
  mov [opcode + Variant_t.type], eax
  mov [originalOpcode + Variant_t.type], eax
  mov [symbols + Variant_t.type], eax
  mov [arrayOfProcedures + Variant_t.type], eax
  mov [arrayOfMessageFormats + Variant_t.type], eax
  mov [fmtHashToIdMap + Variant_t.type], eax
  mov [fakeSymbolInfoForEOL + Variant_t.type], eax
  mov [fakeSymbolInfoForGlued + Variant_t.type], eax
  mov [globals + Variant_t.type], eax
  mov [classListCnt + Variant_t.type], eax
  mov [classList + Variant_t.type], eax
  mov [methodsList + Variant_t.type], eax
  mov [tmp5146 + Variant_t.type], eax
  mov [tmp5171 + Variant_t.type], eax
  mov [tmp5172 + Variant_t.type], eax
  mov [tmp5173 + Variant_t.type], eax
  mov [tmp5390 + Variant_t.type], eax
  mov [tmp5391 + Variant_t.type], eax
  mov [tmp5651 + Variant_t.type], eax
  mov [tmp5674 + Variant_t.type], eax
  mov [tmp5675 + Variant_t.type], eax
  mov [tmp5676 + Variant_t.type], eax
  mov [tmp5682 + Variant_t.type], eax
  mov [tmp5735 + Variant_t.type], eax
  mov [tmp5736 + Variant_t.type], eax
  mov [tmp5737 + Variant_t.type], eax
  mov [tmp5738 + Variant_t.type], eax
  mov [tmp5768 + Variant_t.type], eax
  mov [tmp5799 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [dstType + Variant_t.type], eax
  mov [xType + Variant_t.type], eax
  mov [idxType + Variant_t.type], eax
  mov [symbolInfo + Variant_t.type], eax
  mov [params + Variant_t.type], eax
  mov [encodedFormat + Variant_t.type], eax
  mov [encodedFormatHash + Variant_t.type], eax
  mov [messageFormatId + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [rv + Variant_t.type], eax
  mov [sysCallId + Variant_t.type], eax
  mov [name + Variant_t.type], eax
  mov [methodId + Variant_t.type], eax
  mov [signOkLabel + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [proto + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [symbolType + Variant_t.type], eax
  mov [expectedType + Variant_t.type], eax
  mov [rvVariantType + Variant_t.type], eax
  mov [currentFrame + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [srcPtr + Variant_t.type], eax
  mov [tmp5837 + Variant_t.type], eax
  mov [tmp5852 + Variant_t.type], eax
  mov [tmp5863 + Variant_t.type], eax
  mov [tmp5866 + Variant_t.type], eax
  mov [type + Variant_t.type], eax
  mov [msgContent + Variant_t.type], eax
  mov [value + Variant_t.type], eax
  mov [tmp5887 + Variant_t.type], eax
  mov [labels + Variant_t.type], eax
  mov [defaultLabel + Variant_t.type], eax
  mov [nextLabel + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [className + Variant_t.type], eax
  mov [vtable + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [methodProto + Variant_t.type], eax
  mov [methodPtr + Variant_t.type], eax
  ; Skipped loop iterator undefined

  ; code
  ; ----

  lea rcx, [__fmt108 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ quads ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ currentProcName ]
  call __MOLD_VariantDestroy

  lea  rcx, [ currentProcRv ]
  call __MOLD_VariantDestroy

  lea  rcx, [ currentProcRvType ]
  call __MOLD_VariantDestroy

  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentSymbols ]
  call  __MOLD_VariantMapCreate

  mov dword [ currentFrameSize ], 0

  mov dword [ isInsideVcall ], 0

  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy

  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  lea  rcx, [ y ]
  call __MOLD_VariantDestroy

  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ opcode ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  lea  rcx, [ originalOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  mov dword [ paramsCnt ], 0

  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbols ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ arrayOfProcedures ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfProcedures ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ arrayOfMessageFormats ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfMessageFormats ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ fmtHashToIdMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ fmtHashToIdMap ]
  call  __MOLD_VariantMapCreate

  lea  rcx, [ fakeSymbolInfoForEOL ]
  call __MOLD_VariantDestroy
  lea  rcx , [ fakeSymbolInfoForEOL ]
  lea  rdx , [ __const5144 ]
  lea  r8 , [ __const5145 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ fakeSymbolInfoForGlued ]
  call __MOLD_VariantDestroy
  lea  rcx , [ fakeSymbolInfoForGlued ]
  lea  rdx , [ __const5147 ]
  lea  r8 , [ __const5148 ]
  call  __MOLD_VariantMapCreateFromInitList

; 
; -----------------------------
; BEGIN: for keys undefined values item
; 
  jmp l5150

l5149:

  ; __mold_syscall( 43 )
  lea rcx , [ item ]
  push rdi
  lea  rdi , [ tmp5146 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5146 + Variant_t.value]
  mov dword [ itemCnt ], eax

  mov dword [ tmp5151 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx, [ originalOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ originalOpcode ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove

  lea  rcx, [ dstType ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstType ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove

  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea rcx, [ xType ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove

  mov dword [ tmp5152 ], 0

  mov dword [ tmp5151 ], 2

  mov eax, dword [ itemCnt ]
  cmp eax, dword [ tmp5151 ]
  jle l5153

  xor eax, eax
  cmp [ x  + Variant_t.type], 5
  setz al
  mov dword [ tmp5152 ], eax

l5153:

  cmp dword [ tmp5152 ], 0
  jz l5155

  mov dword [ tmp5154 ], 0

  lea rcx, [ opcode ]
  lea rdx, [ __literal103 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5157

  mov dword [ tmp5158 ], 0

  lea rcx, [ opcode ]
  lea rdx, [ __literal105 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5159

  mov dword [ tmp5160 ], 0

  lea rcx, [ opcode ]
  lea rdx, [ __literal622 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5161

  mov dword [ tmp5162 ], 0

  lea rcx, [ opcode ]
  lea rdx, [ __literal628 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5163

  mov dword [ tmp5164 ], 1

  mov dword [ tmp5151 ], 0

  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp5146 ]
  lea rdx, [ __literal779 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5165

  mov dword [ tmp5151 ], 1

  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp5146 ]
  lea  rdx , [ __literal85 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5164 ], eax

l5165:

  mov eax, dword [ tmp5164 ]
  mov dword [ tmp5162 ], eax

l5163:

  mov eax, dword [ tmp5162 ]
  mov dword [ tmp5160 ], eax

l5161:

  mov eax, dword [ tmp5160 ]
  mov dword [ tmp5158 ], eax

l5159:

  mov eax, dword [ tmp5158 ]
  mov dword [ tmp5154 ], eax

l5157:

  cmp dword [ tmp5154 ], 0
  jz l5167

  lea rcx, [ opcode ]
  lea rdx, [ __literal623 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5169

  lea rcx , [ this ]
  lea rdx , [ currentSymbols ]
  lea r8 , [ dst ]
  lea  rax , [ dstType ]
  call  __CodeGeneratorX64__getSymbolType$2

  lea rcx , [ this ]
  lea rdx , [ currentSymbols ]
  lea r8 , [ y ]
  lea  rax , [ tmp5171 ]
  call  __CodeGeneratorX64__getSymbolType$2

  lea  rcx, [ idxType ]
  call __MOLD_VariantDestroy
  lea rcx, [ idxType ]
  lea rdx, [ tmp5171 ]
  call __MOLD_VariantMove

  lea  rcx, [ tmp5173 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal227 ]
  lea  r8 , [ tmp5173 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp5172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5173 ]
  lea  rdx , [ dstType ]
  lea  r8 , [ tmp5172 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5172 ]
  lea  rdx , [ __literal780 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5171 ]
  lea  rdx , [ idxType ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin

  jmp l5170

l5169:

  lea rcx , [ this ]
  lea rdx , [ currentSymbols ]
  lea r8 , [ x ]
  lea  rax , [ xType ]
  call  __CodeGeneratorX64__getSymbolType$2

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal227 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5171 ]
  lea  rdx , [ xType ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin

l5170:

l5167:

l5168:

l5155:

l5156:

  lea rcx, [ opcode ]
  lea rdx, [ __literal117 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5174

  lea rcx, [__fmt109 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5175

l5174:

  lea rcx, [ opcode ]
  lea rdx, [ __literal588 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5176

  lea rcx, [__fmt110 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5177

l5176:

  lea rcx, [ opcode ]
  lea rdx, [ __literal142 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5178

  lea rcx, [__fmt111 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5179

l5178:

  mov dword [ tmp5160 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal782 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5180

  mov dword [ tmp5162 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal783 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5181

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal784 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5162 ], eax

l5181:

  mov eax, dword [ tmp5162 ]
  mov dword [ tmp5160 ], eax

l5180:

  cmp dword [ tmp5160 ], 0
  jz l5182

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  call  __CodeGeneratorX64_variantMove$2

  jmp l5183

l5182:

  mov dword [ tmp5162 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal785 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5184

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal786 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5162 ], eax

l5184:

  cmp dword [ tmp5162 ], 0
  jz l5185

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  call  __CodeGeneratorX64__move_int32$2

  jmp l5186

l5185:

  mov dword [ tmp5164 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal787 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5187

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal788 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5164 ], eax

l5187:

  cmp dword [ tmp5164 ], 0
  jz l5188

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  call  __CodeGeneratorX64__move_int64$2

  jmp l5189

l5188:

  mov dword [ tmp5166 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal789 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5190

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal790 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5166 ], eax

l5190:

  cmp dword [ tmp5166 ], 0
  jz l5192

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal791
  lea r8 , [ __literal791 ]
  call  __CodeGeneratorX64__loadString$2

  jmp l5193

l5192:

  lea rcx, [ opcode ]
  lea rdx, [ __literal792 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5194

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal793
  lea r8 , [ __literal793 ]
  call  __CodeGeneratorX64__loadString$2

  jmp l5195

l5194:

  lea rcx, [ opcode ]
  lea rdx, [ __literal794 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5197

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal795
  lea r8 , [ __literal795 ]
  call  __CodeGeneratorX64__loadString$2

  jmp l5198

l5197:

  lea rcx, [ opcode ]
  lea rdx, [ __literal796 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5200

  lea rcx, [__fmt112 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5201

l5200:

  lea rcx, [ opcode ]
  lea rdx, [ __literal798 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5203

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal597
  lea rax, [ __literal597 ]
  push rax
  call  __CodeGeneratorX64__alu2_int64$4
  add rsp, 8

  jmp l5204

l5203:

  lea rcx, [ opcode ]
  lea rdx, [ __literal799 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5206

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal599
  lea rax, [ __literal599 ]
  push rax
  call  __CodeGeneratorX64__alu2_int64$4
  add rsp, 8

  jmp l5207

l5206:

  lea rcx, [ opcode ]
  lea rdx, [ __literal800 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5209

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal801
  lea rax, [ __literal801 ]
  push rax
  call  __CodeGeneratorX64__alu2_int64$4
  add rsp, 8

  jmp l5210

l5209:

  lea rcx, [ opcode ]
  lea rdx, [ __literal802 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5212

  lea rcx, [__fmt113 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5213

l5212:

  lea rcx, [ opcode ]
  lea rdx, [ __literal807 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5215

  lea rcx, [__fmt114 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5216

l5215:

  lea rcx, [ opcode ]
  lea rdx, [ __literal813 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5218

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$4
  add rsp, 8

  jmp l5219

l5218:

  lea rcx, [ opcode ]
  lea rdx, [ __literal815 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5221

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$4
  add rsp, 8

  jmp l5222

l5221:

  lea rcx, [ opcode ]
  lea rdx, [ __literal817 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5224

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal204
  lea rax, [ __literal204 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$4
  add rsp, 8

  jmp l5225

l5224:

  lea rcx, [ opcode ]
  lea rdx, [ __literal818 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5227

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal97
  lea rax, [ __literal97 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$4
  add rsp, 8

  jmp l5228

l5227:

  lea rcx, [ opcode ]
  lea rdx, [ __literal819 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5230

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal820
  lea rax, [ __literal820 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$4
  add rsp, 8

  jmp l5231

l5230:

  lea rcx, [ opcode ]
  lea rdx, [ __literal821 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5233

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal99
  lea rax, [ __literal99 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$4
  add rsp, 8

  jmp l5234

l5233:

  lea rcx, [ opcode ]
  lea rdx, [ __literal822 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5236

  lea rcx, [__fmt115 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5237

l5236:

  lea rcx, [ opcode ]
  lea rdx, [ __literal824 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5239

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal597
  lea rax, [ __literal597 ]
  push rax
  call  __CodeGeneratorX64__alu2_int32$4
  add rsp, 8

  jmp l5240

l5239:

  lea rcx, [ opcode ]
  lea rdx, [ __literal825 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5242

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal599
  lea rax, [ __literal599 ]
  push rax
  call  __CodeGeneratorX64__alu2_int32$4
  add rsp, 8

  jmp l5243

l5242:

  lea rcx, [ opcode ]
  lea rdx, [ __literal826 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5245

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal801
  lea rax, [ __literal801 ]
  push rax
  call  __CodeGeneratorX64__alu2_int32$4
  add rsp, 8

  jmp l5246

l5245:

  lea rcx, [ opcode ]
  lea rdx, [ __literal827 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5248

  lea rcx, [__fmt116 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5249

l5248:

  lea rcx, [ opcode ]
  lea rdx, [ __literal830 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5251

  lea rcx, [__fmt117 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5252

l5251:

  lea rcx, [ opcode ]
  lea rdx, [ __literal835 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5254

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5255

l5254:

  lea rcx, [ opcode ]
  lea rdx, [ __literal836 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5257

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5258

l5257:

  lea rcx, [ opcode ]
  lea rdx, [ __literal837 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5260

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal204
  lea rax, [ __literal204 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5261

l5260:

  lea rcx, [ opcode ]
  lea rdx, [ __literal838 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5263

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal97
  lea rax, [ __literal97 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5264

l5263:

  lea rcx, [ opcode ]
  lea rdx, [ __literal839 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5266

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal820
  lea rax, [ __literal820 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5267

l5266:

  lea rcx, [ opcode ]
  lea rdx, [ __literal840 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5269

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal99
  lea rax, [ __literal99 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5270

l5269:

  lea rcx, [ opcode ]
  lea rdx, [ __literal841 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5272

  mov dword [ tmp5151 ], 2

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea  rcx , [ y ]
  lea  rdx , [ tmp5146 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5274 ], eax

  mov eax, dword [ tmp5274 ]
  mov [ tmp5146 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ tmp5146 ]
  call  __CodeGeneratorX64_store32$2

  jmp l5273

l5272:

  lea rcx, [ opcode ]
  lea rdx, [ __literal842 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5275

  mov dword [ tmp5151 ], 2

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea  rcx , [ y ]
  lea  rdx , [ tmp5146 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp5277 ], eax

  mov eax, dword [ tmp5277 ]
  mov [ tmp5146 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ tmp5146 ]
  call  __CodeGeneratorX64_store32$2

  jmp l5276

l5275:

  lea rcx, [ opcode ]
  lea rdx, [ __literal843 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5278

  lea rcx, [__fmt118 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5279

l5278:

  lea rcx, [ opcode ]
  lea rdx, [ __literal845 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5281

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal846
  lea rax, [ __literal846 ]
  push rax
  call  __CodeGeneratorX64__alu2_float64$4
  add rsp, 8

  jmp l5282

l5281:

  lea rcx, [ opcode ]
  lea rdx, [ __literal847 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5284

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal848
  lea rax, [ __literal848 ]
  push rax
  call  __CodeGeneratorX64__alu2_float64$4
  add rsp, 8

  jmp l5285

l5284:

  lea rcx, [ opcode ]
  lea rdx, [ __literal849 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5287

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal850
  lea rax, [ __literal850 ]
  push rax
  call  __CodeGeneratorX64__alu2_float64$4
  add rsp, 8

  jmp l5288

l5287:

  lea rcx, [ opcode ]
  lea rdx, [ __literal851 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5290

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal852
  lea rax, [ __literal852 ]
  push rax
  call  __CodeGeneratorX64__alu2_float64$4
  add rsp, 8

  jmp l5291

l5290:

  lea rcx, [ opcode ]
  lea rdx, [ __literal853 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5293

  lea rcx, [__fmt119 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5294

l5293:

  lea rcx, [ opcode ]
  lea rdx, [ __literal858 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5296

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$4
  add rsp, 8

  jmp l5297

l5296:

  lea rcx, [ opcode ]
  lea rdx, [ __literal859 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5299

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$4
  add rsp, 8

  jmp l5300

l5299:

  lea rcx, [ opcode ]
  lea rdx, [ __literal860 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5302

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal83
  lea rax, [ __literal83 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$4
  add rsp, 8

  jmp l5303

l5302:

  lea rcx, [ opcode ]
  lea rdx, [ __literal861 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5305

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal862
  lea rax, [ __literal862 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$4
  add rsp, 8

  jmp l5306

l5305:

  lea rcx, [ opcode ]
  lea rdx, [ __literal863 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5308

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal84
  lea rax, [ __literal84 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$4
  add rsp, 8

  jmp l5309

l5308:

  lea rcx, [ opcode ]
  lea rdx, [ __literal864 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5311

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal865
  lea rax, [ __literal865 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$4
  add rsp, 8

  jmp l5312

l5311:

  lea rcx, [ opcode ]
  lea rdx, [ __literal866 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5314

  mov dword [ tmp5151 ], 4

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea  rcx , [ y ]
  lea  rdx , [ tmp5146 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5316 ], eax

  mov eax, dword [ tmp5316 ]
  mov [ tmp5146 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ tmp5146 ]
  call  __CodeGeneratorX64_store32$2

  jmp l5315

l5314:

  lea rcx, [ opcode ]
  lea rdx, [ __literal867 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5317

  mov dword [ tmp5151 ], 4

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea  rcx , [ y ]
  lea  rdx , [ tmp5146 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp5319 ], eax

  mov eax, dword [ tmp5319 ]
  mov [ tmp5146 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ tmp5146 ]
  call  __CodeGeneratorX64_store32$2

  jmp l5318

l5317:

  lea rcx, [ opcode ]
  lea rdx, [ __literal868 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5320

  mov dword [ tmp5151 ], 4

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ y ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5323

  lea rcx, [__fmt120 ]
  call __MOLD_PrintFormatFromMemory

l5323:

l5324:

  jmp l5321

l5320:

  lea rcx, [ opcode ]
  lea rdx, [ __literal870 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5325

  mov dword [ tmp5151 ], 4

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ y ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5328

  lea rcx, [__fmt120 ]
  call __MOLD_PrintFormatFromMemory

l5328:

l5329:

  jmp l5326

l5325:

  lea rcx, [ opcode ]
  lea rdx, [ __literal871 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5330

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal872
  lea rdx , [ __literal872 ]
  lea r8 , [ x ]
  lea r9 , [ dst ]
  call  __CodeGeneratorX64_call2$3

  jmp l5331

l5330:

  mov dword [ tmp5332 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal873 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5333

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal874 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5332 ], eax

l5333:

  cmp dword [ tmp5332 ], 0
  jz l5335

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal875
  lea rdx , [ __literal875 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5336

l5335:

  lea rcx, [ opcode ]
  lea rdx, [ __literal876 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5337

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal877
  lea rdx , [ __literal877 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5338

l5337:

  lea rcx, [ opcode ]
  lea rdx, [ __literal878 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5340

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal879
  lea rdx , [ __literal879 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5341

l5340:

  lea rcx, [ opcode ]
  lea rdx, [ __literal880 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5343

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal881
  lea rdx , [ __literal881 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5344

l5343:

  lea rcx, [ opcode ]
  lea rdx, [ __literal882 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5346

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal883
  lea rdx , [ __literal883 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5347

l5346:

  mov dword [ tmp5348 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal884 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5349

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal885 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5348 ], eax

l5349:

  cmp dword [ tmp5348 ], 0
  jz l5351

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal886
  lea rdx , [ __literal886 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  call  __CodeGeneratorX64_call2$3

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal887
  lea r8 , [ __literal887 ]
  call  __CodeGeneratorX64_store$2

  jmp l5352

l5351:

  mov dword [ tmp5350 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal888 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5353

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal889 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5350 ], eax

l5353:

  cmp dword [ tmp5350 ], 0
  jz l5355

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal890
  lea rdx , [ __literal890 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  call  __CodeGeneratorX64_call2$3

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal887
  lea r8 , [ __literal887 ]
  call  __CodeGeneratorX64_store$2

  jmp l5356

l5355:

  lea rcx, [ opcode ]
  lea rdx, [ __literal891 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5357

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal892
  lea rdx , [ __literal892 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  call  __CodeGeneratorX64_call2$3

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal887
  lea r8 , [ __literal887 ]
  call  __CodeGeneratorX64_store$2

  jmp l5358

l5357:

  lea rcx, [ opcode ]
  lea rdx, [ __literal893 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5360

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal894
  lea rdx , [ __literal894 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  call  __CodeGeneratorX64_call2$3

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal887
  lea r8 , [ __literal887 ]
  call  __CodeGeneratorX64_store$2

  jmp l5361

l5360:

  lea rcx, [ opcode ]
  lea rdx, [ __literal895 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5363

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal892
  lea rdx , [ __literal892 ]
  lea r8 , [ y ]
  lea r9 , [ x ]
  call  __CodeGeneratorX64_call2$3

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal887
  lea r8 , [ __literal887 ]
  call  __CodeGeneratorX64_store$2

  jmp l5364

l5363:

  lea rcx, [ opcode ]
  lea rdx, [ __literal896 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5366

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal894
  lea rdx , [ __literal894 ]
  lea r8 , [ y ]
  lea r9 , [ x ]
  call  __CodeGeneratorX64_call2$3

  lea rcx , [ this ]
  lea rdx , [ dst ]
; WARNING: Failed to get variable size: __literal887
  lea r8 , [ __literal887 ]
  call  __CodeGeneratorX64_store$2

  jmp l5367

l5366:

  lea rcx, [ opcode ]
  lea rdx, [ __literal897 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5369

  lea rcx, [__fmt121 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5370

l5369:

  lea rcx, [ opcode ]
  lea rdx, [ __literal901 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5372

  lea rcx, [__fmt122 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5373

l5372:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal598 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5375

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal903
  lea rdx , [ __literal903 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3AndDestroy$4
  add rsp, 8

  jmp l5376

l5375:

  lea rcx, [ opcode ]
  lea rdx, [ __literal904 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5378

  mov dword [ tmp5151 ], 5

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ y ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5381

  lea rcx, [__fmt120 ]
  call __MOLD_PrintFormatFromMemory

l5381:

l5382:

  jmp l5379

l5378:

  lea rcx, [ opcode ]
  lea rdx, [ __literal905 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5383

  mov dword [ tmp5151 ], 5

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ y ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5386

  lea rcx, [__fmt120 ]
  call __MOLD_PrintFormatFromMemory

l5386:

l5387:

  jmp l5384

l5383:

  lea rcx, [ opcode ]
  lea rdx, [ __literal906 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5388

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp5146 ]
  lea rdx , [ dst ]
  lea  rax , [ symbolInfo ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6818
  movsxd rax, dword [ symbolInfo + Variant_t.value ]
  mov    qword [ symbolInfo + Variant_t.value ], rax
l6818:


  lea rcx, [__fmt123 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt124 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp5390 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5390 ]
  lea  rdx , [ tmp5391 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantSub

  lea rcx, [__fmt125 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal645 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt126 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal645 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt127 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5389

l5388:

  mov dword [ tmp5392 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal914 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5393

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal915 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5392 ], eax

l5393:

  cmp dword [ tmp5392 ], 0
  jz l5395

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal916
  lea rax, [ __literal916 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$4
  add rsp, 8

  jmp l5396

l5395:

  mov dword [ tmp5394 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal917 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5397

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal918 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5394 ], eax

l5397:

  cmp dword [ tmp5394 ], 0
  jz l5399

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal919
  lea rax, [ __literal919 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$4
  add rsp, 8

  jmp l5400

l5399:

  lea rcx, [ opcode ]
  lea rdx, [ __literal920 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5401

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal921
  lea rax, [ __literal921 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$4
  add rsp, 8

  jmp l5402

l5401:

  lea rcx, [ opcode ]
  lea rdx, [ __literal922 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5404

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal923
  lea rax, [ __literal923 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$4
  add rsp, 8

  jmp l5405

l5404:

  lea rcx, [ opcode ]
  lea rdx, [ __literal924 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5407

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ y ]
  lea r9 , [ x ]
; WARNING: Failed to get variable size: __literal921
  lea rax, [ __literal921 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$4
  add rsp, 8

  jmp l5408

l5407:

  lea rcx, [ opcode ]
  lea rdx, [ __literal925 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5410

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ y ]
  lea r9 , [ x ]
; WARNING: Failed to get variable size: __literal923
  lea rax, [ __literal923 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$4
  add rsp, 8

  jmp l5411

l5410:

  lea rcx, [ opcode ]
  lea rdx, [ __literal926 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5413

  lea rcx, [__fmt128 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5414

l5413:

  lea rcx, [ opcode ]
  lea rdx, [ __literal928 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5416

  lea rcx, [__fmt129 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5417

l5416:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal605 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5419

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  jmp l5420

l5419:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal930 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5422

  lea rcx, [__fmt130 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5423

l5422:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal606 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5425

  lea rcx, [__fmt131 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5426

l5425:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal609 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5428

  mov dword [ tmp5431 ], 1

  mov eax, dword [ tmp5431 ]
  mov [ tmp5146 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5432

  lea rcx, [__fmt132 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5433

l5432:

  lea rcx, [__fmt133 ]
  call __MOLD_PrintFormatFromMemory

l5433:

  jmp l5429

l5428:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal608 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5435

  lea rcx, [__fmt134 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5436

l5435:

  lea rcx, [ opcode ]
  lea rdx, [ __literal934 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5437

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$4
  add rsp, 8

  jmp l5438

l5437:

  lea rcx, [ opcode ]
  lea rdx, [ __literal935 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5440

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$4
  add rsp, 8

  jmp l5441

l5440:

  lea rcx, [ opcode ]
  lea rdx, [ __literal936 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5443

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal204
  lea rax, [ __literal204 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$4
  add rsp, 8

  jmp l5444

l5443:

  lea rcx, [ opcode ]
  lea rdx, [ __literal937 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5446

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal97
  lea rax, [ __literal97 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$4
  add rsp, 8

  jmp l5447

l5446:

  lea rcx, [ opcode ]
  lea rdx, [ __literal938 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5449

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal820
  lea rax, [ __literal820 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$4
  add rsp, 8

  jmp l5450

l5449:

  lea rcx, [ opcode ]
  lea rdx, [ __literal939 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5452

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal99
  lea rax, [ __literal99 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$4
  add rsp, 8

  jmp l5453

l5452:

  lea rcx, [ opcode ]
  lea rdx, [ __literal940 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5455

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5456

l5455:

  lea rcx, [ opcode ]
  lea rdx, [ __literal941 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5458

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5459

l5458:

  lea rcx, [ opcode ]
  lea rdx, [ __literal942 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5461

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal204
  lea rax, [ __literal204 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5462

l5461:

  lea rcx, [ opcode ]
  lea rdx, [ __literal943 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5464

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal97
  lea rax, [ __literal97 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5465

l5464:

  lea rcx, [ opcode ]
  lea rdx, [ __literal944 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5467

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal820
  lea rax, [ __literal820 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5468

l5467:

  lea rcx, [ opcode ]
  lea rdx, [ __literal945 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5470

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal99
  lea rax, [ __literal99 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5471

l5470:

  lea rcx, [ opcode ]
  lea rdx, [ __literal946 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5473

  mov dword [ tmp5151 ], 2

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ y ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5476

  lea rcx, [__fmt120 ]
  call __MOLD_PrintFormatFromMemory

l5476:

l5477:

  jmp l5474

l5473:

  lea rcx, [ opcode ]
  lea rdx, [ __literal947 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5478

  mov dword [ tmp5151 ], 2

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ y ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5481

  lea rcx, [__fmt120 ]
  call __MOLD_PrintFormatFromMemory

l5481:

l5482:

  jmp l5479

l5478:

  lea rcx, [ opcode ]
  lea rdx, [ __literal948 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5483

  mov dword [ tmp5151 ], 0

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ tmp5146 ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5484

l5483:

  lea rcx, [ opcode ]
  lea rdx, [ __literal949 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5486

  mov dword [ tmp5151 ], 0

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ tmp5146 ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5487

l5486:

  lea rcx, [ opcode ]
  lea rdx, [ __literal950 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5489

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5490

l5489:

  lea rcx, [ opcode ]
  lea rdx, [ __literal951 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5492

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$4
  add rsp, 8

  jmp l5493

l5492:

  lea rcx, [ opcode ]
  lea rdx, [ __literal952 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5495

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5496

l5495:

  lea rcx, [ opcode ]
  lea rdx, [ __literal953 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5498

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$4
  add rsp, 8

  jmp l5499

l5498:

  lea rcx, [ opcode ]
  lea rdx, [ __literal954 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5501

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal814
  lea rax, [ __literal814 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_float64$4
  add rsp, 8

  jmp l5502

l5501:

  lea rcx, [ opcode ]
  lea rdx, [ __literal955 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5504

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal816
  lea rax, [ __literal816 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_float64$4
  add rsp, 8

  jmp l5505

l5504:

  lea rcx, [ opcode ]
  lea rdx, [ __literal956 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5507

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal83
  lea rax, [ __literal83 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_float64$4
  add rsp, 8

  jmp l5508

l5507:

  lea rcx, [ opcode ]
  lea rdx, [ __literal957 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5510

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal862
  lea rax, [ __literal862 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_float64$4
  add rsp, 8

  jmp l5511

l5510:

  lea rcx, [ opcode ]
  lea rdx, [ __literal958 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5513

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal84
  lea rax, [ __literal84 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_float64$4
  add rsp, 8

  jmp l5514

l5513:

  lea rcx, [ opcode ]
  lea rdx, [ __literal959 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5516

  lea rcx , [ this ]
  lea rdx , [ dst ]
  lea r8 , [ x ]
  lea r9 , [ y ]
; WARNING: Failed to get variable size: __literal865
  lea rax, [ __literal865 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_float64$4
  add rsp, 8

  jmp l5517

l5516:

  lea rcx, [ opcode ]
  lea rdx, [ __literal649 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5519

  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp5146 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5146 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  lea  rcx, [ encodedFormat ]
  call __MOLD_VariantDestroy
  lea  rcx , [ encodedFormat ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ encodedFormatHash ]
  call __MOLD_VariantDestroy
  lea rcx, [ encodedFormatHash ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys undefined values oneParam
; 
  jmp l5522

l5521:

  lea  rcx , [ currentSymbols ]
  lea  rdx , [ oneParam ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolInfo  + Variant_t.type], 0
  jz l5524

  ; __mold_syscall( 50 )
  lea rcx , [ encodedFormat ]
  lea rdx , [ symbolInfo ]
  call qword [rbx + 8 * 50 ]

  lea  rcx, [ tmp5173 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ encodedFormatHash ]
  lea  rdx , [ __literal960 ]
  lea  r8 , [ tmp5173 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5391 ]
  push rdi
  lea  rdi , [ tmp5146 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp5172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5173 ]
  lea  rdx , [ tmp5146 ]
  lea  r8 , [ tmp5172 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5172 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5391 ]
  push rdi
  lea  rdi , [ tmp5146 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ encodedFormatHash ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5171 ]
  lea  rdx , [ tmp5146 ]
  lea  r8 , [ encodedFormatHash ]
  call  __MOLD_VariantStringJoin

  jmp l5525

l5524:

  lea rcx, [ oneParam ]
  lea rdx, [ __literal778 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5527

  ; __mold_syscall( 50 )
  lea rcx , [ encodedFormat ]
  lea rdx , [ fakeSymbolInfoForEOL ]
  call qword [rbx + 8 * 50 ]

  lea  rcx , [ encodedFormatHash ]
  lea  rdx , [ __literal961 ]
  lea  r8 , [ encodedFormatHash ]
  call  __MOLD_VariantStringJoin

  jmp l5528

l5527:

  lea rcx, [ oneParam ]
  lea rdx, [ __literal648 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5530

  ; __mold_syscall( 50 )
  lea rcx , [ encodedFormat ]
  lea rdx , [ fakeSymbolInfoForGlued ]
  call qword [rbx + 8 * 50 ]

  lea  rcx , [ encodedFormatHash ]
  lea  rdx , [ __literal648 ]
  lea  r8 , [ encodedFormatHash ]
  call  __MOLD_VariantStringJoin

  jmp l5531

l5530:

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp5391 ]
  lea rdx , [ oneParam ]
  lea  rax , [ tmp5146 ]
  mov  r10d, 4
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6819
  movsxd rax, dword [ tmp5146 + Variant_t.value ]
  mov    qword [ tmp5146 + Variant_t.value ], rax
l6819:


  ; __mold_syscall( 50 )
  lea rcx , [ encodedFormat ]
  lea rdx , [ tmp5146 ]
  call qword [rbx + 8 * 50 ]

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ encodedFormatHash ]
  lea  rdx , [ __literal962 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ encodedFormatHash ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5171 ]
  lea  rdx , [ oneParam ]
  lea  r8 , [ encodedFormatHash ]
  call  __MOLD_VariantStringJoin

l5531:

l5528:

l5525:

  lea  rcx , [ encodedFormatHash ]
  lea  rdx , [ __literal669 ]
  lea  r8 , [ encodedFormatHash ]
  call  __MOLD_VariantStringJoin

  ret

l5522:

  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l5521 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  lea  rcx , [ fmtHashToIdMap ]
  lea  rdx , [ encodedFormatHash ]
  lea  r8 , [ messageFormatId ]
  call  __MOLD_VariantLoadFromKey

  cmp [ messageFormatId + Variant_t.type ], 0
  jnz l5532

  ; __mold_syscall( 50 )
  lea rcx , [ arrayOfMessageFormats ]
  lea rdx , [ encodedFormat ]
  call qword [rbx + 8 * 50 ]

  ; __mold_syscall( 43 )
  lea rcx , [ arrayOfMessageFormats ]
  push rdi
  lea  rdi , [ tmp5146 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp5151 ], 1

  mov [ tmp5391 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5391 + Variant_t.value], rax

  lea  rcx , [ tmp5146 ]
  lea  rdx , [ tmp5391 ]
  lea  r8 , [ messageFormatId ]
  call  __MOLD_VariantSub

  lea  rcx , [ fmtHashToIdMap ]
  lea  rdx , [ encodedFormatHash ]
  lea  r8 , [ messageFormatId ]
  call  __MOLD_VariantStoreAtKey

l5532:

l5533:

  lea rcx, [__fmt135 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5520

l5519:

  lea rcx, [ opcode ]
  lea rdx, [ __literal965 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5534

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx, [__fmt136 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5535

l5534:

  lea rcx, [ opcode ]
  lea rdx, [ __literal969 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5536

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx, [__fmt137 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5537

l5536:

  lea rcx, [ opcode ]
  lea rdx, [ __literal971 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5538

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx, [__fmt138 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5539

l5538:

  lea rcx, [ opcode ]
  lea rdx, [ __literal973 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5541

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx, [__fmt139 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5542

l5541:

  lea rcx, [ opcode ]
  lea rdx, [ __literal622 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5544

  mov dword [ tmp5151 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ sysCallId ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt140 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx , [ this ]
  lea rdx , [ params ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$1

  cmp [ rv  + Variant_t.type], 0
  jz l5547

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal977
  lea rdx , [ __literal977 ]
  call  __CodeGeneratorX64_push$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal977
  lea rdx , [ __literal977 ]
  lea r8 , [ rv ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
  lea rdx , [ sysCallId ]
  call  __CodeGeneratorX64__syscall$1

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal977
  lea rdx , [ __literal977 ]
  call  __CodeGeneratorX64_pop$1

  jmp l5548

l5547:

  lea rcx , [ this ]
  lea rdx , [ sysCallId ]
  call  __CodeGeneratorX64__syscall$1

l5548:

  jmp l5545

l5544:

  lea rcx, [ opcode ]
  lea rdx, [ __literal103 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5549

  mov dword [ tmp5151 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp5391 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5391 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5391 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  mov dword [ tmp5551 ], 1

  lea rcx, [ name ]
  lea rdx, [ __literal641 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5552

  mov dword [ tmp5553 ], 1

  lea rcx, [ name ]
  lea rdx, [ __literal978 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5554

  lea  rcx , [ name ]
  lea  rdx , [ __literal979 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5553 ], eax

l5554:

  mov eax, dword [ tmp5553 ]
  mov dword [ tmp5551 ], eax

l5552:

  cmp dword [ tmp5551 ], 0
  jz l5556

  mov dword [ tmp5151 ], 0

  lea  rcx , [ params ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal693
  lea rdx , [ __literal693 ]
  lea r8 , [ tmp5391 ]
  call  __CodeGeneratorX64_lea$2

  mov dword [ tmp5151 ], 1

  lea  rcx , [ params ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal694
  lea rdx , [ __literal694 ]
  lea r8 , [ tmp5391 ]
  call  __CodeGeneratorX64_lea$2

  mov dword [ tmp5151 ], 2

  lea  rcx , [ params ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal695
  lea rdx , [ __literal695 ]
  lea r8 , [ tmp5391 ]
  call  __CodeGeneratorX64_lea$2

  mov dword [ tmp5151 ], 3

  lea  rcx , [ params ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal980
  lea rdx , [ __literal980 ]
  lea r8 , [ tmp5391 ]
  call  __CodeGeneratorX64_lea$2

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __CodeGeneratorX64_call$1

  jmp l5557

l5556:

  lea rcx , [ this ]
  lea rdx , [ params ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$1

  cmp [ rv  + Variant_t.type], 0
  jz l5558

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal981
  lea rdx , [ __literal981 ]
  lea r8 , [ rv ]
  call  __CodeGeneratorX64_lea$2

l5558:

l5559:

  lea rcx , [ this ]
  lea rdx , [ name ]
  call  __CodeGeneratorX64_call$1

  mov dword [ tmp5151 ], 4

  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5151 ]
  jle l5560

  mov dword [ tmp5563 ], 8

  mov eax, dword [ paramsCnt ]
  imul eax, dword [ tmp5563 ]
  mov dword [ tmp5562 ], eax

  mov dword [ tmp5563 ], 32

  mov eax, dword [ tmp5562 ]
  sub eax, dword [ tmp5563 ]
  mov dword [ tmp5151 ], eax

  lea rcx, [__fmt141 ]
  call __MOLD_PrintFormatFromMemory

l5560:

l5561:

l5557:

  jmp l5550

l5549:

  lea rcx, [ opcode ]
  lea rdx, [ __literal105 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5564

  mov dword [ tmp5151 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ methodId ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5151 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp5391 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5391 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5391 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  lea rcx , [ this ]
  lea rdx , [ params ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$1

  cmp [ rv  + Variant_t.type], 0
  jz l5566

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal981
  lea rdx , [ __literal981 ]
  lea r8 , [ rv ]
  call  __CodeGeneratorX64_lea$2

l5566:

l5567:

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp5391 ]
  lea  rax , [ signOkLabel ]
  mov  r10d, 133
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6820
  movsxd rax, dword [ signOkLabel + Variant_t.value ]
  mov    qword [ signOkLabel + Variant_t.value ], rax
l6820:


  lea rcx, [__fmt142 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp5151 ], 4

  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5151 ]
  jle l5568

  mov dword [ tmp5562 ], 8

  mov eax, dword [ paramsCnt ]
  imul eax, dword [ tmp5562 ]
  mov dword [ tmp5563 ], eax

  mov dword [ tmp5562 ], 32

  mov eax, dword [ tmp5563 ]
  sub eax, dword [ tmp5562 ]
  mov dword [ tmp5151 ], eax

  lea rcx, [__fmt141 ]
  call __MOLD_PrintFormatFromMemory

l5568:

l5569:

  jmp l5565

l5564:

  lea rcx, [ opcode ]
  lea rdx, [ __literal628 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5570

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  lea rcx, [__fmt143 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5571

l5570:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal993 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5572

  lea rcx, [__fmt144 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5573

l5572:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal996 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5575

  lea rcx, [__fmt145 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5576

l5575:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal611 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5578

  lea rcx, [__fmt146 ]
  call __MOLD_PrintFormatFromMemory

  cmp [ x + Variant_t.type ], 2
  jnz l5581

  lea rcx, [__fmt147 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5582

l5581:

  lea rcx, [__fmt148 ]
  call __MOLD_PrintFormatFromMemory

l5582:

  jmp l5579

l5578:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal607 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5583

  cmp [ x + Variant_t.type ], 2
  jnz l5586

  lea rcx, [__fmt149 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5587

l5586:

  lea rcx, [__fmt150 ]
  call __MOLD_PrintFormatFromMemory

l5587:

  lea rcx, [__fmt151 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5584

l5583:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal612 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5588

  cmp [ x + Variant_t.type ], 4
  jnz l5591

  lea rcx, [__fmt152 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5592

l5591:

  lea rcx, [__fmt150 ]
  call __MOLD_PrintFormatFromMemory

l5592:

  lea rcx, [__fmt153 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5589

l5588:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal1002 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5593

  cmp [ x + Variant_t.type ], 4
  jnz l5596

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal1003
  lea rcx , [ __literal1003 ]
  call qword [rbx + 8 * 41 ]

  jmp l5597

l5596:

  lea rcx, [__fmt154 ]
  call __MOLD_PrintFormatFromMemory

l5597:

  jmp l5594

l5593:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal1005 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5598

  cmp [ x + Variant_t.type ], 4
  jnz l5601

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal1006
  lea rcx , [ __literal1006 ]
  call qword [rbx + 8 * 41 ]

  jmp l5602

l5601:

  lea rcx, [__fmt155 ]
  call __MOLD_PrintFormatFromMemory

l5602:

  jmp l5599

l5598:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal613 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5603

  cmp [ x + Variant_t.type ], 6
  jnz l5606

  mov dword [ tmp5609 ], 1

  mov eax, dword [ tmp5609 ]
  mov [ tmp5391 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5391 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp5391 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5610

  lea rcx, [__fmt156 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5611

l5610:

  mov dword [ tmp5612 ], 0

  mov eax, dword [ tmp5612 ]
  mov [ tmp5391 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5391 + Variant_t.value], rax

  lea rcx, [ x ]
  lea rdx, [ tmp5391 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5613

  lea rcx, [__fmt157 ]
  call __MOLD_PrintFormatFromMemory

l5613:

l5614:

l5611:

  jmp l5607

l5606:

  lea rcx, [__fmt123 ]
  call __MOLD_PrintFormatFromMemory

l5607:

  lea rcx, [__fmt158 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5604

l5603:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal1011 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5615

  lea rcx, [__fmt159 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5616

l5615:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal1014 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5617

  lea rcx, [__fmt160 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5618

l5617:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal1016 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5619

  lea rcx, [__fmt161 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5620

l5619:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal1017 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5621

  lea rcx, [__fmt162 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5622

l5621:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1019 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5624

  lea rcx, [__fmt163 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5625

l5624:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1023 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5627

  lea rcx, [__fmt164 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5628

l5627:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1025 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5630

  lea rcx, [__fmt165 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5631

l5630:

  lea rcx, [ opcode ]
  lea rdx, [ __literal638 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5633

  lea rcx, [__fmt166 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5634

l5633:

  lea rcx, [ opcode ]
  lea rdx, [ __literal595 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5636

  lea rcx, [__fmt167 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ currentSymbols ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l5639

l5638:

  mov dword [ tmp5640 ], 0

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5151 ], 1

  mov [ tmp5146 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5146 + Variant_t.value], rax

  lea rcx, [ tmp5391 ]
  lea rdx, [ tmp5146 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5641

  mov dword [ tmp5642 ], 1

  mov dword [ tmp5644 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5146 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5146  + Variant_t.type], 0
  jz l5645

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5391 ]
  lea  rdx , [ __literal130 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5644 ], eax

l5645:

  cmp dword [ tmp5644 ], 0
  jnz l5643

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5391 ]
  lea  rdx , [ __literal160 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5642 ], eax

l5643:

  mov eax, dword [ tmp5642 ]
  mov dword [ tmp5640 ], eax

l5641:

  cmp dword [ tmp5640 ], 0
  jz l5647

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal248 ]
  lea  r8 , [ tmp5391 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5391  + Variant_t.type], 0
  jz l5649

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5390 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt168 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5650

l5649:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5390 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp5390 ]
  call  __CodeGeneratorX64_variantDestroy$1

l5650:

l5647:

l5648:

  ret

l5639:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5638 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal680 ]
  lea  r8 , [ tmp5390 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5642 ], 1

  mov eax, dword [ tmp5642 ]
  mov [ tmp5651 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5651 + Variant_t.value], rax

  lea rcx, [ tmp5390 ]
  lea rdx, [ tmp5651 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5652

  lea rcx, [__fmt169 ]
  call __MOLD_PrintFormatFromMemory

  lea rcx, [ currentProcName ]
  lea rdx, [ __literal563 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5654

  lea rcx, [__fmt170 ]
  call __MOLD_PrintFormatFromMemory

l5654:

l5655:

l5652:

l5653:

  lea rcx, [ currentProcName ]
  lea rdx, [ __literal563 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5656

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l5659

l5658:

  mov dword [ tmp5642 ], 0

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5651 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5151 ], 2

  mov [ tmp5390 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5390 + Variant_t.value], rax

  lea rcx, [ tmp5651 ]
  lea rdx, [ tmp5390 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5660

  mov dword [ tmp5644 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5390 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5390  + Variant_t.type], 0
  jz l5661

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5651 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5651 ]
  lea  rdx , [ __literal130 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5644 ], eax

l5661:

  mov eax, dword [ tmp5644 ]
  mov dword [ tmp5642 ], eax

l5660:

  cmp dword [ tmp5642 ], 0
  jz l5662

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5651 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp5651 ]
  call  __CodeGeneratorX64_variantDestroy$1

l5662:

l5663:

  ret

l5659:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5658 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
l5656:

l5657:

  lea rcx, [__fmt171 ]
  call __MOLD_PrintFormatFromMemory

  cmp [ currentProcRv  + Variant_t.type], 0
  jz l5664

  mov dword [ tmp5642 ], 0

  mov dword [ tmp5646 ], 1

  mov eax, dword [ isInsideVcall ]
  cmp eax, dword [ tmp5646 ]
  jnz l5666

  lea  rcx , [ currentProcRvType ]
  lea  rdx , [ __literal154 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5642 ], eax

l5666:

  cmp dword [ tmp5642 ], 0
  jz l5667

  lea rcx, [__fmt172 ]
  call __MOLD_PrintFormatFromMemory

l5667:

l5668:

  lea rcx, [__fmt173 ]
  call __MOLD_PrintFormatFromMemory

l5664:

l5665:

  lea rcx, [__fmt174 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5637

l5636:

  lea rcx, [ opcode ]
  lea rdx, [ __literal592 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5669

  mov dword [ tmp5151 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5151 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ proto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ currentProcName ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ proto ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ currentProcRv ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ proto ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ currentSymbols ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ isInsideVcall ], 0

  cmp [ currentProcRv  + Variant_t.type], 0
  jz l5671

  lea  rcx , [ currentSymbols ]
  lea  rdx , [ currentProcRv ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ currentProcRvType ]
  call  __MOLD_VariantLoadFromKey

l5671:

l5672:

  mov dword [ tmp5642 ], 0

  lea  rcx , [ currentSymbols ]
  lea  rdx , [ __literal233 ]
  lea  r8 , [ tmp5651 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5651  + Variant_t.type], 0
  jz l5673

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ proto ]
  lea  rdx , [ __literal650 ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5675 ]
  lea  rdx , [ tmp5676 ]
  lea  r8 , [ tmp5674 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp5674  + Variant_t.type], 0
  setnz al
  mov dword [ tmp5642 ], eax

l5673:

  cmp dword [ tmp5642 ], 0
  jz l5677

  mov dword [ isInsideVcall ], 1

  lea  rcx , [ proto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp5675 ]
  push rdi
  lea  rdi , [ tmp5676 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5676 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5676 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  lea rcx, [__fmt175 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ proto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: for keys paramIdx values paramName
; 
  jmp l5680

l5679:

  lea  rcx , [ currentSymbols ]
  lea  rdx , [ paramName ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5644 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5151 ], 0

  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5682 + Variant_t.value], rax

  lea rcx, [ tmp5675 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5681

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5151 ], 0

  mov [ tmp5675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5675 + Variant_t.value], rax

  lea  rcx , [ tmp5682 ]
  lea  rdx , [ tmp5675 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5644 ], eax

l5681:

  cmp dword [ tmp5644 ], 0
  jz l5683

  lea rcx, [__fmt176 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5684

l5683:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ symbolType ]
  call  __MOLD_VariantLoadFromKey

  cmp [ symbolType  + Variant_t.type], 0
  jz l5685

  lea  rcx , [ MIR_TYPE_SIZE_MAP ]
  lea  rdx , [ symbolType ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5675 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5675 + Variant_t.value]
  mov dword [ symbolSize ], eax

  jmp l5686

l5685:

  mov dword [ symbolSize ], 16

l5686:

  mov dword [ tmp5151 ], 8

  mov eax, dword [ symbolSize ]
  cmp eax, dword [ tmp5151 ]
  jg l5687

  lea  rcx , [ MIR_TO_VARIANT_TYPE_MAP ]
  lea  rdx , [ symbolType ]
  lea  r8 , [ expectedType ]
  call  __MOLD_VariantLoadFromKey

; 
; -----------------------------
; BEGIN: switch paramIdx
; 
  mov eax, dword [ paramIdx ]
  sub eax, 0
  cmp eax, 2
  ja l5690
  movsx rax, word [ __jmptable5691 + rax * 2]
  lea rax, [ l5690 + rax]
  jmp rax

l5692:

  lea rcx, [__fmt177 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5689

l5693:

  lea rcx, [__fmt178 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5689

l5694:

  lea rcx, [__fmt179 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5689

l5690:

  mov eax, dword [ paramsCnt ]
  sub eax, dword [ paramIdx ]
  mov dword [ tmp5151 ], eax

  mov dword [ tmp5562 ], 8

  mov eax, dword [ tmp5151 ]
  imul eax, dword [ tmp5562 ]
  mov dword [ paramOffset ], eax

  lea rcx, [__fmt180 ]
  call __MOLD_PrintFormatFromMemory

l5689:

; 
; END: switch paramIdx
; -----------------------------
; 
l5687:

l5688:

l5684:

  ret

l5680:

  lea  rcx , [ tmp5676 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramName ]
  lea  r9 , [ l5679 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys paramIdx values paramName
; -----------------------------
; 
  cmp [ currentProcRv  + Variant_t.type], 0
  jz l5695

  lea  rcx , [ MIR_TYPE_SIZE_MAP ]
  lea  rdx , [ currentProcRvType ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5676 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5676 + Variant_t.value]
  mov dword [ rvSize ], eax

  lea  rcx , [ MIR_TO_VARIANT_TYPE_MAP ]
  lea  rdx , [ currentProcRvType ]
  lea  r8 , [ rvVariantType ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 8

  mov eax, dword [ rvSize ]
  cmp eax, dword [ tmp5562 ]
  jg l5697

  lea rcx, [__fmt181 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp5562 ], 4

  mov eax, dword [ rvSize ]
  cmp eax, dword [ tmp5562 ]
  jnz l5700

  lea rcx, [__fmt182 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5701

l5700:

  lea rcx, [__fmt183 ]
  call __MOLD_PrintFormatFromMemory

l5701:

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

l5697:

l5698:

l5695:

l5696:

l5677:

l5678:

  lea rcx, [__fmt184 ]
  call __MOLD_PrintFormatFromMemory

  ; __mold_syscall( 50 )
  lea rcx , [ arrayOfProcedures ]
  lea rdx , [ currentProcName ]
  call qword [rbx + 8 * 50 ]

  lea  rcx , [ this ]
  lea  rdx , [ __literal680 ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5644 ], 1

  mov eax, dword [ tmp5644 ]
  mov [ tmp5675 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5675 + Variant_t.value], rax

  lea rcx, [ tmp5676 ]
  lea rdx, [ tmp5675 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5702

  lea rcx, [__fmt185 ]
  call __MOLD_PrintFormatFromMemory

l5702:

l5703:

  jmp l5670

l5669:

  lea rcx, [ opcode ]
  lea rdx, [ __literal594 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5704

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l5707

l5706:

  mov dword [ tmp5644 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 1

  mov [ tmp5676 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5676 + Variant_t.value], rax

  lea rcx, [ tmp5675 ]
  lea rdx, [ tmp5676 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5708

  mov dword [ tmp5646 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 3

  mov [ tmp5675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5675 + Variant_t.value], rax

  lea rcx, [ tmp5676 ]
  lea rdx, [ tmp5675 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5709

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 4

  mov [ tmp5676 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5676 + Variant_t.value], rax

  lea  rcx , [ tmp5675 ]
  lea  rdx , [ tmp5676 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5646 ], eax

l5709:

  mov eax, dword [ tmp5646 ]
  mov dword [ tmp5644 ], eax

l5708:

  cmp dword [ tmp5644 ], 0
  jz l5710

  mov dword [ tmp5646 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 0

  mov [ tmp5675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5675 + Variant_t.value], rax

  lea rcx, [ tmp5675 ]
  lea rdx, [ tmp5676 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l5712

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 0

  mov [ tmp5676 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5676 + Variant_t.value], rax

  lea  rcx , [ tmp5676 ]
  lea  rdx , [ tmp5675 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5646 ], eax

l5712:

  cmp dword [ tmp5646 ], 0
  jz l5713

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt186 ]
  call __MOLD_PrintFormatFromMemory

l5713:

l5714:

l5710:

l5711:

  ret

l5707:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5706 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  jmp l5705

l5704:

  lea rcx, [ opcode ]
  lea rdx, [ __literal593 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5715

  lea  rcx, [ currentFrame ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentFrame ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove

  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ symbols ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ params ]
  push rdi
  lea  rdi , [ tmp5676 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5676 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5676 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ symbols ]
  call  __MOLD_VariantStoreAtKey

  lea rcx, [__fmt187 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ currentFrameSize ], 0

  mov eax, dword [ paramsCnt ]
  mov dword [ paramsPassedCnt ], eax

  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp5676 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5676  + Variant_t.type], 0
  jz l5717

  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt188 ]
  call __MOLD_PrintFormatFromMemory

l5717:

l5718:

; 
; -----------------------------
; BEGIN: for keys undefined values symbol
; 
  jmp l5720

l5719:

  mov dword [ tmp5646 ], 1

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 0

  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5682 + Variant_t.value], rax

  lea rcx, [ tmp5682 ]
  lea rdx, [ tmp5675 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l5721

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 0

  mov [ tmp5675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5675 + Variant_t.value], rax

  lea  rcx , [ tmp5675 ]
  lea  rdx , [ tmp5682 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5646 ], eax

l5721:

  cmp dword [ tmp5646 ], 0
  jz l5722

  mov dword [ tmp5699 ], 1

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 1

  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5682 + Variant_t.value], rax

  lea rcx, [ tmp5675 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5724

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 3

  mov [ tmp5675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5675 + Variant_t.value], rax

  lea  rcx , [ tmp5682 ]
  lea  rdx , [ tmp5675 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5699 ], eax

l5724:

  cmp dword [ tmp5699 ], 0
  jz l5726

  mov dword [ tmp5725 ], 1

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5675 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5675  + Variant_t.type], 0
  jz l5728

  mov dword [ tmp5729 ], 1

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5682 ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5730

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5682 ]
  lea  rdx , [ __literal160 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5729 ], eax

l5730:

  mov eax, dword [ tmp5729 ]
  mov dword [ tmp5725 ], eax

l5728:

  cmp dword [ tmp5725 ], 0
  jz l5732

  mov dword [ tmp5562 ], 16

  mov eax, dword [ currentFrameSize ]
  add eax, dword [ tmp5562 ]
  mov dword [ currentFrameSize ], eax

  mov dword [ tmp5151 ], 8

  mov eax, dword [ tmp5151 ]
  add eax, dword [ currentFrameSize ]
  mov dword [ tmp5562 ], eax

  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5682 + Variant_t.value], rax

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5151 ], 8

  mov eax, dword [ tmp5151 ]
  add eax, dword [ currentFrameSize ]
  mov dword [ tmp5562 ], eax

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5735 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5736 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5737 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt189 ]
  call __MOLD_PrintFormatFromMemory

l5732:

l5733:

l5726:

l5727:

l5722:

l5723:

  ret

l5720:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbol ]
  lea  r9 , [ l5719 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values symbol
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys undefined values symbol
; 
  jmp l5740

l5739:

  mov dword [ tmp5646 ], 1

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 0

  mov [ tmp5737 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5737 + Variant_t.value], rax

  lea rcx, [ tmp5737 ]
  lea rdx, [ tmp5738 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l5741

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5737 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 0

  mov [ tmp5738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5738 + Variant_t.value], rax

  lea  rcx , [ tmp5738 ]
  lea  rdx , [ tmp5737 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5646 ], eax

l5741:

  cmp dword [ tmp5646 ], 0
  jz l5742

  mov dword [ tmp5699 ], 1

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 1

  mov [ tmp5737 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5737 + Variant_t.value], rax

  lea rcx, [ tmp5738 ]
  lea rdx, [ tmp5737 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5744

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5737 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 3

  mov [ tmp5738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5738 + Variant_t.value], rax

  lea  rcx , [ tmp5737 ]
  lea  rdx , [ tmp5738 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5699 ], eax

l5744:

  cmp dword [ tmp5699 ], 0
  jz l5745

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp5738 ]
  lea  rax , [ varSize ]
  call  __CodeGeneratorX64_getVariableSize$1

  mov dword [ tmp5562 ], 16

  mov eax, dword [ varSize ]
  cmp eax, dword [ tmp5562 ]
  jge l5747

  mov eax, dword [ currentFrameSize ]
  add eax, dword [ varSize ]
  mov dword [ currentFrameSize ], eax

  mov dword [ tmp5151 ], 8

  mov eax, dword [ tmp5151 ]
  add eax, dword [ currentFrameSize ]
  mov dword [ tmp5562 ], eax

  mov [ tmp5738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5738 + Variant_t.value], rax

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5151 ], 8

  mov eax, dword [ tmp5151 ]
  add eax, dword [ currentFrameSize ]
  mov dword [ tmp5562 ], eax

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5737 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5736 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5735 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbol ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt190 ]
  call __MOLD_PrintFormatFromMemory

l5747:

l5748:

l5745:

l5746:

l5742:

l5743:

  ret

l5740:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbol ]
  lea  r9 , [ l5739 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values symbol
; -----------------------------
; 
  lea  rcx , [ symbols ]
  lea  rdx , [ __literal233 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5682  + Variant_t.type], 0
  jz l5749

  mov dword [ tmp5562 ], 1

  mov eax, dword [ paramsPassedCnt ]
  add eax, dword [ tmp5562 ]
  mov dword [ paramsPassedCnt ], eax

l5749:

l5750:

  mov dword [ tmp5562 ], 0

  mov eax, dword [ currentFrameSize ]
  cmp eax, dword [ tmp5562 ]
  jle l5751

  mov dword [ tmp5753 ], 32

  mov eax, dword [ currentFrameSize ]
  add eax, dword [ tmp5753 ]
  mov dword [ tmp5563 ], eax

  mov dword [ tmp5753 ], 16

  mov  eax, dword [ tmp5563 ]
  mov  ecx, dword [ tmp5753 ]
  cdq
  idiv ecx
  mov  dword [ tmp5151 ], eax

  mov dword [ tmp5753 ], 1

  mov eax, dword [ tmp5151 ]
  add eax, dword [ tmp5753 ]
  mov dword [ tmp5562 ], eax

  mov dword [ tmp5753 ], 16

  mov eax, dword [ tmp5562 ]
  imul eax, dword [ tmp5753 ]
  mov dword [ currentFrameSize ], eax

  jmp l5752

l5751:

  mov dword [ currentFrameSize ], 32

l5752:

  lea rcx, [__fmt191 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal140 ]
  lea  r8 , [ tmp5735 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5735  + Variant_t.type], 0
  jz l5754

  lea rcx, [__fmt192 ]
  call __MOLD_PrintFormatFromMemory

l5754:

l5755:

  lea rcx, [__fmt193 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ paramIdx ], 0

  mov dword [ isRaxZero ], 0

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l5757

l5756:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5736 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 1

  mov [ tmp5737 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5737 + Variant_t.value], rax

  lea rcx, [ tmp5736 ]
  lea rdx, [ tmp5737 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5758

  mov dword [ tmp5699 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5737 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5737  + Variant_t.type], 0
  jz l5760

  mov dword [ tmp5725 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5736 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5736 ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5761

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5736 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5736 ]
  lea  rdx , [ __literal160 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5725 ], eax

l5761:

  mov eax, dword [ tmp5725 ]
  mov dword [ tmp5699 ], eax

l5760:

  cmp dword [ tmp5699 ], 0
  jz l5762

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal248 ]
  lea  r8 , [ tmp5736 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5736  + Variant_t.type], 0
  jz l5764

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal1083 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt194 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5765

l5764:

  mov dword [ tmp5731 ], 0

  mov eax, dword [ isRaxZero ]
  cmp eax, dword [ tmp5731 ]
  jnz l5766

  lea rcx, [__fmt195 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ isRaxZero ], 1

l5766:

l5767:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt196 ]
  call __MOLD_PrintFormatFromMemory

l5765:

l5762:

l5763:

  jmp l5759

l5758:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 3

  mov [ tmp5768 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5768 + Variant_t.value], rax

  lea rcx, [ tmp5738 ]
  lea rdx, [ tmp5768 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5769

  mov dword [ tmp5725 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5768 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 0

  mov [ tmp5738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5738 + Variant_t.value], rax

  lea rcx, [ tmp5738 ]
  lea rdx, [ tmp5768 ]
  call __MOLD_VariantCompareLT
  test al, al
  jnz l5771

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 0

  mov [ tmp5768 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5768 + Variant_t.value], rax

  lea  rcx , [ tmp5768 ]
  lea  rdx , [ tmp5738 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5725 ], eax

l5771:

  cmp dword [ tmp5725 ], 0
  jz l5772

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5768 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ this ]
  lea rdx , [ tmp5768 ]
  lea  rax , [ varSize ]
  call  __CodeGeneratorX64_getVariableSize$1

  mov dword [ tmp5753 ], 4

  mov eax, dword [ paramIdx ]
  cmp eax, dword [ tmp5753 ]
  jge l5774

  mov dword [ tmp5753 ], 4

  mov eax, dword [ varSize ]
  cmp eax, dword [ tmp5753 ]
  jnz l5776

  lea  rcx , [ REG_PARAMS32 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ srcPtr ]
  call  __MOLD_VariantLoadFromIndex_int32

  jmp l5777

l5776:

  lea  rcx , [ REG_PARAMS64 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ srcPtr ]
  call  __MOLD_VariantLoadFromIndex_int32

l5777:

  jmp l5775

l5774:

  mov dword [ isRaxZero ], 0

  mov dword [ tmp5753 ], 4

  mov eax, dword [ varSize ]
  cmp eax, dword [ tmp5753 ]
  jnz l5778

  mov eax, dword [ paramsPassedCnt ]
  sub eax, dword [ paramIdx ]
  mov dword [ tmp5562 ], eax

  mov dword [ tmp5151 ], 1

  mov eax, dword [ tmp5562 ]
  sub eax, dword [ tmp5151 ]
  mov dword [ tmp5753 ], eax

  lea rcx, [__fmt197 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx, [ srcPtr ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcPtr ]
  lea rdx, [ __literal887 ]
  call __MOLD_VariantMove

  jmp l5779

l5778:

  mov eax, dword [ paramsPassedCnt ]
  sub eax, dword [ paramIdx ]
  mov dword [ tmp5151 ], eax

  mov dword [ tmp5562 ], 1

  mov eax, dword [ tmp5151 ]
  sub eax, dword [ tmp5562 ]
  mov dword [ tmp5753 ], eax

  lea rcx, [__fmt198 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx, [ srcPtr ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcPtr ]
  lea rdx, [ __literal981 ]
  call __MOLD_VariantMove

l5779:

l5775:

  mov dword [ tmp5753 ], 4

  mov eax, dword [ varSize ]
  cmp eax, dword [ tmp5753 ]
  jnz l5780

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5768 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt199 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5781

l5780:

  mov dword [ tmp5753 ], 8

  mov eax, dword [ varSize ]
  cmp eax, dword [ tmp5753 ]
  jnz l5782

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5768 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt200 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5783

l5782:

  mov dword [ tmp5753 ], 16

  mov eax, dword [ varSize ]
  cmp eax, dword [ tmp5753 ]
  jnz l5785

  lea rcx, [__fmt201 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5768 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt202 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp5768 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5768  + Variant_t.type], 0
  jz l5789

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt203 ]
  call __MOLD_PrintFormatFromMemory

l5789:

l5790:

  jmp l5786

l5785:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp5173 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1090 ]
  lea  rdx , [ tmp5738 ]
  lea  r8 , [ tmp5173 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp5172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5173 ]
  lea  rdx , [ __literal1091 ]
  lea  r8 , [ tmp5172 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5172 ]
  lea  rdx , [ tmp5738 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp5171 ]
  call qword [rbx + 8 * 41 ]

l5786:

l5783:

l5781:

  jmp l5773

l5772:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt204 ]
  call __MOLD_PrintFormatFromMemory

l5773:

  mov dword [ tmp5753 ], 1

  mov eax, dword [ paramIdx ]
  add eax, dword [ tmp5753 ]
  mov dword [ paramIdx ], eax

l5769:

l5770:

l5759:

  ret

l5757:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5756 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea rcx, [ currentProcName ]
  lea rdx, [ __literal563 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5791

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l5794

l5793:

  mov dword [ tmp5699 ], 0

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5738 ]
  lea rdx, [ __literal238 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5795

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5738 ]
  lea  rdx , [ __literal239 ]
  call  __MOLD_VariantCompareNE
  mov [ tmp5699 ], eax

l5795:

  cmp dword [ tmp5699 ], 0
  jz l5796

  mov dword [ tmp5725 ], 0

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 2

  mov [ tmp5799 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5799 + Variant_t.value], rax

  lea rcx, [ tmp5738 ]
  lea rdx, [ tmp5799 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5798

  mov dword [ tmp5729 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5799 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5799  + Variant_t.type], 0
  jz l5800

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5738 ]
  lea  rdx , [ __literal130 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5729 ], eax

l5800:

  mov eax, dword [ tmp5729 ]
  mov dword [ tmp5725 ], eax

l5798:

  cmp dword [ tmp5725 ], 0
  jz l5801

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt205 ]
  call __MOLD_PrintFormatFromMemory

l5801:

l5802:

l5796:

l5797:

  ret

l5794:

  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5793 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
l5791:

l5792:

  lea rcx, [__fmt206 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5716

l5715:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal603 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5803

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  cmp [ x  + Variant_t.type], 0
  jz l5805

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1096
  lea rdx , [ __literal1096 ]
  lea r8 , [ dst ]
  lea r9 , [ x ]
  call  __CodeGeneratorX64_call2$3

  jmp l5806

l5805:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1097
  lea rdx , [ __literal1097 ]
  lea r8 , [ dst ]
  call  __CodeGeneratorX64_call1$2

l5806:

  jmp l5804

l5803:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal604 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5807

  lea rcx , [ this ]
  lea rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$1

  cmp [ x  + Variant_t.type], 0
  jz l5809

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1098
  lea rdx , [ __literal1098 ]
  lea r8 , [ dst ]
  lea r9 , [ x ]
  lea rax, [ y ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5810

l5809:

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1099
  lea rdx , [ __literal1099 ]
  lea r8 , [ dst ]
  call  __CodeGeneratorX64_call1$2

l5810:

  jmp l5808

l5807:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1100 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5811

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1101
  lea rdx , [ __literal1101 ]
  lea r8 , [ dst ]
  lea r9 , [ x ]
  lea rax, [ y ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5812

l5811:

  mov dword [ tmp5729 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal1102 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5813

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1103 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5729 ], eax

l5813:

  cmp dword [ tmp5729 ], 0
  jz l5814

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1104
  lea rdx , [ __literal1104 ]
  lea r8 , [ dst ]
  lea r9 , [ x ]
  lea rax, [ y ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5815

l5814:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1105 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5816

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1106
  lea rdx , [ __literal1106 ]
  lea r8 , [ dst ]
  lea r9 , [ x ]
  lea rax, [ y ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5817

l5816:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1107 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5818

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1108
  lea rdx , [ __literal1108 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5819

l5818:

  mov dword [ tmp5788 ], 1

  lea rcx, [ opcode ]
  lea rdx, [ __literal1109 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5820

  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1110 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5788 ], eax

l5820:

  cmp dword [ tmp5788 ], 0
  jz l5822

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1111
  lea rdx , [ __literal1111 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5823

l5822:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1112 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5824

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1113
  lea rdx , [ __literal1113 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5825

l5824:

  lea rcx, [ opcode ]
  lea rdx, [ __literal1114 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5827

  lea rcx , [ this ]
; WARNING: Failed to get variable size: __literal1115
  lea rdx , [ __literal1115 ]
  lea r8 , [ x ]
  lea r9 , [ y ]
  lea rax, [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$4
  add rsp, 8

  jmp l5828

l5827:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal589 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5830

  lea rcx, [__fmt120 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5831

l5830:

  ; __mold_syscall( 42 )
  lea rcx , [ opcode ]
  push rdi
  lea  rdi , [ tmp5738 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp5172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1116 ]
  lea  rdx , [ tmp5738 ]
  lea  r8 , [ tmp5172 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5172 ]
  lea  rdx , [ __literal466 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp5171 ]
  call qword [rbx + 8 * 41 ]

l5831:

l5828:

l5825:

l5823:

l5819:

l5817:

l5815:

l5812:

l5808:

l5804:

l5716:

l5705:

l5670:

l5637:

l5634:

l5631:

l5628:

l5625:

l5622:

l5620:

l5618:

l5616:

l5604:

l5599:

l5594:

l5589:

l5584:

l5579:

l5576:

l5573:

l5571:

l5565:

l5550:

l5545:

l5542:

l5539:

l5537:

l5535:

l5520:

l5517:

l5514:

l5511:

l5508:

l5505:

l5502:

l5499:

l5496:

l5493:

l5490:

l5487:

l5484:

l5479:

l5474:

l5471:

l5468:

l5465:

l5462:

l5459:

l5456:

l5453:

l5450:

l5447:

l5444:

l5441:

l5438:

l5436:

l5429:

l5426:

l5423:

l5420:

l5417:

l5414:

l5411:

l5408:

l5405:

l5402:

l5400:

l5396:

l5389:

l5384:

l5379:

l5376:

l5373:

l5370:

l5367:

l5364:

l5361:

l5358:

l5356:

l5352:

l5347:

l5344:

l5341:

l5338:

l5336:

l5331:

l5326:

l5321:

l5318:

l5315:

l5312:

l5309:

l5306:

l5303:

l5300:

l5297:

l5294:

l5291:

l5288:

l5285:

l5282:

l5279:

l5276:

l5273:

l5270:

l5267:

l5264:

l5261:

l5258:

l5255:

l5252:

l5249:

l5246:

l5243:

l5240:

l5237:

l5234:

l5231:

l5228:

l5225:

l5222:

l5219:

l5216:

l5213:

l5210:

l5207:

l5204:

l5201:

l5198:

l5195:

l5193:

l5189:

l5186:

l5183:

l5179:

l5177:

l5175:

  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal588 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5832

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

l5832:

l5833:

  ret

l5150:

  lea  rcx , [ quads ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l5149 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea rcx, [__fmt207 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ tmp5738 ]
  lea  rax , [ globals ]
  mov  r10d, 31
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6821
  movsxd rax, dword [ globals + Variant_t.value ]
  mov    qword [ globals + Variant_t.value ], rax
l6821:


; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l5835

l5834:

  mov dword [ tmp5152 ], 0

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 2

  mov [ tmp5837 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5837 + Variant_t.value], rax

  lea rcx, [ tmp5738 ]
  lea rdx, [ tmp5837 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5836

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 0

  mov [ tmp5738 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5738 + Variant_t.value], rax

  lea  rcx , [ tmp5738 ]
  lea  rdx , [ tmp5837 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5152 ], eax

l5836:

  cmp dword [ tmp5152 ], 0
  jz l5838

  mov dword [ tmp5154 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5738 ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5840

  mov dword [ tmp5158 ], 1

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5738 ]
  lea rdx, [ __literal160 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5841

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5738 ]
  call  __MOLD_VariantLoadFromKey

  xor eax, eax
  cmp [ tmp5738  + Variant_t.type], 0
  setz al
  mov dword [ tmp5158 ], eax

l5841:

  mov eax, dword [ tmp5158 ]
  mov dword [ tmp5154 ], eax

l5840:

  cmp dword [ tmp5154 ], 0
  jz l5842

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt208 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5843

l5842:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5837 ]
  lea rdx, [ __literal157 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5844

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt209 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5845

l5844:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5837 ]
  lea rdx, [ __literal154 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5846

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt210 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5847

l5846:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5837 ]
  lea rdx, [ __literal158 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5848

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt209 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5849

l5848:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5837 ]
  lea rdx, [ __literal159 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5850

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt210 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5851

l5850:

  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5852 ]
  push rdi
  lea  rdi , [ tmp5837 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1126 ]
  lea  rdx , [ tmp5837 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp5171 ]
  call qword [rbx + 8 * 41 ]

l5851:

l5849:

l5847:

l5845:

l5843:

l5838:

l5839:

  ret

l5835:

  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5834 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea rcx, [__fmt211 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys formatId values encodedFormat
; 
  jmp l5854

l5853:

  mov [ tmp5837 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ formatId ]
  mov [ tmp5837 + Variant_t.value], rax

  lea rcx, [__fmt212 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values symbolInfo
; 
  jmp l5856

l5855:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp5837 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5837  + Variant_t.type], 0
  jz l5857

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ type ]
  call  __MOLD_VariantLoadFromKey

  jmp l5858

l5857:

  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea rcx, [ type ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove

l5858:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5852 ]
  lea rdx, [ __literal778 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5859

  lea rcx, [__fmt213 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5860

l5859:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5852 ]
  lea rdx, [ __literal648 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5861

  lea rcx, [__fmt214 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5862

l5861:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 5

  mov [ tmp5863 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5863 + Variant_t.value], rax

  lea rcx, [ tmp5852 ]
  lea rdx, [ tmp5863 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5864

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp5863 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5863 ]
  push rdi
  lea  rdi , [ msgContent ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  ; __mold_syscall( 43 )
  lea rcx , [ msgContent ]
  push rdi
  lea  rdi , [ tmp5863 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  cmp [ tmp5863 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5863 + Variant_t.value]
  mov dword [ msgLength ], eax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 1

  mov [ tmp5866 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5866 + Variant_t.value], rax

  lea  rcx , [ tmp5852 ]
  lea  rdx , [ tmp5866 ]
  lea  r8 , [ tmp5863 ]
  call  __MOLD_VariantSub

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5863 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp5753 ], 0

  mov eax, dword [ msgLength ]
  cmp eax, dword [ tmp5753 ]
  jle l5867

  lea rcx , [ this ]
  lea rdx , [ msgContent ]
  lea  rax , [ tmp5171 ]
  call  __CodeGeneratorX64_escapeString$1

  lea rcx, [__fmt215 ]
  call __MOLD_PrintFormatFromMemory

l5867:

l5868:

  jmp l5865

l5864:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5863 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5863  + Variant_t.type], 0
  jz l5869

  lea rcx, [__fmt216 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5866 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt217 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5870

l5869:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5866 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 4

  mov [ tmp5852 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5852 + Variant_t.value], rax

  lea rcx, [ tmp5866 ]
  lea rdx, [ tmp5852 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5871

  lea rcx, [__fmt218 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5872

l5871:

  mov dword [ tmp5164 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 2

  mov [ tmp5866 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5866 + Variant_t.value], rax

  lea rcx, [ tmp5852 ]
  lea rdx, [ tmp5866 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5873

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5866 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 5

  mov [ tmp5852 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5753 ]
  mov [ tmp5852 + Variant_t.value], rax

  lea  rcx , [ tmp5866 ]
  lea  rdx , [ tmp5852 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5164 ], eax

l5873:

  cmp dword [ tmp5164 ], 0
  jz l5874

  lea rcx, [__fmt219 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt220 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5875

l5874:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1140 ]
  lea  rdx , [ tmp5852 ]
  lea  r8 , [ tmp5171 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp5171 ]
  call qword [rbx + 8 * 41 ]

l5875:

l5872:

l5870:

l5865:

l5862:

l5860:

  ret

l5856:

  lea  rcx , [ encodedFormat ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l5855 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 
  lea rcx, [__fmt221 ]
  call __MOLD_PrintFormatFromMemory

  ret

l5854:

  lea  rcx , [ arrayOfMessageFormats ]
  lea  rdx , [ formatId ]
  lea  r8 , [ encodedFormat ]
  lea  r9 , [ l5853 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys formatId values encodedFormat
; -----------------------------
; 
  lea rcx, [__fmt222 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp5753 ], 1

  mov dword [ tmp5562 ], 16

  mov dword [ deepIdx ], 0

; 
; -----------------------------
; BEGIN: for deepIdx in tmp5151 .. tmp5562
; 
l5876:

  mov eax, dword [ deepIdx ]
  cmp eax, dword [ tmp5562 ]
  jge l5877

  lea rcx, [__fmt223 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values symbolInfo
; 
  jmp l5879

l5878:

  mov dword [ tmp5152 ], 0

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5563 ], 5

  mov [ tmp5866 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5563 ]
  mov [ tmp5866 + Variant_t.value], rax

  lea rcx, [ tmp5852 ]
  lea rdx, [ tmp5866 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5880

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5866 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5563 ], 0

  mov [ tmp5852 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5563 ]
  mov [ tmp5852 + Variant_t.value], rax

  lea  rcx , [ tmp5852 ]
  lea  rdx , [ tmp5866 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp5152 ], eax

l5880:

  cmp dword [ tmp5152 ], 0
  jz l5881

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey

  mov [ tmp5852 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp5852 + Variant_t.value], rax

  mov dword [ tmp5563 ], 0

  lea rcx , [ this ]
  lea rdx , [ name ]
  lea r8 , [ value ]
  lea r9 , [ tmp5852 ]
  mov  eax, dword [ tmp5563 ]
  push rax
  call  __CodeGeneratorX64_emitConstant$4
  add rsp, 8

l5881:

l5882:

  ret

l5879:

  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l5878 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 
  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp5753 ]
  mov dword [ deepIdx ], eax

  jmp l5876

l5877:

; 
; END: for deepIdx in tmp5151 .. tmp5562 step tmp5753
; -----------------------------
; 
  lea rcx, [__fmt224 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values symbolInfo
; 
  jmp l5884

l5883:

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5151 ], 10

  mov [ tmp5866 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5151 ]
  mov [ tmp5866 + Variant_t.value], rax

  lea rcx, [ tmp5852 ]
  lea rdx, [ tmp5866 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5885

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ labels ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal645 ]
  lea  r8 , [ defaultLabel ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt225 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp5151 ], 1

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp5852 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5562 ], 1

  mov [ tmp5887 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5562 ]
  mov [ tmp5887 + Variant_t.value], rax

  lea  rcx , [ tmp5852 ]
  lea  rdx , [ tmp5887 ]
  lea  r8 , [ tmp5866 ]
  call  __MOLD_VariantAdd

  cmp [ tmp5866 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5866 + Variant_t.value]
  mov dword [ tmp5562 ], eax

  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp5866 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5866 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5866 + Variant_t.value]
  mov dword [ labelIdx ], eax

; 
; -----------------------------
; BEGIN: for labelIdx in tmp5753 .. tmp5562
; 
l5888:

  mov eax, dword [ labelIdx ]
  cmp eax, dword [ tmp5562 ]
  jge l5889

  lea  rcx , [ labels ]
  lea  rdx , [ labelIdx ]
  lea  r8 , [ nextLabel ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ nextLabel + Variant_t.type ], 0
  jnz l5890

  lea rcx, [__fmt226 ]
  call __MOLD_PrintFormatFromMemory

  jmp l5891

l5890:

  lea rcx, [__fmt227 ]
  call __MOLD_PrintFormatFromMemory

l5891:

  mov eax, dword [ labelIdx ]
  add eax, dword [ tmp5151 ]
  mov dword [ labelIdx ], eax

  jmp l5888

l5889:

; 
; END: for labelIdx in tmp5753 .. tmp5562 step tmp5151
; -----------------------------
; 
  lea rcx, [__fmt228 ]
  call __MOLD_PrintFormatFromMemory

l5885:

l5886:

  ret

l5884:

  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l5883 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 
  lea rcx, [__fmt229 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal390 ]
  lea  r8 , [ classListCnt ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal392 ]
  lea  r8 , [ methodsList ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5753 ], 1

  cmp [ classListCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ classListCnt + Variant_t.value]
  mov dword [ tmp5562 ], eax

  mov dword [ classIdx ], 0

; 
; -----------------------------
; BEGIN: for classIdx in tmp5151 .. tmp5562
; 
l5892:

  mov eax, dword [ classIdx ]
  cmp eax, dword [ tmp5562 ]
  jge l5893

  lea  rcx , [ classList ]
  lea  rdx , [ classIdx ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [__fmt230 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ firstUsedMethodIdx ], 0

  mov dword [ lastUsedMethodIdx ], 0

  mov dword [ firstMethodFound ], 0

; 
; -----------------------------
; BEGIN: for keys methodIdx values methodName
; 
  jmp l5895

l5894:

  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp5866 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5866  + Variant_t.type], 0
  jz l5896

  mov eax, dword [ methodIdx ]
  mov dword [ lastUsedMethodIdx ], eax

  mov dword [ tmp5158 ], 0

  mov eax, dword [ firstMethodFound ]
  cmp eax, dword [ tmp5158 ]
  jnz l5898

  mov eax, dword [ methodIdx ]
  mov dword [ firstUsedMethodIdx ], eax

  mov dword [ firstMethodFound ], 1

l5898:

l5899:

l5896:

l5897:

  ret

l5895:

  lea  rcx , [ methodsList ]
  lea  rdx , [ methodIdx ]
  lea  r8 , [ methodName ]
  lea  r9 , [ l5894 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys methodIdx values methodName
; -----------------------------
; 
  lea rcx, [__fmt231 ]
  call __MOLD_PrintFormatFromMemory

  mov eax, dword [ lastUsedMethodIdx ]
  sub eax, dword [ firstUsedMethodIdx ]
  mov dword [ tmp5563 ], eax

  lea rcx, [__fmt232 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp5154 ], 1

  mov eax, dword [ firstMethodFound ]
  cmp eax, dword [ tmp5154 ]
  jnz l5900

  lea rcx, [__fmt233 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp5563 ], 1

  mov dword [ tmp5903 ], 1

  mov eax, dword [ lastUsedMethodIdx ]
  add eax, dword [ tmp5903 ]
  mov dword [ tmp5902 ], eax

  mov eax, dword [ firstUsedMethodIdx ]
  mov dword [ methodIdx ], eax

; 
; -----------------------------
; BEGIN: for methodIdx in firstUsedMethodIdx .. tmp5902
; 
l5904:

  mov eax, dword [ methodIdx ]
  cmp eax, dword [ tmp5902 ]
  jge l5905

  lea  rcx , [ methodsList ]
  lea  rdx , [ methodIdx ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ methodProto + Variant_t.type ], 0
  jnz l5906

  lea  rcx, [ methodPtr ]
  call __MOLD_VariantDestroy
  lea rcx, [ methodPtr ]
  lea rdx, [ __literal1156 ]
  call __MOLD_VariantMove

  jmp l5907

l5906:

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp5887 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ methodPtr ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5887 ]
  lea  rdx , [ __literal1157 ]
  lea  r8 , [ methodPtr ]
  call  __MOLD_VariantStringJoin

l5907:

  lea rcx, [__fmt234 ]
  call __MOLD_PrintFormatFromMemory

  mov eax, dword [ methodIdx ]
  add eax, dword [ tmp5563 ]
  mov dword [ methodIdx ], eax

  jmp l5904

l5905:

; 
; END: for methodIdx in firstUsedMethodIdx .. tmp5902 step tmp5563
; -----------------------------
; 
l5900:

l5901:

  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov eax, dword [ classIdx ]
  add eax, dword [ tmp5753 ]
  mov dword [ classIdx ], eax

  jmp l5892

l5893:

; 
; END: for classIdx in tmp5151 .. tmp5562 step tmp5753
; -----------------------------
; 
  lea rcx, [__fmt235 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values procName
; 
  jmp l5909

l5908:

  lea rcx, [__fmt236 ]
  call __MOLD_PrintFormatFromMemory

  ret

l5909:

  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5908 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values procName
; -----------------------------
; 
  lea rcx, [__fmt237 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values procName
; 
  jmp l5911

l5910:

  lea rcx, [__fmt238 ]
  call __MOLD_PrintFormatFromMemory

  ret

l5911:

  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5910 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values procName
; -----------------------------
; 
  lea rcx, [__fmt239 ]
  call __MOLD_PrintFormatFromMemory

  lea  rcx , [ this ]
  lea  rdx , [ __literal680 ]
  lea  r8 , [ tmp5887 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5154 ], 1

  mov eax, dword [ tmp5154 ]
  mov [ tmp5852 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5852 + Variant_t.value], rax

  lea rcx, [ tmp5887 ]
  lea rdx, [ tmp5852 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5912

  lea rcx, [__fmt240 ]
  call __MOLD_PrintFormatFromMemory

; 
; -----------------------------
; BEGIN: for keys undefined values procName
; 
  jmp l5915

l5914:

  lea rcx, [__fmt241 ]
  call __MOLD_PrintFormatFromMemory

  ret

l5915:

  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5914 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values procName
; -----------------------------
; 
  lea rcx, [__fmt242 ]
  call __MOLD_PrintFormatFromMemory

l5912:

l5913:


  ; clean frame
  ; -----------
  lea  rcx, [ quads ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentProcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentProcRv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentProcRvType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ originalOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfProcedures ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfMessageFormats ]
  call __MOLD_VariantDestroy
  lea  rcx, [ fmtHashToIdMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ fakeSymbolInfoForEOL ]
  call __MOLD_VariantDestroy
  lea  rcx, [ fakeSymbolInfoForGlued ]
  call __MOLD_VariantDestroy
  lea  rcx, [ globals ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classListCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5146 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5171 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5172 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5173 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5390 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5391 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5651 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5674 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5675 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5676 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5735 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5736 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5737 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5738 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5768 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5799 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ dstType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ encodedFormat ]
  call __MOLD_VariantDestroy
  lea  rcx, [ encodedFormatHash ]
  call __MOLD_VariantDestroy
  lea  rcx, [ messageFormatId ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ signOkLabel ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramName
  lea  rcx, [ symbolType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ expectedType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvVariantType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentFrame ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbol
  lea  rcx, [ srcPtr ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5837 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5852 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5863 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5866 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ msgContent ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5887 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nextLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator methodName
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodPtr ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator procName

  add  rsp, 2032
  pop  rbp
  ret


  restore this
  restore codeObj
  restore quads
  restore currentProcName
  restore currentProcRv
  restore currentProcRvType
  restore currentSymbols
  restore currentFrameSize
  restore isInsideVcall
  restore dst
  restore x
  restore y
  restore opcode
  restore originalOpcode
  restore paramsCnt
  restore symbols
  restore arrayOfProcedures
  restore arrayOfMessageFormats
  restore fmtHashToIdMap
  restore fakeSymbolInfoForEOL
  restore fakeSymbolInfoForGlued
  restore globals
  restore classListCnt
  restore classList
  restore methodsList
  restore tmp5146
  restore tmp5151
  restore tmp5152
  restore tmp5154
  restore tmp5158
  restore tmp5160
  restore tmp5162
  restore tmp5164
  restore tmp5166
  restore tmp5171
  restore tmp5172
  restore tmp5173
  restore tmp5191
  restore tmp5196
  restore tmp5199
  restore tmp5202
  restore tmp5205
  restore tmp5208
  restore tmp5211
  restore tmp5214
  restore tmp5217
  restore tmp5220
  restore tmp5223
  restore tmp5226
  restore tmp5229
  restore tmp5232
  restore tmp5235
  restore tmp5238
  restore tmp5241
  restore tmp5244
  restore tmp5247
  restore tmp5250
  restore tmp5253
  restore tmp5256
  restore tmp5259
  restore tmp5262
  restore tmp5265
  restore tmp5268
  restore tmp5271
  restore tmp5274
  restore tmp5277
  restore tmp5280
  restore tmp5283
  restore tmp5286
  restore tmp5289
  restore tmp5292
  restore tmp5295
  restore tmp5298
  restore tmp5301
  restore tmp5304
  restore tmp5307
  restore tmp5310
  restore tmp5313
  restore tmp5316
  restore tmp5319
  restore tmp5322
  restore tmp5327
  restore tmp5332
  restore tmp5334
  restore tmp5339
  restore tmp5342
  restore tmp5345
  restore tmp5348
  restore tmp5350
  restore tmp5354
  restore tmp5359
  restore tmp5362
  restore tmp5365
  restore tmp5368
  restore tmp5371
  restore tmp5374
  restore tmp5377
  restore tmp5380
  restore tmp5385
  restore tmp5390
  restore tmp5391
  restore tmp5392
  restore tmp5394
  restore tmp5398
  restore tmp5403
  restore tmp5406
  restore tmp5409
  restore tmp5412
  restore tmp5415
  restore tmp5418
  restore tmp5421
  restore tmp5424
  restore tmp5427
  restore tmp5430
  restore tmp5431
  restore tmp5439
  restore tmp5442
  restore tmp5445
  restore tmp5448
  restore tmp5451
  restore tmp5454
  restore tmp5457
  restore tmp5460
  restore tmp5463
  restore tmp5466
  restore tmp5469
  restore tmp5472
  restore tmp5475
  restore tmp5480
  restore tmp5485
  restore tmp5488
  restore tmp5491
  restore tmp5494
  restore tmp5497
  restore tmp5500
  restore tmp5503
  restore tmp5506
  restore tmp5509
  restore tmp5512
  restore tmp5515
  restore tmp5518
  restore tmp5523
  restore tmp5526
  restore tmp5529
  restore tmp5540
  restore tmp5543
  restore tmp5546
  restore tmp5551
  restore tmp5553
  restore tmp5555
  restore tmp5562
  restore tmp5563
  restore tmp5574
  restore tmp5577
  restore tmp5580
  restore tmp5585
  restore tmp5590
  restore tmp5595
  restore tmp5600
  restore tmp5605
  restore tmp5608
  restore tmp5609
  restore tmp5612
  restore tmp5623
  restore tmp5626
  restore tmp5629
  restore tmp5632
  restore tmp5635
  restore tmp5640
  restore tmp5642
  restore tmp5644
  restore tmp5646
  restore tmp5651
  restore tmp5674
  restore tmp5675
  restore tmp5676
  restore tmp5682
  restore tmp5699
  restore tmp5725
  restore tmp5729
  restore tmp5731
  restore tmp5735
  restore tmp5736
  restore tmp5737
  restore tmp5738
  restore tmp5753
  restore tmp5768
  restore tmp5784
  restore tmp5788
  restore tmp5799
  restore tmp5821
  restore tmp5826
  restore tmp5829
  restore item
  restore itemCnt
  restore dstType
  restore xType
  restore idxType
  restore symbolInfo
  restore params
  restore encodedFormat
  restore encodedFormatHash
  restore messageFormatId
  restore oneParam
  restore rv
  restore sysCallId
  restore name
  restore methodId
  restore signOkLabel
  restore oneItem
  restore proto
  restore paramIdx
  restore paramName
  restore symbolType
  restore symbolSize
  restore expectedType
  restore paramOffset
  restore rvSize
  restore rvVariantType
  restore currentFrame
  restore paramsPassedCnt
  restore isRaxZero
  restore symbol
  restore varSize
  restore srcPtr
  restore tmp5837
  restore tmp5852
  restore tmp5863
  restore tmp5866
  restore formatId
  restore type
  restore msgContent
  restore msgLength
  restore deepIdx
  restore value
  restore tmp5887
  restore labels
  restore defaultLabel
  restore labelIdx
  restore nextLabel
  restore tmp5902
  restore tmp5903
  restore classIdx
  restore classProto
  restore className
  restore vtable
  restore firstUsedMethodIdx
  restore lastUsedMethodIdx
  restore firstMethodFound
  restore methodIdx
  restore methodName
  restore methodProto
  restore methodPtr
  restore procName

; -----------------------------------------------
; function __MIRQuadOptimizer_constructor$0
; -----------------------------------------------
__MIRQuadOptimizer_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 9 , readHits= 8 )
  tmp5917 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  tmp5920 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp5916 EQU rbp - 60 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp5917 + Variant_t.type], eax
  mov [tmp5920 + Variant_t.type], eax

  ; code
  ; ----

  lea rcx , [ this ]
  call  __PipeAbstract_constructor$0

  mov dword [ tmp5916 ], 1

  mov eax, dword [ tmp5916 ]
  mov [ tmp5917 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5917 + Variant_t.value], rax

  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp5917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ __literal117 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1180 ]
  lea  r8 , [ __literal137 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1181 ]
  lea  r8 , [ __literal137 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1182 ]
  lea  r8 , [ __literal137 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp5917 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5917 ]
  call  __MOLD_VariantMapCreate

  lea  rcx , [ this ]
  lea  rdx , [ __literal658 ]
  lea  r8 , [ tmp5917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp5917 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5917 ]
  lea  rdx , [ __const5918 ]
  lea  r8 , [ __const5919 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx , [ this ]
  lea  rdx , [ __literal1183 ]
  lea  r8 , [ tmp5917 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp5917 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5917 ]
  lea  rdx , [ __const5921 ]
  lea  r8 , [ __const5922 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx , [ this ]
  lea  rdx , [ __literal1191 ]
  lea  r8 , [ tmp5917 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp5917 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5920 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp5916
  restore tmp5917
  restore tmp5920

; -----------------------------------------------
; function __MIRQuadOptimizer__decreaseReadAndWriteHits$1
; -----------------------------------------------
__MIRQuadOptimizer__decreaseReadAndWriteHits$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  src EQU rbp - 40 ; 16 bytes, (kind= 3 , type= string , writeHits= 0 , readHits= 1 )
  srcInfo EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 6 )
  tmp5923 EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp5924 EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp5926 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp5925 EQU rbp - 108 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ src ], xmm0
  xor eax, eax
  mov [srcInfo + Variant_t.type], eax
  mov [tmp5923 + Variant_t.type], eax
  mov [tmp5924 + Variant_t.type], eax
  mov [tmp5926 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal658 ]
  lea  r8 , [ tmp5924 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5924 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp5923 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5923 ]
  lea  rdx , [ src ]
  lea  r8 , [ srcInfo ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5924 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5925 ], 1

  mov [ tmp5926 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5925 ]
  mov [ tmp5926 + Variant_t.value], rax

  lea  rcx , [ tmp5924 ]
  lea  rdx , [ tmp5926 ]
  lea  r8 , [ tmp5923 ]
  call  __MOLD_VariantSub

  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal169 ]
  lea  r8 , [ tmp5923 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5926 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5925 ], 1

  mov [ tmp5924 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5925 ]
  mov [ tmp5924 + Variant_t.value], rax

  lea  rcx , [ tmp5926 ]
  lea  rdx , [ tmp5924 ]
  lea  r8 , [ tmp5923 ]
  call  __MOLD_VariantSub

  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5923 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ srcInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5923 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5924 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5926 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret


  restore this
  restore src
  restore srcInfo
  restore tmp5923
  restore tmp5924
  restore tmp5925
  restore tmp5926

; -----------------------------------------------
; function __MIRQuadOptimizer_processOneItem$1
; -----------------------------------------------
__MIRQuadOptimizer_processOneItem$1_vcall:
__MIRQuadOptimizer_processOneItem$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 5 , readHits= 54 )
  item EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 18 )
  opcode EQU rbp - 56 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 7 )
  dst EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 6 )
  src EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp5927 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 9 , readHits= 9 )
  __cse44 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  oneItem EQU rbp - 136 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  tmp5952 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  tmp5955 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 7 , readHits= 7 )
  tmp5956 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 5 )
  buffer EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  lastItem EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 1 )
  tmp5961 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 4 , readHits= 4 )
  newOpcode EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  tmp5928 EQU rbp - 252 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 9 , readHits= 9 )
  tmp5929 EQU rbp - 256 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp5931 EQU rbp - 260 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp5936 EQU rbp - 264 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5939 EQU rbp - 268 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5941 EQU rbp - 272 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5947 EQU rbp - 276 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp5949 EQU rbp - 280 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp5951 EQU rbp - 284 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  xor eax, eax
  mov [opcode + Variant_t.type], eax
  mov [dst + Variant_t.type], eax
  mov [src + Variant_t.type], eax
  mov [tmp5927 + Variant_t.type], eax
  mov [__cse44 + Variant_t.type], eax
  ; Skipped loop iterator undefined
  mov [tmp5952 + Variant_t.type], eax
  mov [tmp5955 + Variant_t.type], eax
  mov [tmp5956 + Variant_t.type], eax
  mov [buffer + Variant_t.type], eax
  mov [lastItem + Variant_t.type], eax
  mov [tmp5961 + Variant_t.type], eax
  mov [newOpcode + Variant_t.type], eax

  ; code
  ; ----

  mov dword [ tmp5928 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5928 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5928 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ src ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5929 ], 1

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5927 ]
  lea rdx, [ __literal625 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5930

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5927 ]
  lea  rdx , [ __literal626 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5929 ], eax

l5930:

  cmp dword [ tmp5929 ], 0
  jz l5932

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __PipeAbstract__emitOneItem$1

  jmp l5933

l5932:

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5927 ]
  lea rdx, [ __literal103 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5934

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __PipeAbstract__emitOneItem$1

  jmp l5935

l5934:

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5927 ]
  lea rdx, [ __literal105 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5937

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __PipeAbstract__emitOneItem$1

  jmp l5938

l5937:

  mov dword [ tmp5939 ], 0

  lea rcx, [ opcode ]
  lea rdx, [ __literal649 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5940

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5927 ]
  lea  rdx , [ __literal649 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5939 ], eax

l5940:

  cmp dword [ tmp5939 ], 0
  jz l5942

  lea  rcx , [ this ]
  lea  rdx , [ __literal1180 ]
  lea  r8 , [ __cse44 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 50 )
  lea rcx , [ __cse44 ]
; WARNING: Failed to get variable size: __literal778
  lea rdx , [ __literal778 ]
  call qword [rbx + 8 * 50 ]

; 
; -----------------------------
; BEGIN: for keys undefined values oneItem
; 
  jmp l5945

l5944:

  lea  rcx , [ this ]
  lea  rdx , [ __literal1180 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 50 )
  lea rcx , [ tmp5927 ]
  lea rdx , [ oneItem ]
  call qword [rbx + 8 * 50 ]

  ret

l5945:

  lea  rcx , [ dst ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5944 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea rcx, [ dst ]
  lea rdx, [ __cse44 ]
  call __MOLD_VariantMove

  jmp l5943

l5942:

  mov dword [ tmp5941 ], 0

  lea rcx, [ opcode ]
  lea rdx, [ __literal591 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5946

  mov dword [ tmp5947 ], 0

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx, [ tmp5927 ]
  lea rdx, [ __literal591 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l5948

  mov dword [ tmp5949 ], 0

  lea  rcx , [ this ]
  lea  rdx , [ __literal1180 ]
  lea  r8 , [ tmp5927 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5927 + Variant_t.type ], 5
  jnz l5950

  lea  rcx , [ this ]
  lea  rdx , [ __literal1180 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5952 ]
  lea  rdx , [ src ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp5949 ], eax

l5950:

  mov eax, dword [ tmp5949 ]
  mov dword [ tmp5947 ], eax

l5948:

  mov eax, dword [ tmp5947 ]
  mov dword [ tmp5941 ], eax

l5946:

  cmp dword [ tmp5941 ], 0
  jz l5953

  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ buffer ]
  push rdi
  lea  rdi , [ tmp5955 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp5928 ], 1

  mov [ tmp5956 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5928 ]
  mov [ tmp5956 + Variant_t.value], rax

  lea  rcx , [ tmp5955 ]
  lea  rdx , [ tmp5956 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantSub

  cmp [ tmp5952 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5952 + Variant_t.value]
  mov dword [ tmp5928 ], eax

  lea  rcx , [ buffer ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ lastItem ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5928 ], 1

  lea  rcx , [ lastItem ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l5954

l5953:

  lea rcx, [ opcode ]
  lea rdx, [ __literal629 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5957

  lea  rcx , [ this ]
  lea  rdx , [ __literal1183 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5956 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5952 ]
  lea  rdx , [ tmp5956 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey

  cmp [ newOpcode  + Variant_t.type], 0
  jz l5959

  lea  rcx, [ tmp5956 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5956 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp5952 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5952 + Variant_t.value], 0

  lea  rcx, [ tmp5955 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5955 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp5956 ]
  lea  rdx , [ tmp5952 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp5952 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5952 + Variant_t.value], 1

  lea  rcx, [ tmp5955 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5955 ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp5956 ]
  lea  rdx , [ tmp5952 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp5952 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5952 + Variant_t.value], 2

  lea  rcx , [ this ]
  lea  rdx , [ __literal1181 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5956 ]
  lea  rdx , [ tmp5952 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp5952 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5952 + Variant_t.value], 3

  lea  rcx , [ this ]
  lea  rdx , [ __literal1182 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5956 ]
  lea  rdx , [ tmp5952 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ tmp5956 ]
  call  __PipeAbstract__replaceLastItem$1

  jmp l5960

l5959:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __PipeAbstract__emitOneItem$1

l5960:

  jmp l5958

l5957:

  lea rcx, [ opcode ]
  lea rdx, [ __literal630 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5962

  lea  rcx , [ this ]
  lea  rdx , [ __literal1191 ]
  lea  r8 , [ tmp5956 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5956 ]
  lea  rdx , [ tmp5955 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey

  cmp [ newOpcode  + Variant_t.type], 0
  jz l5964

  lea  rcx, [ tmp5955 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5955 ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp5956 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5956 + Variant_t.value], 0

  lea  rcx, [ tmp5952 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5952 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp5955 ]
  lea  rdx , [ tmp5956 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp5956 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5956 + Variant_t.value], 1

  lea  rcx, [ tmp5952 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5952 ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove

  lea  rcx , [ tmp5955 ]
  lea  rdx , [ tmp5956 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp5956 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5956 + Variant_t.value], 2

  lea  rcx , [ this ]
  lea  rdx , [ __literal1181 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5955 ]
  lea  rdx , [ tmp5956 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantStoreAtIndex

  mov [ tmp5956 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5956 + Variant_t.value], 3

  lea  rcx , [ this ]
  lea  rdx , [ __literal1182 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ tmp5955 ]
  lea  rdx , [ tmp5956 ]
  lea  r8 , [ tmp5952 ]
  call  __MOLD_VariantStoreAtIndex

  lea rcx , [ this ]
  lea rdx , [ tmp5955 ]
  call  __PipeAbstract__replaceLastItem$1

  jmp l5965

l5964:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __PipeAbstract__emitOneItem$1

l5965:

  jmp l5963

l5962:

  lea rcx , [ this ]
  lea rdx , [ item ]
  call  __PipeAbstract__emitOneItem$1

l5963:

l5958:

l5954:

l5943:

l5938:

l5935:

l5933:

  lea rcx, [ opcode ]
  lea rdx, [ __literal592 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5966

  mov dword [ tmp5928 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal658 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantStoreAtKey

  jmp l5967

l5966:

  lea rcx, [ opcode ]
  lea rdx, [ __literal594 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l5968

  lea rcx , [ this ]
  call  __PipeAbstract_flush$0

l5968:

l5969:

l5967:

  lea  rcx , [ this ]
  lea  rdx , [ __literal1179 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal1180 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp5928 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal1181 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantStoreAtKey

  mov dword [ tmp5928 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp5928 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ this ]
  lea  rdx , [ __literal1182 ]
  lea  r8 , [ tmp5955 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5927 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse44 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem
  lea  rcx, [ tmp5952 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5955 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5956 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastItem ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5961 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy

  add  rsp, 320
  pop  rbp
  ret


  restore this
  restore item
  restore opcode
  restore dst
  restore src
  restore tmp5927
  restore tmp5928
  restore tmp5929
  restore tmp5931
  restore tmp5936
  restore tmp5939
  restore tmp5941
  restore __cse44
  restore oneItem
  restore tmp5947
  restore tmp5949
  restore tmp5951
  restore tmp5952
  restore tmp5955
  restore tmp5956
  restore buffer
  restore lastItem
  restore tmp5961
  restore newOpcode

; -----------------------------------------------
; function __VMachineStackObject_constructor$1
; -----------------------------------------------
__VMachineStackObject_constructor$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 2 , readHits= 1 )
  classProto EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classProto ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore classProto

; -----------------------------------------------
; function __VMachineStack_constructor$0
; -----------------------------------------------
__VMachineStack_constructor$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 3 , readHits= 2 )
  tmp5970 EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  tmp5971 EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [tmp5970 + Variant_t.type], eax
  mov [tmp5971 + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx, [ tmp5970 ]
  call __MOLD_VariantDestroy

  lea  rcx , [ this ]
  lea  rdx , [ __literal1192 ]
  lea  r8 , [ tmp5970 ]
  call  __MOLD_VariantStoreAtKey

  lea  rcx, [ tmp5970 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5970 ]
  lea  rdx, [vtable_Stack]
  call __MOLD_VariantObjectCreate

  lea rcx , [ tmp5970 ]
  lea  rax , [ tmp5971 ]
  call  __Stack_constructor$0

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp5970 ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------
  lea  rcx, [ tmp5970 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5971 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret


  restore this
  restore tmp5970
  restore tmp5971

; -----------------------------------------------
; function __VMachineStack_loadCode$1
; -----------------------------------------------
__VMachineStack_loadCode$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 1 , readHits= 1 )
  code EQU rbp - 40 ; 16 bytes, (kind= 3 , type= undefined , writeHits= 0 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ code ], xmm0

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantStoreAtKey


  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret


  restore this
  restore code

; -----------------------------------------------
; function __VMachineStack__call$1
; -----------------------------------------------
__VMachineStack__call$1_vcall:
  cmp [rdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.implicitConversion
  mov rdx, [rdx + Variant_t.value]

__VMachineStack__call$1:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 6 )
  codeObj EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  code EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  codeCnt EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  stack EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 101 )
  tmp5972 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 66 , readHits= 66 )
  tmp5983 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 43 , readHits= 43 )
  tmp5996 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 17 , readHits= 17 )
  tmp6003 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 5 , readHits= 5 )
  tmp6103 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 30 , readHits= 30 )
  tmp6104 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 3 , readHits= 3 )
  tmp6128 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 3 , readHits= 3 )
  tmp6132 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp6133 EQU rbp - 232 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp6134 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp6135 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  item EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 54 )
  newArray EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  newMap EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  last EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  box EQU rbp - 344 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  key EQU rbp - 360 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  paramBase EQU rbp - 376 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paramIdx EQU rbp - 392 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  paramValue EQU rbp - 408 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  value EQU rbp - 424 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  index EQU rbp - 440 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  val EQU rbp - 456 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  src EQU rbp - 472 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  dst EQU rbp - 488 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 0 )
  proto EQU rbp - 504 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 8 )
  classProto EQU rbp - 520 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  newObject EQU rbp - 536 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  methodName EQU rbp - 552 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 3 )
  thiz EQU rbp - 568 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  vtable EQU rbp - 584 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  methodProto EQU rbp - 600 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 7 )
  sep EQU rbp - 616 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 1 )
  rv EQU rbp - 632 ; 16 bytes, (kind= 1 , type= variant , writeHits= 5 , readHits= 1 )
  arg1 EQU rbp - 648 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  arg2 EQU rbp - 664 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  arg3 EQU rbp - 680 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  keyId EQU rbp - 696 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  valueId EQU rbp - 712 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  bodyIp EQU rbp - 728 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  k EQU rbp - 744 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 2 )
  v EQU rbp - 760 ; 16 bytes, (kind= 1 , type= undefined , writeHits= 1 , readHits= 2 )
  idxId EQU rbp - 776 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  ip EQU rbp - 780 ; 4 bytes, (kind= 3 , type= int32 , writeHits= 8 , readHits= 5 )
  tmp5975 EQU rbp - 784 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5976 EQU rbp - 788 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 96 , readHits= 96 )
  tmp5977 EQU rbp - 792 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5980 EQU rbp - 796 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5984 EQU rbp - 800 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5987 EQU rbp - 804 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5990 EQU rbp - 808 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5993 EQU rbp - 812 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp5997 EQU rbp - 816 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6000 EQU rbp - 820 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6004 EQU rbp - 824 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6007 EQU rbp - 828 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6010 EQU rbp - 832 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6013 EQU rbp - 836 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6016 EQU rbp - 840 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6019 EQU rbp - 844 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6022 EQU rbp - 848 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6025 EQU rbp - 852 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6028 EQU rbp - 856 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6031 EQU rbp - 860 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6034 EQU rbp - 864 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6037 EQU rbp - 868 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6040 EQU rbp - 872 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6043 EQU rbp - 876 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6046 EQU rbp - 880 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6049 EQU rbp - 884 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6052 EQU rbp - 888 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6055 EQU rbp - 892 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6058 EQU rbp - 896 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6061 EQU rbp - 900 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6064 EQU rbp - 904 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6067 EQU rbp - 908 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6070 EQU rbp - 912 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6073 EQU rbp - 916 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6078 EQU rbp - 920 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6081 EQU rbp - 924 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6084 EQU rbp - 928 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6085 EQU rbp - 932 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6090 EQU rbp - 936 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6097 EQU rbp - 940 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6099 EQU rbp - 944 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6100 EQU rbp - 948 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6113 EQU rbp - 952 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6116 EQU rbp - 956 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6119 EQU rbp - 960 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6122 EQU rbp - 964 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6125 EQU rbp - 968 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6129 EQU rbp - 972 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 31 , readHits= 31 )
  tmp6140 EQU rbp - 976 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp6141 EQU rbp - 980 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6144 EQU rbp - 984 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6147 EQU rbp - 988 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6150 EQU rbp - 992 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6153 EQU rbp - 996 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 4 , readHits= 4 )
  tmp6172 EQU rbp - 1000 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  opcode EQU rbp - 1004 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 51 )
  idx EQU rbp - 1008 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  paramsCnt EQU rbp - 1012 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  paramsCnt2 EQU rbp - 1016 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 3 )
  paramIdx2 EQU rbp - 1020 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )
  id EQU rbp - 1024 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 5 )
  i EQU rbp - 1028 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 2 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 1056

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov dword [ ip ], edx
  xor eax, eax
  mov [codeObj + Variant_t.type], eax
  mov [code + Variant_t.type], eax
  mov [codeCnt + Variant_t.type], eax
  mov [stack + Variant_t.type], eax
  mov [tmp5972 + Variant_t.type], eax
  mov [tmp5983 + Variant_t.type], eax
  mov [tmp5996 + Variant_t.type], eax
  mov [tmp6003 + Variant_t.type], eax
  mov [tmp6103 + Variant_t.type], eax
  mov [tmp6104 + Variant_t.type], eax
  mov [tmp6128 + Variant_t.type], eax
  mov [tmp6132 + Variant_t.type], eax
  mov [tmp6133 + Variant_t.type], eax
  mov [tmp6134 + Variant_t.type], eax
  mov [tmp6135 + Variant_t.type], eax
  mov [item + Variant_t.type], eax
  mov [newArray + Variant_t.type], eax
  mov [newMap + Variant_t.type], eax
  mov [last + Variant_t.type], eax
  mov [box + Variant_t.type], eax
  mov [key + Variant_t.type], eax
  mov [paramBase + Variant_t.type], eax
  mov [paramIdx + Variant_t.type], eax
  mov [paramValue + Variant_t.type], eax
  mov [value + Variant_t.type], eax
  mov [index + Variant_t.type], eax
  mov [val + Variant_t.type], eax
  mov [src + Variant_t.type], eax
  mov [dst + Variant_t.type], eax
  mov [proto + Variant_t.type], eax
  mov [classProto + Variant_t.type], eax
  mov [newObject + Variant_t.type], eax
  mov [methodName + Variant_t.type], eax
  mov [thiz + Variant_t.type], eax
  mov [vtable + Variant_t.type], eax
  mov [methodProto + Variant_t.type], eax
  mov [sep + Variant_t.type], eax
  mov [rv + Variant_t.type], eax
  mov [arg1 + Variant_t.type], eax
  mov [arg2 + Variant_t.type], eax
  mov [arg3 + Variant_t.type], eax
  mov [keyId + Variant_t.type], eax
  mov [valueId + Variant_t.type], eax
  mov [bodyIp + Variant_t.type], eax
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [idxId + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ codeObj ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ codeCnt ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ stack ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ stack ]
  lea rdx , [ codeCnt ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6822
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6822:


; 
; -----------------------------
; BEGIN: while
; 
l5973:

  mov [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp5972 + Variant_t.value], rax

  lea rcx, [ codeCnt ]
  lea rdx, [ tmp5972 ]
  call __MOLD_VariantCompareLE
  test al, al
  jnz l5974

  lea  rcx , [ code ]
  lea  rdx , [ ip ]
  lea  r8 , [ item ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5976 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp5976 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jz l5978

  mov dword [ tmp5976 ], 10

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l5981

  lea  rcx, [ tmp5983 ]
  call __MOLD_VariantDestroy

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6823
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6823:


  jmp l5982

l5981:

  mov dword [ tmp5976 ], 7

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l5985

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6824
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6824:


  jmp l5986

l5985:

  mov dword [ tmp5976 ], 8

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l5988

  lea  rcx, [ newArray ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newArray ]
  call  __MOLD_VariantArrayCreate

  lea rcx , [ stack ]
  lea rdx , [ newArray ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6825
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6825:


  jmp l5989

l5988:

  mov dword [ tmp5976 ], 9

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l5991

  lea  rcx, [ newMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newMap ]
  call  __MOLD_VariantMapCreate

  lea rcx , [ stack ]
  lea rdx , [ newMap ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6826
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6826:


  jmp l5992

l5991:

  mov dword [ tmp5976 ], 1

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l5994

  lea rcx , [ stack ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6827
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6827:


  lea  rcx , [ tmp5996 ]
  lea  rdx , [ tmp5983 ]
  call  __MOLD_VariantNeg

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6828
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6828:


  jmp l5995

l5994:

  mov dword [ tmp5976 ], 2

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l5998

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6829
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6829:


  lea rcx , [ stack ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6830
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6830:


  lea  rcx , [ tmp5996 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantAdd

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6831
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6831:


  jmp l5999

l5998:

  mov dword [ tmp5976 ], 49

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6001

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6832
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6832:


  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6833
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6833:


  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5983 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStringJoin

  lea rcx , [ stack ]
  lea rdx , [ tmp6003 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6834
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6834:


  jmp l6002

l6001:

  mov dword [ tmp5976 ], 4

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6005

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6835
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6835:


  lea rcx , [ stack ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6836
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6836:


  lea  rcx , [ tmp5996 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantMul

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6837
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6837:


  jmp l6006

l6005:

  mov dword [ tmp5976 ], 3

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6008

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6838
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6838:


  lea rcx , [ stack ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6839
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6839:


  lea  rcx , [ tmp5996 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantSub

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6840
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6840:


  jmp l6009

l6008:

  mov dword [ tmp5976 ], 5

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6011

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6841
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6841:


  lea rcx , [ stack ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6842
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6842:


  lea  rcx , [ tmp5996 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantDiv

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6843
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6843:


  jmp l6012

l6011:

  mov dword [ tmp5976 ], 6

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6014

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6844
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6844:


  lea rcx , [ stack ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6845
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6845:


  lea  rcx , [ tmp5996 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantDivAsInteger

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6846
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6846:


  jmp l6015

l6014:

  mov dword [ tmp5976 ], 11

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6017

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6847
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6847:


  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6848
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6848:


  lea  rcx , [ tmp5983 ]
  lea  rdx , [ last ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp6019 ], eax

  mov eax, dword [ tmp6019 ]
  mov [ tmp5983 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6849
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6849:


  jmp l6018

l6017:

  mov dword [ tmp5976 ], 12

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6020

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6850
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6850:


  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6851
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6851:


  lea  rcx , [ tmp5983 ]
  lea  rdx , [ last ]
  call  __MOLD_VariantCompareNE
  mov [ tmp6022 ], eax

  mov eax, dword [ tmp6022 ]
  mov [ tmp5983 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6852
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6852:


  jmp l6021

l6020:

  mov dword [ tmp5976 ], 15

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6023

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6853
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6853:


  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6854
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6854:


  lea  rcx , [ tmp5983 ]
  lea  rdx , [ last ]
  call  __MOLD_VariantCompareLT
  mov [ tmp6025 ], eax

  mov eax, dword [ tmp6025 ]
  mov [ tmp5983 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6855
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6855:


  jmp l6024

l6023:

  mov dword [ tmp5976 ], 16

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6026

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6856
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6856:


  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6857
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6857:


  lea  rcx , [ tmp5983 ]
  lea  rdx , [ last ]
  call  __MOLD_VariantCompareLE
  mov [ tmp6028 ], eax

  mov eax, dword [ tmp6028 ]
  mov [ tmp5983 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6858
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6858:


  jmp l6027

l6026:

  mov dword [ tmp5976 ], 13

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6029

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6859
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6859:


  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6860
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6860:


  lea  rcx , [ last ]
  lea  rdx , [ tmp5983 ]
  call  __MOLD_VariantCompareLT
  mov [ tmp6031 ], eax

  mov eax, dword [ tmp6031 ]
  mov [ tmp5983 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6861
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6861:


  jmp l6030

l6029:

  mov dword [ tmp5976 ], 14

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6032

  lea rcx , [ stack ]
  lea  rax , [ last ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6862
  movsxd rax, dword [ last + Variant_t.value ]
  mov    qword [ last + Variant_t.value ], rax
l6862:


  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6863
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6863:


  lea  rcx , [ last ]
  lea  rdx , [ tmp5983 ]
  call  __MOLD_VariantCompareLE
  mov [ tmp6034 ], eax

  mov eax, dword [ tmp6034 ]
  mov [ tmp5983 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6864
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6864:


  jmp l6033

l6032:

  mov dword [ tmp5976 ], 30

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6035

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 166
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6865
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6865:


  jmp l6036

l6035:

  mov dword [ tmp5976 ], 31

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6038

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 161
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6866
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6866:


  jmp l6039

l6038:

  mov dword [ tmp5976 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6041

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 139
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6867
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6867:


  jmp l6042

l6041:

  mov dword [ tmp5976 ], 33

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6044

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 140
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6868
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6868:


  jmp l6045

l6044:

  mov dword [ tmp5976 ], 17

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6047

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5996 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp5996 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5996 + Variant_t.value]
  mov dword [ tmp5976 ], eax

  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6869
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6869:


  jmp l6048

l6047:

  mov dword [ tmp5976 ], 19

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6050

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5996 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp5996 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5996 + Variant_t.value]
  mov dword [ tmp5976 ], eax

  lea  rcx , [ _vm_heap ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6870
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6870:


  jmp l6051

l6050:

  mov dword [ tmp5976 ], 21

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6053

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6871
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6871:


  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ idx ], eax

  lea rcx , [ stack ]
  lea  rax , [ box ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6872
  movsxd rax, dword [ box + Variant_t.value ]
  mov    qword [ box + Variant_t.value ], rax
l6872:


  lea  rcx , [ box ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6873
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6873:


  jmp l6054

l6053:

  mov dword [ tmp5976 ], 22

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6056

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6874
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6874:


  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp5972 ]
  call __MOLD_VariantMove

  lea rcx , [ stack ]
  lea  rax , [ box ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6875
  movsxd rax, dword [ box + Variant_t.value ]
  mov    qword [ box + Variant_t.value ], rax
l6875:


  lea  rcx , [ box ]
  lea  rdx , [ key ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6876
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6876:


  jmp l6057

l6056:

  mov dword [ tmp5976 ], 18

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6059

  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ paramBase ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ paramIdx ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ paramBase ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantAdd

  lea rcx , [ stack ]
  lea rdx , [ tmp5972 ]
  lea  rax , [ paramValue ]
  mov  r10d, 167
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6877
  movsxd rax, dword [ paramValue + Variant_t.value ]
  mov    qword [ paramValue + Variant_t.value ], rax
l6877:


  lea rcx , [ stack ]
  lea rdx , [ paramValue ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6878
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6878:


  jmp l6060

l6059:

  mov dword [ tmp5976 ], 24

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6062

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ tmp5976 ], eax

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6879
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6879:


  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l6063

l6062:

  mov dword [ tmp5976 ], 26

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6065

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ tmp5976 ], eax

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6880
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6880:


  lea  rcx , [ _vm_heap ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l6066

l6065:

  mov dword [ tmp5976 ], 25

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6068

  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ paramBase ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ paramIdx ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ paramBase ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantAdd

  lea rcx , [ stack ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6881
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6881:


  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea r8 , [ tmp5996 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 168
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6882
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6882:


  jmp l6069

l6068:

  mov dword [ tmp5976 ], 28

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6071

  lea rcx , [ stack ]
  lea  rax , [ value ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6883
  movsxd rax, dword [ value + Variant_t.value ]
  mov    qword [ value + Variant_t.value ], rax
l6883:


  lea rcx , [ stack ]
  lea  rax , [ index ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6884
  movsxd rax, dword [ index + Variant_t.value ]
  mov    qword [ index + Variant_t.value ], rax
l6884:


  lea rcx , [ stack ]
  lea  rax , [ box ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6885
  movsxd rax, dword [ box + Variant_t.value ]
  mov    qword [ box + Variant_t.value ], rax
l6885:


  cmp [ index  + Variant_t.type], 2
  jz l6074

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal1193
  lea rcx , [ __literal1193 ]
  call qword [rbx + 8 * 41 ]

l6074:

l6075:

  cmp [ index + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ index + Variant_t.value]
  mov dword [ tmp5976 ], eax

  lea  rcx , [ box ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ box ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6886
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6886:


  jmp l6072

l6071:

  mov dword [ tmp5976 ], 29

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6076

  lea rcx , [ stack ]
  lea  rax , [ val ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6887
  movsxd rax, dword [ val + Variant_t.value ]
  mov    qword [ val + Variant_t.value ], rax
l6887:


  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6888
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6888:


  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp5972 ]
  call __MOLD_VariantMove

  lea rcx , [ stack ]
  lea  rax , [ box ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6889
  movsxd rax, dword [ box + Variant_t.value ]
  mov    qword [ box + Variant_t.value ], rax
l6889:


  lea  rcx , [ box ]
  lea  rdx , [ key ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ stack ]
  lea rdx , [ box ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6890
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6890:


  jmp l6077

l6076:

  mov dword [ tmp5976 ], 39

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6079

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5996 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5976 ], 1

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp5983 + Variant_t.value], rax

  lea  rcx , [ tmp5996 ]
  lea  rdx , [ tmp5983 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantSub

  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ ip ], eax

  jmp l6080

l6079:

  mov dword [ tmp5976 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6082

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6891
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6891:


  mov dword [ tmp6085 ], 1

  mov eax, dword [ tmp6085 ]
  mov [ tmp5983 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx, [ tmp5972 ]
  lea rdx, [ tmp5983 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6086

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5976 ], 1

  mov [ tmp5996 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp5996 + Variant_t.value], rax

  lea  rcx , [ tmp5972 ]
  lea  rdx , [ tmp5996 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantSub

  cmp [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5983 + Variant_t.value]
  mov dword [ ip ], eax

l6086:

l6087:

  jmp l6083

l6082:

  mov dword [ tmp5976 ], 41

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6088

  lea rcx , [ stack ]
  lea  rax , [ tmp5983 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6892
  movsxd rax, dword [ tmp5983 + Variant_t.value ]
  mov    qword [ tmp5983 + Variant_t.value ], rax
l6892:


  mov dword [ tmp6090 ], 0

  mov eax, dword [ tmp6090 ]
  mov [ tmp5996 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5996 + Variant_t.value], rax

  lea rcx, [ tmp5983 ]
  lea rdx, [ tmp5996 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6091

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5976 ], 1

  mov [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp5972 + Variant_t.value], rax

  lea  rcx , [ tmp5983 ]
  lea  rdx , [ tmp5972 ]
  lea  r8 , [ tmp5996 ]
  call  __MOLD_VariantSub

  cmp [ tmp5996 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5996 + Variant_t.value]
  mov dword [ ip ], eax

l6091:

l6092:

  jmp l6089

l6088:

  mov dword [ tmp5976 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6093

  lea rcx , [ stack ]
  lea  rax , [ src ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6893
  movsxd rax, dword [ src + Variant_t.value ]
  mov    qword [ src + Variant_t.value ], rax
l6893:


  lea rcx , [ stack ]
  lea  rax , [ dst ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6894
  movsxd rax, dword [ dst + Variant_t.value ]
  mov    qword [ dst + Variant_t.value ], rax
l6894:


  lea rcx , [ stack ]
  lea rdx , [ src ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6895
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6895:


  jmp l6094

l6093:

  mov dword [ tmp5976 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6095

  mov [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp5972 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5972 ]
  lea  rax , [ tmp5996 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6896
  movsxd rax, dword [ tmp5996 + Variant_t.value ]
  mov    qword [ tmp5996 + Variant_t.value ], rax
l6896:


  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ proto ]
  lea  rdx , [ __literal573 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5976 ], 1

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp5983 + Variant_t.value], rax

  lea  rcx , [ tmp5972 ]
  lea  rdx , [ tmp5983 ]
  lea  r8 , [ tmp5996 ]
  call  __MOLD_VariantSub

  cmp [ tmp5996 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5996 + Variant_t.value]
  mov dword [ ip ], eax

  mov dword [ tmp5976 ], 1

  mov eax, dword [ _vm_deepIdx ]
  add eax, dword [ tmp5976 ]
  mov dword [ _vm_deepIdx ], eax

  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantStoreAtIndex_int32

  mov dword [ tmp6097 ], 0

  lea  rcx , [ proto ]
  lea  rdx , [ __literal555 ]
  lea  r8 , [ tmp5996 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp5996  + Variant_t.type], 0
  jz l6098

  lea  rcx , [ proto ]
  lea  rdx , [ __literal555 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp6100 ], 1

  mov eax, dword [ tmp6100 ]
  mov [ tmp5972 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5972 + Variant_t.value], rax

  lea  rcx , [ tmp5983 ]
  lea  rdx , [ tmp5972 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp6097 ], eax

l6098:

  cmp dword [ tmp6097 ], 0
  jz l6101

  lea  rcx , [ proto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp6104 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp6104 ]
  push rdi
  lea  rdi , [ tmp6103 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp5976 ], 2

  mov [ tmp6104 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp6104 + Variant_t.value], rax

  lea  rcx , [ tmp6103 ]
  lea  rdx , [ tmp6104 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantAdd

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6897
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6897:


  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantStoreAtIndex_int32

l6101:

l6102:

  jmp l6096

l6095:

  mov dword [ tmp5976 ], 46

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6105

  lea  rcx , [ stack ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp6104 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp6104 ]
  lea  rdx , [ tmp6103 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantSub

  mov dword [ tmp5976 ], 1

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp6103 + Variant_t.value], rax

  lea  rcx , [ tmp5983 ]
  lea  rdx , [ tmp6103 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantSub

  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l6106

l6105:

  mov dword [ tmp5976 ], 43

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6107

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6898
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6898:


  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ ip ], eax

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 161
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6899
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6899:


  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6900
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6900:


  mov dword [ tmp5976 ], 1

  mov eax, dword [ _vm_deepIdx ]
  sub eax, dword [ tmp5976 ]
  mov dword [ _vm_deepIdx ], eax

  mov dword [ tmp5976 ], 0

  mov eax, dword [ _vm_deepIdx ]
  cmp eax, dword [ tmp5976 ]
  jl l6109

  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantLoadFromIndex_int32

l6109:

l6110:

  jmp l6108

l6107:

  mov dword [ tmp5976 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6111

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6901
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6901:


  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ ip ], eax

  jmp l6112

l6111:

  mov dword [ tmp5976 ], 20

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6114

  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6902
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6902:


  jmp l6115

l6114:

  mov dword [ tmp5976 ], 27

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6117

  lea rcx , [ stack ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6903
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6903:


  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l6118

l6117:

  mov dword [ tmp5976 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6120

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx, [ newObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newObject ]
  lea  rdx, [vtable_VMachineStackObject]
  call __MOLD_VariantObjectCreate

  lea rcx , [ newObject ]
  lea rdx , [ classProto ]
  lea  rax , [ tmp5972 ]
  call  __VMachineStackObject_constructor$1

  lea  rcx , [ classProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ newObject ]
  lea  rdx , [ __literal1194 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ stack ]
  lea rdx , [ newObject ]
  lea  rax , [ tmp5972 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6904
  movsxd rax, dword [ tmp5972 + Variant_t.value ]
  mov    qword [ tmp5972 + Variant_t.value ], rax
l6904:


  jmp l6121

l6120:

  mov dword [ tmp5976 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6123

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp5976 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5972 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  mov [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5972 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5972 ]
  lea  rax , [ thiz ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6905
  movsxd rax, dword [ thiz + Variant_t.value ]
  mov    qword [ thiz + Variant_t.value ], rax
l6905:


  lea  rcx , [ thiz ]
  lea  rdx , [ __literal1194 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey

  cmp [ methodProto + Variant_t.type ], 0
  jnz l6126

  lea  rcx, [ tmp6128 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal653 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp6128 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6128 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp6003 ]
  call qword [rbx + 8 * 41 ]

l6126:

l6127:

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp6103 ]
  push rdi
  lea  rdi , [ tmp5972 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  mov dword [ tmp6129 ], 1

  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp6129 ]
  mov dword [ tmp5976 ], eax

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp6103 + Variant_t.value], rax

  lea rcx, [ tmp5972 ]
  lea rdx, [ tmp6103 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l6130

  lea  rcx, [ tmp6135 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1195 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp6135 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6134 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6135 ]
  lea  rdx , [ __literal312 ]
  lea  r8 , [ tmp6134 ]
  call  __MOLD_VariantStringJoin

  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp5983 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 43 )
  lea rcx , [ tmp5983 ]
  push rdi
  lea  rdi , [ tmp5972 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5972 ]
  push rdi
  lea  rdi , [ tmp6103 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6133 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6134 ]
  lea  rdx , [ tmp6103 ]
  lea  r8 , [ tmp6133 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6132 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6133 ]
  lea  rdx , [ __literal313 ]
  lea  r8 , [ tmp6132 ]
  call  __MOLD_VariantStringJoin

  mov [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5972 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5972 ]
  push rdi
  lea  rdi , [ tmp6103 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6128 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6132 ]
  lea  rdx , [ tmp6103 ]
  lea  r8 , [ tmp6128 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6128 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp6003 ]
  call qword [rbx + 8 * 41 ]

l6130:

l6131:

  mov [ tmp5972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp5972 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5972 ]
  lea  rax , [ tmp6103 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6906
  movsxd rax, dword [ tmp6103 + Variant_t.value ]
  mov    qword [ tmp6103 + Variant_t.value ], rax
l6906:


  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal573 ]
  lea  r8 , [ tmp5972 ]
  call  __MOLD_VariantLoadFromKey

  mov dword [ tmp5976 ], 1

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5976 ]
  mov [ tmp5983 + Variant_t.value], rax

  lea  rcx , [ tmp5972 ]
  lea  rdx , [ tmp5983 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantSub

  cmp [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp6103 + Variant_t.value]
  mov dword [ ip ], eax

  mov dword [ tmp5976 ], 1

  mov eax, dword [ _vm_deepIdx ]
  add eax, dword [ tmp5976 ]
  mov dword [ _vm_deepIdx ], eax

  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantStoreAtIndex_int32

  jmp l6124

l6123:

  mov dword [ tmp5976 ], 35

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5976 ]
  jnz l6136

  mov dword [ tmp5976 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp5976 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp6103 + Variant_t.value]
  mov dword [ paramsCnt2 ], eax

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  mov dword [ tmp5976 ], 1

  mov dword [ paramIdx2 ], 0

; 
; -----------------------------
; BEGIN: for paramIdx2 in tmp6129 .. paramsCnt2
; 
l6138:

  mov eax, dword [ paramIdx2 ]
  cmp eax, dword [ paramsCnt2 ]
  jge l6139

  ; __mold_syscall( 45 )
  lea rcx , [ sep ]
  call qword [rbx + 8 * 45 ]

  mov eax, dword [ paramsCnt2 ]
  sub eax, dword [ paramIdx2 ]
  mov dword [ tmp6140 ], eax

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6140 ]
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp6103 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6907
  movsxd rax, dword [ tmp6103 + Variant_t.value ]
  mov    qword [ tmp6103 + Variant_t.value ], rax
l6907:


  ; __mold_syscall( 45 )
  lea rcx , [ tmp6103 ]
  call qword [rbx + 8 * 45 ]

  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal328 ]
  call __MOLD_VariantMove

  mov eax, dword [ paramIdx2 ]
  add eax, dword [ tmp5976 ]
  mov dword [ paramIdx2 ], eax

  jmp l6138

l6139:

; 
; END: for paramIdx2 in tmp6129 .. paramsCnt2 step tmp5976
; -----------------------------
; 
  lea rcx, [__fmt14 ]
  call __MOLD_PrintFormatFromMemory

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt2 ]
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp6103 ]
  mov  r10d, 161
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6908
  movsxd rax, dword [ tmp6103 + Variant_t.value ]
  mov    qword [ tmp6103 + Variant_t.value ], rax
l6908:


  jmp l6137

l6136:

  mov dword [ tmp6129 ], 48

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6129 ]
  jnz l6142

  mov dword [ tmp6129 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp6103 + Variant_t.value]
  mov dword [ id ], eax

  mov dword [ tmp6129 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp6103 + Variant_t.value]
  mov dword [ paramsCnt ], eax

  mov dword [ tmp6129 ], 0

  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp6129 ]
  jnz l6145

  ; __mold_syscall( id )
  push rdi
  lea  rdi , [ rv ]
  mov eax, dword [ id ]
  call qword [rbx]
  pop rdi

  jmp l6146

l6145:

  mov dword [ tmp6129 ], 1

  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp6129 ]
  jnz l6148

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp6103 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ arg1 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6909
  movsxd rax, dword [ arg1 + Variant_t.value ]
  mov    qword [ arg1 + Variant_t.value ], rax
l6909:


  ; __mold_syscall( id )
  lea rcx , [ arg1 ]
  push rdi
  lea  rdi , [ rv ]
  mov eax, dword [ id ]
  call qword [rbx]
  pop rdi

  jmp l6149

l6148:

  mov dword [ tmp6129 ], 2

  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp6129 ]
  jnz l6151

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp6103 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ arg1 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6910
  movsxd rax, dword [ arg1 + Variant_t.value ]
  mov    qword [ arg1 + Variant_t.value ], rax
l6910:


  mov dword [ tmp5976 ], 1

  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp5976 ]
  mov dword [ tmp6129 ], eax

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6129 ]
  mov [ tmp6103 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ arg2 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6911
  movsxd rax, dword [ arg2 + Variant_t.value ]
  mov    qword [ arg2 + Variant_t.value ], rax
l6911:


  ; __mold_syscall( id )
  lea rcx , [ arg1 ]
  lea rdx , [ arg2 ]
  push rdi
  lea  rdi , [ rv ]
  mov eax, dword [ id ]
  call qword [rbx]
  pop rdi

  jmp l6152

l6151:

  mov dword [ tmp6129 ], 3

  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp6129 ]
  jnz l6154

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp6103 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ arg1 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6912
  movsxd rax, dword [ arg1 + Variant_t.value ]
  mov    qword [ arg1 + Variant_t.value ], rax
l6912:


  mov dword [ tmp5976 ], 1

  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp5976 ]
  mov dword [ tmp6129 ], eax

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6129 ]
  mov [ tmp6103 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ arg2 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6913
  movsxd rax, dword [ arg2 + Variant_t.value ]
  mov    qword [ arg2 + Variant_t.value ], rax
l6913:


  mov dword [ tmp5976 ], 2

  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp5976 ]
  mov dword [ tmp6129 ], eax

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6129 ]
  mov [ tmp6103 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp6103 ]
  lea  rax , [ arg3 ]
  mov  r10d, 160
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6914
  movsxd rax, dword [ arg3 + Variant_t.value ]
  mov    qword [ arg3 + Variant_t.value ], rax
l6914:


  ; __mold_syscall( id )
  lea rcx , [ arg1 ]
  lea rdx , [ arg2 ]
  lea r8 , [ arg3 ]
  push rdi
  lea  rdi , [ rv ]
  mov eax, dword [ id ]
  call qword [rbx]
  pop rdi

  jmp l6155

l6154:

  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5983 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5983 ]
  push rdi
  lea  rdi , [ tmp6103 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1196 ]
  lea  rdx , [ tmp6103 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp6003 ]
  call qword [rbx + 8 * 41 ]

l6155:

l6152:

l6149:

l6146:

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5983 + Variant_t.value], rax

  lea rcx , [ stack ]
  lea rdx , [ tmp5983 ]
  lea  rax , [ tmp6103 ]
  mov  r10d, 161
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6915
  movsxd rax, dword [ tmp6103 + Variant_t.value ]
  mov    qword [ tmp6103 + Variant_t.value ], rax
l6915:


  lea rcx , [ stack ]
  lea rdx , [ rv ]
  lea  rax , [ tmp6103 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6916
  movsxd rax, dword [ tmp6103 + Variant_t.value ]
  mov    qword [ tmp6103 + Variant_t.value ], rax
l6916:


  jmp l6143

l6142:

  mov dword [ tmp6129 ], 252

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6129 ]
  jnz l6156

  lea rcx , [ stack ]
  lea rdx , [ argc ]
  lea  rax , [ tmp6103 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6917
  movsxd rax, dword [ tmp6103 + Variant_t.value ]
  mov    qword [ tmp6103 + Variant_t.value ], rax
l6917:


  jmp l6157

l6156:

  mov dword [ tmp6129 ], 253

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6129 ]
  jnz l6158

  lea rcx , [ stack ]
  lea rdx , [ argv ]
  lea  rax , [ tmp6103 ]
  mov  r10d, 159
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6918
  movsxd rax, dword [ tmp6103 + Variant_t.value ]
  mov    qword [ tmp6103 + Variant_t.value ], rax
l6918:


  jmp l6159

l6158:

  mov dword [ tmp6129 ], 100

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6129 ]
  jnz l6160

  lea rcx , [ stack ]
  lea  rax , [ box ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6919
  movsxd rax, dword [ box + Variant_t.value ]
  mov    qword [ box + Variant_t.value ], rax
l6919:


  mov dword [ tmp6129 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ keyId ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6129 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6129 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ bodyIp ]
  call  __MOLD_VariantLoadFromIndex_int32

; 
; -----------------------------
; BEGIN: for keys k values v
; 
  jmp l6163

l6162:

  cmp [ keyId  + Variant_t.type], 0
  jz l6164

  cmp [ keyId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ keyId + Variant_t.value]
  mov dword [ tmp6129 ], eax

  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ k ]
  call  __MOLD_VariantStoreAtIndex_int32

l6164:

l6165:

  cmp [ valueId  + Variant_t.type], 0
  jz l6166

  cmp [ valueId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ valueId + Variant_t.value]
  mov dword [ tmp6129 ], eax

  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ v ]
  call  __MOLD_VariantStoreAtIndex_int32

l6166:

l6167:

  cmp [ bodyIp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ bodyIp + Variant_t.value]
  mov dword [ tmp6129 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp6129 ]
  call  __VMachineStack__call$1

  ret

l6163:

  lea rcx , [ box ]
  lea rdx , [ k ]
  lea r8 , [ v ]
  lea r9 , [ l6162 ]
  call  __MOLD_ForDriver_KeysAndValuesInMap

; 
; END: for keys k values v
; -----------------------------
; 
  jmp l6161

l6160:

  mov dword [ tmp6129 ], 101

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6129 ]
  jnz l6168

  lea rcx , [ stack ]
  lea  rax , [ box ]
  mov  r10d, 158
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6920
  movsxd rax, dword [ box + Variant_t.value ]
  mov    qword [ box + Variant_t.value ], rax
l6920:


  mov dword [ tmp6129 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ idxId ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6129 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6129 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ bodyIp ]
  call  __MOLD_VariantLoadFromIndex_int32

; 
; -----------------------------
; BEGIN: for keys i values v
; 
  jmp l6171

l6170:

  cmp [ idxId  + Variant_t.type], 0
  jz l6173

  cmp [ idxId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ idxId + Variant_t.value]
  mov dword [ tmp6129 ], eax

  mov [ tmp6103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ i ]
  mov [ tmp6103 + Variant_t.value], rax

  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ tmp6103 ]
  call  __MOLD_VariantStoreAtIndex_int32

l6173:

l6174:

  cmp [ valueId  + Variant_t.type], 0
  jz l6175

  cmp [ valueId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ valueId + Variant_t.value]
  mov dword [ tmp6129 ], eax

  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp6129 ]
  lea  r8 , [ v ]
  call  __MOLD_VariantStoreAtIndex_int32

l6175:

l6176:

  cmp [ bodyIp + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ bodyIp + Variant_t.value]
  mov dword [ tmp6129 ], eax

  lea rcx , [ this ]
  mov edx , dword [ tmp6129 ]
  call  __VMachineStack__call$1

  ret

l6171:

  lea  rcx , [ box ]
  lea  rdx , [ i ]
  lea  r8 , [ v ]
  lea  r9 , [ l6170 ]
  call  __MOLD_ForDriver_Generic

; 
; END: for keys i values v
; -----------------------------
; 
  jmp l6169

l6168:

  mov [ tmp5983 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp5983 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp5983 ]
  push rdi
  lea  rdi , [ tmp6103 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6128 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1197 ]
  lea  rdx , [ tmp6103 ]
  lea  r8 , [ tmp6128 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6128 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp6003 ]
  call qword [rbx + 8 * 41 ]

l6169:

l6161:

l6159:

l6157:

l6143:

l6137:

l6124:

l6121:

l6118:

l6115:

l6112:

l6108:

l6106:

l6096:

l6094:

l6089:

l6083:

l6080:

l6077:

l6072:

l6069:

l6066:

l6063:

l6060:

l6057:

l6054:

l6051:

l6048:

l6045:

l6042:

l6039:

l6036:

l6033:

l6030:

l6027:

l6024:

l6021:

l6018:

l6015:

l6012:

l6009:

l6006:

l6002:

l5999:

l5995:

l5992:

l5989:

l5986:

l5982:

l5978:

l5979:

  mov dword [ tmp6129 ], 1

  mov eax, dword [ ip ]
  add eax, dword [ tmp6129 ]
  mov dword [ ip ], eax

  jmp l5973

l5974:

; 
; END: while
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5972 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5983 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5996 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6103 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6104 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6128 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6132 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6133 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6134 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6135 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newArray ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramBase ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramIdx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ index ]
  call __MOLD_VariantDestroy
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyIp ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator k
  ; Skipped loop iterator v
  lea  rcx, [ idxId ]
  call __MOLD_VariantDestroy

  add  rsp, 1056
  pop  rbp
  ret


  restore this
  restore ip
  restore codeObj
  restore code
  restore codeCnt
  restore stack
  restore tmp5972
  restore tmp5975
  restore tmp5976
  restore tmp5977
  restore tmp5980
  restore tmp5983
  restore tmp5984
  restore tmp5987
  restore tmp5990
  restore tmp5993
  restore tmp5996
  restore tmp5997
  restore tmp6000
  restore tmp6003
  restore tmp6004
  restore tmp6007
  restore tmp6010
  restore tmp6013
  restore tmp6016
  restore tmp6019
  restore tmp6022
  restore tmp6025
  restore tmp6028
  restore tmp6031
  restore tmp6034
  restore tmp6037
  restore tmp6040
  restore tmp6043
  restore tmp6046
  restore tmp6049
  restore tmp6052
  restore tmp6055
  restore tmp6058
  restore tmp6061
  restore tmp6064
  restore tmp6067
  restore tmp6070
  restore tmp6073
  restore tmp6078
  restore tmp6081
  restore tmp6084
  restore tmp6085
  restore tmp6090
  restore tmp6097
  restore tmp6099
  restore tmp6100
  restore tmp6103
  restore tmp6104
  restore tmp6113
  restore tmp6116
  restore tmp6119
  restore tmp6122
  restore tmp6125
  restore tmp6128
  restore tmp6129
  restore tmp6132
  restore tmp6133
  restore tmp6134
  restore tmp6135
  restore tmp6140
  restore tmp6141
  restore tmp6144
  restore tmp6147
  restore tmp6150
  restore tmp6153
  restore tmp6172
  restore item
  restore opcode
  restore newArray
  restore newMap
  restore last
  restore idx
  restore box
  restore key
  restore paramBase
  restore paramIdx
  restore paramValue
  restore value
  restore index
  restore val
  restore src
  restore dst
  restore proto
  restore classProto
  restore newObject
  restore methodName
  restore paramsCnt
  restore thiz
  restore vtable
  restore methodProto
  restore paramsCnt2
  restore sep
  restore paramIdx2
  restore id
  restore rv
  restore arg1
  restore arg2
  restore arg3
  restore keyId
  restore valueId
  restore bodyIp
  restore k
  restore v
  restore idxId
  restore i

; -----------------------------------------------
; function __VMachineStack_run$0
; -----------------------------------------------
__VMachineStack_run$0_vcall:
__VMachineStack_run$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 1 )
  tmp6177 EQU rbp - 28 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----

  mov dword [ tmp6177 ], 0

  lea rcx , [ this ]
  mov edx , dword [ tmp6177 ]
  call  __VMachineStack__call$1


  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret


  restore this
  restore tmp6177

; -----------------------------------------------
; function __VMachineStack_dumpCode$0
; -----------------------------------------------
__VMachineStack_dumpCode$0:

  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes, (kind= 3 , type= variant , writeHits= 0 , readHits= 2 )
  codeObj EQU rbp - 40 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 12 )
  code EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  codeCnt EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  comments EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  txt EQU rbp - 104 ; 16 bytes, (kind= 1 , type= string , writeHits= 56 , readHits= 1 )
  tmp6178 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 13 , readHits= 13 )
  tmp6190 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 21 , readHits= 21 )
  tmp6205 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 6 , readHits= 6 )
  tmp6306 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp6346 EQU rbp - 184 ; 16 bytes, (kind= 1 , type= string , writeHits= 4 , readHits= 4 )
  tmp6350 EQU rbp - 200 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  tmp6351 EQU rbp - 216 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  item EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 14 )
  arg1 EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 5 )
  arg2 EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  arg3 EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 2 )
  arg EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 20 )
  labelPrefix EQU rbp - 312 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 3 )
  spacesCnt EQU rbp - 328 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  type EQU rbp - 344 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 4 )
  commentsCnt EQU rbp - 348 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  commentIdx EQU rbp - 352 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 4 )
  tmp6179 EQU rbp - 356 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp6180 EQU rbp - 360 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp6181 EQU rbp - 364 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp6184 EQU rbp - 368 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 64 , readHits= 64 )
  tmp6187 EQU rbp - 372 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6189 EQU rbp - 376 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6193 EQU rbp - 380 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6196 EQU rbp - 384 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6199 EQU rbp - 388 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6202 EQU rbp - 392 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6208 EQU rbp - 396 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6211 EQU rbp - 400 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6222 EQU rbp - 404 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6225 EQU rbp - 408 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6228 EQU rbp - 412 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6231 EQU rbp - 416 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6234 EQU rbp - 420 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6237 EQU rbp - 424 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6240 EQU rbp - 428 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6243 EQU rbp - 432 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6246 EQU rbp - 436 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6249 EQU rbp - 440 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6252 EQU rbp - 444 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6255 EQU rbp - 448 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6258 EQU rbp - 452 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6261 EQU rbp - 456 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6264 EQU rbp - 460 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6267 EQU rbp - 464 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6270 EQU rbp - 468 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6273 EQU rbp - 472 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6276 EQU rbp - 476 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6279 EQU rbp - 480 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6282 EQU rbp - 484 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6285 EQU rbp - 488 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6288 EQU rbp - 492 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6291 EQU rbp - 496 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6294 EQU rbp - 500 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6297 EQU rbp - 504 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6300 EQU rbp - 508 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6303 EQU rbp - 512 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6307 EQU rbp - 516 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6310 EQU rbp - 520 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6313 EQU rbp - 524 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6316 EQU rbp - 528 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6319 EQU rbp - 532 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6322 EQU rbp - 536 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6325 EQU rbp - 540 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6328 EQU rbp - 544 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6331 EQU rbp - 548 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6334 EQU rbp - 552 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6337 EQU rbp - 556 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6340 EQU rbp - 560 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6343 EQU rbp - 564 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6347 EQU rbp - 568 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6352 EQU rbp - 572 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6355 EQU rbp - 576 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp6356 EQU rbp - 580 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  ip EQU rbp - 584 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 4 )
  opcode EQU rbp - 588 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 51 )
  spaceIdx EQU rbp - 592 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 624

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  xor eax, eax
  mov [codeObj + Variant_t.type], eax
  mov [code + Variant_t.type], eax
  mov [codeCnt + Variant_t.type], eax
  mov [comments + Variant_t.type], eax
  mov [txt + Variant_t.type], eax
  mov [tmp6178 + Variant_t.type], eax
  mov [tmp6190 + Variant_t.type], eax
  mov [tmp6205 + Variant_t.type], eax
  mov [tmp6306 + Variant_t.type], eax
  mov [tmp6346 + Variant_t.type], eax
  mov [tmp6350 + Variant_t.type], eax
  mov [tmp6351 + Variant_t.type], eax
  mov [item + Variant_t.type], eax
  mov [arg1 + Variant_t.type], eax
  mov [arg2 + Variant_t.type], eax
  mov [arg3 + Variant_t.type], eax
  mov [arg + Variant_t.type], eax
  mov [labelPrefix + Variant_t.type], eax
  mov [spacesCnt + Variant_t.type], eax
  mov [type + Variant_t.type], eax

  ; code
  ; ----

  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ codeObj ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ codeCnt ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal394 ]
  lea  r8 , [ comments ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromKey

  cmp [ tmp6178 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp6178 + Variant_t.value]
  mov dword [ commentsCnt ], eax

  mov dword [ commentIdx ], 0

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal137 ]
  call __MOLD_VariantMove

  mov dword [ tmp6179 ], 1

  cmp [ codeCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ codeCnt + Variant_t.value]
  mov dword [ tmp6180 ], eax

  mov dword [ ip ], 0

; 
; -----------------------------
; BEGIN: for ip in tmp6181 .. tmp6180
; 
l6182:

  mov eax, dword [ ip ]
  cmp eax, dword [ tmp6180 ]
  jge l6183

  lea  rcx , [ code ]
  lea  rdx , [ ip ]
  lea  r8 , [ item ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6184 ], 0

  lea  rcx , [ item ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  cmp [ tmp6178 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp6178 + Variant_t.value]
  mov dword [ opcode ], eax

  mov dword [ tmp6184 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 42 )
  lea rcx , [ tmp6178 ]
  push rdi
  lea  rdi , [ arg1 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  mov dword [ tmp6184 ], 2

  lea  rcx , [ item ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 42 )
  lea rcx , [ tmp6178 ]
  push rdi
  lea  rdi , [ arg2 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  mov dword [ tmp6184 ], 3

  lea  rcx , [ item ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 42 )
  lea rcx , [ tmp6178 ]
  push rdi
  lea  rdi , [ arg3 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ arg ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove

; 
; -----------------------------
; BEGIN: while
; 
l6185:

  mov dword [ tmp6187 ], 0

  mov eax, dword [ commentIdx ]
  cmp eax, dword [ commentsCnt ]
  jge l6188

  lea  rcx , [ comments ]
  lea  rdx , [ commentIdx ]
  lea  r8 , [ tmp6190 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6184 ], 0

  lea  rcx , [ tmp6190 ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov [ tmp6190 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp6190 + Variant_t.value], rax

  lea  rcx , [ tmp6178 ]
  lea  rdx , [ tmp6190 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp6187 ], eax

l6188:

  cmp dword [ tmp6187 ], 0
  jz l6186

  lea  rcx , [ comments ]
  lea  rdx , [ commentIdx ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6184 ], 1

  lea  rcx , [ tmp6178 ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6190 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [__fmt243 ]
  call __MOLD_PrintFormatFromMemory

  mov dword [ tmp6184 ], 1

  mov eax, dword [ commentIdx ]
  add eax, dword [ tmp6184 ]
  mov dword [ commentIdx ], eax

  jmp l6185

l6186:

; 
; END: while
; -----------------------------
; 
  mov dword [ tmp6184 ], 0

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6191

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal117 ]
  call __MOLD_VariantMove

  jmp l6192

l6191:

  mov dword [ tmp6184 ], 10

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6194

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1198 ]
  call __MOLD_VariantMove

  jmp l6195

l6194:

  mov dword [ tmp6184 ], 7

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6197

  mov dword [ tmp6184 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; __mold_syscall( 44 )
  lea rcx , [ tmp6178 ]
  push rdi
  lea  rdi , [ type ]
  call qword [rbx + 8 * 44 ]
  pop rdi

  lea rcx, [ type ]
  lea rdx, [ __literal160 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6200

  mov dword [ tmp6184 ], 0

  lea  rcx , [ arg ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6190 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6190 ]
  lea rdx, [ __literal466 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6203

  lea  rcx, [ tmp6205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1199 ]
  lea  rdx , [ arg ]
  lea  r8 , [ tmp6205 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6205 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6204

l6203:

  lea  rcx, [ tmp6205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1200 ]
  lea  rdx , [ arg ]
  lea  r8 , [ tmp6205 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6205 ]
  lea  rdx , [ __literal466 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

l6204:

  jmp l6201

l6200:

  lea rcx, [ type ]
  lea rdx, [ __literal304 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6206

  ; __mold_syscall( 42 )
  lea rcx , [ arg ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1201 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6207

l6206:

  lea rcx, [ type ]
  lea rdx, [ __literal302 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6209

  ; __mold_syscall( 42 )
  lea rcx , [ arg ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1202 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6210

l6209:

  lea rcx, [ type ]
  lea rdx, [ __literal303 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6212

  ; __mold_syscall( 42 )
  lea rcx , [ arg ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1203 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6213

l6212:

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal1204
  lea rcx , [ __literal1204 ]
  call qword [rbx + 8 * 41 ]

l6213:

l6210:

l6207:

l6201:

  jmp l6198

l6197:

  mov dword [ tmp6184 ], 8

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6214

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1205 ]
  call __MOLD_VariantMove

  jmp l6215

l6214:

  mov dword [ tmp6184 ], 9

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6216

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1206 ]
  call __MOLD_VariantMove

  jmp l6217

l6216:

  mov dword [ tmp6184 ], 1

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6218

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal596 ]
  call __MOLD_VariantMove

  jmp l6219

l6218:

  mov dword [ tmp6184 ], 2

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6220

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal597 ]
  call __MOLD_VariantMove

  jmp l6221

l6220:

  mov dword [ tmp6184 ], 49

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6223

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1207 ]
  call __MOLD_VariantMove

  jmp l6224

l6223:

  mov dword [ tmp6184 ], 4

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6226

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal600 ]
  call __MOLD_VariantMove

  jmp l6227

l6226:

  mov dword [ tmp6184 ], 3

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6229

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal599 ]
  call __MOLD_VariantMove

  jmp l6230

l6229:

  mov dword [ tmp6184 ], 5

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6232

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal601 ]
  call __MOLD_VariantMove

  jmp l6233

l6232:

  mov dword [ tmp6184 ], 6

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6235

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal602 ]
  call __MOLD_VariantMove

  jmp l6236

l6235:

  mov dword [ tmp6184 ], 11

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6238

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1208 ]
  call __MOLD_VariantMove

  jmp l6239

l6238:

  mov dword [ tmp6184 ], 12

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6241

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1209 ]
  call __MOLD_VariantMove

  jmp l6242

l6241:

  mov dword [ tmp6184 ], 15

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6244

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1210 ]
  call __MOLD_VariantMove

  jmp l6245

l6244:

  mov dword [ tmp6184 ], 16

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6247

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1211 ]
  call __MOLD_VariantMove

  jmp l6248

l6247:

  mov dword [ tmp6184 ], 13

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6250

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1212 ]
  call __MOLD_VariantMove

  jmp l6251

l6250:

  mov dword [ tmp6184 ], 14

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6253

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1213 ]
  call __MOLD_VariantMove

  jmp l6254

l6253:

  mov dword [ tmp6184 ], 35

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6256

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1214 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6257

l6256:

  mov dword [ tmp6184 ], 17

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6259

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1215 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6260

l6259:

  mov dword [ tmp6184 ], 21

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6262

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1216 ]
  call __MOLD_VariantMove

  jmp l6263

l6262:

  mov dword [ tmp6184 ], 22

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6265

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1217 ]
  call __MOLD_VariantMove

  jmp l6266

l6265:

  mov dword [ tmp6184 ], 18

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6268

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1218 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6269

l6268:

  mov dword [ tmp6184 ], 19

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6271

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1219 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6272

l6271:

  mov dword [ tmp6184 ], 20

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6274

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1220 ]
  call __MOLD_VariantMove

  jmp l6275

l6274:

  mov dword [ tmp6184 ], 24

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6277

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1221 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6278

l6277:

  mov dword [ tmp6184 ], 25

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6280

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1222 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6281

l6280:

  mov dword [ tmp6184 ], 26

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6283

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1223 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6284

l6283:

  mov dword [ tmp6184 ], 27

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6286

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1224 ]
  call __MOLD_VariantMove

  jmp l6287

l6286:

  mov dword [ tmp6184 ], 28

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6289

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1225 ]
  call __MOLD_VariantMove

  jmp l6290

l6289:

  mov dword [ tmp6184 ], 29

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6292

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1226 ]
  call __MOLD_VariantMove

  jmp l6293

l6292:

  mov dword [ tmp6184 ], 39

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6295

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1227 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6296

l6295:

  mov dword [ tmp6184 ], 40

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6298

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1228 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6299

l6298:

  mov dword [ tmp6184 ], 41

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6301

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1229 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6302

l6301:

  mov dword [ tmp6184 ], 42

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6304

  mov dword [ tmp6184 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6306 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp6306 ]
  lea  rdx , [ __literal573 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromKey

  ; __mold_syscall( 42 )
  lea rcx , [ tmp6178 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1230 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6305

l6304:

  mov dword [ tmp6184 ], 46

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6308

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1231 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6309

l6308:

  mov dword [ tmp6184 ], 43

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6311

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1232 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6312

l6311:

  mov dword [ tmp6184 ], 44

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6314

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1233 ]
  call __MOLD_VariantMove

  jmp l6315

l6314:

  mov dword [ tmp6184 ], 30

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6317

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1234 ]
  call __MOLD_VariantMove

  jmp l6318

l6317:

  mov dword [ tmp6184 ], 31

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6320

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1235 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6321

l6320:

  mov dword [ tmp6184 ], 32

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6323

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1236 ]
  call __MOLD_VariantMove

  jmp l6324

l6323:

  mov dword [ tmp6184 ], 33

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6326

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1237 ]
  call __MOLD_VariantMove

  jmp l6327

l6326:

  mov dword [ tmp6184 ], 37

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6329

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1238 ]
  lea  rdx , [ arg1 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6330

l6329:

  mov dword [ tmp6184 ], 36

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6332

  mov dword [ tmp6184 ], 1

  lea  rcx , [ item ]
  lea  rdx , [ tmp6184 ]
  lea  r8 , [ tmp6178 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp6178 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp6190 ]
  call  __MOLD_VariantLoadFromKey

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1239 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6333

l6332:

  mov dword [ tmp6184 ], 34

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6335

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1240 ]
  call __MOLD_VariantMove

  jmp l6336

l6335:

  mov dword [ tmp6184 ], 252

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6338

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1241 ]
  call __MOLD_VariantMove

  jmp l6339

l6338:

  mov dword [ tmp6184 ], 253

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6341

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1242 ]
  call __MOLD_VariantMove

  jmp l6342

l6341:

  mov dword [ tmp6184 ], 48

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6344

  ; __mold_syscall( 42 )
  lea rcx , [ arg1 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6346 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1243 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ tmp6346 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6346 ]
  lea  rdx , [ __literal423 ]
  lea  r8 , [ tmp6205 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ arg2 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6205 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6345

l6344:

  mov dword [ tmp6184 ], 101

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6348

  ; __mold_syscall( 42 )
  lea rcx , [ arg1 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6351 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1244 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ tmp6351 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6350 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6351 ]
  lea  rdx , [ __literal423 ]
  lea  r8 , [ tmp6350 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ arg2 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6346 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6350 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ tmp6346 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6346 ]
  lea  rdx , [ __literal423 ]
  lea  r8 , [ tmp6205 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ arg3 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6205 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6349

l6348:

  mov dword [ tmp6184 ], 100

  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp6184 ]
  jnz l6353

  ; __mold_syscall( 42 )
  lea rcx , [ arg1 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6351 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1245 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ tmp6351 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6350 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6351 ]
  lea  rdx , [ __literal423 ]
  lea  r8 , [ tmp6350 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ arg2 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6346 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6350 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ tmp6346 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6346 ]
  lea  rdx , [ __literal423 ]
  lea  r8 , [ tmp6205 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 42 )
  lea rcx , [ arg3 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6205 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin

  jmp l6354

l6353:

  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal137 ]
  call __MOLD_VariantMove

  mov [ tmp6178 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp6178 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp6178 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6346 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1197 ]
  lea  rdx , [ tmp6190 ]
  lea  r8 , [ tmp6346 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6346 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp6205 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp6205 ]
  call qword [rbx + 8 * 41 ]

l6354:

l6349:

l6345:

l6342:

l6339:

l6336:

l6333:

l6330:

l6327:

l6324:

l6321:

l6318:

l6315:

l6312:

l6309:

l6305:

l6302:

l6299:

l6296:

l6293:

l6290:

l6287:

l6284:

l6281:

l6278:

l6275:

l6272:

l6269:

l6266:

l6263:

l6260:

l6257:

l6254:

l6251:

l6248:

l6245:

l6242:

l6239:

l6236:

l6233:

l6230:

l6227:

l6224:

l6221:

l6219:

l6217:

l6215:

l6198:

l6195:

l6192:

  mov [ tmp6178 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp6178 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp6178 ]
  push rdi
  lea  rdi , [ tmp6190 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ labelPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6190 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ labelPrefix ]
  call  __MOLD_VariantStringJoin

  mov dword [ tmp6184 ], 5

  mov [ tmp6190 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6184 ]
  mov [ tmp6190 + Variant_t.value], rax

  ; __mold_syscall( 43 )
  lea rcx , [ labelPrefix ]
  push rdi
  lea  rdi , [ tmp6178 ]
  call qword [rbx + 8 * 43 ]
  pop rdi

  lea  rcx , [ tmp6190 ]
  lea  rdx , [ tmp6178 ]
  lea  r8 , [ spacesCnt ]
  call  __MOLD_VariantSub

  mov dword [ tmp6184 ], 1

  cmp [ spacesCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ spacesCnt + Variant_t.value]
  mov dword [ tmp6355 ], eax

  mov dword [ spaceIdx ], 0

; 
; -----------------------------
; BEGIN: for spaceIdx in tmp6356 .. tmp6355
; 
l6357:

  mov eax, dword [ spaceIdx ]
  cmp eax, dword [ tmp6355 ]
  jge l6358

  lea  rcx , [ labelPrefix ]
  lea  rdx , [ __literal328 ]
  lea  r8 , [ labelPrefix ]
  call  __MOLD_VariantStringJoin

  mov eax, dword [ spaceIdx ]
  add eax, dword [ tmp6184 ]
  mov dword [ spaceIdx ], eax

  jmp l6357

l6358:

; 
; END: for spaceIdx in tmp6356 .. tmp6355 step tmp6184
; -----------------------------
; 
  lea rcx, [__fmt244 ]
  call __MOLD_PrintFormatFromMemory

  mov eax, dword [ ip ]
  add eax, dword [ tmp6179 ]
  mov dword [ ip ], eax

  jmp l6182

l6183:

; 
; END: for ip in tmp6181 .. tmp6180 step tmp6179
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ comments ]
  call __MOLD_VariantDestroy
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6178 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6190 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6205 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6306 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6346 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6350 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6351 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx, [ spacesCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy

  add  rsp, 624
  pop  rbp
  ret


  restore this
  restore codeObj
  restore code
  restore codeCnt
  restore comments
  restore commentsCnt
  restore commentIdx
  restore txt
  restore tmp6178
  restore tmp6179
  restore tmp6180
  restore tmp6181
  restore tmp6184
  restore tmp6187
  restore tmp6189
  restore tmp6190
  restore tmp6193
  restore tmp6196
  restore tmp6199
  restore tmp6202
  restore tmp6205
  restore tmp6208
  restore tmp6211
  restore tmp6222
  restore tmp6225
  restore tmp6228
  restore tmp6231
  restore tmp6234
  restore tmp6237
  restore tmp6240
  restore tmp6243
  restore tmp6246
  restore tmp6249
  restore tmp6252
  restore tmp6255
  restore tmp6258
  restore tmp6261
  restore tmp6264
  restore tmp6267
  restore tmp6270
  restore tmp6273
  restore tmp6276
  restore tmp6279
  restore tmp6282
  restore tmp6285
  restore tmp6288
  restore tmp6291
  restore tmp6294
  restore tmp6297
  restore tmp6300
  restore tmp6303
  restore tmp6306
  restore tmp6307
  restore tmp6310
  restore tmp6313
  restore tmp6316
  restore tmp6319
  restore tmp6322
  restore tmp6325
  restore tmp6328
  restore tmp6331
  restore tmp6334
  restore tmp6337
  restore tmp6340
  restore tmp6343
  restore tmp6346
  restore tmp6347
  restore tmp6350
  restore tmp6351
  restore tmp6352
  restore tmp6355
  restore tmp6356
  restore ip
  restore item
  restore opcode
  restore arg1
  restore arg2
  restore arg3
  restore arg
  restore labelPrefix
  restore spacesCnt
  restore type
  restore spaceIdx

; -----------------------------------------------
; function BadUsageError
; -----------------------------------------------
BadUsageError:

  ; init frame
  ; ----------

  push rbp
  mov  rbp, rsp
  sub  rsp, 32


  ; code
  ; ----

  lea rcx, [__fmt245 ]
  call __MOLD_PrintFormatFromMemory

  ; __mold_syscall( 40 )
  call qword [rbx + 8 * 40 ]


  ; clean frame
  ; -----------

  add  rsp, 32
  pop  rbp
  ret



; -----------------------------------------------
; entry point
; -----------------------------------------------
; -----------------------------------------------
; function start
; -----------------------------------------------
start:

  ; init frame
  ; ----------
  mode EQU rbp - 24 ; 16 bytes, (kind= 1 , type= string , writeHits= 8 , readHits= 11 )
  path EQU rbp - 40 ; 16 bytes, (kind= 1 , type= string , writeHits= 2 , readHits= 2 )
  app EQU rbp - 56 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 35 )
  parser EQU rbp - 72 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  ast EQU rbp - 88 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 15 )
  tmp6360 EQU rbp - 104 ; 16 bytes, (kind= 1 , type= variant , writeHits= 47 , readHits= 47 )
  tmp6361 EQU rbp - 120 ; 16 bytes, (kind= 1 , type= variant , writeHits= 18 , readHits= 18 )
  tmp6370 EQU rbp - 136 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  tmp6436 EQU rbp - 152 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  tmp6437 EQU rbp - 168 ; 16 bytes, (kind= 1 , type= string , writeHits= 1 , readHits= 1 )
  astModuleResolver EQU rbp - 184 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  astSymbolsCollector EQU rbp - 200 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  astTranslator EQU rbp - 216 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 8 )
  code EQU rbp - 232 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  vm EQU rbp - 248 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 3 )
  mirQuadCollector EQU rbp - 264 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 4 )
  mirQuadOptimizer EQU rbp - 280 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  astPrinterText EQU rbp - 296 ; 16 bytes, (kind= 1 , type= variant , writeHits= 1 , readHits= 1 )
  codeGenerator EQU rbp - 312 ; 16 bytes, (kind= 1 , type= variant , writeHits= 2 , readHits= 2 )
  optimizationLevel EQU rbp - 316 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  isProfilerEnabled EQU rbp - 320 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 1 )
  tmp6371 EQU rbp - 324 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 2 , readHits= 2 )
  tmp6372 EQU rbp - 328 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  tmp6373 EQU rbp - 332 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 5 , readHits= 5 )
  tmp6376 EQU rbp - 336 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6379 EQU rbp - 340 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 2 , readHits= 2 )
  tmp6382 EQU rbp - 344 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 3 , readHits= 3 )
  tmp6385 EQU rbp - 348 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 6 , readHits= 6 )
  tmp6387 EQU rbp - 352 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 7 , readHits= 7 )
  tmp6392 EQU rbp - 356 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 5 , readHits= 5 )
  tmp6395 EQU rbp - 360 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6398 EQU rbp - 364 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6401 EQU rbp - 368 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6404 EQU rbp - 372 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6407 EQU rbp - 376 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6410 EQU rbp - 380 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6413 EQU rbp - 384 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6416 EQU rbp - 388 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6419 EQU rbp - 392 ; 4 bytes, (kind= 1 , type= bool32 , writeHits= 1 , readHits= 1 )
  tmp6420 EQU rbp - 396 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 1 )
  idx EQU rbp - 400 ; 4 bytes, (kind= 1 , type= int32 , writeHits= 1 , readHits= 18 )

  push rbp
  mov  rbp, rsp
  sub  rsp, 432

  xor eax, eax
  mov [mode + Variant_t.type], eax
  mov [path + Variant_t.type], eax
  mov [app + Variant_t.type], eax
  mov [parser + Variant_t.type], eax
  mov [ast + Variant_t.type], eax
  mov [tmp6360 + Variant_t.type], eax
  mov [tmp6361 + Variant_t.type], eax
  mov [tmp6370 + Variant_t.type], eax
  mov [tmp6436 + Variant_t.type], eax
  mov [tmp6437 + Variant_t.type], eax
  mov [astModuleResolver + Variant_t.type], eax
  mov [astSymbolsCollector + Variant_t.type], eax
  mov [astTranslator + Variant_t.type], eax
  mov [code + Variant_t.type], eax
  mov [vm + Variant_t.type], eax
  mov [mirQuadCollector + Variant_t.type], eax
  mov [mirQuadOptimizer + Variant_t.type], eax
  mov [astPrinterText + Variant_t.type], eax
  mov [codeGenerator + Variant_t.type], eax

  mov [SYMBOL_KIND_AS_TEXT + Variant_t.type], VARIANT_UNDEFINED
  mov [MOLD_SYSCALL_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [MOLD_TYPE_ID_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [MIR_TO_VARIANT_TYPE_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [MIR_TYPE_SIZE_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_dataStack + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_locals + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_heap + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_paramBaseStack + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_retValStack + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----

  mov dword [ DEBUG_AST_OPTIMIZER ], 0

  mov dword [ DEBUG_MOLD ], 0

  mov dword [ SCANERLESS_MODE_ENABLED ], 0

  mov dword [ NodeId ], 0

  lea  rcx, [ SYMBOL_KIND_AS_TEXT ]
  call __MOLD_VariantDestroy
  lea  rcx , [ SYMBOL_KIND_AS_TEXT ]
  lea  rdx , [ __const6359 ]
  call  __MOLD_VariantArrayCreateFromInitList

  mov dword [ SymbolTable_NextId ], 0

  lea  rcx, [ MOLD_SYSCALL_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ MOLD_SYSCALL_MAP ]
  lea  rdx , [ __const6362 ]
  lea  r8 , [ __const6363 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ MOLD_TYPE_ID_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ MOLD_TYPE_ID_MAP ]
  lea  rdx , [ __const6364 ]
  lea  r8 , [ __const6365 ]
  call  __MOLD_VariantMapCreateFromInitList

  mov dword [ DEBUG_MOLD ], 0

  lea  rcx, [ MIR_TO_VARIANT_TYPE_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ MIR_TO_VARIANT_TYPE_MAP ]
  lea  rdx , [ __const6366 ]
  lea  r8 , [ __const6367 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ MIR_TYPE_SIZE_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx , [ MIR_TYPE_SIZE_MAP ]
  lea  rdx , [ __const6368 ]
  lea  r8 , [ __const6369 ]
  call  __MOLD_VariantMapCreateFromInitList

  lea  rcx, [ _vm_dataStack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_dataStack ]
  call  __MOLD_VariantArrayCreate

  mov [ tmp6361 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6361 + Variant_t.value], 0

  lea  rcx, [ tmp6360 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6360 ]
  call  __MOLD_VariantArrayCreate

  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ tmp6361 ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantStoreAtIndex

  mov dword [ tmp6371 ], 0

  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ tmp6371 ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx, [ _vm_heap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_heap ]
  call  __MOLD_VariantArrayCreate

  mov dword [ _vm_deepIdx ], 0

  lea  rcx, [ _vm_paramBaseStack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_paramBaseStack ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ _vm_retValStack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_retValStack ]
  call  __MOLD_VariantArrayCreate

  lea  rcx, [ VERSION_STRING ]
  call __MOLD_VariantDestroy
  lea rcx, [ VERSION_STRING ]
  lea rdx, [ __literal1246 ]
  call __MOLD_VariantMove

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1250 ]
  call __MOLD_VariantMove

  lea  rcx, [ path ]
  call __MOLD_VariantDestroy
  lea rcx, [ path ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove

  mov dword [ optimizationLevel ], 0

  mov dword [ isProfilerEnabled ], 0

  mov dword [ tmp6371 ], 1

  cmp [ argc + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ argc + Variant_t.value]
  mov dword [ tmp6372 ], eax

  mov dword [ idx ], 1

; 
; -----------------------------
; BEGIN: for idx in tmp6373 .. tmp6372
; 
l6374:

  mov eax, dword [ idx ]
  cmp eax, dword [ tmp6372 ]
  jge l6375

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1251 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6377

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1252 ]
  call __MOLD_VariantMove

  lea rcx, [__fmt246 ]
  call __MOLD_PrintFormatFromMemory

  ; __mold_syscall( 40 )
  call qword [rbx + 8 * 40 ]

  jmp l6378

l6377:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1255 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6380

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1256 ]
  call __MOLD_VariantMove

  jmp l6381

l6380:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1257 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6383

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1258 ]
  call __MOLD_VariantMove

  jmp l6384

l6383:

  mov dword [ tmp6385 ], 1

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1259 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l6386

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea  rcx , [ tmp6360 ]
  lea  rdx , [ __literal1260 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp6385 ], eax

l6386:

  cmp dword [ tmp6385 ], 0
  jz l6388

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1261 ]
  call __MOLD_VariantMove

  jmp l6389

l6388:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1262 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6390

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1263 ]
  call __MOLD_VariantMove

  jmp l6391

l6390:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1264 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6393

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1265 ]
  call __MOLD_VariantMove

  jmp l6394

l6393:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1266 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6396

  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1267 ]
  call __MOLD_VariantMove

  jmp l6397

l6396:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1268 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l6399

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1269 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6402

  mov dword [ DEBUG_AST_OPTIMIZER ], 1

  mov dword [ DEBUG_MOLD ], 1

  jmp l6403

l6402:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1270 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6405

  mov dword [ optimizationLevel ], 0

  jmp l6406

l6405:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1271 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6408

  mov dword [ optimizationLevel ], 1

  jmp l6409

l6408:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1272 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6411

  mov dword [ optimizationLevel ], 2

  jmp l6412

l6411:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1273 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6414

  mov dword [ optimizationLevel ], 3

  jmp l6415

l6414:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal1274 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6417

  mov dword [ isProfilerEnabled ], 1

  jmp l6418

l6417:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6361 ]
  call  __MOLD_VariantLoadFromIndex_int32

  mov dword [ tmp6420 ], 0

  lea  rcx , [ tmp6361 ]
  lea  rdx , [ tmp6420 ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantLoadFromIndex_int32

  lea rcx, [ tmp6360 ]
  lea rdx, [ __literal88 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6421

  call  BadUsageError

  jmp l6422

l6421:

  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ path ]
  call  __MOLD_VariantLoadFromIndex_int32

l6422:

l6418:

l6415:

l6412:

l6409:

l6406:

l6403:

l6399:

l6400:

l6397:

l6394:

l6391:

l6389:

l6384:

l6381:

l6378:

  mov eax, dword [ idx ]
  add eax, dword [ tmp6371 ]
  mov dword [ idx ], eax

  jmp l6374

l6375:

; 
; END: for idx in tmp6373 .. tmp6372 step tmp6371
; -----------------------------
; 
  lea rcx, [ path ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6423

  call  BadUsageError

l6423:

l6424:

  lea  rcx, [ app ]
  call __MOLD_VariantDestroy
  lea  rcx, [ app ]
  lea  rdx, [vtable_AppMold]
  call __MOLD_VariantObjectCreate

  lea rcx , [ app ]
  lea  rax , [ tmp6360 ]
  call  __AppMold_constructor$0

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1275
  lea rdx , [ __literal1275 ]
  call  __AppMold_logDebug$1

  lea  rcx, [ parser ]
  call __MOLD_VariantDestroy
  lea  rcx, [ parser ]
  lea  rdx, [vtable_Parser]
  call __MOLD_VariantObjectCreate

  lea rcx , [ parser ]
  lea  rax , [ tmp6360 ]
  call  __Parser_constructor$0

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1276
  lea rdx , [ __literal1276 ]
  call  __AppMold_logDebug$1

  lea rcx , [ parser ]
  lea rdx , [ path ]
  lea  rax , [ ast ]
  call  __Parser_parseFile$1

  lea rcx, [ mode ]
  lea rdx, [ __literal1263 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6425

  lea rcx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 169
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6921
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6921:


  jmp l6426

l6425:

  lea rcx, [ mode ]
  lea rdx, [ __literal1265 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6427

  ; __mold_syscall( 41 )
; WARNING: Failed to get variable size: __literal1277
  lea rcx , [ __literal1277 ]
  call qword [rbx + 8 * 41 ]

  jmp l6428

l6427:

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1278
  lea rdx , [ __literal1278 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ astModuleResolver ]
  call  __AppMold_getAstModuleResolver$0

  lea rcx , [ astModuleResolver ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 170
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6922
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6922:


  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1279
  lea rdx , [ __literal1279 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 171
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6923
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6923:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6924
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6924:


  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1280
  lea rdx , [ __literal1280 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ astSymbolsCollector ]
  call  __AppMold_getAstSymbolsCollector$0

  lea rcx , [ astSymbolsCollector ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 173
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6925
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6925:


  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1281
  lea rdx , [ __literal1281 ]
  call  __AppMold_logDebug$1

  mov dword [ tmp6373 ], 0

  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6373 ]
  jnz l6429

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1282
  lea rdx , [ __literal1282 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 174
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6926
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6926:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6927
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6927:


  jmp l6430

l6429:

  mov dword [ tmp6373 ], 1

  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6373 ]
  jnz l6431

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1283
  lea rdx , [ __literal1283 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 175
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6928
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6928:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6929
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6929:


  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1282
  lea rdx , [ __literal1282 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 174
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6930
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6930:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6931
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6931:


  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1284
  lea rdx , [ __literal1284 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 176
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6932
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6932:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6933
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6933:


  mov dword [ tmp6387 ], 1

  lea rcx, [ mode ]
  lea rdx, [ __literal1258 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l6433

  lea  rcx , [ mode ]
  lea  rdx , [ __literal1250 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp6387 ], eax

l6433:

  cmp dword [ tmp6387 ], 0
  jz l6434

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1285
  lea rdx , [ __literal1285 ]
  call  __AppMold_logDebug$1

  jmp l6435

l6434:

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1286
  lea rdx , [ __literal1286 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 177
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6934
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6934:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6935
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6935:


l6435:

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1287
  lea rdx , [ __literal1287 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 178
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6936
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6936:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6937
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6937:


  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1288
  lea rdx , [ __literal1288 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 179
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6938
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6938:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6939
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6939:


  jmp l6432

l6431:

  mov [ tmp6361 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ optimizationLevel ]
  mov [ tmp6361 + Variant_t.value], rax

  ; __mold_syscall( 42 )
  lea rcx , [ tmp6361 ]
  push rdi
  lea  rdi , [ tmp6360 ]
  call qword [rbx + 8 * 42 ]
  pop rdi

  lea  rcx, [ tmp6437 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1289 ]
  lea  rdx , [ tmp6360 ]
  lea  r8 , [ tmp6437 ]
  call  __MOLD_VariantStringJoin

  lea  rcx, [ tmp6436 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6437 ]
  lea  rdx , [ __literal1290 ]
  lea  r8 , [ tmp6436 ]
  call  __MOLD_VariantStringJoin

  ; __mold_syscall( 41 )
  lea rcx , [ tmp6436 ]
  call qword [rbx + 8 * 41 ]

l6432:

l6430:

  mov dword [ tmp6382 ], 1

  lea rcx, [ mode ]
  lea rdx, [ __literal1258 ]
  call __MOLD_VariantCompareEQ
  test al, al
  jnz l6438

  lea  rcx , [ mode ]
  lea  rdx , [ __literal1250 ]
  call  __MOLD_VariantCompareEQ
  mov [ tmp6382 ], eax

l6438:

  cmp dword [ tmp6382 ], 0
  jz l6439

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1291
  lea rdx , [ __literal1291 ]
  call  __AppMold_logDebug$1

  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTranslator ]
  lea  rdx, [vtable_ASTTranslatorMIR0]
  call __MOLD_VariantObjectCreate

  lea rcx , [ astTranslator ]
  lea rdx , [ app ]
  lea  rax , [ tmp6360 ]
  call  __ASTTranslatorMIR0_constructor$1

  lea rcx , [ astTranslator ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 180
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6940
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6940:


  lea  rcx , [ astTranslator ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1292
  lea rdx , [ __literal1292 ]
  call  __AppMold_logDebug$1

  lea  rcx, [ vm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vm ]
  lea  rdx, [vtable_VMachineStack]
  call __MOLD_VariantObjectCreate

  lea rcx , [ vm ]
  lea  rax , [ tmp6360 ]
  call  __VMachineStack_constructor$0

  lea rcx , [ vm ]
  lea rdx , [ code ]
  call  __VMachineStack_loadCode$1

  lea rcx, [ mode ]
  lea rdx, [ __literal1258 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6441

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1293
  lea rdx , [ __literal1293 ]
  call  __AppMold_logDebug$1

  lea rcx , [ vm ]
  call  __VMachineStack_dumpCode$0

  jmp l6442

l6441:

  lea rcx, [ mode ]
  lea rdx, [ __literal1250 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6443

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1294
  lea rdx , [ __literal1294 ]
  call  __AppMold_logDebug$1

  lea rcx , [ vm ]
  call  __VMachineStack_run$0

l6443:

l6444:

l6442:

  jmp l6440

l6439:

  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTranslator ]
  lea  rdx, [vtable_ASTTranslatorMIR1]
  call __MOLD_VariantObjectCreate

  lea rcx , [ astTranslator ]
  lea rdx , [ app ]
  lea  rax , [ tmp6360 ]
  call  __ASTTranslatorMIR1_constructor$1

  lea  rcx, [ mirQuadCollector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadCollector ]
  lea  rdx, [vtable_MIRQuadCollector]
  call __MOLD_VariantObjectCreate

  lea rcx , [ mirQuadCollector ]
  lea  rax , [ tmp6360 ]
  call  __MIRQuadCollector_constructor$0

  lea  rcx, [ mirQuadOptimizer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadOptimizer ]
  lea  rdx, [vtable_MIRQuadOptimizer]
  call __MOLD_VariantObjectCreate

  lea rcx , [ mirQuadOptimizer ]
  lea  rax , [ tmp6360 ]
  call  __MIRQuadOptimizer_constructor$0

  lea rcx, [ mode ]
  lea rdx, [ __literal1267 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6445

  lea  rcx, [ astPrinterText ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astPrinterText ]
  lea  rdx, [vtable_ASTPrinterText]
  call __MOLD_VariantObjectCreate

  lea rcx , [ astPrinterText ]
  lea rdx , [ ast ]
  call  __ASTPrinterText_printNode$1

  jmp l6446

l6445:

  mov dword [ tmp6373 ], 0

  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6373 ]
  jnz l6447

  lea rcx , [ astTranslator ]
  lea rdx , [ mirQuadCollector ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 181
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6941
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6941:


  jmp l6448

l6447:

  mov dword [ tmp6373 ], 1

  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6373 ]
  jnz l6449

  lea rcx , [ astTranslator ]
  lea rdx , [ mirQuadOptimizer ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 181
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6942
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6942:


  lea rcx , [ tmp6361 ]
  lea rdx , [ mirQuadCollector ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 181
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6943
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6943:


l6449:

l6450:

l6448:

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1295
  lea rdx , [ __literal1295 ]
  call  __AppMold_logDebug$1

  lea rcx , [ app ]
  lea  rax , [ tmp6361 ]
  mov  r10d, 182
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6944
  movsxd rax, dword [ tmp6361 + Variant_t.value ]
  mov    qword [ tmp6361 + Variant_t.value ], rax
l6944:


  lea rcx , [ tmp6361 ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 172
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6945
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6945:


  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1296
  lea rdx , [ __literal1296 ]
  call  __AppMold_logDebug$1

  lea rcx , [ astTranslator ]
  lea rdx , [ ast ]
  lea  rax , [ tmp6360 ]
  mov  r10d, 180
  call __MOLD_VCall

  ; 32-bit int sign extend after vcall if needed.
  jns l6946
  movsxd rax, dword [ tmp6360 + Variant_t.value ]
  mov    qword [ tmp6360 + Variant_t.value ], rax
l6946:


  lea rcx, [ mode ]
  lea rdx, [ __literal1261 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6451

  lea rcx , [ mirQuadCollector ]
  call  __MIRQuadCollector_printQuads$0

  jmp l6452

l6451:

  lea rcx, [ mode ]
  lea rdx, [ __literal1256 ]
  call __MOLD_VariantCompareNE
  test al, al
  jnz l6453

  lea  rcx , [ astTranslator ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey

  lea rcx , [ mirQuadCollector ]
  lea  rax , [ tmp6360 ]
  call  __MIRQuadCollector_getQuads$0

  lea  rcx , [ code ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ app ]
  lea  rax , [ tmp6360 ]
  call  __AppMold_getSymbolTable$0

  lea  rcx , [ code ]
  lea  rdx , [ __literal222 ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ app ]
; WARNING: Failed to get variable size: __literal1297
  lea rdx , [ __literal1297 ]
  call  __AppMold_logDebug$1

  lea  rcx, [ codeGenerator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeGenerator ]
  lea  rdx, [vtable_CodeGeneratorX64]
  call __MOLD_VariantObjectCreate

  lea rcx , [ codeGenerator ]
  lea  rax , [ tmp6360 ]
  call  __CodeGeneratorX64_constructor$0

  mov eax, dword [ isProfilerEnabled ]
  mov [ tmp6360 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp6360 + Variant_t.value], rax

  lea  rcx , [ codeGenerator ]
  lea  rdx , [ __literal680 ]
  lea  r8 , [ tmp6360 ]
  call  __MOLD_VariantStoreAtKey

  lea rcx , [ codeGenerator ]
  lea rdx , [ code ]
  call  __CodeGeneratorX64_run$1

  jmp l6454

l6453:

  call  BadUsageError

l6454:

l6452:

l6446:

l6440:

l6428:

l6426:


  ; clean frame
  ; -----------
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ path ]
  call __MOLD_VariantDestroy
  lea  rcx, [ app ]
  call __MOLD_VariantDestroy
  lea  rcx, [ parser ]
  call __MOLD_VariantDestroy
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6360 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6361 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6370 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6436 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6437 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astModuleResolver ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astSymbolsCollector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadCollector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadOptimizer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astPrinterText ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeGenerator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ argv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ argc ]
  call __MOLD_VariantDestroy
  lea  rcx, [ SYMBOL_KIND_AS_TEXT ]
  call __MOLD_VariantDestroy
  lea  rcx, [ MOLD_SYSCALL_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ MOLD_TYPE_ID_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ MIR_TO_VARIANT_TYPE_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ MIR_TYPE_SIZE_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_dataStack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_heap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_paramBaseStack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_retValStack ]
  call __MOLD_VariantDestroy

  add  rsp, 432
  pop  rbp
  ret


  restore mode
  restore path
  restore optimizationLevel
  restore isProfilerEnabled
  restore app
  restore parser
  restore ast
  restore tmp6360
  restore tmp6361
  restore tmp6370
  restore tmp6371
  restore tmp6372
  restore tmp6373
  restore tmp6376
  restore tmp6379
  restore tmp6382
  restore tmp6385
  restore tmp6387
  restore tmp6392
  restore tmp6395
  restore tmp6398
  restore tmp6401
  restore tmp6404
  restore tmp6407
  restore tmp6410
  restore tmp6413
  restore tmp6416
  restore tmp6419
  restore tmp6420
  restore idx
  restore tmp6436
  restore tmp6437
  restore astModuleResolver
  restore astSymbolsCollector
  restore astTranslator
  restore code
  restore vm
  restore mirQuadCollector
  restore mirQuadOptimizer
  restore astPrinterText
  restore codeGenerator


endOfCodeSection:
; ------------------------------------------------------------------------------
;                                 Data section
; ------------------------------------------------------------------------------
section '.data' data readable writeable
include 'x64\CommonData.asm'


; Global vars
; -----------
NodeId  dd 0
SCANERLESS_MODE_ENABLED  dd 0
SymbolTable_NextId  dd 0
DEBUG_AST_OPTIMIZER  dd 0
MOLD_SYSCALL_MAP  Variant_t 0, 0, 0
MOLD_TYPE_ID_MAP  Variant_t 0, 0, 0
DEBUG_MOLD  dd 0
SYMBOL_KIND_AS_TEXT  Variant_t 0, 0, 0
MIR_TO_VARIANT_TYPE_MAP  Variant_t 0, 0, 0
MIR_TYPE_SIZE_MAP  Variant_t 0, 0, 0
_vm_dataStack  Variant_t 0, 0, 0
_vm_locals  Variant_t 0, 0, 0
_vm_heap  Variant_t 0, 0, 0
_vm_deepIdx  dd 0
_vm_paramBaseStack  Variant_t 0, 0, 0
_vm_retValStack  Variant_t 0, 0, 0
VERSION_STRING  Variant_t 0, 0, 0
; ------------------------------------------------------------------------------
;                     Constant (read-only) data section
; ------------------------------------------------------------------------------
section '.rdata' data readable
  dq ?

; Encoded print formats
; ---------------------
__fmt0:
  db FMT_LOCAL_string
  dw - 56
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  "#"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 88
  db FMT_LOCAL_variant
  dw - 104
  db FMT_LOCAL_variant
  dw - 120
  db FMT_TERMINATOR

__fmt1:
  db FMT_LOCAL_string
  dw - 56
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  "#"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 120
  db FMT_LOCAL_variant
  dw - 104
  db FMT_TERMINATOR

__fmt2:
  db FMT_TEXT8, 34 ,  "----------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 21 ,  " Abstract Syntax Tree"
  db FMT_EOL
  db FMT_TEXT8, 34 ,  "----------------------------------"
  db FMT_TERMINATOR

__fmt3:
  db FMT_TEXT8, 23 ,  "[ ASTSymbolsCollector ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt4:
  db FMT_TEXT8, 16 ,  "[ ASTEvaluator ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt5:
  db FMT_TEXT8, 19 ,  "[ ASTPreprocessor ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt6:
  db FMT_TEXT8, 22 ,  "[ ASTConstantFolding ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt7:
  db FMT_TEXT8, 19 ,  "[ ASTOptimizerCSE ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt8:
  db FMT_TEXT8, 30 ,  "[ ASTOptimizerDeadCodeRemove ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt9:
  db FMT_TEXT8, 21 ,  "[ ASTOptimizerVCall ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt10:
  db FMT_TEXT8, 18 ,  "[ ASTOptimizerIf ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt11:
  db FMT_TEXT8, 22 ,  "[ ASTOptimizerInline ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt12:
  db FMT_TEXT8, 15 ,  "[ ASTTypeCast ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt13:
  db FMT_TEXT8, 11 ,  "[ AppMold ]"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt14:
  db FMT_TERMINATOR

__fmt15:
  db FMT_LOCAL_variant
  dw - 168
  db FMT_TERMINATOR

__fmt16:
  db FMT_LOCAL_variant
  dw - 216
  db FMT_TERMINATOR

__fmt17:
  db FMT_TEXT8, 2 ,  "{}"
  db FMT_TERMINATOR

__fmt18:
  db FMT_TEXT8, 5 ,  "[map]"
  db FMT_TERMINATOR

__fmt19:
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 6 ,  " const"
  db FMT_LOCAL_variant
  dw - 232
  db FMT_TEXT8, 1 ,  "="
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TERMINATOR

__fmt20:
  db FMT_TEXT8, 8 ,  "endclass"
  db FMT_TERMINATOR

__fmt21:
  db FMT_TEXT8, 3 ,  " ->"
  db FMT_LOCAL_variant
  dw - 216
  db FMT_TERMINATOR

__fmt22:
  db FMT_LOCAL_variant
  dw - 40
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 9 ,  "endmethod"
  db FMT_TERMINATOR

__fmt23:
  db FMT_LOCAL_variant
  dw - 40
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 11 ,  "endfunction"
  db FMT_TERMINATOR

__fmt24:
  db FMT_TEXT8, 4 ,  "else"
  db FMT_TERMINATOR

__fmt25:
  db FMT_LOCAL_variant
  dw - 40
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 5 ,  "endif"
  db FMT_TERMINATOR

__fmt26:
  db FMT_LOCAL_variant
  dw - 40
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 11 ,  "  otherwise"
  db FMT_TERMINATOR

__fmt27:
  db FMT_LOCAL_variant
  dw - 40
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 9 ,  "endswitch"
  db FMT_TERMINATOR

__fmt28:
  db FMT_TEXT8, 18 ,  "<table border=", 34, "1", 34, ">"
  db FMT_EOL
  db FMT_TEXT8, 136 ,  "<tr><th>var</th><th>write</th><th>read</th><th>init value</th><th>kind</th><th>data type</th><th>loop level</th><th>class name</th></tr>"
  db FMT_TERMINATOR

__fmt29:
  db FMT_TEXT8, 4 ,  "<tr>"
  db FMT_TERMINATOR

__fmt30:
  db FMT_TEXT8, 4 ,  "<td>"
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 5 ,  "</td>"
  db FMT_TERMINATOR

__fmt31:
  db FMT_TEXT8, 4 ,  "<td>"
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 5 ,  "</td>"
  db FMT_EOL
  db FMT_TEXT8, 4 ,  "<td>"
  db FMT_LOCAL_string
  dw - 168
  db FMT_TEXT8, 5 ,  "</td>"
  db FMT_TERMINATOR

__fmt32:
  db FMT_TEXT8, 4 ,  "<td>"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 104
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 5 ,  "</td>"
  db FMT_TERMINATOR

__fmt33:
  db FMT_TEXT8, 10 ,  "<td>-</td>"
  db FMT_TERMINATOR

__fmt34:
  db FMT_TEXT8, 5 ,  "</tr>"
  db FMT_TERMINATOR

__fmt35:
  db FMT_TEXT8, 8 ,  "</table>"
  db FMT_TERMINATOR

__fmt36:
  db FMT_TEXT8, 33 ,  "<table style=", 34, "border: solid 1px", 34, ">"
  db FMT_TERMINATOR

__fmt37:
  db FMT_TEXT8, 9 ,  "<tr><td>#"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 3 ,  "<b>"
  db FMT_LOCAL_string
  dw - 88
  db FMT_TEXT8, 14 ,  "</b></td></tr>"
  db FMT_TERMINATOR

__fmt38:
  db FMT_TEXT8, 18 ,  "<tr><td><small><i>"
  db FMT_LOCAL_variant
  dw - 104
  db FMT_TEXT8, 22 ,  "</i></small></td></tr>"
  db FMT_TERMINATOR

__fmt39:
  db FMT_TEXT8, 49 ,  "<tr><td><small>has side effects</small></td></tr>"
  db FMT_TERMINATOR

__fmt40:
  db FMT_TEXT8, 8 ,  "<tr><td>"
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 10 ,  "</td></tr>"
  db FMT_TERMINATOR

__fmt41:
  db FMT_TEXT8, 8 ,  "<tr><td>"
  db FMT_TERMINATOR

__fmt42:
  db FMT_TEXT8, 10 ,  "</td></tr>"
  db FMT_TERMINATOR

__fmt43:
  db FMT_TEXT8, 8 ,  "<tr><td>"
  db FMT_LOCAL_variant
  dw - 232
  db FMT_TEXT8, 10 ,  "</td></tr>"
  db FMT_TERMINATOR

__fmt44:
  db FMT_TEXT8, 12 ,  "<tr><td><i>("
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 120
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 15 ,  ")</i></td></tr>"
  db FMT_TERMINATOR

__fmt45:
  db FMT_TEXT8, 4 ,  "<td>"
  db FMT_TERMINATOR

__fmt46:
  db FMT_TEXT8, 5 ,  "</td>"
  db FMT_TERMINATOR

__fmt47:
  db FMT_TEXT8, 12 ,  "<tr><td><hr>"
  db FMT_TERMINATOR

__fmt48:
  db FMT_TEXT8, 1 ,  "@"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 248
  db FMT_TEXT8, 4 ,  "<br>"
  db FMT_TERMINATOR

__fmt49:
  db FMT_TEXT8, 1 ,  "?"
  db FMT_TERMINATOR

__fmt50:
  db FMT_TEXT8, 1 ,  "@"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 248
  db FMT_TERMINATOR

__fmt51:
  db FMT_TEXT8, 12 ,  "<html><body>"
  db FMT_TERMINATOR

__fmt52:
  db FMT_TEXT8, 14 ,  "</body></html>"
  db FMT_TERMINATOR

__fmt53:
  db FMT_TEXT8, 5 ,  "    ;"
  db FMT_LOCAL_variant
  dw - 40
  db FMT_LOCAL_variant
  dw - 56
  db FMT_LOCAL_variant
  dw - 72
  db FMT_LOCAL_variant
  dw - 88
  db FMT_LOCAL_variant
  dw - 104
  db FMT_TERMINATOR

__fmt54:
  db FMT_TEXT8, 4 ,  "proc"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TERMINATOR

__fmt55:
  db FMT_TEXT8, 14 ,  "    init_frame"
  db FMT_TERMINATOR

__fmt56:
  db FMT_TEXT8, 4 ,  "endp"
  db FMT_TERMINATOR

__fmt57:
  db FMT_TEXT8, 1 ,  ";"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TERMINATOR

__fmt58:
  db FMT_LOCAL_variant
  dw - 56
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  ":"
  db FMT_TERMINATOR

__fmt59:
  db FMT_TEXT8, 3 ,  "   "
  db FMT_LOCAL_string
  dw - 72
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TERMINATOR

__fmt60:
  db FMT_TEXT8, 3 ,  "   "
  db FMT_LOCAL_string
  dw - 72
  db FMT_LOCAL_string
  dw - 88
  db FMT_LOCAL_string
  dw - 120
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TERMINATOR

__fmt61:
  db FMT_TEXT8, 3 ,  "   "
  db FMT_LOCAL_variant
  dw - 232
  db FMT_LOCAL_variant
  dw - 248
  db FMT_LOCAL_variant
  dw - 264
  db FMT_LOCAL_variant
  dw - 280
  db FMT_TERMINATOR

__fmt62:
  db FMT_TEXT8, 6 ,  "  lea "
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 3 ,  ", ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt63:
  db FMT_TEXT8, 6 ,  "  push"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt64:
  db FMT_TEXT8, 5 ,  "  pop"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt65:
  db FMT_TEXT8, 6 ,  "  mov "
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 1 ,  ","
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TERMINATOR

__fmt66:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 2 ,  "],"
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TERMINATOR

__fmt67:
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 2 ,  "],"
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TERMINATOR

__fmt68:
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 2 ,  "],"
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TERMINATOR

__fmt69:
  db FMT_TEXT8, 7 ,  "  call "
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt70:
  db FMT_TEXT8, 12 ,  "  lea rcx, ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  lea rdx, ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 25 ,  "  call __MOLD_VariantMove"
  db FMT_TERMINATOR

__fmt71:
  db FMT_TEXT8, 13 ,  "  lea  rcx, ["
  db FMT_LOCAL_string
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 28 ,  "  call __MOLD_VariantDestroy"
  db FMT_TERMINATOR

__fmt72:
  db FMT_TEXT8, 39 ,  "; WARNING: Failed to get variable size:"
  db FMT_LOCAL_string
  dw - 40
  db FMT_TERMINATOR

__fmt73:
  db FMT_TEXT8, 5 ,  "  mov"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 9 ,  ", dword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt74:
  db FMT_TEXT8, 5 ,  "  mov"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 9 ,  ", qword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt75:
  db FMT_TEXT8, 5 ,  "  lea"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 3 ,  ", ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt76:
  db FMT_TEXT8, 19 ,  "  mov  eax, dword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  push rax"
  db FMT_TERMINATOR

__fmt77:
  db FMT_TEXT8, 14 ,  "  push qword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt78:
  db FMT_TEXT8, 12 ,  "  lea rax, ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  push rax"
  db FMT_TERMINATOR

__fmt79:
  db FMT_TEXT8, 29 ,  "  ; skipped unused call param"
  db FMT_TERMINATOR

__fmt80:
  db FMT_TEXT8, 30 ,  "; Reuse already emitted buffer"
  db FMT_TERMINATOR

__fmt81:
  db FMT_LOCAL_string
  dw - 40
  db FMT_TEXT8, 29 ,  "Variant_t VARIANT_INTEGER, 0,"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TERMINATOR

__fmt82:
  db FMT_LOCAL_string
  dw - 40
  db FMT_TEXT8, 28 ,  "Variant_t VARIANT_DOUBLE, 0,"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TERMINATOR

__fmt83:
  db FMT_LOCAL_string
  dw - 40
  db FMT_TEXT8, 28 ,  "Variant_t VARIANT_STRING, 0,"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TERMINATOR

__fmt84:
  db FMT_LOCAL_string
  dw - 40
  db FMT_TEXT8, 27 ,  "Variant_t VARIANT_ARRAY, 0,"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TERMINATOR

__fmt85:
  db FMT_LOCAL_string
  dw - 40
  db FMT_TEXT8, 29 ,  "Variant_t VARIANT_BOOLEAN, 0,"
  db FMT_LOCAL_string
  dw - 184
  db FMT_TERMINATOR

__fmt86:
  db FMT_LOCAL_string
  dw - 40
  db FMT_TEXT8, 33 ,  "Variant_t VARIANT_UNDEFINED, 0, 0"
  db FMT_TERMINATOR

__fmt87:
  db FMT_LOCAL_string
  dw - 152
  db FMT_TEXT8, 8 ,  "Buffer_t"
  db FMT_LOCAL_variant
  dw - 104
  db FMT_TEXT8, 8 ,  ", -1, 0,"
  db FMT_LOCAL_string
  dw - 168
  db FMT_TERMINATOR

__fmt88:
  db FMT_LOCAL_string
  dw - 136
  db FMT_TEXT8, 12 ,  "StringHead_t"
  db FMT_LOCAL_variant
  dw - 120
  db FMT_EOL
  db FMT_TEXT8, 4 ,  " db "
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 3 ,  ", 0"
  db FMT_TERMINATOR

__fmt89:
  db FMT_LOCAL_string
  dw - 120
  db FMT_TEXT8, 8 ,  "Buffer_t"
  db FMT_LOCAL_int32
  dw - 152
  db FMT_TEXT8, 8 ,  ", -1, 0,"
  db FMT_LOCAL_string
  dw - 136
  db FMT_TERMINATOR

__fmt90:
  db FMT_LOCAL_string
  dw - 200
  db FMT_TEXT8, 2 ,  "dd"
  db FMT_LOCAL_string
  dw - 152
  db FMT_TEXT8, 12 ,  "; inner type"
  db FMT_EOL
  db FMT_TEXT8, 2 ,  "db"
  db FMT_LOCAL_int32
  dw - 332
  db FMT_TEXT8, 13 ,  " ; inner size"
  db FMT_EOL
  db FMT_TEXT8, 21 ,  "db ?, ?, ? ; reserved"
  db FMT_EOL
  db FMT_TEXT8, 2 ,  "dq"
  db FMT_LOCAL_int32
  dw - 284
  db FMT_TEXT8, 10 ,  "; itemsCnt"
  db FMT_TERMINATOR

__fmt91:
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 4 ,  "], 0"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  mov rcx, qword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  cmp rcx, qword ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  set"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 6 ,  "byte ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt92:
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 4 ,  "], 0"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  mov ecx, dword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  cmp ecx, dword ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  set"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 6 ,  "byte ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt93:
  db FMT_TEXT8, 14 ,  "  xor eax, eax"
  db FMT_EOL
  db FMT_TEXT8, 16 ,  "  movq   xmm0, ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 16 ,  "  comisd xmm0, ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  set"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 2 ,  "al"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt94:
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  cmp rax, qword ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 3 ,  "  j"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt95:
  db FMT_TEXT8, 13 ,  "  cmp dword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 2 ,  "],"
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TERMINATOR

__fmt96:
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  cmp eax, dword ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt97:
  db FMT_TEXT8, 3 ,  "  j"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt98:
  db FMT_TEXT8, 12 ,  "  lea rcx, ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  lea rdx, ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 28 ,  "  call __MOLD_VariantCompare"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  test al, al"
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  jnz"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt99:
  db FMT_TEXT8, 16 ,  "  movq   xmm0, ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 16 ,  "  comisd xmm0, ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 3 ,  "  j"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TERMINATOR

__fmt100:
  db FMT_TEXT8, 15 ,  "  movq  xmm0, ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 1 ,  " "
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 13 ,  "xmm0, qword ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 15 ,  "  movq  qword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 7 ,  "], xmm0"
  db FMT_TERMINATOR

__fmt101:
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 1 ,  " "
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 12 ,  "eax, dword ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt102:
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 1 ,  " "
  db FMT_LOCAL_variant
  dw - 72
  db FMT_TEXT8, 12 ,  "eax, qword ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt103:
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt104:
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt105:
  db FMT_TEXT8, 16 ,  "  movdqu xmm0, ["
  db FMT_LOCAL_variant
  dw - 56
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  movdqu ["
  db FMT_LOCAL_variant
  dw - 40
  db FMT_TEXT8, 7 ,  "], xmm0"
  db FMT_TERMINATOR

__fmt106:
  db FMT_TEXT8, 23 ,  "  call qword [rbx + 8 *"
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt107:
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 24
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  call qword [rbx]"
  db FMT_TERMINATOR

__fmt108:
  db FMT_TEXT8, 23 ,  "format PE64 console 5.0"
  db FMT_EOL
  db FMT_TEXT8, 17 ,  "entry __MOLD_Main"
  db FMT_EOL
  db FMT_TEXT8, 20 ,  "include 'win64a.inc'"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 46 ,  ";                                 Code section"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 40 ,  "section '.text' code readable executable"
  db FMT_EOL
  db FMT_TEXT8, 30 ,  "stack 1024*1024*4, 1024*1024*4"
  db FMT_EOL
  db FMT_TEXT8, 25 ,  "include 'x64\Variant.asm'"
  db FMT_TERMINATOR

__fmt109:
  db FMT_TEXT8, 5 ,  "  nop"
  db FMT_TERMINATOR

__fmt110:
  db FMT_TEXT8, 1 ,  ";"
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt111:
  db FMT_LOCAL_variant
  dw - 136
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  ":"
  db FMT_TERMINATOR

__fmt112:
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 9 ,  "  neg rax"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt113:
  db FMT_TEXT8, 25 ,  "  cvtsi2sd  xmm0, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 25 ,  "  cvtsi2sd  xmm1, qword ["
  db FMT_LOCAL_variant
  dw - 168
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 22 ,  "  divsd     xmm0, xmm1"
  db FMT_EOL
  db FMT_TEXT8, 19 ,  "  movq      qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 7 ,  "], xmm0"
  db FMT_TERMINATOR

__fmt114:
  db FMT_TEXT8, 19 ,  "  mov  rax, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 19 ,  "  mov  rcx, qword ["
  db FMT_LOCAL_variant
  dw - 168
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  cqo"
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  idiv rcx"
  db FMT_EOL
  db FMT_TEXT8, 14 ,  "  mov  qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt115:
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 9 ,  "  neg eax"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt116:
  db FMT_TEXT8, 25 ,  "  cvtsi2sd  xmm0, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 25 ,  "  cvtsi2sd  xmm1, dword ["
  db FMT_LOCAL_variant
  dw - 168
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 22 ,  "  divsd     xmm0, xmm1"
  db FMT_EOL
  db FMT_TEXT8, 19 ,  "  movq      qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 7 ,  "], xmm0"
  db FMT_TERMINATOR

__fmt117:
  db FMT_TEXT8, 19 ,  "  mov  eax, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 19 ,  "  mov  ecx, dword ["
  db FMT_LOCAL_variant
  dw - 168
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  cdq"
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  idiv ecx"
  db FMT_EOL
  db FMT_TEXT8, 14 ,  "  mov  dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt118:
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 44 ,  "  xor rax, qword [__MOLD_VariantNeg.signBit]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt119:
  db FMT_TEXT8, 25 ,  "  movq      xmm0, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 25 ,  "  movq      xmm1, qword ["
  db FMT_LOCAL_variant
  dw - 168
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 22 ,  "  divsd     xmm0, xmm1"
  db FMT_EOL
  db FMT_TEXT8, 21 ,  "  cvttsd2si eax, xmm0"
  db FMT_EOL
  db FMT_TEXT8, 19 ,  "  mov       dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt120:
  db FMT_TEXT8, 5 ,  "  jmp"
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt121:
  db FMT_TEXT8, 14 ,  "  xor eax, eax"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 19 ,  " + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 168
  db FMT_EOL
  db FMT_TEXT8, 9 ,  "  setz al"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt122:
  db FMT_TEXT8, 14 ,  "  xor eax, eax"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 19 ,  " + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 168
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  setnz al"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt123:
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt124:
  db FMT_TEXT8, 10 ,  "  sub eax,"
  db FMT_LOCAL_variant
  dw - 376
  db FMT_TERMINATOR

__fmt125:
  db FMT_TEXT8, 10 ,  "  cmp eax,"
  db FMT_LOCAL_variant
  dw - 376
  db FMT_TERMINATOR

__fmt126:
  db FMT_TEXT8, 4 ,  "  ja"
  db FMT_LOCAL_variant
  dw - 376
  db FMT_EOL
  db FMT_TEXT8, 19 ,  "  movsx rax, word ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 10 ,  "+ rax * 2]"
  db FMT_TERMINATOR

__fmt127:
  db FMT_TEXT8, 12 ,  "  lea rax, ["
  db FMT_LOCAL_variant
  dw - 376
  db FMT_TEXT8, 6 ,  "+ rax]"
  db FMT_EOL
  db FMT_TEXT8, 9 ,  "  jmp rax"
  db FMT_TERMINATOR

__fmt128:
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 19 ,  " + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 168
  db FMT_EOL
  db FMT_TEXT8, 4 ,  "  jz"
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt129:
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 19 ,  "+ Variant_t.type ],"
  db FMT_LOCAL_variant
  dw - 168
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  jnz"
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt130:
  db FMT_TEXT8, 10 ,  "  mov rax,"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt131:
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 2 ,  "],"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TERMINATOR

__fmt132:
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 4 ,  "], 1"
  db FMT_TERMINATOR

__fmt133:
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 4 ,  "], 0"
  db FMT_TERMINATOR

__fmt134:
  db FMT_TEXT8, 15 ,  "  db 0x48, 0xb8"
  db FMT_EOL
  db FMT_TEXT8, 4 ,  "  dq"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt135:
  db FMT_TEXT8, 17 ,  "  lea rcx, [__fmt"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 776
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 35 ,  "  call __MOLD_PrintFormatFromMemory"
  db FMT_TERMINATOR

__fmt136:
  db FMT_TEXT8, 11 ,  "  mov r9, ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 27 ,  "  mov r10d, VARIANT_INTEGER"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  lea rdx, ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 45 ,  "  call __MOLD_VariantConvertPrimitiveToString"
  db FMT_TERMINATOR

__fmt137:
  db FMT_TEXT8, 12 ,  "  mov r9d, ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 27 ,  "  mov r10d, VARIANT_INTEGER"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  lea rdx, ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 45 ,  "  call __MOLD_VariantConvertPrimitiveToString"
  db FMT_TERMINATOR

__fmt138:
  db FMT_TEXT8, 11 ,  "  mov r9, ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 26 ,  "  mov r10d, VARIANT_DOUBLE"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  lea rdx, ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 45 ,  "  call __MOLD_VariantConvertPrimitiveToString"
  db FMT_TERMINATOR

__fmt139:
  db FMT_TEXT8, 18 ,  "  mov r9d, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  lea rdx, ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 42 ,  "  call __MOLD_VariantConvertBool64ToString"
  db FMT_TERMINATOR

__fmt140:
  db FMT_TEXT8, 19 ,  "  ; __mold_syscall("
  db FMT_LOCAL_variant
  dw - 824
  db FMT_TEXT8, 1 ,  ")"
  db FMT_TERMINATOR

__fmt141:
  db FMT_TEXT8, 10 ,  "  add rsp,"
  db FMT_LOCAL_int32
  dw - 1320
  db FMT_TERMINATOR

__fmt142:
  db FMT_TEXT8, 12 ,  "  mov  r10d,"
  db FMT_LOCAL_variant
  dw - 856
  db FMT_EOL
  db FMT_TEXT8, 19 ,  "  call __MOLD_VCall"
  db FMT_EOL
  db FMT_EOL
  db FMT_TEXT8, 49 ,  "  ; 32-bit int sign extend after vcall if needed."
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  jns"
  db FMT_LOCAL_variant
  dw - 872
  db FMT_EOL
  db FMT_TEXT8, 21 ,  "  movsxd rax, dword ["
  db FMT_LOCAL_variant
  dw - 808
  db FMT_TEXT8, 19 ,  "+ Variant_t.value ]"
  db FMT_EOL
  db FMT_TEXT8, 16 ,  "  mov    qword ["
  db FMT_LOCAL_variant
  dw - 808
  db FMT_TEXT8, 24 ,  "+ Variant_t.value ], rax"
  db FMT_EOL
  db FMT_LOCAL_variant
  dw - 872
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  ":"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt143:
  db FMT_TEXT8, 13 ,  "  lea  rcx, ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 20 ,  "  lea  rdx, [vtable_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 152
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 33 ,  "  call __MOLD_VariantObjectCreate"
  db FMT_TERMINATOR

__fmt144:
  db FMT_TEXT8, 24 ,  "  cvtsi2sd xmm0, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 8 ,  "  movq ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 7 ,  "], xmm0"
  db FMT_TERMINATOR

__fmt145:
  db FMT_TEXT8, 24 ,  "  cvtsi2sd xmm0, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 8 ,  "  movq ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 7 ,  "], xmm0"
  db FMT_TERMINATOR

__fmt146:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 34 ,  "+ Variant_t.type], VARIANT_INTEGER"
  db FMT_TERMINATOR

__fmt147:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 19 ,  "+ Variant_t.value],"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TERMINATOR

__fmt148:
  db FMT_TEXT8, 21 ,  "  movsxd rax, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 23 ,  "+ Variant_t.value], rax"
  db FMT_TERMINATOR

__fmt149:
  db FMT_TEXT8, 10 ,  "  mov rax,"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TERMINATOR

__fmt150:
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt151:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 34 ,  "+ Variant_t.type], VARIANT_INTEGER"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 23 ,  "+ Variant_t.value], rax"
  db FMT_TERMINATOR

__fmt152:
  db FMT_TEXT8, 15 ,  "  db 0x48, 0xb8"
  db FMT_EOL
  db FMT_TEXT8, 4 ,  "  dq"
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TERMINATOR

__fmt153:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 33 ,  "+ Variant_t.type], VARIANT_DOUBLE"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 23 ,  "+ Variant_t.value], rax"
  db FMT_TERMINATOR

__fmt154:
  db FMT_TEXT8, 18 ,  "  cvttsd2si eax, ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt155:
  db FMT_TEXT8, 18 ,  "  cvttsd2si rax, ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt156:
  db FMT_TEXT8, 12 ,  "  mov eax, 1"
  db FMT_TERMINATOR

__fmt157:
  db FMT_TEXT8, 12 ,  "  mov eax, 0"
  db FMT_TERMINATOR

__fmt158:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 34 ,  "+ Variant_t.type], VARIANT_BOOLEAN"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 23 ,  "+ Variant_t.value], rax"
  db FMT_TERMINATOR

__fmt159:
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 34 ,  "+ Variant_t.type], VARIANT_BOOLEAN"
  db FMT_EOL
  db FMT_TEXT8, 45 ,  "  jnz __MOLD_PrintErrorAndDie.booleanExpected"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 18 ,  "+ Variant_t.value]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt160:
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 34 ,  "+ Variant_t.type], VARIANT_INTEGER"
  db FMT_EOL
  db FMT_TEXT8, 45 ,  "  jnz __MOLD_PrintErrorAndDie.integerExpected"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  mov eax, dword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 18 ,  "+ Variant_t.value]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], eax"
  db FMT_TERMINATOR

__fmt161:
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 34 ,  "+ Variant_t.type], VARIANT_INTEGER"
  db FMT_EOL
  db FMT_TEXT8, 45 ,  "  jnz __MOLD_PrintErrorAndDie.integerExpected"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 18 ,  "+ Variant_t.value]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt162:
  db FMT_TEXT8, 7 ,  "  cmp ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 33 ,  "+ Variant_t.type], VARIANT_DOUBLE"
  db FMT_EOL
  db FMT_TEXT8, 43 ,  "  jnz __MOLD_PrintErrorAndDie.floatExpected"
  db FMT_EOL
  db FMT_TEXT8, 18 ,  "  mov rax, qword ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 18 ,  "+ Variant_t.value]"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TEXT8, 6 ,  "], rax"
  db FMT_TERMINATOR

__fmt163:
  db FMT_TEXT8, 8 ,  "  cmp  ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 22 ,  " + Variant_t.value], 0"
  db FMT_EOL
  db FMT_TEXT8, 6 ,  "  jnz "
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt164:
  db FMT_TEXT8, 8 ,  "  cmp  ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 22 ,  " + Variant_t.value], 0"
  db FMT_EOL
  db FMT_TEXT8, 6 ,  "  jz  "
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt165:
  db FMT_TEXT8, 8 ,  "  cmp  ["
  db FMT_LOCAL_variant
  dw - 152
  db FMT_TEXT8, 20 ,  " + Variant_t.value],"
  db FMT_LOCAL_variant
  dw - 168
  db FMT_EOL
  db FMT_TEXT8, 6 ,  "  jge "
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt166:
  db FMT_TEXT8, 5 ,  "  ret"
  db FMT_TERMINATOR

__fmt167:
  db FMT_EOL
  db FMT_TEXT8, 15 ,  "  ; clean frame"
  db FMT_EOL
  db FMT_TEXT8, 15 ,  "  ; -----------"
  db FMT_TERMINATOR

__fmt168:
  db FMT_TEXT8, 25 ,  "  ; Skipped loop iterator"
  db FMT_LOCAL_variant
  dw - 440
  db FMT_TERMINATOR

__fmt169:
  db FMT_TEXT8, 23 ,  "  ; leave profiler code"
  db FMT_EOL
  db FMT_TEXT8, 23 ,  "  ; -------------------"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  push   rdx"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  rdtsc"
  db FMT_EOL
  db FMT_TEXT8, 16 ,  "  shl    rdx, 32"
  db FMT_EOL
  db FMT_TEXT8, 17 ,  "  add    rdx, rax"
  db FMT_EOL
  db FMT_TEXT8, 39 ,  "  add    qword [__profilerCounterEntry_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 6 ,  "], rdx"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  pop    rdx"
  db FMT_TERMINATOR

__fmt170:
  db FMT_EOL
  db FMT_TEXT8, 25 ,  "  ; print profiler result"
  db FMT_EOL
  db FMT_TEXT8, 25 ,  "  ; ---------------------"
  db FMT_EOL
  db FMT_TEXT8, 35 ,  "  lea  rcx, [__profilerCounterData]"
  db FMT_EOL
  db FMT_TEXT8, 31 ,  "  call __MOLD_PrintProfilerData"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt171:
  db FMT_EOL
  db FMT_TEXT8, 11 ,  "  add  rsp,"
  db FMT_LOCAL_int32
  dw - 1308
  db FMT_TERMINATOR

__fmt172:
  db FMT_TEXT8, 12 ,  "  or dword ["
  db FMT_LOCAL_variant
  dw - 88
  db FMT_TEXT8, 4 ,  "], 0"
  db FMT_TERMINATOR

__fmt173:
  db FMT_TEXT8, 10 ,  "  pop  rdi"
  db FMT_TERMINATOR

__fmt174:
  db FMT_TEXT8, 10 ,  "  pop  rbp"
  db FMT_EOL
  db FMT_TEXT8, 5 ,  "  ret"
  db FMT_TERMINATOR

__fmt175:
  db FMT_LOCAL_variant
  dw - 72
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 7 ,  "_vcall:"
  db FMT_TERMINATOR

__fmt176:
  db FMT_TEXT8, 30 ,  "  ; skipped unused parameter ["
  db FMT_LOCAL_variant
  dw - 920
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt177:
  db FMT_TEXT8, 29 ,  "  cmp [rdx + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 952
  db FMT_EOL
  db FMT_TEXT8, 48 ,  "  jnz __MOLD_PrintErrorAndDie.implicitConversion"
  db FMT_EOL
  db FMT_TEXT8, 34 ,  "  mov rdx, [rdx + Variant_t.value]"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt178:
  db FMT_TEXT8, 28 ,  "  cmp [r8 + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 952
  db FMT_EOL
  db FMT_TEXT8, 48 ,  "  jnz __MOLD_PrintErrorAndDie.implicitConversion"
  db FMT_EOL
  db FMT_TEXT8, 32 ,  "  mov r8, [r8 + Variant_t.value]"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt179:
  db FMT_TEXT8, 28 ,  "  cmp [r9 + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 952
  db FMT_EOL
  db FMT_TEXT8, 48 ,  "  jnz __MOLD_PrintErrorAndDie.implicitConversion"
  db FMT_EOL
  db FMT_TEXT8, 32 ,  "  mov r9, [r9 + Variant_t.value]"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt180:
  db FMT_TEXT8, 17 ,  "  mov r10, [rsp +"
  db FMT_LOCAL_int32
  dw - 1936
  db FMT_TEXT8, 1 ,  "]"
  db FMT_EOL
  db FMT_TEXT8, 29 ,  "  cmp [r10 + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 952
  db FMT_EOL
  db FMT_TEXT8, 48 ,  "  jnz __MOLD_PrintErrorAndDie.implicitConversion"
  db FMT_EOL
  db FMT_TEXT8, 34 ,  "  mov r10, [r10 + Variant_t.value]"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  mov [rsp +"
  db FMT_LOCAL_int32
  dw - 1936
  db FMT_TEXT8, 6 ,  "], r10"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt181:
  db FMT_TEXT8, 30 ,  "  mov  [rax + Variant_t.type],"
  db FMT_LOCAL_variant
  dw - 968
  db FMT_TERMINATOR

__fmt182:
  db FMT_TEXT8, 33 ,  "  mov  [rax + Variant_t.value], 0"
  db FMT_EOL
  db FMT_TEXT8, 27 ,  "  add  rax, Variant_t.value"
  db FMT_TERMINATOR

__fmt183:
  db FMT_TEXT8, 27 ,  "  add  rax, Variant_t.value"
  db FMT_TERMINATOR

__fmt184:
  db FMT_LOCAL_variant
  dw - 72
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  ":"
  db FMT_TERMINATOR

__fmt185:
  db FMT_TEXT8, 23 ,  "  ; enter profiler code"
  db FMT_EOL
  db FMT_TEXT8, 23 ,  "  ; -------------------"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  push   rdx"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "  rdtsc"
  db FMT_EOL
  db FMT_TEXT8, 16 ,  "  shl    rdx, 32"
  db FMT_EOL
  db FMT_TEXT8, 17 ,  "  add    rdx, rax"
  db FMT_EOL
  db FMT_TEXT8, 39 ,  "  sub    qword [__profilerCounterEntry_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 72
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 6 ,  "], rdx"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "  pop    rdx"
  db FMT_TERMINATOR

__fmt186:
  db FMT_TEXT8, 9 ,  "  restore"
  db FMT_LOCAL_variant
  dw - 520
  db FMT_TERMINATOR

__fmt187:
  db FMT_TEXT8, 14 ,  "  ; init frame"
  db FMT_EOL
  db FMT_TEXT8, 14 ,  "  ; ----------"
  db FMT_TERMINATOR

__fmt188:
  db FMT_TEXT8, 1 ,  " "
  db FMT_LOCAL_variant
  dw - 504
  db FMT_TEXT8, 7 ,  "EQU rdi"
  db FMT_TERMINATOR

__fmt189:
  db FMT_TEXT8, 1 ,  " "
  db FMT_LOCAL_variant
  dw - 536
  db FMT_TEXT8, 9 ,  "EQU rbp -"
  db FMT_LOCAL_int32
  dw - 1796
  db FMT_TEXT8, 18 ,  "; 16 bytes, (kind="
  db FMT_LOCAL_variant
  dw - 552
  db FMT_TEXT8, 7 ,  ", type="
  db FMT_LOCAL_variant
  dw - 568
  db FMT_TEXT8, 12 ,  ", writeHits="
  db FMT_LOCAL_variant
  dw - 584
  db FMT_TEXT8, 11 ,  ", readHits="
  db FMT_LOCAL_variant
  dw - 600
  db FMT_TEXT8, 1 ,  ")"
  db FMT_TERMINATOR

__fmt190:
  db FMT_TEXT8, 1 ,  " "
  db FMT_LOCAL_variant
  dw - 600
  db FMT_TEXT8, 9 ,  "EQU rbp -"
  db FMT_LOCAL_int32
  dw - 1796
  db FMT_TEXT8, 1 ,  ";"
  db FMT_LOCAL_int32
  dw - 1952
  db FMT_TEXT8, 13 ,  "bytes, (kind="
  db FMT_LOCAL_variant
  dw - 584
  db FMT_TEXT8, 7 ,  ", type="
  db FMT_LOCAL_variant
  dw - 568
  db FMT_TEXT8, 12 ,  ", writeHits="
  db FMT_LOCAL_variant
  dw - 552
  db FMT_TEXT8, 11 ,  ", readHits="
  db FMT_LOCAL_variant
  dw - 536
  db FMT_TEXT8, 1 ,  ")"
  db FMT_TERMINATOR

__fmt191:
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  push rbp"
  db FMT_EOL
  db FMT_TEXT8, 15 ,  "  mov  rbp, rsp"
  db FMT_TERMINATOR

__fmt192:
  db FMT_EOL
  db FMT_TEXT8, 10 ,  "  push rdi"
  db FMT_EOL
  db FMT_TEXT8, 15 ,  "  mov  rdi, rax"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt193:
  db FMT_TEXT8, 11 ,  "  sub  rsp,"
  db FMT_LOCAL_int32
  dw - 1308
  db FMT_EOL
  db FMT_TERMINATOR

__fmt194:
  db FMT_TEXT8, 25 ,  "  ; Skipped loop iterator"
  db FMT_LOCAL_variant
  dw - 600
  db FMT_TERMINATOR

__fmt195:
  db FMT_TEXT8, 14 ,  "  xor eax, eax"
  db FMT_TERMINATOR

__fmt196:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 600
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 23 ,  " + Variant_t.type], eax"
  db FMT_TERMINATOR

__fmt197:
  db FMT_TEXT8, 32 ,  "  mov eax, dword [rbp + 16 + 8 *"
  db FMT_LOCAL_int32
  dw - 1900
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt198:
  db FMT_TEXT8, 32 ,  "  mov rax, qword [rbp + 16 + 8 *"
  db FMT_LOCAL_int32
  dw - 1900
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt199:
  db FMT_TEXT8, 13 ,  "  mov dword ["
  db FMT_LOCAL_variant
  dw - 616
  db FMT_TEXT8, 2 ,  "],"
  db FMT_LOCAL_variant
  dw - 1016
  db FMT_TERMINATOR

__fmt200:
  db FMT_TEXT8, 13 ,  "  mov qword ["
  db FMT_LOCAL_variant
  dw - 616
  db FMT_TEXT8, 2 ,  "],"
  db FMT_LOCAL_variant
  dw - 1016
  db FMT_TERMINATOR

__fmt201:
  db FMT_TEXT8, 17 ,  "  movdqu xmm0 , ["
  db FMT_LOCAL_variant
  dw - 1016
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt202:
  db FMT_TEXT8, 10 ,  "  movdqu ["
  db FMT_LOCAL_variant
  dw - 616
  db FMT_TEXT8, 7 ,  "], xmm0"
  db FMT_TERMINATOR

__fmt203:
  db FMT_TEXT8, 6 ,  "  or ["
  db FMT_LOCAL_variant
  dw - 600
  db FMT_TEXT8, 59 ,  " + Variant_t.flags ], VARIANT_FLAG_DUPLICATE_ON_FIRST_WRITE"
  db FMT_TERMINATOR

__fmt204:
  db FMT_TEXT8, 26 ,  "  ; skipped unused param ["
  db FMT_LOCAL_variant
  dw - 600
  db FMT_TEXT8, 1 ,  "]"
  db FMT_TERMINATOR

__fmt205:
  db FMT_TEXT8, 7 ,  "  mov ["
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 600
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 37 ,  " + Variant_t.type], VARIANT_UNDEFINED"
  db FMT_TERMINATOR

__fmt206:
  db FMT_EOL
  db FMT_TEXT8, 8 ,  "  ; code"
  db FMT_EOL
  db FMT_TEXT8, 8 ,  "  ; ----"
  db FMT_TERMINATOR

__fmt207:
  db FMT_EOL
  db FMT_TEXT8, 17 ,  "endOfCodeSection:"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 46 ,  ";                                 Data section"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 39 ,  "section '.data' data readable writeable"
  db FMT_EOL
  db FMT_TEXT8, 28 ,  "include 'x64\CommonData.asm'"
  db FMT_EOL
  db FMT_EOL
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "; Global vars"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "; -----------"
  db FMT_TERMINATOR

__fmt208:
  db FMT_LOCAL_variant
  dw - 1032
  db FMT_TEXT8, 18 ,  " Variant_t 0, 0, 0"
  db FMT_TERMINATOR

__fmt209:
  db FMT_LOCAL_variant
  dw - 1032
  db FMT_TEXT8, 5 ,  " dq 0"
  db FMT_TERMINATOR

__fmt210:
  db FMT_LOCAL_variant
  dw - 1032
  db FMT_TEXT8, 5 ,  " dd 0"
  db FMT_TERMINATOR

__fmt211:
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 55 ,  ";                     Constant (read-only) data section"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 30 ,  "section '.rdata' data readable"
  db FMT_EOL
  db FMT_TEXT8, 6 ,  "  dq ?"
  db FMT_EOL
  db FMT_EOL
  db FMT_TEXT8, 23 ,  "; Encoded print formats"
  db FMT_EOL
  db FMT_TEXT8, 23 ,  "; ---------------------"
  db FMT_TERMINATOR

__fmt212:
  db FMT_TEXT8, 5 ,  "__fmt"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1032
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  ":"
  db FMT_TERMINATOR

__fmt213:
  db FMT_TEXT8, 12 ,  "  db FMT_EOL"
  db FMT_TERMINATOR

__fmt214:
  db FMT_TEXT8, 21 ,  "  db FMT_PREFIX_GLUED"
  db FMT_TERMINATOR

__fmt215:
  db FMT_TEXT8, 15 ,  "  db FMT_TEXT8,"
  db FMT_LOCAL_int32
  dw - 1960
  db FMT_TEXT8, 2 ,  ", "
  db FMT_LOCAL_string
  dw - 392
  db FMT_TERMINATOR

__fmt216:
  db FMT_TEXT8, 15 ,  "  db FMT_LOCAL_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1096
  db FMT_TERMINATOR

__fmt217:
  db FMT_TEXT8, 6 ,  "  dw -"
  db FMT_LOCAL_variant
  dw - 1080
  db FMT_TERMINATOR

__fmt218:
  db FMT_TEXT8, 16 ,  "  db FMT_RETVAL_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1096
  db FMT_TERMINATOR

__fmt219:
  db FMT_TEXT8, 16 ,  "  db FMT_GLOBAL_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1096
  db FMT_TERMINATOR

__fmt220:
  db FMT_TEXT8, 4 ,  "  dq"
  db FMT_LOCAL_variant
  dw - 1048
  db FMT_TERMINATOR

__fmt221:
  db FMT_TEXT8, 19 ,  "  db FMT_TERMINATOR"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt222:
  db FMT_EOL
  db FMT_TEXT8, 11 ,  "; Constants"
  db FMT_EOL
  db FMT_TEXT8, 11 ,  "; ---------"
  db FMT_TERMINATOR

__fmt223:
  db FMT_TEXT8, 6 ,  "; iter"
  db FMT_LOCAL_int32
  dw - 1964
  db FMT_TERMINATOR

__fmt224:
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "; Jump tables"
  db FMT_EOL
  db FMT_TEXT8, 13 ,  "; -----------"
  db FMT_TERMINATOR

__fmt225:
  db FMT_LOCAL_string
  dw - 840
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  ":"
  db FMT_TERMINATOR

__fmt226:
  db FMT_TEXT8, 8 ,  "  dw 0 ;"
  db FMT_LOCAL_int32
  dw - 1968
  db FMT_TEXT8, 9 ,  "otherwise"
  db FMT_TERMINATOR

__fmt227:
  db FMT_TEXT8, 5 ,  "  dw "
  db FMT_LOCAL_variant
  dw - 1192
  db FMT_TEXT8, 1 ,  "-"
  db FMT_LOCAL_variant
  dw - 1176
  db FMT_TEXT8, 1 ,  ";"
  db FMT_LOCAL_int32
  dw - 1968
  db FMT_TERMINATOR

__fmt228:
  db FMT_TEXT8, 30 ,  "  dw 0 ; explicit default case"
  db FMT_EOL
  db FMT_TERMINATOR

__fmt229:
  db FMT_EOL
  db FMT_TEXT8, 9 ,  "; vtables"
  db FMT_EOL
  db FMT_TEXT8, 9 ,  "; -------"
  db FMT_TERMINATOR

__fmt230:
  db FMT_TEXT8, 7 ,  "vtable_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1224
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 1 ,  ":"
  db FMT_TERMINATOR

__fmt231:
  db FMT_TEXT8, 14 ,  ".offset dd 8 *"
  db FMT_LOCAL_int32
  dw - 1984
  db FMT_TERMINATOR

__fmt232:
  db FMT_TEXT8, 14 ,  ".length dd 8 *"
  db FMT_LOCAL_int32
  dw - 1800
  db FMT_TERMINATOR

__fmt233:
  db FMT_TEXT8, 9 ,  ".entries:"
  db FMT_TERMINATOR

__fmt234:
  db FMT_TEXT8, 4 ,  "  dq"
  db FMT_LOCAL_string
  dw - 1288
  db FMT_TEXT8, 1 ,  ";"
  db FMT_LOCAL_variant
  dw - 1256
  db FMT_TEXT8, 1 ,  "("
  db FMT_LOCAL_int32
  dw - 1996
  db FMT_TEXT8, 1 ,  ")"
  db FMT_TERMINATOR

__fmt235:
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 47 ,  ";                               Imports section"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 47 ,  "section '.idata' import data readable writeable"
  db FMT_EOL
  db FMT_TEXT8, 33 ,  "  include 'x64\CommonImports.asm'"
  db FMT_EOL
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 46 ,  ";                                Debug section"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 30 ,  "section '.debug' data readable"
  db FMT_EOL
  db FMT_TEXT8, 12 ,  "SymbolTable:"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "dq 0, 0"
  db FMT_EOL
  db FMT_TEXT8, 35 ,  "include 'x64\SymbolTableCommon.asm'"
  db FMT_TERMINATOR

__fmt236:
  db FMT_TEXT8, 3 ,  "dq "
  db FMT_LOCAL_variant
  dw - 1304
  db FMT_TEXT8, 1 ,  ","
  db FMT_TEXT8, 5 ,  "name_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1304
  db FMT_TERMINATOR

__fmt237:
  db FMT_TEXT8, 42 ,  "dq endOfCodeSection, name_endOfCodeSection"
  db FMT_EOL
  db FMT_TEXT8, 15 ,  "SymbolTableEnd:"
  db FMT_EOL
  db FMT_TEXT8, 7 ,  "dq 0, 0"
  db FMT_EOL
  db FMT_EOL
  db FMT_TEXT8, 17 ,  "SymbolTableNames:"
  db FMT_EOL
  db FMT_TEXT8, 40 ,  "include 'x64\SymbolTableCommonNames.asm'"
  db FMT_TERMINATOR

__fmt238:
  db FMT_TEXT8, 5 ,  "name_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1304
  db FMT_TEXT8, 2 ,  "db"
  db FMT_TEXT8, 1 ,  "'"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1304
  db FMT_PREFIX_GLUED
  db FMT_TEXT8, 4 ,  "', 0"
  db FMT_TERMINATOR

__fmt239:
  db FMT_TEXT8, 49 ,  "name_endOfCodeSection db 'out of code section', 0"
  db FMT_TERMINATOR

__fmt240:
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 46 ,  ";                              Profile section"
  db FMT_EOL
  db FMT_TEXT8, 80 ,  "; ------------------------------------------------------------------------------"
  db FMT_EOL
  db FMT_TEXT8, 42 ,  "section '.profile' data readable writeable"
  db FMT_EOL
  db FMT_TEXT8, 22 ,  "__profilerCounterData:"
  db FMT_TERMINATOR

__fmt241:
  db FMT_TEXT8, 23 ,  "__profilerCounterEntry_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1304
  db FMT_TEXT8, 6 ,  " dq 0,"
  db FMT_TEXT8, 5 ,  "name_"
  db FMT_PREFIX_GLUED
  db FMT_LOCAL_variant
  dw - 1304
  db FMT_TERMINATOR

__fmt242:
  db FMT_TEXT8, 7 ,  "dq 0, 0"
  db FMT_TERMINATOR

__fmt243:
  db FMT_TEXT8, 1 ,  ";"
  db FMT_LOCAL_variant
  dw - 136
  db FMT_TERMINATOR

__fmt244:
  db FMT_LOCAL_string
  dw - 312
  db FMT_LOCAL_string
  dw - 104
  db FMT_TERMINATOR

__fmt245:
  db FMT_TEXT8, 12 ,  "Mold version"
  db FMT_GLOBAL_string
  dq VERSION_STRING
  db FMT_EOL
  db FMT_TEXT8, 6 ,  "Usage:"
  db FMT_EOL
  db FMT_TEXT8, 62 ,  "  mold [-c] [--asm] [--mir0] [--mir] [--profiler] <input.mold>"
  db FMT_TERMINATOR

__fmt246:
  db FMT_TEXT8, 41 ,  "Error: compiler mode not implemented yet."
  db FMT_EOL
  db FMT_TEXT8, 47 ,  "Try --asm option and assemble result on by own."
  db FMT_TERMINATOR


; Constants
; ---------
; iter 0
GrammarProductionsLUT Variant_t VARIANT_ARRAY, 0, GrammarProductionsLUT_buffer
SymbolsGreedyLUT Variant_t VARIANT_ARRAY, 0, SymbolsGreedyLUT_buffer
ParserActionsLUT Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_buffer
ParserGotoLUT Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_buffer
ParserActionsDefaultLUT Variant_t VARIANT_ARRAY, 0, ParserActionsDefaultLUT_buffer
LexerSelectLUT Variant_t VARIANT_ARRAY, 0, LexerSelectLUT_buffer
LexerIndexBaseLUT Variant_t VARIANT_ARRAY, 0, LexerIndexBaseLUT_buffer
LexerIndexLUT Variant_t VARIANT_ARRAY, 0, LexerIndexLUT_buffer
LexerCharsLUT Variant_t VARIANT_ARRAY, 0, LexerCharsLUT_buffer
LexerTransLUT Variant_t VARIANT_ARRAY, 0, LexerTransLUT_buffer
LexerAcceptLUT Variant_t VARIANT_ARRAY, 0, LexerAcceptLUT_buffer
__literal0 Variant_t VARIANT_STRING, 0, __literal0_buffer
__literal1 Variant_t VARIANT_STRING, 0, __literal1_buffer
__literal2 Variant_t VARIANT_STRING, 0, __literal2_buffer
__literal3 Variant_t VARIANT_STRING, 0, __literal3_buffer
__literal4 Variant_t VARIANT_STRING, 0, __literal4_buffer
__literal5 Variant_t VARIANT_STRING, 0, __literal5_buffer
__literal6 Variant_t VARIANT_STRING, 0, __literal6_buffer
__literal7 Variant_t VARIANT_STRING, 0, __literal7_buffer
__literal11 Variant_t VARIANT_STRING, 0, __literal11_buffer
__literal12 Variant_t VARIANT_STRING, 0, __literal12_buffer
__literal13 Variant_t VARIANT_STRING, 0, __literal13_buffer
__literal14 Variant_t VARIANT_STRING, 0, __literal14_buffer
__literal15 Variant_t VARIANT_STRING, 0, __literal15_buffer
__literal16 Variant_t VARIANT_STRING, 0, __literal16_buffer
__literal17 Variant_t VARIANT_STRING, 0, __literal17_buffer
__literal18 Variant_t VARIANT_STRING, 0, __literal18_buffer
__literal19 Variant_t VARIANT_STRING, 0, __literal19_buffer
__literal20 Variant_t VARIANT_STRING, 0, __literal20_buffer
__literal21 Variant_t VARIANT_STRING, 0, __literal21_buffer
__literal22 Variant_t VARIANT_STRING, 0, __literal22_buffer
__literal23 Variant_t VARIANT_STRING, 0, __literal23_buffer
__literal24 Variant_t VARIANT_STRING, 0, __literal24_buffer
__literal25 Variant_t VARIANT_STRING, 0, __literal25_buffer
__literal26 Variant_t VARIANT_STRING, 0, __literal26_buffer
__literal27 Variant_t VARIANT_STRING, 0, __literal27_buffer
__literal28 Variant_t VARIANT_STRING, 0, __literal28_buffer
__literal29 Variant_t VARIANT_STRING, 0, __literal29_buffer
__literal30 Variant_t VARIANT_STRING, 0, __literal30_buffer
__literal31 Variant_t VARIANT_STRING, 0, __literal31_buffer
__literal32 Variant_t VARIANT_STRING, 0, __literal32_buffer
AST_DataTypeNames Variant_t VARIANT_ARRAY, 0, AST_DataTypeNames_buffer
AST_DataTypeForMIR Variant_t VARIANT_ARRAY, 0, AST_DataTypeForMIR_buffer
__literal33 Variant_t VARIANT_STRING, 0, __literal33_buffer
__literal34 Variant_t VARIANT_STRING, 0, __literal34_buffer
__literal35 Variant_t VARIANT_STRING, 0, __literal35_buffer
__literal36 Variant_t VARIANT_STRING, 0, __literal36_buffer
__literal37 Variant_t VARIANT_STRING, 0, __literal37_buffer
__literal38 Variant_t VARIANT_STRING, 0, __literal38_buffer
__literal39 Variant_t VARIANT_STRING, 0, __literal39_buffer
__literal40 Variant_t VARIANT_STRING, 0, __literal40_buffer
__literal41 Variant_t VARIANT_STRING, 0, __literal41_buffer
__literal42 Variant_t VARIANT_STRING, 0, __literal42_buffer
__literal43 Variant_t VARIANT_STRING, 0, __literal43_buffer
__literal44 Variant_t VARIANT_STRING, 0, __literal44_buffer
__literal45 Variant_t VARIANT_STRING, 0, __literal45_buffer
__literal46 Variant_t VARIANT_STRING, 0, __literal46_buffer
__literal47 Variant_t VARIANT_STRING, 0, __literal47_buffer
__literal48 Variant_t VARIANT_STRING, 0, __literal48_buffer
__literal49 Variant_t VARIANT_STRING, 0, __literal49_buffer
__literal50 Variant_t VARIANT_STRING, 0, __literal50_buffer
__literal51 Variant_t VARIANT_STRING, 0, __literal51_buffer
__literal52 Variant_t VARIANT_STRING, 0, __literal52_buffer
__literal53 Variant_t VARIANT_STRING, 0, __literal53_buffer
__literal54 Variant_t VARIANT_STRING, 0, __literal54_buffer
__literal55 Variant_t VARIANT_STRING, 0, __literal55_buffer
__literal56 Variant_t VARIANT_STRING, 0, __literal56_buffer
__literal57 Variant_t VARIANT_STRING, 0, __literal57_buffer
__literal58 Variant_t VARIANT_STRING, 0, __literal58_buffer
__literal59 Variant_t VARIANT_STRING, 0, __literal59_buffer
__literal60 Variant_t VARIANT_STRING, 0, __literal60_buffer
__literal61 Variant_t VARIANT_STRING, 0, __literal61_buffer
__literal62 Variant_t VARIANT_STRING, 0, __literal62_buffer
__literal63 Variant_t VARIANT_STRING, 0, __literal63_buffer
__literal64 Variant_t VARIANT_STRING, 0, __literal64_buffer
__literal65 Variant_t VARIANT_STRING, 0, __literal65_buffer
__literal66 Variant_t VARIANT_STRING, 0, __literal66_buffer
__literal67 Variant_t VARIANT_STRING, 0, __literal67_buffer
__literal68 Variant_t VARIANT_STRING, 0, __literal68_buffer
__literal69 Variant_t VARIANT_STRING, 0, __literal69_buffer
__literal70 Variant_t VARIANT_STRING, 0, __literal70_buffer
__literal71 Variant_t VARIANT_STRING, 0, __literal71_buffer
__literal72 Variant_t VARIANT_STRING, 0, __literal72_buffer
__literal73 Variant_t VARIANT_STRING, 0, __literal73_buffer
__literal74 Variant_t VARIANT_STRING, 0, __literal74_buffer
__literal75 Variant_t VARIANT_STRING, 0, __literal75_buffer
__literal76 Variant_t VARIANT_STRING, 0, __literal76_buffer
__literal77 Variant_t VARIANT_STRING, 0, __literal77_buffer
__literal78 Variant_t VARIANT_STRING, 0, __literal78_buffer
__literal79 Variant_t VARIANT_STRING, 0, __literal79_buffer
__literal80 Variant_t VARIANT_STRING, 0, __literal80_buffer
__literal81 Variant_t VARIANT_STRING, 0, __literal81_buffer
__literal82 Variant_t VARIANT_STRING, 0, __literal82_buffer
__literal83 Variant_t VARIANT_STRING, 0, __literal83_buffer
__literal84 Variant_t VARIANT_STRING, 0, __literal84_buffer
__literal85 Variant_t VARIANT_STRING, 0, __literal85_buffer
__literal86 Variant_t VARIANT_STRING, 0, __literal86_buffer
__literal87 Variant_t VARIANT_STRING, 0, __literal87_buffer
__literal88 Variant_t VARIANT_STRING, 0, __literal88_buffer
__literal89 Variant_t VARIANT_STRING, 0, __literal89_buffer
__literal90 Variant_t VARIANT_STRING, 0, __literal90_buffer
__literal91 Variant_t VARIANT_STRING, 0, __literal91_buffer
__literal92 Variant_t VARIANT_STRING, 0, __literal92_buffer
__literal93 Variant_t VARIANT_STRING, 0, __literal93_buffer
__literal94 Variant_t VARIANT_STRING, 0, __literal94_buffer
__literal95 Variant_t VARIANT_STRING, 0, __literal95_buffer
__literal96 Variant_t VARIANT_STRING, 0, __literal96_buffer
__literal97 Variant_t VARIANT_STRING, 0, __literal97_buffer
__literal98 Variant_t VARIANT_STRING, 0, __literal98_buffer
__literal99 Variant_t VARIANT_STRING, 0, __literal99_buffer
__literal100 Variant_t VARIANT_STRING, 0, __literal100_buffer
__literal101 Variant_t VARIANT_STRING, 0, __literal101_buffer
__literal102 Variant_t VARIANT_STRING, 0, __literal102_buffer
__literal103 Variant_t VARIANT_STRING, 0, __literal103_buffer
__literal104 Variant_t VARIANT_STRING, 0, __literal104_buffer
__literal105 Variant_t VARIANT_STRING, 0, __literal105_buffer
__literal106 Variant_t VARIANT_STRING, 0, __literal106_buffer
__literal107 Variant_t VARIANT_STRING, 0, __literal107_buffer
__literal108 Variant_t VARIANT_STRING, 0, __literal108_buffer
__literal109 Variant_t VARIANT_STRING, 0, __literal109_buffer
__literal110 Variant_t VARIANT_STRING, 0, __literal110_buffer
__literal111 Variant_t VARIANT_STRING, 0, __literal111_buffer
__literal112 Variant_t VARIANT_STRING, 0, __literal112_buffer
__literal113 Variant_t VARIANT_STRING, 0, __literal113_buffer
__literal114 Variant_t VARIANT_STRING, 0, __literal114_buffer
__literal115 Variant_t VARIANT_STRING, 0, __literal115_buffer
__literal116 Variant_t VARIANT_STRING, 0, __literal116_buffer
__literal117 Variant_t VARIANT_STRING, 0, __literal117_buffer
__literal118 Variant_t VARIANT_STRING, 0, __literal118_buffer
__literal119 Variant_t VARIANT_STRING, 0, __literal119_buffer
__literal120 Variant_t VARIANT_STRING, 0, __literal120_buffer
__literal121 Variant_t VARIANT_STRING, 0, __literal121_buffer
__literal122 Variant_t VARIANT_STRING, 0, __literal122_buffer
__literal123 Variant_t VARIANT_STRING, 0, __literal123_buffer
__literal124 Variant_t VARIANT_STRING, 0, __literal124_buffer
__literal125 Variant_t VARIANT_STRING, 0, __literal125_buffer
__literal126 Variant_t VARIANT_STRING, 0, __literal126_buffer
__literal127 Variant_t VARIANT_STRING, 0, __literal127_buffer
__literal128 Variant_t VARIANT_STRING, 0, __literal128_buffer
__literal129 Variant_t VARIANT_STRING, 0, __literal129_buffer
__literal130 Variant_t VARIANT_STRING, 0, __literal130_buffer
__literal131 Variant_t VARIANT_STRING, 0, __literal131_buffer
__literal132 Variant_t VARIANT_STRING, 0, __literal132_buffer
__literal133 Variant_t VARIANT_STRING, 0, __literal133_buffer
__literal134 Variant_t VARIANT_STRING, 0, __literal134_buffer
__literal135 Variant_t VARIANT_STRING, 0, __literal135_buffer
__literal136 Variant_t VARIANT_STRING, 0, __literal136_buffer
__literal137 Variant_t VARIANT_STRING, 0, __literal137_buffer
__literal140 Variant_t VARIANT_STRING, 0, __literal140_buffer
__literal142 Variant_t VARIANT_STRING, 0, __literal142_buffer
__literal146 Variant_t VARIANT_STRING, 0, __literal146_buffer
__literal147 Variant_t VARIANT_STRING, 0, __literal147_buffer
__literal148 Variant_t VARIANT_STRING, 0, __literal148_buffer
__literal149 Variant_t VARIANT_STRING, 0, __literal149_buffer
__literal150 Variant_t VARIANT_STRING, 0, __literal150_buffer
__literal151 Variant_t VARIANT_STRING, 0, __literal151_buffer
__literal152 Variant_t VARIANT_STRING, 0, __literal152_buffer
__literal153 Variant_t VARIANT_STRING, 0, __literal153_buffer
__literal154 Variant_t VARIANT_STRING, 0, __literal154_buffer
__literal155 Variant_t VARIANT_STRING, 0, __literal155_buffer
__literal156 Variant_t VARIANT_STRING, 0, __literal156_buffer
__literal157 Variant_t VARIANT_STRING, 0, __literal157_buffer
__literal158 Variant_t VARIANT_STRING, 0, __literal158_buffer
__literal159 Variant_t VARIANT_STRING, 0, __literal159_buffer
__literal160 Variant_t VARIANT_STRING, 0, __literal160_buffer
__literal161 Variant_t VARIANT_STRING, 0, __literal161_buffer
__literal162 Variant_t VARIANT_STRING, 0, __literal162_buffer
__literal164 Variant_t VARIANT_STRING, 0, __literal164_buffer
__literal165 Variant_t VARIANT_STRING, 0, __literal165_buffer
__literal166 Variant_t VARIANT_STRING, 0, __literal166_buffer
__literal167 Variant_t VARIANT_STRING, 0, __literal167_buffer
__literal168 Variant_t VARIANT_STRING, 0, __literal168_buffer
__literal169 Variant_t VARIANT_STRING, 0, __literal169_buffer
__literal170 Variant_t VARIANT_STRING, 0, __literal170_buffer
__literal171 Variant_t VARIANT_STRING, 0, __literal171_buffer
__literal172 Variant_t VARIANT_STRING, 0, __literal172_buffer
__literal173 Variant_t VARIANT_STRING, 0, __literal173_buffer
__literal175 Variant_t VARIANT_STRING, 0, __literal175_buffer
__literal176 Variant_t VARIANT_STRING, 0, __literal176_buffer
__literal177 Variant_t VARIANT_STRING, 0, __literal177_buffer
__literal179 Variant_t VARIANT_STRING, 0, __literal179_buffer
__literal180 Variant_t VARIANT_STRING, 0, __literal180_buffer
__literal181 Variant_t VARIANT_STRING, 0, __literal181_buffer
__literal182 Variant_t VARIANT_STRING, 0, __literal182_buffer
__literal183 Variant_t VARIANT_STRING, 0, __literal183_buffer
__literal184 Variant_t VARIANT_STRING, 0, __literal184_buffer
__literal185 Variant_t VARIANT_STRING, 0, __literal185_buffer
__literal186 Variant_t VARIANT_STRING, 0, __literal186_buffer
__literal187 Variant_t VARIANT_STRING, 0, __literal187_buffer
__literal188 Variant_t VARIANT_STRING, 0, __literal188_buffer
__literal189 Variant_t VARIANT_STRING, 0, __literal189_buffer
__literal190 Variant_t VARIANT_STRING, 0, __literal190_buffer
__literal191 Variant_t VARIANT_STRING, 0, __literal191_buffer
__literal192 Variant_t VARIANT_STRING, 0, __literal192_buffer
__literal193 Variant_t VARIANT_STRING, 0, __literal193_buffer
__literal194 Variant_t VARIANT_STRING, 0, __literal194_buffer
__literal195 Variant_t VARIANT_STRING, 0, __literal195_buffer
__literal196 Variant_t VARIANT_STRING, 0, __literal196_buffer
__literal197 Variant_t VARIANT_STRING, 0, __literal197_buffer
__literal204 Variant_t VARIANT_STRING, 0, __literal204_buffer
__literal205 Variant_t VARIANT_STRING, 0, __literal205_buffer
__literal206 Variant_t VARIANT_STRING, 0, __literal206_buffer
__literal209 Variant_t VARIANT_STRING, 0, __literal209_buffer
__literal210 Variant_t VARIANT_STRING, 0, __literal210_buffer
__literal211 Variant_t VARIANT_STRING, 0, __literal211_buffer
__literal216 Variant_t VARIANT_STRING, 0, __literal216_buffer
__literal217 Variant_t VARIANT_STRING, 0, __literal217_buffer
__literal218 Variant_t VARIANT_STRING, 0, __literal218_buffer
__literal219 Variant_t VARIANT_STRING, 0, __literal219_buffer
__literal220 Variant_t VARIANT_STRING, 0, __literal220_buffer
__literal222 Variant_t VARIANT_STRING, 0, __literal222_buffer
__literal223 Variant_t VARIANT_STRING, 0, __literal223_buffer
__literal224 Variant_t VARIANT_STRING, 0, __literal224_buffer
__literal225 Variant_t VARIANT_STRING, 0, __literal225_buffer
__literal226 Variant_t VARIANT_STRING, 0, __literal226_buffer
__literal227 Variant_t VARIANT_STRING, 0, __literal227_buffer
__literal228 Variant_t VARIANT_STRING, 0, __literal228_buffer
__literal229 Variant_t VARIANT_STRING, 0, __literal229_buffer
__literal230 Variant_t VARIANT_STRING, 0, __literal230_buffer
__literal231 Variant_t VARIANT_STRING, 0, __literal231_buffer
__literal232 Variant_t VARIANT_STRING, 0, __literal232_buffer
__literal233 Variant_t VARIANT_STRING, 0, __literal233_buffer
__literal234 Variant_t VARIANT_STRING, 0, __literal234_buffer
__literal235 Variant_t VARIANT_STRING, 0, __literal235_buffer
__literal236 Variant_t VARIANT_STRING, 0, __literal236_buffer
__literal237 Variant_t VARIANT_STRING, 0, __literal237_buffer
__literal238 Variant_t VARIANT_STRING, 0, __literal238_buffer
__literal239 Variant_t VARIANT_STRING, 0, __literal239_buffer
__literal240 Variant_t VARIANT_STRING, 0, __literal240_buffer
__literal241 Variant_t VARIANT_STRING, 0, __literal241_buffer
__literal242 Variant_t VARIANT_STRING, 0, __literal242_buffer
__literal243 Variant_t VARIANT_STRING, 0, __literal243_buffer
__literal244 Variant_t VARIANT_STRING, 0, __literal244_buffer
__literal245 Variant_t VARIANT_STRING, 0, __literal245_buffer
__literal246 Variant_t VARIANT_STRING, 0, __literal246_buffer
__literal247 Variant_t VARIANT_STRING, 0, __literal247_buffer
__literal248 Variant_t VARIANT_STRING, 0, __literal248_buffer
__literal249 Variant_t VARIANT_STRING, 0, __literal249_buffer
__literal250 Variant_t VARIANT_STRING, 0, __literal250_buffer
__literal251 Variant_t VARIANT_STRING, 0, __literal251_buffer
__literal252 Variant_t VARIANT_STRING, 0, __literal252_buffer
__literal253 Variant_t VARIANT_STRING, 0, __literal253_buffer
__literal254 Variant_t VARIANT_STRING, 0, __literal254_buffer
__literal255 Variant_t VARIANT_STRING, 0, __literal255_buffer
__literal256 Variant_t VARIANT_STRING, 0, __literal256_buffer
__literal258 Variant_t VARIANT_STRING, 0, __literal258_buffer
__literal259 Variant_t VARIANT_STRING, 0, __literal259_buffer
__literal260 Variant_t VARIANT_STRING, 0, __literal260_buffer
__literal261 Variant_t VARIANT_STRING, 0, __literal261_buffer
__literal262 Variant_t VARIANT_STRING, 0, __literal262_buffer
__literal263 Variant_t VARIANT_STRING, 0, __literal263_buffer
__literal301 Variant_t VARIANT_STRING, 0, __literal301_buffer
__literal302 Variant_t VARIANT_STRING, 0, __literal302_buffer
__literal303 Variant_t VARIANT_STRING, 0, __literal303_buffer
__literal304 Variant_t VARIANT_STRING, 0, __literal304_buffer
__literal305 Variant_t VARIANT_STRING, 0, __literal305_buffer
__literal306 Variant_t VARIANT_STRING, 0, __literal306_buffer
__literal309 Variant_t VARIANT_STRING, 0, __literal309_buffer
__literal310 Variant_t VARIANT_STRING, 0, __literal310_buffer
__literal311 Variant_t VARIANT_STRING, 0, __literal311_buffer
__literal312 Variant_t VARIANT_STRING, 0, __literal312_buffer
__literal313 Variant_t VARIANT_STRING, 0, __literal313_buffer
__literal314 Variant_t VARIANT_STRING, 0, __literal314_buffer
__literal315 Variant_t VARIANT_STRING, 0, __literal315_buffer
__literal316 Variant_t VARIANT_STRING, 0, __literal316_buffer
__literal317 Variant_t VARIANT_STRING, 0, __literal317_buffer
__literal318 Variant_t VARIANT_STRING, 0, __literal318_buffer
__literal319 Variant_t VARIANT_STRING, 0, __literal319_buffer
__literal321 Variant_t VARIANT_STRING, 0, __literal321_buffer
__literal322 Variant_t VARIANT_STRING, 0, __literal322_buffer
__literal323 Variant_t VARIANT_STRING, 0, __literal323_buffer
__literal324 Variant_t VARIANT_STRING, 0, __literal324_buffer
__literal325 Variant_t VARIANT_STRING, 0, __literal325_buffer
__literal326 Variant_t VARIANT_STRING, 0, __literal326_buffer
__literal327 Variant_t VARIANT_STRING, 0, __literal327_buffer
__literal328 Variant_t VARIANT_STRING, 0, __literal328_buffer
__literal329 Variant_t VARIANT_STRING, 0, __literal329_buffer
__literal330 Variant_t VARIANT_STRING, 0, __literal330_buffer
__literal331 Variant_t VARIANT_STRING, 0, __literal331_buffer
__literal332 Variant_t VARIANT_STRING, 0, __literal332_buffer
__literal334 Variant_t VARIANT_STRING, 0, __literal334_buffer
__literal335 Variant_t VARIANT_STRING, 0, __literal335_buffer
__literal336 Variant_t VARIANT_STRING, 0, __literal336_buffer
__literal337 Variant_t VARIANT_STRING, 0, __literal337_buffer
__literal338 Variant_t VARIANT_STRING, 0, __literal338_buffer
__literal339 Variant_t VARIANT_STRING, 0, __literal339_buffer
__literal340 Variant_t VARIANT_STRING, 0, __literal340_buffer
__literal342 Variant_t VARIANT_STRING, 0, __literal342_buffer
__literal343 Variant_t VARIANT_STRING, 0, __literal343_buffer
__literal344 Variant_t VARIANT_STRING, 0, __literal344_buffer
__literal345 Variant_t VARIANT_STRING, 0, __literal345_buffer
__literal346 Variant_t VARIANT_STRING, 0, __literal346_buffer
__literal347 Variant_t VARIANT_STRING, 0, __literal347_buffer
__literal348 Variant_t VARIANT_STRING, 0, __literal348_buffer
__literal349 Variant_t VARIANT_STRING, 0, __literal349_buffer
__literal350 Variant_t VARIANT_STRING, 0, __literal350_buffer
__literal351 Variant_t VARIANT_STRING, 0, __literal351_buffer
__literal352 Variant_t VARIANT_STRING, 0, __literal352_buffer
__literal353 Variant_t VARIANT_STRING, 0, __literal353_buffer
__literal354 Variant_t VARIANT_STRING, 0, __literal354_buffer
__literal355 Variant_t VARIANT_STRING, 0, __literal355_buffer
__literal356 Variant_t VARIANT_STRING, 0, __literal356_buffer
__literal357 Variant_t VARIANT_STRING, 0, __literal357_buffer
__literal358 Variant_t VARIANT_STRING, 0, __literal358_buffer
__literal359 Variant_t VARIANT_STRING, 0, __literal359_buffer
__literal360 Variant_t VARIANT_STRING, 0, __literal360_buffer
__literal361 Variant_t VARIANT_STRING, 0, __literal361_buffer
__literal363 Variant_t VARIANT_STRING, 0, __literal363_buffer
__literal364 Variant_t VARIANT_STRING, 0, __literal364_buffer
__literal365 Variant_t VARIANT_STRING, 0, __literal365_buffer
__literal366 Variant_t VARIANT_STRING, 0, __literal366_buffer
__literal367 Variant_t VARIANT_STRING, 0, __literal367_buffer
__literal369 Variant_t VARIANT_STRING, 0, __literal369_buffer
__literal370 Variant_t VARIANT_STRING, 0, __literal370_buffer
__literal371 Variant_t VARIANT_STRING, 0, __literal371_buffer
__literal372 Variant_t VARIANT_STRING, 0, __literal372_buffer
__literal375 Variant_t VARIANT_STRING, 0, __literal375_buffer
__literal376 Variant_t VARIANT_STRING, 0, __literal376_buffer
__literal377 Variant_t VARIANT_STRING, 0, __literal377_buffer
__literal378 Variant_t VARIANT_STRING, 0, __literal378_buffer
__literal379 Variant_t VARIANT_STRING, 0, __literal379_buffer
__literal380 Variant_t VARIANT_STRING, 0, __literal380_buffer
__literal381 Variant_t VARIANT_STRING, 0, __literal381_buffer
__literal382 Variant_t VARIANT_STRING, 0, __literal382_buffer
__literal383 Variant_t VARIANT_STRING, 0, __literal383_buffer
__literal384 Variant_t VARIANT_STRING, 0, __literal384_buffer
__literal385 Variant_t VARIANT_STRING, 0, __literal385_buffer
__literal386 Variant_t VARIANT_STRING, 0, __literal386_buffer
__literal387 Variant_t VARIANT_STRING, 0, __literal387_buffer
__literal388 Variant_t VARIANT_STRING, 0, __literal388_buffer
__literal389 Variant_t VARIANT_STRING, 0, __literal389_buffer
__literal390 Variant_t VARIANT_STRING, 0, __literal390_buffer
__literal391 Variant_t VARIANT_STRING, 0, __literal391_buffer
__literal392 Variant_t VARIANT_STRING, 0, __literal392_buffer
__literal393 Variant_t VARIANT_STRING, 0, __literal393_buffer
__literal394 Variant_t VARIANT_STRING, 0, __literal394_buffer
__literal395 Variant_t VARIANT_STRING, 0, __literal395_buffer
__literal396 Variant_t VARIANT_STRING, 0, __literal396_buffer
__literal397 Variant_t VARIANT_STRING, 0, __literal397_buffer
__literal398 Variant_t VARIANT_STRING, 0, __literal398_buffer
__literal399 Variant_t VARIANT_STRING, 0, __literal399_buffer
__literal400 Variant_t VARIANT_STRING, 0, __literal400_buffer
__literal401 Variant_t VARIANT_STRING, 0, __literal401_buffer
__literal402 Variant_t VARIANT_STRING, 0, __literal402_buffer
__literal403 Variant_t VARIANT_STRING, 0, __literal403_buffer
__literal404 Variant_t VARIANT_STRING, 0, __literal404_buffer
__literal405 Variant_t VARIANT_STRING, 0, __literal405_buffer
__literal406 Variant_t VARIANT_STRING, 0, __literal406_buffer
__literal407 Variant_t VARIANT_STRING, 0, __literal407_buffer
__literal408 Variant_t VARIANT_STRING, 0, __literal408_buffer
__literal409 Variant_t VARIANT_STRING, 0, __literal409_buffer
__literal410 Variant_t VARIANT_STRING, 0, __literal410_buffer
__literal411 Variant_t VARIANT_STRING, 0, __literal411_buffer
__literal412 Variant_t VARIANT_STRING, 0, __literal412_buffer
__literal413 Variant_t VARIANT_STRING, 0, __literal413_buffer
__literal414 Variant_t VARIANT_STRING, 0, __literal414_buffer
__literal415 Variant_t VARIANT_STRING, 0, __literal415_buffer
__literal416 Variant_t VARIANT_STRING, 0, __literal416_buffer
__literal417 Variant_t VARIANT_STRING, 0, __literal417_buffer
__literal418 Variant_t VARIANT_STRING, 0, __literal418_buffer
__literal419 Variant_t VARIANT_STRING, 0, __literal419_buffer
__literal421 Variant_t VARIANT_STRING, 0, __literal421_buffer
__literal422 Variant_t VARIANT_STRING, 0, __literal422_buffer
__literal423 Variant_t VARIANT_STRING, 0, __literal423_buffer
__literal424 Variant_t VARIANT_STRING, 0, __literal424_buffer
__literal428 Variant_t VARIANT_STRING, 0, __literal428_buffer
__literal430 Variant_t VARIANT_STRING, 0, __literal430_buffer
__literal431 Variant_t VARIANT_STRING, 0, __literal431_buffer
__literal435 Variant_t VARIANT_STRING, 0, __literal435_buffer
__literal436 Variant_t VARIANT_STRING, 0, __literal436_buffer
__literal439 Variant_t VARIANT_STRING, 0, __literal439_buffer
__literal440 Variant_t VARIANT_STRING, 0, __literal440_buffer
__literal442 Variant_t VARIANT_STRING, 0, __literal442_buffer
__literal444 Variant_t VARIANT_STRING, 0, __literal444_buffer
__literal445 Variant_t VARIANT_STRING, 0, __literal445_buffer
__literal446 Variant_t VARIANT_STRING, 0, __literal446_buffer
__literal447 Variant_t VARIANT_STRING, 0, __literal447_buffer
__literal448 Variant_t VARIANT_STRING, 0, __literal448_buffer
__literal449 Variant_t VARIANT_STRING, 0, __literal449_buffer
__literal450 Variant_t VARIANT_STRING, 0, __literal450_buffer
__literal451 Variant_t VARIANT_STRING, 0, __literal451_buffer
__literal452 Variant_t VARIANT_STRING, 0, __literal452_buffer
__literal453 Variant_t VARIANT_STRING, 0, __literal453_buffer
__literal454 Variant_t VARIANT_STRING, 0, __literal454_buffer
__literal455 Variant_t VARIANT_STRING, 0, __literal455_buffer
__literal456 Variant_t VARIANT_STRING, 0, __literal456_buffer
__literal457 Variant_t VARIANT_STRING, 0, __literal457_buffer
__literal458 Variant_t VARIANT_STRING, 0, __literal458_buffer
__literal459 Variant_t VARIANT_STRING, 0, __literal459_buffer
__literal460 Variant_t VARIANT_STRING, 0, __literal460_buffer
__literal461 Variant_t VARIANT_STRING, 0, __literal461_buffer
__literal462 Variant_t VARIANT_STRING, 0, __literal462_buffer
__literal463 Variant_t VARIANT_STRING, 0, __literal463_buffer
__literal466 Variant_t VARIANT_STRING, 0, __literal466_buffer
__literal467 Variant_t VARIANT_STRING, 0, __literal467_buffer
__literal468 Variant_t VARIANT_STRING, 0, __literal468_buffer
__literal469 Variant_t VARIANT_STRING, 0, __literal469_buffer
__literal471 Variant_t VARIANT_STRING, 0, __literal471_buffer
__literal472 Variant_t VARIANT_STRING, 0, __literal472_buffer
__literal480 Variant_t VARIANT_STRING, 0, __literal480_buffer
__literal481 Variant_t VARIANT_STRING, 0, __literal481_buffer
__literal482 Variant_t VARIANT_STRING, 0, __literal482_buffer
__literal483 Variant_t VARIANT_STRING, 0, __literal483_buffer
__literal491 Variant_t VARIANT_STRING, 0, __literal491_buffer
__literal492 Variant_t VARIANT_STRING, 0, __literal492_buffer
__literal544 Variant_t VARIANT_STRING, 0, __literal544_buffer
__literal545 Variant_t VARIANT_STRING, 0, __literal545_buffer
__literal546 Variant_t VARIANT_STRING, 0, __literal546_buffer
__literal549 Variant_t VARIANT_STRING, 0, __literal549_buffer
__literal550 Variant_t VARIANT_STRING, 0, __literal550_buffer
__literal551 Variant_t VARIANT_STRING, 0, __literal551_buffer
__literal552 Variant_t VARIANT_STRING, 0, __literal552_buffer
__literal553 Variant_t VARIANT_STRING, 0, __literal553_buffer
__literal555 Variant_t VARIANT_STRING, 0, __literal555_buffer
__literal557 Variant_t VARIANT_STRING, 0, __literal557_buffer
__literal558 Variant_t VARIANT_STRING, 0, __literal558_buffer
__literal559 Variant_t VARIANT_STRING, 0, __literal559_buffer
__literal560 Variant_t VARIANT_STRING, 0, __literal560_buffer
__literal562 Variant_t VARIANT_STRING, 0, __literal562_buffer
__literal563 Variant_t VARIANT_STRING, 0, __literal563_buffer
__literal564 Variant_t VARIANT_STRING, 0, __literal564_buffer
__literal565 Variant_t VARIANT_STRING, 0, __literal565_buffer
__literal566 Variant_t VARIANT_STRING, 0, __literal566_buffer
__literal567 Variant_t VARIANT_STRING, 0, __literal567_buffer
__literal568 Variant_t VARIANT_STRING, 0, __literal568_buffer
__literal569 Variant_t VARIANT_STRING, 0, __literal569_buffer
__literal570 Variant_t VARIANT_STRING, 0, __literal570_buffer
__literal571 Variant_t VARIANT_STRING, 0, __literal571_buffer
__literal573 Variant_t VARIANT_STRING, 0, __literal573_buffer
__literal574 Variant_t VARIANT_STRING, 0, __literal574_buffer
__literal576 Variant_t VARIANT_STRING, 0, __literal576_buffer
__literal577 Variant_t VARIANT_STRING, 0, __literal577_buffer
__literal578 Variant_t VARIANT_STRING, 0, __literal578_buffer
__literal579 Variant_t VARIANT_STRING, 0, __literal579_buffer
__literal580 Variant_t VARIANT_STRING, 0, __literal580_buffer
__literal581 Variant_t VARIANT_STRING, 0, __literal581_buffer
__literal582 Variant_t VARIANT_STRING, 0, __literal582_buffer
__literal583 Variant_t VARIANT_STRING, 0, __literal583_buffer
__literal584 Variant_t VARIANT_STRING, 0, __literal584_buffer
__literal585 Variant_t VARIANT_STRING, 0, __literal585_buffer
__literal586 Variant_t VARIANT_STRING, 0, __literal586_buffer
__literal587 Variant_t VARIANT_STRING, 0, __literal587_buffer
__literal588 Variant_t VARIANT_STRING, 0, __literal588_buffer
__literal589 Variant_t VARIANT_STRING, 0, __literal589_buffer
__literal591 Variant_t VARIANT_STRING, 0, __literal591_buffer
__literal592 Variant_t VARIANT_STRING, 0, __literal592_buffer
__literal593 Variant_t VARIANT_STRING, 0, __literal593_buffer
__literal594 Variant_t VARIANT_STRING, 0, __literal594_buffer
__literal595 Variant_t VARIANT_STRING, 0, __literal595_buffer
__literal596 Variant_t VARIANT_STRING, 0, __literal596_buffer
__literal597 Variant_t VARIANT_STRING, 0, __literal597_buffer
__literal598 Variant_t VARIANT_STRING, 0, __literal598_buffer
__literal599 Variant_t VARIANT_STRING, 0, __literal599_buffer
__literal600 Variant_t VARIANT_STRING, 0, __literal600_buffer
__literal601 Variant_t VARIANT_STRING, 0, __literal601_buffer
__literal602 Variant_t VARIANT_STRING, 0, __literal602_buffer
__literal603 Variant_t VARIANT_STRING, 0, __literal603_buffer
__literal604 Variant_t VARIANT_STRING, 0, __literal604_buffer
__literal605 Variant_t VARIANT_STRING, 0, __literal605_buffer
__literal606 Variant_t VARIANT_STRING, 0, __literal606_buffer
__literal607 Variant_t VARIANT_STRING, 0, __literal607_buffer
__literal608 Variant_t VARIANT_STRING, 0, __literal608_buffer
__literal609 Variant_t VARIANT_STRING, 0, __literal609_buffer
__literal610 Variant_t VARIANT_STRING, 0, __literal610_buffer
__literal611 Variant_t VARIANT_STRING, 0, __literal611_buffer
__literal612 Variant_t VARIANT_STRING, 0, __literal612_buffer
__literal613 Variant_t VARIANT_STRING, 0, __literal613_buffer
__literal614 Variant_t VARIANT_STRING, 0, __literal614_buffer
__literal615 Variant_t VARIANT_STRING, 0, __literal615_buffer
__literal616 Variant_t VARIANT_STRING, 0, __literal616_buffer
__literal617 Variant_t VARIANT_STRING, 0, __literal617_buffer
__literal618 Variant_t VARIANT_STRING, 0, __literal618_buffer
__literal619 Variant_t VARIANT_STRING, 0, __literal619_buffer
__literal620 Variant_t VARIANT_STRING, 0, __literal620_buffer
__literal621 Variant_t VARIANT_STRING, 0, __literal621_buffer
__literal622 Variant_t VARIANT_STRING, 0, __literal622_buffer
__literal623 Variant_t VARIANT_STRING, 0, __literal623_buffer
__literal624 Variant_t VARIANT_STRING, 0, __literal624_buffer
__literal625 Variant_t VARIANT_STRING, 0, __literal625_buffer
__literal626 Variant_t VARIANT_STRING, 0, __literal626_buffer
__literal627 Variant_t VARIANT_STRING, 0, __literal627_buffer
__literal628 Variant_t VARIANT_STRING, 0, __literal628_buffer
__literal629 Variant_t VARIANT_STRING, 0, __literal629_buffer
__literal630 Variant_t VARIANT_STRING, 0, __literal630_buffer
__literal631 Variant_t VARIANT_STRING, 0, __literal631_buffer
__literal632 Variant_t VARIANT_STRING, 0, __literal632_buffer
__literal633 Variant_t VARIANT_STRING, 0, __literal633_buffer
__literal634 Variant_t VARIANT_STRING, 0, __literal634_buffer
__literal635 Variant_t VARIANT_STRING, 0, __literal635_buffer
__literal636 Variant_t VARIANT_STRING, 0, __literal636_buffer
__literal637 Variant_t VARIANT_STRING, 0, __literal637_buffer
__literal638 Variant_t VARIANT_STRING, 0, __literal638_buffer
__literal639 Variant_t VARIANT_STRING, 0, __literal639_buffer
__literal640 Variant_t VARIANT_STRING, 0, __literal640_buffer
__literal641 Variant_t VARIANT_STRING, 0, __literal641_buffer
__literal642 Variant_t VARIANT_STRING, 0, __literal642_buffer
__literal643 Variant_t VARIANT_STRING, 0, __literal643_buffer
__literal644 Variant_t VARIANT_STRING, 0, __literal644_buffer
__literal645 Variant_t VARIANT_STRING, 0, __literal645_buffer
__literal646 Variant_t VARIANT_STRING, 0, __literal646_buffer
__literal647 Variant_t VARIANT_STRING, 0, __literal647_buffer
__literal648 Variant_t VARIANT_STRING, 0, __literal648_buffer
__literal649 Variant_t VARIANT_STRING, 0, __literal649_buffer
__literal650 Variant_t VARIANT_STRING, 0, __literal650_buffer
__literal651 Variant_t VARIANT_STRING, 0, __literal651_buffer
__literal652 Variant_t VARIANT_STRING, 0, __literal652_buffer
__literal653 Variant_t VARIANT_STRING, 0, __literal653_buffer
__literal654 Variant_t VARIANT_STRING, 0, __literal654_buffer
__literal655 Variant_t VARIANT_STRING, 0, __literal655_buffer
__literal656 Variant_t VARIANT_STRING, 0, __literal656_buffer
__literal657 Variant_t VARIANT_STRING, 0, __literal657_buffer
__literal658 Variant_t VARIANT_STRING, 0, __literal658_buffer
__literal660 Variant_t VARIANT_STRING, 0, __literal660_buffer
__literal661 Variant_t VARIANT_STRING, 0, __literal661_buffer
__literal662 Variant_t VARIANT_STRING, 0, __literal662_buffer
__literal663 Variant_t VARIANT_STRING, 0, __literal663_buffer
__literal664 Variant_t VARIANT_STRING, 0, __literal664_buffer
__literal665 Variant_t VARIANT_STRING, 0, __literal665_buffer
__literal666 Variant_t VARIANT_STRING, 0, __literal666_buffer
__literal667 Variant_t VARIANT_STRING, 0, __literal667_buffer
__literal669 Variant_t VARIANT_STRING, 0, __literal669_buffer
REG_PARAMS32 Variant_t VARIANT_ARRAY, 0, REG_PARAMS32_buffer
REG_PARAMS64 Variant_t VARIANT_ARRAY, 0, REG_PARAMS64_buffer
__literal671 Variant_t VARIANT_STRING, 0, __literal671_buffer
__literal680 Variant_t VARIANT_STRING, 0, __literal680_buffer
__literal681 Variant_t VARIANT_STRING, 0, __literal681_buffer
__literal682 Variant_t VARIANT_STRING, 0, __literal682_buffer
__literal693 Variant_t VARIANT_STRING, 0, __literal693_buffer
__literal694 Variant_t VARIANT_STRING, 0, __literal694_buffer
__literal695 Variant_t VARIANT_STRING, 0, __literal695_buffer
__literal702 Variant_t VARIANT_STRING, 0, __literal702_buffer
__literal713 Variant_t VARIANT_STRING, 0, __literal713_buffer
__literal718 Variant_t VARIANT_STRING, 0, __literal718_buffer
__literal719 Variant_t VARIANT_STRING, 0, __literal719_buffer
__literal722 Variant_t VARIANT_STRING, 0, __literal722_buffer
__literal723 Variant_t VARIANT_STRING, 0, __literal723_buffer
__literal726 Variant_t VARIANT_STRING, 0, __literal726_buffer
__literal730 Variant_t VARIANT_STRING, 0, __literal730_buffer
__literal731 Variant_t VARIANT_STRING, 0, __literal731_buffer
__literal732 Variant_t VARIANT_STRING, 0, __literal732_buffer
__literal733 Variant_t VARIANT_STRING, 0, __literal733_buffer
__literal750 Variant_t VARIANT_STRING, 0, __literal750_buffer
__literal754 Variant_t VARIANT_STRING, 0, __literal754_buffer
__literal778 Variant_t VARIANT_STRING, 0, __literal778_buffer
__literal779 Variant_t VARIANT_STRING, 0, __literal779_buffer
__literal780 Variant_t VARIANT_STRING, 0, __literal780_buffer
__literal782 Variant_t VARIANT_STRING, 0, __literal782_buffer
__literal783 Variant_t VARIANT_STRING, 0, __literal783_buffer
__literal784 Variant_t VARIANT_STRING, 0, __literal784_buffer
__literal785 Variant_t VARIANT_STRING, 0, __literal785_buffer
__literal786 Variant_t VARIANT_STRING, 0, __literal786_buffer
__literal787 Variant_t VARIANT_STRING, 0, __literal787_buffer
__literal788 Variant_t VARIANT_STRING, 0, __literal788_buffer
__literal789 Variant_t VARIANT_STRING, 0, __literal789_buffer
__literal790 Variant_t VARIANT_STRING, 0, __literal790_buffer
__literal791 Variant_t VARIANT_STRING, 0, __literal791_buffer
__literal792 Variant_t VARIANT_STRING, 0, __literal792_buffer
__literal793 Variant_t VARIANT_STRING, 0, __literal793_buffer
__literal794 Variant_t VARIANT_STRING, 0, __literal794_buffer
__literal795 Variant_t VARIANT_STRING, 0, __literal795_buffer
__literal796 Variant_t VARIANT_STRING, 0, __literal796_buffer
__literal798 Variant_t VARIANT_STRING, 0, __literal798_buffer
__literal799 Variant_t VARIANT_STRING, 0, __literal799_buffer
__literal800 Variant_t VARIANT_STRING, 0, __literal800_buffer
__literal801 Variant_t VARIANT_STRING, 0, __literal801_buffer
__literal802 Variant_t VARIANT_STRING, 0, __literal802_buffer
__literal807 Variant_t VARIANT_STRING, 0, __literal807_buffer
__literal813 Variant_t VARIANT_STRING, 0, __literal813_buffer
__literal814 Variant_t VARIANT_STRING, 0, __literal814_buffer
__literal815 Variant_t VARIANT_STRING, 0, __literal815_buffer
__literal816 Variant_t VARIANT_STRING, 0, __literal816_buffer
__literal817 Variant_t VARIANT_STRING, 0, __literal817_buffer
__literal818 Variant_t VARIANT_STRING, 0, __literal818_buffer
__literal819 Variant_t VARIANT_STRING, 0, __literal819_buffer
__literal820 Variant_t VARIANT_STRING, 0, __literal820_buffer
__literal821 Variant_t VARIANT_STRING, 0, __literal821_buffer
__literal822 Variant_t VARIANT_STRING, 0, __literal822_buffer
__literal824 Variant_t VARIANT_STRING, 0, __literal824_buffer
__literal825 Variant_t VARIANT_STRING, 0, __literal825_buffer
__literal826 Variant_t VARIANT_STRING, 0, __literal826_buffer
__literal827 Variant_t VARIANT_STRING, 0, __literal827_buffer
__literal830 Variant_t VARIANT_STRING, 0, __literal830_buffer
__literal835 Variant_t VARIANT_STRING, 0, __literal835_buffer
__literal836 Variant_t VARIANT_STRING, 0, __literal836_buffer
__literal837 Variant_t VARIANT_STRING, 0, __literal837_buffer
__literal838 Variant_t VARIANT_STRING, 0, __literal838_buffer
__literal839 Variant_t VARIANT_STRING, 0, __literal839_buffer
__literal840 Variant_t VARIANT_STRING, 0, __literal840_buffer
__literal841 Variant_t VARIANT_STRING, 0, __literal841_buffer
__literal842 Variant_t VARIANT_STRING, 0, __literal842_buffer
__literal843 Variant_t VARIANT_STRING, 0, __literal843_buffer
__literal845 Variant_t VARIANT_STRING, 0, __literal845_buffer
__literal846 Variant_t VARIANT_STRING, 0, __literal846_buffer
__literal847 Variant_t VARIANT_STRING, 0, __literal847_buffer
__literal848 Variant_t VARIANT_STRING, 0, __literal848_buffer
__literal849 Variant_t VARIANT_STRING, 0, __literal849_buffer
__literal850 Variant_t VARIANT_STRING, 0, __literal850_buffer
__literal851 Variant_t VARIANT_STRING, 0, __literal851_buffer
__literal852 Variant_t VARIANT_STRING, 0, __literal852_buffer
__literal853 Variant_t VARIANT_STRING, 0, __literal853_buffer
__literal858 Variant_t VARIANT_STRING, 0, __literal858_buffer
__literal859 Variant_t VARIANT_STRING, 0, __literal859_buffer
__literal860 Variant_t VARIANT_STRING, 0, __literal860_buffer
__literal861 Variant_t VARIANT_STRING, 0, __literal861_buffer
__literal862 Variant_t VARIANT_STRING, 0, __literal862_buffer
__literal863 Variant_t VARIANT_STRING, 0, __literal863_buffer
__literal864 Variant_t VARIANT_STRING, 0, __literal864_buffer
__literal865 Variant_t VARIANT_STRING, 0, __literal865_buffer
__literal866 Variant_t VARIANT_STRING, 0, __literal866_buffer
__literal867 Variant_t VARIANT_STRING, 0, __literal867_buffer
__literal868 Variant_t VARIANT_STRING, 0, __literal868_buffer
__literal869 Variant_t VARIANT_STRING, 0, __literal869_buffer
__literal870 Variant_t VARIANT_STRING, 0, __literal870_buffer
__literal871 Variant_t VARIANT_STRING, 0, __literal871_buffer
__literal872 Variant_t VARIANT_STRING, 0, __literal872_buffer
__literal873 Variant_t VARIANT_STRING, 0, __literal873_buffer
__literal874 Variant_t VARIANT_STRING, 0, __literal874_buffer
__literal875 Variant_t VARIANT_STRING, 0, __literal875_buffer
__literal876 Variant_t VARIANT_STRING, 0, __literal876_buffer
__literal877 Variant_t VARIANT_STRING, 0, __literal877_buffer
__literal878 Variant_t VARIANT_STRING, 0, __literal878_buffer
__literal879 Variant_t VARIANT_STRING, 0, __literal879_buffer
__literal880 Variant_t VARIANT_STRING, 0, __literal880_buffer
__literal881 Variant_t VARIANT_STRING, 0, __literal881_buffer
__literal882 Variant_t VARIANT_STRING, 0, __literal882_buffer
__literal883 Variant_t VARIANT_STRING, 0, __literal883_buffer
__literal884 Variant_t VARIANT_STRING, 0, __literal884_buffer
__literal885 Variant_t VARIANT_STRING, 0, __literal885_buffer
__literal886 Variant_t VARIANT_STRING, 0, __literal886_buffer
__literal887 Variant_t VARIANT_STRING, 0, __literal887_buffer
__literal888 Variant_t VARIANT_STRING, 0, __literal888_buffer
__literal889 Variant_t VARIANT_STRING, 0, __literal889_buffer
__literal890 Variant_t VARIANT_STRING, 0, __literal890_buffer
__literal891 Variant_t VARIANT_STRING, 0, __literal891_buffer
__literal892 Variant_t VARIANT_STRING, 0, __literal892_buffer
__literal893 Variant_t VARIANT_STRING, 0, __literal893_buffer
__literal894 Variant_t VARIANT_STRING, 0, __literal894_buffer
__literal895 Variant_t VARIANT_STRING, 0, __literal895_buffer
__literal896 Variant_t VARIANT_STRING, 0, __literal896_buffer
__literal897 Variant_t VARIANT_STRING, 0, __literal897_buffer
__literal901 Variant_t VARIANT_STRING, 0, __literal901_buffer
__literal903 Variant_t VARIANT_STRING, 0, __literal903_buffer
__literal904 Variant_t VARIANT_STRING, 0, __literal904_buffer
__literal905 Variant_t VARIANT_STRING, 0, __literal905_buffer
__literal906 Variant_t VARIANT_STRING, 0, __literal906_buffer
__literal914 Variant_t VARIANT_STRING, 0, __literal914_buffer
__literal915 Variant_t VARIANT_STRING, 0, __literal915_buffer
__literal916 Variant_t VARIANT_STRING, 0, __literal916_buffer
__literal917 Variant_t VARIANT_STRING, 0, __literal917_buffer
__literal918 Variant_t VARIANT_STRING, 0, __literal918_buffer
__literal919 Variant_t VARIANT_STRING, 0, __literal919_buffer
__literal920 Variant_t VARIANT_STRING, 0, __literal920_buffer
__literal921 Variant_t VARIANT_STRING, 0, __literal921_buffer
__literal922 Variant_t VARIANT_STRING, 0, __literal922_buffer
__literal923 Variant_t VARIANT_STRING, 0, __literal923_buffer
__literal924 Variant_t VARIANT_STRING, 0, __literal924_buffer
__literal925 Variant_t VARIANT_STRING, 0, __literal925_buffer
__literal926 Variant_t VARIANT_STRING, 0, __literal926_buffer
__literal928 Variant_t VARIANT_STRING, 0, __literal928_buffer
__literal930 Variant_t VARIANT_STRING, 0, __literal930_buffer
__literal934 Variant_t VARIANT_STRING, 0, __literal934_buffer
__literal935 Variant_t VARIANT_STRING, 0, __literal935_buffer
__literal936 Variant_t VARIANT_STRING, 0, __literal936_buffer
__literal937 Variant_t VARIANT_STRING, 0, __literal937_buffer
__literal938 Variant_t VARIANT_STRING, 0, __literal938_buffer
__literal939 Variant_t VARIANT_STRING, 0, __literal939_buffer
__literal940 Variant_t VARIANT_STRING, 0, __literal940_buffer
__literal941 Variant_t VARIANT_STRING, 0, __literal941_buffer
__literal942 Variant_t VARIANT_STRING, 0, __literal942_buffer
__literal943 Variant_t VARIANT_STRING, 0, __literal943_buffer
__literal944 Variant_t VARIANT_STRING, 0, __literal944_buffer
__literal945 Variant_t VARIANT_STRING, 0, __literal945_buffer
__literal946 Variant_t VARIANT_STRING, 0, __literal946_buffer
__literal947 Variant_t VARIANT_STRING, 0, __literal947_buffer
__literal948 Variant_t VARIANT_STRING, 0, __literal948_buffer
__literal949 Variant_t VARIANT_STRING, 0, __literal949_buffer
__literal950 Variant_t VARIANT_STRING, 0, __literal950_buffer
__literal951 Variant_t VARIANT_STRING, 0, __literal951_buffer
__literal952 Variant_t VARIANT_STRING, 0, __literal952_buffer
__literal953 Variant_t VARIANT_STRING, 0, __literal953_buffer
__literal954 Variant_t VARIANT_STRING, 0, __literal954_buffer
__literal955 Variant_t VARIANT_STRING, 0, __literal955_buffer
__literal956 Variant_t VARIANT_STRING, 0, __literal956_buffer
__literal957 Variant_t VARIANT_STRING, 0, __literal957_buffer
__literal958 Variant_t VARIANT_STRING, 0, __literal958_buffer
__literal959 Variant_t VARIANT_STRING, 0, __literal959_buffer
__literal960 Variant_t VARIANT_STRING, 0, __literal960_buffer
__literal961 Variant_t VARIANT_STRING, 0, __literal961_buffer
__literal962 Variant_t VARIANT_STRING, 0, __literal962_buffer
__literal965 Variant_t VARIANT_STRING, 0, __literal965_buffer
__literal969 Variant_t VARIANT_STRING, 0, __literal969_buffer
__literal971 Variant_t VARIANT_STRING, 0, __literal971_buffer
__literal973 Variant_t VARIANT_STRING, 0, __literal973_buffer
__literal977 Variant_t VARIANT_STRING, 0, __literal977_buffer
__literal978 Variant_t VARIANT_STRING, 0, __literal978_buffer
__literal979 Variant_t VARIANT_STRING, 0, __literal979_buffer
__literal980 Variant_t VARIANT_STRING, 0, __literal980_buffer
__literal981 Variant_t VARIANT_STRING, 0, __literal981_buffer
__literal982 Variant_t VARIANT_STRING, 0, __literal982_buffer
__literal993 Variant_t VARIANT_STRING, 0, __literal993_buffer
__literal996 Variant_t VARIANT_STRING, 0, __literal996_buffer
__literal1002 Variant_t VARIANT_STRING, 0, __literal1002_buffer
__literal1003 Variant_t VARIANT_STRING, 0, __literal1003_buffer
__literal1005 Variant_t VARIANT_STRING, 0, __literal1005_buffer
__literal1006 Variant_t VARIANT_STRING, 0, __literal1006_buffer
__literal1011 Variant_t VARIANT_STRING, 0, __literal1011_buffer
__literal1014 Variant_t VARIANT_STRING, 0, __literal1014_buffer
__literal1016 Variant_t VARIANT_STRING, 0, __literal1016_buffer
__literal1017 Variant_t VARIANT_STRING, 0, __literal1017_buffer
__literal1019 Variant_t VARIANT_STRING, 0, __literal1019_buffer
__literal1023 Variant_t VARIANT_STRING, 0, __literal1023_buffer
__literal1025 Variant_t VARIANT_STRING, 0, __literal1025_buffer
__literal1072 Variant_t VARIANT_STRING, 0, __literal1072_buffer
__literal1083 Variant_t VARIANT_STRING, 0, __literal1083_buffer
__literal1090 Variant_t VARIANT_STRING, 0, __literal1090_buffer
__literal1091 Variant_t VARIANT_STRING, 0, __literal1091_buffer
__literal1096 Variant_t VARIANT_STRING, 0, __literal1096_buffer
__literal1097 Variant_t VARIANT_STRING, 0, __literal1097_buffer
__literal1098 Variant_t VARIANT_STRING, 0, __literal1098_buffer
__literal1099 Variant_t VARIANT_STRING, 0, __literal1099_buffer
__literal1100 Variant_t VARIANT_STRING, 0, __literal1100_buffer
__literal1101 Variant_t VARIANT_STRING, 0, __literal1101_buffer
__literal1102 Variant_t VARIANT_STRING, 0, __literal1102_buffer
__literal1103 Variant_t VARIANT_STRING, 0, __literal1103_buffer
__literal1104 Variant_t VARIANT_STRING, 0, __literal1104_buffer
__literal1105 Variant_t VARIANT_STRING, 0, __literal1105_buffer
__literal1106 Variant_t VARIANT_STRING, 0, __literal1106_buffer
__literal1107 Variant_t VARIANT_STRING, 0, __literal1107_buffer
__literal1108 Variant_t VARIANT_STRING, 0, __literal1108_buffer
__literal1109 Variant_t VARIANT_STRING, 0, __literal1109_buffer
__literal1110 Variant_t VARIANT_STRING, 0, __literal1110_buffer
__literal1111 Variant_t VARIANT_STRING, 0, __literal1111_buffer
__literal1112 Variant_t VARIANT_STRING, 0, __literal1112_buffer
__literal1113 Variant_t VARIANT_STRING, 0, __literal1113_buffer
__literal1114 Variant_t VARIANT_STRING, 0, __literal1114_buffer
__literal1115 Variant_t VARIANT_STRING, 0, __literal1115_buffer
__literal1116 Variant_t VARIANT_STRING, 0, __literal1116_buffer
__literal1124 Variant_t VARIANT_STRING, 0, __literal1124_buffer
__literal1125 Variant_t VARIANT_STRING, 0, __literal1125_buffer
__literal1126 Variant_t VARIANT_STRING, 0, __literal1126_buffer
__literal1140 Variant_t VARIANT_STRING, 0, __literal1140_buffer
__literal1156 Variant_t VARIANT_STRING, 0, __literal1156_buffer
__literal1157 Variant_t VARIANT_STRING, 0, __literal1157_buffer
__literal1179 Variant_t VARIANT_STRING, 0, __literal1179_buffer
__literal1180 Variant_t VARIANT_STRING, 0, __literal1180_buffer
__literal1181 Variant_t VARIANT_STRING, 0, __literal1181_buffer
__literal1182 Variant_t VARIANT_STRING, 0, __literal1182_buffer
__literal1183 Variant_t VARIANT_STRING, 0, __literal1183_buffer
__literal1191 Variant_t VARIANT_STRING, 0, __literal1191_buffer
__literal1192 Variant_t VARIANT_STRING, 0, __literal1192_buffer
__literal1193 Variant_t VARIANT_STRING, 0, __literal1193_buffer
__literal1194 Variant_t VARIANT_STRING, 0, __literal1194_buffer
__literal1195 Variant_t VARIANT_STRING, 0, __literal1195_buffer
__literal1196 Variant_t VARIANT_STRING, 0, __literal1196_buffer
__literal1197 Variant_t VARIANT_STRING, 0, __literal1197_buffer
__literal1198 Variant_t VARIANT_STRING, 0, __literal1198_buffer
__literal1199 Variant_t VARIANT_STRING, 0, __literal1199_buffer
__literal1200 Variant_t VARIANT_STRING, 0, __literal1200_buffer
__literal1201 Variant_t VARIANT_STRING, 0, __literal1201_buffer
__literal1202 Variant_t VARIANT_STRING, 0, __literal1202_buffer
__literal1203 Variant_t VARIANT_STRING, 0, __literal1203_buffer
__literal1204 Variant_t VARIANT_STRING, 0, __literal1204_buffer
__literal1205 Variant_t VARIANT_STRING, 0, __literal1205_buffer
__literal1206 Variant_t VARIANT_STRING, 0, __literal1206_buffer
__literal1207 Variant_t VARIANT_STRING, 0, __literal1207_buffer
__literal1208 Variant_t VARIANT_STRING, 0, __literal1208_buffer
__literal1209 Variant_t VARIANT_STRING, 0, __literal1209_buffer
__literal1210 Variant_t VARIANT_STRING, 0, __literal1210_buffer
__literal1211 Variant_t VARIANT_STRING, 0, __literal1211_buffer
__literal1212 Variant_t VARIANT_STRING, 0, __literal1212_buffer
__literal1213 Variant_t VARIANT_STRING, 0, __literal1213_buffer
__literal1214 Variant_t VARIANT_STRING, 0, __literal1214_buffer
__literal1215 Variant_t VARIANT_STRING, 0, __literal1215_buffer
__literal1216 Variant_t VARIANT_STRING, 0, __literal1216_buffer
__literal1217 Variant_t VARIANT_STRING, 0, __literal1217_buffer
__literal1218 Variant_t VARIANT_STRING, 0, __literal1218_buffer
__literal1219 Variant_t VARIANT_STRING, 0, __literal1219_buffer
__literal1220 Variant_t VARIANT_STRING, 0, __literal1220_buffer
__literal1221 Variant_t VARIANT_STRING, 0, __literal1221_buffer
__literal1222 Variant_t VARIANT_STRING, 0, __literal1222_buffer
__literal1223 Variant_t VARIANT_STRING, 0, __literal1223_buffer
__literal1224 Variant_t VARIANT_STRING, 0, __literal1224_buffer
__literal1225 Variant_t VARIANT_STRING, 0, __literal1225_buffer
__literal1226 Variant_t VARIANT_STRING, 0, __literal1226_buffer
__literal1227 Variant_t VARIANT_STRING, 0, __literal1227_buffer
__literal1228 Variant_t VARIANT_STRING, 0, __literal1228_buffer
__literal1229 Variant_t VARIANT_STRING, 0, __literal1229_buffer
__literal1230 Variant_t VARIANT_STRING, 0, __literal1230_buffer
__literal1231 Variant_t VARIANT_STRING, 0, __literal1231_buffer
__literal1232 Variant_t VARIANT_STRING, 0, __literal1232_buffer
__literal1233 Variant_t VARIANT_STRING, 0, __literal1233_buffer
__literal1234 Variant_t VARIANT_STRING, 0, __literal1234_buffer
__literal1235 Variant_t VARIANT_STRING, 0, __literal1235_buffer
__literal1236 Variant_t VARIANT_STRING, 0, __literal1236_buffer
__literal1237 Variant_t VARIANT_STRING, 0, __literal1237_buffer
__literal1238 Variant_t VARIANT_STRING, 0, __literal1238_buffer
__literal1239 Variant_t VARIANT_STRING, 0, __literal1239_buffer
__literal1240 Variant_t VARIANT_STRING, 0, __literal1240_buffer
__literal1241 Variant_t VARIANT_STRING, 0, __literal1241_buffer
__literal1242 Variant_t VARIANT_STRING, 0, __literal1242_buffer
__literal1243 Variant_t VARIANT_STRING, 0, __literal1243_buffer
__literal1244 Variant_t VARIANT_STRING, 0, __literal1244_buffer
__literal1245 Variant_t VARIANT_STRING, 0, __literal1245_buffer
__literal1246 Variant_t VARIANT_STRING, 0, __literal1246_buffer
__literal1250 Variant_t VARIANT_STRING, 0, __literal1250_buffer
__literal1251 Variant_t VARIANT_STRING, 0, __literal1251_buffer
__literal1252 Variant_t VARIANT_STRING, 0, __literal1252_buffer
__literal1255 Variant_t VARIANT_STRING, 0, __literal1255_buffer
__literal1256 Variant_t VARIANT_STRING, 0, __literal1256_buffer
__literal1257 Variant_t VARIANT_STRING, 0, __literal1257_buffer
__literal1258 Variant_t VARIANT_STRING, 0, __literal1258_buffer
__literal1259 Variant_t VARIANT_STRING, 0, __literal1259_buffer
__literal1260 Variant_t VARIANT_STRING, 0, __literal1260_buffer
__literal1261 Variant_t VARIANT_STRING, 0, __literal1261_buffer
__literal1262 Variant_t VARIANT_STRING, 0, __literal1262_buffer
__literal1263 Variant_t VARIANT_STRING, 0, __literal1263_buffer
__literal1264 Variant_t VARIANT_STRING, 0, __literal1264_buffer
__literal1265 Variant_t VARIANT_STRING, 0, __literal1265_buffer
__literal1266 Variant_t VARIANT_STRING, 0, __literal1266_buffer
__literal1267 Variant_t VARIANT_STRING, 0, __literal1267_buffer
__literal1268 Variant_t VARIANT_STRING, 0, __literal1268_buffer
__literal1269 Variant_t VARIANT_STRING, 0, __literal1269_buffer
__literal1270 Variant_t VARIANT_STRING, 0, __literal1270_buffer
__literal1271 Variant_t VARIANT_STRING, 0, __literal1271_buffer
__literal1272 Variant_t VARIANT_STRING, 0, __literal1272_buffer
__literal1273 Variant_t VARIANT_STRING, 0, __literal1273_buffer
__literal1274 Variant_t VARIANT_STRING, 0, __literal1274_buffer
__literal1275 Variant_t VARIANT_STRING, 0, __literal1275_buffer
__literal1276 Variant_t VARIANT_STRING, 0, __literal1276_buffer
__literal1277 Variant_t VARIANT_STRING, 0, __literal1277_buffer
__literal1278 Variant_t VARIANT_STRING, 0, __literal1278_buffer
__literal1279 Variant_t VARIANT_STRING, 0, __literal1279_buffer
__literal1280 Variant_t VARIANT_STRING, 0, __literal1280_buffer
__literal1281 Variant_t VARIANT_STRING, 0, __literal1281_buffer
__literal1282 Variant_t VARIANT_STRING, 0, __literal1282_buffer
__literal1283 Variant_t VARIANT_STRING, 0, __literal1283_buffer
__literal1284 Variant_t VARIANT_STRING, 0, __literal1284_buffer
__literal1285 Variant_t VARIANT_STRING, 0, __literal1285_buffer
__literal1286 Variant_t VARIANT_STRING, 0, __literal1286_buffer
__literal1287 Variant_t VARIANT_STRING, 0, __literal1287_buffer
__literal1288 Variant_t VARIANT_STRING, 0, __literal1288_buffer
__literal1289 Variant_t VARIANT_STRING, 0, __literal1289_buffer
__literal1290 Variant_t VARIANT_STRING, 0, __literal1290_buffer
__literal1291 Variant_t VARIANT_STRING, 0, __literal1291_buffer
__literal1292 Variant_t VARIANT_STRING, 0, __literal1292_buffer
__literal1293 Variant_t VARIANT_STRING, 0, __literal1293_buffer
__literal1294 Variant_t VARIANT_STRING, 0, __literal1294_buffer
__literal1295 Variant_t VARIANT_STRING, 0, __literal1295_buffer
__literal1296 Variant_t VARIANT_STRING, 0, __literal1296_buffer
__literal1297 Variant_t VARIANT_STRING, 0, __literal1297_buffer
__const1331 Variant_t VARIANT_ARRAY, 0, __const1331_buffer
; Reuse already emitted buffer
__const1332 Variant_t VARIANT_ARRAY, 0, __const1331_buffer
; Reuse already emitted buffer
__const1333 Variant_t VARIANT_ARRAY, 0, LexerIndexBaseLUT_buffer
; Reuse already emitted buffer
__const1334 Variant_t VARIANT_ARRAY, 0, LexerIndexBaseLUT_buffer
; Reuse already emitted buffer
__const1335 Variant_t VARIANT_ARRAY, 0, LexerIndexBaseLUT_buffer
__const1886 Variant_t VARIANT_ARRAY, 0, __const1886_buffer
__const1887 Variant_t VARIANT_ARRAY, 0, __const1887_buffer
__const1919 Variant_t VARIANT_ARRAY, 0, __const1919_buffer
__const1920 Variant_t VARIANT_ARRAY, 0, __const1920_buffer
; Reuse already emitted buffer
__const1923 Variant_t VARIANT_ARRAY, 0, __const1919_buffer
; Reuse already emitted buffer
__const1924 Variant_t VARIANT_ARRAY, 0, __const1920_buffer
; Reuse already emitted buffer
__const1925 Variant_t VARIANT_ARRAY, 0, __const1919_buffer
; Reuse already emitted buffer
__const1926 Variant_t VARIANT_ARRAY, 0, __const1920_buffer
; Reuse already emitted buffer
__const1927 Variant_t VARIANT_ARRAY, 0, __const1919_buffer
; Reuse already emitted buffer
__const1928 Variant_t VARIANT_ARRAY, 0, __const1920_buffer
; Reuse already emitted buffer
__const1929 Variant_t VARIANT_ARRAY, 0, __const1919_buffer
; Reuse already emitted buffer
__const1930 Variant_t VARIANT_ARRAY, 0, __const1920_buffer
; Reuse already emitted buffer
__const1931 Variant_t VARIANT_ARRAY, 0, __const1919_buffer
; Reuse already emitted buffer
__const1932 Variant_t VARIANT_ARRAY, 0, __const1920_buffer
__const1962 Variant_t VARIANT_ARRAY, 0, __const1962_buffer
__const1963 Variant_t VARIANT_ARRAY, 0, __const1963_buffer
__const2070 Variant_t VARIANT_ARRAY, 0, __const2070_buffer
__const2071 Variant_t VARIANT_ARRAY, 0, __const2071_buffer
; Reuse already emitted buffer
__const2106 Variant_t VARIANT_ARRAY, 0, __const2070_buffer
__const2107 Variant_t VARIANT_ARRAY, 0, __const2107_buffer
__const2123 Variant_t VARIANT_ARRAY, 0, __const2123_buffer
__const2124 Variant_t VARIANT_ARRAY, 0, __const2124_buffer
__const2148 Variant_t VARIANT_ARRAY, 0, __const2148_buffer
__const2149 Variant_t VARIANT_ARRAY, 0, __const2149_buffer
__const2151 Variant_t VARIANT_ARRAY, 0, __const2151_buffer
__const2152 Variant_t VARIANT_ARRAY, 0, __const2152_buffer
__const2154 Variant_t VARIANT_ARRAY, 0, __const2154_buffer
__const2155 Variant_t VARIANT_ARRAY, 0, __const2155_buffer
; Reuse already emitted buffer
__const2221 Variant_t VARIANT_ARRAY, 0, __const2123_buffer
__const2222 Variant_t VARIANT_ARRAY, 0, __const2222_buffer
__const2226 Variant_t VARIANT_ARRAY, 0, __const2226_buffer
__const2227 Variant_t VARIANT_ARRAY, 0, __const2227_buffer
__const2478 Variant_t VARIANT_ARRAY, 0, __const2478_buffer
__const2479 Variant_t VARIANT_ARRAY, 0, __const2479_buffer
__const3700 Variant_t VARIANT_ARRAY, 0, __const3700_buffer
__const3701 Variant_t VARIANT_ARRAY, 0, __const3701_buffer
__const4137 Variant_t VARIANT_ARRAY, 0, __const4137_buffer
__const4341 Variant_t VARIANT_ARRAY, 0, __const4341_buffer
__const4342 Variant_t VARIANT_ARRAY, 0, __const4342_buffer
__const4639 Variant_t VARIANT_ARRAY, 0, __const4639_buffer
__const4718 Variant_t VARIANT_ARRAY, 0, __const4718_buffer
__const4728 Variant_t VARIANT_ARRAY, 0, __const4728_buffer
__const4750 Variant_t VARIANT_ARRAY, 0, __const4750_buffer
; Reuse already emitted buffer
__const4775 Variant_t VARIANT_ARRAY, 0, __const4718_buffer
__const5144 Variant_t VARIANT_ARRAY, 0, __const5144_buffer
__const5145 Variant_t VARIANT_ARRAY, 0, __const5145_buffer
; Reuse already emitted buffer
__const5147 Variant_t VARIANT_ARRAY, 0, __const5144_buffer
__const5148 Variant_t VARIANT_ARRAY, 0, __const5148_buffer
__const5918 Variant_t VARIANT_ARRAY, 0, __const5918_buffer
__const5919 Variant_t VARIANT_ARRAY, 0, __const5919_buffer
; Reuse already emitted buffer
__const5921 Variant_t VARIANT_ARRAY, 0, __const5918_buffer
__const5922 Variant_t VARIANT_ARRAY, 0, __const5922_buffer
__const6359 Variant_t VARIANT_ARRAY, 0, __const6359_buffer
__const6362 Variant_t VARIANT_ARRAY, 0, __const6362_buffer
__const6363 Variant_t VARIANT_ARRAY, 0, __const6363_buffer
__const6364 Variant_t VARIANT_ARRAY, 0, __const6364_buffer
__const6365 Variant_t VARIANT_ARRAY, 0, __const6365_buffer
__const6366 Variant_t VARIANT_ARRAY, 0, __const6366_buffer
__const6367 Variant_t VARIANT_ARRAY, 0, __const6367_buffer
__const6368 Variant_t VARIANT_ARRAY, 0, __const6368_buffer
__const6369 Variant_t VARIANT_ARRAY, 0, __const6369_buffer
; iter 1
GrammarProductionsLUT_buffer Buffer_t 8928 , -1, 0, GrammarProductionsLUT_bufferBytes
SymbolsGreedyLUT_buffer Buffer_t 2288 , -1, 0, SymbolsGreedyLUT_bufferBytes
ParserActionsLUT_buffer Buffer_t 3696 , -1, 0, ParserActionsLUT_bufferBytes
ParserGotoLUT_buffer Buffer_t 3696 , -1, 0, ParserGotoLUT_bufferBytes
ParserActionsDefaultLUT_buffer Buffer_t 3696 , -1, 0, ParserActionsDefaultLUT_bufferBytes
LexerSelectLUT_buffer Buffer_t 0 , -1, 0, LexerSelectLUT_bufferBytes
LexerIndexBaseLUT_buffer Buffer_t 16 , -1, 0, LexerIndexBaseLUT_bufferBytes
LexerIndexLUT_buffer Buffer_t 16 , -1, 0, LexerIndexLUT_bufferBytes
LexerCharsLUT_buffer Buffer_t 43360 , -1, 0, LexerCharsLUT_bufferBytes
LexerTransLUT_buffer Buffer_t 21680 , -1, 0, LexerTransLUT_bufferBytes
LexerAcceptLUT_buffer Buffer_t 16 , -1, 0, LexerAcceptLUT_bufferBytes
__literal0_buffer Buffer_t 7 , -1, 0, __literal0_bufferBytes
__literal1_buffer Buffer_t 6 , -1, 0, __literal1_bufferBytes
__literal2_buffer Buffer_t 3 , -1, 0, __literal2_bufferBytes
__literal3_buffer Buffer_t 9 , -1, 0, __literal3_bufferBytes
__literal4_buffer Buffer_t 7 , -1, 0, __literal4_bufferBytes
__literal5_buffer Buffer_t 5 , -1, 0, __literal5_bufferBytes
__literal6_buffer Buffer_t 1 , -1, 0, __literal6_bufferBytes
__literal7_buffer Buffer_t 3 , -1, 0, __literal7_bufferBytes
__literal11_buffer Buffer_t 13 , -1, 0, __literal11_bufferBytes
__literal12_buffer Buffer_t 9 , -1, 0, __literal12_bufferBytes
__literal13_buffer Buffer_t 2 , -1, 0, __literal13_bufferBytes
__literal14_buffer Buffer_t 10 , -1, 0, __literal14_bufferBytes
__literal15_buffer Buffer_t 13 , -1, 0, __literal15_bufferBytes
__literal16_buffer Buffer_t 6 , -1, 0, __literal16_bufferBytes
__literal17_buffer Buffer_t 7 , -1, 0, __literal17_bufferBytes
__literal18_buffer Buffer_t 7 , -1, 0, __literal18_bufferBytes
__literal19_buffer Buffer_t 28 , -1, 0, __literal19_bufferBytes
__literal20_buffer Buffer_t 29 , -1, 0, __literal20_bufferBytes
__literal21_buffer Buffer_t 30 , -1, 0, __literal21_bufferBytes
__literal22_buffer Buffer_t 2 , -1, 0, __literal22_bufferBytes
__literal23_buffer Buffer_t 5 , -1, 0, __literal23_bufferBytes
__literal24_buffer Buffer_t 6 , -1, 0, __literal24_bufferBytes
__literal25_buffer Buffer_t 5 , -1, 0, __literal25_bufferBytes
__literal26_buffer Buffer_t 9 , -1, 0, __literal26_bufferBytes
__literal27_buffer Buffer_t 21 , -1, 0, __literal27_bufferBytes
__literal28_buffer Buffer_t 57 , -1, 0, __literal28_bufferBytes
__literal29_buffer Buffer_t 20 , -1, 0, __literal29_bufferBytes
__literal30_buffer Buffer_t 5 , -1, 0, __literal30_bufferBytes
__literal31_buffer Buffer_t 7 , -1, 0, __literal31_bufferBytes
__literal32_buffer Buffer_t 19 , -1, 0, __literal32_bufferBytes
AST_DataTypeNames_buffer Buffer_t 176 , -1, 0, AST_DataTypeNames_bufferBytes
AST_DataTypeForMIR_buffer Buffer_t 176 , -1, 0, AST_DataTypeForMIR_bufferBytes
__literal33_buffer Buffer_t 15 , -1, 0, __literal33_bufferBytes
__literal34_buffer Buffer_t 10 , -1, 0, __literal34_bufferBytes
__literal35_buffer Buffer_t 8 , -1, 0, __literal35_bufferBytes
__literal36_buffer Buffer_t 6 , -1, 0, __literal36_bufferBytes
__literal37_buffer Buffer_t 9 , -1, 0, __literal37_bufferBytes
__literal38_buffer Buffer_t 6 , -1, 0, __literal38_bufferBytes
__literal39_buffer Buffer_t 7 , -1, 0, __literal39_bufferBytes
__literal40_buffer Buffer_t 3 , -1, 0, __literal40_bufferBytes
__literal41_buffer Buffer_t 4 , -1, 0, __literal41_bufferBytes
__literal42_buffer Buffer_t 6 , -1, 0, __literal42_bufferBytes
__literal43_buffer Buffer_t 5 , -1, 0, __literal43_bufferBytes
__literal44_buffer Buffer_t 19 , -1, 0, __literal44_bufferBytes
__literal45_buffer Buffer_t 17 , -1, 0, __literal45_bufferBytes
__literal46_buffer Buffer_t 8 , -1, 0, __literal46_bufferBytes
__literal47_buffer Buffer_t 7 , -1, 0, __literal47_bufferBytes
__literal48_buffer Buffer_t 6 , -1, 0, __literal48_bufferBytes
__literal49_buffer Buffer_t 7 , -1, 0, __literal49_bufferBytes
__literal50_buffer Buffer_t 5 , -1, 0, __literal50_bufferBytes
__literal51_buffer Buffer_t 6 , -1, 0, __literal51_bufferBytes
__literal52_buffer Buffer_t 4 , -1, 0, __literal52_bufferBytes
__literal53_buffer Buffer_t 10 , -1, 0, __literal53_bufferBytes
__literal54_buffer Buffer_t 9 , -1, 0, __literal54_bufferBytes
__literal55_buffer Buffer_t 8 , -1, 0, __literal55_bufferBytes
__literal56_buffer Buffer_t 4 , -1, 0, __literal56_bufferBytes
__literal57_buffer Buffer_t 4 , -1, 0, __literal57_bufferBytes
__literal58_buffer Buffer_t 12 , -1, 0, __literal58_bufferBytes
__literal59_buffer Buffer_t 4 , -1, 0, __literal59_bufferBytes
__literal60_buffer Buffer_t 4 , -1, 0, __literal60_bufferBytes
__literal61_buffer Buffer_t 4 , -1, 0, __literal61_bufferBytes
__literal62_buffer Buffer_t 5 , -1, 0, __literal62_bufferBytes
__literal63_buffer Buffer_t 7 , -1, 0, __literal63_bufferBytes
__literal64_buffer Buffer_t 7 , -1, 0, __literal64_bufferBytes
__literal65_buffer Buffer_t 7 , -1, 0, __literal65_bufferBytes
__literal66_buffer Buffer_t 7 , -1, 0, __literal66_bufferBytes
__literal67_buffer Buffer_t 7 , -1, 0, __literal67_bufferBytes
__literal68_buffer Buffer_t 7 , -1, 0, __literal68_bufferBytes
__literal69_buffer Buffer_t 18 , -1, 0, __literal69_bufferBytes
__literal70_buffer Buffer_t 9 , -1, 0, __literal70_bufferBytes
__literal71_buffer Buffer_t 4 , -1, 0, __literal71_bufferBytes
__literal72_buffer Buffer_t 10 , -1, 0, __literal72_bufferBytes
__literal73_buffer Buffer_t 9 , -1, 0, __literal73_bufferBytes
__literal74_buffer Buffer_t 6 , -1, 0, __literal74_bufferBytes
__literal75_buffer Buffer_t 11 , -1, 0, __literal75_bufferBytes
__literal76_buffer Buffer_t 2 , -1, 0, __literal76_bufferBytes
__literal77_buffer Buffer_t 3 , -1, 0, __literal77_bufferBytes
__literal78_buffer Buffer_t 3 , -1, 0, __literal78_bufferBytes
__literal79_buffer Buffer_t 5 , -1, 0, __literal79_bufferBytes
__literal80_buffer Buffer_t 2 , -1, 0, __literal80_bufferBytes
__literal81_buffer Buffer_t 2 , -1, 0, __literal81_bufferBytes
__literal82_buffer Buffer_t 2 , -1, 0, __literal82_bufferBytes
__literal83_buffer Buffer_t 2 , -1, 0, __literal83_bufferBytes
__literal84_buffer Buffer_t 2 , -1, 0, __literal84_bufferBytes
__literal85_buffer Buffer_t 2 , -1, 0, __literal85_bufferBytes
__literal86_buffer Buffer_t 4 , -1, 0, __literal86_bufferBytes
__literal87_buffer Buffer_t 3 , -1, 0, __literal87_bufferBytes
__literal88_buffer Buffer_t 2 , -1, 0, __literal88_bufferBytes
__literal89_buffer Buffer_t 2 , -1, 0, __literal89_bufferBytes
__literal90_buffer Buffer_t 2 , -1, 0, __literal90_bufferBytes
__literal91_buffer Buffer_t 2 , -1, 0, __literal91_bufferBytes
__literal92_buffer Buffer_t 2 , -1, 0, __literal92_bufferBytes
__literal93_buffer Buffer_t 3 , -1, 0, __literal93_bufferBytes
__literal94_buffer Buffer_t 3 , -1, 0, __literal94_bufferBytes
__literal95_buffer Buffer_t 3 , -1, 0, __literal95_bufferBytes
__literal96_buffer Buffer_t 3 , -1, 0, __literal96_bufferBytes
__literal97_buffer Buffer_t 3 , -1, 0, __literal97_bufferBytes
__literal98_buffer Buffer_t 3 , -1, 0, __literal98_bufferBytes
__literal99_buffer Buffer_t 3 , -1, 0, __literal99_bufferBytes
__literal100_buffer Buffer_t 7 , -1, 0, __literal100_bufferBytes
__literal101_buffer Buffer_t 10 , -1, 0, __literal101_bufferBytes
__literal102_buffer Buffer_t 2 , -1, 0, __literal102_bufferBytes
__literal103_buffer Buffer_t 5 , -1, 0, __literal103_bufferBytes
__literal104_buffer Buffer_t 4 , -1, 0, __literal104_bufferBytes
__literal105_buffer Buffer_t 6 , -1, 0, __literal105_bufferBytes
__literal106_buffer Buffer_t 6 , -1, 0, __literal106_bufferBytes
__literal107_buffer Buffer_t 2 , -1, 0, __literal107_bufferBytes
__literal108_buffer Buffer_t 4 , -1, 0, __literal108_bufferBytes
__literal109_buffer Buffer_t 6 , -1, 0, __literal109_bufferBytes
__literal110_buffer Buffer_t 3 , -1, 0, __literal110_bufferBytes
__literal111_buffer Buffer_t 6 , -1, 0, __literal111_bufferBytes
__literal112_buffer Buffer_t 6 , -1, 0, __literal112_bufferBytes
__literal113_buffer Buffer_t 6 , -1, 0, __literal113_bufferBytes
__literal114_buffer Buffer_t 7 , -1, 0, __literal114_bufferBytes
__literal115_buffer Buffer_t 7 , -1, 0, __literal115_bufferBytes
__literal116_buffer Buffer_t 5 , -1, 0, __literal116_bufferBytes
__literal117_buffer Buffer_t 4 , -1, 0, __literal117_bufferBytes
__literal118_buffer Buffer_t 9 , -1, 0, __literal118_bufferBytes
__literal119_buffer Buffer_t 6 , -1, 0, __literal119_bufferBytes
__literal120_buffer Buffer_t 26 , -1, 0, __literal120_bufferBytes
__literal121_buffer Buffer_t 47 , -1, 0, __literal121_bufferBytes
__literal122_buffer Buffer_t 5 , -1, 0, __literal122_bufferBytes
__literal123_buffer Buffer_t 2 , -1, 0, __literal123_bufferBytes
__literal124_buffer Buffer_t 11 , -1, 0, __literal124_bufferBytes
__literal125_buffer Buffer_t 3 , -1, 0, __literal125_bufferBytes
__literal126_buffer Buffer_t 12 , -1, 0, __literal126_bufferBytes
__literal127_buffer Buffer_t 2 , -1, 0, __literal127_bufferBytes
__literal128_buffer Buffer_t 6 , -1, 0, __literal128_bufferBytes
__literal129_buffer Buffer_t 12 , -1, 0, __literal129_bufferBytes
__literal130_buffer Buffer_t 8 , -1, 0, __literal130_bufferBytes
__literal131_buffer Buffer_t 19 , -1, 0, __literal131_bufferBytes
__literal132_buffer Buffer_t 8 , -1, 0, __literal132_bufferBytes
__literal133_buffer Buffer_t 13 , -1, 0, __literal133_bufferBytes
__literal134_buffer Buffer_t 6 , -1, 0, __literal134_bufferBytes
__literal135_buffer Buffer_t 14 , -1, 0, __literal135_bufferBytes
__literal136_buffer Buffer_t 58 , -1, 0, __literal136_bufferBytes
__literal137_buffer Buffer_t 8 , -1, 0, __literal137_bufferBytes
__literal140_buffer Buffer_t 3 , -1, 0, __literal140_bufferBytes
__literal142_buffer Buffer_t 6 , -1, 0, __literal142_bufferBytes
__literal146_buffer Buffer_t 19 , -1, 0, __literal146_bufferBytes
__literal147_buffer Buffer_t 4 , -1, 0, __literal147_bufferBytes
__literal148_buffer Buffer_t 8 , -1, 0, __literal148_bufferBytes
__literal149_buffer Buffer_t 8 , -1, 0, __literal149_bufferBytes
__literal150_buffer Buffer_t 10 , -1, 0, __literal150_bufferBytes
__literal151_buffer Buffer_t 10 , -1, 0, __literal151_bufferBytes
__literal152_buffer Buffer_t 9 , -1, 0, __literal152_bufferBytes
__literal153_buffer Buffer_t 15 , -1, 0, __literal153_bufferBytes
__literal154_buffer Buffer_t 6 , -1, 0, __literal154_bufferBytes
__literal155_buffer Buffer_t 4 , -1, 0, __literal155_bufferBytes
__literal156_buffer Buffer_t 5 , -1, 0, __literal156_bufferBytes
__literal157_buffer Buffer_t 6 , -1, 0, __literal157_bufferBytes
__literal158_buffer Buffer_t 8 , -1, 0, __literal158_bufferBytes
__literal159_buffer Buffer_t 7 , -1, 0, __literal159_bufferBytes
__literal160_buffer Buffer_t 7 , -1, 0, __literal160_bufferBytes
__literal161_buffer Buffer_t 12 , -1, 0, __literal161_bufferBytes
__literal162_buffer Buffer_t 8 , -1, 0, __literal162_bufferBytes
__literal164_buffer Buffer_t 18 , -1, 0, __literal164_bufferBytes
__literal165_buffer Buffer_t 5 , -1, 0, __literal165_bufferBytes
__literal166_buffer Buffer_t 13 , -1, 0, __literal166_bufferBytes
__literal167_buffer Buffer_t 28 , -1, 0, __literal167_bufferBytes
__literal168_buffer Buffer_t 19 , -1, 0, __literal168_bufferBytes
__literal169_buffer Buffer_t 10 , -1, 0, __literal169_bufferBytes
__literal170_buffer Buffer_t 9 , -1, 0, __literal170_bufferBytes
__literal171_buffer Buffer_t 5 , -1, 0, __literal171_bufferBytes
__literal172_buffer Buffer_t 16 , -1, 0, __literal172_bufferBytes
__literal173_buffer Buffer_t 33 , -1, 0, __literal173_bufferBytes
__literal175_buffer Buffer_t 11 , -1, 0, __literal175_bufferBytes
__literal176_buffer Buffer_t 2 , -1, 0, __literal176_bufferBytes
__literal177_buffer Buffer_t 13 , -1, 0, __literal177_bufferBytes
__literal179_buffer Buffer_t 22 , -1, 0, __literal179_bufferBytes
__literal180_buffer Buffer_t 20 , -1, 0, __literal180_bufferBytes
__literal181_buffer Buffer_t 8 , -1, 0, __literal181_bufferBytes
__literal182_buffer Buffer_t 7 , -1, 0, __literal182_bufferBytes
__literal183_buffer Buffer_t 11 , -1, 0, __literal183_bufferBytes
__literal184_buffer Buffer_t 20 , -1, 0, __literal184_bufferBytes
__literal185_buffer Buffer_t 18 , -1, 0, __literal185_bufferBytes
__literal186_buffer Buffer_t 13 , -1, 0, __literal186_bufferBytes
__literal187_buffer Buffer_t 26 , -1, 0, __literal187_bufferBytes
__literal188_buffer Buffer_t 25 , -1, 0, __literal188_bufferBytes
__literal189_buffer Buffer_t 11 , -1, 0, __literal189_bufferBytes
__literal190_buffer Buffer_t 17 , -1, 0, __literal190_bufferBytes
__literal191_buffer Buffer_t 44 , -1, 0, __literal191_bufferBytes
__literal192_buffer Buffer_t 38 , -1, 0, __literal192_bufferBytes
__literal193_buffer Buffer_t 33 , -1, 0, __literal193_bufferBytes
__literal194_buffer Buffer_t 10 , -1, 0, __literal194_bufferBytes
__literal195_buffer Buffer_t 8 , -1, 0, __literal195_bufferBytes
__literal196_buffer Buffer_t 5 , -1, 0, __literal196_bufferBytes
__literal197_buffer Buffer_t 5 , -1, 0, __literal197_bufferBytes
__literal204_buffer Buffer_t 2 , -1, 0, __literal204_bufferBytes
__literal205_buffer Buffer_t 11 , -1, 0, __literal205_bufferBytes
__literal206_buffer Buffer_t 7 , -1, 0, __literal206_bufferBytes
__literal209_buffer Buffer_t 10 , -1, 0, __literal209_bufferBytes
__literal210_buffer Buffer_t 4 , -1, 0, __literal210_bufferBytes
__literal211_buffer Buffer_t 7 , -1, 0, __literal211_bufferBytes
__literal216_buffer Buffer_t 16 , -1, 0, __literal216_bufferBytes
__literal217_buffer Buffer_t 7 , -1, 0, __literal217_bufferBytes
__literal218_buffer Buffer_t 19 , -1, 0, __literal218_bufferBytes
__literal219_buffer Buffer_t 5 , -1, 0, __literal219_bufferBytes
__literal220_buffer Buffer_t 18 , -1, 0, __literal220_bufferBytes
__literal222_buffer Buffer_t 12 , -1, 0, __literal222_bufferBytes
__literal223_buffer Buffer_t 31 , -1, 0, __literal223_bufferBytes
__literal224_buffer Buffer_t 7 , -1, 0, __literal224_bufferBytes
__literal225_buffer Buffer_t 9 , -1, 0, __literal225_bufferBytes
__literal226_buffer Buffer_t 3 , -1, 0, __literal226_bufferBytes
__literal227_buffer Buffer_t 2 , -1, 0, __literal227_bufferBytes
__literal228_buffer Buffer_t 2 , -1, 0, __literal228_bufferBytes
__literal229_buffer Buffer_t 10 , -1, 0, __literal229_bufferBytes
__literal230_buffer Buffer_t 11 , -1, 0, __literal230_bufferBytes
__literal231_buffer Buffer_t 11 , -1, 0, __literal231_bufferBytes
__literal232_buffer Buffer_t 13 , -1, 0, __literal232_bufferBytes
__literal233_buffer Buffer_t 5 , -1, 0, __literal233_bufferBytes
__literal234_buffer Buffer_t 12 , -1, 0, __literal234_bufferBytes
__literal235_buffer Buffer_t 14 , -1, 0, __literal235_bufferBytes
__literal236_buffer Buffer_t 24 , -1, 0, __literal236_bufferBytes
__literal237_buffer Buffer_t 7 , -1, 0, __literal237_bufferBytes
__literal238_buffer Buffer_t 5 , -1, 0, __literal238_bufferBytes
__literal239_buffer Buffer_t 5 , -1, 0, __literal239_bufferBytes
__literal240_buffer Buffer_t 20 , -1, 0, __literal240_bufferBytes
__literal241_buffer Buffer_t 52 , -1, 0, __literal241_bufferBytes
__literal242_buffer Buffer_t 19 , -1, 0, __literal242_bufferBytes
__literal243_buffer Buffer_t 6 , -1, 0, __literal243_bufferBytes
__literal244_buffer Buffer_t 18 , -1, 0, __literal244_bufferBytes
__literal245_buffer Buffer_t 8 , -1, 0, __literal245_bufferBytes
__literal246_buffer Buffer_t 29 , -1, 0, __literal246_bufferBytes
__literal247_buffer Buffer_t 40 , -1, 0, __literal247_bufferBytes
__literal248_buffer Buffer_t 15 , -1, 0, __literal248_bufferBytes
__literal249_buffer Buffer_t 6 , -1, 0, __literal249_bufferBytes
__literal250_buffer Buffer_t 10 , -1, 0, __literal250_bufferBytes
__literal251_buffer Buffer_t 23 , -1, 0, __literal251_bufferBytes
__literal252_buffer Buffer_t 34 , -1, 0, __literal252_bufferBytes
__literal253_buffer Buffer_t 3 , -1, 0, __literal253_bufferBytes
__literal254_buffer Buffer_t 12 , -1, 0, __literal254_bufferBytes
__literal255_buffer Buffer_t 18 , -1, 0, __literal255_bufferBytes
__literal256_buffer Buffer_t 56 , -1, 0, __literal256_bufferBytes
__literal258_buffer Buffer_t 9 , -1, 0, __literal258_bufferBytes
__literal259_buffer Buffer_t 10 , -1, 0, __literal259_bufferBytes
__literal260_buffer Buffer_t 2 , -1, 0, __literal260_bufferBytes
__literal261_buffer Buffer_t 22 , -1, 0, __literal261_bufferBytes
__literal262_buffer Buffer_t 9 , -1, 0, __literal262_bufferBytes
__literal263_buffer Buffer_t 22 , -1, 0, __literal263_bufferBytes
__literal301_buffer Buffer_t 10 , -1, 0, __literal301_bufferBytes
__literal302_buffer Buffer_t 8 , -1, 0, __literal302_bufferBytes
__literal303_buffer Buffer_t 6 , -1, 0, __literal303_bufferBytes
__literal304_buffer Buffer_t 8 , -1, 0, __literal304_bufferBytes
__literal305_buffer Buffer_t 6 , -1, 0, __literal305_bufferBytes
__literal306_buffer Buffer_t 4 , -1, 0, __literal306_bufferBytes
__literal309_buffer Buffer_t 8 , -1, 0, __literal309_bufferBytes
__literal310_buffer Buffer_t 6 , -1, 0, __literal310_bufferBytes
__literal311_buffer Buffer_t 10 , -1, 0, __literal311_bufferBytes
__literal312_buffer Buffer_t 28 , -1, 0, __literal312_bufferBytes
__literal313_buffer Buffer_t 20 , -1, 0, __literal313_bufferBytes
__literal314_buffer Buffer_t 6 , -1, 0, __literal314_bufferBytes
__literal315_buffer Buffer_t 7 , -1, 0, __literal315_bufferBytes
__literal316_buffer Buffer_t 23 , -1, 0, __literal316_bufferBytes
__literal317_buffer Buffer_t 14 , -1, 0, __literal317_bufferBytes
__literal318_buffer Buffer_t 18 , -1, 0, __literal318_bufferBytes
__literal319_buffer Buffer_t 8 , -1, 0, __literal319_bufferBytes
__literal321_buffer Buffer_t 11 , -1, 0, __literal321_bufferBytes
__literal322_buffer Buffer_t 10 , -1, 0, __literal322_bufferBytes
__literal323_buffer Buffer_t 4 , -1, 0, __literal323_bufferBytes
__literal324_buffer Buffer_t 46 , -1, 0, __literal324_bufferBytes
__literal325_buffer Buffer_t 16 , -1, 0, __literal325_bufferBytes
__literal326_buffer Buffer_t 9 , -1, 0, __literal326_bufferBytes
__literal327_buffer Buffer_t 36 , -1, 0, __literal327_bufferBytes
__literal328_buffer Buffer_t 2 , -1, 0, __literal328_bufferBytes
__literal329_buffer Buffer_t 25 , -1, 0, __literal329_bufferBytes
__literal330_buffer Buffer_t 12 , -1, 0, __literal330_bufferBytes
__literal331_buffer Buffer_t 7 , -1, 0, __literal331_bufferBytes
__literal332_buffer Buffer_t 6 , -1, 0, __literal332_bufferBytes
__literal334_buffer Buffer_t 30 , -1, 0, __literal334_bufferBytes
__literal335_buffer Buffer_t 27 , -1, 0, __literal335_bufferBytes
__literal336_buffer Buffer_t 4 , -1, 0, __literal336_bufferBytes
__literal337_buffer Buffer_t 33 , -1, 0, __literal337_bufferBytes
__literal338_buffer Buffer_t 4 , -1, 0, __literal338_bufferBytes
__literal339_buffer Buffer_t 4 , -1, 0, __literal339_bufferBytes
__literal340_buffer Buffer_t 33 , -1, 0, __literal340_bufferBytes
__literal342_buffer Buffer_t 14 , -1, 0, __literal342_bufferBytes
__literal343_buffer Buffer_t 17 , -1, 0, __literal343_bufferBytes
__literal344_buffer Buffer_t 6 , -1, 0, __literal344_bufferBytes
__literal345_buffer Buffer_t 72 , -1, 0, __literal345_bufferBytes
__literal346_buffer Buffer_t 64 , -1, 0, __literal346_bufferBytes
__literal347_buffer Buffer_t 25 , -1, 0, __literal347_bufferBytes
__literal348_buffer Buffer_t 27 , -1, 0, __literal348_bufferBytes
__literal349_buffer Buffer_t 25 , -1, 0, __literal349_bufferBytes
__literal350_buffer Buffer_t 25 , -1, 0, __literal350_bufferBytes
__literal351_buffer Buffer_t 28 , -1, 0, __literal351_bufferBytes
__literal352_buffer Buffer_t 30 , -1, 0, __literal352_bufferBytes
__literal353_buffer Buffer_t 19 , -1, 0, __literal353_bufferBytes
__literal354_buffer Buffer_t 24 , -1, 0, __literal354_bufferBytes
__literal355_buffer Buffer_t 36 , -1, 0, __literal355_bufferBytes
__literal356_buffer Buffer_t 25 , -1, 0, __literal356_bufferBytes
__literal357_buffer Buffer_t 15 , -1, 0, __literal357_bufferBytes
__literal358_buffer Buffer_t 25 , -1, 0, __literal358_bufferBytes
__literal359_buffer Buffer_t 35 , -1, 0, __literal359_bufferBytes
__literal360_buffer Buffer_t 32 , -1, 0, __literal360_bufferBytes
__literal361_buffer Buffer_t 37 , -1, 0, __literal361_bufferBytes
__literal363_buffer Buffer_t 16 , -1, 0, __literal363_bufferBytes
__literal364_buffer Buffer_t 12 , -1, 0, __literal364_bufferBytes
__literal365_buffer Buffer_t 17 , -1, 0, __literal365_bufferBytes
__literal366_buffer Buffer_t 16 , -1, 0, __literal366_bufferBytes
__literal367_buffer Buffer_t 29 , -1, 0, __literal367_bufferBytes
__literal369_buffer Buffer_t 14 , -1, 0, __literal369_bufferBytes
__literal370_buffer Buffer_t 9 , -1, 0, __literal370_bufferBytes
__literal371_buffer Buffer_t 9 , -1, 0, __literal371_bufferBytes
__literal372_buffer Buffer_t 17 , -1, 0, __literal372_bufferBytes
__literal375_buffer Buffer_t 46 , -1, 0, __literal375_bufferBytes
__literal376_buffer Buffer_t 5 , -1, 0, __literal376_bufferBytes
__literal377_buffer Buffer_t 62 , -1, 0, __literal377_bufferBytes
__literal378_buffer Buffer_t 5 , -1, 0, __literal378_bufferBytes
__literal379_buffer Buffer_t 8 , -1, 0, __literal379_bufferBytes
__literal380_buffer Buffer_t 10 , -1, 0, __literal380_bufferBytes
__literal381_buffer Buffer_t 10 , -1, 0, __literal381_bufferBytes
__literal382_buffer Buffer_t 13 , -1, 0, __literal382_bufferBytes
__literal383_buffer Buffer_t 11 , -1, 0, __literal383_bufferBytes
__literal384_buffer Buffer_t 14 , -1, 0, __literal384_bufferBytes
__literal385_buffer Buffer_t 7 , -1, 0, __literal385_bufferBytes
__literal386_buffer Buffer_t 9 , -1, 0, __literal386_bufferBytes
__literal387_buffer Buffer_t 10 , -1, 0, __literal387_bufferBytes
__literal388_buffer Buffer_t 9 , -1, 0, __literal388_bufferBytes
__literal389_buffer Buffer_t 10 , -1, 0, __literal389_bufferBytes
__literal390_buffer Buffer_t 13 , -1, 0, __literal390_bufferBytes
__literal391_buffer Buffer_t 11 , -1, 0, __literal391_bufferBytes
__literal392_buffer Buffer_t 12 , -1, 0, __literal392_bufferBytes
__literal393_buffer Buffer_t 15 , -1, 0, __literal393_bufferBytes
__literal394_buffer Buffer_t 9 , -1, 0, __literal394_bufferBytes
__literal395_buffer Buffer_t 12 , -1, 0, __literal395_bufferBytes
__literal396_buffer Buffer_t 15 , -1, 0, __literal396_bufferBytes
__literal397_buffer Buffer_t 18 , -1, 0, __literal397_bufferBytes
__literal398_buffer Buffer_t 10 , -1, 0, __literal398_bufferBytes
__literal399_buffer Buffer_t 10 , -1, 0, __literal399_bufferBytes
__literal400_buffer Buffer_t 8 , -1, 0, __literal400_bufferBytes
__literal401_buffer Buffer_t 10 , -1, 0, __literal401_bufferBytes
__literal402_buffer Buffer_t 9 , -1, 0, __literal402_bufferBytes
__literal403_buffer Buffer_t 30 , -1, 0, __literal403_bufferBytes
__literal404_buffer Buffer_t 26 , -1, 0, __literal404_bufferBytes
__literal405_buffer Buffer_t 18 , -1, 0, __literal405_bufferBytes
__literal406_buffer Buffer_t 20 , -1, 0, __literal406_bufferBytes
__literal407_buffer Buffer_t 28 , -1, 0, __literal407_bufferBytes
__literal408_buffer Buffer_t 20 , -1, 0, __literal408_bufferBytes
__literal409_buffer Buffer_t 13 , -1, 0, __literal409_bufferBytes
__literal410_buffer Buffer_t 16 , -1, 0, __literal410_bufferBytes
__literal411_buffer Buffer_t 16 , -1, 0, __literal411_bufferBytes
__literal412_buffer Buffer_t 27 , -1, 0, __literal412_bufferBytes
__literal413_buffer Buffer_t 18 , -1, 0, __literal413_bufferBytes
__literal414_buffer Buffer_t 15 , -1, 0, __literal414_bufferBytes
__literal415_buffer Buffer_t 19 , -1, 0, __literal415_bufferBytes
__literal416_buffer Buffer_t 12 , -1, 0, __literal416_bufferBytes
__literal417_buffer Buffer_t 18 , -1, 0, __literal417_bufferBytes
__literal418_buffer Buffer_t 14 , -1, 0, __literal418_bufferBytes
__literal419_buffer Buffer_t 7 , -1, 0, __literal419_bufferBytes
__literal421_buffer Buffer_t 2 , -1, 0, __literal421_bufferBytes
__literal422_buffer Buffer_t 3 , -1, 0, __literal422_bufferBytes
__literal423_buffer Buffer_t 3 , -1, 0, __literal423_bufferBytes
__literal424_buffer Buffer_t 2 , -1, 0, __literal424_bufferBytes
__literal428_buffer Buffer_t 7 , -1, 0, __literal428_bufferBytes
__literal430_buffer Buffer_t 8 , -1, 0, __literal430_bufferBytes
__literal431_buffer Buffer_t 10 , -1, 0, __literal431_bufferBytes
__literal435_buffer Buffer_t 5 , -1, 0, __literal435_bufferBytes
__literal436_buffer Buffer_t 4 , -1, 0, __literal436_bufferBytes
__literal439_buffer Buffer_t 8 , -1, 0, __literal439_bufferBytes
__literal440_buffer Buffer_t 8 , -1, 0, __literal440_bufferBytes
__literal442_buffer Buffer_t 5 , -1, 0, __literal442_bufferBytes
__literal444_buffer Buffer_t 6 , -1, 0, __literal444_bufferBytes
__literal445_buffer Buffer_t 5 , -1, 0, __literal445_bufferBytes
__literal446_buffer Buffer_t 7 , -1, 0, __literal446_bufferBytes
__literal447_buffer Buffer_t 9 , -1, 0, __literal447_bufferBytes
__literal448_buffer Buffer_t 5 , -1, 0, __literal448_bufferBytes
__literal449_buffer Buffer_t 5 , -1, 0, __literal449_bufferBytes
__literal450_buffer Buffer_t 5 , -1, 0, __literal450_bufferBytes
__literal451_buffer Buffer_t 5 , -1, 0, __literal451_bufferBytes
__literal452_buffer Buffer_t 7 , -1, 0, __literal452_bufferBytes
__literal453_buffer Buffer_t 12 , -1, 0, __literal453_bufferBytes
__literal454_buffer Buffer_t 2 , -1, 0, __literal454_bufferBytes
__literal455_buffer Buffer_t 2 , -1, 0, __literal455_bufferBytes
__literal456_buffer Buffer_t 4 , -1, 0, __literal456_bufferBytes
__literal457_buffer Buffer_t 3 , -1, 0, __literal457_bufferBytes
__literal458_buffer Buffer_t 3 , -1, 0, __literal458_bufferBytes
__literal459_buffer Buffer_t 5 , -1, 0, __literal459_bufferBytes
__literal460_buffer Buffer_t 2 , -1, 0, __literal460_bufferBytes
__literal461_buffer Buffer_t 3 , -1, 0, __literal461_bufferBytes
__literal462_buffer Buffer_t 2 , -1, 0, __literal462_bufferBytes
__literal463_buffer Buffer_t 3 , -1, 0, __literal463_bufferBytes
__literal466_buffer Buffer_t 2 , -1, 0, __literal466_bufferBytes
__literal467_buffer Buffer_t 5 , -1, 0, __literal467_bufferBytes
__literal468_buffer Buffer_t 5 , -1, 0, __literal468_bufferBytes
__literal469_buffer Buffer_t 6 , -1, 0, __literal469_bufferBytes
__literal471_buffer Buffer_t 6 , -1, 0, __literal471_bufferBytes
__literal472_buffer Buffer_t 9 , -1, 0, __literal472_bufferBytes
__literal480_buffer Buffer_t 9 , -1, 0, __literal480_bufferBytes
__literal481_buffer Buffer_t 11 , -1, 0, __literal481_bufferBytes
__literal482_buffer Buffer_t 7 , -1, 0, __literal482_bufferBytes
__literal483_buffer Buffer_t 6 , -1, 0, __literal483_bufferBytes
__literal491_buffer Buffer_t 21 , -1, 0, __literal491_bufferBytes
__literal492_buffer Buffer_t 20 , -1, 0, __literal492_bufferBytes
__literal544_buffer Buffer_t 19 , -1, 0, __literal544_bufferBytes
__literal545_buffer Buffer_t 4 , -1, 0, __literal545_bufferBytes
__literal546_buffer Buffer_t 18 , -1, 0, __literal546_bufferBytes
__literal549_buffer Buffer_t 30 , -1, 0, __literal549_bufferBytes
__literal550_buffer Buffer_t 36 , -1, 0, __literal550_bufferBytes
__literal551_buffer Buffer_t 19 , -1, 0, __literal551_bufferBytes
__literal552_buffer Buffer_t 29 , -1, 0, __literal552_bufferBytes
__literal553_buffer Buffer_t 35 , -1, 0, __literal553_bufferBytes
__literal555_buffer Buffer_t 14 , -1, 0, __literal555_bufferBytes
__literal557_buffer Buffer_t 13 , -1, 0, __literal557_bufferBytes
__literal558_buffer Buffer_t 7 , -1, 0, __literal558_bufferBytes
__literal559_buffer Buffer_t 30 , -1, 0, __literal559_bufferBytes
__literal560_buffer Buffer_t 24 , -1, 0, __literal560_bufferBytes
__literal562_buffer Buffer_t 23 , -1, 0, __literal562_bufferBytes
__literal563_buffer Buffer_t 6 , -1, 0, __literal563_bufferBytes
__literal564_buffer Buffer_t 22 , -1, 0, __literal564_bufferBytes
__literal565_buffer Buffer_t 24 , -1, 0, __literal565_bufferBytes
__literal566_buffer Buffer_t 38 , -1, 0, __literal566_bufferBytes
__literal567_buffer Buffer_t 8 , -1, 0, __literal567_bufferBytes
__literal568_buffer Buffer_t 16 , -1, 0, __literal568_bufferBytes
__literal569_buffer Buffer_t 25 , -1, 0, __literal569_bufferBytes
__literal570_buffer Buffer_t 4 , -1, 0, __literal570_bufferBytes
__literal571_buffer Buffer_t 8 , -1, 0, __literal571_bufferBytes
__literal573_buffer Buffer_t 4 , -1, 0, __literal573_bufferBytes
__literal574_buffer Buffer_t 48 , -1, 0, __literal574_bufferBytes
__literal576_buffer Buffer_t 5 , -1, 0, __literal576_bufferBytes
__literal577_buffer Buffer_t 5 , -1, 0, __literal577_bufferBytes
__literal578_buffer Buffer_t 22 , -1, 0, __literal578_bufferBytes
__literal579_buffer Buffer_t 29 , -1, 0, __literal579_bufferBytes
__literal580_buffer Buffer_t 13 , -1, 0, __literal580_bufferBytes
__literal581_buffer Buffer_t 17 , -1, 0, __literal581_bufferBytes
__literal582_buffer Buffer_t 11 , -1, 0, __literal582_bufferBytes
__literal583_buffer Buffer_t 6 , -1, 0, __literal583_bufferBytes
__literal584_buffer Buffer_t 13 , -1, 0, __literal584_bufferBytes
__literal585_buffer Buffer_t 21 , -1, 0, __literal585_bufferBytes
__literal586_buffer Buffer_t 19 , -1, 0, __literal586_bufferBytes
__literal587_buffer Buffer_t 14 , -1, 0, __literal587_bufferBytes
__literal588_buffer Buffer_t 8 , -1, 0, __literal588_bufferBytes
__literal589_buffer Buffer_t 4 , -1, 0, __literal589_bufferBytes
__literal591_buffer Buffer_t 5 , -1, 0, __literal591_bufferBytes
__literal592_buffer Buffer_t 5 , -1, 0, __literal592_bufferBytes
__literal593_buffer Buffer_t 11 , -1, 0, __literal593_bufferBytes
__literal594_buffer Buffer_t 5 , -1, 0, __literal594_bufferBytes
__literal595_buffer Buffer_t 4 , -1, 0, __literal595_bufferBytes
__literal596_buffer Buffer_t 4 , -1, 0, __literal596_bufferBytes
__literal597_buffer Buffer_t 4 , -1, 0, __literal597_bufferBytes
__literal598_buffer Buffer_t 12 , -1, 0, __literal598_bufferBytes
__literal599_buffer Buffer_t 4 , -1, 0, __literal599_bufferBytes
__literal600_buffer Buffer_t 4 , -1, 0, __literal600_bufferBytes
__literal601_buffer Buffer_t 4 , -1, 0, __literal601_bufferBytes
__literal602_buffer Buffer_t 5 , -1, 0, __literal602_bufferBytes
__literal603_buffer Buffer_t 13 , -1, 0, __literal603_bufferBytes
__literal604_buffer Buffer_t 11 , -1, 0, __literal604_bufferBytes
__literal605_buffer Buffer_t 10 , -1, 0, __literal605_bufferBytes
__literal606_buffer Buffer_t 11 , -1, 0, __literal606_bufferBytes
__literal607_buffer Buffer_t 22 , -1, 0, __literal607_bufferBytes
__literal608_buffer Buffer_t 13 , -1, 0, __literal608_bufferBytes
__literal609_buffer Buffer_t 12 , -1, 0, __literal609_bufferBytes
__literal610_buffer Buffer_t 21 , -1, 0, __literal610_bufferBytes
__literal611_buffer Buffer_t 22 , -1, 0, __literal611_bufferBytes
__literal612_buffer Buffer_t 24 , -1, 0, __literal612_bufferBytes
__literal613_buffer Buffer_t 23 , -1, 0, __literal613_bufferBytes
__literal614_buffer Buffer_t 7 , -1, 0, __literal614_bufferBytes
__literal615_buffer Buffer_t 7 , -1, 0, __literal615_bufferBytes
__literal616_buffer Buffer_t 7 , -1, 0, __literal616_bufferBytes
__literal617_buffer Buffer_t 7 , -1, 0, __literal617_bufferBytes
__literal618_buffer Buffer_t 7 , -1, 0, __literal618_bufferBytes
__literal619_buffer Buffer_t 7 , -1, 0, __literal619_bufferBytes
__literal620_buffer Buffer_t 14 , -1, 0, __literal620_bufferBytes
__literal621_buffer Buffer_t 18 , -1, 0, __literal621_bufferBytes
__literal622_buffer Buffer_t 8 , -1, 0, __literal622_bufferBytes
__literal623_buffer Buffer_t 11 , -1, 0, __literal623_bufferBytes
__literal624_buffer Buffer_t 9 , -1, 0, __literal624_bufferBytes
__literal625_buffer Buffer_t 12 , -1, 0, __literal625_bufferBytes
__literal626_buffer Buffer_t 10 , -1, 0, __literal626_bufferBytes
__literal627_buffer Buffer_t 54 , -1, 0, __literal627_bufferBytes
__literal628_buffer Buffer_t 14 , -1, 0, __literal628_bufferBytes
__literal629_buffer Buffer_t 13 , -1, 0, __literal629_bufferBytes
__literal630_buffer Buffer_t 12 , -1, 0, __literal630_bufferBytes
__literal631_buffer Buffer_t 30 , -1, 0, __literal631_bufferBytes
__literal632_buffer Buffer_t 12 , -1, 0, __literal632_bufferBytes
__literal633_buffer Buffer_t 10 , -1, 0, __literal633_bufferBytes
__literal634_buffer Buffer_t 10 , -1, 0, __literal634_bufferBytes
__literal635_buffer Buffer_t 7 , -1, 0, __literal635_bufferBytes
__literal636_buffer Buffer_t 17 , -1, 0, __literal636_bufferBytes
__literal637_buffer Buffer_t 9 , -1, 0, __literal637_bufferBytes
__literal638_buffer Buffer_t 10 , -1, 0, __literal638_bufferBytes
__literal639_buffer Buffer_t 11 , -1, 0, __literal639_bufferBytes
__literal640_buffer Buffer_t 36 , -1, 0, __literal640_bufferBytes
__literal641_buffer Buffer_t 25 , -1, 0, __literal641_bufferBytes
__literal642_buffer Buffer_t 15 , -1, 0, __literal642_bufferBytes
__literal643_buffer Buffer_t 13 , -1, 0, __literal643_bufferBytes
__literal644_buffer Buffer_t 11 , -1, 0, __literal644_bufferBytes
__literal645_buffer Buffer_t 13 , -1, 0, __literal645_bufferBytes
__literal646_buffer Buffer_t 15 , -1, 0, __literal646_bufferBytes
__literal647_buffer Buffer_t 13 , -1, 0, __literal647_bufferBytes
__literal648_buffer Buffer_t 7 , -1, 0, __literal648_bufferBytes
__literal649_buffer Buffer_t 27 , -1, 0, __literal649_bufferBytes
__literal650_buffer Buffer_t 10 , -1, 0, __literal650_bufferBytes
__literal651_buffer Buffer_t 39 , -1, 0, __literal651_bufferBytes
__literal652_buffer Buffer_t 12 , -1, 0, __literal652_bufferBytes
__literal653_buffer Buffer_t 30 , -1, 0, __literal653_bufferBytes
__literal654_buffer Buffer_t 7 , -1, 0, __literal654_bufferBytes
__literal655_buffer Buffer_t 17 , -1, 0, __literal655_bufferBytes
__literal656_buffer Buffer_t 51 , -1, 0, __literal656_bufferBytes
__literal657_buffer Buffer_t 6 , -1, 0, __literal657_bufferBytes
__literal658_buffer Buffer_t 13 , -1, 0, __literal658_bufferBytes
__literal660_buffer Buffer_t 4 , -1, 0, __literal660_bufferBytes
__literal661_buffer Buffer_t 2 , -1, 0, __literal661_bufferBytes
__literal662_buffer Buffer_t 2 , -1, 0, __literal662_bufferBytes
__literal663_buffer Buffer_t 10 , -1, 0, __literal663_bufferBytes
__literal664_buffer Buffer_t 11 , -1, 0, __literal664_bufferBytes
__literal665_buffer Buffer_t 5 , -1, 0, __literal665_bufferBytes
__literal666_buffer Buffer_t 10 , -1, 0, __literal666_bufferBytes
__literal667_buffer Buffer_t 9 , -1, 0, __literal667_bufferBytes
__literal669_buffer Buffer_t 2 , -1, 0, __literal669_bufferBytes
REG_PARAMS32_buffer Buffer_t 64 , -1, 0, REG_PARAMS32_bufferBytes
REG_PARAMS64_buffer Buffer_t 64 , -1, 0, REG_PARAMS64_bufferBytes
__literal671_buffer Buffer_t 16 , -1, 0, __literal671_bufferBytes
__literal680_buffer Buffer_t 18 , -1, 0, __literal680_bufferBytes
__literal681_buffer Buffer_t 20 , -1, 0, __literal681_bufferBytes
__literal682_buffer Buffer_t 16 , -1, 0, __literal682_bufferBytes
__literal693_buffer Buffer_t 4 , -1, 0, __literal693_bufferBytes
__literal694_buffer Buffer_t 4 , -1, 0, __literal694_bufferBytes
__literal695_buffer Buffer_t 3 , -1, 0, __literal695_bufferBytes
__literal702_buffer Buffer_t 33 , -1, 0, __literal702_bufferBytes
__literal713_buffer Buffer_t 8 , -1, 0, __literal713_bufferBytes
__literal718_buffer Buffer_t 2 , -1, 0, __literal718_bufferBytes
__literal719_buffer Buffer_t 2 , -1, 0, __literal719_bufferBytes
__literal722_buffer Buffer_t 24 , -1, 0, __literal722_bufferBytes
__literal723_buffer Buffer_t 13 , -1, 0, __literal723_bufferBytes
__literal726_buffer Buffer_t 9 , -1, 0, __literal726_bufferBytes
__literal730_buffer Buffer_t 3 , -1, 0, __literal730_bufferBytes
__literal731_buffer Buffer_t 3 , -1, 0, __literal731_bufferBytes
__literal732_buffer Buffer_t 3 , -1, 0, __literal732_bufferBytes
__literal733_buffer Buffer_t 3 , -1, 0, __literal733_bufferBytes
__literal750_buffer Buffer_t 19 , -1, 0, __literal750_bufferBytes
__literal754_buffer Buffer_t 19 , -1, 0, __literal754_bufferBytes
__literal778_buffer Buffer_t 6 , -1, 0, __literal778_bufferBytes
__literal779_buffer Buffer_t 2 , -1, 0, __literal779_bufferBytes
__literal780_buffer Buffer_t 5 , -1, 0, __literal780_bufferBytes
__literal782_buffer Buffer_t 13 , -1, 0, __literal782_bufferBytes
__literal783_buffer Buffer_t 12 , -1, 0, __literal783_bufferBytes
__literal784_buffer Buffer_t 23 , -1, 0, __literal784_bufferBytes
__literal785_buffer Buffer_t 11 , -1, 0, __literal785_bufferBytes
__literal786_buffer Buffer_t 12 , -1, 0, __literal786_bufferBytes
__literal787_buffer Buffer_t 11 , -1, 0, __literal787_bufferBytes
__literal788_buffer Buffer_t 13 , -1, 0, __literal788_bufferBytes
__literal789_buffer Buffer_t 13 , -1, 0, __literal789_bufferBytes
__literal790_buffer Buffer_t 13 , -1, 0, __literal790_bufferBytes
__literal791_buffer Buffer_t 14 , -1, 0, __literal791_bufferBytes
__literal792_buffer Buffer_t 15 , -1, 0, __literal792_bufferBytes
__literal793_buffer Buffer_t 12 , -1, 0, __literal793_bufferBytes
__literal794_buffer Buffer_t 14 , -1, 0, __literal794_bufferBytes
__literal795_buffer Buffer_t 14 , -1, 0, __literal795_bufferBytes
__literal796_buffer Buffer_t 10 , -1, 0, __literal796_bufferBytes
__literal798_buffer Buffer_t 10 , -1, 0, __literal798_bufferBytes
__literal799_buffer Buffer_t 10 , -1, 0, __literal799_bufferBytes
__literal800_buffer Buffer_t 10 , -1, 0, __literal800_bufferBytes
__literal801_buffer Buffer_t 5 , -1, 0, __literal801_bufferBytes
__literal802_buffer Buffer_t 10 , -1, 0, __literal802_bufferBytes
__literal807_buffer Buffer_t 11 , -1, 0, __literal807_bufferBytes
__literal813_buffer Buffer_t 13 , -1, 0, __literal813_bufferBytes
__literal814_buffer Buffer_t 2 , -1, 0, __literal814_bufferBytes
__literal815_buffer Buffer_t 13 , -1, 0, __literal815_bufferBytes
__literal816_buffer Buffer_t 3 , -1, 0, __literal816_bufferBytes
__literal817_buffer Buffer_t 13 , -1, 0, __literal817_bufferBytes
__literal818_buffer Buffer_t 13 , -1, 0, __literal818_bufferBytes
__literal819_buffer Buffer_t 13 , -1, 0, __literal819_bufferBytes
__literal820_buffer Buffer_t 2 , -1, 0, __literal820_bufferBytes
__literal821_buffer Buffer_t 13 , -1, 0, __literal821_bufferBytes
__literal822_buffer Buffer_t 10 , -1, 0, __literal822_bufferBytes
__literal824_buffer Buffer_t 10 , -1, 0, __literal824_bufferBytes
__literal825_buffer Buffer_t 10 , -1, 0, __literal825_bufferBytes
__literal826_buffer Buffer_t 10 , -1, 0, __literal826_bufferBytes
__literal827_buffer Buffer_t 10 , -1, 0, __literal827_bufferBytes
__literal830_buffer Buffer_t 11 , -1, 0, __literal830_bufferBytes
__literal835_buffer Buffer_t 13 , -1, 0, __literal835_bufferBytes
__literal836_buffer Buffer_t 13 , -1, 0, __literal836_bufferBytes
__literal837_buffer Buffer_t 13 , -1, 0, __literal837_bufferBytes
__literal838_buffer Buffer_t 13 , -1, 0, __literal838_bufferBytes
__literal839_buffer Buffer_t 13 , -1, 0, __literal839_bufferBytes
__literal840_buffer Buffer_t 13 , -1, 0, __literal840_bufferBytes
__literal841_buffer Buffer_t 20 , -1, 0, __literal841_bufferBytes
__literal842_buffer Buffer_t 24 , -1, 0, __literal842_bufferBytes
__literal843_buffer Buffer_t 12 , -1, 0, __literal843_bufferBytes
__literal845_buffer Buffer_t 12 , -1, 0, __literal845_bufferBytes
__literal846_buffer Buffer_t 6 , -1, 0, __literal846_bufferBytes
__literal847_buffer Buffer_t 12 , -1, 0, __literal847_bufferBytes
__literal848_buffer Buffer_t 6 , -1, 0, __literal848_bufferBytes
__literal849_buffer Buffer_t 12 , -1, 0, __literal849_bufferBytes
__literal850_buffer Buffer_t 6 , -1, 0, __literal850_bufferBytes
__literal851_buffer Buffer_t 12 , -1, 0, __literal851_bufferBytes
__literal852_buffer Buffer_t 6 , -1, 0, __literal852_bufferBytes
__literal853_buffer Buffer_t 13 , -1, 0, __literal853_bufferBytes
__literal858_buffer Buffer_t 15 , -1, 0, __literal858_bufferBytes
__literal859_buffer Buffer_t 15 , -1, 0, __literal859_bufferBytes
__literal860_buffer Buffer_t 15 , -1, 0, __literal860_bufferBytes
__literal861_buffer Buffer_t 15 , -1, 0, __literal861_bufferBytes
__literal862_buffer Buffer_t 3 , -1, 0, __literal862_bufferBytes
__literal863_buffer Buffer_t 15 , -1, 0, __literal863_bufferBytes
__literal864_buffer Buffer_t 15 , -1, 0, __literal864_bufferBytes
__literal865_buffer Buffer_t 3 , -1, 0, __literal865_bufferBytes
__literal866_buffer Buffer_t 22 , -1, 0, __literal866_bufferBytes
__literal867_buffer Buffer_t 26 , -1, 0, __literal867_bufferBytes
__literal868_buffer Buffer_t 22 , -1, 0, __literal868_bufferBytes
__literal869_buffer Buffer_t 6 , -1, 0, __literal869_bufferBytes
__literal870_buffer Buffer_t 26 , -1, 0, __literal870_bufferBytes
__literal871_buffer Buffer_t 12 , -1, 0, __literal871_bufferBytes
__literal872_buffer Buffer_t 18 , -1, 0, __literal872_bufferBytes
__literal873_buffer Buffer_t 12 , -1, 0, __literal873_bufferBytes
__literal874_buffer Buffer_t 11 , -1, 0, __literal874_bufferBytes
__literal875_buffer Buffer_t 18 , -1, 0, __literal875_bufferBytes
__literal876_buffer Buffer_t 12 , -1, 0, __literal876_bufferBytes
__literal877_buffer Buffer_t 18 , -1, 0, __literal877_bufferBytes
__literal878_buffer Buffer_t 12 , -1, 0, __literal878_bufferBytes
__literal879_buffer Buffer_t 18 , -1, 0, __literal879_bufferBytes
__literal880_buffer Buffer_t 12 , -1, 0, __literal880_bufferBytes
__literal881_buffer Buffer_t 18 , -1, 0, __literal881_bufferBytes
__literal882_buffer Buffer_t 13 , -1, 0, __literal882_bufferBytes
__literal883_buffer Buffer_t 27 , -1, 0, __literal883_bufferBytes
__literal884_buffer Buffer_t 15 , -1, 0, __literal884_bufferBytes
__literal885_buffer Buffer_t 14 , -1, 0, __literal885_bufferBytes
__literal886_buffer Buffer_t 24 , -1, 0, __literal886_bufferBytes
__literal887_buffer Buffer_t 4 , -1, 0, __literal887_bufferBytes
__literal888_buffer Buffer_t 15 , -1, 0, __literal888_bufferBytes
__literal889_buffer Buffer_t 14 , -1, 0, __literal889_bufferBytes
__literal890_buffer Buffer_t 24 , -1, 0, __literal890_bufferBytes
__literal891_buffer Buffer_t 15 , -1, 0, __literal891_bufferBytes
__literal892_buffer Buffer_t 24 , -1, 0, __literal892_bufferBytes
__literal893_buffer Buffer_t 15 , -1, 0, __literal893_bufferBytes
__literal894_buffer Buffer_t 24 , -1, 0, __literal894_bufferBytes
__literal895_buffer Buffer_t 15 , -1, 0, __literal895_bufferBytes
__literal896_buffer Buffer_t 15 , -1, 0, __literal896_bufferBytes
__literal897_buffer Buffer_t 22 , -1, 0, __literal897_bufferBytes
__literal901_buffer Buffer_t 26 , -1, 0, __literal901_bufferBytes
__literal903_buffer Buffer_t 25 , -1, 0, __literal903_bufferBytes
__literal904_buffer Buffer_t 21 , -1, 0, __literal904_bufferBytes
__literal905_buffer Buffer_t 25 , -1, 0, __literal905_bufferBytes
__literal906_buffer Buffer_t 19 , -1, 0, __literal906_bufferBytes
__literal914_buffer Buffer_t 18 , -1, 0, __literal914_bufferBytes
__literal915_buffer Buffer_t 17 , -1, 0, __literal915_bufferBytes
__literal916_buffer Buffer_t 3 , -1, 0, __literal916_bufferBytes
__literal917_buffer Buffer_t 18 , -1, 0, __literal917_bufferBytes
__literal918_buffer Buffer_t 17 , -1, 0, __literal918_bufferBytes
__literal919_buffer Buffer_t 3 , -1, 0, __literal919_bufferBytes
__literal920_buffer Buffer_t 18 , -1, 0, __literal920_bufferBytes
__literal921_buffer Buffer_t 3 , -1, 0, __literal921_bufferBytes
__literal922_buffer Buffer_t 18 , -1, 0, __literal922_bufferBytes
__literal923_buffer Buffer_t 3 , -1, 0, __literal923_bufferBytes
__literal924_buffer Buffer_t 18 , -1, 0, __literal924_bufferBytes
__literal925_buffer Buffer_t 18 , -1, 0, __literal925_bufferBytes
__literal926_buffer Buffer_t 22 , -1, 0, __literal926_bufferBytes
__literal928_buffer Buffer_t 26 , -1, 0, __literal928_bufferBytes
__literal930_buffer Buffer_t 11 , -1, 0, __literal930_bufferBytes
__literal934_buffer Buffer_t 16 , -1, 0, __literal934_bufferBytes
__literal935_buffer Buffer_t 16 , -1, 0, __literal935_bufferBytes
__literal936_buffer Buffer_t 16 , -1, 0, __literal936_bufferBytes
__literal937_buffer Buffer_t 16 , -1, 0, __literal937_bufferBytes
__literal938_buffer Buffer_t 16 , -1, 0, __literal938_bufferBytes
__literal939_buffer Buffer_t 16 , -1, 0, __literal939_bufferBytes
__literal940_buffer Buffer_t 16 , -1, 0, __literal940_bufferBytes
__literal941_buffer Buffer_t 16 , -1, 0, __literal941_bufferBytes
__literal942_buffer Buffer_t 16 , -1, 0, __literal942_bufferBytes
__literal943_buffer Buffer_t 16 , -1, 0, __literal943_bufferBytes
__literal944_buffer Buffer_t 16 , -1, 0, __literal944_bufferBytes
__literal945_buffer Buffer_t 16 , -1, 0, __literal945_bufferBytes
__literal946_buffer Buffer_t 20 , -1, 0, __literal946_bufferBytes
__literal947_buffer Buffer_t 24 , -1, 0, __literal947_bufferBytes
__literal948_buffer Buffer_t 19 , -1, 0, __literal948_bufferBytes
__literal949_buffer Buffer_t 20 , -1, 0, __literal949_bufferBytes
__literal950_buffer Buffer_t 17 , -1, 0, __literal950_bufferBytes
__literal951_buffer Buffer_t 17 , -1, 0, __literal951_bufferBytes
__literal952_buffer Buffer_t 14 , -1, 0, __literal952_bufferBytes
__literal953_buffer Buffer_t 14 , -1, 0, __literal953_bufferBytes
__literal954_buffer Buffer_t 18 , -1, 0, __literal954_bufferBytes
__literal955_buffer Buffer_t 18 , -1, 0, __literal955_bufferBytes
__literal956_buffer Buffer_t 18 , -1, 0, __literal956_bufferBytes
__literal957_buffer Buffer_t 18 , -1, 0, __literal957_bufferBytes
__literal958_buffer Buffer_t 18 , -1, 0, __literal958_bufferBytes
__literal959_buffer Buffer_t 18 , -1, 0, __literal959_bufferBytes
__literal960_buffer Buffer_t 3 , -1, 0, __literal960_bufferBytes
__literal961_buffer Buffer_t 5 , -1, 0, __literal961_bufferBytes
__literal962_buffer Buffer_t 3 , -1, 0, __literal962_bufferBytes
__literal965_buffer Buffer_t 10 , -1, 0, __literal965_bufferBytes
__literal969_buffer Buffer_t 10 , -1, 0, __literal969_bufferBytes
__literal971_buffer Buffer_t 12 , -1, 0, __literal971_bufferBytes
__literal973_buffer Buffer_t 11 , -1, 0, __literal973_bufferBytes
__literal977_buffer Buffer_t 4 , -1, 0, __literal977_bufferBytes
__literal978_buffer Buffer_t 41 , -1, 0, __literal978_bufferBytes
__literal979_buffer Buffer_t 49 , -1, 0, __literal979_bufferBytes
__literal980_buffer Buffer_t 3 , -1, 0, __literal980_bufferBytes
__literal981_buffer Buffer_t 4 , -1, 0, __literal981_bufferBytes
__literal982_buffer Buffer_t 11 , -1, 0, __literal982_bufferBytes
__literal993_buffer Buffer_t 22 , -1, 0, __literal993_bufferBytes
__literal996_buffer Buffer_t 22 , -1, 0, __literal996_bufferBytes
__literal1002_buffer Buffer_t 22 , -1, 0, __literal1002_bufferBytes
__literal1003_buffer Buffer_t 50 , -1, 0, __literal1003_bufferBytes
__literal1005_buffer Buffer_t 22 , -1, 0, __literal1005_bufferBytes
__literal1006_buffer Buffer_t 50 , -1, 0, __literal1006_bufferBytes
__literal1011_buffer Buffer_t 23 , -1, 0, __literal1011_bufferBytes
__literal1014_buffer Buffer_t 22 , -1, 0, __literal1014_bufferBytes
__literal1016_buffer Buffer_t 22 , -1, 0, __literal1016_bufferBytes
__literal1017_buffer Buffer_t 24 , -1, 0, __literal1017_bufferBytes
__literal1019_buffer Buffer_t 20 , -1, 0, __literal1019_bufferBytes
__literal1023_buffer Buffer_t 21 , -1, 0, __literal1023_bufferBytes
__literal1025_buffer Buffer_t 24 , -1, 0, __literal1025_bufferBytes
__literal1072_buffer Buffer_t 10 , -1, 0, __literal1072_bufferBytes
__literal1083_buffer Buffer_t 5 , -1, 0, __literal1083_bufferBytes
__literal1090_buffer Buffer_t 34 , -1, 0, __literal1090_bufferBytes
__literal1091_buffer Buffer_t 4 , -1, 0, __literal1091_bufferBytes
__literal1096_buffer Buffer_t 38 , -1, 0, __literal1096_bufferBytes
__literal1097_buffer Buffer_t 26 , -1, 0, __literal1097_bufferBytes
__literal1098_buffer Buffer_t 36 , -1, 0, __literal1098_bufferBytes
__literal1099_buffer Buffer_t 24 , -1, 0, __literal1099_bufferBytes
__literal1100_buffer Buffer_t 20 , -1, 0, __literal1100_bufferBytes
__literal1101_buffer Buffer_t 27 , -1, 0, __literal1101_bufferBytes
__literal1102_buffer Buffer_t 17 , -1, 0, __literal1102_bufferBytes
__literal1103_buffer Buffer_t 18 , -1, 0, __literal1103_bufferBytes
__literal1104_buffer Buffer_t 25 , -1, 0, __literal1104_bufferBytes
__literal1105_buffer Buffer_t 18 , -1, 0, __literal1105_bufferBytes
__literal1106_buffer Buffer_t 33 , -1, 0, __literal1106_bufferBytes
__literal1107_buffer Buffer_t 30 , -1, 0, __literal1107_bufferBytes
__literal1108_buffer Buffer_t 28 , -1, 0, __literal1108_bufferBytes
__literal1109_buffer Buffer_t 28 , -1, 0, __literal1109_bufferBytes
__literal1110_buffer Buffer_t 27 , -1, 0, __literal1110_bufferBytes
__literal1111_buffer Buffer_t 34 , -1, 0, __literal1111_bufferBytes
__literal1112_buffer Buffer_t 26 , -1, 0, __literal1112_bufferBytes
__literal1113_buffer Buffer_t 35 , -1, 0, __literal1113_bufferBytes
__literal1114_buffer Buffer_t 17 , -1, 0, __literal1114_bufferBytes
__literal1115_buffer Buffer_t 26 , -1, 0, __literal1115_bufferBytes
__literal1116_buffer Buffer_t 26 , -1, 0, __literal1116_bufferBytes
__literal1124_buffer Buffer_t 6 , -1, 0, __literal1124_bufferBytes
__literal1125_buffer Buffer_t 6 , -1, 0, __literal1125_bufferBytes
__literal1126_buffer Buffer_t 31 , -1, 0, __literal1126_bufferBytes
__literal1140_buffer Buffer_t 31 , -1, 0, __literal1140_bufferBytes
__literal1156_buffer Buffer_t 24 , -1, 0, __literal1156_bufferBytes
__literal1157_buffer Buffer_t 7 , -1, 0, __literal1157_bufferBytes
__literal1179_buffer Buffer_t 11 , -1, 0, __literal1179_bufferBytes
__literal1180_buffer Buffer_t 8 , -1, 0, __literal1180_bufferBytes
__literal1181_buffer Buffer_t 9 , -1, 0, __literal1181_bufferBytes
__literal1182_buffer Buffer_t 9 , -1, 0, __literal1182_bufferBytes
__literal1183_buffer Buffer_t 19 , -1, 0, __literal1183_bufferBytes
__literal1191_buffer Buffer_t 18 , -1, 0, __literal1191_bufferBytes
__literal1192_buffer Buffer_t 8 , -1, 0, __literal1192_bufferBytes
__literal1193_buffer Buffer_t 32 , -1, 0, __literal1193_bufferBytes
__literal1194_buffer Buffer_t 14 , -1, 0, __literal1194_bufferBytes
__literal1195_buffer Buffer_t 8 , -1, 0, __literal1195_bufferBytes
__literal1196_buffer Buffer_t 45 , -1, 0, __literal1196_bufferBytes
__literal1197_buffer Buffer_t 17 , -1, 0, __literal1197_bufferBytes
__literal1198_buffer Buffer_t 10 , -1, 0, __literal1198_bufferBytes
__literal1199_buffer Buffer_t 14 , -1, 0, __literal1199_bufferBytes
__literal1200_buffer Buffer_t 14 , -1, 0, __literal1200_bufferBytes
__literal1201_buffer Buffer_t 14 , -1, 0, __literal1201_bufferBytes
__literal1202_buffer Buffer_t 14 , -1, 0, __literal1202_bufferBytes
__literal1203_buffer Buffer_t 12 , -1, 0, __literal1203_bufferBytes
__literal1204_buffer Buffer_t 26 , -1, 0, __literal1204_bufferBytes
__literal1205_buffer Buffer_t 11 , -1, 0, __literal1205_bufferBytes
__literal1206_buffer Buffer_t 9 , -1, 0, __literal1206_bufferBytes
__literal1207_buffer Buffer_t 12 , -1, 0, __literal1207_bufferBytes
__literal1208_buffer Buffer_t 7 , -1, 0, __literal1208_bufferBytes
__literal1209_buffer Buffer_t 8 , -1, 0, __literal1209_bufferBytes
__literal1210_buffer Buffer_t 7 , -1, 0, __literal1210_bufferBytes
__literal1211_buffer Buffer_t 7 , -1, 0, __literal1211_bufferBytes
__literal1212_buffer Buffer_t 7 , -1, 0, __literal1212_bufferBytes
__literal1213_buffer Buffer_t 7 , -1, 0, __literal1213_bufferBytes
__literal1214_buffer Buffer_t 7 , -1, 0, __literal1214_bufferBytes
__literal1215_buffer Buffer_t 12 , -1, 0, __literal1215_bufferBytes
__literal1216_buffer Buffer_t 14 , -1, 0, __literal1216_bufferBytes
__literal1217_buffer Buffer_t 12 , -1, 0, __literal1217_bufferBytes
__literal1218_buffer Buffer_t 12 , -1, 0, __literal1218_bufferBytes
__literal1219_buffer Buffer_t 13 , -1, 0, __literal1219_bufferBytes
__literal1220_buffer Buffer_t 12 , -1, 0, __literal1220_bufferBytes
__literal1221_buffer Buffer_t 13 , -1, 0, __literal1221_bufferBytes
__literal1222_buffer Buffer_t 13 , -1, 0, __literal1222_bufferBytes
__literal1223_buffer Buffer_t 14 , -1, 0, __literal1223_bufferBytes
__literal1224_buffer Buffer_t 13 , -1, 0, __literal1224_bufferBytes
__literal1225_buffer Buffer_t 15 , -1, 0, __literal1225_bufferBytes
__literal1226_buffer Buffer_t 13 , -1, 0, __literal1226_bufferBytes
__literal1227_buffer Buffer_t 5 , -1, 0, __literal1227_bufferBytes
__literal1228_buffer Buffer_t 13 , -1, 0, __literal1228_bufferBytes
__literal1229_buffer Buffer_t 14 , -1, 0, __literal1229_bufferBytes
__literal1230_buffer Buffer_t 6 , -1, 0, __literal1230_bufferBytes
__literal1231_buffer Buffer_t 12 , -1, 0, __literal1231_bufferBytes
__literal1232_buffer Buffer_t 5 , -1, 0, __literal1232_bufferBytes
__literal1233_buffer Buffer_t 10 , -1, 0, __literal1233_bufferBytes
__literal1234_buffer Buffer_t 5 , -1, 0, __literal1234_bufferBytes
__literal1235_buffer Buffer_t 7 , -1, 0, __literal1235_bufferBytes
__literal1236_buffer Buffer_t 4 , -1, 0, __literal1236_bufferBytes
__literal1237_buffer Buffer_t 5 , -1, 0, __literal1237_bufferBytes
__literal1238_buffer Buffer_t 7 , -1, 0, __literal1238_bufferBytes
__literal1239_buffer Buffer_t 15 , -1, 0, __literal1239_bufferBytes
__literal1240_buffer Buffer_t 10 , -1, 0, __literal1240_bufferBytes
__literal1241_buffer Buffer_t 10 , -1, 0, __literal1241_bufferBytes
__literal1242_buffer Buffer_t 10 , -1, 0, __literal1242_bufferBytes
__literal1243_buffer Buffer_t 9 , -1, 0, __literal1243_bufferBytes
__literal1244_buffer Buffer_t 18 , -1, 0, __literal1244_bufferBytes
__literal1245_buffer Buffer_t 15 , -1, 0, __literal1245_bufferBytes
__literal1246_buffer Buffer_t 11 , -1, 0, __literal1246_bufferBytes
__literal1250_buffer Buffer_t 12 , -1, 0, __literal1250_bufferBytes
__literal1251_buffer Buffer_t 3 , -1, 0, __literal1251_bufferBytes
__literal1252_buffer Buffer_t 9 , -1, 0, __literal1252_bufferBytes
__literal1255_buffer Buffer_t 6 , -1, 0, __literal1255_bufferBytes
__literal1256_buffer Buffer_t 4 , -1, 0, __literal1256_bufferBytes
__literal1257_buffer Buffer_t 7 , -1, 0, __literal1257_bufferBytes
__literal1258_buffer Buffer_t 5 , -1, 0, __literal1258_bufferBytes
__literal1259_buffer Buffer_t 6 , -1, 0, __literal1259_bufferBytes
__literal1260_buffer Buffer_t 7 , -1, 0, __literal1260_bufferBytes
__literal1261_buffer Buffer_t 5 , -1, 0, __literal1261_bufferBytes
__literal1262_buffer Buffer_t 6 , -1, 0, __literal1262_bufferBytes
__literal1263_buffer Buffer_t 4 , -1, 0, __literal1263_bufferBytes
__literal1264_buffer Buffer_t 10 , -1, 0, __literal1264_bufferBytes
__literal1265_buffer Buffer_t 8 , -1, 0, __literal1265_bufferBytes
__literal1266_buffer Buffer_t 16 , -1, 0, __literal1266_bufferBytes
__literal1267_buffer Buffer_t 14 , -1, 0, __literal1267_bufferBytes
__literal1268_buffer Buffer_t 15 , -1, 0, __literal1268_bufferBytes
__literal1269_buffer Buffer_t 8 , -1, 0, __literal1269_bufferBytes
__literal1270_buffer Buffer_t 4 , -1, 0, __literal1270_bufferBytes
__literal1271_buffer Buffer_t 4 , -1, 0, __literal1271_bufferBytes
__literal1272_buffer Buffer_t 4 , -1, 0, __literal1272_bufferBytes
__literal1273_buffer Buffer_t 4 , -1, 0, __literal1273_bufferBytes
__literal1274_buffer Buffer_t 11 , -1, 0, __literal1274_bufferBytes
__literal1275_buffer Buffer_t 26 , -1, 0, __literal1275_bufferBytes
__literal1276_buffer Buffer_t 18 , -1, 0, __literal1276_bufferBytes
__literal1277_buffer Buffer_t 50 , -1, 0, __literal1277_bufferBytes
__literal1278_buffer Buffer_t 21 , -1, 0, __literal1278_bufferBytes
__literal1279_buffer Buffer_t 21 , -1, 0, __literal1279_bufferBytes
__literal1280_buffer Buffer_t 25 , -1, 0, __literal1280_bufferBytes
__literal1281_buffer Buffer_t 18 , -1, 0, __literal1281_bufferBytes
__literal1282_buffer Buffer_t 24 , -1, 0, __literal1282_bufferBytes
__literal1283_buffer Buffer_t 22 , -1, 0, __literal1283_bufferBytes
__literal1284_buffer Buffer_t 20 , -1, 0, __literal1284_bufferBytes
__literal1285_buffer Buffer_t 50 , -1, 0, __literal1285_bufferBytes
__literal1286_buffer Buffer_t 19 , -1, 0, __literal1286_bufferBytes
__literal1287_buffer Buffer_t 25 , -1, 0, __literal1287_bufferBytes
__literal1288_buffer Buffer_t 42 , -1, 0, __literal1288_bufferBytes
__literal1289_buffer Buffer_t 28 , -1, 0, __literal1289_bufferBytes
__literal1290_buffer Buffer_t 24 , -1, 0, __literal1290_bufferBytes
__literal1291_buffer Buffer_t 27 , -1, 0, __literal1291_bufferBytes
__literal1292_buffer Buffer_t 24 , -1, 0, __literal1292_bufferBytes
__literal1293_buffer Buffer_t 16 , -1, 0, __literal1293_bufferBytes
__literal1294_buffer Buffer_t 14 , -1, 0, __literal1294_bufferBytes
__literal1295_buffer Buffer_t 13 , -1, 0, __literal1295_bufferBytes
__literal1296_buffer Buffer_t 19 , -1, 0, __literal1296_bufferBytes
__literal1297_buffer Buffer_t 23 , -1, 0, __literal1297_bufferBytes
__const1331_buffer Buffer_t 16 , -1, 0, __const1331_bufferBytes
__const1886_buffer Buffer_t 64 , -1, 0, __const1886_bufferBytes
__const1887_buffer Buffer_t 64 , -1, 0, __const1887_bufferBytes
__const1919_buffer Buffer_t 32 , -1, 0, __const1919_bufferBytes
__const1920_buffer Buffer_t 32 , -1, 0, __const1920_bufferBytes
__const1962_buffer Buffer_t 64 , -1, 0, __const1962_bufferBytes
__const1963_buffer Buffer_t 64 , -1, 0, __const1963_bufferBytes
__const2070_buffer Buffer_t 48 , -1, 0, __const2070_bufferBytes
__const2071_buffer Buffer_t 48 , -1, 0, __const2071_bufferBytes
__const2107_buffer Buffer_t 48 , -1, 0, __const2107_bufferBytes
__const2123_buffer Buffer_t 32 , -1, 0, __const2123_bufferBytes
__const2124_buffer Buffer_t 32 , -1, 0, __const2124_bufferBytes
__const2148_buffer Buffer_t 64 , -1, 0, __const2148_bufferBytes
__const2149_buffer Buffer_t 64 , -1, 0, __const2149_bufferBytes
__const2151_buffer Buffer_t 48 , -1, 0, __const2151_bufferBytes
__const2152_buffer Buffer_t 48 , -1, 0, __const2152_bufferBytes
__const2154_buffer Buffer_t 48 , -1, 0, __const2154_bufferBytes
__const2155_buffer Buffer_t 48 , -1, 0, __const2155_bufferBytes
__const2222_buffer Buffer_t 32 , -1, 0, __const2222_bufferBytes
__const2226_buffer Buffer_t 48 , -1, 0, __const2226_bufferBytes
__const2227_buffer Buffer_t 48 , -1, 0, __const2227_bufferBytes
__const2478_buffer Buffer_t 32 , -1, 0, __const2478_bufferBytes
__const2479_buffer Buffer_t 32 , -1, 0, __const2479_bufferBytes
__const3700_buffer Buffer_t 48 , -1, 0, __const3700_bufferBytes
__const3701_buffer Buffer_t 48 , -1, 0, __const3701_bufferBytes
__const4137_buffer Buffer_t 16 , -1, 0, __const4137_bufferBytes
__const4341_buffer Buffer_t 48 , -1, 0, __const4341_bufferBytes
__const4342_buffer Buffer_t 48 , -1, 0, __const4342_bufferBytes
__const4639_buffer Buffer_t 48 , -1, 0, __const4639_bufferBytes
__const4718_buffer Buffer_t 64 , -1, 0, __const4718_bufferBytes
__const4728_buffer Buffer_t 64 , -1, 0, __const4728_bufferBytes
__const4750_buffer Buffer_t 64 , -1, 0, __const4750_bufferBytes
__const5144_buffer Buffer_t 16 , -1, 0, __const5144_bufferBytes
__const5145_buffer Buffer_t 16 , -1, 0, __const5145_bufferBytes
__const5148_buffer Buffer_t 16 , -1, 0, __const5148_bufferBytes
__const5918_buffer Buffer_t 128 , -1, 0, __const5918_bufferBytes
__const5919_buffer Buffer_t 128 , -1, 0, __const5919_bufferBytes
__const5922_buffer Buffer_t 128 , -1, 0, __const5922_bufferBytes
__const6359_buffer Buffer_t 160 , -1, 0, __const6359_bufferBytes
__const6362_buffer Buffer_t 624 , -1, 0, __const6362_bufferBytes
__const6363_buffer Buffer_t 624 , -1, 0, __const6363_bufferBytes
__const6364_buffer Buffer_t 128 , -1, 0, __const6364_bufferBytes
__const6365_buffer Buffer_t 128 , -1, 0, __const6365_bufferBytes
__const6366_buffer Buffer_t 144 , -1, 0, __const6366_bufferBytes
__const6367_buffer Buffer_t 144 , -1, 0, __const6367_bufferBytes
__const6368_buffer Buffer_t 160 , -1, 0, __const6368_bufferBytes
__const6369_buffer Buffer_t 160 , -1, 0, __const6369_bufferBytes
; iter 2
GrammarProductionsLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 558 ; itemsCnt
dw 30, 2, 142, 0, 2, 139, 0, 1, 139, 0, 1, 138, 0, 0, 138, 31, 1, 141, 0, 2, 140, 0, 1, 140, 56, 1, 137, 42, 1, 137, 0, 1, 137, 0, 1, 137, 32, 1, 137, 33, 1, 137, 40, 1, 137, 44, 1, 137, 43, 1, 137, 45, 1, 137, 46, 1, 137, 47, 1, 137, 48, 1, 137, 49, 1, 137, 0, 2, 135, 0, 2, 135, 0, 2, 135, 0, 6, 135, 0, 6, 135, 0, 3, 136, 0, 4, 136, 0, 4, 136, 0, 6, 115, 0, 4, 115, 42, 4, 134, 0, 1, 112, 0, 0, 112, 0, 5, 132, 0, 1, 111, 0, 0, 111, 31, 2, 114, 0, 2, 109, 0, 2, 108, 0, 1, 108, 0, 1, 107, 0, 0, 107, 0, 1, 110, 0, 2, 110, 0, 3, 122, 0, 1, 122, 0, 3, 113, 0, 4, 113, 0, 2, 113, 0, 2, 113, 0, 1, 113, 0, 1, 113, 0, 5, 106, 0, 6, 106, 0, 2, 106, 0, 2, 106, 0, 3, 106, 0, 1, 106, 4, 1, 105, 0, 3, 103, 0, 4, 103, 0, 2, 103, 0, 2, 103, 0, 1, 103, 0, 1, 103, 42, 5, 101, 42, 5, 100, 0, 2, 99, 0, 4, 99, 0, 4, 131, 0, 1, 97, 0, 1, 97, 0, 2, 96, 0, 1, 96, 0, 1, 95, 0, 0, 95, 36, 6, 133, 34, 5, 98, 34, 4, 98, 37, 5, 94, 52, 1, 93, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 65, 3, 121, 58, 3, 121, 59, 3, 121, 60, 3, 121, 61, 3, 121, 64, 3, 121, 57, 2, 121, 0, 3, 121, 0, 1, 91, 74, 2, 91, 66, 3, 91, 67, 3, 91, 70, 3, 91, 71, 3, 91, 68, 3, 91, 69, 3, 91, 0, 1, 90, 0, 3, 90, 0, 3, 90, 72, 3, 90, 73, 3, 90, 72, 4, 88, 0, 1, 87, 0, 1, 87, 73, 4, 88, 0, 1, 86, 0, 1, 86, 0, 1, 85, 0, 1, 85, 0, 3, 85, 0, 2, 130, 40, 2, 83, 0, 4, 84, 0, 6, 84, 0, 4, 84, 0, 9, 129, 0, 1, 81, 0, 0, 81, 1, 1, 82, 0, 2, 82, 0, 7, 127, 0, 7, 126, 0, 7, 124, 0, 9, 125, 0, 9, 123, 0, 5, 128, 54, 4, 92, 54, 4, 92, 55, 4, 92, 55, 3, 92, 0, 1, 119, 0, 1, 119, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 9, 3, 78, 10, 3, 77, 0, 1, 76, 0, 0, 76, 9, 1, 117, 0, 3, 75, 0, 2, 75, 20, 1, 80, 52, 1, 118, 4, 1, 79, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 2, 102, 0, 3, 102, 0, 1, 102, 0, 1, 102, 0, 1, 102, 0, 1, 102, 0, 1, 102, 1, 1, 116, 3, 1, 116, 4, 1, 116, 8, 1, 116, 0, 1, 74, 0, 1, 73, 0, 1, 104, 0, 1, 104, 5, 1, 89, 5, 1, 89, 0, 1, 72
SymbolsGreedyLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 143 ; itemsCnt
db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
ParserActionsLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 231 ; itemsCnt
ParserActionsLUT_0 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
ParserActionsLUT_1 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_1_buffer
ParserActionsLUT_2 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_3 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_4 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_5 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_5_buffer
ParserActionsLUT_6 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_6_buffer
; Reuse already emitted buffer
ParserActionsLUT_7 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_8 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
ParserActionsLUT_9 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_9_buffer
ParserActionsLUT_10 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_10_buffer
ParserActionsLUT_11 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_11_buffer
ParserActionsLUT_12 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
ParserActionsLUT_13 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_13_buffer
ParserActionsLUT_14 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_15 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_16 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_17 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
ParserActionsLUT_18 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
; Reuse already emitted buffer
ParserActionsLUT_19 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_20 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_20_buffer
ParserActionsLUT_21 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_21_buffer
ParserActionsLUT_22 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_22_buffer
ParserActionsLUT_23 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_23_buffer
ParserActionsLUT_24 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_24_buffer
ParserActionsLUT_25 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_25_buffer
; Reuse already emitted buffer
ParserActionsLUT_26 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_27 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_27_buffer
ParserActionsLUT_28 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_28_buffer
ParserActionsLUT_29 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_29_buffer
ParserActionsLUT_30 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_30_buffer
; Reuse already emitted buffer
ParserActionsLUT_31 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_23_buffer
; Reuse already emitted buffer
ParserActionsLUT_32 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_33 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_34 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_35 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_35_buffer
; Reuse already emitted buffer
ParserActionsLUT_36 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_37 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_38 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_38_buffer
ParserActionsLUT_39 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_39_buffer
ParserActionsLUT_40 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_40_buffer
; Reuse already emitted buffer
ParserActionsLUT_41 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
; Reuse already emitted buffer
ParserActionsLUT_42 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_43 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_44 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_45 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_46 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_47 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_48 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_49 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_49_buffer
ParserActionsLUT_50 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_50_buffer
; Reuse already emitted buffer
ParserActionsLUT_51 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_52 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_53 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_54 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_54_buffer
ParserActionsLUT_55 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_55_buffer
; Reuse already emitted buffer
ParserActionsLUT_56 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_40_buffer
; Reuse already emitted buffer
ParserActionsLUT_57 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_40_buffer
ParserActionsLUT_58 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_58_buffer
; Reuse already emitted buffer
ParserActionsLUT_59 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_60 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_61 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_62 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_63 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_64 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_65 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_65_buffer
ParserActionsLUT_66 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_66_buffer
ParserActionsLUT_67 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_67_buffer
ParserActionsLUT_68 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_68_buffer
ParserActionsLUT_69 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_69_buffer
ParserActionsLUT_70 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_70_buffer
ParserActionsLUT_71 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_71_buffer
; Reuse already emitted buffer
ParserActionsLUT_72 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_73 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_73_buffer
ParserActionsLUT_74 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_74_buffer
ParserActionsLUT_75 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_75_buffer
ParserActionsLUT_76 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_76_buffer
; Reuse already emitted buffer
ParserActionsLUT_77 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
; Reuse already emitted buffer
ParserActionsLUT_78 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
; Reuse already emitted buffer
ParserActionsLUT_79 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
ParserActionsLUT_80 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_80_buffer
ParserActionsLUT_81 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_81_buffer
; Reuse already emitted buffer
ParserActionsLUT_82 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_81_buffer
; Reuse already emitted buffer
ParserActionsLUT_83 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_29_buffer
ParserActionsLUT_84 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_84_buffer
ParserActionsLUT_85 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_85_buffer
ParserActionsLUT_86 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_86_buffer
ParserActionsLUT_87 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_87_buffer
ParserActionsLUT_88 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_88_buffer
ParserActionsLUT_89 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_89_buffer
; Reuse already emitted buffer
ParserActionsLUT_90 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_91 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_92 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_92_buffer
; Reuse already emitted buffer
ParserActionsLUT_93 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_35_buffer
; Reuse already emitted buffer
ParserActionsLUT_94 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_35_buffer
ParserActionsLUT_95 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_95_buffer
; Reuse already emitted buffer
ParserActionsLUT_96 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_95_buffer
; Reuse already emitted buffer
ParserActionsLUT_97 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_95_buffer
ParserActionsLUT_98 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_98_buffer
ParserActionsLUT_99 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_99_buffer
ParserActionsLUT_100 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_100_buffer
ParserActionsLUT_101 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_101_buffer
ParserActionsLUT_102 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_102_buffer
ParserActionsLUT_103 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_103_buffer
; Reuse already emitted buffer
ParserActionsLUT_104 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_54_buffer
ParserActionsLUT_105 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_105_buffer
ParserActionsLUT_106 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_106_buffer
ParserActionsLUT_107 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_107_buffer
; Reuse already emitted buffer
ParserActionsLUT_108 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_107_buffer
; Reuse already emitted buffer
ParserActionsLUT_109 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_107_buffer
; Reuse already emitted buffer
ParserActionsLUT_110 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_107_buffer
; Reuse already emitted buffer
ParserActionsLUT_111 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_107_buffer
; Reuse already emitted buffer
ParserActionsLUT_112 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
; Reuse already emitted buffer
ParserActionsLUT_113 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
; Reuse already emitted buffer
ParserActionsLUT_114 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_115 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_70_buffer
ParserActionsLUT_116 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_116_buffer
; Reuse already emitted buffer
ParserActionsLUT_117 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_20_buffer
ParserActionsLUT_118 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_118_buffer
ParserActionsLUT_119 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_119_buffer
ParserActionsLUT_120 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_120_buffer
ParserActionsLUT_121 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_121_buffer
; Reuse already emitted buffer
ParserActionsLUT_122 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_123 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_124 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_124_buffer
ParserActionsLUT_125 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_125_buffer
ParserActionsLUT_126 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_126_buffer
; Reuse already emitted buffer
ParserActionsLUT_127 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_128 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_129 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_130 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_131 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_84_buffer
ParserActionsLUT_132 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_132_buffer
; Reuse already emitted buffer
ParserActionsLUT_133 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_134 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_135 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_136 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_136_buffer
ParserActionsLUT_137 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_137_buffer
; Reuse already emitted buffer
ParserActionsLUT_138 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_139 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_140 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_141 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_141_buffer
ParserActionsLUT_142 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_142_buffer
ParserActionsLUT_143 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_143_buffer
ParserActionsLUT_144 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_144_buffer
ParserActionsLUT_145 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_145_buffer
; Reuse already emitted buffer
ParserActionsLUT_146 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_20_buffer
ParserActionsLUT_147 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_147_buffer
ParserActionsLUT_148 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_148_buffer
ParserActionsLUT_149 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_149_buffer
ParserActionsLUT_150 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_150_buffer
; Reuse already emitted buffer
ParserActionsLUT_151 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_152 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
; Reuse already emitted buffer
ParserActionsLUT_153 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_154 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
; Reuse already emitted buffer
ParserActionsLUT_155 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_156 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_156_buffer
ParserActionsLUT_157 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_157_buffer
ParserActionsLUT_158 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_158_buffer
; Reuse already emitted buffer
ParserActionsLUT_159 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_160 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_160_buffer
; Reuse already emitted buffer
ParserActionsLUT_161 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_162 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_163 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_163_buffer
; Reuse already emitted buffer
ParserActionsLUT_164 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_165 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_165_buffer
ParserActionsLUT_166 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_167 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
ParserActionsLUT_168 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_168_buffer
ParserActionsLUT_169 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_169_buffer
ParserActionsLUT_170 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_170_buffer
ParserActionsLUT_171 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_171_buffer
; Reuse already emitted buffer
ParserActionsLUT_172 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
; Reuse already emitted buffer
ParserActionsLUT_173 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_143_buffer
; Reuse already emitted buffer
ParserActionsLUT_174 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
ParserActionsLUT_175 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_175_buffer
; Reuse already emitted buffer
ParserActionsLUT_176 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_81_buffer
; Reuse already emitted buffer
ParserActionsLUT_177 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_81_buffer
; Reuse already emitted buffer
ParserActionsLUT_178 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_179 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_179_buffer
ParserActionsLUT_180 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_180_buffer
; Reuse already emitted buffer
ParserActionsLUT_181 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_179_buffer
ParserActionsLUT_182 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_182_buffer
; Reuse already emitted buffer
ParserActionsLUT_183 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_179_buffer
ParserActionsLUT_184 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_184_buffer
; Reuse already emitted buffer
ParserActionsLUT_185 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_186 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_23_buffer
; Reuse already emitted buffer
ParserActionsLUT_187 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_188 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
; Reuse already emitted buffer
ParserActionsLUT_189 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_190 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_190_buffer
ParserActionsLUT_191 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_191_buffer
ParserActionsLUT_192 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_192_buffer
; Reuse already emitted buffer
ParserActionsLUT_193 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_194 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_195 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_196 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_197 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_198 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
ParserActionsLUT_199 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_199_buffer
; Reuse already emitted buffer
ParserActionsLUT_200 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_17_buffer
ParserActionsLUT_201 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_201_buffer
ParserActionsLUT_202 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_202_buffer
; Reuse already emitted buffer
ParserActionsLUT_203 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_202_buffer
ParserActionsLUT_204 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_204_buffer
ParserActionsLUT_205 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_205_buffer
; Reuse already emitted buffer
ParserActionsLUT_206 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_207 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_207_buffer
; Reuse already emitted buffer
ParserActionsLUT_208 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_209 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_209_buffer
; Reuse already emitted buffer
ParserActionsLUT_210 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_211 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_212 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_212_buffer
ParserActionsLUT_213 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_213_buffer
; Reuse already emitted buffer
ParserActionsLUT_214 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_191_buffer
; Reuse already emitted buffer
ParserActionsLUT_215 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_191_buffer
; Reuse already emitted buffer
ParserActionsLUT_216 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_217 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_218 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_219 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_220 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_168_buffer
; Reuse already emitted buffer
ParserActionsLUT_221 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_222 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_223 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_179_buffer
; Reuse already emitted buffer
ParserActionsLUT_224 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_179_buffer
; Reuse already emitted buffer
ParserActionsLUT_225 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
; Reuse already emitted buffer
ParserActionsLUT_226 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_168_buffer
; Reuse already emitted buffer
ParserActionsLUT_227 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_228 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_228_buffer
ParserActionsLUT_229 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_229_buffer
ParserActionsLUT_230 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_230_buffer
ParserGotoLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 231 ; itemsCnt
ParserGotoLUT_0 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_0_buffer
; Reuse already emitted buffer
ParserGotoLUT_1 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_2 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_2_buffer
ParserGotoLUT_3 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_3_buffer
ParserGotoLUT_4 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_4_buffer
; Reuse already emitted buffer
ParserGotoLUT_5 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_6 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_7 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_7_buffer
; Reuse already emitted buffer
ParserGotoLUT_8 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_9 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_10 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_11 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_12 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_12_buffer
; Reuse already emitted buffer
ParserGotoLUT_13 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_14 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_15 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_15_buffer
ParserGotoLUT_16 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_16_buffer
ParserGotoLUT_17 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_17_buffer
; Reuse already emitted buffer
ParserGotoLUT_18 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_19 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_19_buffer
ParserGotoLUT_20 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_20_buffer
; Reuse already emitted buffer
ParserGotoLUT_21 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_22 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_23 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_23_buffer
ParserGotoLUT_24 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_24_buffer
; Reuse already emitted buffer
ParserGotoLUT_25 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_26 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_27 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_28 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_29 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_29_buffer
; Reuse already emitted buffer
ParserGotoLUT_30 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_31 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_31_buffer
ParserGotoLUT_32 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_32_buffer
; Reuse already emitted buffer
ParserGotoLUT_33 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_34 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_35 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_36 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_37 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_38 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_39 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_40 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_41 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_42 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_42_buffer
ParserGotoLUT_43 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_43_buffer
ParserGotoLUT_44 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_44_buffer
ParserGotoLUT_45 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_45_buffer
ParserGotoLUT_46 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_46_buffer
ParserGotoLUT_47 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_47_buffer
ParserGotoLUT_48 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_48_buffer
ParserGotoLUT_49 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_49_buffer
ParserGotoLUT_50 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_50_buffer
ParserGotoLUT_51 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_51_buffer
ParserGotoLUT_52 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_52_buffer
; Reuse already emitted buffer
ParserGotoLUT_53 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_54 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_55 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_56 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_57 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_58 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_59 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_59_buffer
ParserGotoLUT_60 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_60_buffer
ParserGotoLUT_61 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_61_buffer
ParserGotoLUT_62 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_62_buffer
ParserGotoLUT_63 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_63_buffer
ParserGotoLUT_64 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_64_buffer
; Reuse already emitted buffer
ParserGotoLUT_65 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_66 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_67 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_68 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_69 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_70 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_70_buffer
; Reuse already emitted buffer
ParserGotoLUT_71 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_72 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_72_buffer
; Reuse already emitted buffer
ParserGotoLUT_73 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_74 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_75 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_76 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_77 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_77_buffer
ParserGotoLUT_78 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_78_buffer
ParserGotoLUT_79 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_79_buffer
; Reuse already emitted buffer
ParserGotoLUT_80 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_81 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_81_buffer
ParserGotoLUT_82 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_82_buffer
ParserGotoLUT_83 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_83_buffer
; Reuse already emitted buffer
ParserGotoLUT_84 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_85 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_86 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_87 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_88 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_89 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_49_buffer
ParserGotoLUT_90 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_90_buffer
; Reuse already emitted buffer
ParserGotoLUT_91 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_92 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_93 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_94 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_95 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_96 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_97 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_98 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_99 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_100 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_101 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_102 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_103 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_104 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_105 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_105_buffer
ParserGotoLUT_106 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_106_buffer
; Reuse already emitted buffer
ParserGotoLUT_107 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_108 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_109 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_110 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_111 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_112 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_113 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_113_buffer
ParserGotoLUT_114 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_114_buffer
ParserGotoLUT_115 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_115_buffer
; Reuse already emitted buffer
ParserGotoLUT_116 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_117 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_117_buffer
; Reuse already emitted buffer
ParserGotoLUT_118 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_119 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_120 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_121 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_122 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_122_buffer
ParserGotoLUT_123 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_123_buffer
; Reuse already emitted buffer
ParserGotoLUT_124 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_125 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_126 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_127 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_127_buffer
ParserGotoLUT_128 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_128_buffer
; Reuse already emitted buffer
ParserGotoLUT_129 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_130 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_131 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_132 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_132_buffer
ParserGotoLUT_133 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_133_buffer
ParserGotoLUT_134 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_134_buffer
; Reuse already emitted buffer
ParserGotoLUT_135 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_136 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_137 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_138 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_138_buffer
ParserGotoLUT_139 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_139_buffer
; Reuse already emitted buffer
ParserGotoLUT_140 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_141 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_141_buffer
; Reuse already emitted buffer
ParserGotoLUT_142 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_143 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_143_buffer
; Reuse already emitted buffer
ParserGotoLUT_144 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_145 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_146 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_146_buffer
; Reuse already emitted buffer
ParserGotoLUT_147 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_81_buffer
; Reuse already emitted buffer
ParserGotoLUT_148 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_82_buffer
; Reuse already emitted buffer
ParserGotoLUT_149 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_150 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_151 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_151_buffer
ParserGotoLUT_152 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_152_buffer
ParserGotoLUT_153 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_153_buffer
ParserGotoLUT_154 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_154_buffer
ParserGotoLUT_155 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_155_buffer
; Reuse already emitted buffer
ParserGotoLUT_156 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_157 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_157_buffer
; Reuse already emitted buffer
ParserGotoLUT_158 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_159 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_160 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_160_buffer
ParserGotoLUT_161 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_161_buffer
ParserGotoLUT_162 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_162_buffer
; Reuse already emitted buffer
ParserGotoLUT_163 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_164 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_165 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_165_buffer
ParserGotoLUT_166 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_166_buffer
ParserGotoLUT_167 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_167_buffer
; Reuse already emitted buffer
ParserGotoLUT_168 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_169 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_170 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_171 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_172 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_172_buffer
ParserGotoLUT_173 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_173_buffer
ParserGotoLUT_174 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_174_buffer
; Reuse already emitted buffer
ParserGotoLUT_175 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_176 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_176_buffer
ParserGotoLUT_177 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_177_buffer
ParserGotoLUT_178 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_178_buffer
ParserGotoLUT_179 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_179_buffer
; Reuse already emitted buffer
ParserGotoLUT_180 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_181 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_181_buffer
; Reuse already emitted buffer
ParserGotoLUT_182 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_183 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_183_buffer
; Reuse already emitted buffer
ParserGotoLUT_184 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_185 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_185_buffer
ParserGotoLUT_186 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_186_buffer
ParserGotoLUT_187 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_187_buffer
; Reuse already emitted buffer
ParserGotoLUT_188 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_189 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_190 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_191 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_192 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_193 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_193_buffer
ParserGotoLUT_194 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_194_buffer
ParserGotoLUT_195 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_195_buffer
ParserGotoLUT_196 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_196_buffer
ParserGotoLUT_197 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_197_buffer
ParserGotoLUT_198 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_198_buffer
ParserGotoLUT_199 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_199_buffer
ParserGotoLUT_200 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_200_buffer
; Reuse already emitted buffer
ParserGotoLUT_201 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_202 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_203 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_204 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_204_buffer
; Reuse already emitted buffer
ParserGotoLUT_205 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_206 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_206_buffer
; Reuse already emitted buffer
ParserGotoLUT_207 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_208 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_208_buffer
; Reuse already emitted buffer
ParserGotoLUT_209 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_210 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_210_buffer
; Reuse already emitted buffer
ParserGotoLUT_211 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_212 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_213 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_214 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_215 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_216 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_217 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_218 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_219 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_219_buffer
; Reuse already emitted buffer
ParserGotoLUT_220 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_221 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_221_buffer
ParserGotoLUT_222 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_222_buffer
ParserGotoLUT_223 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_223_buffer
ParserGotoLUT_224 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_224_buffer
; Reuse already emitted buffer
ParserGotoLUT_225 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_226 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_227 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_228 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_229 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_230 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsDefaultLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 231 ; itemsCnt
dw 4, 160, -1, 3, -1, -1, -1, -1, 87, -1, 86, 143, 34, 84, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, 88, -1, 89, 155, 85, -1, 34, 87, 86, 96, 84, 85, 143, 99, 22, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, 33, -1, 23, 24, -1, -1, -1, -1, -1, -1, -1, 143, 88, 89, -1, -1, 77, 69, -1, 88, 89, -1, -1, -1, -1, -1, -1, -1, -1, 59, 154, -1, -1, -1, -1, -1, -1, 27, 90, 91, 92, 93, 94, 95, -1, 143, -1, -1, 161, 143, 50, -1, -1, 100, 105, 104, 103, 101, 102, 37, 4, 76, -1, -1, -1, -1, 89, -1, 4, -1, -1, -1, -1, 34, -1, 109, 110, 57, -1, -1, 4, 46, -1, -1, 34, -1, 48, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, 49, 66, -1, -1, 65, -1, 31, 44, -1, 42, 4, -1, -1, -1, -1, 4, -1, 4, -1, 4, -1, -1, -1, 4, 26, 25, 64, 168, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112, 115, 127, -1, -1, -1, -1, -1, -1, 54, -1, 166, 162, 163, 164, 165, 167, -1, 61, -1, 4, 4, 4, 55, 62, 129, -1, -1, -1
LexerSelectLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 0 ; itemsCnt
LexerIndexBaseLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
db 0
LexerIndexLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
LexerIndexLUT_0 Variant_t VARIANT_ARRAY, 0, LexerIndexLUT_0_buffer
LexerCharsLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2710 ; itemsCnt
dw 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 58, 58, 60, 60, 61, 61, 62, 62, 64, 64, 91, 91, 93, 93, 97, 97, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 107, 107, 109, 109, 110, 110, 111, 111, 112, 112, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 98, 98, 100, 100, 104, 104, 106, 106, 108, 108, 113, 113, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, 97, 97, 98, 98, 65, 90, 99, 122, -1, -1, -1, -1, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 255, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 255, -1, -1, 46, 46, 48, 57, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 255, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 255, -1, -1, 42, 42, 0, 41, 43, 255, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 108, 108, 110, 110, 120, 120, 48, 57, 65, 90, 95, 95, 97, 107, 109, 109, 111, 119, 121, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 255, -1, -1, 65, 90, 97, 122, -1, -1, 97, 97, 111, 111, 114, 114, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 113, 115, 116, 118, 122, -1, -1, 42, 42, 0, 41, 43, 255, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 102, 102, 109, 109, 110, 110, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 111, 114, 116, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 111, 111, 65, 90, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 255, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 101, 101, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 255, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 255, -1, -1, 108, 108, 65, 90, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 65, 90, 98, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 111, 111, 114, 114, 48, 57, 65, 90, 95, 95, 97, 110, 112, 113, 115, 122, -1, -1, 105, 105, 65, 90, 97, 104, 106, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 104, 104, 114, 114, 48, 57, 65, 90, 95, 95, 97, 103, 105, 113, 115, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 105, 105, 115, 115, 48, 57, 65, 90, 95, 95, 97, 104, 106, 114, 116, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 121, 121, 48, 57, 65, 90, 95, 95, 97, 120, 122, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 99, 99, 102, 102, 105, 105, 109, 109, 119, 119, 48, 57, 65, 90, 95, 95, 97, 98, 100, 101, 103, 104, 106, 108, 110, 118, 120, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 109, 109, 48, 57, 65, 90, 95, 95, 97, 108, 110, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 109, 109, 48, 57, 65, 90, 95, 95, 97, 108, 110, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 97, 110, 112, 116, 118, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 120, 120, 48, 57, 65, 90, 95, 95, 97, 119, 121, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 109, 109, 48, 57, 65, 90, 95, 95, 97, 108, 110, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1
LexerTransLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 1355 ; itemsCnt
dw 1, 71, 77, 82, 2, 3, 4, 5, 6, 7, 8, 9, 10, 73, 11, 12, 13, 14, 15, 16, 17, 18, 75, 81, 84, 87, 90, 93, 150, 96, 99, 102, 164, 104, 106, 146, 108, 109, 19, 20, 21, 22, 22, 110, 110, 110, 110, 110, 110, 110, 110, 110, -1, -1, -1, -1, -1, -1, -1, 25, -1, 26, -1, 85, 27, -1, 88, 73, 91, -1, -1, 28, -1, -1, 29, -1, 74, 80, 83, 83, -1, -1, -1, 111, 110, 110, 110, 110, 110, -1, -1, -1, -1, 22, 22, -1, -1, 24, 24, 94, 94, 94, 94, -1, -1, -1, -1, -1, -1, 110, 110, 110, 110, -1, 191, 110, 110, 110, 110, 110, -1, 135, 110, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 35, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 83, 83, -1, 110, 110, 110, 110, -1, 83, 83, -1, 110, 110, 110, 110, -1, 23, 24, 24, 71, 71, 71, 71, -1, 72, 72, 77, 77, 77, -1, 88, 73, -1, 86, 83, 83, 83, -1, 112, 160, 110, 110, 110, 110, 110, 110, -1, 76, 76, 97, 97, 97, 97, -1, 72, 72, 77, 77, 77, -1, 100, 85, 85, -1, 79, 79, 79, -1, 147, 83, 83, 83, -1, 113, 114, 205, 110, 110, 110, 110, 110, 110, 110, -1, 23, 76, 76, 82, 82, 82, 82, -1, 83, 83, -1, 149, 115, 116, 171, 110, 110, 110, 110, 110, 110, 110, -1, 100, 85, 85, -1, 89, 83, 83, 83, -1, 155, 110, 110, 110, 110, 110, -1, 35, -1, 95, 83, 83, 83, -1, 30, 117, 31, 32, 110, 110, 110, 110, 110, 110, 110, -1, 79, 79, 79, -1, 98, 83, 83, 83, -1, 118, 110, 110, 110, 110, 110, -1, 24, 24, 94, 94, 94, 94, -1, 101, 83, 83, 83, -1, 120, 121, 163, 110, 110, 110, 110, 110, 110, 110, -1, 76, 76, 97, 97, 97, 97, -1, 204, 83, 83, 83, -1, 33, 110, 110, 110, 110, 110, -1, 100, 78, 85, 85, 85, -1, 103, 83, 83, 83, -1, 122, 110, 110, 110, 110, 110, -1, 105, 83, 83, -1, 173, 110, 110, 110, 110, 110, -1, 148, 83, 83, 83, -1, 34, 123, 110, 110, 110, 110, 110, 110, -1, 151, 83, 83, 83, -1, 172, 110, 110, 110, 110, -1, 125, 126, 110, 110, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 36, 110, 110, 110, 110, 110, -1, 127, 110, 110, 110, 110, -1, 129, 180, 110, 110, 110, 110, 110, 110, -1, 130, 110, 110, 110, 110, 110, -1, 37, 110, 110, 110, 110, 110, -1, 132, 110, 110, 110, 110, 110, -1, 167, 110, 110, 110, 110, 110, -1, 136, 110, 110, 110, 110, 110, -1, 137, 110, 110, 110, 110, 110, -1, 38, 110, 110, 110, 110, 110, -1, 39, 110, 110, 110, 110, 110, -1, 178, 110, 110, 110, 110, 110, -1, 193, 110, 110, 110, 110, 110, -1, 139, 110, 110, 110, 110, 110, -1, 211, 110, 110, 110, 110, 110, -1, 213, 110, 110, 110, 110, 110, -1, 140, 110, 110, 110, 110, 110, -1, 156, 110, 110, 110, 110, 110, -1, 40, 110, 110, 110, 110, 110, -1, 214, 141, 142, 220, 143, 110, 110, 110, 110, 110, 110, 110, 110, 110, -1, 195, 110, 110, 110, 110, 110, -1, 42, 110, 110, 110, 110, 110, -1, 168, 110, 110, 110, 110, 110, -1, 207, 110, 110, 110, 110, 110, -1, 43, 110, 110, 110, 110, 110, -1, 44, 110, 110, 110, 110, 110, -1, 175, 110, 110, 110, 110, 110, -1, 47, 110, 110, 110, 110, 110, -1, 145, 110, 110, 110, 110, 110, -1, 49, 110, 110, 110, 110, 110, -1, 165, 224, 110, 110, 110, 110, 110, 110, -1, 51, 110, 110, 110, 110, 110, -1, 157, 110, 110, 110, 110, 110, -1, 199, 110, 110, 110, 110, 110, -1, 217, 110, 110, 110, 110, 110, -1, 124, 110, 110, 110, 110, 110, -1, 92, 83, 83, 83, -1, 67, 83, 83, 83, -1, 131, 110, 110, 110, 110, 110, -1, 119, 110, 110, 110, 110, 110, -1, 206, 83, 83, 83, -1, 183, 110, 110, 110, 110, 110, -1, 154, 110, 110, 110, 110, -1, 46, 110, 110, 110, 110, 110, -1, 134, 110, 110, 110, 110, 110, -1, 50, 110, 110, 110, 110, 110, -1, 218, 110, 110, 110, 110, 110, -1, 60, 110, 110, 110, 110, 110, -1, 202, 110, 110, 110, 110, 110, -1, 128, 110, 110, 110, 110, 110, -1, 107, 83, 83, 83, -1, 69, 83, 83, 83, -1, 179, 110, 110, 110, 110, 110, -1, 153, 110, 110, 110, 110, 110, -1, 56, 110, 110, 110, 110, 110, -1, 177, 110, 110, 110, 110, 110, -1, 152, 110, 110, 110, 110, 110, -1, 169, 110, 110, 110, 110, 110, -1, 182, 110, 110, 110, 110, 110, -1, 189, 110, 110, 110, 110, 110, -1, 133, 110, 110, 110, 110, 110, -1, 209, 110, 110, 110, 110, 110, -1, 138, 110, 110, 110, 110, 110, -1, 59, 110, 110, 110, 110, 110, -1, 174, 110, 110, 110, 110, 110, -1, 53, 110, 110, 110, 110, 110, -1, 61, 110, 110, 110, 110, 110, -1, 176, 110, 110, 110, 110, 110, -1, 45, 110, 110, 110, 110, 110, -1, 41, 110, 110, 110, 110, 110, -1, 66, 110, 110, 110, 110, 110, -1, 190, 110, 110, 110, 110, 110, -1, 58, 110, 110, 110, 110, 110, -1, 62, 110, 110, 110, 110, 110, -1, 166, 110, 110, 110, 110, 110, -1, 185, 110, 110, 110, 110, 110, -1, 70, 110, 110, 110, 110, 110, -1, 181, 110, 110, 110, 110, 110, -1, 63, 110, 110, 110, 110, 110, -1, 65, 110, 110, 110, 110, 110, -1, 144, 110, 110, 110, 110, 110, -1, 215, 110, 110, 110, 110, 110, -1, 48, 110, 110, 110, 110, 110, -1, 68, 110, 110, 110, 110, 110, -1, 52, 110, 110, 110, 110, 110, -1, 158, 110, 110, 110, 110, 110, -1, 54, 110, 110, 110, 110, 110, -1, 55, 110, 110, 110, 110, 110, -1, 184, 110, 110, 110, 110, 110, -1, 159, 110, 110, 110, 110, 110, -1, 64, 110, 110, 110, 110, 110, -1, 192, 110, 110, 110, 110, 110, -1, 187, 110, 110, 110, 110, 110, -1, 161, 83, 83, 83, -1, 186, 110, 110, 110, 110, 110, -1, 162, 83, 83, 83, -1, 216, 110, 110, 110, 110, -1, 170, 110, 110, 110, 110, -1, 196, 110, 110, 110, 110, 110, -1, 188, 110, 110, 110, 110, 110, -1, 197, 110, 110, 110, 110, 110, -1, 194, 110, 110, 110, 110, 110, -1, 198, 110, 110, 110, 110, 110, -1, 208, 110, 110, 110, 110, 110, -1, 203, 110, 110, 110, 110, 110, -1, 57, 110, 110, 110, 110, 110, -1, 200, 110, 110, 110, 110, 110, -1, 201, 110, 110, 110, 110, 110, -1, 210, 110, 110, 110, 110, 110, -1, 219, 110, 110, 110, 110, 110, -1, 212, 110, 110, 110, 110, 110, -1, 221, 110, 110, 110, 110, 110, -1, 222, 110, 110, 110, 110, 110, -1, 223, 110, 110, 110, 110, 110, -1
LexerAcceptLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
LexerAcceptLUT_0 Variant_t VARIANT_ARRAY, 0, LexerAcceptLUT_0_buffer
__literal0_bufferBytes StringHead_t 6
 db  "opcode" , 0
__literal1_bufferBytes StringHead_t 5
 db  "value" , 0
__literal2_bufferBytes StringHead_t 2
 db  "id" , 0
__literal3_bufferBytes StringHead_t 8
 db  "children" , 0
__literal4_bufferBytes StringHead_t 6
 db  "parent" , 0
__literal5_bufferBytes StringHead_t 4
 db  "next" , 0
__literal6_bufferBytes StringHead_t 0
 db  "" , 0
__literal7_bufferBytes StringHead_t 2
 db  ".." , 0
__literal11_bufferBytes StringHead_t 12
 db  "constantsMap" , 0
__literal12_bufferBytes StringHead_t 8
 db  "filePath" , 0
__literal13_bufferBytes StringHead_t 1
 db  ":" , 0
__literal14_bufferBytes StringHead_t 9
 db  ": error: " , 0
__literal15_bufferBytes StringHead_t 12
 db  "syntax error" , 0
__literal16_bufferBytes StringHead_t 5
 db  "print" , 0
__literal17_bufferBytes StringHead_t 6
 db  "global" , 0
__literal18_bufferBytes StringHead_t 6
 db  "import" , 0
__literal19_bufferBytes StringHead_t 27
 db  "__mold_arrayInsertAfterLast" , 0
__literal20_bufferBytes StringHead_t 28
 db  "__mold_arrayInsertBeforeLast" , 0
__literal21_bufferBytes StringHead_t 29
 db  "redeclaration of a constant '" , 0
__literal22_bufferBytes StringHead_t 1
 db  "'" , 0
__literal23_bufferBytes StringHead_t 4
 db  "read" , 0
__literal24_bufferBytes StringHead_t 5
 db  "write" , 0
__literal25_bufferBytes StringHead_t 4
 db  "name" , 0
__literal26_bufferBytes StringHead_t 8
 db  "baseName" , 0
__literal27_bufferBytes StringHead_t 20
 db  "__this_placeholder__" , 0
__literal28_bufferBytes StringHead_t 56
 db  "only constant values can be inserted into constant array" , 0
__literal29_bufferBytes StringHead_t 19
 db  "unterminated string" , 0
__literal30_bufferBytes StringHead_t 4
 db  "line" , 0
__literal31_bufferBytes StringHead_t 6
 db  "column" , 0
__literal32_bufferBytes StringHead_t 18
 db  "MAX ITERS reached!" , 0
AST_DataTypeNames_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
; Reuse already emitted buffer
AST_DataTypeNames_0 Variant_t VARIANT_STRING, 0, __literal88_buffer
; Reuse already emitted buffer
AST_DataTypeNames_1 Variant_t VARIANT_STRING, 0, __literal302_buffer
; Reuse already emitted buffer
AST_DataTypeNames_2 Variant_t VARIANT_STRING, 0, __literal303_buffer
; Reuse already emitted buffer
AST_DataTypeNames_3 Variant_t VARIANT_STRING, 0, __literal303_buffer
; Reuse already emitted buffer
AST_DataTypeNames_4 Variant_t VARIANT_STRING, 0, __literal160_buffer
; Reuse already emitted buffer
AST_DataTypeNames_5 Variant_t VARIANT_STRING, 0, __literal304_buffer
AST_DataTypeNames_6 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_6_buffer
; Reuse already emitted buffer
AST_DataTypeNames_7 Variant_t VARIANT_STRING, 0, __literal79_buffer
; Reuse already emitted buffer
AST_DataTypeNames_8 Variant_t VARIANT_STRING, 0, __literal301_buffer
; Reuse already emitted buffer
AST_DataTypeNames_9 Variant_t VARIANT_STRING, 0, __literal305_buffer
; Reuse already emitted buffer
AST_DataTypeNames_10 Variant_t VARIANT_STRING, 0, __literal306_buffer
AST_DataTypeForMIR_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
; Reuse already emitted buffer
AST_DataTypeForMIR_0 Variant_t VARIANT_STRING, 0, __literal137_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_1 Variant_t VARIANT_STRING, 0, __literal154_buffer
AST_DataTypeForMIR_2 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_2_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_3 Variant_t VARIANT_STRING, 0, __literal158_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_4 Variant_t VARIANT_STRING, 0, __literal160_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_5 Variant_t VARIANT_STRING, 0, __literal159_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_6 Variant_t VARIANT_STRING, 0, __literal130_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_7 Variant_t VARIANT_STRING, 0, __literal137_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_8 Variant_t VARIANT_STRING, 0, __literal130_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_9 Variant_t VARIANT_STRING, 0, __literal130_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_10 Variant_t VARIANT_STRING, 0, __literal130_buffer
__literal33_bufferBytes StringHead_t 14
 db  "__mold_syscall" , 0
__literal34_bufferBytes StringHead_t 9
 db  "sysCallId" , 0
__literal35_bufferBytes StringHead_t 7
 db  "PROGRAM" , 0
__literal36_bufferBytes StringHead_t 5
 db  "BLOCK" , 0
__literal37_bufferBytes StringHead_t 8
 db  "FUNCTION" , 0
__literal38_bufferBytes StringHead_t 5
 db  "CLASS" , 0
__literal39_bufferBytes StringHead_t 6
 db  "METHOD" , 0
__literal40_bufferBytes StringHead_t 2
 db  "IF" , 0
__literal41_bufferBytes StringHead_t 3
 db  "FOR" , 0
__literal42_bufferBytes StringHead_t 5
 db  "WHILE" , 0
__literal43_bufferBytes StringHead_t 4
 db  "CALL" , 0
__literal44_bufferBytes StringHead_t 18
 db  "REFERENCE_BY_INDEX" , 0
__literal45_bufferBytes StringHead_t 16
 db  "REFERENCE_BY_KEY" , 0
__literal46_bufferBytes StringHead_t 7
 db  "INTEGER" , 0
__literal47_bufferBytes StringHead_t 6
 db  "STRING" , 0
__literal48_bufferBytes StringHead_t 5
 db  "FLOAT" , 0
__literal49_bufferBytes StringHead_t 6
 db  "DOUBLE" , 0
__literal50_bufferBytes StringHead_t 4
 db  "BOOL" , 0
__literal51_bufferBytes StringHead_t 5
 db  "ARRAY" , 0
__literal52_bufferBytes StringHead_t 3
 db  "MAP" , 0
__literal53_bufferBytes StringHead_t 9
 db  "UNDEFINED" , 0
__literal54_bufferBytes StringHead_t 8
 db  "BOOL_AND" , 0
__literal55_bufferBytes StringHead_t 7
 db  "BOOL_OR" , 0
__literal56_bufferBytes StringHead_t 3
 db  "NEG" , 0
__literal57_bufferBytes StringHead_t 3
 db  "ADD" , 0
__literal58_bufferBytes StringHead_t 11
 db  "STRING_JOIN" , 0
__literal59_bufferBytes StringHead_t 3
 db  "SUB" , 0
__literal60_bufferBytes StringHead_t 3
 db  "MUL" , 0
__literal61_bufferBytes StringHead_t 3
 db  "DIV" , 0
__literal62_bufferBytes StringHead_t 4
 db  "IDIV" , 0
__literal63_bufferBytes StringHead_t 6
 db  "CMP_EQ" , 0
__literal64_bufferBytes StringHead_t 6
 db  "CMP_NE" , 0
__literal65_bufferBytes StringHead_t 6
 db  "CMP_LT" , 0
__literal66_bufferBytes StringHead_t 6
 db  "CMP_LE" , 0
__literal67_bufferBytes StringHead_t 6
 db  "CMP_GT" , 0
__literal68_bufferBytes StringHead_t 6
 db  "CMP_GE" , 0
__literal69_bufferBytes StringHead_t 17
 db  "DECLARE_OR_ASSIGN" , 0
__literal70_bufferBytes StringHead_t 8
 db  "VARIABLE" , 0
__literal71_bufferBytes StringHead_t 3
 db  "NOP" , 0
__literal72_bufferBytes StringHead_t 9
 db  "TYPE_CAST" , 0
__literal73_bufferBytes StringHead_t 8
 db  "CALL_NEW" , 0
__literal74_bufferBytes StringHead_t 5
 db  "VCALL" , 0
__literal75_bufferBytes StringHead_t 10
 db  "[UNKNOWN: " , 0
__literal76_bufferBytes StringHead_t 1
 db  "]" , 0
__literal77_bufferBytes StringHead_t 2
 db  "&i" , 0
__literal78_bufferBytes StringHead_t 2
 db  "&s" , 0
__literal79_bufferBytes StringHead_t 4
 db  "null" , 0
__literal80_bufferBytes StringHead_t 1
 db  "i" , 0
__literal81_bufferBytes StringHead_t 1
 db  "s" , 0
__literal82_bufferBytes StringHead_t 1
 db  "f" , 0
__literal83_bufferBytes StringHead_t 1
 db  "b" , 0
__literal84_bufferBytes StringHead_t 1
 db  "a" , 0
__literal85_bufferBytes StringHead_t 1
 db  "m" , 0
__literal86_bufferBytes StringHead_t 3
 db  "and" , 0
__literal87_bufferBytes StringHead_t 2
 db  "or" , 0
__literal88_bufferBytes StringHead_t 1
 db  "-" , 0
__literal89_bufferBytes StringHead_t 1
 db  "+" , 0
__literal90_bufferBytes StringHead_t 1
 db  "~" , 0
__literal91_bufferBytes StringHead_t 1
 db  "*" , 0
__literal92_bufferBytes StringHead_t 1
 db  "/" , 0
__literal93_bufferBytes StringHead_t 2
 db  "//" , 0
__literal94_bufferBytes StringHead_t 2
 db  "eq" , 0
__literal95_bufferBytes StringHead_t 2
 db  "ne" , 0
__literal96_bufferBytes StringHead_t 2
 db  "lt" , 0
__literal97_bufferBytes StringHead_t 2
 db  "le" , 0
__literal98_bufferBytes StringHead_t 2
 db  "gt" , 0
__literal99_bufferBytes StringHead_t 2
 db  "ge" , 0
__literal100_bufferBytes StringHead_t 6
 db  "typeof" , 0
__literal101_bufferBytes StringHead_t 9
 db  "nottypeof" , 0
__literal102_bufferBytes StringHead_t 1
 db  "v" , 0
__literal103_bufferBytes StringHead_t 4
 db  "call" , 0
__literal104_bufferBytes StringHead_t 3
 db  "new" , 0
__literal105_bufferBytes StringHead_t 5
 db  "vcall" , 0
__literal106_bufferBytes StringHead_t 5
 db  "block" , 0
__literal107_bufferBytes StringHead_t 1
 db  "=" , 0
__literal108_bufferBytes StringHead_t 3
 db  "for" , 0
__literal109_bufferBytes StringHead_t 5
 db  "while" , 0
__literal110_bufferBytes StringHead_t 2
 db  "if" , 0
__literal111_bufferBytes StringHead_t 5
 db  "for_v" , 0
__literal112_bufferBytes StringHead_t 5
 db  "for_k" , 0
__literal113_bufferBytes StringHead_t 5
 db  "for_i" , 0
__literal114_bufferBytes StringHead_t 6
 db  "for_iv" , 0
__literal115_bufferBytes StringHead_t 6
 db  "for_kv" , 0
__literal116_bufferBytes StringHead_t 4
 db  "cast" , 0
__literal117_bufferBytes StringHead_t 3
 db  "nop" , 0
__literal118_bufferBytes StringHead_t 8
 db  "__unused" , 0
__literal119_bufferBytes StringHead_t 5
 db  "error" , 0
__literal120_bufferBytes StringHead_t 25
 db  "error: unhandled opcode: " , 0
__literal121_bufferBytes StringHead_t 46
 db  "error: unhandled opcode in AST_InvertBoolean: " , 0
__literal122_bufferBytes StringHead_t 4
 db  "hash" , 0
__literal123_bufferBytes StringHead_t 1
 db  "@" , 0
__literal124_bufferBytes StringHead_t 10
 db  "symbolInfo" , 0
__literal125_bufferBytes StringHead_t 2
 db  "s:" , 0
__literal126_bufferBytes StringHead_t 11
 db  "storedValue" , 0
__literal127_bufferBytes StringHead_t 1
 db  "," , 0
__literal128_bufferBytes StringHead_t 5
 db  "cast," , 0
__literal129_bufferBytes StringHead_t 11
 db  "astDataType" , 0
__literal130_bufferBytes StringHead_t 7
 db  "variant" , 0
__literal131_bufferBytes StringHead_t 18
 db  "_cachedAstDataType" , 0
__literal132_bufferBytes StringHead_t 7
 db  "astType" , 0
__literal133_bufferBytes StringHead_t 12
 db  "astInnerType" , 0
__literal134_bufferBytes StringHead_t 5
 db  "proto" , 0
__literal135_bufferBytes StringHead_t 13
 db  "astTypeRetVal" , 0
__literal136_bufferBytes StringHead_t 57
 db  "error: unset AST data type at AST_GetDataType() at node #" , 0
__literal137_bufferBytes StringHead_t 7
 db  "[error]" , 0
__literal140_bufferBytes StringHead_t 2
 db  "rv" , 0
__literal142_bufferBytes StringHead_t 5
 db  "label" , 0
__literal146_bufferBytes StringHead_t 18
 db  "Created new object" , 0
__literal147_bufferBytes StringHead_t 3
 db  "app" , 0
__literal148_bufferBytes StringHead_t 7
 db  "deepIdx" , 0
__literal149_bufferBytes StringHead_t 7
 db  "deepMax" , 0
__literal150_bufferBytes StringHead_t 9
 db  "loopLevel" , 0
__literal151_bufferBytes StringHead_t 9
 db  "procLevel" , 0
__literal152_bufferBytes StringHead_t 8
 db  "literals" , 0
__literal153_bufferBytes StringHead_t 14
 db  "poolOfTempVars" , 0
__literal154_bufferBytes StringHead_t 5
 db  "int32" , 0
__literal155_bufferBytes StringHead_t 3
 db  "cnt" , 0
__literal156_bufferBytes StringHead_t 4
 db  "pool" , 0
__literal157_bufferBytes StringHead_t 5
 db  "int64" , 0
__literal158_bufferBytes StringHead_t 7
 db  "float64" , 0
__literal159_bufferBytes StringHead_t 6
 db  "bool32" , 0
__literal160_bufferBytes StringHead_t 6
 db  "string" , 0
__literal161_bufferBytes StringHead_t 11
 db  "globalTable" , 0
__literal162_bufferBytes StringHead_t 7
 db  "symbols" , 0
__literal164_bufferBytes StringHead_t 17
 db  "attemp to assign " , 0
__literal165_bufferBytes StringHead_t 4
 db  " to " , 0
__literal166_bufferBytes StringHead_t 12
 db  "usedAsNumber" , 0
__literal167_bufferBytes StringHead_t 27
 db  "' was used as number before" , 0
__literal168_bufferBytes StringHead_t 18
 db  "redeclaration of '" , 0
__literal169_bufferBytes StringHead_t 9
 db  "writeHits" , 0
__literal170_bufferBytes StringHead_t 8
 db  "readHits" , 0
__literal171_bufferBytes StringHead_t 4
 db  "kind" , 0
__literal172_bufferBytes StringHead_t 15
 db  "isAstTypeFrozen" , 0
__literal173_bufferBytes StringHead_t 32
 db  "' was not declared in this scope" , 0
__literal175_bufferBytes StringHead_t 10
 db  "too deep (" , 0
__literal176_bufferBytes StringHead_t 1
 db  ")" , 0
__literal177_bufferBytes StringHead_t 12
 db  "functionName" , 0
__literal179_bufferBytes StringHead_t 21
 db  "unmatched scope leave" , 0
__literal180_bufferBytes StringHead_t 19
 db  "' is not a function" , 0
__literal181_bufferBytes StringHead_t 7
 db  "builtIn" , 0
__literal182_bufferBytes StringHead_t 6
 db  "params" , 0
__literal183_bufferBytes StringHead_t 10
 db  "function '" , 0
__literal184_bufferBytes StringHead_t 19
 db  "' requires exactly " , 0
__literal185_bufferBytes StringHead_t 17
 db  " parameters, but " , 0
__literal186_bufferBytes StringHead_t 12
 db  " were passed" , 0
__literal187_bufferBytes StringHead_t 25
 db  "' does not return a value" , 0
__literal188_bufferBytes StringHead_t 24
 db  "unused return value of '" , 0
__literal189_bufferBytes StringHead_t 10
 db  "' function" , 0
__literal190_bufferBytes StringHead_t 16
 db  "' is not a class" , 0
__literal191_bufferBytes StringHead_t 43
 db  "attemp to declare local within global table" , 0
__literal192_bufferBytes StringHead_t 37
 db  "global directive used in global space" , 0
__literal193_bufferBytes StringHead_t 32
 db  "conflicting declaration 'global " , 0
__literal194_bufferBytes StringHead_t 9
 db  "__literal" , 0
__literal195_bufferBytes StringHead_t 7
 db  "__const" , 0
__literal196_bufferBytes StringHead_t 4
 db  "node" , 0
__literal197_bufferBytes StringHead_t 4
 db  "type" , 0
__literal204_bufferBytes StringHead_t 1
 db  "l" , 0
__literal205_bufferBytes StringHead_t 10
 db  "__jmptable" , 0
__literal206_bufferBytes StringHead_t 6
 db  "labels" , 0
__literal209_bufferBytes StringHead_t 9
 db  "isDeleted" , 0
__literal210_bufferBytes StringHead_t 3
 db  "tmp" , 0
__literal211_bufferBytes StringHead_t 6
 db  "isTemp" , 0
__literal216_bufferBytes StringHead_t 15
 db  "importedModules" , 0
__literal217_bufferBytes StringHead_t 6
 db  "parser" , 0
__literal218_bufferBytes StringHead_t 18
 db  "Resolving module [" , 0
__literal219_bufferBytes StringHead_t 4
 db  "]..." , 0
__literal220_bufferBytes StringHead_t 17
 db  "currentClassProto" , 0
__literal222_bufferBytes StringHead_t 11
 db  "symbolTable" , 0
__literal223_bufferBytes StringHead_t 30
 db  "string type cannot be modified" , 0
__literal224_bufferBytes StringHead_t 6
 db  "vtable" , 0
__literal225_bufferBytes StringHead_t 8
 db  "fullName" , 0
__literal226_bufferBytes StringHead_t 2
 db  "__" , 0
__literal227_bufferBytes StringHead_t 1
 db  "_" , 0
__literal228_bufferBytes StringHead_t 1
 db  "$" , 0
__literal229_bufferBytes StringHead_t 9
 db  "className" , 0
__literal230_bufferBytes StringHead_t 10
 db  "classProto" , 0
__literal231_bufferBytes StringHead_t 10
 db  "baseMethod" , 0
__literal232_bufferBytes StringHead_t 12
 db  "isOverloaded" , 0
__literal233_bufferBytes StringHead_t 4
 db  "this" , 0
__literal234_bufferBytes StringHead_t 11
 db  "constructor" , 0
__literal235_bufferBytes StringHead_t 13
 db  "astTypeParams" , 0
__literal236_bufferBytes StringHead_t 23
 db  "unset return variable '" , 0
__literal237_bufferBytes StringHead_t 6
 db  "' in '" , 0
__literal238_bufferBytes StringHead_t 4
 db  "argv" , 0
__literal239_bufferBytes StringHead_t 4
 db  "argc" , 0
__literal240_bufferBytes StringHead_t 19
 db  "__isUsedAsTypeofArg" , 0
__literal241_bufferBytes StringHead_t 51
 db  "Class mismatch while assigning new object at node #" , 0
__literal242_bufferBytes StringHead_t 18
 db  "attempted to use '" , 0
__literal243_bufferBytes StringHead_t 5
 db  "' as " , 0
__literal244_bufferBytes StringHead_t 17
 db  "; it was used as " , 0
__literal245_bufferBytes StringHead_t 7
 db  " before" , 0
__literal246_bufferBytes StringHead_t 28
 db  "' cannot be used as iterator" , 0
__literal247_bufferBytes StringHead_t 39
 db  "' is already defined in another context" , 0
__literal248_bufferBytes StringHead_t 14
 db  "usedAsIterator" , 0
__literal249_bufferBytes StringHead_t 5
 db  "super" , 0
__literal250_bufferBytes StringHead_t 9
 db  "funcProto" , 0
__literal251_bufferBytes StringHead_t 22
 db  "symbolInfoForSyscallId" , 0
__literal252_bufferBytes StringHead_t 33
 db  "Recursive call detected at node #" , 0
__literal253_bufferBytes StringHead_t 2
 db  " (" , 0
__literal254_bufferBytes StringHead_t 11
 db  "isRecursive" , 0
__literal255_bufferBytes StringHead_t 17
 db  "isUsedAsLeftValue" , 0
__literal256_bufferBytes StringHead_t 55
 db  "error: only block or program nodes can own symbol table" , 0
__literal258_bufferBytes StringHead_t 8
 db  "__parent" , 0
__literal259_bufferBytes StringHead_t 9
 db  " method ", 34, "" , 0
__literal260_bufferBytes StringHead_t 1
 db  "." , 0
__literal261_bufferBytes StringHead_t 21
 db  "", 34, " has no return value" , 0
__literal262_bufferBytes StringHead_t 8
 db  "method ", 34, "" , 0
__literal263_bufferBytes StringHead_t 21
 db  "array or map expected" , 0
__literal301_bufferBytes StringHead_t 9
 db  "undefined" , 0
__literal302_bufferBytes StringHead_t 7
 db  "integer" , 0
__literal303_bufferBytes StringHead_t 5
 db  "float" , 0
__literal304_bufferBytes StringHead_t 7
 db  "boolean" , 0
__literal305_bufferBytes StringHead_t 5
 db  "array" , 0
__literal306_bufferBytes StringHead_t 3
 db  "map" , 0
__literal309_bufferBytes StringHead_t 7
 db  "defined" , 0
__literal310_bufferBytes StringHead_t 5
 db  "empty" , 0
__literal311_bufferBytes StringHead_t 9
 db  "built-in " , 0
__literal312_bufferBytes StringHead_t 27
 db  " function requires exactly " , 0
__literal313_bufferBytes StringHead_t 19
 db  " parameter(s), but " , 0
__literal314_bufferBytes StringHead_t 5
 db  "@last" , 0
__literal315_bufferBytes StringHead_t 6
 db  "@first" , 0
__literal316_bufferBytes StringHead_t 22
 db  "unsupported selector '" , 0
__literal317_bufferBytes StringHead_t 13
 db  "isPureVirtual" , 0
__literal318_bufferBytes StringHead_t 17
 db  "not implemented: " , 0
__literal319_bufferBytes StringHead_t 7
 db  "globals" , 0
__literal321_bufferBytes StringHead_t 10
 db  "Set node #" , 0
__literal322_bufferBytes StringHead_t 9
 db  " to imm ", 34, "" , 0
__literal323_bufferBytes StringHead_t 3
 db  "", 34, " (" , 0
__literal324_bufferBytes StringHead_t 45
 db  "error: unhandled result in constant folding: " , 0
__literal325_bufferBytes StringHead_t 15
 db  "movedToInitList" , 0
__literal326_bufferBytes StringHead_t 8
 db  "initList" , 0
__literal327_bufferBytes StringHead_t 35
 db  "error: non-imm map key in init list" , 0
__literal328_bufferBytes StringHead_t 1
 db  " " , 0
__literal329_bufferBytes StringHead_t 24
 db  "Set syscall id at node #" , 0
__literal330_bufferBytes StringHead_t 11
 db  "", 34, " (integer)" , 0
__literal331_bufferBytes StringHead_t 6
 db  "nextId" , 0
__literal332_bufferBytes StringHead_t 5
 db  "__cse" , 0
__literal334_bufferBytes StringHead_t 29
 db  "Useless self-assign at node #" , 0
__literal335_bufferBytes StringHead_t 26
 db  "Expression found at node #" , 0
__literal336_bufferBytes StringHead_t 3
 db  ", (" , 0
__literal337_bufferBytes StringHead_t 32
 db  "Common subexpression at nodes (#" , 0
__literal338_bufferBytes StringHead_t 3
 db  ", #" , 0
__literal339_bufferBytes StringHead_t 3
 db  ") (" , 0
__literal340_bufferBytes StringHead_t 32
 db  "error: cse found, but not emited" , 0
__literal342_bufferBytes StringHead_t 13
 db  "Remove node #" , 0
__literal343_bufferBytes StringHead_t 16
 db  "Replacing node #" , 0
__literal344_bufferBytes StringHead_t 5
 db  " by #" , 0
__literal345_bufferBytes StringHead_t 71
 db  "error: unset symbol table at ASTOptimizerDeadCodeRemove::_processNode()" , 0
__literal346_bufferBytes StringHead_t 63
 db  "error: unset node at ASTOptimizerDeadCodeRemove::_processNode()" , 0
__literal347_bufferBytes StringHead_t 24
 db  "Empty for loop at node #" , 0
__literal348_bufferBytes StringHead_t 26
 db  "Empty while loop at node #" , 0
__literal349_bufferBytes StringHead_t 24
 db  "While false {} at node #" , 0
__literal350_bufferBytes StringHead_t 24
 db  "Remove empty else node #" , 0
__literal351_bufferBytes StringHead_t 27
 db  "Remove empty if body node #" , 0
__literal352_bufferBytes StringHead_t 29
 db  "Invert condition at if node #" , 0
__literal353_bufferBytes StringHead_t 18
 db  "Empty if at node #" , 0
__literal354_bufferBytes StringHead_t 23
 db  "if true {...} at node #" , 0
__literal355_bufferBytes StringHead_t 35
 db  "if false {...} else {...} at node #" , 0
__literal356_bufferBytes StringHead_t 24
 db  "if false {...} at node #" , 0
__literal357_bufferBytes StringHead_t 14
 db  "hasSideEffects" , 0
__literal358_bufferBytes StringHead_t 24
 db  "Useless assign at node #" , 0
__literal359_bufferBytes StringHead_t 34
 db  "Reduced nested type cast at node #" , 0
__literal360_bufferBytes StringHead_t 31
 db  "Useless function call at node #" , 0
__literal361_bufferBytes StringHead_t 36
 db  "Skip unused function param at node #" , 0
__literal363_bufferBytes StringHead_t 15
 db  "Skipped vcall [" , 0
__literal364_bufferBytes StringHead_t 11
 db  "] at node #" , 0
__literal365_bufferBytes StringHead_t 16
 db  "isOptimizedVcall" , 0
__literal366_bufferBytes StringHead_t 15
 db  "Changed vcall [" , 0
__literal367_bufferBytes StringHead_t 28
 db  "] to ordinary call at node #" , 0
__literal369_bufferBytes StringHead_t 13
 db  "arrayOfValues" , 0
__literal370_bufferBytes StringHead_t 8
 db  "valueMin" , 0
__literal371_bufferBytes StringHead_t 8
 db  "valueMax" , 0
__literal372_bufferBytes StringHead_t 16
 db  "symbolsCollector" , 0
__literal375_bufferBytes StringHead_t 45
 db  "Type mismatch at arithmetic expression node #" , 0
__literal376_bufferBytes StringHead_t 4
 db  " vs " , 0
__literal377_bufferBytes StringHead_t 61
 db  "runtime error: implicit type conversion not supported anymore" , 0
__literal378_bufferBytes StringHead_t 4
 db  "code" , 0
__literal379_bufferBytes StringHead_t 7
 db  "codeCnt" , 0
__literal380_bufferBytes StringHead_t 9
 db  "labelsCnt" , 0
__literal381_bufferBytes StringHead_t 9
 db  "targetIps" , 0
__literal382_bufferBytes StringHead_t 12
 db  "targetIpsCnt" , 0
__literal383_bufferBytes StringHead_t 10
 db  "procedures" , 0
__literal384_bufferBytes StringHead_t 13
 db  "proceduresCnt" , 0
__literal385_bufferBytes StringHead_t 6
 db  "tmpMax" , 0
__literal386_bufferBytes StringHead_t 8
 db  "localMax" , 0
__literal387_bufferBytes StringHead_t 9
 db  "globalMax" , 0
__literal388_bufferBytes StringHead_t 8
 db  "classMap" , 0
__literal389_bufferBytes StringHead_t 9
 db  "classList" , 0
__literal390_bufferBytes StringHead_t 12
 db  "classListCnt" , 0
__literal391_bufferBytes StringHead_t 10
 db  "methodsMap" , 0
__literal392_bufferBytes StringHead_t 11
 db  "methodsList" , 0
__literal393_bufferBytes StringHead_t 14
 db  "methodsListCnt" , 0
__literal394_bufferBytes StringHead_t 8
 db  "comments" , 0
__literal395_bufferBytes StringHead_t 11
 db  "commentsCnt" , 0
__literal396_bufferBytes StringHead_t 14
 db  "unresolvedJmps" , 0
__literal397_bufferBytes StringHead_t 17
 db  "unresolvedJmpsCnt" , 0
__literal398_bufferBytes StringHead_t 9
 db  "startAddr" , 0
__literal399_bufferBytes StringHead_t 9
 db  "paramsCnt" , 0
__literal400_bufferBytes StringHead_t 7
 db  "endAddr" , 0
__literal401_bufferBytes StringHead_t 9
 db  "localsCnt" , 0
__literal402_bufferBytes StringHead_t 8
 db  "tempsCnt" , 0
__literal403_bufferBytes StringHead_t 29
 db  "error: jmp to undefined label" , 0
__literal404_bufferBytes StringHead_t 25
 db  "error: invalid label id '" , 0
__literal405_bufferBytes StringHead_t 17
 db  "error: label id '" , 0
__literal406_bufferBytes StringHead_t 19
 db  "' is already emited" , 0
__literal407_bufferBytes StringHead_t 27
 db  "astOptimizerConstantFolding" , 0
__literal408_bufferBytes StringHead_t 19
 db  "astSymbolsCollector" , 0
__literal409_bufferBytes StringHead_t 12
 db  "astEvaluator" , 0
__literal410_bufferBytes StringHead_t 15
 db  "astPreprocessor" , 0
__literal411_bufferBytes StringHead_t 15
 db  "astOptimizerCSE" , 0
__literal412_bufferBytes StringHead_t 26
 db  "astOptimizerDeadCodeRemove" , 0
__literal413_bufferBytes StringHead_t 17
 db  "astOptimizerVCall" , 0
__literal414_bufferBytes StringHead_t 14
 db  "astOptimizerIf" , 0
__literal415_bufferBytes StringHead_t 18
 db  "astOptimizerInline" , 0
__literal416_bufferBytes StringHead_t 11
 db  "astTypeCast" , 0
__literal417_bufferBytes StringHead_t 17
 db  "astModuleResolver" , 0
__literal418_bufferBytes StringHead_t 13
 db  "Ready to work" , 0
__literal419_bufferBytes StringHead_t 6
 db  "logCtx" , 0
__literal421_bufferBytes StringHead_t 1
 db  "(" , 0
__literal422_bufferBytes StringHead_t 2
 db  "  " , 0
__literal423_bufferBytes StringHead_t 2
 db  ", " , 0
__literal424_bufferBytes StringHead_t 1
 db  "[" , 0
__literal428_bufferBytes StringHead_t 6
 db  "class " , 0
__literal430_bufferBytes StringHead_t 7
 db  "method " , 0
__literal431_bufferBytes StringHead_t 9
 db  "function " , 0
__literal435_bufferBytes StringHead_t 4
 db  "new " , 0
__literal436_bufferBytes StringHead_t 3
 db  "if " , 0
__literal439_bufferBytes StringHead_t 7
 db  "switch " , 0
__literal440_bufferBytes StringHead_t 7
 db  "  when " , 0
__literal442_bufferBytes StringHead_t 4
 db  "    " , 0
__literal444_bufferBytes StringHead_t 5
 db  "conv_" , 0
__literal445_bufferBytes StringHead_t 4
 db  "_to_" , 0
__literal446_bufferBytes StringHead_t 6
 db  "while " , 0
__literal447_bufferBytes StringHead_t 8
 db  "endwhile" , 0
__literal448_bufferBytes StringHead_t 4
 db  "for " , 0
__literal449_bufferBytes StringHead_t 4
 db  " in " , 0
__literal450_bufferBytes StringHead_t 4
 db  " .. " , 0
__literal451_bufferBytes StringHead_t 4
 db  " by " , 0
__literal452_bufferBytes StringHead_t 6
 db  "endfor" , 0
__literal453_bufferBytes StringHead_t 11
 db  "for values " , 0
__literal454_bufferBytes StringHead_t 1
 db  "{" , 0
__literal455_bufferBytes StringHead_t 1
 db  "}" , 0
__literal456_bufferBytes StringHead_t 3
 db  " = " , 0
__literal457_bufferBytes StringHead_t 2
 db  "- " , 0
__literal458_bufferBytes StringHead_t 2
 db  "is" , 0
__literal459_bufferBytes StringHead_t 4
 db  "isnt" , 0
__literal460_bufferBytes StringHead_t 1
 db  ">" , 0
__literal461_bufferBytes StringHead_t 2
 db  ">=" , 0
__literal462_bufferBytes StringHead_t 1
 db  "<" , 0
__literal463_bufferBytes StringHead_t 2
 db  "<=" , 0
__literal466_bufferBytes StringHead_t 1
 db  "", 34, "" , 0
__literal467_bufferBytes StringHead_t 4
 db  "<tr>" , 0
__literal468_bufferBytes StringHead_t 4
 db  "<td>" , 0
__literal469_bufferBytes StringHead_t 5
 db  "</td>" , 0
__literal471_bufferBytes StringHead_t 5
 db  "</tr>" , 0
__literal472_bufferBytes StringHead_t 8
 db  "</table>" , 0
__literal480_bufferBytes StringHead_t 8
 db  "<tr><td>" , 0
__literal481_bufferBytes StringHead_t 10
 db  "</td></tr>" , 0
__literal482_bufferBytes StringHead_t 6
 db  "' <i>(" , 0
__literal483_bufferBytes StringHead_t 5
 db  ")</i>" , 0
__literal491_bufferBytes StringHead_t 20
 db  "currentFunctionProto" , 0
__literal492_bufferBytes StringHead_t 19
 db  "symbolTableForTemps" , 0
__literal544_bufferBytes StringHead_t 18
 db  "Emitting function " , 0
__literal545_bufferBytes StringHead_t 3
 db  "..." , 0
__literal546_bufferBytes StringHead_t 17
 db  "Function emited: " , 0
__literal549_bufferBytes StringHead_t 29
 db  "super called outside of class" , 0
__literal550_bufferBytes StringHead_t 35
 db  "super called outside of constructor" , 0
__literal551_bufferBytes StringHead_t 18
 db  " has no base class" , 0
__literal552_bufferBytes StringHead_t 28
 db  " has no constructor declared" , 0
__literal553_bufferBytes StringHead_t 34
 db  "base constructor requires exactly " , 0
__literal555_bufferBytes StringHead_t 13
 db  "isConstructor" , 0
__literal557_bufferBytes StringHead_t 12
 db  "isTranslated" , 0
__literal558_bufferBytes StringHead_t 6
 db  "node #" , 0
__literal559_bufferBytes StringHead_t 29
 db  " is already translated (eval)" , 0
__literal560_bufferBytes StringHead_t 23
 db  "unexpected rvalue node " , 0
__literal562_bufferBytes StringHead_t 22
 db  " is already translated" , 0
__literal563_bufferBytes StringHead_t 5
 db  "start" , 0
__literal564_bufferBytes StringHead_t 21
 db  "duplicateOnFirstWrite" , 0
__literal565_bufferBytes StringHead_t 23
 db  "unexpected lvalue node " , 0
__literal566_bufferBytes StringHead_t 37
 db  "global directive expects string, but " , 0
__literal567_bufferBytes StringHead_t 7
 db  " passed" , 0
__literal568_bufferBytes StringHead_t 15
 db  "unknown opcode " , 0
__literal569_bufferBytes StringHead_t 24
 db  "unexpected symbol kind '" , 0
__literal570_bufferBytes StringHead_t 3
 db  "' (" , 0
__literal571_bufferBytes StringHead_t 7
 db  "labelId" , 0
__literal573_bufferBytes StringHead_t 3
 db  "ptr" , 0
__literal574_bufferBytes StringHead_t 47
 db  "-----------------------------------------------" , 0
__literal576_bufferBytes StringHead_t 4
 db  "data" , 0
__literal577_bufferBytes StringHead_t 4
 db  "size" , 0
__literal578_bufferBytes StringHead_t 21
 db  "error: stack is empty" , 0
__literal579_bufferBytes StringHead_t 28
 db  "error: peek from empty stack" , 0
__literal580_bufferBytes StringHead_t 12
 db  "error: peek " , 0
__literal581_bufferBytes StringHead_t 16
 db  " item, but only " , 0
__literal582_bufferBytes StringHead_t 10
 db  " available" , 0
__literal583_bufferBytes StringHead_t 5
 db  "stack" , 0
__literal584_bufferBytes StringHead_t 12
 db  "outputObject" , 0
__literal585_bufferBytes StringHead_t 20
 db  "arrayOfCalledMethods" , 0
__literal586_bufferBytes StringHead_t 18
 db  "mapOfCalledMethods" , 0
__literal587_bufferBytes StringHead_t 13
 db  "methodEmitted" , 0
__literal588_bufferBytes StringHead_t 7
 db  "comment" , 0
__literal589_bufferBytes StringHead_t 3
 db  "jmp" , 0
__literal591_bufferBytes StringHead_t 4
 db  "move" , 0
__literal592_bufferBytes StringHead_t 4
 db  "proc" , 0
__literal593_bufferBytes StringHead_t 10
 db  "init_frame" , 0
__literal594_bufferBytes StringHead_t 4
 db  "endp" , 0
__literal595_bufferBytes StringHead_t 3
 db  "ret" , 0
__literal596_bufferBytes StringHead_t 3
 db  "neg" , 0
__literal597_bufferBytes StringHead_t 3
 db  "add" , 0
__literal598_bufferBytes StringHead_t 11
 db  "string_join" , 0
__literal599_bufferBytes StringHead_t 3
 db  "sub" , 0
__literal600_bufferBytes StringHead_t 3
 db  "mul" , 0
__literal601_bufferBytes StringHead_t 3
 db  "div" , 0
__literal602_bufferBytes StringHead_t 4
 db  "idiv" , 0
__literal603_bufferBytes StringHead_t 12
 db  "create_array" , 0
__literal604_bufferBytes StringHead_t 10
 db  "create_map" , 0
__literal605_bufferBytes StringHead_t 9
 db  "load_null" , 0
__literal606_bufferBytes StringHead_t 10
 db  "load_int32" , 0
__literal607_bufferBytes StringHead_t 21
 db  "conv_int64_to_variant" , 0
__literal608_bufferBytes StringHead_t 12
 db  "load_float64" , 0
__literal609_bufferBytes StringHead_t 11
 db  "load_bool32" , 0
__literal610_bufferBytes StringHead_t 20
 db  "unhandled imm type: " , 0
__literal611_bufferBytes StringHead_t 21
 db  "conv_int32_to_variant" , 0
__literal612_bufferBytes StringHead_t 23
 db  "conv_float64_to_variant" , 0
__literal613_bufferBytes StringHead_t 22
 db  "conv_bool32_to_variant" , 0
__literal614_bufferBytes StringHead_t 6
 db  "cmp_eq" , 0
__literal615_bufferBytes StringHead_t 6
 db  "cmp_ne" , 0
__literal616_bufferBytes StringHead_t 6
 db  "cmp_lt" , 0
__literal617_bufferBytes StringHead_t 6
 db  "cmp_le" , 0
__literal618_bufferBytes StringHead_t 6
 db  "cmp_gt" , 0
__literal619_bufferBytes StringHead_t 6
 db  "cmp_ge" , 0
__literal620_bufferBytes StringHead_t 13
 db  "cmp_is_typeof" , 0
__literal621_bufferBytes StringHead_t 17
 db  "cmp_is_not_typeof" , 0
__literal622_bufferBytes StringHead_t 7
 db  "syscall" , 0
__literal623_bufferBytes StringHead_t 10
 db  "load_index" , 0
__literal624_bufferBytes StringHead_t 8
 db  "load_key" , 0
__literal625_bufferBytes StringHead_t 11
 db  "store_index" , 0
__literal626_bufferBytes StringHead_t 9
 db  "store_key" , 0
__literal627_bufferBytes StringHead_t 53
 db  "error: missing classProto in MIR_OPCODE_CREATE_OBJECT" , 0
__literal628_bufferBytes StringHead_t 13
 db  "create_object" , 0
__literal629_bufferBytes StringHead_t 12
 db  "jmp_if_false" , 0
__literal630_bufferBytes StringHead_t 11
 db  "jmp_if_true" , 0
__literal631_bufferBytes StringHead_t 29
 db  "-----------------------------" , 0
__literal632_bufferBytes StringHead_t 11
 db  "BEGIN: for " , 0
__literal633_bufferBytes StringHead_t 9
 db  "jmp_if_ge" , 0
__literal634_bufferBytes StringHead_t 9
 db  "END: for " , 0
__literal635_bufferBytes StringHead_t 6
 db  " step " , 0
__literal636_bufferBytes StringHead_t 16
 db  "BEGIN: for keys " , 0
__literal637_bufferBytes StringHead_t 8
 db  " values " , 0
__literal638_bufferBytes StringHead_t 9
 db  "inner_ret" , 0
__literal639_bufferBytes StringHead_t 10
 db  "__TrashBin" , 0
__literal640_bufferBytes StringHead_t 35
 db  "__MOLD_ForDriver_KeysAndValuesInMap" , 0
__literal641_bufferBytes StringHead_t 24
 db  "__MOLD_ForDriver_Generic" , 0
__literal642_bufferBytes StringHead_t 14
 db  "END: for keys " , 0
__literal643_bufferBytes StringHead_t 12
 db  "BEGIN: while" , 0
__literal644_bufferBytes StringHead_t 10
 db  "END: while" , 0
__literal645_bufferBytes StringHead_t 12
 db  "defaultLabel" , 0
__literal646_bufferBytes StringHead_t 14
 db  "BEGIN: switch " , 0
__literal647_bufferBytes StringHead_t 12
 db  "END: switch " , 0
__literal648_bufferBytes StringHead_t 6
 db  "@glued" , 0
__literal649_bufferBytes StringHead_t 26
 db  "print_array_of_variants_ln" , 0
__literal650_bufferBytes StringHead_t 9
 db  "shortName" , 0
__literal651_bufferBytes StringHead_t 38
 db  "__MOLD_PrintErrorAndDie.notImplemented" , 0
__literal652_bufferBytes StringHead_t 11
 db  "entry point" , 0
__literal653_bufferBytes StringHead_t 29
 db  "error: object has no method '" , 0
__literal654_bufferBytes StringHead_t 6
 db  "buffer" , 0
__literal655_bufferBytes StringHead_t 16
 db  "bufferingEnabled" , 0
__literal656_bufferBytes StringHead_t 50
 db  "error: _replaceLastItem() called without buffering" , 0
__literal657_bufferBytes StringHead_t 5
 db  "quads" , 0
__literal658_bufferBytes StringHead_t 12
 db  "currentFrame" , 0
__literal660_bufferBytes StringHead_t 3
 db  "var" , 0
__literal661_bufferBytes StringHead_t 1
 db  "W" , 0
__literal662_bufferBytes StringHead_t 1
 db  "R" , 0
__literal663_bufferBytes StringHead_t 9
 db  "data type" , 0
__literal664_bufferBytes StringHead_t 10
 db  "----------" , 0
__literal665_bufferBytes StringHead_t 4
 db  "----" , 0
__literal666_bufferBytes StringHead_t 9
 db  "---------" , 0
__literal667_bufferBytes StringHead_t 8
 db  "--------" , 0
__literal669_bufferBytes StringHead_t 1
 db  ";" , 0
REG_PARAMS32_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
REG_PARAMS32_0 Variant_t VARIANT_STRING, 0, REG_PARAMS32_0_buffer
REG_PARAMS32_1 Variant_t VARIANT_STRING, 0, REG_PARAMS32_1_buffer
REG_PARAMS32_2 Variant_t VARIANT_STRING, 0, REG_PARAMS32_2_buffer
REG_PARAMS32_3 Variant_t VARIANT_STRING, 0, REG_PARAMS32_3_buffer
REG_PARAMS64_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
; Reuse already emitted buffer
REG_PARAMS64_0 Variant_t VARIANT_STRING, 0, __literal693_buffer
; Reuse already emitted buffer
REG_PARAMS64_1 Variant_t VARIANT_STRING, 0, __literal694_buffer
; Reuse already emitted buffer
REG_PARAMS64_2 Variant_t VARIANT_STRING, 0, __literal695_buffer
; Reuse already emitted buffer
REG_PARAMS64_3 Variant_t VARIANT_STRING, 0, __literal980_buffer
__literal671_bufferBytes StringHead_t 15
 db  "VARIANT_INTEGER" , 0
__literal680_bufferBytes StringHead_t 17
 db  "isProfilerEnabled" , 0
__literal681_bufferBytes StringHead_t 19
 db  "mapOfEmittedBuffers" , 0
__literal682_bufferBytes StringHead_t 15
 db  "isBufferEmitted" , 0
__literal693_bufferBytes StringHead_t 3
 db  "rcx" , 0
__literal694_bufferBytes StringHead_t 3
 db  "rdx" , 0
__literal695_bufferBytes StringHead_t 2
 db  "r8" , 0
__literal702_bufferBytes StringHead_t 32
 db  "error: unhandled variable type: " , 0
__literal713_bufferBytes StringHead_t 7
 db  "_buffer" , 0
__literal718_bufferBytes StringHead_t 1
 db  "1" , 0
__literal719_bufferBytes StringHead_t 1
 db  "0" , 0
__literal722_bufferBytes StringHead_t 23
 db  "error: unhandled type: " , 0
__literal723_bufferBytes StringHead_t 12
 db  "_bufferBytes" , 0
__literal726_bufferBytes StringHead_t 8
 db  "", 34, ", 34, ", 34, "" , 0
__literal730_bufferBytes StringHead_t 2
 db  "db" , 0
__literal731_bufferBytes StringHead_t 2
 db  "dq" , 0
__literal732_bufferBytes StringHead_t 2
 db  "dd" , 0
__literal733_bufferBytes StringHead_t 2
 db  "dw" , 0
__literal750_bufferBytes StringHead_t 18
 db  "  mov rax, qword [" , 0
__literal754_bufferBytes StringHead_t 18
 db  "  mov eax, dword [" , 0
__literal778_bufferBytes StringHead_t 5
 db  "__EOL" , 0
__literal779_bufferBytes StringHead_t 1
 db  "c" , 0
__literal780_bufferBytes StringHead_t 4
 db  "_by_" , 0
__literal782_bufferBytes StringHead_t 12
 db  "move_variant" , 0
__literal783_bufferBytes StringHead_t 11
 db  "move_string" , 0
__literal784_bufferBytes StringHead_t 22
 db  "conv_string_to_variant" , 0
__literal785_bufferBytes StringHead_t 10
 db  "move_int32" , 0
__literal786_bufferBytes StringHead_t 11
 db  "move_bool32" , 0
__literal787_bufferBytes StringHead_t 10
 db  "move_int64" , 0
__literal788_bufferBytes StringHead_t 12
 db  "move_float64" , 0
__literal789_bufferBytes StringHead_t 12
 db  "typeof_int64" , 0
__literal790_bufferBytes StringHead_t 12
 db  "typeof_int32" , 0
__literal791_bufferBytes StringHead_t 13
 db  "StringInteger" , 0
__literal792_bufferBytes StringHead_t 14
 db  "typeof_float64" , 0
__literal793_bufferBytes StringHead_t 11
 db  "StringFloat" , 0
__literal794_bufferBytes StringHead_t 13
 db  "typeof_bool32" , 0
__literal795_bufferBytes StringHead_t 13
 db  "StringBoolean" , 0
__literal796_bufferBytes StringHead_t 9
 db  "neg_int64" , 0
__literal798_bufferBytes StringHead_t 9
 db  "add_int64" , 0
__literal799_bufferBytes StringHead_t 9
 db  "sub_int64" , 0
__literal800_bufferBytes StringHead_t 9
 db  "mul_int64" , 0
__literal801_bufferBytes StringHead_t 4
 db  "imul" , 0
__literal802_bufferBytes StringHead_t 9
 db  "div_int64" , 0
__literal807_bufferBytes StringHead_t 10
 db  "idiv_int64" , 0
__literal813_bufferBytes StringHead_t 12
 db  "cmp_eq_int64" , 0
__literal814_bufferBytes StringHead_t 1
 db  "z" , 0
__literal815_bufferBytes StringHead_t 12
 db  "cmp_ne_int64" , 0
__literal816_bufferBytes StringHead_t 2
 db  "nz" , 0
__literal817_bufferBytes StringHead_t 12
 db  "cmp_lt_int64" , 0
__literal818_bufferBytes StringHead_t 12
 db  "cmp_le_int64" , 0
__literal819_bufferBytes StringHead_t 12
 db  "cmp_gt_int64" , 0
__literal820_bufferBytes StringHead_t 1
 db  "g" , 0
__literal821_bufferBytes StringHead_t 12
 db  "cmp_ge_int64" , 0
__literal822_bufferBytes StringHead_t 9
 db  "neg_int32" , 0
__literal824_bufferBytes StringHead_t 9
 db  "add_int32" , 0
__literal825_bufferBytes StringHead_t 9
 db  "sub_int32" , 0
__literal826_bufferBytes StringHead_t 9
 db  "mul_int32" , 0
__literal827_bufferBytes StringHead_t 9
 db  "div_int32" , 0
__literal830_bufferBytes StringHead_t 10
 db  "idiv_int32" , 0
__literal835_bufferBytes StringHead_t 12
 db  "cmp_eq_int32" , 0
__literal836_bufferBytes StringHead_t 12
 db  "cmp_ne_int32" , 0
__literal837_bufferBytes StringHead_t 12
 db  "cmp_lt_int32" , 0
__literal838_bufferBytes StringHead_t 12
 db  "cmp_le_int32" , 0
__literal839_bufferBytes StringHead_t 12
 db  "cmp_gt_int32" , 0
__literal840_bufferBytes StringHead_t 12
 db  "cmp_ge_int32" , 0
__literal841_bufferBytes StringHead_t 19
 db  "cmp_is_typeof_int32" , 0
__literal842_bufferBytes StringHead_t 23
 db  "cmp_is_not_typeof_int32" , 0
__literal843_bufferBytes StringHead_t 11
 db  "neg_float64" , 0
__literal845_bufferBytes StringHead_t 11
 db  "add_float64" , 0
__literal846_bufferBytes StringHead_t 5
 db  "addsd" , 0
__literal847_bufferBytes StringHead_t 11
 db  "sub_float64" , 0
__literal848_bufferBytes StringHead_t 5
 db  "subsd" , 0
__literal849_bufferBytes StringHead_t 11
 db  "mul_float64" , 0
__literal850_bufferBytes StringHead_t 5
 db  "mulsd" , 0
__literal851_bufferBytes StringHead_t 11
 db  "div_float64" , 0
__literal852_bufferBytes StringHead_t 5
 db  "divsd" , 0
__literal853_bufferBytes StringHead_t 12
 db  "idiv_float64" , 0
__literal858_bufferBytes StringHead_t 14
 db  "cmp_eq_float64" , 0
__literal859_bufferBytes StringHead_t 14
 db  "cmp_ne_float64" , 0
__literal860_bufferBytes StringHead_t 14
 db  "cmp_lt_float64" , 0
__literal861_bufferBytes StringHead_t 14
 db  "cmp_le_float64" , 0
__literal862_bufferBytes StringHead_t 2
 db  "be" , 0
__literal863_bufferBytes StringHead_t 14
 db  "cmp_gt_float64" , 0
__literal864_bufferBytes StringHead_t 14
 db  "cmp_ge_float64" , 0
__literal865_bufferBytes StringHead_t 2
 db  "ae" , 0
__literal866_bufferBytes StringHead_t 21
 db  "cmp_is_typeof_float64" , 0
__literal867_bufferBytes StringHead_t 25
 db  "cmp_is_not_typeof_float64" , 0
__literal868_bufferBytes StringHead_t 21
 db  "jmp_if_typeof_float64" , 0
__literal869_bufferBytes StringHead_t 5
 db  "  jmp" , 0
__literal870_bufferBytes StringHead_t 25
 db  "jmp_if_not_typeof_float64" , 0
__literal871_bufferBytes StringHead_t 11
 db  "neg_variant" , 0
__literal872_bufferBytes StringHead_t 17
 db  "__MOLD_VariantNeg" , 0
__literal873_bufferBytes StringHead_t 11
 db  "add_variant" , 0
__literal874_bufferBytes StringHead_t 10
 db  "add_string" , 0
__literal875_bufferBytes StringHead_t 17
 db  "__MOLD_VariantAdd" , 0
__literal876_bufferBytes StringHead_t 11
 db  "sub_variant" , 0
__literal877_bufferBytes StringHead_t 17
 db  "__MOLD_VariantSub" , 0
__literal878_bufferBytes StringHead_t 11
 db  "mul_variant" , 0
__literal879_bufferBytes StringHead_t 17
 db  "__MOLD_VariantMul" , 0
__literal880_bufferBytes StringHead_t 11
 db  "div_variant" , 0
__literal881_bufferBytes StringHead_t 17
 db  "__MOLD_VariantDiv" , 0
__literal882_bufferBytes StringHead_t 12
 db  "idiv_variant" , 0
__literal883_bufferBytes StringHead_t 26
 db  "__MOLD_VariantDivAsInteger" , 0
__literal884_bufferBytes StringHead_t 14
 db  "cmp_eq_variant" , 0
__literal885_bufferBytes StringHead_t 13
 db  "cmp_eq_string" , 0
__literal886_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareEQ" , 0
__literal887_bufferBytes StringHead_t 3
 db  "eax" , 0
__literal888_bufferBytes StringHead_t 14
 db  "cmp_ne_variant" , 0
__literal889_bufferBytes StringHead_t 13
 db  "cmp_ne_string" , 0
__literal890_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareNE" , 0
__literal891_bufferBytes StringHead_t 14
 db  "cmp_lt_variant" , 0
__literal892_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareLT" , 0
__literal893_bufferBytes StringHead_t 14
 db  "cmp_le_variant" , 0
__literal894_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareLE" , 0
__literal895_bufferBytes StringHead_t 14
 db  "cmp_gt_variant" , 0
__literal896_bufferBytes StringHead_t 14
 db  "cmp_ge_variant" , 0
__literal897_bufferBytes StringHead_t 21
 db  "cmp_is_typeof_variant" , 0
__literal901_bufferBytes StringHead_t 25
 db  "cmp_is_not_typeof_variant" , 0
__literal903_bufferBytes StringHead_t 24
 db  "__MOLD_VariantStringJoin" , 0
__literal904_bufferBytes StringHead_t 20
 db  "jmp_if_typeof_string" , 0
__literal905_bufferBytes StringHead_t 24
 db  "jmp_if_not_typeof_string" , 0
__literal906_bufferBytes StringHead_t 18
 db  "jmp_by_table_int32" , 0
__literal914_bufferBytes StringHead_t 17
 db  "jmp_if_eq_variant" , 0
__literal915_bufferBytes StringHead_t 16
 db  "jmp_if_eq_string" , 0
__literal916_bufferBytes StringHead_t 2
 db  "EQ" , 0
__literal917_bufferBytes StringHead_t 17
 db  "jmp_if_ne_variant" , 0
__literal918_bufferBytes StringHead_t 16
 db  "jmp_if_ne_string" , 0
__literal919_bufferBytes StringHead_t 2
 db  "NE" , 0
__literal920_bufferBytes StringHead_t 17
 db  "jmp_if_lt_variant" , 0
__literal921_bufferBytes StringHead_t 2
 db  "LT" , 0
__literal922_bufferBytes StringHead_t 17
 db  "jmp_if_le_variant" , 0
__literal923_bufferBytes StringHead_t 2
 db  "LE" , 0
__literal924_bufferBytes StringHead_t 17
 db  "jmp_if_gt_variant" , 0
__literal925_bufferBytes StringHead_t 17
 db  "jmp_if_ge_variant" , 0
__literal926_bufferBytes StringHead_t 21
 db  "jmp_if_typeof_variant" , 0
__literal928_bufferBytes StringHead_t 25
 db  "jmp_if_not_typeof_variant" , 0
__literal930_bufferBytes StringHead_t 10
 db  "load_int64" , 0
__literal934_bufferBytes StringHead_t 15
 db  "jmp_if_eq_int64" , 0
__literal935_bufferBytes StringHead_t 15
 db  "jmp_if_ne_int64" , 0
__literal936_bufferBytes StringHead_t 15
 db  "jmp_if_lt_int64" , 0
__literal937_bufferBytes StringHead_t 15
 db  "jmp_if_le_int64" , 0
__literal938_bufferBytes StringHead_t 15
 db  "jmp_if_gt_int64" , 0
__literal939_bufferBytes StringHead_t 15
 db  "jmp_if_ge_int64" , 0
__literal940_bufferBytes StringHead_t 15
 db  "jmp_if_eq_int32" , 0
__literal941_bufferBytes StringHead_t 15
 db  "jmp_if_ne_int32" , 0
__literal942_bufferBytes StringHead_t 15
 db  "jmp_if_lt_int32" , 0
__literal943_bufferBytes StringHead_t 15
 db  "jmp_if_le_int32" , 0
__literal944_bufferBytes StringHead_t 15
 db  "jmp_if_gt_int32" , 0
__literal945_bufferBytes StringHead_t 15
 db  "jmp_if_ge_int32" , 0
__literal946_bufferBytes StringHead_t 19
 db  "jmp_if_typeof_int32" , 0
__literal947_bufferBytes StringHead_t 23
 db  "jmp_if_not_typeof_int32" , 0
__literal948_bufferBytes StringHead_t 18
 db  "jmp_if_true_bool32" , 0
__literal949_bufferBytes StringHead_t 19
 db  "jmp_if_false_bool32" , 0
__literal950_bufferBytes StringHead_t 16
 db  "jmp_if_eq_bool32" , 0
__literal951_bufferBytes StringHead_t 16
 db  "jmp_if_ne_bool32" , 0
__literal952_bufferBytes StringHead_t 13
 db  "cmp_eq_bool32" , 0
__literal953_bufferBytes StringHead_t 13
 db  "cmp_ne_bool32" , 0
__literal954_bufferBytes StringHead_t 17
 db  "jmp_if_eq_float64" , 0
__literal955_bufferBytes StringHead_t 17
 db  "jmp_if_ne_float64" , 0
__literal956_bufferBytes StringHead_t 17
 db  "jmp_if_lt_float64" , 0
__literal957_bufferBytes StringHead_t 17
 db  "jmp_if_le_float64" , 0
__literal958_bufferBytes StringHead_t 17
 db  "jmp_if_gt_float64" , 0
__literal959_bufferBytes StringHead_t 17
 db  "jmp_if_ge_float64" , 0
__literal960_bufferBytes StringHead_t 2
 db  "l:" , 0
__literal961_bufferBytes StringHead_t 4
 db  "@eol" , 0
__literal962_bufferBytes StringHead_t 2
 db  "g:" , 0
__literal965_bufferBytes StringHead_t 9
 db  "str_int64" , 0
__literal969_bufferBytes StringHead_t 9
 db  "str_int32" , 0
__literal971_bufferBytes StringHead_t 11
 db  "str_float64" , 0
__literal973_bufferBytes StringHead_t 10
 db  "str_bool32" , 0
__literal977_bufferBytes StringHead_t 3
 db  "rdi" , 0
__literal978_bufferBytes StringHead_t 40
 db  "__MOLD_ForDriver_IndexesAndValuesInArray" , 0
__literal979_bufferBytes StringHead_t 48
 db  "__MOLD_ForDriver_IndexesAndValuesInArrayOrString" , 0
__literal980_bufferBytes StringHead_t 2
 db  "r9" , 0
__literal981_bufferBytes StringHead_t 3
 db  "rax" , 0
__literal982_bufferBytes StringHead_t 10
 db  "  add rsp," , 0
__literal993_bufferBytes StringHead_t 21
 db  "conv_int32_to_float64" , 0
__literal996_bufferBytes StringHead_t 21
 db  "conv_int64_to_float64" , 0
__literal1002_bufferBytes StringHead_t 21
 db  "conv_float64_to_int32" , 0
__literal1003_bufferBytes StringHead_t 49
 db  "error: convert imm float64 to int32 not supported" , 0
__literal1005_bufferBytes StringHead_t 21
 db  "conv_float64_to_int64" , 0
__literal1006_bufferBytes StringHead_t 49
 db  "error: convert imm float64 to int64 not supported" , 0
__literal1011_bufferBytes StringHead_t 22
 db  "conv_variant_to_bool32" , 0
__literal1014_bufferBytes StringHead_t 21
 db  "conv_variant_to_int32" , 0
__literal1016_bufferBytes StringHead_t 21
 db  "conv_variant_to_int64" , 0
__literal1017_bufferBytes StringHead_t 23
 db  "conv_variant_to_float64" , 0
__literal1019_bufferBytes StringHead_t 19
 db  "jmp_if_true_variant" , 0
__literal1023_bufferBytes StringHead_t 20
 db  "jmp_if_false_variant" , 0
__literal1025_bufferBytes StringHead_t 23
 db  "jmp_if_variant_ge_int64" , 0
__literal1072_bufferBytes StringHead_t 9
 db  "rbpOffset" , 0
__literal1083_bufferBytes StringHead_t 4
 db  "item" , 0
__literal1090_bufferBytes StringHead_t 33
 db  "error: unhandled type for param '" , 0
__literal1091_bufferBytes StringHead_t 3
 db  "': " , 0
__literal1096_bufferBytes StringHead_t 37
 db  "__MOLD_VariantArrayCreateFromInitList" , 0
__literal1097_bufferBytes StringHead_t 25
 db  "__MOLD_VariantArrayCreate" , 0
__literal1098_bufferBytes StringHead_t 35
 db  "__MOLD_VariantMapCreateFromInitList" , 0
__literal1099_bufferBytes StringHead_t 23
 db  "__MOLD_VariantMapCreate" , 0
__literal1100_bufferBytes StringHead_t 19
 db  "store_index_variant" , 0
__literal1101_bufferBytes StringHead_t 26
 db  "__MOLD_VariantStoreAtIndex" , 0
__literal1102_bufferBytes StringHead_t 16
 db  "store_key_string" , 0
__literal1103_bufferBytes StringHead_t 17
 db  "store_key_variant" , 0
__literal1104_bufferBytes StringHead_t 24
 db  "__MOLD_VariantStoreAtKey" , 0
__literal1105_bufferBytes StringHead_t 17
 db  "store_index_int32" , 0
__literal1106_bufferBytes StringHead_t 32
 db  "__MOLD_VariantStoreAtIndex_int32" , 0
__literal1107_bufferBytes StringHead_t 29
 db  "load_index_variant_by_variant" , 0
__literal1108_bufferBytes StringHead_t 27
 db  "__MOLD_VariantLoadFromIndex" , 0
__literal1109_bufferBytes StringHead_t 27
 db  "load_index_variant_by_int32" , 0
__literal1110_bufferBytes StringHead_t 26
 db  "load_index_string_by_int32" , 0
__literal1111_bufferBytes StringHead_t 33
 db  "__MOLD_VariantLoadFromIndex_int32" , 0
__literal1112_bufferBytes StringHead_t 25
 db  "load_index_int32_by_int32" , 0
__literal1113_bufferBytes StringHead_t 34
 db  "__MOLD_VariantLoadFromIndex_native" , 0
__literal1114_bufferBytes StringHead_t 16
 db  "load_key_variant" , 0
__literal1115_bufferBytes StringHead_t 25
 db  "__MOLD_VariantLoadFromKey" , 0
__literal1116_bufferBytes StringHead_t 25
 db  "error: unhandled opcode ", 34, "" , 0
__literal1124_bufferBytes StringHead_t 5
 db  " dq 0" , 0
__literal1125_bufferBytes StringHead_t 5
 db  " dd 0" , 0
__literal1126_bufferBytes StringHead_t 30
 db  "error: unhandled global type: " , 0
__literal1140_bufferBytes StringHead_t 30
 db  "error: unhandled format item: " , 0
__literal1156_bufferBytes StringHead_t 23
 db  "__MOLD_NullMethodCalled" , 0
__literal1157_bufferBytes StringHead_t 6
 db  "_vcall" , 0
__literal1179_bufferBytes StringHead_t 10
 db  "lastOpcode" , 0
__literal1180_bufferBytes StringHead_t 7
 db  "lastDst" , 0
__literal1181_bufferBytes StringHead_t 8
 db  "lastSrc1" , 0
__literal1182_bufferBytes StringHead_t 8
 db  "lastSrc2" , 0
__literal1183_bufferBytes StringHead_t 18
 db  "cmpXxJmpIfFalseMap" , 0
__literal1191_bufferBytes StringHead_t 17
 db  "cmpXxJmpIfTrueMap" , 0
__literal1192_bufferBytes StringHead_t 7
 db  "codeObj" , 0
__literal1193_bufferBytes StringHead_t 31
 db  "runtime error: integer expected" , 0
__literal1194_bufferBytes StringHead_t 13
 db  "__mold_vtable" , 0
__literal1195_bufferBytes StringHead_t 7
 db  "error: " , 0
__literal1196_bufferBytes StringHead_t 44
 db  "error: unsupported number of syscall params:" , 0
__literal1197_bufferBytes StringHead_t 16
 db  "unknown opcode '" , 0
__literal1198_bufferBytes StringHead_t 9
 db  "load.null" , 0
__literal1199_bufferBytes StringHead_t 13
 db  "load.string '" , 0
__literal1200_bufferBytes StringHead_t 13
 db  "load.string ", 34, "" , 0
__literal1201_bufferBytes StringHead_t 13
 db  "load.boolean " , 0
__literal1202_bufferBytes StringHead_t 13
 db  "load.integer " , 0
__literal1203_bufferBytes StringHead_t 11
 db  "load.float " , 0
__literal1204_bufferBytes StringHead_t 25
 db  "error: unhandled imm type" , 0
__literal1205_bufferBytes StringHead_t 10
 db  "load.array" , 0
__literal1206_bufferBytes StringHead_t 8
 db  "load.map" , 0
__literal1207_bufferBytes StringHead_t 11
 db  "string.join" , 0
__literal1208_bufferBytes StringHead_t 6
 db  "cmp.eq" , 0
__literal1209_bufferBytes StringHead_t 7
 db  "cmp.neq" , 0
__literal1210_bufferBytes StringHead_t 6
 db  "cmp.lt" , 0
__literal1211_bufferBytes StringHead_t 6
 db  "cmp.le" , 0
__literal1212_bufferBytes StringHead_t 6
 db  "cmp.gt" , 0
__literal1213_bufferBytes StringHead_t 6
 db  "cmp.ge" , 0
__literal1214_bufferBytes StringHead_t 6
 db  "print " , 0
__literal1215_bufferBytes StringHead_t 11
 db  "load.local " , 0
__literal1216_bufferBytes StringHead_t 13
 db  "load.by.index" , 0
__literal1217_bufferBytes StringHead_t 11
 db  "load.by.key" , 0
__literal1218_bufferBytes StringHead_t 11
 db  "load.param " , 0
__literal1219_bufferBytes StringHead_t 12
 db  "load.global " , 0
__literal1220_bufferBytes StringHead_t 11
 db  "load.retval" , 0
__literal1221_bufferBytes StringHead_t 12
 db  "store.local " , 0
__literal1222_bufferBytes StringHead_t 12
 db  "store.param " , 0
__literal1223_bufferBytes StringHead_t 13
 db  "store.global " , 0
__literal1224_bufferBytes StringHead_t 12
 db  "store.retval" , 0
__literal1225_bufferBytes StringHead_t 14
 db  "store.by.index" , 0
__literal1226_bufferBytes StringHead_t 12
 db  "store.by.key" , 0
__literal1227_bufferBytes StringHead_t 4
 db  "jmp " , 0
__literal1228_bufferBytes StringHead_t 12
 db  "jmp.if.true " , 0
__literal1229_bufferBytes StringHead_t 13
 db  "jmp.if.false " , 0
__literal1230_bufferBytes StringHead_t 5
 db  "call " , 0
__literal1231_bufferBytes StringHead_t 11
 db  "init.frame " , 0
__literal1232_bufferBytes StringHead_t 4
 db  "ret " , 0
__literal1233_bufferBytes StringHead_t 9
 db  "inner.ret" , 0
__literal1234_bufferBytes StringHead_t 4
 db  "drop" , 0
__literal1235_bufferBytes StringHead_t 6
 db  "dropn " , 0
__literal1236_bufferBytes StringHead_t 3
 db  "dup" , 0
__literal1237_bufferBytes StringHead_t 4
 db  "over" , 0
__literal1238_bufferBytes StringHead_t 6
 db  "vcall " , 0
__literal1239_bufferBytes StringHead_t 14
 db  "create.object " , 0
__literal1240_bufferBytes StringHead_t 9
 db  "move.back" , 0
__literal1241_bufferBytes StringHead_t 9
 db  "load.argc" , 0
__literal1242_bufferBytes StringHead_t 9
 db  "load.argv" , 0
__literal1243_bufferBytes StringHead_t 8
 db  "syscall " , 0
__literal1244_bufferBytes StringHead_t 17
 db  "for.each.indexes " , 0
__literal1245_bufferBytes StringHead_t 14
 db  "for.each.keys " , 0
__literal1246_bufferBytes StringHead_t 10
 db  "0.5.200921" , 0
__literal1250_bufferBytes StringHead_t 11
 db  "interpreter" , 0
__literal1251_bufferBytes StringHead_t 2
 db  "-c" , 0
__literal1252_bufferBytes StringHead_t 8
 db  "compiler" , 0
__literal1255_bufferBytes StringHead_t 5
 db  "--asm" , 0
__literal1256_bufferBytes StringHead_t 3
 db  "asm" , 0
__literal1257_bufferBytes StringHead_t 6
 db  "--mir0" , 0
__literal1258_bufferBytes StringHead_t 4
 db  "mir0" , 0
__literal1259_bufferBytes StringHead_t 5
 db  "--mir" , 0
__literal1260_bufferBytes StringHead_t 6
 db  "--mir1" , 0
__literal1261_bufferBytes StringHead_t 4
 db  "mir1" , 0
__literal1262_bufferBytes StringHead_t 5
 db  "--ast" , 0
__literal1263_bufferBytes StringHead_t 3
 db  "ast" , 0
__literal1264_bufferBytes StringHead_t 9
 db  "--astjson" , 0
__literal1265_bufferBytes StringHead_t 7
 db  "astjson" , 0
__literal1266_bufferBytes StringHead_t 15
 db  "--prettyPrinter" , 0
__literal1267_bufferBytes StringHead_t 13
 db  "prettyPrinter" , 0
__literal1268_bufferBytes StringHead_t 14
 db  "--debug-parser" , 0
__literal1269_bufferBytes StringHead_t 7
 db  "--debug" , 0
__literal1270_bufferBytes StringHead_t 3
 db  "-O0" , 0
__literal1271_bufferBytes StringHead_t 3
 db  "-O1" , 0
__literal1272_bufferBytes StringHead_t 3
 db  "-O2" , 0
__literal1273_bufferBytes StringHead_t 3
 db  "-O3" , 0
__literal1274_bufferBytes StringHead_t 10
 db  "--profiler" , 0
__literal1275_bufferBytes StringHead_t 25
 db  "Creating parser object..." , 0
__literal1276_bufferBytes StringHead_t 17
 db  "Parsing source..." , 0
__literal1277_bufferBytes StringHead_t 49
 db  "temporary disabled due to missing object printing" , 0
__literal1278_bufferBytes StringHead_t 20
 db  "Resolving imports..." , 0
__literal1279_bufferBytes StringHead_t 20
 db  "Preprocessing AST..." , 0
__literal1280_bufferBytes StringHead_t 24
 db  "Building symbol table..." , 0
__literal1281_bufferBytes StringHead_t 17
 db  "Optimizing AST..." , 0
__literal1282_bufferBytes StringHead_t 23
 db  "Evaluating AST nodes..." , 0
__literal1283_bufferBytes StringHead_t 21
 db  "VCall optimization..." , 0
__literal1284_bufferBytes StringHead_t 19
 db  "Constant folding..." , 0
__literal1285_bufferBytes StringHead_t 49
 db  "If optimization... (TEMPORARY DISABLED FOR MIR0!)" , 0
__literal1286_bufferBytes StringHead_t 18
 db  "If optimization..." , 0
__literal1287_bufferBytes StringHead_t 24
 db  "Dead code elimination..." , 0
__literal1288_bufferBytes StringHead_t 41
 db  "Common subexpression elimination (CSE)..." , 0
__literal1289_bufferBytes StringHead_t 27
 db  "error: optimization level #" , 0
__literal1290_bufferBytes StringHead_t 23
 db  " is not implemented yet" , 0
__literal1291_bufferBytes StringHead_t 26
 db  "Translating AST to MIR0..." , 0
__literal1292_bufferBytes StringHead_t 23
 db  "Loading MIR0 into VM..." , 0
__literal1293_bufferBytes StringHead_t 15
 db  "Dumping code..." , 0
__literal1294_bufferBytes StringHead_t 13
 db  "Running VM..." , 0
__literal1295_bufferBytes StringHead_t 12
 db  "Type cast..." , 0
__literal1296_bufferBytes StringHead_t 18
 db  "Translating AST..." , 0
__literal1297_bufferBytes StringHead_t 22
 db  "Generating x64 code..." , 0
__const1331_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
__const1331_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const1886_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
; Reuse already emitted buffer
__const1886_0 Variant_t VARIANT_STRING, 0, __literal2_buffer
; Reuse already emitted buffer
__const1886_1 Variant_t VARIANT_STRING, 0, __literal0_buffer
; Reuse already emitted buffer
__const1886_2 Variant_t VARIANT_STRING, 0, __literal129_buffer
; Reuse already emitted buffer
__const1886_3 Variant_t VARIANT_STRING, 0, __literal3_buffer
__const1887_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
__const1887_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const1887_1 Variant_t VARIANT_INTEGER, 0, 77
__const1887_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const1887_3 Variant_t VARIANT_UNDEFINED, 0, 0
__const1919_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
; Reuse already emitted buffer
__const1919_0 Variant_t VARIANT_STRING, 0, __literal155_buffer
; Reuse already emitted buffer
__const1919_1 Variant_t VARIANT_STRING, 0, __literal156_buffer
__const1920_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
__const1920_0 Variant_t VARIANT_INTEGER, 0, 0
__const1920_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const1962_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
; Reuse already emitted buffer
__const1962_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const1962_1 Variant_t VARIANT_STRING, 0, __literal171_buffer
; Reuse already emitted buffer
__const1962_2 Variant_t VARIANT_STRING, 0, __literal132_buffer
; Reuse already emitted buffer
__const1962_3 Variant_t VARIANT_STRING, 0, __literal172_buffer
__const1963_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
__const1963_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const1963_1 Variant_t VARIANT_INTEGER, 0, 2
__const1963_2 Variant_t VARIANT_INTEGER, 0, -1
__const1963_3 Variant_t VARIANT_BOOLEAN, 0, 1
__const2070_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const2070_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const2070_1 Variant_t VARIANT_STRING, 0, __literal171_buffer
; Reuse already emitted buffer
__const2070_2 Variant_t VARIANT_STRING, 0, __literal134_buffer
__const2071_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
__const2071_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2071_1 Variant_t VARIANT_INTEGER, 0, 7
__const2071_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const2107_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
__const2107_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2107_1 Variant_t VARIANT_INTEGER, 0, 8
__const2107_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const2123_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
; Reuse already emitted buffer
__const2123_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const2123_1 Variant_t VARIANT_STRING, 0, __literal171_buffer
__const2124_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
__const2124_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2124_1 Variant_t VARIANT_INTEGER, 0, 1
__const2148_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
; Reuse already emitted buffer
__const2148_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const2148_1 Variant_t VARIANT_STRING, 0, __literal171_buffer
; Reuse already emitted buffer
__const2148_2 Variant_t VARIANT_STRING, 0, __literal2_buffer
; Reuse already emitted buffer
__const2148_3 Variant_t VARIANT_STRING, 0, __literal132_buffer
__const2149_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
__const2149_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2149_1 Variant_t VARIANT_INTEGER, 0, 3
__const2149_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const2149_3 Variant_t VARIANT_INTEGER, 0, -1
__const2151_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const2151_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const2151_1 Variant_t VARIANT_STRING, 0, __literal171_buffer
; Reuse already emitted buffer
__const2151_2 Variant_t VARIANT_STRING, 0, __literal132_buffer
__const2152_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
__const2152_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2152_1 Variant_t VARIANT_INTEGER, 0, 4
__const2152_2 Variant_t VARIANT_INTEGER, 0, -1
__const2154_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const2154_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const2154_1 Variant_t VARIANT_STRING, 0, __literal171_buffer
; Reuse already emitted buffer
__const2154_2 Variant_t VARIANT_STRING, 0, __literal1_buffer
__const2155_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
__const2155_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2155_1 Variant_t VARIANT_INTEGER, 0, 5
__const2155_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const2222_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
__const2222_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2222_1 Variant_t VARIANT_INTEGER, 0, 6
__const2226_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const2226_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const2226_1 Variant_t VARIANT_STRING, 0, __literal171_buffer
; Reuse already emitted buffer
__const2226_2 Variant_t VARIANT_STRING, 0, __literal206_buffer
__const2227_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
__const2227_0 Variant_t VARIANT_UNDEFINED, 0, 0
__const2227_1 Variant_t VARIANT_INTEGER, 0, 10
__const2227_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const2478_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
; Reuse already emitted buffer
__const2478_0 Variant_t VARIANT_STRING, 0, __literal181_buffer
; Reuse already emitted buffer
__const2478_1 Variant_t VARIANT_STRING, 0, __literal135_buffer
__const2479_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
__const2479_0 Variant_t VARIANT_BOOLEAN, 0, 1
__const2479_1 Variant_t VARIANT_INTEGER, 0, -1
__const3700_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const3700_0 Variant_t VARIANT_STRING, 0, __literal12_buffer
; Reuse already emitted buffer
__const3700_1 Variant_t VARIANT_STRING, 0, __literal31_buffer
; Reuse already emitted buffer
__const3700_2 Variant_t VARIANT_STRING, 0, __literal30_buffer
__const3701_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const3701_0 Variant_t VARIANT_STRING, 0, __literal6_buffer
__const3701_1 Variant_t VARIANT_INTEGER, 0, -1
__const3701_2 Variant_t VARIANT_INTEGER, 0, -1
__const4137_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
__const4137_0 Variant_t VARIANT_STRING, 0, __const4137_0_buffer
__const4341_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const4341_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
; Reuse already emitted buffer
__const4341_1 Variant_t VARIANT_STRING, 0, __literal182_buffer
; Reuse already emitted buffer
__const4341_2 Variant_t VARIANT_STRING, 0, __literal3_buffer
__const4342_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
; Reuse already emitted buffer
__const4342_0 Variant_t VARIANT_STRING, 0, __literal563_buffer
__const4342_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const4342_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const4639_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
__const4639_0 Variant_t VARIANT_STRING, 0, __const4639_0_buffer
__const4639_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const4639_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const4718_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
; Reuse already emitted buffer
__const4718_0 Variant_t VARIANT_STRING, 0, __literal103_buffer
__const4718_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const4718_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const4718_3 Variant_t VARIANT_UNDEFINED, 0, 0
__const4728_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
; Reuse already emitted buffer
__const4728_0 Variant_t VARIANT_STRING, 0, __literal622_buffer
__const4728_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const4728_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const4728_3 Variant_t VARIANT_UNDEFINED, 0, 0
__const4750_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
; Reuse already emitted buffer
__const4750_0 Variant_t VARIANT_STRING, 0, __literal105_buffer
__const4750_1 Variant_t VARIANT_UNDEFINED, 0, 0
__const4750_2 Variant_t VARIANT_UNDEFINED, 0, 0
__const4750_3 Variant_t VARIANT_UNDEFINED, 0, 0
__const5144_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
; Reuse already emitted buffer
__const5144_0 Variant_t VARIANT_STRING, 0, __literal25_buffer
__const5145_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
; Reuse already emitted buffer
__const5145_0 Variant_t VARIANT_STRING, 0, __literal778_buffer
__const5148_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
; Reuse already emitted buffer
__const5148_0 Variant_t VARIANT_STRING, 0, __literal648_buffer
__const5918_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
; Reuse already emitted buffer
__const5918_0 Variant_t VARIANT_STRING, 0, __literal614_buffer
; Reuse already emitted buffer
__const5918_1 Variant_t VARIANT_STRING, 0, __literal615_buffer
; Reuse already emitted buffer
__const5918_2 Variant_t VARIANT_STRING, 0, __literal616_buffer
; Reuse already emitted buffer
__const5918_3 Variant_t VARIANT_STRING, 0, __literal617_buffer
; Reuse already emitted buffer
__const5918_4 Variant_t VARIANT_STRING, 0, __literal618_buffer
; Reuse already emitted buffer
__const5918_5 Variant_t VARIANT_STRING, 0, __literal619_buffer
; Reuse already emitted buffer
__const5918_6 Variant_t VARIANT_STRING, 0, __literal620_buffer
; Reuse already emitted buffer
__const5918_7 Variant_t VARIANT_STRING, 0, __literal621_buffer
__const5919_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
__const5919_0 Variant_t VARIANT_STRING, 0, __const5919_0_buffer
__const5919_1 Variant_t VARIANT_STRING, 0, __const5919_1_buffer
; Reuse already emitted buffer
__const5919_2 Variant_t VARIANT_STRING, 0, __literal633_buffer
__const5919_3 Variant_t VARIANT_STRING, 0, __const5919_3_buffer
__const5919_4 Variant_t VARIANT_STRING, 0, __const5919_4_buffer
__const5919_5 Variant_t VARIANT_STRING, 0, __const5919_5_buffer
__const5919_6 Variant_t VARIANT_STRING, 0, __const5919_6_buffer
__const5919_7 Variant_t VARIANT_STRING, 0, __const5919_7_buffer
__const5922_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
; Reuse already emitted buffer
__const5922_0 Variant_t VARIANT_STRING, 0, __const5919_1_buffer
; Reuse already emitted buffer
__const5922_1 Variant_t VARIANT_STRING, 0, __const5919_0_buffer
; Reuse already emitted buffer
__const5922_2 Variant_t VARIANT_STRING, 0, __const5919_5_buffer
; Reuse already emitted buffer
__const5922_3 Variant_t VARIANT_STRING, 0, __const5919_4_buffer
; Reuse already emitted buffer
__const5922_4 Variant_t VARIANT_STRING, 0, __const5919_3_buffer
; Reuse already emitted buffer
__const5922_5 Variant_t VARIANT_STRING, 0, __literal633_buffer
; Reuse already emitted buffer
__const5922_6 Variant_t VARIANT_STRING, 0, __const5919_7_buffer
; Reuse already emitted buffer
__const5922_7 Variant_t VARIANT_STRING, 0, __const5919_6_buffer
__const6359_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
; Reuse already emitted buffer
__const6359_0 Variant_t VARIANT_STRING, 0, __literal137_buffer
__const6359_1 Variant_t VARIANT_STRING, 0, __const6359_1_buffer
; Reuse already emitted buffer
__const6359_2 Variant_t VARIANT_STRING, 0, __literal17_buffer
__const6359_3 Variant_t VARIANT_STRING, 0, __const6359_3_buffer
; Reuse already emitted buffer
__const6359_4 Variant_t VARIANT_STRING, 0, __literal140_buffer
__const6359_5 Variant_t VARIANT_STRING, 0, __const6359_5_buffer
; Reuse already emitted buffer
__const6359_6 Variant_t VARIANT_STRING, 0, __literal142_buffer
__const6359_7 Variant_t VARIANT_STRING, 0, __const6359_7_buffer
__const6359_8 Variant_t VARIANT_STRING, 0, __const6359_8_buffer
__const6359_9 Variant_t VARIANT_STRING, 0, __const6359_9_buffer
__const6362_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 39 ; itemsCnt
__const6362_0 Variant_t VARIANT_STRING, 0, __const6362_0_buffer
__const6362_1 Variant_t VARIANT_STRING, 0, __const6362_1_buffer
__const6362_2 Variant_t VARIANT_STRING, 0, __const6362_2_buffer
__const6362_3 Variant_t VARIANT_STRING, 0, __const6362_3_buffer
__const6362_4 Variant_t VARIANT_STRING, 0, __const6362_4_buffer
__const6362_5 Variant_t VARIANT_STRING, 0, __const6362_5_buffer
__const6362_6 Variant_t VARIANT_STRING, 0, __const6362_6_buffer
__const6362_7 Variant_t VARIANT_STRING, 0, __const6362_7_buffer
__const6362_8 Variant_t VARIANT_STRING, 0, __const6362_8_buffer
__const6362_9 Variant_t VARIANT_STRING, 0, __const6362_9_buffer
__const6362_10 Variant_t VARIANT_STRING, 0, __const6362_10_buffer
__const6362_11 Variant_t VARIANT_STRING, 0, __const6362_11_buffer
__const6362_12 Variant_t VARIANT_STRING, 0, __const6362_12_buffer
__const6362_13 Variant_t VARIANT_STRING, 0, __const6362_13_buffer
__const6362_14 Variant_t VARIANT_STRING, 0, __const6362_14_buffer
__const6362_15 Variant_t VARIANT_STRING, 0, __const6362_15_buffer
__const6362_16 Variant_t VARIANT_STRING, 0, __const6362_16_buffer
__const6362_17 Variant_t VARIANT_STRING, 0, __const6362_17_buffer
__const6362_18 Variant_t VARIANT_STRING, 0, __const6362_18_buffer
__const6362_19 Variant_t VARIANT_STRING, 0, __const6362_19_buffer
__const6362_20 Variant_t VARIANT_STRING, 0, __const6362_20_buffer
__const6362_21 Variant_t VARIANT_STRING, 0, __const6362_21_buffer
__const6362_22 Variant_t VARIANT_STRING, 0, __const6362_22_buffer
__const6362_23 Variant_t VARIANT_STRING, 0, __const6362_23_buffer
__const6362_24 Variant_t VARIANT_STRING, 0, __const6362_24_buffer
__const6362_25 Variant_t VARIANT_STRING, 0, __const6362_25_buffer
__const6362_26 Variant_t VARIANT_STRING, 0, __const6362_26_buffer
__const6362_27 Variant_t VARIANT_STRING, 0, __const6362_27_buffer
__const6362_28 Variant_t VARIANT_STRING, 0, __const6362_28_buffer
__const6362_29 Variant_t VARIANT_STRING, 0, __const6362_29_buffer
__const6362_30 Variant_t VARIANT_STRING, 0, __const6362_30_buffer
__const6362_31 Variant_t VARIANT_STRING, 0, __const6362_31_buffer
__const6362_32 Variant_t VARIANT_STRING, 0, __const6362_32_buffer
__const6362_33 Variant_t VARIANT_STRING, 0, __const6362_33_buffer
; Reuse already emitted buffer
__const6362_34 Variant_t VARIANT_STRING, 0, __literal100_buffer
__const6362_35 Variant_t VARIANT_STRING, 0, __const6362_35_buffer
__const6362_36 Variant_t VARIANT_STRING, 0, __const6362_36_buffer
; Reuse already emitted buffer
__const6362_37 Variant_t VARIANT_STRING, 0, __literal19_buffer
__const6362_38 Variant_t VARIANT_STRING, 0, __const6362_38_buffer
__const6363_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 39 ; itemsCnt
dw 4097, 4098, 4099, 4100, 4104, 4105, 4106, 4107, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 8213, 8213, 8214, 8215, 8216, 8216, 4125, 4127, 4128, 4129, 4130, 8227, 8228, 8229, 4134, 40, 4137, 4138, 4139, 4140, 4141, 4142, 8242, 8243
__const6364_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
; Reuse already emitted buffer
__const6364_0 Variant_t VARIANT_STRING, 0, __literal301_buffer
; Reuse already emitted buffer
__const6364_1 Variant_t VARIANT_STRING, 0, __literal302_buffer
; Reuse already emitted buffer
__const6364_2 Variant_t VARIANT_STRING, 0, __literal303_buffer
; Reuse already emitted buffer
__const6364_3 Variant_t VARIANT_STRING, 0, __literal160_buffer
; Reuse already emitted buffer
__const6364_4 Variant_t VARIANT_STRING, 0, __literal304_buffer
; Reuse already emitted buffer
__const6364_5 Variant_t VARIANT_STRING, 0, __literal305_buffer
; Reuse already emitted buffer
__const6364_6 Variant_t VARIANT_STRING, 0, __literal306_buffer
; Reuse already emitted buffer
__const6364_7 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_6_buffer
__const6365_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
db 0, 2, 4, 5, 6, 7, 8, 9
__const6366_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
; Reuse already emitted buffer
__const6366_0 Variant_t VARIANT_STRING, 0, __literal154_buffer
; Reuse already emitted buffer
__const6366_1 Variant_t VARIANT_STRING, 0, __literal157_buffer
; Reuse already emitted buffer
__const6366_2 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_2_buffer
; Reuse already emitted buffer
__const6366_3 Variant_t VARIANT_STRING, 0, __literal158_buffer
; Reuse already emitted buffer
__const6366_4 Variant_t VARIANT_STRING, 0, __literal159_buffer
__const6366_5 Variant_t VARIANT_STRING, 0, __const6366_5_buffer
; Reuse already emitted buffer
__const6366_6 Variant_t VARIANT_STRING, 0, __literal160_buffer
; Reuse already emitted buffer
__const6366_7 Variant_t VARIANT_STRING, 0, __literal305_buffer
; Reuse already emitted buffer
__const6366_8 Variant_t VARIANT_STRING, 0, __literal306_buffer
__const6367_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
; Reuse already emitted buffer
__const6367_0 Variant_t VARIANT_STRING, 0, __literal671_buffer
; Reuse already emitted buffer
__const6367_1 Variant_t VARIANT_STRING, 0, __literal671_buffer
__const6367_2 Variant_t VARIANT_STRING, 0, __const6367_2_buffer
__const6367_3 Variant_t VARIANT_STRING, 0, __const6367_3_buffer
__const6367_4 Variant_t VARIANT_STRING, 0, __const6367_4_buffer
; Reuse already emitted buffer
__const6367_5 Variant_t VARIANT_STRING, 0, __const6367_4_buffer
__const6367_6 Variant_t VARIANT_STRING, 0, __const6367_6_buffer
__const6367_7 Variant_t VARIANT_STRING, 0, __const6367_7_buffer
__const6367_8 Variant_t VARIANT_STRING, 0, __const6367_8_buffer
__const6368_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
; Reuse already emitted buffer
__const6368_0 Variant_t VARIANT_STRING, 0, __literal154_buffer
; Reuse already emitted buffer
__const6368_1 Variant_t VARIANT_STRING, 0, __literal157_buffer
; Reuse already emitted buffer
__const6368_2 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_2_buffer
; Reuse already emitted buffer
__const6368_3 Variant_t VARIANT_STRING, 0, __literal158_buffer
; Reuse already emitted buffer
__const6368_4 Variant_t VARIANT_STRING, 0, __literal159_buffer
; Reuse already emitted buffer
__const6368_5 Variant_t VARIANT_STRING, 0, __const6366_5_buffer
; Reuse already emitted buffer
__const6368_6 Variant_t VARIANT_STRING, 0, __literal130_buffer
; Reuse already emitted buffer
__const6368_7 Variant_t VARIANT_STRING, 0, __literal160_buffer
; Reuse already emitted buffer
__const6368_8 Variant_t VARIANT_STRING, 0, __literal305_buffer
; Reuse already emitted buffer
__const6368_9 Variant_t VARIANT_STRING, 0, __literal306_buffer
__const6369_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 4, 8, 4, 8, 4, 8, 16, 16, 16, 16
; iter 3
ParserActionsLUT_0_buffer Buffer_t 1168 , -1, 0, ParserActionsLUT_0_bufferBytes
ParserActionsLUT_1_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_1_bufferBytes
ParserActionsLUT_2_buffer Buffer_t 688 , -1, 0, ParserActionsLUT_2_bufferBytes
ParserActionsLUT_5_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_5_bufferBytes
ParserActionsLUT_6_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_6_bufferBytes
ParserActionsLUT_8_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_8_bufferBytes
ParserActionsLUT_9_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_9_bufferBytes
ParserActionsLUT_10_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_10_bufferBytes
ParserActionsLUT_11_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_11_bufferBytes
ParserActionsLUT_12_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_12_bufferBytes
ParserActionsLUT_13_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_13_bufferBytes
ParserActionsLUT_14_buffer Buffer_t 16 , -1, 0, ParserActionsLUT_14_bufferBytes
ParserActionsLUT_17_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_17_bufferBytes
ParserActionsLUT_18_buffer Buffer_t 304 , -1, 0, ParserActionsLUT_18_bufferBytes
ParserActionsLUT_20_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_20_bufferBytes
ParserActionsLUT_21_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_21_bufferBytes
ParserActionsLUT_22_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_22_bufferBytes
ParserActionsLUT_23_buffer Buffer_t 688 , -1, 0, ParserActionsLUT_23_bufferBytes
ParserActionsLUT_24_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_24_bufferBytes
ParserActionsLUT_25_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_25_bufferBytes
ParserActionsLUT_27_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_27_bufferBytes
ParserActionsLUT_28_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_28_bufferBytes
ParserActionsLUT_29_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_29_bufferBytes
ParserActionsLUT_30_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_30_bufferBytes
ParserActionsLUT_35_buffer Buffer_t 304 , -1, 0, ParserActionsLUT_35_bufferBytes
ParserActionsLUT_38_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_38_bufferBytes
ParserActionsLUT_39_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_39_bufferBytes
ParserActionsLUT_40_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_40_bufferBytes
ParserActionsLUT_49_buffer Buffer_t 832 , -1, 0, ParserActionsLUT_49_bufferBytes
ParserActionsLUT_50_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_50_bufferBytes
ParserActionsLUT_54_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_54_bufferBytes
ParserActionsLUT_55_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_55_bufferBytes
ParserActionsLUT_58_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_58_bufferBytes
ParserActionsLUT_65_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_65_bufferBytes
ParserActionsLUT_66_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_66_bufferBytes
ParserActionsLUT_67_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_67_bufferBytes
ParserActionsLUT_68_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_68_bufferBytes
ParserActionsLUT_69_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_69_bufferBytes
ParserActionsLUT_70_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_70_bufferBytes
ParserActionsLUT_71_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_71_bufferBytes
ParserActionsLUT_73_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_73_bufferBytes
ParserActionsLUT_74_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_74_bufferBytes
ParserActionsLUT_75_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_75_bufferBytes
ParserActionsLUT_76_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_76_bufferBytes
ParserActionsLUT_80_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_80_bufferBytes
ParserActionsLUT_81_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_81_bufferBytes
ParserActionsLUT_84_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_84_bufferBytes
ParserActionsLUT_85_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_85_bufferBytes
ParserActionsLUT_86_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_86_bufferBytes
ParserActionsLUT_87_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_87_bufferBytes
ParserActionsLUT_88_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_88_bufferBytes
ParserActionsLUT_89_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_89_bufferBytes
ParserActionsLUT_92_buffer Buffer_t 400 , -1, 0, ParserActionsLUT_92_bufferBytes
ParserActionsLUT_95_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_95_bufferBytes
ParserActionsLUT_98_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_98_bufferBytes
ParserActionsLUT_99_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_99_bufferBytes
ParserActionsLUT_100_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_100_bufferBytes
ParserActionsLUT_101_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_101_bufferBytes
ParserActionsLUT_102_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_102_bufferBytes
ParserActionsLUT_103_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_103_bufferBytes
ParserActionsLUT_105_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_105_bufferBytes
ParserActionsLUT_106_buffer Buffer_t 304 , -1, 0, ParserActionsLUT_106_bufferBytes
ParserActionsLUT_107_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_107_bufferBytes
ParserActionsLUT_116_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_116_bufferBytes
ParserActionsLUT_118_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_118_bufferBytes
ParserActionsLUT_119_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_119_bufferBytes
ParserActionsLUT_120_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_120_bufferBytes
ParserActionsLUT_121_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_121_bufferBytes
ParserActionsLUT_124_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_124_bufferBytes
ParserActionsLUT_125_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_125_bufferBytes
ParserActionsLUT_126_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_126_bufferBytes
ParserActionsLUT_132_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_132_bufferBytes
ParserActionsLUT_136_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_136_bufferBytes
ParserActionsLUT_137_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_137_bufferBytes
ParserActionsLUT_141_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_141_bufferBytes
ParserActionsLUT_142_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_142_bufferBytes
ParserActionsLUT_143_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_143_bufferBytes
ParserActionsLUT_144_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_144_bufferBytes
ParserActionsLUT_145_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_145_bufferBytes
ParserActionsLUT_147_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_147_bufferBytes
ParserActionsLUT_148_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_148_bufferBytes
ParserActionsLUT_149_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_149_bufferBytes
ParserActionsLUT_150_buffer Buffer_t 352 , -1, 0, ParserActionsLUT_150_bufferBytes
ParserActionsLUT_156_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_156_bufferBytes
ParserActionsLUT_157_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_157_bufferBytes
ParserActionsLUT_158_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_158_bufferBytes
ParserActionsLUT_160_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_160_bufferBytes
ParserActionsLUT_163_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_163_bufferBytes
ParserActionsLUT_165_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_165_bufferBytes
ParserActionsLUT_166_buffer Buffer_t 400 , -1, 0, ParserActionsLUT_166_bufferBytes
ParserActionsLUT_168_buffer Buffer_t 304 , -1, 0, ParserActionsLUT_168_bufferBytes
ParserActionsLUT_169_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_169_bufferBytes
ParserActionsLUT_170_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_170_bufferBytes
ParserActionsLUT_171_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_171_bufferBytes
ParserActionsLUT_175_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_175_bufferBytes
ParserActionsLUT_179_buffer Buffer_t 1456 , -1, 0, ParserActionsLUT_179_bufferBytes
ParserActionsLUT_180_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_180_bufferBytes
ParserActionsLUT_182_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_182_bufferBytes
ParserActionsLUT_184_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_184_bufferBytes
ParserActionsLUT_190_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_190_bufferBytes
ParserActionsLUT_191_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_191_bufferBytes
ParserActionsLUT_192_buffer Buffer_t 352 , -1, 0, ParserActionsLUT_192_bufferBytes
ParserActionsLUT_199_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_199_bufferBytes
ParserActionsLUT_201_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_201_bufferBytes
ParserActionsLUT_202_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_202_bufferBytes
ParserActionsLUT_204_buffer Buffer_t 400 , -1, 0, ParserActionsLUT_204_bufferBytes
ParserActionsLUT_205_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_205_bufferBytes
ParserActionsLUT_207_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_207_bufferBytes
ParserActionsLUT_209_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_209_bufferBytes
ParserActionsLUT_212_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_212_bufferBytes
ParserActionsLUT_213_buffer Buffer_t 256 , -1, 0, ParserActionsLUT_213_bufferBytes
ParserActionsLUT_228_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_228_bufferBytes
ParserActionsLUT_229_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_229_bufferBytes
ParserActionsLUT_230_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_230_bufferBytes
ParserGotoLUT_0_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_0_bufferBytes
ParserGotoLUT_2_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_2_bufferBytes
ParserGotoLUT_3_buffer Buffer_t 1648 , -1, 0, ParserGotoLUT_3_bufferBytes
ParserGotoLUT_4_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_4_bufferBytes
ParserGotoLUT_7_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_7_bufferBytes
ParserGotoLUT_12_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_12_bufferBytes
ParserGotoLUT_15_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_15_bufferBytes
ParserGotoLUT_16_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_16_bufferBytes
ParserGotoLUT_17_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_17_bufferBytes
ParserGotoLUT_19_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_19_bufferBytes
ParserGotoLUT_20_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_20_bufferBytes
ParserGotoLUT_23_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_23_bufferBytes
ParserGotoLUT_24_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_24_bufferBytes
ParserGotoLUT_29_buffer Buffer_t 256 , -1, 0, ParserGotoLUT_29_bufferBytes
ParserGotoLUT_31_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_31_bufferBytes
ParserGotoLUT_32_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_32_bufferBytes
ParserGotoLUT_42_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_42_bufferBytes
ParserGotoLUT_43_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_43_bufferBytes
ParserGotoLUT_44_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_44_bufferBytes
ParserGotoLUT_45_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_45_bufferBytes
ParserGotoLUT_46_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_46_bufferBytes
ParserGotoLUT_47_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_47_bufferBytes
ParserGotoLUT_48_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_48_bufferBytes
ParserGotoLUT_49_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_49_bufferBytes
ParserGotoLUT_50_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_50_bufferBytes
ParserGotoLUT_51_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_51_bufferBytes
ParserGotoLUT_52_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_52_bufferBytes
ParserGotoLUT_59_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_59_bufferBytes
ParserGotoLUT_60_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_60_bufferBytes
ParserGotoLUT_61_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_61_bufferBytes
ParserGotoLUT_62_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_62_bufferBytes
ParserGotoLUT_63_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_63_bufferBytes
ParserGotoLUT_64_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_64_bufferBytes
ParserGotoLUT_70_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_70_bufferBytes
ParserGotoLUT_72_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_72_bufferBytes
ParserGotoLUT_77_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_77_bufferBytes
ParserGotoLUT_78_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_78_bufferBytes
ParserGotoLUT_79_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_79_bufferBytes
ParserGotoLUT_81_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_81_bufferBytes
ParserGotoLUT_82_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_82_bufferBytes
ParserGotoLUT_83_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_83_bufferBytes
ParserGotoLUT_90_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_90_bufferBytes
ParserGotoLUT_105_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_105_bufferBytes
ParserGotoLUT_106_buffer Buffer_t 352 , -1, 0, ParserGotoLUT_106_bufferBytes
ParserGotoLUT_113_buffer Buffer_t 160 , -1, 0, ParserGotoLUT_113_bufferBytes
ParserGotoLUT_114_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_114_bufferBytes
ParserGotoLUT_115_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_115_bufferBytes
ParserGotoLUT_117_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_117_bufferBytes
ParserGotoLUT_122_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_122_bufferBytes
ParserGotoLUT_123_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_123_bufferBytes
ParserGotoLUT_127_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_127_bufferBytes
ParserGotoLUT_128_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_128_bufferBytes
ParserGotoLUT_132_buffer Buffer_t 160 , -1, 0, ParserGotoLUT_132_bufferBytes
ParserGotoLUT_133_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_133_bufferBytes
ParserGotoLUT_134_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_134_bufferBytes
ParserGotoLUT_138_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_138_bufferBytes
ParserGotoLUT_139_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_139_bufferBytes
ParserGotoLUT_141_buffer Buffer_t 352 , -1, 0, ParserGotoLUT_141_bufferBytes
ParserGotoLUT_143_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_143_bufferBytes
ParserGotoLUT_146_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_146_bufferBytes
ParserGotoLUT_151_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_151_bufferBytes
ParserGotoLUT_152_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_152_bufferBytes
ParserGotoLUT_153_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_153_bufferBytes
ParserGotoLUT_154_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_154_bufferBytes
ParserGotoLUT_155_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_155_bufferBytes
ParserGotoLUT_157_buffer Buffer_t 160 , -1, 0, ParserGotoLUT_157_bufferBytes
ParserGotoLUT_160_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_160_bufferBytes
ParserGotoLUT_161_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_161_bufferBytes
ParserGotoLUT_162_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_162_bufferBytes
ParserGotoLUT_165_buffer Buffer_t 352 , -1, 0, ParserGotoLUT_165_bufferBytes
ParserGotoLUT_166_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_166_bufferBytes
ParserGotoLUT_167_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_167_bufferBytes
ParserGotoLUT_172_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_172_bufferBytes
ParserGotoLUT_173_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_173_bufferBytes
ParserGotoLUT_174_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_174_bufferBytes
ParserGotoLUT_176_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_176_bufferBytes
ParserGotoLUT_177_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_177_bufferBytes
ParserGotoLUT_178_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_178_bufferBytes
ParserGotoLUT_179_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_179_bufferBytes
ParserGotoLUT_181_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_181_bufferBytes
ParserGotoLUT_183_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_183_bufferBytes
ParserGotoLUT_185_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_185_bufferBytes
ParserGotoLUT_186_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_186_bufferBytes
ParserGotoLUT_187_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_187_bufferBytes
ParserGotoLUT_193_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_193_bufferBytes
ParserGotoLUT_194_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_194_bufferBytes
ParserGotoLUT_195_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_195_bufferBytes
ParserGotoLUT_196_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_196_bufferBytes
ParserGotoLUT_197_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_197_bufferBytes
ParserGotoLUT_198_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_198_bufferBytes
ParserGotoLUT_199_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_199_bufferBytes
ParserGotoLUT_200_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_200_bufferBytes
ParserGotoLUT_204_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_204_bufferBytes
ParserGotoLUT_206_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_206_bufferBytes
ParserGotoLUT_208_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_208_bufferBytes
ParserGotoLUT_210_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_210_bufferBytes
ParserGotoLUT_219_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_219_bufferBytes
ParserGotoLUT_221_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_221_bufferBytes
ParserGotoLUT_222_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_222_bufferBytes
ParserGotoLUT_223_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_223_bufferBytes
ParserGotoLUT_224_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_224_bufferBytes
LexerIndexLUT_0_buffer Buffer_t 3600 , -1, 0, LexerIndexLUT_0_bufferBytes
LexerAcceptLUT_0_buffer Buffer_t 3600 , -1, 0, LexerAcceptLUT_0_bufferBytes
AST_DataTypeNames_6_buffer Buffer_t 7 , -1, 0, AST_DataTypeNames_6_bufferBytes
AST_DataTypeForMIR_2_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_2_bufferBytes
REG_PARAMS32_0_buffer Buffer_t 4 , -1, 0, REG_PARAMS32_0_bufferBytes
REG_PARAMS32_1_buffer Buffer_t 4 , -1, 0, REG_PARAMS32_1_bufferBytes
REG_PARAMS32_2_buffer Buffer_t 4 , -1, 0, REG_PARAMS32_2_bufferBytes
REG_PARAMS32_3_buffer Buffer_t 4 , -1, 0, REG_PARAMS32_3_bufferBytes
__const4137_0_buffer Buffer_t 12 , -1, 0, __const4137_0_bufferBytes
__const4639_0_buffer Buffer_t 13 , -1, 0, __const4639_0_bufferBytes
__const5919_0_buffer Buffer_t 10 , -1, 0, __const5919_0_bufferBytes
__const5919_1_buffer Buffer_t 10 , -1, 0, __const5919_1_bufferBytes
__const5919_3_buffer Buffer_t 10 , -1, 0, __const5919_3_bufferBytes
__const5919_4_buffer Buffer_t 10 , -1, 0, __const5919_4_bufferBytes
__const5919_5_buffer Buffer_t 10 , -1, 0, __const5919_5_bufferBytes
__const5919_6_buffer Buffer_t 18 , -1, 0, __const5919_6_bufferBytes
__const5919_7_buffer Buffer_t 14 , -1, 0, __const5919_7_bufferBytes
__const6359_1_buffer Buffer_t 6 , -1, 0, __const6359_1_bufferBytes
__const6359_3_buffer Buffer_t 6 , -1, 0, __const6359_3_bufferBytes
__const6359_5_buffer Buffer_t 6 , -1, 0, __const6359_5_bufferBytes
__const6359_7_buffer Buffer_t 9 , -1, 0, __const6359_7_bufferBytes
__const6359_8_buffer Buffer_t 6 , -1, 0, __const6359_8_bufferBytes
__const6359_9_buffer Buffer_t 7 , -1, 0, __const6359_9_bufferBytes
__const6362_0_buffer Buffer_t 16 , -1, 0, __const6362_0_bufferBytes
__const6362_1_buffer Buffer_t 17 , -1, 0, __const6362_1_bufferBytes
__const6362_2_buffer Buffer_t 18 , -1, 0, __const6362_2_bufferBytes
__const6362_3_buffer Buffer_t 10 , -1, 0, __const6362_3_bufferBytes
__const6362_4_buffer Buffer_t 13 , -1, 0, __const6362_4_bufferBytes
__const6362_5_buffer Buffer_t 14 , -1, 0, __const6362_5_bufferBytes
__const6362_6_buffer Buffer_t 14 , -1, 0, __const6362_6_bufferBytes
__const6362_7_buffer Buffer_t 14 , -1, 0, __const6362_7_bufferBytes
__const6362_8_buffer Buffer_t 16 , -1, 0, __const6362_8_bufferBytes
__const6362_9_buffer Buffer_t 16 , -1, 0, __const6362_9_bufferBytes
__const6362_10_buffer Buffer_t 14 , -1, 0, __const6362_10_bufferBytes
__const6362_11_buffer Buffer_t 15 , -1, 0, __const6362_11_bufferBytes
__const6362_12_buffer Buffer_t 15 , -1, 0, __const6362_12_bufferBytes
__const6362_13_buffer Buffer_t 15 , -1, 0, __const6362_13_bufferBytes
__const6362_14_buffer Buffer_t 13 , -1, 0, __const6362_14_bufferBytes
__const6362_15_buffer Buffer_t 14 , -1, 0, __const6362_15_bufferBytes
__const6362_16_buffer Buffer_t 14 , -1, 0, __const6362_16_bufferBytes
__const6362_17_buffer Buffer_t 15 , -1, 0, __const6362_17_bufferBytes
__const6362_18_buffer Buffer_t 15 , -1, 0, __const6362_18_bufferBytes
__const6362_19_buffer Buffer_t 15 , -1, 0, __const6362_19_bufferBytes
__const6362_20_buffer Buffer_t 17 , -1, 0, __const6362_20_bufferBytes
__const6362_21_buffer Buffer_t 9 , -1, 0, __const6362_21_bufferBytes
__const6362_22_buffer Buffer_t 4 , -1, 0, __const6362_22_bufferBytes
__const6362_23_buffer Buffer_t 4 , -1, 0, __const6362_23_bufferBytes
__const6362_24_buffer Buffer_t 13 , -1, 0, __const6362_24_bufferBytes
__const6362_25_buffer Buffer_t 11 , -1, 0, __const6362_25_bufferBytes
__const6362_26_buffer Buffer_t 7 , -1, 0, __const6362_26_bufferBytes
__const6362_27_buffer Buffer_t 6 , -1, 0, __const6362_27_bufferBytes
__const6362_28_buffer Buffer_t 7 , -1, 0, __const6362_28_bufferBytes
__const6362_29_buffer Buffer_t 7 , -1, 0, __const6362_29_bufferBytes
__const6362_30_buffer Buffer_t 5 , -1, 0, __const6362_30_bufferBytes
__const6362_31_buffer Buffer_t 4 , -1, 0, __const6362_31_bufferBytes
__const6362_32_buffer Buffer_t 4 , -1, 0, __const6362_32_bufferBytes
__const6362_33_buffer Buffer_t 4 , -1, 0, __const6362_33_bufferBytes
__const6362_35_buffer Buffer_t 24 , -1, 0, __const6362_35_bufferBytes
__const6362_36_buffer Buffer_t 15 , -1, 0, __const6362_36_bufferBytes
__const6362_38_buffer Buffer_t 30 , -1, 0, __const6362_38_bufferBytes
__const6366_5_buffer Buffer_t 7 , -1, 0, __const6366_5_bufferBytes
__const6367_2_buffer Buffer_t 14 , -1, 0, __const6367_2_bufferBytes
__const6367_3_buffer Buffer_t 15 , -1, 0, __const6367_3_bufferBytes
__const6367_4_buffer Buffer_t 16 , -1, 0, __const6367_4_bufferBytes
__const6367_6_buffer Buffer_t 15 , -1, 0, __const6367_6_bufferBytes
__const6367_7_buffer Buffer_t 14 , -1, 0, __const6367_7_bufferBytes
__const6367_8_buffer Buffer_t 12 , -1, 0, __const6367_8_bufferBytes
; iter 4
ParserActionsLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 73 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 5, 23, 2, 12, 24, 2, 16, 31, 2, 18, 82, 3, 24, 22, 2, 31, 20, 2, 33, 17, 2, 36, 16, 2, 37, 15, 2, 38, 7, 2, 39, 4, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 1, 2, 53, 7, 3, 56, 29, 2, 61, 19, 2, 63, 12, 2, 68, 2, 2, -1
ParserActionsLUT_1_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 32, 2, -1
ParserActionsLUT_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 4, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 1, 2, 56, 29, 2, 61, 19, 2, 63, 12, 2, 68, 2, 2, -1
ParserActionsLUT_5_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 6, 3, -1
ParserActionsLUT_6_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 0, 0, 3, -1
ParserActionsLUT_8_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 11, 1, -1
ParserActionsLUT_9_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 71, 42, 2, -1
ParserActionsLUT_10_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 10, 1, -1
ParserActionsLUT_11_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 46, 48, 2, 56, 51, 2, 57, 50, 2, 63, 49, 2, 66, 47, 2, 67, 46, 2, 68, 45, 2, 69, 44, 2, 70, 43, 2, -1
ParserActionsLUT_12_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 4, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 1, 2, 53, 52, 2, 56, 29, 2, 61, 19, 2, 63, 12, 2, 68, 2, 2, -1
ParserActionsLUT_13_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 140, 1, -1
ParserActionsLUT_14_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
db -1
ParserActionsLUT_17_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 52, 160, 3, -1
ParserActionsLUT_18_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 17, 64, 2, 42, 60, 2, 43, 62, 2, 44, 63, 2, 45, 59, 2, 64, 61, 2, -1
ParserActionsLUT_20_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 68, 2, -1
ParserActionsLUT_21_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 70, 2, -1
ParserActionsLUT_22_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 71, 2, -1
ParserActionsLUT_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 4, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 1, 2, 56, 29, 2, 61, 72, 2, 63, 12, 2, 68, 2, 2, -1
ParserActionsLUT_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 6, 78, 2, 7, 79, 2, 27, 77, 2, 52, 160, 3, -1
ParserActionsLUT_25_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 40, 106, 1, 41, 106, 1, -1
ParserActionsLUT_27_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 80, 2, -1
ParserActionsLUT_28_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 40, 82, 2, 41, 81, 2, -1
ParserActionsLUT_29_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 49, 185, 3, 50, 181, 3, 53, 83, 2, -1
ParserActionsLUT_30_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 141, 1, -1
ParserActionsLUT_35_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 46, 48, 2, 56, 51, 2, 57, 50, 2, 63, 89, 2, 66, 47, 2, 67, 46, 2, -1
ParserActionsLUT_38_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 46, 48, 2, 56, 51, 2, 57, 50, 2, 63, 89, 2, 66, 47, 2, 67, 46, 2, 68, 45, 2, 69, 44, 2, 70, 43, 2, -1
ParserActionsLUT_39_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
db 17, 88, 1, 42, 88, 1, 43, 88, 1, 44, 88, 1, 45, 88, 1, 46, 88, 1, 56, 88, 1, 57, 88, 1, 63, 88, 1, 64, 88, 1, 66, 88, 1, 67, 88, 1, 68, 88, 1, 69, 88, 1, 70, 88, 1, -1
ParserActionsLUT_40_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 59, 90, 2, -1
ParserActionsLUT_49_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 52 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 34, 98, 2, 35, 100, 2, 39, 4, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 51, 159, 3, 52, 1, 2, 56, 29, 2, 61, 19, 2, 63, 12, 2, 68, 2, 2, -1
ParserActionsLUT_50_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 102, 2, -1
ParserActionsLUT_54_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 53, 51, 3, 59, 105, 2, -1
ParserActionsLUT_55_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 62, 152, 3, -1
ParserActionsLUT_58_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 71, 106, 2, -1
ParserActionsLUT_65_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
db 46, 48, 2, 56, 51, 2, 57, 50, 2, 60, 97, 3, 63, 89, 2, 66, 47, 2, 67, 46, 2, 68, 45, 2, 69, 44, 2, 70, 43, 2, -1
ParserActionsLUT_66_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 60, 107, 3, -1
ParserActionsLUT_67_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 40, 82, 2, 41, 81, 2, 60, 108, 3, -1
ParserActionsLUT_68_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 113, 2, -1
ParserActionsLUT_69_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 114, 2, -1
ParserActionsLUT_70_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 19, 118, 2, 21, 117, 2, 53, 73, 3, -1
ParserActionsLUT_71_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 23, 119, 2, -1
ParserActionsLUT_73_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 117, 1, -1
ParserActionsLUT_74_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 40, 82, 2, 41, 81, 2, 53, 118, 1, -1
ParserActionsLUT_75_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 122, 2, -1
ParserActionsLUT_76_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 11, 123, 2, -1
ParserActionsLUT_80_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 127, 2, -1
ParserActionsLUT_81_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 61, 128, 2, -1
ParserActionsLUT_84_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 53, 56, 3, 59, 132, 2, -1
ParserActionsLUT_85_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 58, 133, 2, -1
ParserActionsLUT_86_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 55, 153, 3, -1
ParserActionsLUT_87_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 53, 134, 2, -1
ParserActionsLUT_88_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 60, 32, 3, -1
ParserActionsLUT_89_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 4, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 51, 159, 3, 52, 1, 2, 56, 29, 2, 61, 19, 2, 63, 12, 2, 68, 2, 2, -1
ParserActionsLUT_92_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 46, 48, 2, 56, 51, 2, 57, 50, 2, 63, 89, 2, 66, 47, 2, 67, 46, 2, 68, 45, 2, 69, 44, 2, -1
ParserActionsLUT_95_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 56, 51, 2, 57, 50, 2, 63, 89, 2, -1
ParserActionsLUT_98_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 62, 136, 2, -1
ParserActionsLUT_99_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 46, 48, 2, 56, 51, 2, 57, 50, 2, 62, 136, 3, 63, 89, 2, 66, 47, 2, 67, 46, 2, 68, 45, 2, 69, 44, 2, 70, 43, 2, -1
ParserActionsLUT_100_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 62, 137, 2, -1
ParserActionsLUT_101_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 62, 137, 3, -1
ParserActionsLUT_102_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 61, 138, 2, -1
ParserActionsLUT_103_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 46, 48, 2, 55, 138, 3, 56, 51, 2, 57, 50, 2, 63, 89, 2, 66, 47, 2, 67, 46, 2, 68, 45, 2, 69, 44, 2, 70, 43, 2, -1
ParserActionsLUT_105_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 4, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 1, 2, 53, 139, 2, 56, 29, 2, 61, 19, 2, 63, 12, 2, 68, 2, 2, -1
ParserActionsLUT_106_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 3, 178, 3, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 63, 141, 2, -1
ParserActionsLUT_107_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 17, 64, 2, -1
ParserActionsLUT_116_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 22, 71, 3, -1
ParserActionsLUT_118_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 21, 146, 2, -1
ParserActionsLUT_119_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 70, 3, -1
ParserActionsLUT_120_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 40, 148, 2, 41, 147, 2, 60, 108, 3, -1
ParserActionsLUT_121_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 60, 119, 3, -1
ParserActionsLUT_124_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 11, 151, 2, -1
ParserActionsLUT_125_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 11, 153, 2, 27, 152, 2, -1
ParserActionsLUT_126_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 11, 155, 2, 27, 154, 2, -1
ParserActionsLUT_132_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 49, 185, 3, 50, 181, 3, 53, 157, 2, -1
ParserActionsLUT_136_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 161, 2, -1
ParserActionsLUT_137_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 162, 2, -1
ParserActionsLUT_141_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 53, 165, 2, 61, 167, 2, 62, 158, 3, 63, 141, 2, 68, 166, 2, -1
ParserActionsLUT_142_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 60, 170, 2, -1
ParserActionsLUT_143_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 59, 171, 2, -1
ParserActionsLUT_144_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 30, 35, 3, -1
ParserActionsLUT_145_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 53, 174, 2, -1
ParserActionsLUT_147_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 53, 176, 2, 61, 128, 2, -1
ParserActionsLUT_148_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 53, 177, 2, 61, 128, 2, -1
ParserActionsLUT_149_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 4, 135, 3, -1
ParserActionsLUT_150_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 10, 178, 2, 17, 64, 2, 42, 60, 2, 43, 62, 2, 44, 63, 2, 45, 59, 2, 64, 61, 2, -1
ParserActionsLUT_156_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 60, 81, 3, -1
ParserActionsLUT_157_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 49, 185, 3, 50, 181, 3, -1
ParserActionsLUT_158_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 58, 185, 2, -1
ParserActionsLUT_160_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 13, 187, 2, 14, 122, 3, 15, 186, 2, -1
ParserActionsLUT_163_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 60, 78, 3, -1
ParserActionsLUT_165_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 53, 165, 2, 61, 167, 2, 63, 141, 2, 68, 166, 2, -1
ParserActionsLUT_166_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 61, 167, 2, 63, 141, 2, 68, 166, 2, -1
ParserActionsLUT_168_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 46, 198, 2, 66, 197, 2, 67, 196, 2, 68, 195, 2, 69, 194, 2, 70, 193, 2, -1
ParserActionsLUT_169_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 53, 63, 3, 59, 199, 2, 62, 157, 3, -1
ParserActionsLUT_170_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 32, 200, 2, -1
ParserActionsLUT_171_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 45, 3, -1
ParserActionsLUT_175_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 80, 3, -1
ParserActionsLUT_179_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 91 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 5, 23, 2, 12, 24, 2, 16, 31, 2, 17, 64, 2, 18, 82, 3, 24, 22, 2, 31, 20, 2, 33, 17, 2, 36, 16, 2, 37, 15, 2, 38, 7, 2, 39, 4, 2, 42, 60, 2, 43, 62, 2, 44, 63, 2, 45, 59, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 1, 2, 53, 7, 3, 56, 29, 2, 61, 19, 2, 63, 12, 2, 64, 61, 2, 68, 2, 2, -1
ParserActionsLUT_180_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 11, 206, 2, -1
ParserActionsLUT_182_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 11, 208, 2, -1
ParserActionsLUT_184_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 58, 210, 2, -1
ParserActionsLUT_190_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 53, 63, 3, 59, 199, 2, -1
ParserActionsLUT_191_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 46, 198, 2, 66, 197, 2, 67, 196, 2, -1
ParserActionsLUT_192_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 46, 198, 2, 60, 169, 3, 66, 197, 2, 67, 196, 2, 68, 195, 2, 69, 194, 2, 70, 193, 2, -1
ParserActionsLUT_199_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 53, 219, 2, 61, 167, 2, 63, 141, 2, 68, 166, 2, -1
ParserActionsLUT_201_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 20, 79, 3, -1
ParserActionsLUT_202_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 40, 148, 2, 41, 147, 2, -1
ParserActionsLUT_204_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
dw 8, 221, 2, 17, 64, 2, 42, 60, 2, 43, 62, 2, 44, 63, 2, 45, 59, 2, 53, 128, 3, 64, 61, 2, -1
ParserActionsLUT_205_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 130, 3, -1
ParserActionsLUT_207_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 132, 3, -1
ParserActionsLUT_209_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 131, 3, -1
ParserActionsLUT_212_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 14, 123, 3, -1
ParserActionsLUT_213_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 46, 198, 2, 66, 197, 2, 67, 196, 2, 68, 195, 2, 69, 194, 2, -1
ParserActionsLUT_228_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 9, 125, 3, -1
ParserActionsLUT_229_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 134, 3, -1
ParserActionsLUT_230_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 133, 3, -1
ParserGotoLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 6, 2, -1
ParserGotoLUT_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 35, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_3_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 140, 1, 3, -1
ParserGotoLUT_4_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 39, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_7_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 41, 2, 121, 38, 2, 122, 40, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_12_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 112, 55, 2, 113, 54, 2, 116, 14, 2, 118, 36, 2, 120, 53, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_15_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 41, 2, 121, 38, 2, 122, 56, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_16_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 41, 2, 121, 38, 2, 122, 57, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_17_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 58, 2, -1
ParserGotoLUT_19_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 67, 2, 91, 66, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 65, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_20_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 115, 69, 2, -1
ParserGotoLUT_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 85, 75, 2, 89, 25, 2, 90, 74, 2, 91, 73, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 76, 2, -1
ParserGotoLUT_29_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 72, 182, 3, 76, 86, 2, 104, 60, 3, 105, 85, 2, 106, 84, 2, -1
ParserGotoLUT_31_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 84, 120, 3, 85, 87, 2, 89, 25, 2, 90, 74, 2, 91, 73, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_32_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 112, 88, 2, 113, 54, 2, 116, 14, 2, 118, 36, 2, 120, 53, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_42_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 91, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_43_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 92, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_44_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 93, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_45_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 94, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_46_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 95, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_47_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 96, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_48_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 97, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_49_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 80, 101, 2, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 99, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_50_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 79, 139, 3, -1
ParserGotoLUT_51_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 103, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_52_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 113, 104, 2, 116, 14, 2, 118, 36, 2, 120, 53, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_59_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 107, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_60_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 108, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_61_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 109, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_62_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 110, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_63_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 111, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_64_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 112, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_70_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 95, 116, 2, 96, 115, 2, 97, 75, 3, 98, 72, 3, -1
ParserGotoLUT_72_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 88, 121, 2, 89, 25, 2, 90, 120, 2, 91, 66, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 65, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_77_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 124, 2, -1
ParserGotoLUT_78_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 125, 2, -1
ParserGotoLUT_79_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 126, 2, -1
ParserGotoLUT_81_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 89, 106, 3, 90, 129, 2, -1
ParserGotoLUT_82_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 89, 106, 3, 90, 130, 2, -1
ParserGotoLUT_83_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 72, 182, 3, 104, 60, 3, 105, 85, 2, 106, 131, 2, -1
ParserGotoLUT_90_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 135, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_105_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 140, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_106_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 75, 156, 3, 104, 177, 3, 116, 29, 3, 117, 28, 3, -1
ParserGotoLUT_113_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 111, 143, 2, 114, 142, 2, 118, 36, 3, -1
ParserGotoLUT_114_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 144, 2, -1
ParserGotoLUT_115_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 97, 74, 3, 98, 72, 3, -1
ParserGotoLUT_117_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 115, 145, 2, -1
ParserGotoLUT_122_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 149, 2, -1
ParserGotoLUT_123_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 150, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_127_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 112, 156, 2, 113, 54, 2, 116, 14, 2, 118, 36, 2, 120, 53, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_128_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 67, 2, 91, 66, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_132_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 72, 182, 3, 104, 60, 3, 105, 158, 2, -1
ParserGotoLUT_133_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 159, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_134_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 160, 2, -1
ParserGotoLUT_138_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 112, 163, 2, 113, 54, 2, 116, 14, 2, 118, 36, 2, 120, 53, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_139_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 164, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_141_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 168, 2, 103, 169, 2, 104, 172, 3, -1
ParserGotoLUT_143_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 107, 38, 3, 108, 173, 2, 109, 41, 3, 110, 172, 2, -1
ParserGotoLUT_146_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 115, 175, 2, -1
ParserGotoLUT_151_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 179, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_152_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 118, 180, 2, -1
ParserGotoLUT_153_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 181, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_154_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 118, 182, 2, -1
ParserGotoLUT_155_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 183, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_157_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 72, 182, 3, 104, 60, 3, 105, 184, 2, -1
ParserGotoLUT_160_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 83, 124, 3, -1
ParserGotoLUT_161_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 188, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_162_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 189, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_165_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 168, 2, 103, 190, 2, 104, 172, 3, -1
ParserGotoLUT_166_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 191, 2, 104, 172, 3, -1
ParserGotoLUT_167_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 192, 2, 104, 172, 3, -1
ParserGotoLUT_172_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 39, 3, -1
ParserGotoLUT_173_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 109, 40, 3, 110, 172, 2, -1
ParserGotoLUT_174_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 201, 2, -1
ParserGotoLUT_176_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 87, 111, 3, 88, 113, 3, 89, 106, 3, 90, 202, 2, -1
ParserGotoLUT_177_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 86, 114, 3, 88, 116, 3, 89, 106, 3, 90, 203, 2, -1
ParserGotoLUT_178_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 204, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_179_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 205, 2, -1
ParserGotoLUT_181_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 207, 2, -1
ParserGotoLUT_183_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 209, 2, -1
ParserGotoLUT_185_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 211, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_186_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 84, 121, 3, 85, 87, 2, 89, 25, 2, 90, 74, 2, 91, 73, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 18, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_187_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 212, 2, -1
ParserGotoLUT_193_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 213, 2, 104, 172, 3, -1
ParserGotoLUT_194_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 214, 2, 104, 172, 3, -1
ParserGotoLUT_195_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 215, 2, 104, 172, 3, -1
ParserGotoLUT_196_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 216, 2, 104, 172, 3, -1
ParserGotoLUT_197_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 217, 2, 104, 172, 3, -1
ParserGotoLUT_198_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 218, 2, 104, 172, 3, -1
ParserGotoLUT_199_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 220, 2, 104, 172, 3, -1
ParserGotoLUT_200_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 30, 3, -1
ParserGotoLUT_204_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 81, 222, 2, 82, 126, 3, -1
ParserGotoLUT_206_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 223, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_208_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 224, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_210_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 225, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_219_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 226, 2, 104, 172, 3, -1
ParserGotoLUT_221_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 37, 2, 93, 27, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 36, 2, 120, 227, 2, 121, 38, 2, 133, 33, 2, 134, 34, 2, -1
ParserGotoLUT_222_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 228, 2, -1
ParserGotoLUT_223_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 229, 2, -1
ParserGotoLUT_224_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 25, 2, 90, 28, 2, 91, 26, 2, 92, 30, 2, 93, 27, 2, 94, 145, 3, 99, 21, 2, 104, 177, 3, 116, 14, 2, 118, 13, 2, 119, 9, 2, 120, 18, 2, 121, 11, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 8, 2, 134, 10, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 3, 2, 140, 2, 3, 141, 230, 2, -1
LexerIndexLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 225 ; itemsCnt
dw 0, 106, 108, 110, 112, 114, 116, 118, 122, 126, 132, 140, 142, 146, 148, 152, 162, 164, 166, 180, 182, 184, 186, 192, 194, 208, 210, 212, 214, 216, 218, 228, 242, 256, 266, 276, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 596, 606, 612, 622, 638, 650, 656, 666, 684, 698, 710, 718, 726, 736, 758, 774, 780, 804, 812, 822, 836, 840, 850, 874, 882, 892, 906, 920, 930, 952, 966, 976, 990, 1002, 1012, 1026, 1034, 1048, 1058, 1076, 1086, 1098, 1116, 1126, 1140, 1152, 1170, 1184, 1198, 1212, 1226, 1240, 1254, 1268, 1282, 1296, 1310, 1324, 1338, 1352, 1366, 1380, 1394, 1424, 1438, 1452, 1466, 1480, 1494, 1508, 1522, 1536, 1550, 1564, 1582, 1596, 1610, 1624, 1638, 1652, 1662, 1672, 1686, 1700, 1710, 1724, 1736, 1750, 1764, 1778, 1792, 1806, 1820, 1834, 1844, 1854, 1868, 1882, 1896, 1910, 1924, 1938, 1952, 1966, 1980, 1994, 2008, 2022, 2036, 2050, 2064, 2078, 2092, 2106, 2120, 2134, 2148, 2162, 2176, 2190, 2204, 2218, 2232, 2246, 2260, 2274, 2288, 2302, 2316, 2330, 2344, 2358, 2372, 2386, 2400, 2414, 2428, 2438, 2452, 2462, 2474, 2486, 2500, 2514, 2528, 2542, 2556, 2570, 2584, 2598, 2612, 2626, 2640, 2654, 2668, 2682, 2696
LexerAcceptLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 225 ; itemsCnt
db 0, 55, 62, 61, 68, 70, 60, 69, 58, 67, 48, 59, 18, 72, 65, 52, 64, 63, 53, 57, 56, 71, 54, 51, 50, 33, 11, 47, 44, 43, 17, 12, 46, 41, 26, 49, 42, 13, 19, 40, 16, 14, 29, 45, 8, 4, 30, 9, 3, 25, 34, 15, 2, 39, 6, 27, 10, 38, 37, 22, 28, 24, 7, 23, 5, 32, 21, 36, 31, 35, 20, 0, 55, 48, 52, 53, 50, 0, 55, 48, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 52, 53, 52, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 53, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
AST_DataTypeNames_6_bufferBytes StringHead_t 6
 db  "object" , 0
AST_DataTypeForMIR_2_bufferBytes StringHead_t 7
 db  "float32" , 0
REG_PARAMS32_0_bufferBytes StringHead_t 3
 db  "ecx" , 0
REG_PARAMS32_1_bufferBytes StringHead_t 3
 db  "edx" , 0
REG_PARAMS32_2_bufferBytes StringHead_t 3
 db  "r8d" , 0
REG_PARAMS32_3_bufferBytes StringHead_t 3
 db  "r9d" , 0
__const4137_0_bufferBytes StringHead_t 11
 db  "__mold_this" , 0
__const4639_0_bufferBytes StringHead_t 12
 db  "jmp_by_table" , 0
__const5919_0_bufferBytes StringHead_t 9
 db  "jmp_if_ne" , 0
__const5919_1_bufferBytes StringHead_t 9
 db  "jmp_if_eq" , 0
__const5919_3_bufferBytes StringHead_t 9
 db  "jmp_if_gt" , 0
__const5919_4_bufferBytes StringHead_t 9
 db  "jmp_if_le" , 0
__const5919_5_bufferBytes StringHead_t 9
 db  "jmp_if_lt" , 0
__const5919_6_bufferBytes StringHead_t 17
 db  "jmp_if_not_typeof" , 0
__const5919_7_bufferBytes StringHead_t 13
 db  "jmp_if_typeof" , 0
__const6359_1_bufferBytes StringHead_t 5
 db  "local" , 0
__const6359_3_bufferBytes StringHead_t 5
 db  "param" , 0
__const6359_5_bufferBytes StringHead_t 5
 db  "const" , 0
__const6359_7_bufferBytes StringHead_t 8
 db  "function" , 0
__const6359_8_bufferBytes StringHead_t 5
 db  "class" , 0
__const6359_9_bufferBytes StringHead_t 6
 db  "method" , 0
__const6362_0_bufferBytes StringHead_t 15
 db  "FileOpenForRead" , 0
__const6362_1_bufferBytes StringHead_t 16
 db  "FileOpenForWrite" , 0
__const6362_2_bufferBytes StringHead_t 17
 db  "FileOpenForCreate" , 0
__const6362_3_bufferBytes StringHead_t 9
 db  "FileClose" , 0
__const6362_4_bufferBytes StringHead_t 12
 db  "FileReadInt8" , 0
__const6362_5_bufferBytes StringHead_t 13
 db  "FileReadInt16" , 0
__const6362_6_bufferBytes StringHead_t 13
 db  "FileReadInt32" , 0
__const6362_7_bufferBytes StringHead_t 13
 db  "FileReadInt64" , 0
__const6362_8_bufferBytes StringHead_t 15
 db  "FileReadFloat32" , 0
__const6362_9_bufferBytes StringHead_t 15
 db  "FileReadFloat64" , 0
__const6362_10_bufferBytes StringHead_t 13
 db  "FileReadBool8" , 0
__const6362_11_bufferBytes StringHead_t 14
 db  "FileReadBool16" , 0
__const6362_12_bufferBytes StringHead_t 14
 db  "FileReadBool32" , 0
__const6362_13_bufferBytes StringHead_t 14
 db  "FileReadBool64" , 0
__const6362_14_bufferBytes StringHead_t 12
 db  "FileReadChar" , 0
__const6362_15_bufferBytes StringHead_t 13
 db  "FileWriteInt8" , 0
__const6362_16_bufferBytes StringHead_t 13
 db  "FileWriteChar" , 0
__const6362_17_bufferBytes StringHead_t 14
 db  "FileWriteInt16" , 0
__const6362_18_bufferBytes StringHead_t 14
 db  "FileWriteInt32" , 0
__const6362_19_bufferBytes StringHead_t 14
 db  "FileWriteInt64" , 0
__const6362_20_bufferBytes StringHead_t 16
 db  "FileWriteFloat64" , 0
__const6362_21_bufferBytes StringHead_t 8
 db  "FileLoad" , 0
__const6362_22_bufferBytes StringHead_t 3
 db  "ord" , 0
__const6362_23_bufferBytes StringHead_t 3
 db  "asc" , 0
__const6362_24_bufferBytes StringHead_t 12
 db  "ParseInteger" , 0
__const6362_25_bufferBytes StringHead_t 10
 db  "ParseFloat" , 0
__const6362_26_bufferBytes StringHead_t 6
 db  "bitand" , 0
__const6362_27_bufferBytes StringHead_t 5
 db  "bitor" , 0
__const6362_28_bufferBytes StringHead_t 6
 db  "bitxor" , 0
__const6362_29_bufferBytes StringHead_t 6
 db  "bitnot" , 0
__const6362_30_bufferBytes StringHead_t 4
 db  "exit" , 0
__const6362_31_bufferBytes StringHead_t 3
 db  "die" , 0
__const6362_32_bufferBytes StringHead_t 3
 db  "str" , 0
__const6362_33_bufferBytes StringHead_t 3
 db  "len" , 0
__const6362_35_bufferBytes StringHead_t 23
 db  "__mold_printToStdOutput" , 0
__const6362_36_bufferBytes StringHead_t 14
 db  "__mold_warning" , 0
__const6362_38_bufferBytes StringHead_t 29
 db  "__mold_arrayInsertBeforeFirst" , 0
__const6366_5_bufferBytes StringHead_t 6
 db  "bool64" , 0
__const6367_2_bufferBytes StringHead_t 13
 db  "VARIANT_FLOAT" , 0
__const6367_3_bufferBytes StringHead_t 14
 db  "VARIANT_DOUBLE" , 0
__const6367_4_bufferBytes StringHead_t 15
 db  "VARIANT_BOOLEAN" , 0
__const6367_6_bufferBytes StringHead_t 14
 db  "VARIANT_STRING" , 0
__const6367_7_bufferBytes StringHead_t 13
 db  "VARIANT_ARRAY" , 0
__const6367_8_bufferBytes StringHead_t 11
 db  "VARIANT_MAP" , 0
; iter 5
; iter 6
; iter 7
; iter 8
; iter 9
; iter 10
; iter 11
; iter 12
; iter 13
; iter 14
; iter 15

; Jump tables
; -----------
__jmptable1399:
  dw  l1400 - l1398 ; 5
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw 0 ; 8 otherwise
  dw 0 ; 9 otherwise
  dw 0 ; 10 otherwise
  dw 0 ; 11 otherwise
  dw 0 ; 12 otherwise
  dw 0 ; 13 otherwise
  dw 0 ; 14 otherwise
  dw 0 ; 15 otherwise
  dw 0 ; 16 otherwise
  dw 0 ; 17 otherwise
  dw 0 ; 18 otherwise
  dw 0 ; 19 otherwise
  dw 0 ; 20 otherwise
  dw 0 ; 21 otherwise
  dw  l1401 - l1398 ; 22
  dw  l1402 - l1398 ; 23
  dw  l1403 - l1398 ; 24
  dw  l1404 - l1398 ; 25
  dw  l1405 - l1398 ; 26
  dw 0 ; 27 otherwise
  dw 0 ; 28 otherwise
  dw  l1406 - l1398 ; 29
  dw 0 ; 30 otherwise
  dw 0 ; 31 otherwise
  dw 0 ; 32 otherwise
  dw 0 ; 33 otherwise
  dw 0 ; 34 otherwise
  dw  l1411 - l1398 ; 35
  dw 0 ; 36 otherwise
  dw 0 ; 37 otherwise
  dw 0 ; 38 otherwise
  dw 0 ; 39 otherwise
  dw 0 ; 40 otherwise
  dw 0 ; 41 otherwise
  dw 0 ; 42 otherwise
  dw 0 ; 43 otherwise
  dw 0 ; 44 otherwise
  dw 0 ; 45 otherwise
  dw 0 ; 46 otherwise
  dw 0 ; 47 otherwise
  dw 0 ; 48 otherwise
  dw 0 ; 49 otherwise
  dw 0 ; 50 otherwise
  dw 0 ; 51 otherwise
  dw 0 ; 52 otherwise
  dw 0 ; 53 otherwise
  dw 0 ; 54 otherwise
  dw 0 ; 55 otherwise
  dw 0 ; 56 otherwise
  dw 0 ; 57 otherwise
  dw 0 ; 58 otherwise
  dw 0 ; 59 otherwise
  dw 0 ; 60 otherwise
  dw  l1412 - l1398 ; 61
  dw  l1412 - l1398 ; 62
  dw 0 ; 63 otherwise
  dw  l1413 - l1398 ; 64
  dw  l1414 - l1398 ; 65
  dw 0 ; 66 otherwise
  dw  l1415 - l1398 ; 67
  dw  l1416 - l1398 ; 68
  dw  l1417 - l1398 ; 69
  dw  l1418 - l1398 ; 70
  dw 0 ; 71 otherwise
  dw 0 ; 72 otherwise
  dw 0 ; 73 otherwise
  dw 0 ; 74 otherwise
  dw 0 ; 75 otherwise
  dw 0 ; 76 otherwise
  dw 0 ; 77 otherwise
  dw  l1411 - l1398 ; 78
  dw  l1411 - l1398 ; 79
  dw  l1419 - l1398 ; 80
  dw  l1411 - l1398 ; 81
  dw  l1420 - l1398 ; 82
  dw 0 ; 83 otherwise
  dw 0 ; 84 otherwise
  dw 0 ; 85 otherwise
  dw 0 ; 86 otherwise
  dw 0 ; 87 otherwise
  dw 0 ; 88 otherwise
  dw 0 ; 89 otherwise
  dw 0 ; 90 otherwise
  dw 0 ; 91 otherwise
  dw 0 ; 92 otherwise
  dw 0 ; 93 otherwise
  dw 0 ; 94 otherwise
  dw 0 ; 95 otherwise
  dw 0 ; 96 otherwise
  dw 0 ; 97 otherwise
  dw 0 ; 98 otherwise
  dw 0 ; 99 otherwise
  dw 0 ; 100 otherwise
  dw 0 ; 101 otherwise
  dw 0 ; 102 otherwise
  dw 0 ; 103 otherwise
  dw 0 ; 104 otherwise
  dw 0 ; 105 otherwise
  dw 0 ; 106 otherwise
  dw  l1419 - l1398 ; 107
  dw  l1419 - l1398 ; 108
  dw 0 ; 109 otherwise
  dw 0 ; 110 otherwise
  dw 0 ; 111 otherwise
  dw 0 ; 112 otherwise
  dw 0 ; 113 otherwise
  dw 0 ; 114 otherwise
  dw 0 ; 115 otherwise
  dw 0 ; 116 otherwise
  dw 0 ; 117 otherwise
  dw 0 ; 118 otherwise
  dw  l1419 - l1398 ; 119
  dw 0 ; 120 otherwise
  dw 0 ; 121 otherwise
  dw 0 ; 122 otherwise
  dw 0 ; 123 otherwise
  dw 0 ; 124 otherwise
  dw 0 ; 125 otherwise
  dw 0 ; 126 otherwise
  dw 0 ; 127 otherwise
  dw  l1421 - l1398 ; 128
  dw 0 ; 129 otherwise
  dw 0 ; 130 otherwise
  dw 0 ; 131 otherwise
  dw 0 ; 132 otherwise
  dw 0 ; 133 otherwise
  dw 0 ; 134 otherwise
  dw 0 ; 135 otherwise
  dw 0 ; 136 otherwise
  dw 0 ; 137 otherwise
  dw 0 ; 138 otherwise
  dw 0 ; 139 otherwise
  dw 0 ; 140 otherwise
  dw 0 ; 141 otherwise
  dw 0 ; 142 otherwise
  dw 0 ; 143 otherwise
  dw 0 ; 144 otherwise
  dw 0 ; 145 otherwise
  dw 0 ; 146 otherwise
  dw 0 ; 147 otherwise
  dw 0 ; 148 otherwise
  dw 0 ; 149 otherwise
  dw 0 ; 150 otherwise
  dw 0 ; 151 otherwise
  dw 0 ; 152 otherwise
  dw 0 ; 153 otherwise
  dw 0 ; 154 otherwise
  dw 0 ; 155 otherwise
  dw 0 ; 156 otherwise
  dw  l1419 - l1398 ; 157
  dw  l1422 - l1398 ; 158
  dw 0 ; 159 otherwise
  dw 0 ; 160 otherwise
  dw 0 ; 161 otherwise
  dw  l1423 - l1398 ; 162
  dw  l1424 - l1398 ; 163
  dw  l1425 - l1398 ; 164
  dw  l1426 - l1398 ; 165
  dw  l1427 - l1398 ; 166
  dw  l1428 - l1398 ; 167
  dw  l1429 - l1398 ; 168
  dw  l1419 - l1398 ; 169
  dw 0 ; 170 otherwise
  dw 0 ; 171 otherwise
  dw 0 ; 172 otherwise
  dw 0 ; 173 otherwise
  dw  l1430 - l1398 ; 174
  dw 0 ; 175 otherwise
  dw 0 ; 176 otherwise
  dw 0 ; 177 otherwise
  dw  l1400 - l1398 ; 178
  dw  l1433 - l1398 ; 179
  dw  l1434 - l1398 ; 180
  dw  l1435 - l1398 ; 181
  dw 0 ; 182 otherwise
  dw  l1437 - l1398 ; 183
  dw  l1438 - l1398 ; 184
  dw  l1439 - l1398 ; 185
  dw 0 ; explicit default case

__jmptable1496:
  dw  l1508 - l1495 ; 1
  dw  l1510 - l1495 ; 2
  dw  l1511 - l1495 ; 3
  dw  l1509 - l1495 ; 4
  dw  l1512 - l1495 ; 5
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw  l1515 - l1495 ; 8
  dw  l1513 - l1495 ; 9
  dw  l1514 - l1495 ; 10
  dw 0 ; 11 otherwise
  dw 0 ; 12 otherwise
  dw 0 ; 13 otherwise
  dw 0 ; 14 otherwise
  dw 0 ; 15 otherwise
  dw 0 ; 16 otherwise
  dw 0 ; 17 otherwise
  dw 0 ; 18 otherwise
  dw 0 ; 19 otherwise
  dw 0 ; 20 otherwise
  dw 0 ; 21 otherwise
  dw 0 ; 22 otherwise
  dw 0 ; 23 otherwise
  dw 0 ; 24 otherwise
  dw 0 ; 25 otherwise
  dw 0 ; 26 otherwise
  dw 0 ; 27 otherwise
  dw 0 ; 28 otherwise
  dw 0 ; 29 otherwise
  dw  l1497 - l1495 ; 30
  dw  l1498 - l1495 ; 31
  dw  l1499 - l1495 ; 32
  dw  l1500 - l1495 ; 33
  dw  l1501 - l1495 ; 34
  dw 0 ; 35 otherwise
  dw  l1536 - l1495 ; 36
  dw  l1535 - l1495 ; 37
  dw 0 ; 38 otherwise
  dw 0 ; 39 otherwise
  dw  l1502 - l1495 ; 40
  dw 0 ; 41 otherwise
  dw  l1505 - l1495 ; 42
  dw  l1504 - l1495 ; 43
  dw  l1503 - l1495 ; 44
  dw 0 ; 45 otherwise
  dw 0 ; 46 otherwise
  dw 0 ; 47 otherwise
  dw 0 ; 48 otherwise
  dw 0 ; 49 otherwise
  dw 0 ; 50 otherwise
  dw 0 ; 51 otherwise
  dw  l1532 - l1495 ; 52
  dw 0 ; 53 otherwise
  dw  l1506 - l1495 ; 54
  dw  l1507 - l1495 ; 55
  dw  l1531 - l1495 ; 56
  dw  l1518 - l1495 ; 57
  dw  l1519 - l1495 ; 58
  dw  l1521 - l1495 ; 59
  dw  l1522 - l1495 ; 60
  dw  l1523 - l1495 ; 61
  dw 0 ; 62 otherwise
  dw 0 ; 63 otherwise
  dw  l1524 - l1495 ; 64
  dw  l1520 - l1495 ; 65
  dw  l1525 - l1495 ; 66
  dw  l1526 - l1495 ; 67
  dw  l1529 - l1495 ; 68
  dw  l1530 - l1495 ; 69
  dw  l1527 - l1495 ; 70
  dw  l1528 - l1495 ; 71
  dw  l1516 - l1495 ; 72
  dw  l1517 - l1495 ; 73
  dw 0 ; 74 otherwise
  dw 0 ; 75 otherwise
  dw 0 ; 76 otherwise
  dw  l1534 - l1495 ; 77
  dw  l1533 - l1495 ; 78
  dw 0 ; explicit default case

__jmptable1542:
  dw  l1584 - l1541 ; 0
  dw  l1546 - l1541 ; 1
  dw  l1548 - l1541 ; 2
  dw  l1548 - l1541 ; 3
  dw  l1547 - l1541 ; 4
  dw  l1549 - l1541 ; 5
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw  l1545 - l1541 ; 8
  dw  l1550 - l1541 ; 9
  dw  l1551 - l1541 ; 10
  dw 0 ; 11 otherwise
  dw 0 ; 12 otherwise
  dw 0 ; 13 otherwise
  dw 0 ; 14 otherwise
  dw 0 ; 15 otherwise
  dw 0 ; 16 otherwise
  dw 0 ; 17 otherwise
  dw 0 ; 18 otherwise
  dw 0 ; 19 otherwise
  dw 0 ; 20 otherwise
  dw 0 ; 21 otherwise
  dw 0 ; 22 otherwise
  dw 0 ; 23 otherwise
  dw 0 ; 24 otherwise
  dw 0 ; 25 otherwise
  dw 0 ; 26 otherwise
  dw 0 ; 27 otherwise
  dw 0 ; 28 otherwise
  dw 0 ; 29 otherwise
  dw 0 ; 30 otherwise
  dw  l1572 - l1541 ; 31
  dw 0 ; 32 otherwise
  dw 0 ; 33 otherwise
  dw 0 ; 34 otherwise
  dw 0 ; 35 otherwise
  dw  l1571 - l1541 ; 36
  dw  l1570 - l1541 ; 37
  dw 0 ; 38 otherwise
  dw 0 ; 39 otherwise
  dw  l1576 - l1541 ; 40
  dw 0 ; 41 otherwise
  dw  l1569 - l1541 ; 42
  dw  l1575 - l1541 ; 43
  dw  l1574 - l1541 ; 44
  dw  l1577 - l1541 ; 45
  dw  l1578 - l1541 ; 46
  dw  l1581 - l1541 ; 47
  dw  l1579 - l1541 ; 48
  dw  l1580 - l1541 ; 49
  dw 0 ; 50 otherwise
  dw 0 ; 51 otherwise
  dw  l1568 - l1541 ; 52
  dw 0 ; 53 otherwise
  dw  l1543 - l1541 ; 54
  dw  l1544 - l1541 ; 55
  dw  l1573 - l1541 ; 56
  dw  l1554 - l1541 ; 57
  dw  l1555 - l1541 ; 58
  dw  l1554 - l1541 ; 59
  dw  l1557 - l1541 ; 60
  dw  l1558 - l1541 ; 61
  dw 0 ; 62 otherwise
  dw 0 ; 63 otherwise
  dw  l1559 - l1541 ; 64
  dw  l1556 - l1541 ; 65
  dw  l1560 - l1541 ; 66
  dw  l1561 - l1541 ; 67
  dw  l1564 - l1541 ; 68
  dw  l1565 - l1541 ; 69
  dw  l1562 - l1541 ; 70
  dw  l1563 - l1541 ; 71
  dw  l1552 - l1541 ; 72
  dw  l1553 - l1541 ; 73
  dw 0 ; 74 otherwise
  dw  l1566 - l1541 ; 75
  dw  l1567 - l1541 ; 76
  dw  l1582 - l1541 ; 77
  dw  l1583 - l1541 ; 78
  dw 0 ; explicit default case

__jmptable1795:
  dw  l1817 - l1794 ; 8
  dw 0 ; 9 otherwise
  dw 0 ; 10 otherwise
  dw 0 ; 11 otherwise
  dw 0 ; 12 otherwise
  dw 0 ; 13 otherwise
  dw 0 ; 14 otherwise
  dw 0 ; 15 otherwise
  dw 0 ; 16 otherwise
  dw 0 ; 17 otherwise
  dw 0 ; 18 otherwise
  dw 0 ; 19 otherwise
  dw 0 ; 20 otherwise
  dw 0 ; 21 otherwise
  dw 0 ; 22 otherwise
  dw 0 ; 23 otherwise
  dw 0 ; 24 otherwise
  dw 0 ; 25 otherwise
  dw 0 ; 26 otherwise
  dw 0 ; 27 otherwise
  dw 0 ; 28 otherwise
  dw 0 ; 29 otherwise
  dw 0 ; 30 otherwise
  dw 0 ; 31 otherwise
  dw 0 ; 32 otherwise
  dw 0 ; 33 otherwise
  dw 0 ; 34 otherwise
  dw 0 ; 35 otherwise
  dw 0 ; 36 otherwise
  dw  l1816 - l1794 ; 37
  dw 0 ; 38 otherwise
  dw 0 ; 39 otherwise
  dw 0 ; 40 otherwise
  dw 0 ; 41 otherwise
  dw  l1809 - l1794 ; 42
  dw 0 ; 43 otherwise
  dw 0 ; 44 otherwise
  dw 0 ; 45 otherwise
  dw 0 ; 46 otherwise
  dw 0 ; 47 otherwise
  dw 0 ; 48 otherwise
  dw 0 ; 49 otherwise
  dw 0 ; 50 otherwise
  dw 0 ; 51 otherwise
  dw  l1796 - l1794 ; 52
  dw 0 ; 53 otherwise
  dw  l1801 - l1794 ; 54
  dw 0 ; 55 otherwise
  dw 0 ; 56 otherwise
  dw 0 ; 57 otherwise
  dw 0 ; 58 otherwise
  dw 0 ; 59 otherwise
  dw 0 ; 60 otherwise
  dw 0 ; 61 otherwise
  dw 0 ; 62 otherwise
  dw 0 ; 63 otherwise
  dw 0 ; 64 otherwise
  dw 0 ; 65 otherwise
  dw 0 ; 66 otherwise
  dw 0 ; 67 otherwise
  dw 0 ; 68 otherwise
  dw 0 ; 69 otherwise
  dw 0 ; 70 otherwise
  dw 0 ; 71 otherwise
  dw 0 ; 72 otherwise
  dw 0 ; 73 otherwise
  dw 0 ; 74 otherwise
  dw 0 ; 75 otherwise
  dw 0 ; 76 otherwise
  dw  l1800 - l1794 ; 77
  dw 0 ; explicit default case

__jmptable2305:
  dw  l2309 - l2304 ; 4
  dw 0 ; 5 otherwise
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw 0 ; 8 otherwise
  dw 0 ; 9 otherwise
  dw 0 ; 10 otherwise
  dw 0 ; 11 otherwise
  dw 0 ; 12 otherwise
  dw 0 ; 13 otherwise
  dw 0 ; 14 otherwise
  dw 0 ; 15 otherwise
  dw 0 ; 16 otherwise
  dw 0 ; 17 otherwise
  dw 0 ; 18 otherwise
  dw 0 ; 19 otherwise
  dw 0 ; 20 otherwise
  dw 0 ; 21 otherwise
  dw 0 ; 22 otherwise
  dw 0 ; 23 otherwise
  dw 0 ; 24 otherwise
  dw 0 ; 25 otherwise
  dw 0 ; 26 otherwise
  dw 0 ; 27 otherwise
  dw 0 ; 28 otherwise
  dw 0 ; 29 otherwise
  dw  l2306 - l2304 ; 30
  dw 0 ; 31 otherwise
  dw 0 ; 32 otherwise
  dw  l2313 - l2304 ; 33
  dw 0 ; explicit default case

__jmptable2360:
  dw  l2361 - l2359 ; 31
  dw 0 ; 32 otherwise
  dw 0 ; 33 otherwise
  dw 0 ; 34 otherwise
  dw 0 ; 35 otherwise
  dw 0 ; 36 otherwise
  dw 0 ; 37 otherwise
  dw 0 ; 38 otherwise
  dw 0 ; 39 otherwise
  dw  l2408 - l2359 ; 40
  dw 0 ; 41 otherwise
  dw 0 ; 42 otherwise
  dw 0 ; 43 otherwise
  dw  l2439 - l2359 ; 44
  dw 0 ; 45 otherwise
  dw 0 ; 46 otherwise
  dw 0 ; 47 otherwise
  dw 0 ; 48 otherwise
  dw 0 ; 49 otherwise
  dw 0 ; 50 otherwise
  dw 0 ; 51 otherwise
  dw  l2368 - l2359 ; 52
  dw 0 ; 53 otherwise
  dw  l2375 - l2359 ; 54
  dw  l2383 - l2359 ; 55
  dw  l2388 - l2359 ; 56
  dw 0 ; explicit default case

__jmptable3197:
  dw  l3235 - l3196 ; 32
  dw 0 ; 33 otherwise
  dw 0 ; 34 otherwise
  dw 0 ; 35 otherwise
  dw 0 ; 36 otherwise
  dw 0 ; 37 otherwise
  dw 0 ; 38 otherwise
  dw 0 ; 39 otherwise
  dw  l3204 - l3196 ; 40
  dw 0 ; 41 otherwise
  dw 0 ; 42 otherwise
  dw  l3198 - l3196 ; 43
  dw 0 ; 44 otherwise
  dw 0 ; 45 otherwise
  dw 0 ; 46 otherwise
  dw 0 ; 47 otherwise
  dw 0 ; 48 otherwise
  dw 0 ; 49 otherwise
  dw 0 ; 50 otherwise
  dw 0 ; 51 otherwise
  dw 0 ; 52 otherwise
  dw 0 ; 53 otherwise
  dw 0 ; 54 otherwise
  dw 0 ; 55 otherwise
  dw  l3225 - l3196 ; 56
  dw 0 ; explicit default case

__jmptable4988:
  dw  l4989 - l4987 ; 4
  dw 0 ; 5 otherwise
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw  l4991 - l4987 ; 8
  dw 0 ; 9 otherwise
  dw 0 ; 10 otherwise
  dw 0 ; 11 otherwise
  dw 0 ; 12 otherwise
  dw 0 ; 13 otherwise
  dw 0 ; 14 otherwise
  dw 0 ; 15 otherwise
  dw  l4992 - l4987 ; 16
  dw 0 ; explicit default case

__jmptable4995:
  dw  l4996 - l4994 ; 4
  dw 0 ; 5 otherwise
  dw 0 ; 6 otherwise
  dw 0 ; 7 otherwise
  dw  l4997 - l4994 ; 8
  dw 0 ; 9 otherwise
  dw 0 ; 10 otherwise
  dw 0 ; 11 otherwise
  dw 0 ; 12 otherwise
  dw 0 ; 13 otherwise
  dw 0 ; 14 otherwise
  dw 0 ; 15 otherwise
  dw  l4998 - l4994 ; 16
  dw 0 ; explicit default case

__jmptable5691:
  dw  l5692 - l5690 ; 0
  dw  l5693 - l5690 ; 1
  dw  l5694 - l5690 ; 2
  dw 0 ; explicit default case


; vtables
; -------
vtable_AST:
.offset dd 8 * 169
.length dd 8 * 0
.entries:
  dq __AST_printTree$0_vcall ; printTree ( 169 )

vtable_Parser:
.offset dd 8 * 6
.length dd 8 * 0
.entries:
  dq __Parser_parseFile$1_vcall ; parseFile ( 6 )

vtable_SymbolTable:
.offset dd 8 * 2
.length dd 8 * 163
.entries:
  dq __SymbolTable_insert$2_vcall ; insert ( 2 )
  dq __SymbolTable__lookupInternal$1_vcall ; _lookupInternal ( 3 )
  dq __SymbolTable_lookup$1_vcall ; lookup ( 4 )
  dq __MOLD_NullMethodCalled ; logDebug ( 5 )
  dq __MOLD_NullMethodCalled ; parseFile ( 6 )
  dq __MOLD_NullMethodCalled ; setLogContext ( 7 )
  dq __SymbolTable_insertLiteral$1_vcall ; insertLiteral ( 8 )
  dq __SymbolTable_lookupClass$1_vcall ; lookupClass ( 9 )
  dq __SymbolTable_insertClass$2_vcall ; insertClass ( 10 )
  dq __SymbolTable_insertFunction$2_vcall ; insertFunction ( 11 )
  dq __SymbolTable_enterScopeForProcedure$1_vcall ; enterScopeForProcedure ( 12 )
  dq __SymbolTable_insertParam$2_vcall ; insertParam ( 13 )
  dq __SymbolTable_assignType$2_vcall ; assignType ( 14 )
  dq __SymbolTable_lookupForWrite$1_vcall ; lookupForWrite ( 15 )
  dq __SymbolTable_isset$1_vcall ; isset ( 16 )
  dq __SymbolTable_enterScope$0_vcall ; enterScope ( 17 )
  dq __SymbolTable_importExternalVariable$1_vcall ; importExternalVariable ( 18 )
  dq __SymbolTable_leaveScope$0_vcall ; leaveScope ( 19 )
  dq __SymbolTable_lookupForRead$1_vcall ; lookupForRead ( 20 )
  dq __SymbolTable_useAsTypeofArg$1_vcall ; useAsTypeofArg ( 21 )
  dq __SymbolTable_useAsArray$1_vcall ; useAsArray ( 22 )
  dq __SymbolTable_useAsArrayOrString$1_vcall ; useAsArrayOrString ( 23 )
  dq __SymbolTable_useAsIndex$1_vcall ; useAsIndex ( 24 )
  dq __SymbolTable_useAsMapOrObject$1_vcall ; useAsMapOrObject ( 25 )
  dq __SymbolTable_useAsKey$1_vcall ; useAsKey ( 26 )
  dq __SymbolTable_insertConst$2_vcall ; insertConst ( 27 )
  dq __SymbolTable_lookupForWriteOrInsert$1_vcall ; lookupForWriteOrInsert ( 28 )
  dq __SymbolTable_assignNode$2_vcall ; assignNode ( 29 )
  dq __SymbolTable_assignValue$2_vcall ; assignValue ( 30 )
  dq __SymbolTable_exportSymbols$0_vcall ; exportSymbols ( 31 )
  dq __SymbolTable_remove$1_vcall ; remove ( 32 )
  dq __SymbolTable_enterScopeForLoop$0_vcall ; enterScopeForLoop ( 33 )
  dq __SymbolTable_insertLocal$1_vcall ; insertLocal ( 34 )
  dq __SymbolTable_lookupForReadAndWrite$1_vcall ; lookupForReadAndWrite ( 35 )
  dq __SymbolTable_assignTypeAndFreeze$2_vcall ; assignTypeAndFreeze ( 36 )
  dq __SymbolTable_lookupForCall$3_vcall ; lookupForCall ( 37 )
  dq __SymbolTable_getCurrentFunctionName$0_vcall ; getCurrentFunctionName ( 38 )
  dq __SymbolTable_importGlobal$1_vcall ; importGlobal ( 39 )
  dq __SymbolTable_useAsInteger$1_vcall ; useAsInteger ( 40 )
  dq __SymbolTable_useAsFloat$1_vcall ; useAsFloat ( 41 )
  dq __SymbolTable_useAsNumber$1_vcall ; useAsNumber ( 42 )
  dq __SymbolTable_decreaseWriteHits$1_vcall ; decreaseWriteHits ( 43 )
  dq __SymbolTable_removeUnusedSymbols$0_vcall ; removeUnusedSymbols ( 44 )
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector ( 45 )
  dq __SymbolTable_getTempVarForReadAndWrite$1_vcall ; getTempVarForReadAndWrite ( 46 )
  dq __SymbolTable_releaseTempVar$1_vcall ; releaseTempVar ( 47 )
  dq __MOLD_NullMethodCalled ; _declareFunction ( 48 )
  dq __MOLD_NullMethodCalled ; _emitFunctionBody ( 49 )
  dq __MOLD_NullMethodCalled ; _declareClass ( 50 )
  dq __MOLD_NullMethodCalled ; _call ( 51 )
  dq __MOLD_NullMethodCalled ; _assign ( 52 )
  dq __SymbolTable_lookupLiteralForRead$1_vcall ; lookupLiteralForRead ( 53 )
  dq __MOLD_NullMethodCalled ; _loadImm ( 54 )
  dq __MOLD_NullMethodCalled ; _loadArgsVector ( 55 )
  dq __MOLD_NullMethodCalled ; _loadArgsCount ( 56 )
  dq __MOLD_NullMethodCalled ; _loadVariable ( 57 )
  dq __MOLD_NullMethodCalled ; _convert ( 58 )
  dq __MOLD_NullMethodCalled ; _loadNull ( 59 )
  dq __MOLD_NullMethodCalled ; _loadArray ( 60 )
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant ( 61 )
  dq __MOLD_NullMethodCalled ; _storeAtIndex ( 62 )
  dq __MOLD_NullMethodCalled ; _loadMap ( 63 )
  dq __MOLD_NullMethodCalled ; _storeAtKey ( 64 )
  dq __MOLD_NullMethodCalled ; _neg ( 65 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd ( 66 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr ( 67 )
  dq __MOLD_NullMethodCalled ; _isTypeOf ( 68 )
  dq __MOLD_NullMethodCalled ; _isNotTypeOf ( 69 )
  dq __MOLD_NullMethodCalled ; _createObject ( 70 )
  dq __MOLD_NullMethodCalled ; _loadFromIndex ( 71 )
  dq __MOLD_NullMethodCalled ; _loadFromKey ( 72 )
  dq __MOLD_NullMethodCalled ; _compareEQ ( 73 )
  dq __MOLD_NullMethodCalled ; _compareNEQ ( 74 )
  dq __MOLD_NullMethodCalled ; _compareGT ( 75 )
  dq __MOLD_NullMethodCalled ; _compareGE ( 76 )
  dq __MOLD_NullMethodCalled ; _compareLT ( 77 )
  dq __MOLD_NullMethodCalled ; _compareLE ( 78 )
  dq __MOLD_NullMethodCalled ; _add ( 79 )
  dq __MOLD_NullMethodCalled ; _sub ( 80 )
  dq __MOLD_NullMethodCalled ; _mul ( 81 )
  dq __MOLD_NullMethodCalled ; _div ( 82 )
  dq __MOLD_NullMethodCalled ; _idiv ( 83 )
  dq __MOLD_NullMethodCalled ; _stringJoin ( 84 )
  dq __MOLD_NullMethodCalled ; _syscall ( 85 )
  dq __SymbolTable_lookupFunction$3_vcall ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __SymbolTable_assignMirType$2_vcall ; assignMirType ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 94 )
  dq __MOLD_NullMethodCalled ; _executeNodePrint ( 95 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 96 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 97 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 98 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 99 )
  dq __MOLD_NullMethodCalled ; neg ( 100 )
  dq __MOLD_NullMethodCalled ; add ( 101 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 102 )
  dq __MOLD_NullMethodCalled ; sub ( 103 )
  dq __MOLD_NullMethodCalled ; mul ( 104 )
  dq __MOLD_NullMethodCalled ; div ( 105 )
  dq __MOLD_NullMethodCalled ; idiv ( 106 )
  dq __MOLD_NullMethodCalled ; loadArray ( 107 )
  dq __MOLD_NullMethodCalled ; loadMap ( 108 )
  dq __MOLD_NullMethodCalled ; loadNull ( 109 )
  dq __MOLD_NullMethodCalled ; loadImm ( 110 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 111 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 112 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 114 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 115 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 116 )
  dq __MOLD_NullMethodCalled ; syscall ( 117 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 118 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 119 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 120 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 121 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 122 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 123 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 124 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 125 )
  dq __MOLD_NullMethodCalled ; drop ( 126 )
  dq __MOLD_NullMethodCalled ; call ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 128 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 130 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 131 )
  dq __MOLD_NullMethodCalled ; createObject ( 132 )
  dq __SymbolTable_createLabel$0_vcall ; createLabel ( 133 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 134 )
  dq __MOLD_NullMethodCalled ; moveBack ( 135 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 136 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 137 )
  dq __MOLD_NullMethodCalled ; vcall ( 138 )
  dq __MOLD_NullMethodCalled ; dup ( 139 )
  dq __MOLD_NullMethodCalled ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __SymbolTable_createConstFromValue$1_vcall ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __SymbolTable_insertJmpTable$1_vcall ; insertJmpTable ( 165 )

vtable_ASTModuleResolver:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTModuleResolver_resolveImports$1_vcall ; resolveImports ( 170 )

vtable_ASTSymbolsCollector:
.offset dd 8 * 173
.length dd 8 * 0
.entries:
  dq __ASTSymbolsCollector_buildSymbolTable$1_vcall ; buildSymbolTable ( 173 )

vtable_ASTEvaluator:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTEvaluator_processNode$1_vcall ; processNode ( 172 )

vtable_ASTPreprocessor:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTPreprocessor_processNode$1_vcall ; processNode ( 172 )

vtable_ASTOptimizerConstantFolding:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTOptimizerConstantFolding_processNode$1_vcall ; processNode ( 172 )

vtable_ASTOptimizerCSE:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTOptimizerCSE_processNode$1_vcall ; processNode ( 172 )

vtable_ASTOptimizerDeadCodeRemove:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTOptimizerDeadCodeRemove_processNode$1_vcall ; processNode ( 172 )

vtable_ASTOptimizerVCall:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTOptimizerVCall_processNode$1_vcall ; processNode ( 172 )

vtable_ASTOptimizerIf:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTOptimizerIf_processNode$1_vcall ; processNode ( 172 )

vtable_ASTOptimizerInline:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTOptimizerInline_processNode$1_vcall ; processNode ( 172 )

vtable_ASTTypeCast:
.offset dd 8 * 172
.length dd 8 * 0
.entries:
  dq __ASTTypeCast_processNode$1_vcall ; processNode ( 172 )

vtable_MIRCode:
.offset dd 8 * 98
.length dd 8 * 66
.entries:
  dq __MIRCode_loadArgv$0_vcall ; loadArgv ( 98 )
  dq __MIRCode_loadArgc$0_vcall ; loadArgc ( 99 )
  dq __MIRCode_neg$0_vcall ; neg ( 100 )
  dq __MIRCode_add$0_vcall ; add ( 101 )
  dq __MIRCode_stringJoin$0_vcall ; stringJoin ( 102 )
  dq __MIRCode_sub$0_vcall ; sub ( 103 )
  dq __MIRCode_mul$0_vcall ; mul ( 104 )
  dq __MIRCode_div$0_vcall ; div ( 105 )
  dq __MIRCode_idiv$0_vcall ; idiv ( 106 )
  dq __MIRCode_loadArray$0_vcall ; loadArray ( 107 )
  dq __MIRCode_loadMap$0_vcall ; loadMap ( 108 )
  dq __MIRCode_loadNull$0_vcall ; loadNull ( 109 )
  dq __MIRCode_loadImm$1_vcall ; loadImm ( 110 )
  dq __MIRCode_cmpEQ$0_vcall ; cmpEQ ( 111 )
  dq __MIRCode_cmpNEQ$0_vcall ; cmpNEQ ( 112 )
  dq __MIRCode_cmpLT$0_vcall ; cmpLT ( 113 )
  dq __MIRCode_cmpLE$0_vcall ; cmpLE ( 114 )
  dq __MIRCode_cmpGT$0_vcall ; cmpGT ( 115 )
  dq __MIRCode_cmpGE$0_vcall ; cmpGE ( 116 )
  dq __MIRCode_syscall$2_vcall ; syscall ( 117 )
  dq __MIRCode_loadLocal$1_vcall ; loadLocal ( 118 )
  dq __MIRCode_loadGlobal$1_vcall ; loadGlobal ( 119 )
  dq __MIRCode_loadParamN$1_vcall ; loadParamN ( 120 )
  dq __MIRCode_loadRetVal$0_vcall ; loadRetVal ( 121 )
  dq __MIRCode_storeLocal$1_vcall ; storeLocal ( 122 )
  dq __MIRCode_storeGlobal$1_vcall ; storeGlobal ( 123 )
  dq __MIRCode_storeParamN$1_vcall ; storeParamN ( 124 )
  dq __MIRCode_storeRetVal$0_vcall ; storeRetVal ( 125 )
  dq __MIRCode_drop$0_vcall ; drop ( 126 )
  dq __MIRCode_call$1_vcall ; call ( 127 )
  dq __MIRCode_loadFromIndex$0_vcall ; loadFromIndex ( 128 )
  dq __MIRCode_loadFromKey$0_vcall ; loadFromKey ( 129 )
  dq __MIRCode_storeAtIndex$0_vcall ; storeAtIndex ( 130 )
  dq __MIRCode_storeAtKey$0_vcall ; storeAtKey ( 131 )
  dq __MIRCode_createObject$1_vcall ; createObject ( 132 )
  dq __MIRCode_createLabel$0_vcall ; createLabel ( 133 )
  dq __MIRCode_jmpIfFalse$1_vcall ; jmpIfFalse ( 134 )
  dq __MIRCode_moveBack$0_vcall ; moveBack ( 135 )
  dq __MIRCode_emitLabel$1_vcall ; emitLabel ( 136 )
  dq __MIRCode_jmpIfTrue$1_vcall ; jmpIfTrue ( 137 )
  dq __MIRCode_vcall$2_vcall ; vcall ( 138 )
  dq __MIRCode_dup$0_vcall ; dup ( 139 )
  dq __MIRCode_over$0_vcall ; over ( 140 )
  dq __MIRCode_jmp$1_vcall ; jmp ( 141 )
  dq __MIRCode_dropN$1_vcall ; dropN ( 142 )
  dq __MIRCode_allocateLocalId$0_vcall ; allocateLocalId ( 143 )
  dq __MIRCode_innerRet$0_vcall ; innerRet ( 144 )
  dq __MIRCode_resolveLabel$1_vcall ; resolveLabel ( 145 )
  dq __MIRCode_forEachKeys$3_vcall ; forEachKeys ( 146 )
  dq __MIRCode_forEachIndexes$3_vcall ; forEachIndexes ( 147 )
  dq __MIRCode_callPrint$1_vcall ; callPrint ( 148 )
  dq __MIRCode_createClass$1_vcall ; createClass ( 149 )
  dq __MIRCode_createAndEmitLabel$0_vcall ; createAndEmitLabel ( 150 )
  dq __MIRCode_comment$1_vcall ; comment ( 151 )
  dq __MIRCode_beginProc$4_vcall ; beginProc ( 152 )
  dq __MIRCode_initFrame$1_vcall ; initFrame ( 153 )
  dq __MIRCode_ret$1_vcall ; ret ( 154 )
  dq __MIRCode_endProc$0_vcall ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MIRCode_createMethod$1_vcall ; createMethod ( 164 )

vtable_AppMold:
.offset dd 8 * 0
.length dd 8 * 182
.entries:
  dq __AppMold_logError$1_vcall ; logError ( 0 )
  dq __AppMold_getSymbolTable$0_vcall ; getSymbolTable ( 1 )
  dq __MOLD_NullMethodCalled ; insert ( 2 )
  dq __MOLD_NullMethodCalled ; _lookupInternal ( 3 )
  dq __MOLD_NullMethodCalled ; lookup ( 4 )
  dq __AppMold_logDebug$1_vcall ; logDebug ( 5 )
  dq __MOLD_NullMethodCalled ; parseFile ( 6 )
  dq __AppMold_setLogContext$1_vcall ; setLogContext ( 7 )
  dq __MOLD_NullMethodCalled ; insertLiteral ( 8 )
  dq __MOLD_NullMethodCalled ; lookupClass ( 9 )
  dq __MOLD_NullMethodCalled ; insertClass ( 10 )
  dq __MOLD_NullMethodCalled ; insertFunction ( 11 )
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure ( 12 )
  dq __MOLD_NullMethodCalled ; insertParam ( 13 )
  dq __MOLD_NullMethodCalled ; assignType ( 14 )
  dq __MOLD_NullMethodCalled ; lookupForWrite ( 15 )
  dq __MOLD_NullMethodCalled ; isset ( 16 )
  dq __MOLD_NullMethodCalled ; enterScope ( 17 )
  dq __MOLD_NullMethodCalled ; importExternalVariable ( 18 )
  dq __MOLD_NullMethodCalled ; leaveScope ( 19 )
  dq __MOLD_NullMethodCalled ; lookupForRead ( 20 )
  dq __MOLD_NullMethodCalled ; useAsTypeofArg ( 21 )
  dq __MOLD_NullMethodCalled ; useAsArray ( 22 )
  dq __MOLD_NullMethodCalled ; useAsArrayOrString ( 23 )
  dq __MOLD_NullMethodCalled ; useAsIndex ( 24 )
  dq __MOLD_NullMethodCalled ; useAsMapOrObject ( 25 )
  dq __MOLD_NullMethodCalled ; useAsKey ( 26 )
  dq __MOLD_NullMethodCalled ; insertConst ( 27 )
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert ( 28 )
  dq __MOLD_NullMethodCalled ; assignNode ( 29 )
  dq __MOLD_NullMethodCalled ; assignValue ( 30 )
  dq __MOLD_NullMethodCalled ; exportSymbols ( 31 )
  dq __MOLD_NullMethodCalled ; remove ( 32 )
  dq __MOLD_NullMethodCalled ; enterScopeForLoop ( 33 )
  dq __MOLD_NullMethodCalled ; insertLocal ( 34 )
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite ( 35 )
  dq __MOLD_NullMethodCalled ; assignTypeAndFreeze ( 36 )
  dq __MOLD_NullMethodCalled ; lookupForCall ( 37 )
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName ( 38 )
  dq __MOLD_NullMethodCalled ; importGlobal ( 39 )
  dq __MOLD_NullMethodCalled ; useAsInteger ( 40 )
  dq __MOLD_NullMethodCalled ; useAsFloat ( 41 )
  dq __MOLD_NullMethodCalled ; useAsNumber ( 42 )
  dq __MOLD_NullMethodCalled ; decreaseWriteHits ( 43 )
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols ( 44 )
  dq __AppMold_getAstSymbolsCollector$0_vcall ; getAstSymbolsCollector ( 45 )
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite ( 46 )
  dq __MOLD_NullMethodCalled ; releaseTempVar ( 47 )
  dq __MOLD_NullMethodCalled ; _declareFunction ( 48 )
  dq __MOLD_NullMethodCalled ; _emitFunctionBody ( 49 )
  dq __MOLD_NullMethodCalled ; _declareClass ( 50 )
  dq __MOLD_NullMethodCalled ; _call ( 51 )
  dq __MOLD_NullMethodCalled ; _assign ( 52 )
  dq __MOLD_NullMethodCalled ; lookupLiteralForRead ( 53 )
  dq __MOLD_NullMethodCalled ; _loadImm ( 54 )
  dq __MOLD_NullMethodCalled ; _loadArgsVector ( 55 )
  dq __MOLD_NullMethodCalled ; _loadArgsCount ( 56 )
  dq __MOLD_NullMethodCalled ; _loadVariable ( 57 )
  dq __MOLD_NullMethodCalled ; _convert ( 58 )
  dq __MOLD_NullMethodCalled ; _loadNull ( 59 )
  dq __MOLD_NullMethodCalled ; _loadArray ( 60 )
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant ( 61 )
  dq __MOLD_NullMethodCalled ; _storeAtIndex ( 62 )
  dq __MOLD_NullMethodCalled ; _loadMap ( 63 )
  dq __MOLD_NullMethodCalled ; _storeAtKey ( 64 )
  dq __MOLD_NullMethodCalled ; _neg ( 65 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd ( 66 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr ( 67 )
  dq __MOLD_NullMethodCalled ; _isTypeOf ( 68 )
  dq __MOLD_NullMethodCalled ; _isNotTypeOf ( 69 )
  dq __MOLD_NullMethodCalled ; _createObject ( 70 )
  dq __MOLD_NullMethodCalled ; _loadFromIndex ( 71 )
  dq __MOLD_NullMethodCalled ; _loadFromKey ( 72 )
  dq __MOLD_NullMethodCalled ; _compareEQ ( 73 )
  dq __MOLD_NullMethodCalled ; _compareNEQ ( 74 )
  dq __MOLD_NullMethodCalled ; _compareGT ( 75 )
  dq __MOLD_NullMethodCalled ; _compareGE ( 76 )
  dq __MOLD_NullMethodCalled ; _compareLT ( 77 )
  dq __MOLD_NullMethodCalled ; _compareLE ( 78 )
  dq __MOLD_NullMethodCalled ; _add ( 79 )
  dq __MOLD_NullMethodCalled ; _sub ( 80 )
  dq __MOLD_NullMethodCalled ; _mul ( 81 )
  dq __MOLD_NullMethodCalled ; _div ( 82 )
  dq __MOLD_NullMethodCalled ; _idiv ( 83 )
  dq __MOLD_NullMethodCalled ; _stringJoin ( 84 )
  dq __MOLD_NullMethodCalled ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 94 )
  dq __MOLD_NullMethodCalled ; _executeNodePrint ( 95 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 96 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 97 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 98 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 99 )
  dq __MOLD_NullMethodCalled ; neg ( 100 )
  dq __MOLD_NullMethodCalled ; add ( 101 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 102 )
  dq __MOLD_NullMethodCalled ; sub ( 103 )
  dq __MOLD_NullMethodCalled ; mul ( 104 )
  dq __MOLD_NullMethodCalled ; div ( 105 )
  dq __MOLD_NullMethodCalled ; idiv ( 106 )
  dq __MOLD_NullMethodCalled ; loadArray ( 107 )
  dq __MOLD_NullMethodCalled ; loadMap ( 108 )
  dq __MOLD_NullMethodCalled ; loadNull ( 109 )
  dq __MOLD_NullMethodCalled ; loadImm ( 110 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 111 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 112 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 114 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 115 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 116 )
  dq __MOLD_NullMethodCalled ; syscall ( 117 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 118 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 119 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 120 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 121 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 122 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 123 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 124 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 125 )
  dq __MOLD_NullMethodCalled ; drop ( 126 )
  dq __MOLD_NullMethodCalled ; call ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 128 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 130 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 131 )
  dq __MOLD_NullMethodCalled ; createObject ( 132 )
  dq __MOLD_NullMethodCalled ; createLabel ( 133 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 134 )
  dq __MOLD_NullMethodCalled ; moveBack ( 135 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 136 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 137 )
  dq __MOLD_NullMethodCalled ; vcall ( 138 )
  dq __MOLD_NullMethodCalled ; dup ( 139 )
  dq __MOLD_NullMethodCalled ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __AppMold_getMir1Code$0_vcall ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __AppMold_getAstPreprocessor$0_vcall ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __AppMold_getAstEvaluator$0_vcall ; getAstEvaluator ( 174 )
  dq __AppMold_getAstOptimizerVCall$0_vcall ; getAstOptimizerVCall ( 175 )
  dq __AppMold_getAstOptimizerConstantFolding$0_vcall ; getAstOptimizerConstantFolding ( 176 )
  dq __AppMold_getAstOptimizerIf$0_vcall ; getAstOptimizerIf ( 177 )
  dq __AppMold_getAstOptimizerDeadCodeRemove$0_vcall ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __AppMold_getAstOptimizerCSE$0_vcall ; getAstOptimizerCSE ( 179 )
  dq __MOLD_NullMethodCalled ; run ( 180 )
  dq __MOLD_NullMethodCalled ; connectTo ( 181 )
  dq __AppMold_getAstTypeCast$0_vcall ; getAstTypeCast ( 182 )

vtable_ASTPrinterText:
.offset dd 8 * 0
.length dd 8 * 0

vtable_ASTPrinterHtml:
.offset dd 8 * 0
.length dd 8 * 0

vtable_ASTTranslator:
.offset dd 8 * 48
.length dd 8 * 132
.entries:
  dq __ASTTranslator__declareFunction$2_vcall ; _declareFunction ( 48 )
  dq __ASTTranslator__emitFunctionBody$2_vcall ; _emitFunctionBody ( 49 )
  dq __ASTTranslator__declareClass$2_vcall ; _declareClass ( 50 )
  dq __ASTTranslator__call$4_vcall ; _call ( 51 )
  dq __ASTTranslator__assign$2_vcall ; _assign ( 52 )
  dq __MOLD_NullMethodCalled ; lookupLiteralForRead ( 53 )
  dq __ASTTranslator__loadImm$2_vcall ; _loadImm ( 54 )
  dq __ASTTranslator__loadArgsVector$1_vcall ; _loadArgsVector ( 55 )
  dq __ASTTranslator__loadArgsCount$1_vcall ; _loadArgsCount ( 56 )
  dq __ASTTranslator__loadVariable$1_vcall ; _loadVariable ( 57 )
  dq __ASTTranslator__convert$4_vcall ; _convert ( 58 )
  dq __ASTTranslator__loadNull$1_vcall ; _loadNull ( 59 )
  dq __ASTTranslator__loadArray$1_vcall ; _loadArray ( 60 )
  dq __ASTTranslator__loadImmAsVariant$2_vcall ; _loadImmAsVariant ( 61 )
  dq __ASTTranslator__storeAtIndex$3_vcall ; _storeAtIndex ( 62 )
  dq __ASTTranslator__loadMap$1_vcall ; _loadMap ( 63 )
  dq __ASTTranslator__storeAtKey$3_vcall ; _storeAtKey ( 64 )
  dq __ASTTranslator__neg$2_vcall ; _neg ( 65 )
  dq __ASTTranslator__evaluateNodeLazyBoolAnd$3_vcall ; _evaluateNodeLazyBoolAnd ( 66 )
  dq __ASTTranslator__evaluateNodeLazyBoolOr$3_vcall ; _evaluateNodeLazyBoolOr ( 67 )
  dq __ASTTranslator__isTypeOf$3_vcall ; _isTypeOf ( 68 )
  dq __ASTTranslator__isNotTypeOf$3_vcall ; _isNotTypeOf ( 69 )
  dq __ASTTranslator__createObject$2_vcall ; _createObject ( 70 )
  dq __ASTTranslator__loadFromIndex$3_vcall ; _loadFromIndex ( 71 )
  dq __ASTTranslator__loadFromKey$3_vcall ; _loadFromKey ( 72 )
  dq __ASTTranslator__compareEQ$3_vcall ; _compareEQ ( 73 )
  dq __ASTTranslator__compareNEQ$3_vcall ; _compareNEQ ( 74 )
  dq __ASTTranslator__compareGT$3_vcall ; _compareGT ( 75 )
  dq __ASTTranslator__compareGE$3_vcall ; _compareGE ( 76 )
  dq __ASTTranslator__compareLT$3_vcall ; _compareLT ( 77 )
  dq __ASTTranslator__compareLE$3_vcall ; _compareLE ( 78 )
  dq __ASTTranslator__add$3_vcall ; _add ( 79 )
  dq __ASTTranslator__sub$3_vcall ; _sub ( 80 )
  dq __ASTTranslator__mul$3_vcall ; _mul ( 81 )
  dq __ASTTranslator__div$3_vcall ; _div ( 82 )
  dq __ASTTranslator__idiv$3_vcall ; _idiv ( 83 )
  dq __ASTTranslator__stringJoin$3_vcall ; _stringJoin ( 84 )
  dq __ASTTranslator__syscall$4_vcall ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __ASTTranslator__invokeMethod$3_vcall ; _invokeMethod ( 87 )
  dq __ASTTranslator__storeAtIndexAndDrop$3_vcall ; _storeAtIndexAndDrop ( 88 )
  dq __ASTTranslator__storeAtKeyAndDrop$3_vcall ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 90 )
  dq __ASTTranslator__executeNodeFor$5_vcall ; _executeNodeFor ( 91 )
  dq __ASTTranslator__executeNodeForEach$5_vcall ; _executeNodeForEach ( 92 )
  dq __ASTTranslator__executeNodeWhile$2_vcall ; _executeNodeWhile ( 93 )
  dq __ASTTranslator__executeNodeIf$3_vcall ; _executeNodeIf ( 94 )
  dq __ASTTranslator__executeNodePrint$1_vcall ; _executeNodePrint ( 95 )
  dq __ASTTranslator__executeNodeSwitch$1_vcall ; _executeNodeSwitch ( 96 )
  dq __ASTTranslator__dropRetVal$0_vcall ; _dropRetVal ( 97 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 98 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 99 )
  dq __MOLD_NullMethodCalled ; neg ( 100 )
  dq __MOLD_NullMethodCalled ; add ( 101 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 102 )
  dq __MOLD_NullMethodCalled ; sub ( 103 )
  dq __MOLD_NullMethodCalled ; mul ( 104 )
  dq __MOLD_NullMethodCalled ; div ( 105 )
  dq __MOLD_NullMethodCalled ; idiv ( 106 )
  dq __MOLD_NullMethodCalled ; loadArray ( 107 )
  dq __MOLD_NullMethodCalled ; loadMap ( 108 )
  dq __MOLD_NullMethodCalled ; loadNull ( 109 )
  dq __MOLD_NullMethodCalled ; loadImm ( 110 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 111 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 112 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 114 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 115 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 116 )
  dq __MOLD_NullMethodCalled ; syscall ( 117 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 118 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 119 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 120 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 121 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 122 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 123 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 124 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 125 )
  dq __MOLD_NullMethodCalled ; drop ( 126 )
  dq __MOLD_NullMethodCalled ; call ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 128 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 130 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 131 )
  dq __MOLD_NullMethodCalled ; createObject ( 132 )
  dq __MOLD_NullMethodCalled ; createLabel ( 133 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 134 )
  dq __MOLD_NullMethodCalled ; moveBack ( 135 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 136 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 137 )
  dq __MOLD_NullMethodCalled ; vcall ( 138 )
  dq __MOLD_NullMethodCalled ; dup ( 139 )
  dq __MOLD_NullMethodCalled ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __ASTTranslator_run$1_vcall ; run ( 180 )

vtable_ASTTranslatorMIR0:
.offset dd 8 * 48
.length dd 8 * 132
.entries:
  dq __ASTTranslatorMIR0__declareFunction$2_vcall ; _declareFunction ( 48 )
  dq __ASTTranslatorMIR0__emitFunctionBody$2_vcall ; _emitFunctionBody ( 49 )
  dq __ASTTranslatorMIR0__declareClass$2_vcall ; _declareClass ( 50 )
  dq __ASTTranslatorMIR0__call$4_vcall ; _call ( 51 )
  dq __ASTTranslatorMIR0__assign$2_vcall ; _assign ( 52 )
  dq __MOLD_NullMethodCalled ; lookupLiteralForRead ( 53 )
  dq __ASTTranslatorMIR0__loadImm$2_vcall ; _loadImm ( 54 )
  dq __ASTTranslatorMIR0__loadArgsVector$0_vcall ; _loadArgsVector ( 55 )
  dq __ASTTranslatorMIR0__loadArgsCount$0_vcall ; _loadArgsCount ( 56 )
  dq __ASTTranslatorMIR0__loadVariable$1_vcall ; _loadVariable ( 57 )
  dq __ASTTranslatorMIR0__convert$4_vcall ; _convert ( 58 )
  dq __ASTTranslatorMIR0__loadNull$1_vcall ; _loadNull ( 59 )
  dq __ASTTranslatorMIR0__loadArray$1_vcall ; _loadArray ( 60 )
  dq __ASTTranslatorMIR0__loadImmAsVariant$2_vcall ; _loadImmAsVariant ( 61 )
  dq __ASTTranslatorMIR0__storeAtIndex$3_vcall ; _storeAtIndex ( 62 )
  dq __ASTTranslatorMIR0__loadMap$1_vcall ; _loadMap ( 63 )
  dq __ASTTranslatorMIR0__storeAtKey$3_vcall ; _storeAtKey ( 64 )
  dq __ASTTranslatorMIR0__neg$2_vcall ; _neg ( 65 )
  dq __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3_vcall ; _evaluateNodeLazyBoolAnd ( 66 )
  dq __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3_vcall ; _evaluateNodeLazyBoolOr ( 67 )
  dq __ASTTranslatorMIR0__isTypeOf$3_vcall ; _isTypeOf ( 68 )
  dq __ASTTranslatorMIR0__isNotTypeOf$3_vcall ; _isNotTypeOf ( 69 )
  dq __ASTTranslatorMIR0__createObject$2_vcall ; _createObject ( 70 )
  dq __ASTTranslatorMIR0__loadFromIndex$3_vcall ; _loadFromIndex ( 71 )
  dq __ASTTranslatorMIR0__loadFromKey$3_vcall ; _loadFromKey ( 72 )
  dq __ASTTranslatorMIR0__compareEQ$3_vcall ; _compareEQ ( 73 )
  dq __ASTTranslatorMIR0__compareNEQ$3_vcall ; _compareNEQ ( 74 )
  dq __ASTTranslatorMIR0__compareGT$3_vcall ; _compareGT ( 75 )
  dq __ASTTranslatorMIR0__compareGE$3_vcall ; _compareGE ( 76 )
  dq __ASTTranslatorMIR0__compareLT$3_vcall ; _compareLT ( 77 )
  dq __ASTTranslatorMIR0__compareLE$3_vcall ; _compareLE ( 78 )
  dq __ASTTranslatorMIR0__add$3_vcall ; _add ( 79 )
  dq __ASTTranslatorMIR0__sub$3_vcall ; _sub ( 80 )
  dq __ASTTranslatorMIR0__mul$3_vcall ; _mul ( 81 )
  dq __ASTTranslatorMIR0__div$3_vcall ; _div ( 82 )
  dq __ASTTranslatorMIR0__idiv$3_vcall ; _idiv ( 83 )
  dq __ASTTranslatorMIR0__stringJoin$3_vcall ; _stringJoin ( 84 )
  dq __ASTTranslatorMIR0__syscall$4_vcall ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __ASTTranslatorMIR0__invokeMethod$4_vcall ; _invokeMethod ( 87 )
  dq __ASTTranslatorMIR0__storeAtIndexAndDrop$3_vcall ; _storeAtIndexAndDrop ( 88 )
  dq __ASTTranslatorMIR0__storeAtKeyAndDrop$3_vcall ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 90 )
  dq __ASTTranslatorMIR0__executeNodeFor$5_vcall ; _executeNodeFor ( 91 )
  dq __ASTTranslatorMIR0__executeNodeForEach$5_vcall ; _executeNodeForEach ( 92 )
  dq __ASTTranslatorMIR0__executeNodeWhile$2_vcall ; _executeNodeWhile ( 93 )
  dq __ASTTranslatorMIR0__executeNodeIf$3_vcall ; _executeNodeIf ( 94 )
  dq __ASTTranslatorMIR0__executeNodePrint$1_vcall ; _executeNodePrint ( 95 )
  dq __ASTTranslator__executeNodeSwitch$1_vcall ; _executeNodeSwitch ( 96 )
  dq __ASTTranslatorMIR0__dropRetVal$0_vcall ; _dropRetVal ( 97 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 98 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 99 )
  dq __MOLD_NullMethodCalled ; neg ( 100 )
  dq __MOLD_NullMethodCalled ; add ( 101 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 102 )
  dq __MOLD_NullMethodCalled ; sub ( 103 )
  dq __MOLD_NullMethodCalled ; mul ( 104 )
  dq __MOLD_NullMethodCalled ; div ( 105 )
  dq __MOLD_NullMethodCalled ; idiv ( 106 )
  dq __MOLD_NullMethodCalled ; loadArray ( 107 )
  dq __MOLD_NullMethodCalled ; loadMap ( 108 )
  dq __MOLD_NullMethodCalled ; loadNull ( 109 )
  dq __MOLD_NullMethodCalled ; loadImm ( 110 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 111 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 112 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 114 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 115 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 116 )
  dq __MOLD_NullMethodCalled ; syscall ( 117 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 118 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 119 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 120 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 121 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 122 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 123 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 124 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 125 )
  dq __MOLD_NullMethodCalled ; drop ( 126 )
  dq __MOLD_NullMethodCalled ; call ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 128 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 130 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 131 )
  dq __MOLD_NullMethodCalled ; createObject ( 132 )
  dq __MOLD_NullMethodCalled ; createLabel ( 133 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 134 )
  dq __MOLD_NullMethodCalled ; moveBack ( 135 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 136 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 137 )
  dq __MOLD_NullMethodCalled ; vcall ( 138 )
  dq __MOLD_NullMethodCalled ; dup ( 139 )
  dq __MOLD_NullMethodCalled ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __ASTTranslatorMIR0_run$1_vcall ; run ( 180 )

vtable_Stack:
.offset dd 8 * 139
.length dd 8 * 29
.entries:
  dq __Stack_dup$0_vcall ; dup ( 139 )
  dq __Stack_over$0_vcall ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __Stack_pop$0_vcall ; pop ( 158 )
  dq __Stack_push$1_vcall ; push ( 159 )
  dq __Stack_peekN$1_vcall ; peekN ( 160 )
  dq __Stack_eatN$1_vcall ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __Stack_eat$0_vcall ; eat ( 166 )
  dq __Stack_getByAbsoluteIdx$1_vcall ; getByAbsoluteIdx ( 167 )
  dq __Stack_setByAbsoluteIdx$2_vcall ; setByAbsoluteIdx ( 168 )

vtable_ASTTranslatorMIR1:
.offset dd 8 * 48
.length dd 8 * 133
.entries:
  dq __ASTTranslatorMIR1__declareFunction$2_vcall ; _declareFunction ( 48 )
  dq __ASTTranslatorMIR1__emitFunctionBody$2_vcall ; _emitFunctionBody ( 49 )
  dq __ASTTranslatorMIR1__declareClass$2_vcall ; _declareClass ( 50 )
  dq __ASTTranslatorMIR1__call$4_vcall ; _call ( 51 )
  dq __ASTTranslatorMIR1__assign$2_vcall ; _assign ( 52 )
  dq __MOLD_NullMethodCalled ; lookupLiteralForRead ( 53 )
  dq __ASTTranslatorMIR1__loadImm$2_vcall ; _loadImm ( 54 )
  dq __ASTTranslatorMIR1__loadArgsVector$0_vcall ; _loadArgsVector ( 55 )
  dq __ASTTranslatorMIR1__loadArgsCount$0_vcall ; _loadArgsCount ( 56 )
  dq __ASTTranslatorMIR1__loadVariable$1_vcall ; _loadVariable ( 57 )
  dq __ASTTranslatorMIR1__convert$4_vcall ; _convert ( 58 )
  dq __ASTTranslatorMIR1__loadNull$1_vcall ; _loadNull ( 59 )
  dq __ASTTranslatorMIR1__loadArray$1_vcall ; _loadArray ( 60 )
  dq __ASTTranslatorMIR1__loadImmAsVariant$2_vcall ; _loadImmAsVariant ( 61 )
  dq __ASTTranslatorMIR1__storeAtIndex$3_vcall ; _storeAtIndex ( 62 )
  dq __ASTTranslatorMIR1__loadMap$1_vcall ; _loadMap ( 63 )
  dq __ASTTranslatorMIR1__storeAtKey$3_vcall ; _storeAtKey ( 64 )
  dq __ASTTranslatorMIR1__neg$2_vcall ; _neg ( 65 )
  dq __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3_vcall ; _evaluateNodeLazyBoolAnd ( 66 )
  dq __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3_vcall ; _evaluateNodeLazyBoolOr ( 67 )
  dq __ASTTranslatorMIR1__isTypeOf$3_vcall ; _isTypeOf ( 68 )
  dq __ASTTranslatorMIR1__isNotTypeOf$3_vcall ; _isNotTypeOf ( 69 )
  dq __ASTTranslatorMIR1__createObject$2_vcall ; _createObject ( 70 )
  dq __ASTTranslatorMIR1__loadFromIndex$3_vcall ; _loadFromIndex ( 71 )
  dq __ASTTranslatorMIR1__loadFromKey$3_vcall ; _loadFromKey ( 72 )
  dq __ASTTranslatorMIR1__compareEQ$3_vcall ; _compareEQ ( 73 )
  dq __ASTTranslatorMIR1__compareNEQ$3_vcall ; _compareNEQ ( 74 )
  dq __ASTTranslatorMIR1__compareGT$3_vcall ; _compareGT ( 75 )
  dq __ASTTranslatorMIR1__compareGE$3_vcall ; _compareGE ( 76 )
  dq __ASTTranslatorMIR1__compareLT$3_vcall ; _compareLT ( 77 )
  dq __ASTTranslatorMIR1__compareLE$3_vcall ; _compareLE ( 78 )
  dq __ASTTranslatorMIR1__add$3_vcall ; _add ( 79 )
  dq __ASTTranslatorMIR1__sub$3_vcall ; _sub ( 80 )
  dq __ASTTranslatorMIR1__mul$3_vcall ; _mul ( 81 )
  dq __ASTTranslatorMIR1__div$3_vcall ; _div ( 82 )
  dq __ASTTranslatorMIR1__idiv$3_vcall ; _idiv ( 83 )
  dq __ASTTranslatorMIR1__stringJoin$3_vcall ; _stringJoin ( 84 )
  dq __ASTTranslatorMIR1__syscall$4_vcall ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __ASTTranslatorMIR1__invokeMethod$4_vcall ; _invokeMethod ( 87 )
  dq __ASTTranslatorMIR1__storeAtIndexAndDrop$3_vcall ; _storeAtIndexAndDrop ( 88 )
  dq __ASTTranslatorMIR1__storeAtKeyAndDrop$3_vcall ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 90 )
  dq __ASTTranslatorMIR1__executeNodeFor$5_vcall ; _executeNodeFor ( 91 )
  dq __ASTTranslatorMIR1__executeNodeForEach$5_vcall ; _executeNodeForEach ( 92 )
  dq __ASTTranslatorMIR1__executeNodeWhile$2_vcall ; _executeNodeWhile ( 93 )
  dq __ASTTranslatorMIR1__executeNodeIf$3_vcall ; _executeNodeIf ( 94 )
  dq __ASTTranslatorMIR1__executeNodePrint$1_vcall ; _executeNodePrint ( 95 )
  dq __ASTTranslatorMIR1__executeNodeSwitch$1_vcall ; _executeNodeSwitch ( 96 )
  dq __ASTTranslatorMIR1__dropRetVal$0_vcall ; _dropRetVal ( 97 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 98 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 99 )
  dq __MOLD_NullMethodCalled ; neg ( 100 )
  dq __MOLD_NullMethodCalled ; add ( 101 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 102 )
  dq __MOLD_NullMethodCalled ; sub ( 103 )
  dq __MOLD_NullMethodCalled ; mul ( 104 )
  dq __MOLD_NullMethodCalled ; div ( 105 )
  dq __MOLD_NullMethodCalled ; idiv ( 106 )
  dq __MOLD_NullMethodCalled ; loadArray ( 107 )
  dq __MOLD_NullMethodCalled ; loadMap ( 108 )
  dq __MOLD_NullMethodCalled ; loadNull ( 109 )
  dq __MOLD_NullMethodCalled ; loadImm ( 110 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 111 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 112 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 114 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 115 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 116 )
  dq __MOLD_NullMethodCalled ; syscall ( 117 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 118 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 119 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 120 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 121 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 122 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 123 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 124 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 125 )
  dq __MOLD_NullMethodCalled ; drop ( 126 )
  dq __MOLD_NullMethodCalled ; call ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 128 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 130 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 131 )
  dq __MOLD_NullMethodCalled ; createObject ( 132 )
  dq __MOLD_NullMethodCalled ; createLabel ( 133 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 134 )
  dq __MOLD_NullMethodCalled ; moveBack ( 135 )
  dq __ASTTranslatorMIR1_emitLabel$1_vcall ; emitLabel ( 136 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 137 )
  dq __MOLD_NullMethodCalled ; vcall ( 138 )
  dq __MOLD_NullMethodCalled ; dup ( 139 )
  dq __MOLD_NullMethodCalled ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __ASTTranslatorMIR1_push$1_vcall ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __ASTTranslatorMIR1_popForRead$0_vcall ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __ASTTranslatorMIR1_run$1_vcall ; run ( 180 )
  dq __ASTTranslatorMIR1_connectTo$1_vcall ; connectTo ( 181 )

vtable_PipeAbstract:
.offset dd 8 * 157
.length dd 8 * 24
.entries:
  dq __PipeAbstract_processOneItem$1_vcall ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __MOLD_NullMethodCalled ; run ( 180 )
  dq __PipeAbstract_connectTo$1_vcall ; connectTo ( 181 )

vtable_MIRQuadCollector:
.offset dd 8 * 157
.length dd 8 * 24
.entries:
  dq __MIRQuadCollector_processOneItem$1_vcall ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __MOLD_NullMethodCalled ; run ( 180 )
  dq __PipeAbstract_connectTo$1_vcall ; connectTo ( 181 )

vtable_CodeGeneratorX64:
.offset dd 8 * 85
.length dd 8 * 95
.entries:
  dq __CodeGeneratorX64__syscall$1_vcall ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 94 )
  dq __MOLD_NullMethodCalled ; _executeNodePrint ( 95 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 96 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 97 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 98 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 99 )
  dq __MOLD_NullMethodCalled ; neg ( 100 )
  dq __MOLD_NullMethodCalled ; add ( 101 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 102 )
  dq __MOLD_NullMethodCalled ; sub ( 103 )
  dq __MOLD_NullMethodCalled ; mul ( 104 )
  dq __MOLD_NullMethodCalled ; div ( 105 )
  dq __MOLD_NullMethodCalled ; idiv ( 106 )
  dq __MOLD_NullMethodCalled ; loadArray ( 107 )
  dq __MOLD_NullMethodCalled ; loadMap ( 108 )
  dq __MOLD_NullMethodCalled ; loadNull ( 109 )
  dq __MOLD_NullMethodCalled ; loadImm ( 110 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 111 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 112 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 114 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 115 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 116 )
  dq __MOLD_NullMethodCalled ; syscall ( 117 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 118 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 119 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 120 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 121 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 122 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 123 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 124 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 125 )
  dq __MOLD_NullMethodCalled ; drop ( 126 )
  dq __CodeGeneratorX64_call$1_vcall ; call ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 128 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 130 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 131 )
  dq __MOLD_NullMethodCalled ; createObject ( 132 )
  dq __MOLD_NullMethodCalled ; createLabel ( 133 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 134 )
  dq __MOLD_NullMethodCalled ; moveBack ( 135 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 136 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 137 )
  dq __MOLD_NullMethodCalled ; vcall ( 138 )
  dq __MOLD_NullMethodCalled ; dup ( 139 )
  dq __MOLD_NullMethodCalled ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __CodeGeneratorX64_pop$1_vcall ; pop ( 158 )
  dq __CodeGeneratorX64_push$1_vcall ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __CodeGeneratorX64_run$1_vcall ; run ( 180 )

vtable_MIRQuadOptimizer:
.offset dd 8 * 157
.length dd 8 * 24
.entries:
  dq __MIRQuadOptimizer_processOneItem$1_vcall ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __MOLD_NullMethodCalled ; run ( 180 )
  dq __PipeAbstract_connectTo$1_vcall ; connectTo ( 181 )

vtable_VMachineStackObject:
.offset dd 8 * 0
.length dd 8 * 0

vtable_VMachineStack:
.offset dd 8 * 51
.length dd 8 * 129
.entries:
  dq __VMachineStack__call$1_vcall ; _call ( 51 )
  dq __MOLD_NullMethodCalled ; _assign ( 52 )
  dq __MOLD_NullMethodCalled ; lookupLiteralForRead ( 53 )
  dq __MOLD_NullMethodCalled ; _loadImm ( 54 )
  dq __MOLD_NullMethodCalled ; _loadArgsVector ( 55 )
  dq __MOLD_NullMethodCalled ; _loadArgsCount ( 56 )
  dq __MOLD_NullMethodCalled ; _loadVariable ( 57 )
  dq __MOLD_NullMethodCalled ; _convert ( 58 )
  dq __MOLD_NullMethodCalled ; _loadNull ( 59 )
  dq __MOLD_NullMethodCalled ; _loadArray ( 60 )
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant ( 61 )
  dq __MOLD_NullMethodCalled ; _storeAtIndex ( 62 )
  dq __MOLD_NullMethodCalled ; _loadMap ( 63 )
  dq __MOLD_NullMethodCalled ; _storeAtKey ( 64 )
  dq __MOLD_NullMethodCalled ; _neg ( 65 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd ( 66 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr ( 67 )
  dq __MOLD_NullMethodCalled ; _isTypeOf ( 68 )
  dq __MOLD_NullMethodCalled ; _isNotTypeOf ( 69 )
  dq __MOLD_NullMethodCalled ; _createObject ( 70 )
  dq __MOLD_NullMethodCalled ; _loadFromIndex ( 71 )
  dq __MOLD_NullMethodCalled ; _loadFromKey ( 72 )
  dq __MOLD_NullMethodCalled ; _compareEQ ( 73 )
  dq __MOLD_NullMethodCalled ; _compareNEQ ( 74 )
  dq __MOLD_NullMethodCalled ; _compareGT ( 75 )
  dq __MOLD_NullMethodCalled ; _compareGE ( 76 )
  dq __MOLD_NullMethodCalled ; _compareLT ( 77 )
  dq __MOLD_NullMethodCalled ; _compareLE ( 78 )
  dq __MOLD_NullMethodCalled ; _add ( 79 )
  dq __MOLD_NullMethodCalled ; _sub ( 80 )
  dq __MOLD_NullMethodCalled ; _mul ( 81 )
  dq __MOLD_NullMethodCalled ; _div ( 82 )
  dq __MOLD_NullMethodCalled ; _idiv ( 83 )
  dq __MOLD_NullMethodCalled ; _stringJoin ( 84 )
  dq __MOLD_NullMethodCalled ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 94 )
  dq __MOLD_NullMethodCalled ; _executeNodePrint ( 95 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 96 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 97 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 98 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 99 )
  dq __MOLD_NullMethodCalled ; neg ( 100 )
  dq __MOLD_NullMethodCalled ; add ( 101 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 102 )
  dq __MOLD_NullMethodCalled ; sub ( 103 )
  dq __MOLD_NullMethodCalled ; mul ( 104 )
  dq __MOLD_NullMethodCalled ; div ( 105 )
  dq __MOLD_NullMethodCalled ; idiv ( 106 )
  dq __MOLD_NullMethodCalled ; loadArray ( 107 )
  dq __MOLD_NullMethodCalled ; loadMap ( 108 )
  dq __MOLD_NullMethodCalled ; loadNull ( 109 )
  dq __MOLD_NullMethodCalled ; loadImm ( 110 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 111 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 112 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 114 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 115 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 116 )
  dq __MOLD_NullMethodCalled ; syscall ( 117 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 118 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 119 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 120 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 121 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 122 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 123 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 124 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 125 )
  dq __MOLD_NullMethodCalled ; drop ( 126 )
  dq __MOLD_NullMethodCalled ; call ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 128 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 130 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 131 )
  dq __MOLD_NullMethodCalled ; createObject ( 132 )
  dq __MOLD_NullMethodCalled ; createLabel ( 133 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 134 )
  dq __MOLD_NullMethodCalled ; moveBack ( 135 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 136 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 137 )
  dq __MOLD_NullMethodCalled ; vcall ( 138 )
  dq __MOLD_NullMethodCalled ; dup ( 139 )
  dq __MOLD_NullMethodCalled ; over ( 140 )
  dq __MOLD_NullMethodCalled ; jmp ( 141 )
  dq __MOLD_NullMethodCalled ; dropN ( 142 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 143 )
  dq __MOLD_NullMethodCalled ; innerRet ( 144 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 147 )
  dq __MOLD_NullMethodCalled ; callPrint ( 148 )
  dq __MOLD_NullMethodCalled ; createClass ( 149 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 150 )
  dq __MOLD_NullMethodCalled ; comment ( 151 )
  dq __MOLD_NullMethodCalled ; beginProc ( 152 )
  dq __MOLD_NullMethodCalled ; initFrame ( 153 )
  dq __MOLD_NullMethodCalled ; ret ( 154 )
  dq __MOLD_NullMethodCalled ; endProc ( 155 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 156 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 157 )
  dq __MOLD_NullMethodCalled ; pop ( 158 )
  dq __MOLD_NullMethodCalled ; push ( 159 )
  dq __MOLD_NullMethodCalled ; peekN ( 160 )
  dq __MOLD_NullMethodCalled ; eatN ( 161 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 162 )
  dq __MOLD_NullMethodCalled ; popForRead ( 163 )
  dq __MOLD_NullMethodCalled ; createMethod ( 164 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 165 )
  dq __MOLD_NullMethodCalled ; eat ( 166 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 167 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 168 )
  dq __MOLD_NullMethodCalled ; printTree ( 169 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 170 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 171 )
  dq __MOLD_NullMethodCalled ; processNode ( 172 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 173 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 177 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 178 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 179 )
  dq __VMachineStack_run$0_vcall ; run ( 180 )

; ------------------------------------------------------------------------------
;                               Imports section
; ------------------------------------------------------------------------------
section '.idata' import data readable writeable
  include 'x64\CommonImports.asm'

; ------------------------------------------------------------------------------
;                                Debug section
; ------------------------------------------------------------------------------
section '.debug' data readable
SymbolTable:
dq 0, 0
include 'x64\SymbolTableCommon.asm'
dq  __AST_constructor$3 , name___AST_constructor$3
dq  __AST__printTreeInternal$2 , name___AST__printTreeInternal$2
dq  __AST_printTree$0 , name___AST_printTree$0
dq  __Parser_constructor$0 , name___Parser_constructor$0
dq  __Parser__handleError$3 , name___Parser__handleError$3
dq  __Parser__parseInternal$1 , name___Parser__parseInternal$1
dq  __Parser_parseFile$1 , name___Parser_parseFile$1
dq  __Parser_parseText$1 , name___Parser_parseText$1
dq  AST_GetNextId , name_AST_GetNextId
dq  AST_CreateNode , name_AST_CreateNode
dq  AST_CreateNodeVariable , name_AST_CreateNodeVariable
dq  AST_CreateNodeInteger , name_AST_CreateNodeInteger
dq  AST_CreateNodeString , name_AST_CreateNodeString
dq  AST_CreateNodeCall , name_AST_CreateNodeCall
dq  AST_CreateNodeBlock , name_AST_CreateNodeBlock
dq  AST_CreateNodeSysCall , name_AST_CreateNodeSysCall
dq  AST_GetOpcodeAsText , name_AST_GetOpcodeAsText
dq  AST_GetOpcodeAsShortText , name_AST_GetOpcodeAsShortText
dq  AST_InvertBoolean , name_AST_InvertBoolean
dq  AST_IsVar , name_AST_IsVar
dq  AST_IsImm , name_AST_IsImm
dq  AST_IsPrimitiveImm , name_AST_IsPrimitiveImm
dq  AST_IsImmWithValue , name_AST_IsImmWithValue
dq  AST_IsEmpty , name_AST_IsEmpty
dq  AST_IsImmOrVar , name_AST_IsImmOrVar
dq  AST_HasSideEffects , name_AST_HasSideEffects
dq  AST_GetHashInternal , name_AST_GetHashInternal
dq  AST_PrefetchHash , name_AST_PrefetchHash
dq  AST_GetHash , name_AST_GetHash
dq  AST_GetHashForCodeComparison , name_AST_GetHashForCodeComparison
dq  AST_IsDataNode , name_AST_IsDataNode
dq  AST_ConvertDataTypeToText , name_AST_ConvertDataTypeToText
dq  AST_ConvertDataTypeToMIR , name_AST_ConvertDataTypeToMIR
dq  AST_GetDataType , name_AST_GetDataType
dq  AST_TypeCast , name_AST_TypeCast
dq  AST_GetTopNodeInBlock , name_AST_GetTopNodeInBlock
dq  AST_GetParentBlock , name_AST_GetParentBlock
dq  AST_IsOkAsBox , name_AST_IsOkAsBox
dq  AST_CloneNode , name_AST_CloneNode
dq  SymbolTable_GetNextId , name_SymbolTable_GetNextId
dq  __SymbolTable_constructor$1 , name___SymbolTable_constructor$1
dq  __SymbolTable__debug$1 , name___SymbolTable__debug$1
dq  __SymbolTable__error$1 , name___SymbolTable__error$1
dq  __SymbolTable__errorTypeMismatch$2 , name___SymbolTable__errorTypeMismatch$2
dq  __SymbolTable__errorIfUsedAsNumber$1 , name___SymbolTable__errorIfUsedAsNumber$1
dq  __SymbolTable_getDeep$0 , name___SymbolTable_getDeep$0
dq  __SymbolTable_exportSymbols$0 , name___SymbolTable_exportSymbols$0
dq  __SymbolTable_insert$2 , name___SymbolTable_insert$2
dq  __SymbolTable_remove$1 , name___SymbolTable_remove$1
dq  __SymbolTable_importExternalVariable$1 , name___SymbolTable_importExternalVariable$1
dq  __SymbolTable_insertGlobal$2 , name___SymbolTable_insertGlobal$2
dq  __SymbolTable__lookupInternal$1 , name___SymbolTable__lookupInternal$1
dq  __SymbolTable_lookup$1 , name___SymbolTable_lookup$1
dq  __SymbolTable_lookupForRead$1 , name___SymbolTable_lookupForRead$1
dq  __SymbolTable_lookupForCall$3 , name___SymbolTable_lookupForCall$3
dq  __SymbolTable_lookupForWrite$1 , name___SymbolTable_lookupForWrite$1
dq  __SymbolTable_lookupForReadAndWrite$1 , name___SymbolTable_lookupForReadAndWrite$1
dq  __SymbolTable_lookupForWriteOrInsert$1 , name___SymbolTable_lookupForWriteOrInsert$1
dq  __SymbolTable_lookupGlobal$1 , name___SymbolTable_lookupGlobal$1
dq  __SymbolTable_decreaseReadHits$1 , name___SymbolTable_decreaseReadHits$1
dq  __SymbolTable_decreaseWriteHits$1 , name___SymbolTable_decreaseWriteHits$1
dq  __SymbolTable_isset$1 , name___SymbolTable_isset$1
dq  __SymbolTable_useAsArray$1 , name___SymbolTable_useAsArray$1
dq  __SymbolTable_useAsArrayOrString$1 , name___SymbolTable_useAsArrayOrString$1
dq  __SymbolTable_useAsMap$1 , name___SymbolTable_useAsMap$1
dq  __SymbolTable_useAsIndex$1 , name___SymbolTable_useAsIndex$1
dq  __SymbolTable_useAsInteger$1 , name___SymbolTable_useAsInteger$1
dq  __SymbolTable_useAsFloat$1 , name___SymbolTable_useAsFloat$1
dq  __SymbolTable_useAsString$1 , name___SymbolTable_useAsString$1
dq  __SymbolTable_useAsKey$1 , name___SymbolTable_useAsKey$1
dq  __SymbolTable_useAsObject$1 , name___SymbolTable_useAsObject$1
dq  __SymbolTable_useAsMapOrObject$1 , name___SymbolTable_useAsMapOrObject$1
dq  __SymbolTable_useAsTypeofArg$1 , name___SymbolTable_useAsTypeofArg$1
dq  __SymbolTable_useAsNumber$1 , name___SymbolTable_useAsNumber$1
dq  __SymbolTable_enterScope$0 , name___SymbolTable_enterScope$0
dq  __SymbolTable_enterScopeForLoop$0 , name___SymbolTable_enterScopeForLoop$0
dq  __SymbolTable_enterScopeForProcedure$1 , name___SymbolTable_enterScopeForProcedure$1
dq  __SymbolTable_leaveScope$0 , name___SymbolTable_leaveScope$0
dq  __SymbolTable_insertFunction$2 , name___SymbolTable_insertFunction$2
dq  __SymbolTable_lookupFunction$3 , name___SymbolTable_lookupFunction$3
dq  __SymbolTable_getCurrentFunctionName$0 , name___SymbolTable_getCurrentFunctionName$0
dq  __SymbolTable_insertClass$2 , name___SymbolTable_insertClass$2
dq  __SymbolTable_lookupClass$1 , name___SymbolTable_lookupClass$1
dq  __SymbolTable_insertLocal$1 , name___SymbolTable_insertLocal$1
dq  __SymbolTable_importGlobal$1 , name___SymbolTable_importGlobal$1
dq  __SymbolTable_insertParam$2 , name___SymbolTable_insertParam$2
dq  __SymbolTable_insertRetVal$1 , name___SymbolTable_insertRetVal$1
dq  __SymbolTable_insertConst$2 , name___SymbolTable_insertConst$2
dq  __SymbolTable_insertLiteral$1 , name___SymbolTable_insertLiteral$1
dq  __SymbolTable_lookupLiteralForRead$1 , name___SymbolTable_lookupLiteralForRead$1
dq  __SymbolTable_createConstFromValue$1 , name___SymbolTable_createConstFromValue$1
dq  __SymbolTable_assignValue$2 , name___SymbolTable_assignValue$2
dq  __SymbolTable_assignNode$2 , name___SymbolTable_assignNode$2
dq  __SymbolTable_assignType$2 , name___SymbolTable_assignType$2
dq  __SymbolTable_freezeType$1 , name___SymbolTable_freezeType$1
dq  __SymbolTable_assignTypeAndFreeze$2 , name___SymbolTable_assignTypeAndFreeze$2
dq  __SymbolTable_assignMirType$2 , name___SymbolTable_assignMirType$2
dq  __SymbolTable_removeUnusedSymbols$0 , name___SymbolTable_removeUnusedSymbols$0
dq  __SymbolTable_createLabel$0 , name___SymbolTable_createLabel$0
dq  __SymbolTable_insertJmpTable$1 , name___SymbolTable_insertJmpTable$1
dq  __SymbolTable_getTempVar$1 , name___SymbolTable_getTempVar$1
dq  __SymbolTable_getTempVarForWrite$1 , name___SymbolTable_getTempVarForWrite$1
dq  __SymbolTable_getTempVarForReadAndWrite$1 , name___SymbolTable_getTempVarForReadAndWrite$1
dq  __SymbolTable_releaseTempVar$1 , name___SymbolTable_releaseTempVar$1
dq  __ASTModuleResolver_constructor$1 , name___ASTModuleResolver_constructor$1
dq  __ASTModuleResolver_resolveImports$1 , name___ASTModuleResolver_resolveImports$1
dq  __ASTSymbolsCollector_constructor$1 , name___ASTSymbolsCollector_constructor$1
dq  __ASTSymbolsCollector__debug$1 , name___ASTSymbolsCollector__debug$1
dq  __ASTSymbolsCollector__collectSymbolsFromLeftNode$2 , name___ASTSymbolsCollector__collectSymbolsFromLeftNode$2
dq  __ASTSymbolsCollector__collectSymbolsFromRightNode$2 , name___ASTSymbolsCollector__collectSymbolsFromRightNode$2
dq  __ASTSymbolsCollector__updateVariableSymbolInfo$3 , name___ASTSymbolsCollector__updateVariableSymbolInfo$3
dq  __ASTSymbolsCollector__collectSymbols$3 , name___ASTSymbolsCollector__collectSymbols$3
dq  __ASTSymbolsCollector_buildSymbolTable$1 , name___ASTSymbolsCollector_buildSymbolTable$1
dq  __ASTEvaluator_constructor$1 , name___ASTEvaluator_constructor$1
dq  __ASTEvaluator__debug$1 , name___ASTEvaluator__debug$1
dq  __ASTEvaluator__assignValue$3 , name___ASTEvaluator__assignValue$3
dq  __ASTEvaluator__getValue$2 , name___ASTEvaluator__getValue$2
dq  __ASTEvaluator__mergeValues$2 , name___ASTEvaluator__mergeValues$2
dq  __ASTEvaluator__processConditionalNode$2 , name___ASTEvaluator__processConditionalNode$2
dq  __ASTEvaluator__processTwoAlternativeNodes$3 , name___ASTEvaluator__processTwoAlternativeNodes$3
dq  __ASTEvaluator__getArrayOfValueNodes$1 , name___ASTEvaluator__getArrayOfValueNodes$1
dq  __ASTEvaluator__processNode$2 , name___ASTEvaluator__processNode$2
dq  __ASTEvaluator_processNode$1 , name___ASTEvaluator_processNode$1
dq  __ASTPreprocessor_constructor$1 , name___ASTPreprocessor_constructor$1
dq  __ASTPreprocessor__debug$1 , name___ASTPreprocessor__debug$1
dq  __ASTPreprocessor__processNode$1 , name___ASTPreprocessor__processNode$1
dq  __ASTPreprocessor_processNode$1 , name___ASTPreprocessor_processNode$1
dq  __ASTOptimizerConstantFolding_constructor$1 , name___ASTOptimizerConstantFolding_constructor$1
dq  __ASTOptimizerConstantFolding__debug$1 , name___ASTOptimizerConstantFolding__debug$1
dq  __ASTOptimizerConstantFolding__setToImm$2 , name___ASTOptimizerConstantFolding__setToImm$2
dq  __ASTOptimizerConstantFolding__processNodeArray$1 , name___ASTOptimizerConstantFolding__processNodeArray$1
dq  __ASTOptimizerConstantFolding__processNodeMap$1 , name___ASTOptimizerConstantFolding__processNodeMap$1
dq  __ASTOptimizerConstantFolding_processNode$1 , name___ASTOptimizerConstantFolding_processNode$1
dq  __ASTOptimizerConstantFolding_processNodeUntilNotChanged$1 , name___ASTOptimizerConstantFolding_processNodeUntilNotChanged$1
dq  __ASTOptimizerCSE_constructor$1 , name___ASTOptimizerCSE_constructor$1
dq  __ASTOptimizerCSE__getNextId$0 , name___ASTOptimizerCSE__getNextId$0
dq  __ASTOptimizerCSE__createNodeVariable$0 , name___ASTOptimizerCSE__createNodeVariable$0
dq  __ASTOptimizerCSE__debug$1 , name___ASTOptimizerCSE__debug$1
dq  __ASTOptimizerCSE__processInnerNode$3 , name___ASTOptimizerCSE__processInnerNode$3
dq  __ASTOptimizerCSE__processNode$3 , name___ASTOptimizerCSE__processNode$3
dq  __ASTOptimizerCSE_processNode$1 , name___ASTOptimizerCSE_processNode$1
dq  __ASTOptimizerDeadCodeRemove_constructor$1 , name___ASTOptimizerDeadCodeRemove_constructor$1
dq  __ASTOptimizerDeadCodeRemove__debug$1 , name___ASTOptimizerDeadCodeRemove__debug$1
dq  __ASTOptimizerDeadCodeRemove__removeNode$1 , name___ASTOptimizerDeadCodeRemove__removeNode$1
dq  __ASTOptimizerDeadCodeRemove__moveNode$2 , name___ASTOptimizerDeadCodeRemove__moveNode$2
dq  __ASTOptimizerDeadCodeRemove__processChildNodes$2 , name___ASTOptimizerDeadCodeRemove__processChildNodes$2
dq  __ASTOptimizerDeadCodeRemove__processNode$2 , name___ASTOptimizerDeadCodeRemove__processNode$2
dq  __ASTOptimizerDeadCodeRemove_processNode$1 , name___ASTOptimizerDeadCodeRemove_processNode$1
dq  __ASTOptimizerVCall_constructor$1 , name___ASTOptimizerVCall_constructor$1
dq  __ASTOptimizerVCall__debug$1 , name___ASTOptimizerVCall__debug$1
dq  __ASTOptimizerVCall__processNode$1 , name___ASTOptimizerVCall__processNode$1
dq  __ASTOptimizerVCall_processNode$1 , name___ASTOptimizerVCall_processNode$1
dq  __ASTOptimizerIf_constructor$1 , name___ASTOptimizerIf_constructor$1
dq  __ASTOptimizerIf__debug$1 , name___ASTOptimizerIf__debug$1
dq  __ASTOptimizerIf__processNode$1 , name___ASTOptimizerIf__processNode$1
dq  __ASTOptimizerIf_processNode$1 , name___ASTOptimizerIf_processNode$1
dq  __ASTOptimizerInline_constructor$1 , name___ASTOptimizerInline_constructor$1
dq  __ASTOptimizerInline__debug$1 , name___ASTOptimizerInline__debug$1
dq  __ASTOptimizerInline__expandCallParams$2 , name___ASTOptimizerInline__expandCallParams$2
dq  __ASTOptimizerInline__processNode$2 , name___ASTOptimizerInline__processNode$2
dq  __ASTOptimizerInline_processNode$1 , name___ASTOptimizerInline_processNode$1
dq  __ASTTypeCast_constructor$1 , name___ASTTypeCast_constructor$1
dq  __ASTTypeCast__debug$1 , name___ASTTypeCast__debug$1
dq  __ASTTypeCast__processNode$1 , name___ASTTypeCast__processNode$1
dq  __ASTTypeCast_processNode$1 , name___ASTTypeCast_processNode$1
dq  __MIRCode_constructor$0 , name___MIRCode_constructor$0
dq  __MIRCode_beginProc$4 , name___MIRCode_beginProc$4
dq  __MIRCode_endProc$0 , name___MIRCode_endProc$0
dq  __MIRCode_resolveLabel$1 , name___MIRCode_resolveLabel$1
dq  __MIRCode__resolveJmps$0 , name___MIRCode__resolveJmps$0
dq  __MIRCode_comment$1 , name___MIRCode_comment$1
dq  __MIRCode_push0$1 , name___MIRCode_push0$1
dq  __MIRCode_push1$2 , name___MIRCode_push1$2
dq  __MIRCode_push2$3 , name___MIRCode_push2$3
dq  __MIRCode_push3$4 , name___MIRCode_push3$4
dq  __MIRCode_nop$0 , name___MIRCode_nop$0
dq  __MIRCode_neg$0 , name___MIRCode_neg$0
dq  __MIRCode_add$0 , name___MIRCode_add$0
dq  __MIRCode_sub$0 , name___MIRCode_sub$0
dq  __MIRCode_mul$0 , name___MIRCode_mul$0
dq  __MIRCode_div$0 , name___MIRCode_div$0
dq  __MIRCode_idiv$0 , name___MIRCode_idiv$0
dq  __MIRCode_stringJoin$0 , name___MIRCode_stringJoin$0
dq  __MIRCode_loadNull$0 , name___MIRCode_loadNull$0
dq  __MIRCode_loadArray$0 , name___MIRCode_loadArray$0
dq  __MIRCode_loadMap$0 , name___MIRCode_loadMap$0
dq  __MIRCode_loadImm$1 , name___MIRCode_loadImm$1
dq  __MIRCode_cmpEQ$0 , name___MIRCode_cmpEQ$0
dq  __MIRCode_cmpNEQ$0 , name___MIRCode_cmpNEQ$0
dq  __MIRCode_cmpGT$0 , name___MIRCode_cmpGT$0
dq  __MIRCode_cmpGE$0 , name___MIRCode_cmpGE$0
dq  __MIRCode_cmpLT$0 , name___MIRCode_cmpLT$0
dq  __MIRCode_cmpLE$0 , name___MIRCode_cmpLE$0
dq  __MIRCode_loadLocal$1 , name___MIRCode_loadLocal$1
dq  __MIRCode_loadParamN$1 , name___MIRCode_loadParamN$1
dq  __MIRCode_loadGlobal$1 , name___MIRCode_loadGlobal$1
dq  __MIRCode_loadRetVal$0 , name___MIRCode_loadRetVal$0
dq  __MIRCode_loadFromIndex$0 , name___MIRCode_loadFromIndex$0
dq  __MIRCode_loadFromKey$0 , name___MIRCode_loadFromKey$0
dq  __MIRCode_allocateLocalId$0 , name___MIRCode_allocateLocalId$0
dq  __MIRCode_storeLocal$1 , name___MIRCode_storeLocal$1
dq  __MIRCode_storeParamN$1 , name___MIRCode_storeParamN$1
dq  __MIRCode_storeGlobal$1 , name___MIRCode_storeGlobal$1
dq  __MIRCode_storeRetVal$0 , name___MIRCode_storeRetVal$0
dq  __MIRCode_storeAtIndex$0 , name___MIRCode_storeAtIndex$0
dq  __MIRCode_storeAtKey$0 , name___MIRCode_storeAtKey$0
dq  __MIRCode_moveBack$0 , name___MIRCode_moveBack$0
dq  __MIRCode_drop$0 , name___MIRCode_drop$0
dq  __MIRCode_dropN$1 , name___MIRCode_dropN$1
dq  __MIRCode_dup$0 , name___MIRCode_dup$0
dq  __MIRCode_over$0 , name___MIRCode_over$0
dq  __MIRCode_loadArgc$0 , name___MIRCode_loadArgc$0
dq  __MIRCode_loadArgv$0 , name___MIRCode_loadArgv$0
dq  __MIRCode_createObject$1 , name___MIRCode_createObject$1
dq  __MIRCode__jmpInternal$2 , name___MIRCode__jmpInternal$2
dq  __MIRCode_jmp$1 , name___MIRCode_jmp$1
dq  __MIRCode_jmpIfTrue$1 , name___MIRCode_jmpIfTrue$1
dq  __MIRCode_jmpIfFalse$1 , name___MIRCode_jmpIfFalse$1
dq  __MIRCode_ret$1 , name___MIRCode_ret$1
dq  __MIRCode_innerRet$0 , name___MIRCode_innerRet$0
dq  __MIRCode_call$1 , name___MIRCode_call$1
dq  __MIRCode_vcall$2 , name___MIRCode_vcall$2
dq  __MIRCode_callPrint$1 , name___MIRCode_callPrint$1
dq  __MIRCode_initFrame$1 , name___MIRCode_initFrame$1
dq  __MIRCode_createLabel$0 , name___MIRCode_createLabel$0
dq  __MIRCode_emitLabel$1 , name___MIRCode_emitLabel$1
dq  __MIRCode_createAndEmitLabel$0 , name___MIRCode_createAndEmitLabel$0
dq  __MIRCode_createMethod$1 , name___MIRCode_createMethod$1
dq  __MIRCode_createClass$1 , name___MIRCode_createClass$1
dq  __MIRCode_getClassProtoById$1 , name___MIRCode_getClassProtoById$1
dq  __MIRCode_retValGuard$2 , name___MIRCode_retValGuard$2
dq  __MIRCode_forEachIndexes$3 , name___MIRCode_forEachIndexes$3
dq  __MIRCode_forEachKeys$3 , name___MIRCode_forEachKeys$3
dq  __MIRCode_syscall$2 , name___MIRCode_syscall$2
dq  __AppMold_constructor$0 , name___AppMold_constructor$0
dq  __AppMold_clearLogContext$0 , name___AppMold_clearLogContext$0
dq  __AppMold_setLogContext$1 , name___AppMold_setLogContext$1
dq  __AppMold_logDebug$1 , name___AppMold_logDebug$1
dq  __AppMold_logError$1 , name___AppMold_logError$1
dq  __AppMold_getMir1Code$0 , name___AppMold_getMir1Code$0
dq  __AppMold_getSymbolTable$0 , name___AppMold_getSymbolTable$0
dq  __AppMold_getAstSymbolsCollector$0 , name___AppMold_getAstSymbolsCollector$0
dq  __AppMold_getAstOptimizerConstantFolding$0 , name___AppMold_getAstOptimizerConstantFolding$0
dq  __AppMold_getAstPreprocessor$0 , name___AppMold_getAstPreprocessor$0
dq  __AppMold_getAstEvaluator$0 , name___AppMold_getAstEvaluator$0
dq  __AppMold_getAstOptimizerCSE$0 , name___AppMold_getAstOptimizerCSE$0
dq  __AppMold_getAstOptimizerDeadCodeRemove$0 , name___AppMold_getAstOptimizerDeadCodeRemove$0
dq  __AppMold_getAstOptimizerVCall$0 , name___AppMold_getAstOptimizerVCall$0
dq  __AppMold_getAstOptimizerIf$0 , name___AppMold_getAstOptimizerIf$0
dq  __AppMold_getAstOptimizerInline$0 , name___AppMold_getAstOptimizerInline$0
dq  __AppMold_getAstModuleResolver$0 , name___AppMold_getAstModuleResolver$0
dq  __AppMold_getAstTypeCast$0 , name___AppMold_getAstTypeCast$0
dq  __ASTPrinterText__printNode_twoArgsOp$2 , name___ASTPrinterText__printNode_twoArgsOp$2
dq  __ASTPrinterText__printNode_codeBlock$2 , name___ASTPrinterText__printNode_codeBlock$2
dq  __ASTPrinterText__printNode_paramsList$3 , name___ASTPrinterText__printNode_paramsList$3
dq  __ASTPrinterText__printNode$2 , name___ASTPrinterText__printNode$2
dq  __ASTPrinterText_printNode$1 , name___ASTPrinterText_printNode$1
dq  __ASTPrinterHtml__printSymbolTable$1 , name___ASTPrinterHtml__printSymbolTable$1
dq  __ASTPrinterHtml__printNode$1 , name___ASTPrinterHtml__printNode$1
dq  __ASTPrinterHtml_printNode$1 , name___ASTPrinterHtml_printNode$1
dq  __ASTTranslator_constructor$1 , name___ASTTranslator_constructor$1
dq  __ASTTranslator__debug$1 , name___ASTTranslator__debug$1
dq  __ASTTranslator__error$1 , name___ASTTranslator__error$1
dq  __ASTTranslator__loadArgsVector$1 , name___ASTTranslator__loadArgsVector$1
dq  __ASTTranslator__loadArgsCount$1 , name___ASTTranslator__loadArgsCount$1
dq  __ASTTranslator__syscall$4 , name___ASTTranslator__syscall$4
dq  __ASTTranslator__loadArray$1 , name___ASTTranslator__loadArray$1
dq  __ASTTranslator__loadMap$1 , name___ASTTranslator__loadMap$1
dq  __ASTTranslator__loadNull$1 , name___ASTTranslator__loadNull$1
dq  __ASTTranslator__loadImm$2 , name___ASTTranslator__loadImm$2
dq  __ASTTranslator__loadImmAsVariant$2 , name___ASTTranslator__loadImmAsVariant$2
dq  __ASTTranslator__loadVariable$1 , name___ASTTranslator__loadVariable$1
dq  __ASTTranslator__call$4 , name___ASTTranslator__call$4
dq  __ASTTranslator__invokeMethod$3 , name___ASTTranslator__invokeMethod$3
dq  __ASTTranslator__neg$2 , name___ASTTranslator__neg$2
dq  __ASTTranslator__add$3 , name___ASTTranslator__add$3
dq  __ASTTranslator__stringJoin$3 , name___ASTTranslator__stringJoin$3
dq  __ASTTranslator__sub$3 , name___ASTTranslator__sub$3
dq  __ASTTranslator__mul$3 , name___ASTTranslator__mul$3
dq  __ASTTranslator__div$3 , name___ASTTranslator__div$3
dq  __ASTTranslator__idiv$3 , name___ASTTranslator__idiv$3
dq  __ASTTranslator__compareEQ$3 , name___ASTTranslator__compareEQ$3
dq  __ASTTranslator__compareNEQ$3 , name___ASTTranslator__compareNEQ$3
dq  __ASTTranslator__compareLT$3 , name___ASTTranslator__compareLT$3
dq  __ASTTranslator__compareLE$3 , name___ASTTranslator__compareLE$3
dq  __ASTTranslator__compareGT$3 , name___ASTTranslator__compareGT$3
dq  __ASTTranslator__compareGE$3 , name___ASTTranslator__compareGE$3
dq  __ASTTranslator__boolAnd$3 , name___ASTTranslator__boolAnd$3
dq  __ASTTranslator__boolOr$3 , name___ASTTranslator__boolOr$3
dq  __ASTTranslator__isTypeOf$3 , name___ASTTranslator__isTypeOf$3
dq  __ASTTranslator__isNotTypeOf$3 , name___ASTTranslator__isNotTypeOf$3
dq  __ASTTranslator__loadFromIndex$3 , name___ASTTranslator__loadFromIndex$3
dq  __ASTTranslator__loadFromKey$3 , name___ASTTranslator__loadFromKey$3
dq  __ASTTranslator__storeAtIndex$3 , name___ASTTranslator__storeAtIndex$3
dq  __ASTTranslator__storeAtKey$3 , name___ASTTranslator__storeAtKey$3
dq  __ASTTranslator__storeAtIndexAndDrop$3 , name___ASTTranslator__storeAtIndexAndDrop$3
dq  __ASTTranslator__storeAtKeyAndDrop$3 , name___ASTTranslator__storeAtKeyAndDrop$3
dq  __ASTTranslator__createObject$2 , name___ASTTranslator__createObject$2
dq  __ASTTranslator__convert$4 , name___ASTTranslator__convert$4
dq  __ASTTranslator__emitFunctionBody$2 , name___ASTTranslator__emitFunctionBody$2
dq  __ASTTranslator__dropRetVal$0 , name___ASTTranslator__dropRetVal$0
dq  __ASTTranslator__declareFunction$2 , name___ASTTranslator__declareFunction$2
dq  __ASTTranslator__declareClass$2 , name___ASTTranslator__declareClass$2
dq  __ASTTranslator__declareVariable$1 , name___ASTTranslator__declareVariable$1
dq  __ASTTranslator__assign$2 , name___ASTTranslator__assign$2
dq  __ASTTranslator__evaluateNodeLazyBoolAnd$3 , name___ASTTranslator__evaluateNodeLazyBoolAnd$3
dq  __ASTTranslator__evaluateNodeLazyBoolOr$3 , name___ASTTranslator__evaluateNodeLazyBoolOr$3
dq  __ASTTranslator__executeNodeFor$5 , name___ASTTranslator__executeNodeFor$5
dq  __ASTTranslator__executeNodeForEach$5 , name___ASTTranslator__executeNodeForEach$5
dq  __ASTTranslator__executeNodeWhile$2 , name___ASTTranslator__executeNodeWhile$2
dq  __ASTTranslator__executeNodeIf$3 , name___ASTTranslator__executeNodeIf$3
dq  __ASTTranslator__executeNodeSwitch$1 , name___ASTTranslator__executeNodeSwitch$1
dq  __ASTTranslator__executeNodePrint$1 , name___ASTTranslator__executeNodePrint$1
dq  __ASTTranslator__declareExternalFunction$2 , name___ASTTranslator__declareExternalFunction$2
dq  __ASTTranslator__getTempVar$1 , name___ASTTranslator__getTempVar$1
dq  __ASTTranslator__getTempVarOrReuse$2 , name___ASTTranslator__getTempVarOrReuse$2
dq  __ASTTranslator__releaseTempVar$1 , name___ASTTranslator__releaseTempVar$1
dq  __ASTTranslator__enterScope$1 , name___ASTTranslator__enterScope$1
dq  __ASTTranslator__leaveScope$0 , name___ASTTranslator__leaveScope$0
dq  __ASTTranslator__verifyNumberOfParameters$3 , name___ASTTranslator__verifyNumberOfParameters$3
dq  __ASTTranslator__emitFunction$1 , name___ASTTranslator__emitFunction$1
dq  __ASTTranslator__emitGlobals$0 , name___ASTTranslator__emitGlobals$0
dq  __ASTTranslator__callSuper$3 , name___ASTTranslator__callSuper$3
dq  __ASTTranslator__getClassProto$1 , name___ASTTranslator__getClassProto$1
dq  __ASTTranslator__isset$1 , name___ASTTranslator__isset$1
dq  __ASTTranslator__importGlobal$1 , name___ASTTranslator__importGlobal$1
dq  __ASTTranslator__declareVariableIfNotSet$1 , name___ASTTranslator__declareVariableIfNotSet$1
dq  __ASTTranslator__declareAndAssign$2 , name___ASTTranslator__declareAndAssign$2
dq  __ASTTranslator__evaluateNode$1 , name___ASTTranslator__evaluateNode$1
dq  __ASTTranslator__evaluateNodeCall$2 , name___ASTTranslator__evaluateNodeCall$2
dq  __ASTTranslator__evaluateNodeInvokeMethod$2 , name___ASTTranslator__evaluateNodeInvokeMethod$2
dq  __ASTTranslator__executeNode$1 , name___ASTTranslator__executeNode$1
dq  __ASTTranslator_run$1 , name___ASTTranslator_run$1
dq  __ASTTranslatorMIR0_constructor$1 , name___ASTTranslatorMIR0_constructor$1
dq  __ASTTranslatorMIR0__loadArgsVector$0 , name___ASTTranslatorMIR0__loadArgsVector$0
dq  __ASTTranslatorMIR0__loadArgsCount$0 , name___ASTTranslatorMIR0__loadArgsCount$0
dq  __ASTTranslatorMIR0__neg$2 , name___ASTTranslatorMIR0__neg$2
dq  __ASTTranslatorMIR0__add$3 , name___ASTTranslatorMIR0__add$3
dq  __ASTTranslatorMIR0__stringJoin$3 , name___ASTTranslatorMIR0__stringJoin$3
dq  __ASTTranslatorMIR0__sub$3 , name___ASTTranslatorMIR0__sub$3
dq  __ASTTranslatorMIR0__mul$3 , name___ASTTranslatorMIR0__mul$3
dq  __ASTTranslatorMIR0__div$3 , name___ASTTranslatorMIR0__div$3
dq  __ASTTranslatorMIR0__idiv$3 , name___ASTTranslatorMIR0__idiv$3
dq  __ASTTranslatorMIR0__loadArray$1 , name___ASTTranslatorMIR0__loadArray$1
dq  __ASTTranslatorMIR0__loadMap$1 , name___ASTTranslatorMIR0__loadMap$1
dq  __ASTTranslatorMIR0__loadNull$1 , name___ASTTranslatorMIR0__loadNull$1
dq  __ASTTranslatorMIR0__loadImm$2 , name___ASTTranslatorMIR0__loadImm$2
dq  __ASTTranslatorMIR0__loadImmAsVariant$2 , name___ASTTranslatorMIR0__loadImmAsVariant$2
dq  __ASTTranslatorMIR0__convert$4 , name___ASTTranslatorMIR0__convert$4
dq  __ASTTranslatorMIR0__compareEQ$3 , name___ASTTranslatorMIR0__compareEQ$3
dq  __ASTTranslatorMIR0__compareNEQ$3 , name___ASTTranslatorMIR0__compareNEQ$3
dq  __ASTTranslatorMIR0__compareLT$3 , name___ASTTranslatorMIR0__compareLT$3
dq  __ASTTranslatorMIR0__compareLE$3 , name___ASTTranslatorMIR0__compareLE$3
dq  __ASTTranslatorMIR0__compareGT$3 , name___ASTTranslatorMIR0__compareGT$3
dq  __ASTTranslatorMIR0__compareGE$3 , name___ASTTranslatorMIR0__compareGE$3
dq  __ASTTranslatorMIR0__isTypeOf$3 , name___ASTTranslatorMIR0__isTypeOf$3
dq  __ASTTranslatorMIR0__isNotTypeOf$3 , name___ASTTranslatorMIR0__isNotTypeOf$3
dq  __ASTTranslatorMIR0__loadVariable$1 , name___ASTTranslatorMIR0__loadVariable$1
dq  __ASTTranslatorMIR0__assign$2 , name___ASTTranslatorMIR0__assign$2
dq  __ASTTranslatorMIR0__syscall$4 , name___ASTTranslatorMIR0__syscall$4
dq  __ASTTranslatorMIR0__call$4 , name___ASTTranslatorMIR0__call$4
dq  __ASTTranslatorMIR0__loadFromIndex$3 , name___ASTTranslatorMIR0__loadFromIndex$3
dq  __ASTTranslatorMIR0__loadFromKey$3 , name___ASTTranslatorMIR0__loadFromKey$3
dq  __ASTTranslatorMIR0__storeAtIndex$3 , name___ASTTranslatorMIR0__storeAtIndex$3
dq  __ASTTranslatorMIR0__storeAtKey$3 , name___ASTTranslatorMIR0__storeAtKey$3
dq  __ASTTranslatorMIR0__storeAtIndexAndDrop$3 , name___ASTTranslatorMIR0__storeAtIndexAndDrop$3
dq  __ASTTranslatorMIR0__storeAtKeyAndDrop$3 , name___ASTTranslatorMIR0__storeAtKeyAndDrop$3
dq  __ASTTranslatorMIR0__createObject$2 , name___ASTTranslatorMIR0__createObject$2
dq  __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3 , name___ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3
dq  __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3 , name___ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3
dq  __ASTTranslatorMIR0__invokeMethod$4 , name___ASTTranslatorMIR0__invokeMethod$4
dq  __ASTTranslatorMIR0__executeNodeFor$5 , name___ASTTranslatorMIR0__executeNodeFor$5
dq  __ASTTranslatorMIR0__executeNodeForEach$5 , name___ASTTranslatorMIR0__executeNodeForEach$5
dq  __ASTTranslatorMIR0__executeNodeWhile$2 , name___ASTTranslatorMIR0__executeNodeWhile$2
dq  __ASTTranslatorMIR0__executeNodeIf$3 , name___ASTTranslatorMIR0__executeNodeIf$3
dq  __ASTTranslatorMIR0__executeNodePrint$1 , name___ASTTranslatorMIR0__executeNodePrint$1
dq  __ASTTranslatorMIR0__declareFunction$2 , name___ASTTranslatorMIR0__declareFunction$2
dq  __ASTTranslatorMIR0__declareClass$2 , name___ASTTranslatorMIR0__declareClass$2
dq  __ASTTranslatorMIR0__emitFunctionBody$2 , name___ASTTranslatorMIR0__emitFunctionBody$2
dq  __ASTTranslatorMIR0__dropRetVal$0 , name___ASTTranslatorMIR0__dropRetVal$0
dq  __ASTTranslatorMIR0_run$1 , name___ASTTranslatorMIR0_run$1
dq  __Stack_constructor$0 , name___Stack_constructor$0
dq  __Stack_getItems$0 , name___Stack_getItems$0
dq  __Stack_push$1 , name___Stack_push$1
dq  __Stack_pop$0 , name___Stack_pop$0
dq  __Stack_over$0 , name___Stack_over$0
dq  __Stack_dup$0 , name___Stack_dup$0
dq  __Stack_eat$0 , name___Stack_eat$0
dq  __Stack_eatN$1 , name___Stack_eatN$1
dq  __Stack_setByAbsoluteIdx$2 , name___Stack_setByAbsoluteIdx$2
dq  __Stack_getByAbsoluteIdx$1 , name___Stack_getByAbsoluteIdx$1
dq  __Stack_peek$0 , name___Stack_peek$0
dq  __Stack_peekN$1 , name___Stack_peekN$1
dq  __ASTTranslatorMIR1_constructor$1 , name___ASTTranslatorMIR1_constructor$1
dq  __ASTTranslatorMIR1__emitOneItem$1 , name___ASTTranslatorMIR1__emitOneItem$1
dq  __ASTTranslatorMIR1_emitZeroArgsOpcode$1 , name___ASTTranslatorMIR1_emitZeroArgsOpcode$1
dq  __ASTTranslatorMIR1_emitTargetOnlyOpcode$2 , name___ASTTranslatorMIR1_emitTargetOnlyOpcode$2
dq  __ASTTranslatorMIR1_emitOneArgOpcode$3 , name___ASTTranslatorMIR1_emitOneArgOpcode$3
dq  __ASTTranslatorMIR1_emitTwoArgsOpcode$4 , name___ASTTranslatorMIR1_emitTwoArgsOpcode$4
dq  __ASTTranslatorMIR1_emitComment$1 , name___ASTTranslatorMIR1_emitComment$1
dq  __ASTTranslatorMIR1_emitLabel$1 , name___ASTTranslatorMIR1_emitLabel$1
dq  __ASTTranslatorMIR1_emitJmp$1 , name___ASTTranslatorMIR1_emitJmp$1
dq  __ASTTranslatorMIR1_emitJmpByTable$2 , name___ASTTranslatorMIR1_emitJmpByTable$2
dq  __ASTTranslatorMIR1_emitMoveVariantOpcode$2 , name___ASTTranslatorMIR1_emitMoveVariantOpcode$2
dq  __ASTTranslatorMIR1_popForRead$0 , name___ASTTranslatorMIR1_popForRead$0
dq  __ASTTranslatorMIR1_popForWrite$0 , name___ASTTranslatorMIR1_popForWrite$0
dq  __ASTTranslatorMIR1_push$1 , name___ASTTranslatorMIR1_push$1
dq  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$2 , name___ASTTranslatorMIR1_popOneArgAndEmitOpcode$2
dq  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2 , name___ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2
dq  __ASTTranslatorMIR1_popParametersBeforeCall$1 , name___ASTTranslatorMIR1_popParametersBeforeCall$1
dq  __ASTTranslatorMIR1_emitProcBegin$1 , name___ASTTranslatorMIR1_emitProcBegin$1
dq  __ASTTranslatorMIR1_emitInitFrame$1 , name___ASTTranslatorMIR1_emitInitFrame$1
dq  __ASTTranslatorMIR1_emitProcEnd$0 , name___ASTTranslatorMIR1_emitProcEnd$0
dq  __ASTTranslatorMIR1_emitRet$0 , name___ASTTranslatorMIR1_emitRet$0
dq  __ASTTranslatorMIR1_emitMoveBackVariant$0 , name___ASTTranslatorMIR1_emitMoveBackVariant$0
dq  __ASTTranslatorMIR1__loadArgsVector$0 , name___ASTTranslatorMIR1__loadArgsVector$0
dq  __ASTTranslatorMIR1__loadArgsCount$0 , name___ASTTranslatorMIR1__loadArgsCount$0
dq  __ASTTranslatorMIR1__neg$2 , name___ASTTranslatorMIR1__neg$2
dq  __ASTTranslatorMIR1__add$3 , name___ASTTranslatorMIR1__add$3
dq  __ASTTranslatorMIR1__stringJoin$3 , name___ASTTranslatorMIR1__stringJoin$3
dq  __ASTTranslatorMIR1__sub$3 , name___ASTTranslatorMIR1__sub$3
dq  __ASTTranslatorMIR1__mul$3 , name___ASTTranslatorMIR1__mul$3
dq  __ASTTranslatorMIR1__div$3 , name___ASTTranslatorMIR1__div$3
dq  __ASTTranslatorMIR1__idiv$3 , name___ASTTranslatorMIR1__idiv$3
dq  __ASTTranslatorMIR1__loadArray$1 , name___ASTTranslatorMIR1__loadArray$1
dq  __ASTTranslatorMIR1__loadMap$1 , name___ASTTranslatorMIR1__loadMap$1
dq  __ASTTranslatorMIR1__loadNull$1 , name___ASTTranslatorMIR1__loadNull$1
dq  __ASTTranslatorMIR1__loadImm$2 , name___ASTTranslatorMIR1__loadImm$2
dq  __ASTTranslatorMIR1__loadImmAsVariant$2 , name___ASTTranslatorMIR1__loadImmAsVariant$2
dq  __ASTTranslatorMIR1__convert$4 , name___ASTTranslatorMIR1__convert$4
dq  __ASTTranslatorMIR1__compareEQ$3 , name___ASTTranslatorMIR1__compareEQ$3
dq  __ASTTranslatorMIR1__compareNEQ$3 , name___ASTTranslatorMIR1__compareNEQ$3
dq  __ASTTranslatorMIR1__compareLT$3 , name___ASTTranslatorMIR1__compareLT$3
dq  __ASTTranslatorMIR1__compareLE$3 , name___ASTTranslatorMIR1__compareLE$3
dq  __ASTTranslatorMIR1__compareGT$3 , name___ASTTranslatorMIR1__compareGT$3
dq  __ASTTranslatorMIR1__compareGE$3 , name___ASTTranslatorMIR1__compareGE$3
dq  __ASTTranslatorMIR1__isTypeOf$3 , name___ASTTranslatorMIR1__isTypeOf$3
dq  __ASTTranslatorMIR1__isNotTypeOf$3 , name___ASTTranslatorMIR1__isNotTypeOf$3
dq  __ASTTranslatorMIR1__loadVariable$1 , name___ASTTranslatorMIR1__loadVariable$1
dq  __ASTTranslatorMIR1__assign$2 , name___ASTTranslatorMIR1__assign$2
dq  __ASTTranslatorMIR1__call$4 , name___ASTTranslatorMIR1__call$4
dq  __ASTTranslatorMIR1__syscall$4 , name___ASTTranslatorMIR1__syscall$4
dq  __ASTTranslatorMIR1__loadFromIndex$3 , name___ASTTranslatorMIR1__loadFromIndex$3
dq  __ASTTranslatorMIR1__loadFromKey$3 , name___ASTTranslatorMIR1__loadFromKey$3
dq  __ASTTranslatorMIR1__storeAtIndex$3 , name___ASTTranslatorMIR1__storeAtIndex$3
dq  __ASTTranslatorMIR1__storeAtKey$3 , name___ASTTranslatorMIR1__storeAtKey$3
dq  __ASTTranslatorMIR1__storeAtIndexAndDrop$3 , name___ASTTranslatorMIR1__storeAtIndexAndDrop$3
dq  __ASTTranslatorMIR1__storeAtKeyAndDrop$3 , name___ASTTranslatorMIR1__storeAtKeyAndDrop$3
dq  __ASTTranslatorMIR1__createObject$2 , name___ASTTranslatorMIR1__createObject$2
dq  __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3 , name___ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3
dq  __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3 , name___ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3
dq  __ASTTranslatorMIR1__invokeMethod$4 , name___ASTTranslatorMIR1__invokeMethod$4
dq  __ASTTranslatorMIR1__executeNodeFor$5 , name___ASTTranslatorMIR1__executeNodeFor$5
dq  __ASTTranslatorMIR1__executeNodeForEach$5 , name___ASTTranslatorMIR1__executeNodeForEach$5
dq  __ASTTranslatorMIR1__executeNodeWhile$2 , name___ASTTranslatorMIR1__executeNodeWhile$2
dq  __ASTTranslatorMIR1__executeNodeIf$3 , name___ASTTranslatorMIR1__executeNodeIf$3
dq  __ASTTranslatorMIR1__executeNodeSwitch$1 , name___ASTTranslatorMIR1__executeNodeSwitch$1
dq  __ASTTranslatorMIR1__evaluateStringFormatItemNode$2 , name___ASTTranslatorMIR1__evaluateStringFormatItemNode$2
dq  __ASTTranslatorMIR1__executeNodePrint$1 , name___ASTTranslatorMIR1__executeNodePrint$1
dq  __ASTTranslatorMIR1__declareFunction$2 , name___ASTTranslatorMIR1__declareFunction$2
dq  __ASTTranslatorMIR1__declareClass$2 , name___ASTTranslatorMIR1__declareClass$2
dq  __ASTTranslatorMIR1__emitFunctionBody$2 , name___ASTTranslatorMIR1__emitFunctionBody$2
dq  __ASTTranslatorMIR1__dropRetVal$0 , name___ASTTranslatorMIR1__dropRetVal$0
dq  __ASTTranslatorMIR1_run$1 , name___ASTTranslatorMIR1_run$1
dq  __ASTTranslatorMIR1_connectTo$1 , name___ASTTranslatorMIR1_connectTo$1
dq  __PipeAbstract_constructor$0 , name___PipeAbstract_constructor$0
dq  __PipeAbstract__emitOneItem$1 , name___PipeAbstract__emitOneItem$1
dq  __PipeAbstract__replaceLastItem$1 , name___PipeAbstract__replaceLastItem$1
dq  __PipeAbstract_connectTo$1 , name___PipeAbstract_connectTo$1
dq  __PipeAbstract_processOneItem$1 , name___PipeAbstract_processOneItem$1
dq  __PipeAbstract_processArrayOfItems$1 , name___PipeAbstract_processArrayOfItems$1
dq  __PipeAbstract_flush$0 , name___PipeAbstract_flush$0
dq  __MIRQuadCollector_constructor$0 , name___MIRQuadCollector_constructor$0
dq  __MIRQuadCollector__pad$2 , name___MIRQuadCollector__pad$2
dq  __MIRQuadCollector_processOneItem$1 , name___MIRQuadCollector_processOneItem$1
dq  __MIRQuadCollector_getQuads$0 , name___MIRQuadCollector_getQuads$0
dq  __MIRQuadCollector__printSymbolInfoRow$5 , name___MIRQuadCollector__printSymbolInfoRow$5
dq  __MIRQuadCollector__dumpFrameInfo$1 , name___MIRQuadCollector__dumpFrameInfo$1
dq  __MIRQuadCollector_printQuads$0 , name___MIRQuadCollector_printQuads$0
dq  __CodeGeneratorX64_constructor$0 , name___CodeGeneratorX64_constructor$0
dq  __CodeGeneratorX64_lea$2 , name___CodeGeneratorX64_lea$2
dq  __CodeGeneratorX64_push$1 , name___CodeGeneratorX64_push$1
dq  __CodeGeneratorX64_pop$1 , name___CodeGeneratorX64_pop$1
dq  __CodeGeneratorX64_mov$2 , name___CodeGeneratorX64_mov$2
dq  __CodeGeneratorX64_store$2 , name___CodeGeneratorX64_store$2
dq  __CodeGeneratorX64_store32$2 , name___CodeGeneratorX64_store32$2
dq  __CodeGeneratorX64_store64$2 , name___CodeGeneratorX64_store64$2
dq  __CodeGeneratorX64_call$1 , name___CodeGeneratorX64_call$1
dq  __CodeGeneratorX64_call1$2 , name___CodeGeneratorX64_call1$2
dq  __CodeGeneratorX64_call2$3 , name___CodeGeneratorX64_call2$3
dq  __CodeGeneratorX64_call3$4 , name___CodeGeneratorX64_call3$4
dq  __CodeGeneratorX64_call3AndDestroy$4 , name___CodeGeneratorX64_call3AndDestroy$4
dq  __CodeGeneratorX64_variantMove$2 , name___CodeGeneratorX64_variantMove$2
dq  __CodeGeneratorX64_variantDestroy$1 , name___CodeGeneratorX64_variantDestroy$1
dq  __CodeGeneratorX64_getVariableSize$1 , name___CodeGeneratorX64_getVariableSize$1
dq  __CodeGeneratorX64_pushOneParameterBeforeCall$2 , name___CodeGeneratorX64_pushOneParameterBeforeCall$2
dq  __CodeGeneratorX64_pushParametersBeforeCall$1 , name___CodeGeneratorX64_pushParametersBeforeCall$1
dq  __CodeGeneratorX64__hash$1 , name___CodeGeneratorX64__hash$1
dq  __CodeGeneratorX64_emitConstant$4 , name___CodeGeneratorX64_emitConstant$4
dq  __CodeGeneratorX64_emitStringBufferHead$4 , name___CodeGeneratorX64_emitStringBufferHead$4
dq  __CodeGeneratorX64_escapeString$1 , name___CodeGeneratorX64_escapeString$1
dq  __CodeGeneratorX64_emitStringBufferContent$4 , name___CodeGeneratorX64_emitStringBufferContent$4
dq  __CodeGeneratorX64_emitArrayBufferHead$4 , name___CodeGeneratorX64_emitArrayBufferHead$4
dq  __CodeGeneratorX64_emitArrayBufferContent$4 , name___CodeGeneratorX64_emitArrayBufferContent$4
dq  __CodeGeneratorX64__cmp_cc_int64$4 , name___CodeGeneratorX64__cmp_cc_int64$4
dq  __CodeGeneratorX64__cmp_cc_int32$4 , name___CodeGeneratorX64__cmp_cc_int32$4
dq  __CodeGeneratorX64__cmp_cc_float64$4 , name___CodeGeneratorX64__cmp_cc_float64$4
dq  __CodeGeneratorX64__jmp_if_cc_int64$4 , name___CodeGeneratorX64__jmp_if_cc_int64$4
dq  __CodeGeneratorX64__jmp_if_cc_int32$4 , name___CodeGeneratorX64__jmp_if_cc_int32$4
dq  __CodeGeneratorX64__jmp_if_cc_variant$4 , name___CodeGeneratorX64__jmp_if_cc_variant$4
dq  __CodeGeneratorX64__jmp_if_cc_float64$4 , name___CodeGeneratorX64__jmp_if_cc_float64$4
dq  __CodeGeneratorX64__alu2_float64$4 , name___CodeGeneratorX64__alu2_float64$4
dq  __CodeGeneratorX64__alu2_int32$4 , name___CodeGeneratorX64__alu2_int32$4
dq  __CodeGeneratorX64__alu2_int64$4 , name___CodeGeneratorX64__alu2_int64$4
dq  __CodeGeneratorX64__move_int32$2 , name___CodeGeneratorX64__move_int32$2
dq  __CodeGeneratorX64__move_int64$2 , name___CodeGeneratorX64__move_int64$2
dq  __CodeGeneratorX64__move_float64$2 , name___CodeGeneratorX64__move_float64$2
dq  __CodeGeneratorX64__loadString$2 , name___CodeGeneratorX64__loadString$2
dq  __CodeGeneratorX64__getSymbolType$2 , name___CodeGeneratorX64__getSymbolType$2
dq  __CodeGeneratorX64__syscall$1 , name___CodeGeneratorX64__syscall$1
dq  __CodeGeneratorX64_run$1 , name___CodeGeneratorX64_run$1
dq  __MIRQuadOptimizer_constructor$0 , name___MIRQuadOptimizer_constructor$0
dq  __MIRQuadOptimizer__decreaseReadAndWriteHits$1 , name___MIRQuadOptimizer__decreaseReadAndWriteHits$1
dq  __MIRQuadOptimizer_processOneItem$1 , name___MIRQuadOptimizer_processOneItem$1
dq  __VMachineStackObject_constructor$1 , name___VMachineStackObject_constructor$1
dq  __VMachineStack_constructor$0 , name___VMachineStack_constructor$0
dq  __VMachineStack_loadCode$1 , name___VMachineStack_loadCode$1
dq  __VMachineStack__call$1 , name___VMachineStack__call$1
dq  __VMachineStack_run$0 , name___VMachineStack_run$0
dq  __VMachineStack_dumpCode$0 , name___VMachineStack_dumpCode$0
dq  BadUsageError , name_BadUsageError
dq  start , name_start
dq endOfCodeSection, name_endOfCodeSection
SymbolTableEnd:
dq 0, 0

SymbolTableNames:
include 'x64\SymbolTableCommonNames.asm'
name___AST_constructor$3 db '__AST_constructor$3', 0
name___AST__printTreeInternal$2 db '__AST__printTreeInternal$2', 0
name___AST_printTree$0 db '__AST_printTree$0', 0
name___Parser_constructor$0 db '__Parser_constructor$0', 0
name___Parser__handleError$3 db '__Parser__handleError$3', 0
name___Parser__parseInternal$1 db '__Parser__parseInternal$1', 0
name___Parser_parseFile$1 db '__Parser_parseFile$1', 0
name___Parser_parseText$1 db '__Parser_parseText$1', 0
name_AST_GetNextId db 'AST_GetNextId', 0
name_AST_CreateNode db 'AST_CreateNode', 0
name_AST_CreateNodeVariable db 'AST_CreateNodeVariable', 0
name_AST_CreateNodeInteger db 'AST_CreateNodeInteger', 0
name_AST_CreateNodeString db 'AST_CreateNodeString', 0
name_AST_CreateNodeCall db 'AST_CreateNodeCall', 0
name_AST_CreateNodeBlock db 'AST_CreateNodeBlock', 0
name_AST_CreateNodeSysCall db 'AST_CreateNodeSysCall', 0
name_AST_GetOpcodeAsText db 'AST_GetOpcodeAsText', 0
name_AST_GetOpcodeAsShortText db 'AST_GetOpcodeAsShortText', 0
name_AST_InvertBoolean db 'AST_InvertBoolean', 0
name_AST_IsVar db 'AST_IsVar', 0
name_AST_IsImm db 'AST_IsImm', 0
name_AST_IsPrimitiveImm db 'AST_IsPrimitiveImm', 0
name_AST_IsImmWithValue db 'AST_IsImmWithValue', 0
name_AST_IsEmpty db 'AST_IsEmpty', 0
name_AST_IsImmOrVar db 'AST_IsImmOrVar', 0
name_AST_HasSideEffects db 'AST_HasSideEffects', 0
name_AST_GetHashInternal db 'AST_GetHashInternal', 0
name_AST_PrefetchHash db 'AST_PrefetchHash', 0
name_AST_GetHash db 'AST_GetHash', 0
name_AST_GetHashForCodeComparison db 'AST_GetHashForCodeComparison', 0
name_AST_IsDataNode db 'AST_IsDataNode', 0
name_AST_ConvertDataTypeToText db 'AST_ConvertDataTypeToText', 0
name_AST_ConvertDataTypeToMIR db 'AST_ConvertDataTypeToMIR', 0
name_AST_GetDataType db 'AST_GetDataType', 0
name_AST_TypeCast db 'AST_TypeCast', 0
name_AST_GetTopNodeInBlock db 'AST_GetTopNodeInBlock', 0
name_AST_GetParentBlock db 'AST_GetParentBlock', 0
name_AST_IsOkAsBox db 'AST_IsOkAsBox', 0
name_AST_CloneNode db 'AST_CloneNode', 0
name_SymbolTable_GetNextId db 'SymbolTable_GetNextId', 0
name___SymbolTable_constructor$1 db '__SymbolTable_constructor$1', 0
name___SymbolTable__debug$1 db '__SymbolTable__debug$1', 0
name___SymbolTable__error$1 db '__SymbolTable__error$1', 0
name___SymbolTable__errorTypeMismatch$2 db '__SymbolTable__errorTypeMismatch$2', 0
name___SymbolTable__errorIfUsedAsNumber$1 db '__SymbolTable__errorIfUsedAsNumber$1', 0
name___SymbolTable_getDeep$0 db '__SymbolTable_getDeep$0', 0
name___SymbolTable_exportSymbols$0 db '__SymbolTable_exportSymbols$0', 0
name___SymbolTable_insert$2 db '__SymbolTable_insert$2', 0
name___SymbolTable_remove$1 db '__SymbolTable_remove$1', 0
name___SymbolTable_importExternalVariable$1 db '__SymbolTable_importExternalVariable$1', 0
name___SymbolTable_insertGlobal$2 db '__SymbolTable_insertGlobal$2', 0
name___SymbolTable__lookupInternal$1 db '__SymbolTable__lookupInternal$1', 0
name___SymbolTable_lookup$1 db '__SymbolTable_lookup$1', 0
name___SymbolTable_lookupForRead$1 db '__SymbolTable_lookupForRead$1', 0
name___SymbolTable_lookupForCall$3 db '__SymbolTable_lookupForCall$3', 0
name___SymbolTable_lookupForWrite$1 db '__SymbolTable_lookupForWrite$1', 0
name___SymbolTable_lookupForReadAndWrite$1 db '__SymbolTable_lookupForReadAndWrite$1', 0
name___SymbolTable_lookupForWriteOrInsert$1 db '__SymbolTable_lookupForWriteOrInsert$1', 0
name___SymbolTable_lookupGlobal$1 db '__SymbolTable_lookupGlobal$1', 0
name___SymbolTable_decreaseReadHits$1 db '__SymbolTable_decreaseReadHits$1', 0
name___SymbolTable_decreaseWriteHits$1 db '__SymbolTable_decreaseWriteHits$1', 0
name___SymbolTable_isset$1 db '__SymbolTable_isset$1', 0
name___SymbolTable_useAsArray$1 db '__SymbolTable_useAsArray$1', 0
name___SymbolTable_useAsArrayOrString$1 db '__SymbolTable_useAsArrayOrString$1', 0
name___SymbolTable_useAsMap$1 db '__SymbolTable_useAsMap$1', 0
name___SymbolTable_useAsIndex$1 db '__SymbolTable_useAsIndex$1', 0
name___SymbolTable_useAsInteger$1 db '__SymbolTable_useAsInteger$1', 0
name___SymbolTable_useAsFloat$1 db '__SymbolTable_useAsFloat$1', 0
name___SymbolTable_useAsString$1 db '__SymbolTable_useAsString$1', 0
name___SymbolTable_useAsKey$1 db '__SymbolTable_useAsKey$1', 0
name___SymbolTable_useAsObject$1 db '__SymbolTable_useAsObject$1', 0
name___SymbolTable_useAsMapOrObject$1 db '__SymbolTable_useAsMapOrObject$1', 0
name___SymbolTable_useAsTypeofArg$1 db '__SymbolTable_useAsTypeofArg$1', 0
name___SymbolTable_useAsNumber$1 db '__SymbolTable_useAsNumber$1', 0
name___SymbolTable_enterScope$0 db '__SymbolTable_enterScope$0', 0
name___SymbolTable_enterScopeForLoop$0 db '__SymbolTable_enterScopeForLoop$0', 0
name___SymbolTable_enterScopeForProcedure$1 db '__SymbolTable_enterScopeForProcedure$1', 0
name___SymbolTable_leaveScope$0 db '__SymbolTable_leaveScope$0', 0
name___SymbolTable_insertFunction$2 db '__SymbolTable_insertFunction$2', 0
name___SymbolTable_lookupFunction$3 db '__SymbolTable_lookupFunction$3', 0
name___SymbolTable_getCurrentFunctionName$0 db '__SymbolTable_getCurrentFunctionName$0', 0
name___SymbolTable_insertClass$2 db '__SymbolTable_insertClass$2', 0
name___SymbolTable_lookupClass$1 db '__SymbolTable_lookupClass$1', 0
name___SymbolTable_insertLocal$1 db '__SymbolTable_insertLocal$1', 0
name___SymbolTable_importGlobal$1 db '__SymbolTable_importGlobal$1', 0
name___SymbolTable_insertParam$2 db '__SymbolTable_insertParam$2', 0
name___SymbolTable_insertRetVal$1 db '__SymbolTable_insertRetVal$1', 0
name___SymbolTable_insertConst$2 db '__SymbolTable_insertConst$2', 0
name___SymbolTable_insertLiteral$1 db '__SymbolTable_insertLiteral$1', 0
name___SymbolTable_lookupLiteralForRead$1 db '__SymbolTable_lookupLiteralForRead$1', 0
name___SymbolTable_createConstFromValue$1 db '__SymbolTable_createConstFromValue$1', 0
name___SymbolTable_assignValue$2 db '__SymbolTable_assignValue$2', 0
name___SymbolTable_assignNode$2 db '__SymbolTable_assignNode$2', 0
name___SymbolTable_assignType$2 db '__SymbolTable_assignType$2', 0
name___SymbolTable_freezeType$1 db '__SymbolTable_freezeType$1', 0
name___SymbolTable_assignTypeAndFreeze$2 db '__SymbolTable_assignTypeAndFreeze$2', 0
name___SymbolTable_assignMirType$2 db '__SymbolTable_assignMirType$2', 0
name___SymbolTable_removeUnusedSymbols$0 db '__SymbolTable_removeUnusedSymbols$0', 0
name___SymbolTable_createLabel$0 db '__SymbolTable_createLabel$0', 0
name___SymbolTable_insertJmpTable$1 db '__SymbolTable_insertJmpTable$1', 0
name___SymbolTable_getTempVar$1 db '__SymbolTable_getTempVar$1', 0
name___SymbolTable_getTempVarForWrite$1 db '__SymbolTable_getTempVarForWrite$1', 0
name___SymbolTable_getTempVarForReadAndWrite$1 db '__SymbolTable_getTempVarForReadAndWrite$1', 0
name___SymbolTable_releaseTempVar$1 db '__SymbolTable_releaseTempVar$1', 0
name___ASTModuleResolver_constructor$1 db '__ASTModuleResolver_constructor$1', 0
name___ASTModuleResolver_resolveImports$1 db '__ASTModuleResolver_resolveImports$1', 0
name___ASTSymbolsCollector_constructor$1 db '__ASTSymbolsCollector_constructor$1', 0
name___ASTSymbolsCollector__debug$1 db '__ASTSymbolsCollector__debug$1', 0
name___ASTSymbolsCollector__collectSymbolsFromLeftNode$2 db '__ASTSymbolsCollector__collectSymbolsFromLeftNode$2', 0
name___ASTSymbolsCollector__collectSymbolsFromRightNode$2 db '__ASTSymbolsCollector__collectSymbolsFromRightNode$2', 0
name___ASTSymbolsCollector__updateVariableSymbolInfo$3 db '__ASTSymbolsCollector__updateVariableSymbolInfo$3', 0
name___ASTSymbolsCollector__collectSymbols$3 db '__ASTSymbolsCollector__collectSymbols$3', 0
name___ASTSymbolsCollector_buildSymbolTable$1 db '__ASTSymbolsCollector_buildSymbolTable$1', 0
name___ASTEvaluator_constructor$1 db '__ASTEvaluator_constructor$1', 0
name___ASTEvaluator__debug$1 db '__ASTEvaluator__debug$1', 0
name___ASTEvaluator__assignValue$3 db '__ASTEvaluator__assignValue$3', 0
name___ASTEvaluator__getValue$2 db '__ASTEvaluator__getValue$2', 0
name___ASTEvaluator__mergeValues$2 db '__ASTEvaluator__mergeValues$2', 0
name___ASTEvaluator__processConditionalNode$2 db '__ASTEvaluator__processConditionalNode$2', 0
name___ASTEvaluator__processTwoAlternativeNodes$3 db '__ASTEvaluator__processTwoAlternativeNodes$3', 0
name___ASTEvaluator__getArrayOfValueNodes$1 db '__ASTEvaluator__getArrayOfValueNodes$1', 0
name___ASTEvaluator__processNode$2 db '__ASTEvaluator__processNode$2', 0
name___ASTEvaluator_processNode$1 db '__ASTEvaluator_processNode$1', 0
name___ASTPreprocessor_constructor$1 db '__ASTPreprocessor_constructor$1', 0
name___ASTPreprocessor__debug$1 db '__ASTPreprocessor__debug$1', 0
name___ASTPreprocessor__processNode$1 db '__ASTPreprocessor__processNode$1', 0
name___ASTPreprocessor_processNode$1 db '__ASTPreprocessor_processNode$1', 0
name___ASTOptimizerConstantFolding_constructor$1 db '__ASTOptimizerConstantFolding_constructor$1', 0
name___ASTOptimizerConstantFolding__debug$1 db '__ASTOptimizerConstantFolding__debug$1', 0
name___ASTOptimizerConstantFolding__setToImm$2 db '__ASTOptimizerConstantFolding__setToImm$2', 0
name___ASTOptimizerConstantFolding__processNodeArray$1 db '__ASTOptimizerConstantFolding__processNodeArray$1', 0
name___ASTOptimizerConstantFolding__processNodeMap$1 db '__ASTOptimizerConstantFolding__processNodeMap$1', 0
name___ASTOptimizerConstantFolding_processNode$1 db '__ASTOptimizerConstantFolding_processNode$1', 0
name___ASTOptimizerConstantFolding_processNodeUntilNotChanged$1 db '__ASTOptimizerConstantFolding_processNodeUntilNotChanged$1', 0
name___ASTOptimizerCSE_constructor$1 db '__ASTOptimizerCSE_constructor$1', 0
name___ASTOptimizerCSE__getNextId$0 db '__ASTOptimizerCSE__getNextId$0', 0
name___ASTOptimizerCSE__createNodeVariable$0 db '__ASTOptimizerCSE__createNodeVariable$0', 0
name___ASTOptimizerCSE__debug$1 db '__ASTOptimizerCSE__debug$1', 0
name___ASTOptimizerCSE__processInnerNode$3 db '__ASTOptimizerCSE__processInnerNode$3', 0
name___ASTOptimizerCSE__processNode$3 db '__ASTOptimizerCSE__processNode$3', 0
name___ASTOptimizerCSE_processNode$1 db '__ASTOptimizerCSE_processNode$1', 0
name___ASTOptimizerDeadCodeRemove_constructor$1 db '__ASTOptimizerDeadCodeRemove_constructor$1', 0
name___ASTOptimizerDeadCodeRemove__debug$1 db '__ASTOptimizerDeadCodeRemove__debug$1', 0
name___ASTOptimizerDeadCodeRemove__removeNode$1 db '__ASTOptimizerDeadCodeRemove__removeNode$1', 0
name___ASTOptimizerDeadCodeRemove__moveNode$2 db '__ASTOptimizerDeadCodeRemove__moveNode$2', 0
name___ASTOptimizerDeadCodeRemove__processChildNodes$2 db '__ASTOptimizerDeadCodeRemove__processChildNodes$2', 0
name___ASTOptimizerDeadCodeRemove__processNode$2 db '__ASTOptimizerDeadCodeRemove__processNode$2', 0
name___ASTOptimizerDeadCodeRemove_processNode$1 db '__ASTOptimizerDeadCodeRemove_processNode$1', 0
name___ASTOptimizerVCall_constructor$1 db '__ASTOptimizerVCall_constructor$1', 0
name___ASTOptimizerVCall__debug$1 db '__ASTOptimizerVCall__debug$1', 0
name___ASTOptimizerVCall__processNode$1 db '__ASTOptimizerVCall__processNode$1', 0
name___ASTOptimizerVCall_processNode$1 db '__ASTOptimizerVCall_processNode$1', 0
name___ASTOptimizerIf_constructor$1 db '__ASTOptimizerIf_constructor$1', 0
name___ASTOptimizerIf__debug$1 db '__ASTOptimizerIf__debug$1', 0
name___ASTOptimizerIf__processNode$1 db '__ASTOptimizerIf__processNode$1', 0
name___ASTOptimizerIf_processNode$1 db '__ASTOptimizerIf_processNode$1', 0
name___ASTOptimizerInline_constructor$1 db '__ASTOptimizerInline_constructor$1', 0
name___ASTOptimizerInline__debug$1 db '__ASTOptimizerInline__debug$1', 0
name___ASTOptimizerInline__expandCallParams$2 db '__ASTOptimizerInline__expandCallParams$2', 0
name___ASTOptimizerInline__processNode$2 db '__ASTOptimizerInline__processNode$2', 0
name___ASTOptimizerInline_processNode$1 db '__ASTOptimizerInline_processNode$1', 0
name___ASTTypeCast_constructor$1 db '__ASTTypeCast_constructor$1', 0
name___ASTTypeCast__debug$1 db '__ASTTypeCast__debug$1', 0
name___ASTTypeCast__processNode$1 db '__ASTTypeCast__processNode$1', 0
name___ASTTypeCast_processNode$1 db '__ASTTypeCast_processNode$1', 0
name___MIRCode_constructor$0 db '__MIRCode_constructor$0', 0
name___MIRCode_beginProc$4 db '__MIRCode_beginProc$4', 0
name___MIRCode_endProc$0 db '__MIRCode_endProc$0', 0
name___MIRCode_resolveLabel$1 db '__MIRCode_resolveLabel$1', 0
name___MIRCode__resolveJmps$0 db '__MIRCode__resolveJmps$0', 0
name___MIRCode_comment$1 db '__MIRCode_comment$1', 0
name___MIRCode_push0$1 db '__MIRCode_push0$1', 0
name___MIRCode_push1$2 db '__MIRCode_push1$2', 0
name___MIRCode_push2$3 db '__MIRCode_push2$3', 0
name___MIRCode_push3$4 db '__MIRCode_push3$4', 0
name___MIRCode_nop$0 db '__MIRCode_nop$0', 0
name___MIRCode_neg$0 db '__MIRCode_neg$0', 0
name___MIRCode_add$0 db '__MIRCode_add$0', 0
name___MIRCode_sub$0 db '__MIRCode_sub$0', 0
name___MIRCode_mul$0 db '__MIRCode_mul$0', 0
name___MIRCode_div$0 db '__MIRCode_div$0', 0
name___MIRCode_idiv$0 db '__MIRCode_idiv$0', 0
name___MIRCode_stringJoin$0 db '__MIRCode_stringJoin$0', 0
name___MIRCode_loadNull$0 db '__MIRCode_loadNull$0', 0
name___MIRCode_loadArray$0 db '__MIRCode_loadArray$0', 0
name___MIRCode_loadMap$0 db '__MIRCode_loadMap$0', 0
name___MIRCode_loadImm$1 db '__MIRCode_loadImm$1', 0
name___MIRCode_cmpEQ$0 db '__MIRCode_cmpEQ$0', 0
name___MIRCode_cmpNEQ$0 db '__MIRCode_cmpNEQ$0', 0
name___MIRCode_cmpGT$0 db '__MIRCode_cmpGT$0', 0
name___MIRCode_cmpGE$0 db '__MIRCode_cmpGE$0', 0
name___MIRCode_cmpLT$0 db '__MIRCode_cmpLT$0', 0
name___MIRCode_cmpLE$0 db '__MIRCode_cmpLE$0', 0
name___MIRCode_loadLocal$1 db '__MIRCode_loadLocal$1', 0
name___MIRCode_loadParamN$1 db '__MIRCode_loadParamN$1', 0
name___MIRCode_loadGlobal$1 db '__MIRCode_loadGlobal$1', 0
name___MIRCode_loadRetVal$0 db '__MIRCode_loadRetVal$0', 0
name___MIRCode_loadFromIndex$0 db '__MIRCode_loadFromIndex$0', 0
name___MIRCode_loadFromKey$0 db '__MIRCode_loadFromKey$0', 0
name___MIRCode_allocateLocalId$0 db '__MIRCode_allocateLocalId$0', 0
name___MIRCode_storeLocal$1 db '__MIRCode_storeLocal$1', 0
name___MIRCode_storeParamN$1 db '__MIRCode_storeParamN$1', 0
name___MIRCode_storeGlobal$1 db '__MIRCode_storeGlobal$1', 0
name___MIRCode_storeRetVal$0 db '__MIRCode_storeRetVal$0', 0
name___MIRCode_storeAtIndex$0 db '__MIRCode_storeAtIndex$0', 0
name___MIRCode_storeAtKey$0 db '__MIRCode_storeAtKey$0', 0
name___MIRCode_moveBack$0 db '__MIRCode_moveBack$0', 0
name___MIRCode_drop$0 db '__MIRCode_drop$0', 0
name___MIRCode_dropN$1 db '__MIRCode_dropN$1', 0
name___MIRCode_dup$0 db '__MIRCode_dup$0', 0
name___MIRCode_over$0 db '__MIRCode_over$0', 0
name___MIRCode_loadArgc$0 db '__MIRCode_loadArgc$0', 0
name___MIRCode_loadArgv$0 db '__MIRCode_loadArgv$0', 0
name___MIRCode_createObject$1 db '__MIRCode_createObject$1', 0
name___MIRCode__jmpInternal$2 db '__MIRCode__jmpInternal$2', 0
name___MIRCode_jmp$1 db '__MIRCode_jmp$1', 0
name___MIRCode_jmpIfTrue$1 db '__MIRCode_jmpIfTrue$1', 0
name___MIRCode_jmpIfFalse$1 db '__MIRCode_jmpIfFalse$1', 0
name___MIRCode_ret$1 db '__MIRCode_ret$1', 0
name___MIRCode_innerRet$0 db '__MIRCode_innerRet$0', 0
name___MIRCode_call$1 db '__MIRCode_call$1', 0
name___MIRCode_vcall$2 db '__MIRCode_vcall$2', 0
name___MIRCode_callPrint$1 db '__MIRCode_callPrint$1', 0
name___MIRCode_initFrame$1 db '__MIRCode_initFrame$1', 0
name___MIRCode_createLabel$0 db '__MIRCode_createLabel$0', 0
name___MIRCode_emitLabel$1 db '__MIRCode_emitLabel$1', 0
name___MIRCode_createAndEmitLabel$0 db '__MIRCode_createAndEmitLabel$0', 0
name___MIRCode_createMethod$1 db '__MIRCode_createMethod$1', 0
name___MIRCode_createClass$1 db '__MIRCode_createClass$1', 0
name___MIRCode_getClassProtoById$1 db '__MIRCode_getClassProtoById$1', 0
name___MIRCode_retValGuard$2 db '__MIRCode_retValGuard$2', 0
name___MIRCode_forEachIndexes$3 db '__MIRCode_forEachIndexes$3', 0
name___MIRCode_forEachKeys$3 db '__MIRCode_forEachKeys$3', 0
name___MIRCode_syscall$2 db '__MIRCode_syscall$2', 0
name___AppMold_constructor$0 db '__AppMold_constructor$0', 0
name___AppMold_clearLogContext$0 db '__AppMold_clearLogContext$0', 0
name___AppMold_setLogContext$1 db '__AppMold_setLogContext$1', 0
name___AppMold_logDebug$1 db '__AppMold_logDebug$1', 0
name___AppMold_logError$1 db '__AppMold_logError$1', 0
name___AppMold_getMir1Code$0 db '__AppMold_getMir1Code$0', 0
name___AppMold_getSymbolTable$0 db '__AppMold_getSymbolTable$0', 0
name___AppMold_getAstSymbolsCollector$0 db '__AppMold_getAstSymbolsCollector$0', 0
name___AppMold_getAstOptimizerConstantFolding$0 db '__AppMold_getAstOptimizerConstantFolding$0', 0
name___AppMold_getAstPreprocessor$0 db '__AppMold_getAstPreprocessor$0', 0
name___AppMold_getAstEvaluator$0 db '__AppMold_getAstEvaluator$0', 0
name___AppMold_getAstOptimizerCSE$0 db '__AppMold_getAstOptimizerCSE$0', 0
name___AppMold_getAstOptimizerDeadCodeRemove$0 db '__AppMold_getAstOptimizerDeadCodeRemove$0', 0
name___AppMold_getAstOptimizerVCall$0 db '__AppMold_getAstOptimizerVCall$0', 0
name___AppMold_getAstOptimizerIf$0 db '__AppMold_getAstOptimizerIf$0', 0
name___AppMold_getAstOptimizerInline$0 db '__AppMold_getAstOptimizerInline$0', 0
name___AppMold_getAstModuleResolver$0 db '__AppMold_getAstModuleResolver$0', 0
name___AppMold_getAstTypeCast$0 db '__AppMold_getAstTypeCast$0', 0
name___ASTPrinterText__printNode_twoArgsOp$2 db '__ASTPrinterText__printNode_twoArgsOp$2', 0
name___ASTPrinterText__printNode_codeBlock$2 db '__ASTPrinterText__printNode_codeBlock$2', 0
name___ASTPrinterText__printNode_paramsList$3 db '__ASTPrinterText__printNode_paramsList$3', 0
name___ASTPrinterText__printNode$2 db '__ASTPrinterText__printNode$2', 0
name___ASTPrinterText_printNode$1 db '__ASTPrinterText_printNode$1', 0
name___ASTPrinterHtml__printSymbolTable$1 db '__ASTPrinterHtml__printSymbolTable$1', 0
name___ASTPrinterHtml__printNode$1 db '__ASTPrinterHtml__printNode$1', 0
name___ASTPrinterHtml_printNode$1 db '__ASTPrinterHtml_printNode$1', 0
name___ASTTranslator_constructor$1 db '__ASTTranslator_constructor$1', 0
name___ASTTranslator__debug$1 db '__ASTTranslator__debug$1', 0
name___ASTTranslator__error$1 db '__ASTTranslator__error$1', 0
name___ASTTranslator__loadArgsVector$1 db '__ASTTranslator__loadArgsVector$1', 0
name___ASTTranslator__loadArgsCount$1 db '__ASTTranslator__loadArgsCount$1', 0
name___ASTTranslator__syscall$4 db '__ASTTranslator__syscall$4', 0
name___ASTTranslator__loadArray$1 db '__ASTTranslator__loadArray$1', 0
name___ASTTranslator__loadMap$1 db '__ASTTranslator__loadMap$1', 0
name___ASTTranslator__loadNull$1 db '__ASTTranslator__loadNull$1', 0
name___ASTTranslator__loadImm$2 db '__ASTTranslator__loadImm$2', 0
name___ASTTranslator__loadImmAsVariant$2 db '__ASTTranslator__loadImmAsVariant$2', 0
name___ASTTranslator__loadVariable$1 db '__ASTTranslator__loadVariable$1', 0
name___ASTTranslator__call$4 db '__ASTTranslator__call$4', 0
name___ASTTranslator__invokeMethod$3 db '__ASTTranslator__invokeMethod$3', 0
name___ASTTranslator__neg$2 db '__ASTTranslator__neg$2', 0
name___ASTTranslator__add$3 db '__ASTTranslator__add$3', 0
name___ASTTranslator__stringJoin$3 db '__ASTTranslator__stringJoin$3', 0
name___ASTTranslator__sub$3 db '__ASTTranslator__sub$3', 0
name___ASTTranslator__mul$3 db '__ASTTranslator__mul$3', 0
name___ASTTranslator__div$3 db '__ASTTranslator__div$3', 0
name___ASTTranslator__idiv$3 db '__ASTTranslator__idiv$3', 0
name___ASTTranslator__compareEQ$3 db '__ASTTranslator__compareEQ$3', 0
name___ASTTranslator__compareNEQ$3 db '__ASTTranslator__compareNEQ$3', 0
name___ASTTranslator__compareLT$3 db '__ASTTranslator__compareLT$3', 0
name___ASTTranslator__compareLE$3 db '__ASTTranslator__compareLE$3', 0
name___ASTTranslator__compareGT$3 db '__ASTTranslator__compareGT$3', 0
name___ASTTranslator__compareGE$3 db '__ASTTranslator__compareGE$3', 0
name___ASTTranslator__boolAnd$3 db '__ASTTranslator__boolAnd$3', 0
name___ASTTranslator__boolOr$3 db '__ASTTranslator__boolOr$3', 0
name___ASTTranslator__isTypeOf$3 db '__ASTTranslator__isTypeOf$3', 0
name___ASTTranslator__isNotTypeOf$3 db '__ASTTranslator__isNotTypeOf$3', 0
name___ASTTranslator__loadFromIndex$3 db '__ASTTranslator__loadFromIndex$3', 0
name___ASTTranslator__loadFromKey$3 db '__ASTTranslator__loadFromKey$3', 0
name___ASTTranslator__storeAtIndex$3 db '__ASTTranslator__storeAtIndex$3', 0
name___ASTTranslator__storeAtKey$3 db '__ASTTranslator__storeAtKey$3', 0
name___ASTTranslator__storeAtIndexAndDrop$3 db '__ASTTranslator__storeAtIndexAndDrop$3', 0
name___ASTTranslator__storeAtKeyAndDrop$3 db '__ASTTranslator__storeAtKeyAndDrop$3', 0
name___ASTTranslator__createObject$2 db '__ASTTranslator__createObject$2', 0
name___ASTTranslator__convert$4 db '__ASTTranslator__convert$4', 0
name___ASTTranslator__emitFunctionBody$2 db '__ASTTranslator__emitFunctionBody$2', 0
name___ASTTranslator__dropRetVal$0 db '__ASTTranslator__dropRetVal$0', 0
name___ASTTranslator__declareFunction$2 db '__ASTTranslator__declareFunction$2', 0
name___ASTTranslator__declareClass$2 db '__ASTTranslator__declareClass$2', 0
name___ASTTranslator__declareVariable$1 db '__ASTTranslator__declareVariable$1', 0
name___ASTTranslator__assign$2 db '__ASTTranslator__assign$2', 0
name___ASTTranslator__evaluateNodeLazyBoolAnd$3 db '__ASTTranslator__evaluateNodeLazyBoolAnd$3', 0
name___ASTTranslator__evaluateNodeLazyBoolOr$3 db '__ASTTranslator__evaluateNodeLazyBoolOr$3', 0
name___ASTTranslator__executeNodeFor$5 db '__ASTTranslator__executeNodeFor$5', 0
name___ASTTranslator__executeNodeForEach$5 db '__ASTTranslator__executeNodeForEach$5', 0
name___ASTTranslator__executeNodeWhile$2 db '__ASTTranslator__executeNodeWhile$2', 0
name___ASTTranslator__executeNodeIf$3 db '__ASTTranslator__executeNodeIf$3', 0
name___ASTTranslator__executeNodeSwitch$1 db '__ASTTranslator__executeNodeSwitch$1', 0
name___ASTTranslator__executeNodePrint$1 db '__ASTTranslator__executeNodePrint$1', 0
name___ASTTranslator__declareExternalFunction$2 db '__ASTTranslator__declareExternalFunction$2', 0
name___ASTTranslator__getTempVar$1 db '__ASTTranslator__getTempVar$1', 0
name___ASTTranslator__getTempVarOrReuse$2 db '__ASTTranslator__getTempVarOrReuse$2', 0
name___ASTTranslator__releaseTempVar$1 db '__ASTTranslator__releaseTempVar$1', 0
name___ASTTranslator__enterScope$1 db '__ASTTranslator__enterScope$1', 0
name___ASTTranslator__leaveScope$0 db '__ASTTranslator__leaveScope$0', 0
name___ASTTranslator__verifyNumberOfParameters$3 db '__ASTTranslator__verifyNumberOfParameters$3', 0
name___ASTTranslator__emitFunction$1 db '__ASTTranslator__emitFunction$1', 0
name___ASTTranslator__emitGlobals$0 db '__ASTTranslator__emitGlobals$0', 0
name___ASTTranslator__callSuper$3 db '__ASTTranslator__callSuper$3', 0
name___ASTTranslator__getClassProto$1 db '__ASTTranslator__getClassProto$1', 0
name___ASTTranslator__isset$1 db '__ASTTranslator__isset$1', 0
name___ASTTranslator__importGlobal$1 db '__ASTTranslator__importGlobal$1', 0
name___ASTTranslator__declareVariableIfNotSet$1 db '__ASTTranslator__declareVariableIfNotSet$1', 0
name___ASTTranslator__declareAndAssign$2 db '__ASTTranslator__declareAndAssign$2', 0
name___ASTTranslator__evaluateNode$1 db '__ASTTranslator__evaluateNode$1', 0
name___ASTTranslator__evaluateNodeCall$2 db '__ASTTranslator__evaluateNodeCall$2', 0
name___ASTTranslator__evaluateNodeInvokeMethod$2 db '__ASTTranslator__evaluateNodeInvokeMethod$2', 0
name___ASTTranslator__executeNode$1 db '__ASTTranslator__executeNode$1', 0
name___ASTTranslator_run$1 db '__ASTTranslator_run$1', 0
name___ASTTranslatorMIR0_constructor$1 db '__ASTTranslatorMIR0_constructor$1', 0
name___ASTTranslatorMIR0__loadArgsVector$0 db '__ASTTranslatorMIR0__loadArgsVector$0', 0
name___ASTTranslatorMIR0__loadArgsCount$0 db '__ASTTranslatorMIR0__loadArgsCount$0', 0
name___ASTTranslatorMIR0__neg$2 db '__ASTTranslatorMIR0__neg$2', 0
name___ASTTranslatorMIR0__add$3 db '__ASTTranslatorMIR0__add$3', 0
name___ASTTranslatorMIR0__stringJoin$3 db '__ASTTranslatorMIR0__stringJoin$3', 0
name___ASTTranslatorMIR0__sub$3 db '__ASTTranslatorMIR0__sub$3', 0
name___ASTTranslatorMIR0__mul$3 db '__ASTTranslatorMIR0__mul$3', 0
name___ASTTranslatorMIR0__div$3 db '__ASTTranslatorMIR0__div$3', 0
name___ASTTranslatorMIR0__idiv$3 db '__ASTTranslatorMIR0__idiv$3', 0
name___ASTTranslatorMIR0__loadArray$1 db '__ASTTranslatorMIR0__loadArray$1', 0
name___ASTTranslatorMIR0__loadMap$1 db '__ASTTranslatorMIR0__loadMap$1', 0
name___ASTTranslatorMIR0__loadNull$1 db '__ASTTranslatorMIR0__loadNull$1', 0
name___ASTTranslatorMIR0__loadImm$2 db '__ASTTranslatorMIR0__loadImm$2', 0
name___ASTTranslatorMIR0__loadImmAsVariant$2 db '__ASTTranslatorMIR0__loadImmAsVariant$2', 0
name___ASTTranslatorMIR0__convert$4 db '__ASTTranslatorMIR0__convert$4', 0
name___ASTTranslatorMIR0__compareEQ$3 db '__ASTTranslatorMIR0__compareEQ$3', 0
name___ASTTranslatorMIR0__compareNEQ$3 db '__ASTTranslatorMIR0__compareNEQ$3', 0
name___ASTTranslatorMIR0__compareLT$3 db '__ASTTranslatorMIR0__compareLT$3', 0
name___ASTTranslatorMIR0__compareLE$3 db '__ASTTranslatorMIR0__compareLE$3', 0
name___ASTTranslatorMIR0__compareGT$3 db '__ASTTranslatorMIR0__compareGT$3', 0
name___ASTTranslatorMIR0__compareGE$3 db '__ASTTranslatorMIR0__compareGE$3', 0
name___ASTTranslatorMIR0__isTypeOf$3 db '__ASTTranslatorMIR0__isTypeOf$3', 0
name___ASTTranslatorMIR0__isNotTypeOf$3 db '__ASTTranslatorMIR0__isNotTypeOf$3', 0
name___ASTTranslatorMIR0__loadVariable$1 db '__ASTTranslatorMIR0__loadVariable$1', 0
name___ASTTranslatorMIR0__assign$2 db '__ASTTranslatorMIR0__assign$2', 0
name___ASTTranslatorMIR0__syscall$4 db '__ASTTranslatorMIR0__syscall$4', 0
name___ASTTranslatorMIR0__call$4 db '__ASTTranslatorMIR0__call$4', 0
name___ASTTranslatorMIR0__loadFromIndex$3 db '__ASTTranslatorMIR0__loadFromIndex$3', 0
name___ASTTranslatorMIR0__loadFromKey$3 db '__ASTTranslatorMIR0__loadFromKey$3', 0
name___ASTTranslatorMIR0__storeAtIndex$3 db '__ASTTranslatorMIR0__storeAtIndex$3', 0
name___ASTTranslatorMIR0__storeAtKey$3 db '__ASTTranslatorMIR0__storeAtKey$3', 0
name___ASTTranslatorMIR0__storeAtIndexAndDrop$3 db '__ASTTranslatorMIR0__storeAtIndexAndDrop$3', 0
name___ASTTranslatorMIR0__storeAtKeyAndDrop$3 db '__ASTTranslatorMIR0__storeAtKeyAndDrop$3', 0
name___ASTTranslatorMIR0__createObject$2 db '__ASTTranslatorMIR0__createObject$2', 0
name___ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3 db '__ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$3', 0
name___ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3 db '__ASTTranslatorMIR0__evaluateNodeLazyBoolOr$3', 0
name___ASTTranslatorMIR0__invokeMethod$4 db '__ASTTranslatorMIR0__invokeMethod$4', 0
name___ASTTranslatorMIR0__executeNodeFor$5 db '__ASTTranslatorMIR0__executeNodeFor$5', 0
name___ASTTranslatorMIR0__executeNodeForEach$5 db '__ASTTranslatorMIR0__executeNodeForEach$5', 0
name___ASTTranslatorMIR0__executeNodeWhile$2 db '__ASTTranslatorMIR0__executeNodeWhile$2', 0
name___ASTTranslatorMIR0__executeNodeIf$3 db '__ASTTranslatorMIR0__executeNodeIf$3', 0
name___ASTTranslatorMIR0__executeNodePrint$1 db '__ASTTranslatorMIR0__executeNodePrint$1', 0
name___ASTTranslatorMIR0__declareFunction$2 db '__ASTTranslatorMIR0__declareFunction$2', 0
name___ASTTranslatorMIR0__declareClass$2 db '__ASTTranslatorMIR0__declareClass$2', 0
name___ASTTranslatorMIR0__emitFunctionBody$2 db '__ASTTranslatorMIR0__emitFunctionBody$2', 0
name___ASTTranslatorMIR0__dropRetVal$0 db '__ASTTranslatorMIR0__dropRetVal$0', 0
name___ASTTranslatorMIR0_run$1 db '__ASTTranslatorMIR0_run$1', 0
name___Stack_constructor$0 db '__Stack_constructor$0', 0
name___Stack_getItems$0 db '__Stack_getItems$0', 0
name___Stack_push$1 db '__Stack_push$1', 0
name___Stack_pop$0 db '__Stack_pop$0', 0
name___Stack_over$0 db '__Stack_over$0', 0
name___Stack_dup$0 db '__Stack_dup$0', 0
name___Stack_eat$0 db '__Stack_eat$0', 0
name___Stack_eatN$1 db '__Stack_eatN$1', 0
name___Stack_setByAbsoluteIdx$2 db '__Stack_setByAbsoluteIdx$2', 0
name___Stack_getByAbsoluteIdx$1 db '__Stack_getByAbsoluteIdx$1', 0
name___Stack_peek$0 db '__Stack_peek$0', 0
name___Stack_peekN$1 db '__Stack_peekN$1', 0
name___ASTTranslatorMIR1_constructor$1 db '__ASTTranslatorMIR1_constructor$1', 0
name___ASTTranslatorMIR1__emitOneItem$1 db '__ASTTranslatorMIR1__emitOneItem$1', 0
name___ASTTranslatorMIR1_emitZeroArgsOpcode$1 db '__ASTTranslatorMIR1_emitZeroArgsOpcode$1', 0
name___ASTTranslatorMIR1_emitTargetOnlyOpcode$2 db '__ASTTranslatorMIR1_emitTargetOnlyOpcode$2', 0
name___ASTTranslatorMIR1_emitOneArgOpcode$3 db '__ASTTranslatorMIR1_emitOneArgOpcode$3', 0
name___ASTTranslatorMIR1_emitTwoArgsOpcode$4 db '__ASTTranslatorMIR1_emitTwoArgsOpcode$4', 0
name___ASTTranslatorMIR1_emitComment$1 db '__ASTTranslatorMIR1_emitComment$1', 0
name___ASTTranslatorMIR1_emitLabel$1 db '__ASTTranslatorMIR1_emitLabel$1', 0
name___ASTTranslatorMIR1_emitJmp$1 db '__ASTTranslatorMIR1_emitJmp$1', 0
name___ASTTranslatorMIR1_emitJmpByTable$2 db '__ASTTranslatorMIR1_emitJmpByTable$2', 0
name___ASTTranslatorMIR1_emitMoveVariantOpcode$2 db '__ASTTranslatorMIR1_emitMoveVariantOpcode$2', 0
name___ASTTranslatorMIR1_popForRead$0 db '__ASTTranslatorMIR1_popForRead$0', 0
name___ASTTranslatorMIR1_popForWrite$0 db '__ASTTranslatorMIR1_popForWrite$0', 0
name___ASTTranslatorMIR1_push$1 db '__ASTTranslatorMIR1_push$1', 0
name___ASTTranslatorMIR1_popOneArgAndEmitOpcode$2 db '__ASTTranslatorMIR1_popOneArgAndEmitOpcode$2', 0
name___ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2 db '__ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$2', 0
name___ASTTranslatorMIR1_popParametersBeforeCall$1 db '__ASTTranslatorMIR1_popParametersBeforeCall$1', 0
name___ASTTranslatorMIR1_emitProcBegin$1 db '__ASTTranslatorMIR1_emitProcBegin$1', 0
name___ASTTranslatorMIR1_emitInitFrame$1 db '__ASTTranslatorMIR1_emitInitFrame$1', 0
name___ASTTranslatorMIR1_emitProcEnd$0 db '__ASTTranslatorMIR1_emitProcEnd$0', 0
name___ASTTranslatorMIR1_emitRet$0 db '__ASTTranslatorMIR1_emitRet$0', 0
name___ASTTranslatorMIR1_emitMoveBackVariant$0 db '__ASTTranslatorMIR1_emitMoveBackVariant$0', 0
name___ASTTranslatorMIR1__loadArgsVector$0 db '__ASTTranslatorMIR1__loadArgsVector$0', 0
name___ASTTranslatorMIR1__loadArgsCount$0 db '__ASTTranslatorMIR1__loadArgsCount$0', 0
name___ASTTranslatorMIR1__neg$2 db '__ASTTranslatorMIR1__neg$2', 0
name___ASTTranslatorMIR1__add$3 db '__ASTTranslatorMIR1__add$3', 0
name___ASTTranslatorMIR1__stringJoin$3 db '__ASTTranslatorMIR1__stringJoin$3', 0
name___ASTTranslatorMIR1__sub$3 db '__ASTTranslatorMIR1__sub$3', 0
name___ASTTranslatorMIR1__mul$3 db '__ASTTranslatorMIR1__mul$3', 0
name___ASTTranslatorMIR1__div$3 db '__ASTTranslatorMIR1__div$3', 0
name___ASTTranslatorMIR1__idiv$3 db '__ASTTranslatorMIR1__idiv$3', 0
name___ASTTranslatorMIR1__loadArray$1 db '__ASTTranslatorMIR1__loadArray$1', 0
name___ASTTranslatorMIR1__loadMap$1 db '__ASTTranslatorMIR1__loadMap$1', 0
name___ASTTranslatorMIR1__loadNull$1 db '__ASTTranslatorMIR1__loadNull$1', 0
name___ASTTranslatorMIR1__loadImm$2 db '__ASTTranslatorMIR1__loadImm$2', 0
name___ASTTranslatorMIR1__loadImmAsVariant$2 db '__ASTTranslatorMIR1__loadImmAsVariant$2', 0
name___ASTTranslatorMIR1__convert$4 db '__ASTTranslatorMIR1__convert$4', 0
name___ASTTranslatorMIR1__compareEQ$3 db '__ASTTranslatorMIR1__compareEQ$3', 0
name___ASTTranslatorMIR1__compareNEQ$3 db '__ASTTranslatorMIR1__compareNEQ$3', 0
name___ASTTranslatorMIR1__compareLT$3 db '__ASTTranslatorMIR1__compareLT$3', 0
name___ASTTranslatorMIR1__compareLE$3 db '__ASTTranslatorMIR1__compareLE$3', 0
name___ASTTranslatorMIR1__compareGT$3 db '__ASTTranslatorMIR1__compareGT$3', 0
name___ASTTranslatorMIR1__compareGE$3 db '__ASTTranslatorMIR1__compareGE$3', 0
name___ASTTranslatorMIR1__isTypeOf$3 db '__ASTTranslatorMIR1__isTypeOf$3', 0
name___ASTTranslatorMIR1__isNotTypeOf$3 db '__ASTTranslatorMIR1__isNotTypeOf$3', 0
name___ASTTranslatorMIR1__loadVariable$1 db '__ASTTranslatorMIR1__loadVariable$1', 0
name___ASTTranslatorMIR1__assign$2 db '__ASTTranslatorMIR1__assign$2', 0
name___ASTTranslatorMIR1__call$4 db '__ASTTranslatorMIR1__call$4', 0
name___ASTTranslatorMIR1__syscall$4 db '__ASTTranslatorMIR1__syscall$4', 0
name___ASTTranslatorMIR1__loadFromIndex$3 db '__ASTTranslatorMIR1__loadFromIndex$3', 0
name___ASTTranslatorMIR1__loadFromKey$3 db '__ASTTranslatorMIR1__loadFromKey$3', 0
name___ASTTranslatorMIR1__storeAtIndex$3 db '__ASTTranslatorMIR1__storeAtIndex$3', 0
name___ASTTranslatorMIR1__storeAtKey$3 db '__ASTTranslatorMIR1__storeAtKey$3', 0
name___ASTTranslatorMIR1__storeAtIndexAndDrop$3 db '__ASTTranslatorMIR1__storeAtIndexAndDrop$3', 0
name___ASTTranslatorMIR1__storeAtKeyAndDrop$3 db '__ASTTranslatorMIR1__storeAtKeyAndDrop$3', 0
name___ASTTranslatorMIR1__createObject$2 db '__ASTTranslatorMIR1__createObject$2', 0
name___ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3 db '__ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$3', 0
name___ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3 db '__ASTTranslatorMIR1__evaluateNodeLazyBoolOr$3', 0
name___ASTTranslatorMIR1__invokeMethod$4 db '__ASTTranslatorMIR1__invokeMethod$4', 0
name___ASTTranslatorMIR1__executeNodeFor$5 db '__ASTTranslatorMIR1__executeNodeFor$5', 0
name___ASTTranslatorMIR1__executeNodeForEach$5 db '__ASTTranslatorMIR1__executeNodeForEach$5', 0
name___ASTTranslatorMIR1__executeNodeWhile$2 db '__ASTTranslatorMIR1__executeNodeWhile$2', 0
name___ASTTranslatorMIR1__executeNodeIf$3 db '__ASTTranslatorMIR1__executeNodeIf$3', 0
name___ASTTranslatorMIR1__executeNodeSwitch$1 db '__ASTTranslatorMIR1__executeNodeSwitch$1', 0
name___ASTTranslatorMIR1__evaluateStringFormatItemNode$2 db '__ASTTranslatorMIR1__evaluateStringFormatItemNode$2', 0
name___ASTTranslatorMIR1__executeNodePrint$1 db '__ASTTranslatorMIR1__executeNodePrint$1', 0
name___ASTTranslatorMIR1__declareFunction$2 db '__ASTTranslatorMIR1__declareFunction$2', 0
name___ASTTranslatorMIR1__declareClass$2 db '__ASTTranslatorMIR1__declareClass$2', 0
name___ASTTranslatorMIR1__emitFunctionBody$2 db '__ASTTranslatorMIR1__emitFunctionBody$2', 0
name___ASTTranslatorMIR1__dropRetVal$0 db '__ASTTranslatorMIR1__dropRetVal$0', 0
name___ASTTranslatorMIR1_run$1 db '__ASTTranslatorMIR1_run$1', 0
name___ASTTranslatorMIR1_connectTo$1 db '__ASTTranslatorMIR1_connectTo$1', 0
name___PipeAbstract_constructor$0 db '__PipeAbstract_constructor$0', 0
name___PipeAbstract__emitOneItem$1 db '__PipeAbstract__emitOneItem$1', 0
name___PipeAbstract__replaceLastItem$1 db '__PipeAbstract__replaceLastItem$1', 0
name___PipeAbstract_connectTo$1 db '__PipeAbstract_connectTo$1', 0
name___PipeAbstract_processOneItem$1 db '__PipeAbstract_processOneItem$1', 0
name___PipeAbstract_processArrayOfItems$1 db '__PipeAbstract_processArrayOfItems$1', 0
name___PipeAbstract_flush$0 db '__PipeAbstract_flush$0', 0
name___MIRQuadCollector_constructor$0 db '__MIRQuadCollector_constructor$0', 0
name___MIRQuadCollector__pad$2 db '__MIRQuadCollector__pad$2', 0
name___MIRQuadCollector_processOneItem$1 db '__MIRQuadCollector_processOneItem$1', 0
name___MIRQuadCollector_getQuads$0 db '__MIRQuadCollector_getQuads$0', 0
name___MIRQuadCollector__printSymbolInfoRow$5 db '__MIRQuadCollector__printSymbolInfoRow$5', 0
name___MIRQuadCollector__dumpFrameInfo$1 db '__MIRQuadCollector__dumpFrameInfo$1', 0
name___MIRQuadCollector_printQuads$0 db '__MIRQuadCollector_printQuads$0', 0
name___CodeGeneratorX64_constructor$0 db '__CodeGeneratorX64_constructor$0', 0
name___CodeGeneratorX64_lea$2 db '__CodeGeneratorX64_lea$2', 0
name___CodeGeneratorX64_push$1 db '__CodeGeneratorX64_push$1', 0
name___CodeGeneratorX64_pop$1 db '__CodeGeneratorX64_pop$1', 0
name___CodeGeneratorX64_mov$2 db '__CodeGeneratorX64_mov$2', 0
name___CodeGeneratorX64_store$2 db '__CodeGeneratorX64_store$2', 0
name___CodeGeneratorX64_store32$2 db '__CodeGeneratorX64_store32$2', 0
name___CodeGeneratorX64_store64$2 db '__CodeGeneratorX64_store64$2', 0
name___CodeGeneratorX64_call$1 db '__CodeGeneratorX64_call$1', 0
name___CodeGeneratorX64_call1$2 db '__CodeGeneratorX64_call1$2', 0
name___CodeGeneratorX64_call2$3 db '__CodeGeneratorX64_call2$3', 0
name___CodeGeneratorX64_call3$4 db '__CodeGeneratorX64_call3$4', 0
name___CodeGeneratorX64_call3AndDestroy$4 db '__CodeGeneratorX64_call3AndDestroy$4', 0
name___CodeGeneratorX64_variantMove$2 db '__CodeGeneratorX64_variantMove$2', 0
name___CodeGeneratorX64_variantDestroy$1 db '__CodeGeneratorX64_variantDestroy$1', 0
name___CodeGeneratorX64_getVariableSize$1 db '__CodeGeneratorX64_getVariableSize$1', 0
name___CodeGeneratorX64_pushOneParameterBeforeCall$2 db '__CodeGeneratorX64_pushOneParameterBeforeCall$2', 0
name___CodeGeneratorX64_pushParametersBeforeCall$1 db '__CodeGeneratorX64_pushParametersBeforeCall$1', 0
name___CodeGeneratorX64__hash$1 db '__CodeGeneratorX64__hash$1', 0
name___CodeGeneratorX64_emitConstant$4 db '__CodeGeneratorX64_emitConstant$4', 0
name___CodeGeneratorX64_emitStringBufferHead$4 db '__CodeGeneratorX64_emitStringBufferHead$4', 0
name___CodeGeneratorX64_escapeString$1 db '__CodeGeneratorX64_escapeString$1', 0
name___CodeGeneratorX64_emitStringBufferContent$4 db '__CodeGeneratorX64_emitStringBufferContent$4', 0
name___CodeGeneratorX64_emitArrayBufferHead$4 db '__CodeGeneratorX64_emitArrayBufferHead$4', 0
name___CodeGeneratorX64_emitArrayBufferContent$4 db '__CodeGeneratorX64_emitArrayBufferContent$4', 0
name___CodeGeneratorX64__cmp_cc_int64$4 db '__CodeGeneratorX64__cmp_cc_int64$4', 0
name___CodeGeneratorX64__cmp_cc_int32$4 db '__CodeGeneratorX64__cmp_cc_int32$4', 0
name___CodeGeneratorX64__cmp_cc_float64$4 db '__CodeGeneratorX64__cmp_cc_float64$4', 0
name___CodeGeneratorX64__jmp_if_cc_int64$4 db '__CodeGeneratorX64__jmp_if_cc_int64$4', 0
name___CodeGeneratorX64__jmp_if_cc_int32$4 db '__CodeGeneratorX64__jmp_if_cc_int32$4', 0
name___CodeGeneratorX64__jmp_if_cc_variant$4 db '__CodeGeneratorX64__jmp_if_cc_variant$4', 0
name___CodeGeneratorX64__jmp_if_cc_float64$4 db '__CodeGeneratorX64__jmp_if_cc_float64$4', 0
name___CodeGeneratorX64__alu2_float64$4 db '__CodeGeneratorX64__alu2_float64$4', 0
name___CodeGeneratorX64__alu2_int32$4 db '__CodeGeneratorX64__alu2_int32$4', 0
name___CodeGeneratorX64__alu2_int64$4 db '__CodeGeneratorX64__alu2_int64$4', 0
name___CodeGeneratorX64__move_int32$2 db '__CodeGeneratorX64__move_int32$2', 0
name___CodeGeneratorX64__move_int64$2 db '__CodeGeneratorX64__move_int64$2', 0
name___CodeGeneratorX64__move_float64$2 db '__CodeGeneratorX64__move_float64$2', 0
name___CodeGeneratorX64__loadString$2 db '__CodeGeneratorX64__loadString$2', 0
name___CodeGeneratorX64__getSymbolType$2 db '__CodeGeneratorX64__getSymbolType$2', 0
name___CodeGeneratorX64__syscall$1 db '__CodeGeneratorX64__syscall$1', 0
name___CodeGeneratorX64_run$1 db '__CodeGeneratorX64_run$1', 0
name___MIRQuadOptimizer_constructor$0 db '__MIRQuadOptimizer_constructor$0', 0
name___MIRQuadOptimizer__decreaseReadAndWriteHits$1 db '__MIRQuadOptimizer__decreaseReadAndWriteHits$1', 0
name___MIRQuadOptimizer_processOneItem$1 db '__MIRQuadOptimizer_processOneItem$1', 0
name___VMachineStackObject_constructor$1 db '__VMachineStackObject_constructor$1', 0
name___VMachineStack_constructor$0 db '__VMachineStack_constructor$0', 0
name___VMachineStack_loadCode$1 db '__VMachineStack_loadCode$1', 0
name___VMachineStack__call$1 db '__VMachineStack__call$1', 0
name___VMachineStack_run$0 db '__VMachineStack_run$0', 0
name___VMachineStack_dumpCode$0 db '__VMachineStack_dumpCode$0', 0
name_BadUsageError db 'BadUsageError', 0
name_start db 'start', 0
name_endOfCodeSection db 'out of code section', 0
