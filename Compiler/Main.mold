################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki (sw143@wp.pl)                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

DEBUG_AST_OPTIMIZER = false

import 'AST/AST.mold'
import 'Parser/ParserMold.mold'

import 'AppMold.mold'
import 'AST/ASTSymbolsCollector.mold'
import 'AST/ASTPrinterText.mold'
import 'AST/ASTPrinterHtml.mold'
import 'AST/ASTTranslatorMIR0.mold'
import 'AST/ASTTranslatorMIR1.mold'
import 'MIR/MIRQuadCollector.mold'
import 'CodeGenerator/CodeGeneratorX64.mold'
import 'MIR/MIRQuadOptimizer.mold'
import 'VM/VMachineStack.mold'

VERSION_STRING = '0.2.200722'

# ------------------------------------------------------------------------------
#                              Helper functions
# ------------------------------------------------------------------------------

function BadUsageError()
  global VERSION_STRING

  print 'Mold version', VERSION_STRING
  print 'Usage:'
  print '  mold [-c] [--asm] [--mir0] [--mir] [--profiler] <input.mold>'
  exit()
endfunction

# ------------------------------------------------------------------------------
#                                Entry point
# ------------------------------------------------------------------------------

#
# Parse command line parameters.
#

mode = 'interpreter'
path = ''
optimizationLevel = 0
isProfilerEnabled = false

for idx in 1 .. argc
  if argv[idx] is '-c'
    # Compiler mode
    # mold -c <file.mold>
    mode = 'compiler'
    print 'Error: compiler mode not implemented yet.'
    print 'Try --asm option and assemble result on by own.'
    exit()

  elif argv[idx] is '--asm'
    # Generate assembler output
    mode = 'asm'

  elif argv[idx] is '--mir0'
    # Generate MIR0 output (stack based)
    mode = 'mir0'

  elif (argv[idx] is '--mir') or (argv[idx] is '--mir1')
    # Generate MIR1 output (register based)
    mode = 'mir1'

  elif argv[idx] is '--ast'
    # Show AST tree
    mode = 'ast'

  elif argv[idx] is '--astjson'
    # Show AST tree as JSON.
    mode = 'astjson'

  elif argv[idx] is '--prettyPrinter'
    # Show parsed mold code
    mode = 'prettyPrinter'

  elif argv[idx] is '--debug-parser'
    # Enable debug logs
    UNICC_DEBUG = true

  elif argv[idx] is '--debug'
    DEBUG_AST_OPTIMIZER = true
    DEBUG_MOLD          = true

  elif argv[idx] is '-O0'
    optimizationLevel = 0

  elif argv[idx] is '-O1'
    optimizationLevel = 1

  elif argv[idx] is '-O2'
    optimizationLevel = 2

  elif argv[idx] is '-O3'
    optimizationLevel = 3

  elif argv[idx] is '--profiler'
    # Add extra profilling code
    isProfilerEnabled = true

  elif argv[idx][0] is '-'
    # Unknown -x switch.
    BadUsageError()

  else
    # Unkown option - treat as filename.
    path = argv[idx]
  endif
endfor

if path is ''
  BadUsageError()
endif

#
# Load input file and build Abstract Syntax Tree (AST)
#

app = new AppMold()

app.logDebug('Creating parser object...')
parser = new Parser()

app.logDebug('Parsing source...')
ast = parser.parseFile(path)

#
# Dispatch working mode.
#

if mode is 'ast'
  # Print AST only.
  ast.printTree()

elif mode is 'astjson'
  # Print AST, but in importable JSON format.
  die('temporary disabled due to missing object printing')

else
  # Resolve imports if any.
  app.logDebug('Resolving imports...')
  astModuleResolver = app.getAstModuleResolver()
  astModuleResolver.resolveImports(ast)

  # Preprocess AST to expand built-in constructions.
  # Example: x is defined => typeof(x) isnt 'undefined'
  app.logDebug('Preprocessing AST...')
  app.getAstPreprocessor().processNode(ast)

  # Build symbol table.
  app.logDebug('Building symbol table...')
  astSymbolsCollector = app.getAstSymbolsCollector()
  astSymbolsCollector.buildSymbolTable(ast)

  # Optimize AST if needed.
  app.logDebug('Optimizing AST...')

  if optimizationLevel is 0
    # No optimization - do nothing.
    # TODO: Why we need call evaluate here?
    # (Newton method test failed without it)
    app.logDebug('Evaluating AST nodes...')
    app.getAstEvaluator().processNode(ast)

  elif optimizationLevel is 1
    # Optimization level #1 (basic AST optimizations):
    # - constant folding,
    # - dead code elimination,
    # - common subexpression elimination (CSE).

    # TODO: More generic way to apply selected optimizations.
    app.logDebug('VCall optimization...')
    app.getAstOptimizerVCall().processNode(ast)

    app.logDebug('Inline optimization... (TEMPORARY DISABLED!)')
    #app.getAstOptimizerInline().processNode(ast)

    # Common preprocess before go-on with further AST optimization.
    app.logDebug('Evaluating AST nodes...')
    app.getAstEvaluator().processNode(ast)

    app.logDebug('Constant folding...')
    app.getAstOptimizerConstantFolding().processNode(ast)

    if (mode is 'mir0') or (mode is 'interpreter')
      app.logDebug('If optimization... (TEMPORARY DISABLED FOR MIR0!)')
    else
      app.logDebug('If optimization...')
      app.getAstOptimizerIf().processNode(ast)
    endif

    app.logDebug('Dead code elimination...')
    app.getAstOptimizerDeadCodeRemove().processNode(ast)

    app.logDebug('Common subexpression elimination (CSE)...')
    app.getAstOptimizerCSE().processNode(ast)

  else
    die('error: optimization level #' ~ str(optimizationLevel) ~ ' is not implemented yet')
  endif

  if (mode is 'mir0') or (mode is 'interpreter')
    #die('error: mir0 based modes are temporary disabled')
    # Translate program to MIR0 (stack based).
    app.logDebug('Translating AST to MIR0...')
    astTranslator = new ASTTranslatorMIR0(app)
    astTranslator.run(ast)
    code = astTranslator.code

    # Load MIR0 code into virtual machine.
    app.logDebug('Loading MIR0 into VM...')
    vm = new VMachineStack()
    vm.loadCode(code)

    if mode is 'mir0'
      # Dump stack MIR0 only.
      app.logDebug('Dumping code...')
      vm.dumpCode()

    elif mode is 'interpreter'
      # Run virtual machine (stack based).
      app.logDebug('Running VM...')
      vm.run()
    endif

  else
    # Prepare quads process toolchain.
    # [AST] -> [MIR1] -> [Collector]
    # Translate program to MIR1 (register based).
    astTranslator    = new ASTTranslatorMIR1(app)
    mirQuadCollector = new MIRQuadCollector()
    mirQuadOptimizer = new MIRQuadOptimizer()

    if mode is 'prettyPrinter'
      # Show formatted mold code.
      astPrinterText = new ASTPrinterText()
      astPrinterText.printNode(ast)

    else
      # Go on with further code processing.
      # Pass translated AST to MIR1.

      if optimizationLevel is 0
        # No optimization. Pass translated AST to MIR1 directly.
        astTranslator.connectTo(mirQuadCollector)

      elif optimizationLevel is 1
        astTranslator.connectTo(mirQuadOptimizer).connectTo(mirQuadCollector)
      endif

      app.logDebug('Type cast...')
      app.getAstTypeCast().processNode(ast)

      # Run build quads process.
      app.logDebug('Translating AST...')
      astTranslator.run(ast)

      if mode is 'mir1'
        # Print MIR quads only
        mirQuadCollector.printQuads()

      elif mode is 'asm'
        # TODO: Better way to pass quads + meta.
        code             = astTranslator.code
        code.quads       = mirQuadCollector.getQuads()
        code.symbolTable = app.getSymbolTable()

        # Generate x64 code.
        app.logDebug('Generating x64 code...')
        codeGenerator = new CodeGeneratorX64()

        # TODO: Better way to pass generator options.
        codeGenerator.isProfilerEnabled = isProfilerEnabled
        codeGenerator.run(code)

      else
        BadUsageError()
      endif
    endif
  endif
endif
