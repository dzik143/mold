################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        #
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         #
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

import 'PipeAbstract.mold'

class MIRQuadTypeTracker extends PipeAbstract

  # ----------------------------------------------------------------------------
  #                         Init functions (constructor)
  # ----------------------------------------------------------------------------

  method constructor()
    super()
    this.currentFrame = {'symbols': {}}
    this.tempCnt      = 0
  endmethod

  # ----------------------------------------------------------------------------
  #                        Internal helpers (private)
  # ----------------------------------------------------------------------------

  method _getType(x) -> rv
    rv = this.currentFrame.symbols[x].type
    if typeof(rv) is 'undefined'
      rv = 'variant'
    endif
  endmethod

  method _getTempVar(type) -> rv
    global SYMBOL_KIND_VAR_LOCAL

    # TODO: Optimize it.
    rv = '.conv' + str(this.tempCnt)
    this.tempCnt = this.tempCnt + 1
    if typeof(this.currentFrame.symbols[rv]) is 'undefined'
      newEntry = {
        'name': rv,
        'readHits': 1,
        'writeHits': 1,
        'kind': SYMBOL_KIND_VAR_LOCAL,
        'type': type
      }

      this.currentFrame.symbols[rv] = newEntry
      cnt = len(this.currentFrame.symbols._index)
      this.currentFrame.symbols._index[cnt] = newEntry
    endif
  endmethod

  method _convert(symInfo, wantedType) -> dst
    if (typeof(symInfo.type) is 'undefined') or (symInfo.type is wantedType)
      # Nothing to do.
      dst = symInfo.name
    else
      # Convert to variant.
      src    = symInfo.name
      dst    = this._getTempVar(wantedType)
      opcode = 'conv_' + symInfo.type + '_to_' + wantedType
      this._emitOneItem([opcode, dst, src])
    endif
  endmethod

  method _releaseAllTemps()
    this.tempCnt = 0
  endmethod

  method _convertParamsBeforeCall(params)
    for idx in 0 .. len(params)
      paramInfo = this.currentFrame.symbols[params[idx]]
      if paramInfo.type isnt 'variant'
        newVar      = this._convert(paramInfo, 'variant')
        params[idx] = newVar
      endif
    endfor
  endmethod

  # ----------------------------------------------------------------------------
  #                                  Public API
  # ----------------------------------------------------------------------------

  method processOneItem(item)
    opcode  = item[0]
    dst     = item[1]
    dstType = '?'

    if typeof(dst) is 'string'
      dstInfo = this.currentFrame.symbols[dst]

      if typeof(dstInfo) isnt 'undefined'
        dstType = dstInfo.type
      endif
    endif

    #print '[ TypeTracker ]', item

    if opcode is 'proc'
      # Proc begin - save current frame.
      this.currentFrame = item[1]

    elif dst is '__rv'
      # Fallback to variant.
      # TODO: Function returning non-variant types.
      x = item[2]
      y = item[3]

      dstInfo.type = 'variant'

      if typeof(x) is 'string'
        xInfo   = this.currentFrame.symbols[item[2]]
        item[2] = this._convert(xInfo, 'variant')
      endif

      if typeof(y) is 'string'
        yInfo   = this.currentFrame.symbols[item[3]]
        item[3] = this._convert(yInfo, 'variant')
      endif

    elif opcode is 'call'
      # Convert args to match target function's proto.
      this._convertParamsBeforeCall(item[3])

    elif opcode is 'vcall'
      # Convert args to match target function's proto.
      this._convertParamsBeforeCall(item[3])

    elif (opcode is 'load_index') or (opcode is 'store_index')
      xInfo = this.currentFrame.symbols[item[2]]
      yInfo = this.currentFrame.symbols[item[3]]

      item[2] = this._convert(xInfo, 'variant')
      item[3] = this._convert(yInfo, 'variant')

    elif opcode is 'print_array_of_variants_ln'
      # Convert args to match target function's proto.
      this._convertParamsBeforeCall(item[1])

    elif (opcode is 'neg')
      xInfo = this.currentFrame.symbols[item[2]]
      dstInfo.type = xInfo.type

    elif (opcode is 'add') or (opcode is 'sub') or (opcode is 'mul')
      xInfo   = this.currentFrame.symbols[item[2]]
      yInfo   = this.currentFrame.symbols[item[3]]

      if (xInfo.type isnt yInfo.type) or (xInfo.type is 'variant') or (yInfo.type is 'variant') or (typeof(xInfo.type) is 'undefined') or (typeof(yInfo.type) is 'undefined')
        # TODO: Handle conversion without variant fallback.
        item[2] = this._convert(xInfo, 'variant')
        item[3] = this._convert(yInfo, 'variant')
        dstInfo.type = 'variant'
      else
        dstInfo.type = xInfo.type
      endif

    elif (opcode is 'div') or (opcode is 'idiv')
      # TODO: Optimize it.
      xInfo = this.currentFrame.symbols[item[2]]
      yInfo = this.currentFrame.symbols[item[3]]

      item[2] = this._convert(xInfo, 'variant')
      item[3] = this._convert(yInfo, 'variant')

    elif (opcode is 'cmp_eq')  or (opcode is 'cmp_ne') or (opcode is 'cmp_lt') or (opcode is 'cmp_le') or (opcode is 'cmp_gt') or (opcode is 'cmp_ge') or (opcode is 'jmp_if_eq')  or (opcode is 'jmp_if_ne') or (opcode is 'jmp_if_lt') or (opcode is 'jmp_if_le') or (opcode is 'jmp_if_gt') or (opcode is 'jmp_if_ge')
      xInfo   = this.currentFrame.symbols[item[2]]
      yInfo   = this.currentFrame.symbols[item[3]]

      dstInfo.type = 'bool32'

      if (xInfo.type isnt yInfo.type) or (xInfo.type is 'variant') or (yInfo.type is 'variant') or (typeof(xInfo.type) is 'undefined') or (typeof(yInfo.type) is 'undefined')
        # TODO: Handle conversion without variant fallback.
        item[2] = this._convert(xInfo, 'variant')
        item[3] = this._convert(yInfo, 'variant')
        dstInfo.type = 'variant'
      endif

    elif dstType is 'variant'
      # Type already adjusted to variant. Don't touch it anymore.

    elif opcode is 'conv_int32_to_variant'
      item[0] = 'load_int32'
      dstInfo.type = 'int32'

    elif opcode is 'conv_int64_to_variant'
      item[0] = 'load_int64'
      dstInfo.type = 'int64'

    elif opcode is 'conv_float64_to_variant'
      item[0] = 'load_float64'
      dstInfo.type = 'float64'

    elif opcode is 'conv_bool32_to_variant'
      item[0] = 'load_bool32'
      dstInfo.type = 'bool32'

    elif opcode is 'move'
      xType = this._getType(item[2])

      if (typeof(dstType) isnt 'undefined') and (dstType isnt xType)
        item[0] = 'conv_' + xType + '_to_' + dstType
      endif

    elif opcode is 'len'
      xInfo = this.currentFrame.symbols[item[2]]
      xType = xInfo.type

      if (xType is 'int64') or (xType is 'float64') or (xType is 'bool32')
        dstInfo.type   = 'int64'
        xInfo.readHits = xInfo.readHits - 1
        item[0] = 'load_int64'
        item[2] = 1
      endif
    endif

    this._emitOneItem(item)

    # Do we need convert result to match target?
    if (typeof(dstType) isnt 'undefined') and (typeof(dstInfo) isnt 'undefined') and (typeof(dstInfo.type) isnt 'undefined') and (dstType isnt dstInfo.type)
      # tmp = foo(...)
      # dst = conv(tmp)
      #print '[ MIRQuadTypeTracker ] converting from', dstType, 'to', dstInfo.type, '(', dstInfo.name, ')'

      opcode       = 'conv_' + dstInfo.type + '_to_' + dstType
      dst          = item[1]
      tmp          = this._getTempVar(dstInfo.type)
      item[1]      = tmp
      dstInfo.type = dstType

      this._emitOneItem([opcode, dst, tmp])
    endif

    this._releaseAllTemps()

  endmethod

endclass
