################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import '../MIR/MIR.mold'
import '../MIR/MIR1.mold'
import '../Utils/Stack.mold'

import './ASTTranslator.mold'

class ASTTranslatorMIR1 extends ASTTranslator

  # ----------------------------------------------------------------------------
  #                                Init code
  # ----------------------------------------------------------------------------

  method constructor(app)
    super(app)
    # TODO: Remove codeObj.
    this.app = app

    # TODO: Clean up this mess.
    this.code         = app.getMir1Code()
    this.stack        = new Stack()
    this.outputObject = null

    # TODO: Remove this mess.
    this.arrayOfCalledMethods = []
    this.mapOfCalledMethods   = {}
    this.methodEmitted        = {}
  endmethod

  # ----------------------------------------------------------------------------
  #                              Internal helpers
  # ----------------------------------------------------------------------------

  method _emitOneItem(item)
    this.outputObject.processOneItem(item)
  endmethod

  method emitZeroArgsOpcode(opcode)
    newQuad = [opcode]
    this._emitOneItem(newQuad)
  endmethod

  method emitTargetOnlyOpcode(opcode, rv)
    newQuad = [opcode, rv]
    this._emitOneItem(newQuad)
  endmethod

  method emitOneArgOpcode(opcode, rv, x)
    newQuad = [opcode, rv, x]
    this._emitOneItem(newQuad)
    # TODO: Review it.
    # TODO: Simplify it.
    #if x is string
    #  this.symbolTable.releaseTempVar(x)
    #endif
  endmethod

  method emitTwoArgsOpcode(opcode, rv, x, y)
    newQuad = [opcode, rv, x, y]
    this._emitOneItem(newQuad)
    # TODO: Review it.
    # TODO: Simplify it.
    #if x is string
    #  this.symbolTable.releaseTempVar(x)
    #endif

    #if y is string
    #  this.symbolTable.releaseTempVar(y)
    #endif
  endmethod

  method emitComment(comment)
    global MIR1_OPCODE_COMMENT
    this.emitTargetOnlyOpcode(MIR1_OPCODE_COMMENT, comment)
  endmethod

  method emitLabel(label)
    global MIR1_OPCODE_LABEL
    this.emitTargetOnlyOpcode(MIR1_OPCODE_LABEL, label)
  endmethod

  method emitJmp(label)
    global MIR1_OPCODE_JMP
    this.emitTargetOnlyOpcode(MIR1_OPCODE_JMP, label)
  endmethod

  method emitJmpByTable(jmpTable, labelIdx)
    global MIR1_OPCODE_JMP_BY_TABLE
    newQuad = [MIR1_OPCODE_JMP_BY_TABLE, jmpTable, labelIdx]
    this._emitOneItem(newQuad)
  endmethod

  method emitMoveVariantOpcode(dst, src)
    global MIR1_OPCODE_MOVE
    this.emitOneArgOpcode(MIR1_OPCODE_MOVE, dst, src)
  endmethod

  method popForRead() -> rv
    rv = this.stack.pop()
    # TODO: Is it really needed at translation stage?
    # this.symbolTable.lookupForRead(rv)
    # TODO: Review it.
    #this.symbolTable.releaseTempVar(rv)
  endmethod

  method popForWrite() -> rv
    rv = this.stack.pop()
    # TODO: Is it really needed at translation stage?
    # this.symbolTable.lookupForWrite(rv)
    # TODO: Review it.
    #this.symbolTable.releaseTempVar(rv)
  endmethod

  method push(x)
    this.stack.push(x)
  endmethod

  method popOneArgAndEmitOpcode(opcode, rv)
    x = this.popForRead()
    this.push(rv)
    this.emitOneArgOpcode(opcode, rv, x)
  endmethod

  method popTwoArgsAndEmitOpcode(opcode, rv)
    y = this.popForRead()
    x = this.popForRead()
    this.push(rv)
    this.emitTwoArgsOpcode(opcode, rv, x, y)
  endmethod

  method popParametersBeforeCall(paramsCnt) -> params
    params = []

    for idx in 0 .. paramsCnt
      item        = this.stack.peekN(paramsCnt - idx)
      params[idx] = item
    endfor

    this.stack.eatN(paramsCnt)
  endmethod

  method emitProcBegin(procMeta)
    global MIR1_OPCODE_PROC
    this.emitTargetOnlyOpcode(MIR1_OPCODE_PROC, procMeta)
  endmethod

  method emitInitFrame(procMeta)
    global MIR1_OPCODE_INIT_FRAME
    this.emitTargetOnlyOpcode(MIR1_OPCODE_INIT_FRAME, procMeta)
  endmethod

  method emitProcEnd()
    global MIR1_OPCODE_ENDP
    this.emitZeroArgsOpcode(MIR1_OPCODE_ENDP)
  endmethod

  method emitRet()
    global MIR1_OPCODE_RET
    this.emitZeroArgsOpcode(MIR1_OPCODE_RET)
  endmethod

  method emitMoveBackVariant()
    src = this.popForRead()
    dst = this.popForWrite()
    this.emitMoveVariantOpcode(dst, src)
    this.push(dst)
  endmethod

  # ----------------------------------------------------------------------------
  #                         Implement built-in functions
  # ----------------------------------------------------------------------------

  method _loadArgsVector()
    this.push('argv')
  endmethod

  method _loadArgsCount()
    this.push('argc')
  endmethod

  # ----------------------------------------------------------------------------
  #                     Implement ASTTranslator interface
  # ----------------------------------------------------------------------------

  method _neg(rv, value)
    global MIR1_OPCODE_NEG
    this.popOneArgAndEmitOpcode(MIR1_OPCODE_NEG, rv)
  endmethod

  method _add(rv, x, y)
    global MIR1_OPCODE_ADD
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_ADD, rv)
  endmethod

  method _stringJoin(rv, x, y)
    global MIR1_OPCODE_STRING_JOIN
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_STRING_JOIN, rv)
  endmethod

  method _sub(rv, x, y)
    global MIR1_OPCODE_SUB
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_SUB, rv)
  endmethod

  method _mul(rv, x, y)
    global MIR1_OPCODE_MUL
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_MUL, rv)
  endmethod

  method _div(rv, x, y)
    global MIR1_OPCODE_DIV
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_DIV, rv)
  endmethod

  method _idiv(rv, x, y)
    global MIR1_OPCODE_IDIV
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_IDIV, rv)
  endmethod

  method _loadArray(rv)
    global MIR1_OPCODE_CREATE_ARRAY
    this.emitTargetOnlyOpcode(MIR1_OPCODE_CREATE_ARRAY, rv)
    this.push(rv)
  endmethod

  method _loadMap(rv)
    global MIR1_OPCODE_CREATE_MAP
    this.emitTargetOnlyOpcode(MIR1_OPCODE_CREATE_MAP, rv)
    this.push(rv)
  endmethod

  method _loadNull(rv)
    global MIR1_OPCODE_LOAD_NULL
    this.emitTargetOnlyOpcode(MIR1_OPCODE_LOAD_NULL, rv)
    this.push(rv)
  endmethod

  method _loadImm(targetVariable, value)
    global MIR1_OPCODE_CREATE_VARIANT_FROM
    global MIR1_OPCODE_CREATE_ARRAY
    global MIR1_OPCODE_CREATE_MAP

    rv = targetVariable

    if value is integer
      if (value >= -2147483648) and (value <= 2147483647)
        # 32-bit integer
        # TODO: Review it: this.emitOneArgOpcode('conv_int32_to_variant', rv, value)
        # this.emitOneArgOpcode('load_int32', rv, value)
        rv = value
      else
        # 64-bit integer
        #this.emitOneArgOpcode('load_int64', rv, value)
        #this.symbolTable.assignMirType(rv, 'int64')
        # TODO: Review it.
        # TODO: Int64 is always mapped to variant.
        #this.emitOneArgOpcode('conv_int64_to_variant', rv, value)
        this.emitOneArgOpcode(MIR1_OPCODE_CREATE_VARIANT_FROM, rv, value)
        # this.emitOneArgOpcode('load_int64', rv, value)
      endif
/*
    elif value is boolean
      # TODO: Review it: this.emitOneArgOpcode('conv_bool32_to_variant', rv, value)
      this.emitOneArgOpcode('load_bool32', rv, value)

    if value is float
      # TODO: Review it: this.emitOneArgOpcode('conv_float64_to_variant', rv, value)
      #this.emitOneArgOpcode('load_float64', rv, value)
      # TODO: Avoid move here?
*/
    elif value is string
      # Do nothing.
      # Just push __literalxxx to the stack.

    elif value is array
      # TODO: Review it.
      # TODO: Avoid move here?
      newConst = this.symbolTable.createConstFromValue(value)
      this.symbolTable.lookupForRead(newConst)
      this.emitOneArgOpcode(MIR1_OPCODE_CREATE_ARRAY, rv, newConst)

    elif value is map
      # TODO: Review it.
      # TODO: Avoid move here?
      arrayOfValues = []
      arrayOfKeys   = []

      for keys k values v in value
        arrayOfKeys[@afterlast]   = k
        arrayOfValues[@afterlast] = v
      endfor

      newConstKeys   = this.symbolTable.createConstFromValue(arrayOfKeys)
      newConstValues = this.symbolTable.createConstFromValue(arrayOfValues)

      this.symbolTable.lookupForRead(newConstKeys)
      this.symbolTable.lookupForRead(newConstValues)
      this.emitTwoArgsOpcode(MIR1_OPCODE_CREATE_MAP, rv, newConstKeys, newConstValues)

    else
      # Do nothing.
      # Just put primitive value to the stack.
      rv = value
    endif

    #else
    #  # TODO: Handle terminal nodes.
    #  this.app.logError('unhandled imm type: ' ~ typeof(value))
    #endif

    this.push(rv)
  endmethod

  method _convert(rv, unusedSrc, srcType, dstType)
    global MIR1_OPCODE_MOVE
    global MIR1_OPCODE_CAST_VARIANT_TO
    global MIR1_OPCODE_CREATE_VARIANT_FROM

    srcTypeMIR = AST_ConvertDataTypeToMIR(srcType)
    dstTypeMIR = AST_ConvertDataTypeToMIR(dstType)
    opcode     = MIR1_OPCODE_MOVE

    if srcTypeMIR is dstTypeMIR
      # Nothing to convert.
      # Just emit move opcode.
      # TODO: Avoid move here?

    elif (dstTypeMIR is 'variant') and (srcTypeMIR is 'string')
      # Do nothing.

    elif srcTypeMIR is 'variant'
      # Cast variant to primitive.
      opcode = MIR1_OPCODE_CAST_VARIANT_TO

    elif dstTypeMIR is 'variant'
      # Create variant from primitive.
      opcode = MIR1_OPCODE_CREATE_VARIANT_FROM

    else
      this._error("Unhandled MIR convert from '" ~ srcTypeMIR ~ " to '" ~ dstTypeMIR ~ "'")
    endif

    this.popOneArgAndEmitOpcode(opcode, rv)
  endmethod

  method _compareEQ(rv, x, y)
    global MIR1_OPCODE_CMP_EQ
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_EQ, rv)
  endmethod

  method _compareNEQ(rv, x, y)
    global MIR1_OPCODE_CMP_NE
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_NE, rv)
  endmethod

  method _compareLT(rv, x, y)
    global MIR1_OPCODE_CMP_LT
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_LT, rv)
  endmethod

  method _compareLE(rv, x, y)
    global MIR1_OPCODE_CMP_LE
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_LE, rv)
  endmethod

  method _compareGT(rv, x, y)
    global MIR1_OPCODE_CMP_GT
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_GT, rv)
  endmethod

  method _compareGE(rv, x, y)
    global MIR1_OPCODE_CMP_GE
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_GE, rv)
  endmethod

  method _isTypeOf(rv, x, typeId)
    global MIR1_OPCODE_CMP_IS_TYPEOF
    this.push(typeId)
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_IS_TYPEOF, rv)
  endmethod

  method _isNotTypeOf(rv, x, typeId)
    global MIR1_OPCODE_CMP_IS_NOT_TYPEOF
    this.push(typeId)
    this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_CMP_IS_NOT_TYPEOF, rv)
  endmethod

  method _loadVariable(name)
    this.push(name)
  endmethod

  method _assign(dst, src)
    global SYMBOL_KIND_VAR_RETVAL

    if (typeof(dst) isnt typeof(src)) or (dst isnt src)
      # TODO: Is it really needed?
      #dstInfo      = this.symbolTable.lookup(dst)
      #dstInfo.type = AST_ConvertDataTypeToMIR(dstInfo.astType)

      this.emitMoveVariantOpcode(dst, this.popForRead())
    endif
  endmethod

  method _call(rv, proto, unusedParams, paramsCnt)
    global MIR1_OPCODE_CALL

    params = this.popParametersBeforeCall(paramsCnt)
    name   = proto.fullName

    if name is undefined
      name = proto.name
    endif

    # TODO: Clean up this mess.
    useTempRv = false
    rvForCall = rv

    if ((proto.isConstructor is defined) and
        (proto.isConstructor is true))
      rvForCall = null

    elif rv is defined
      # TODO: Why we need to check both symbolTable and symbolTableForTemps ?
      if this.symbolTable.symbols{rv} is defined
        rvType = this.symbolTable.symbols{rv}.type
      elif this.symbolTableForTemps.symbols{rv} is defined
        rvType = this.symbolTableForTemps.symbols{rv}.type
      else
        rvType = null
      endif

      if rvType is string
        rvForCall = this._getTempVar(rvType)
        useTempRv = true
      endif
    endif

    # TODO: Use emitTwoArgsOpcode() after fix.
    this._emitOneItem([MIR1_OPCODE_CALL, rvForCall, name, params])

    if ((proto.isConstructor is defined) and
        (proto.isConstructor is true))

      # TODO: Handle it in better way.
      # We need it to avoid eating new result (this pointer)
      # when constructor called just after.
      this.push(params[0])

    else
      if useTempRv is true
        this._loadVariable(rvForCall)
        this._assign(rv, rvForCall)
        this._releaseTempVar(rvForCall)
      endif
      this.push(rv)
    endif
  endmethod

  method _syscall(rv, id, unusedParams, paramsCnt)
    global MIR1_OPCODE_SYSCALL
    params = this.popParametersBeforeCall(paramsCnt)
    # TODO: Use emitTwoArgsOpcode() after fix.
    this._emitOneItem([MIR1_OPCODE_SYSCALL, rv, id, params])
    this.push(rv)
  endmethod

  method _loadFromIndex(rv, box, unusedIdx)
    global MIR1_OPCODE_LOAD_INDEX
    if rv is box
      # TODO: Clean up this mess.
      # Dirty fix for x = x[idx] issue.
      tmp = this._getTempVar('variant')
      this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_LOAD_INDEX, tmp)
      this._loadVariable(tmp)
      this._assign(rv, tmp)
      this._releaseTempVar(tmp)

    else
      # Default case.
      this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_LOAD_INDEX, rv)
    endif
  endmethod

  method _loadFromKey(rv, box, unusedKey)
    global MIR1_OPCODE_LOAD_KEY
    if rv is box
      # TODO: Clean up this mess.
      # Dirty fix for x = x[idx] issue.
      tmp = this._getTempVar('variant')
      this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_LOAD_KEY, tmp)
      this._loadVariable(tmp)
      this._assign(rv, tmp)
      this._releaseTempVar(tmp)

    else
      # Default case.
      this.popTwoArgsAndEmitOpcode(MIR1_OPCODE_LOAD_KEY, rv)
    endif
  endmethod

  method _storeAtIndex(unusedBox, unusedIdx, unusedValue)
    global MIR1_OPCODE_STORE_INDEX
    val = this.popForRead()
    idx = this.popForRead()
    box = this.popForRead()
    this.emitTwoArgsOpcode(MIR1_OPCODE_STORE_INDEX, box, idx, val)
    this.push(box)
  endmethod

  method _storeAtKey(unusedBox, unusedKey, unusedValue)
    global MIR1_OPCODE_STORE_KEY
    val = this.popForRead()
    key = this.popForRead()
    box = this.popForRead()
    this.emitTwoArgsOpcode(MIR1_OPCODE_STORE_KEY, box, key, val)
    this.push(box)
  endmethod

  method _storeAtIndexAndDrop(unusedBox, unusedIdx, unusedValue)
    global MIR1_OPCODE_STORE_INDEX
    val = this.popForRead()
    idx = this.popForRead()
    box = this.popForRead()
    this.emitTwoArgsOpcode(MIR1_OPCODE_STORE_INDEX, box, idx, val)
  endmethod

  method _storeAtKeyAndDrop(unusedBox, unusedKey, unusedValue)
    global MIR1_OPCODE_STORE_KEY
    val = this.popForRead()
    key = this.popForRead()
    box = this.popForRead()
    this.emitTwoArgsOpcode(MIR1_OPCODE_STORE_KEY, box, key, val)
  endmethod

  method _createObject(rv, classProto)
    global MIR1_OPCODE_CREATE_OBJECT
    if classProto is undefined
      # Dynamic code, adjust class proto at run-time.
      this._error('error: missing classProto in MIR_OPCODE_CREATE_OBJECT')

    else
      # Static code, we got class proto inside MIR opcode.
      this.emitOneArgOpcode(MIR1_OPCODE_CREATE_OBJECT, rv, classProto.name)
      this.push(rv)
    endif
  endmethod

  method _evaluateNodeLazyBoolAnd(rv, leftAst, rightAst)
    global MIR1_OPCODE_MOVE
    global MIR1_OPCODE_JMP_IF_FALSE
    global MIR1_OPCODE_JMP_IF_TRUE

    endLabel = this.symbolTable.createLabel()
    #   rv = left()
    #   if not rv goto .done
    #   rv = right()
    # .done:

    this.push(rv)

    this.emitOneArgOpcode(MIR1_OPCODE_MOVE, rv, false)                           # [false]
    x = this._evaluateNode(leftAst)                                              # [false x]
    this.emitOneArgOpcode(MIR1_OPCODE_JMP_IF_FALSE, endLabel, this.popForRead()) # [false]

    # TODO: Review it?
    # TODO: Simplify it.
    this._releaseTempVar(x)
    this.symbolTable.assignMirType(rv, 'bool32')

    # Evaluate right node only if left is true.
    y = this._evaluateNode(rightAst) # [y]
    this.emitMoveBackVariant()       # []
    this.emitLabel(endLabel)

    # TODO: Simplify it.
    this._releaseTempVar(y)
  endmethod

  method _evaluateNodeLazyBoolOr(rv, leftAst, rightAst)
    global MIR1_OPCODE_MOVE
    global MIR1_OPCODE_JMP_IF_TRUE

    endLabel = this.symbolTable.createLabel()
    #   rv = left()
    #   if rv goto .done
    #   rv = right()
    # .done:

    this.push(rv)

    this.emitOneArgOpcode(MIR1_OPCODE_MOVE, rv, true)                           # [true]
    x = this._evaluateNode(leftAst)                                             # [true x]
    this.emitOneArgOpcode(MIR1_OPCODE_JMP_IF_TRUE, endLabel, this.popForRead()) # [true]

    # TODO: Simplify it.
    this._releaseTempVar(x)
    this.symbolTable.assignMirType(rv, 'bool32')

    # Evaluate right node only if left is false.
    y = this._evaluateNode(rightAst) # [y]
    this.emitMoveBackVariant()       # []
    this.emitLabel(endLabel)

    # TODO: Simplify it.
    this._releaseTempVar(y)
  endmethod

  method _invokeMethod(rv, methodName, unusedParams, paramsCnt)
    global MIR1_OPCODE_VCALL
    # TODO: Remove paramsCnt
    # TODO: Remove codeObj
    methodId = this.code.methodsMap{methodName}

    if methodId is undefined
      # Forward declaration.
      methodId = this.code.createMethod(methodName)
    endif

    methodNameWithParamsCnt = methodName ~ '$' ~ str(paramsCnt - 1)
    if this.mapOfCalledMethods{methodNameWithParamsCnt} is undefined
      this.arrayOfCalledMethods[@afterlast] = methodNameWithParamsCnt
    endif

    this.mapOfCalledMethods{methodNameWithParamsCnt} = true

    params = this.popParametersBeforeCall(paramsCnt)

    # TODO: Use emitTwoArgsOpcode() if fixed.
    # TODO: Why we need to check both symbolTable and symbolTableForTemps ?
    useTmpRv  = false
    rvForCall = rv

    if rv is defined
      if this.symbolTable.symbols{rv} is defined
        rvType = this.symbolTable.symbols{rv}.type
      elif this.symbolTableForTemps.symbols{rv} is defined
        rvType = this.symbolTableForTemps.symbols{rv}.type
      else
        rvType = null
      endif

      if rvType is string
        useTmpRv  = true
        rvForCall = this._getTempVar(rvType)
      endif
    endif

    this._emitOneItem([MIR1_OPCODE_VCALL, rvForCall, methodId, params])

    if useTmpRv is true
      this._loadVariable(rvForCall)
      this._assign(rv, rvForCall)
      this._releaseTempVar(rvForCall)
    endif

    this.push(rv)
  endmethod

  method _executeNodeFor(iterName, idxStart, idxEnd, idxStep, bodyAst)
    global MIR1_OPCODE_JMP
    global MIR1_OPCODE_ADD
    global MIR1_OPCODE_JMP_IF_GE

    labelForBegin = this.symbolTable.createLabel()
    labelForEnd   = this.symbolTable.createLabel()

    # Init iterator with start value (inside loop scope).
    this.emitMoveVariantOpcode(iterName, idxStart)

    # idx = valueStart
    # begin:
    #   if not (idx < valueEnd) goto end
    #   ...
    #   add idx, valueStep
    #   jmp begin
    # end:

    this.emitComment('')
    this.emitComment('-----------------------------')
    this.emitComment('BEGIN: for ' ~ str(iterName) ~ ' in ' ~ str(idxStart) ~ ' .. ' ~ str(idxEnd))
    this.emitComment('')

    this.emitLabel(labelForBegin)

      # Is it the end?
      # if not (idx < idxEnd) goto end
      this.emitTwoArgsOpcode(MIR1_OPCODE_JMP_IF_GE, labelForEnd, iterName, idxEnd)

      # Loop body.
      for values oneChild in bodyAst.children
        this._executeNode(oneChild)
      endfor

      # Update iterator value and jmp to loop begin.
      # idx += step
      # goto begin
      this.emitTwoArgsOpcode(MIR1_OPCODE_ADD, iterName, iterName, idxStep)
      this.emitTargetOnlyOpcode(MIR1_OPCODE_JMP, labelForBegin)

    this.emitLabel(labelForEnd)

    this.emitComment('')
    this.emitComment('END: for ' ~ str(iterName) ~ ' in ' ~ str(idxStart) ~ ' .. ' ~ str(idxEnd) ~ ' step ' ~ str(idxStep))
    this.emitComment('-----------------------------')
    this.emitComment('')
  endmethod

  method _executeNodeForEach(iteratorKey, iteratorValue, box, bodyAst, isMapMode)
    global MIR1_OPCODE_CALL
    global MIR1_OPCODE_JMP
    global MIR1_OPCODE_INNER_RET
    global AST_DATA_INTEGER

    # TODO: Clean up this mess.
    # TODO: Better way to detect inner function in C target.
    labelForBegin = 'loopBody_' ~ this.symbolTable.createLabel()
    labelForEnd   = this.symbolTable.createLabel()

    this.emitComment('')
    this.emitComment('-----------------------------')
    this.emitComment('BEGIN: for keys ' ~ str(iteratorKey) ~ ' values ' ~ str(iteratorValue))
    this.emitComment('')

    # Avoid direct exeution of loop body.
    # TODO: Handle inner functions in better way.
    this.emitTargetOnlyOpcode(MIR1_OPCODE_JMP, labelForEnd)

      # Translate loop body as inner function.
      this.emitLabel(labelForBegin)
      this._executeNode(bodyAst)
      this.emitZeroArgsOpcode(MIR1_OPCODE_INNER_RET)

    this.emitLabel(labelForEnd)

    # TODO: Clean up this mess.
    iteratorKeyForMir   = '__TrashBin'
    iteratorValueForMir = '__TrashBin'
    isIntegerKey        = false

    if iteratorKey is defined
      iteratorKeyForMir = iteratorKey

      # TODO: Better way to avoid calling __MOLD_ForDriver_Generic()
      # with pointer to int32 idx.
      iteratorKeyInfo = this.symbolTable.lookup(iteratorKey)
      isIntegerKey    = iteratorKeyInfo.astType is AST_DATA_INTEGER
    endif

    if iteratorValue is defined
      iteratorValueForMir = iteratorValue
    endif

    if isIntegerKey is true
      funcName = '__MOLD_ForDriver_IndexesAndValuesInArrayOrString'
    elif isMapMode is true
      funcName = '__MOLD_ForDriver_KeysAndValuesInMap'
    else
      funcName = '__MOLD_ForDriver_Generic'
    endif

    # Emit call to loop handler.
    params = [box, iteratorKeyForMir, iteratorValueForMir, labelForBegin]
    this._emitOneItem([MIR1_OPCODE_CALL, null, funcName, params])

    this.emitComment('')
    this.emitComment('END: for keys ' ~ str(iteratorKey) ~ ' values ' ~ str(iteratorValue))
    this.emitComment('-----------------------------')
    this.emitComment('')
  endmethod

  method _executeNodeWhile(condAst, bodyAst)
    global MIR1_OPCODE_JMP_IF_FALSE

    loopLabel = this.symbolTable.createLabel()
    endLabel  = this.symbolTable.createLabel()

    this.emitComment('')
    this.emitComment('-----------------------------')
    this.emitComment('BEGIN: while')
    this.emitComment('')

    this.emitLabel(loopLabel)
      # if (not cond) goto end
      cond = this._evaluateNode(condAst)
      this.emitOneArgOpcode(MIR1_OPCODE_JMP_IF_FALSE, endLabel, this.popForRead())

      # Loop body
      this._executeNode(bodyAst)
      this.emitJmp(loopLabel)

    this.emitLabel(endLabel)

    this.emitComment('')
    this.emitComment('END: while')
    this.emitComment('-----------------------------')
    this.emitComment('')
  endmethod

  method _executeNodeIf(cond, codeIfTrue, codeIfFalse)
    global MIR1_OPCODE_JMP_IF_FALSE

    falseLabel = this.symbolTable.createLabel()
    endLabel   = this.symbolTable.createLabel()

    # if (not cond) goto falseLabel
    #   codeIfTrue
    #   goto endLabel
    #
    # falseLabel:
    #   codeIfFalse
    #
    # endLabel:
    this.emitOneArgOpcode(MIR1_OPCODE_JMP_IF_FALSE, falseLabel, this.popForRead())

    this._executeNode(codeIfTrue)

    if codeIfFalse is defined
      this.emitJmp(endLabel)
      this.emitLabel(falseLabel)
      this._executeNode(codeIfFalse)
    else
      this.emitLabel(falseLabel)
    endif

    this.emitLabel(endLabel)
  endmethod

  method _executeNodeSwitch(node)
    children    = node.children
    childrenCnt = len(children)
    varName     = this._evaluateNode(children[0])

    doneLabel    = this.symbolTable.createLabel()
    defaultLabel = this.symbolTable.createLabel()
    jmpTable     = []

    symbolInfo = this.symbolTable.insertJmpTable(jmpTable)
    symbolInfo.defaultLabel = defaultLabel
    symbolInfo.valueMin     = node.valueMin
    symbolInfo.valueMax     = node.valueMax

    this.emitComment('')
    this.emitComment('-----------------------------')
    this.emitComment('BEGIN: switch ' ~ varName)
    this.emitComment('')

    # Value is in-range, use jump table.
    this.emitJmpByTable(symbolInfo.name, varName)

    caseDefaultIdx = -1

    # Emit case bodies.
    for idx in 1 .. childrenCnt
      arrayOfValues = children[idx].arrayOfValues

      if arrayOfValues is defined
        if AST_IsEmpty(children[idx]) is true
          # Nop code. Just jump to done label.
          caseLabel = doneLabel

        else
          # There is some work to do.
          caseLabel = this.symbolTable.createLabel()
          this.emitLabel(caseLabel)
          this._executeNode(children[idx])
          this.emitJmp(doneLabel)
        endif

        for values oneValue in arrayOfValues
          jmpTable[oneValue] = caseLabel
        endfor

      else
        caseDefaultIdx = idx
      endif
    endfor

    # Emit otherwise (default) case code if any.
    this.emitLabel(defaultLabel)
    if caseDefaultIdx isnt -1
      this._executeNode(children[caseDefaultIdx])
    endif

    this.emitLabel(doneLabel)

    this.emitComment('')
    this.emitComment('END: switch ' ~ varName)
    this.emitComment('-----------------------------')
    this.emitComment('')
  endmethod

  method _evaluateStringFormatItemNode(fmt, node)
    global AST_OPCODE_STRING_JOIN
    global AST_OPCODE_CALL
    global MOLD_SYSCALL_ID_STR

    if node.opcode is AST_OPCODE_STRING_JOIN
      this._evaluateStringFormatItemNode(fmt, node.children[0])
      fmt[@afterlast] = '@glued'
      this._evaluateStringFormatItemNode(fmt, node.children[1])

    elif ((node.opcode is AST_OPCODE_CALL) and
          (node.value is '__mold_syscall') and
          (node.sysCallId is integer) and
          (node.sysCallId is MOLD_SYSCALL_ID_STR))
      # TODO: Clean up this mess.
      # str(x) -> x
      this._evaluateStringFormatItemNode(fmt, node.children[0])

    else
      fmt[@afterlast] = this._evaluateNode(node)
    endif
  endmethod

  method _executeNodePrint(node)
    global MIR1_OPCODE_PRINT
    children = node.children
    params   = []

    for values childNode in children
      this._evaluateStringFormatItemNode(params, childNode)
    endfor

    # TODO: Simplify it.
    for values oneParam in params
      if (oneParam is string) and (oneParam isnt '@glued')
        this._releaseTempVar(oneParam)
      endif
    endfor

    this.emitTargetOnlyOpcode(MIR1_OPCODE_PRINT, params)
    this.stack.eatN(len(children))
  endmethod

  method _declareFunction(funcName, funcProto)
    # Do nothing.
  endmethod

  method _declareClass(className, classProto)
    this.code.createClass(classProto)
  endmethod

  method _emitFunctionBody(funcName, funcProto)
    global MIR1_OPCODE_INNER_RET

    params    = funcProto.params
    paramsCnt = len(funcProto.params)
    children  = funcProto.children
    codeAst   = children[0]
    rvName    = funcProto.rv

    this.methodEmitted{funcProto.name ~ '$' ~ str(paramsCnt)} = true

    this.emitComment('-----------------------------------------------')
    this.emitComment('function ' ~ funcName)
    this.emitComment('-----------------------------------------------')

    # TODO: Clean up this mess.
    # We inject symbols to the AST for forward declarations in C target.
    funcProto.symbols = this.symbolTable.exportSymbols()

    # TODO: Simplify it.
    symbolTable      = this.symbolTable
    oldSymbolTable   = this.symbolTable
    this.symbolTable = codeAst.symbolTable

    # TODO: Simplify it.
    procMeta = {
      'name': funcName,
      'shortName': funcProto.name,
      'symbols': this.symbolTable.exportSymbols(),
      'symbolTable': this.symbolTable,
      'params': params,
      'rv': rvName
    }

    # Emit function head.
    this.emitProcBegin(procMeta)

    # Emit function code if any.
    if funcProto.isPureVirtual is defined
      this.emitJmp('__MOLD_PrintErrorAndDie.notImplemented')

    elif len(codeAst.children) > 0
      # Init frame only if there is any code to emit.
      this.emitInitFrame(procMeta)

      # Translate function code.
      for values item in codeAst.children
        this._executeNode(item)
      endfor

      this.emitRet()

    else
      # Emit single ret opcode if there is no any code.
      this.emitZeroArgsOpcode(MIR1_OPCODE_INNER_RET)
    endif

    # Emit function finish / clean up.
    this.emitProcEnd()

    # Exit from function scope.
    this.symbolTable = oldSymbolTable
  endmethod

  method _dropRetVal()
    this.stack.eat()
  endmethod

  # ----------------------------------------------------------------------------
  #                                Public API
  # ----------------------------------------------------------------------------

  method run(ast)
    code = this.code

    # TODO: Review it.
    this.symbolTable = ast.symbolTable

    this._emitGlobals()

    # Translate main code behind entry point.
    this.emitComment('-----------------------------------------------')
    this.emitComment('entry point')
    this.emitComment('-----------------------------------------------')

    this._executeNode(ast)

    # TODO: Clean up this mess.
    this.code.symbolTable = this.symbolTable

    for values methodName in this.arrayOfCalledMethods
      if this.methodEmitted{methodName} is undefined
        # TODO: Show source line.
        # TODO: Use subtr, find etc.
        # Convert foo$3 -> foo.
        idx = 0
        methodNameLen = len(methodName)
        shortMethodName = ''

        while (methodName[idx] isnt '$') and (idx < methodNameLen)
          shortMethodName = shortMethodName ~ methodName[idx]
          idx = idx + 1
        endwhile

        die("error: object has no method '" ~ shortMethodName ~ "'")
      endif
    endfor
  endmethod

  method connectTo(obj) -> rv
    this.outputObject = obj
    rv = obj
  endmethod
endclass
