################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'AST/ASTUtils.mold'

class ASTOptimizerDeadCodeRemove
  method constructor(app)
    this.app = app
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTOptimizerDeadCodeRemove ]', msg
    endif
  endmethod

  method _removeNode(node)
    global AST_OPCODE_NOP
    this._debug('Remove node #' ~ str(node.id))
    node.opcode      = AST_OPCODE_NOP
    node.children    = []
    #node._TODO_childrenCnt = 0
  endmethod

  method _moveNode(dst, src)
    global AST_OPCODE_NOP
    # TODO: Optimize it?
    this._debug('Replacing node #' ~ str(dst.id) ~ ' by #' ~ str(src.id))
    dst.id          = src.id
    dst.opcode      = src.opcode
    dst.children    = src.children
  endmethod

  method _processChildNodes(symbolTable, node)
    global AST_OPCODE_NOP

    newChildren    = []
    newChildrenCnt = 0

    for values childNode in node.children
      newNode = this._processNode(symbolTable, childNode)
      if newNode isnt childNode
        # Child was just replaced by another one.
        this._moveNode(childNode, newNode)
      endif

      if newNode.opcode isnt AST_OPCODE_NOP
        newChildren[newChildrenCnt] = newNode
        newChildrenCnt = newChildrenCnt + 1
      endif
    endfor

    # Apply new children.
    node.children = newChildren
  endmethod

  method _processNode(symbolTable, node) -> rv
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_IF
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_CALL
    global AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_WHILE
    global AST_OPCODE_NEG
    global AST_OPCODE_NOP
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ
    global AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_COMPARE_GT, AST_OPCODE_COMPARE_GE
    global AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV, AST_OPCODE_IDIV
    global AST_DATA_BOOL, AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_DATA_UNDEFINED
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_TYPE_CAST
    global SYMBOL_KIND_CONST, SYMBOL_KIND_VAR_RETVAL

    # TODO: Use should/assert/etc when ready.
    if symbolTable is undefined
      die('error: unset symbol table at ASTOptimizerDeadCodeRemove::_processNode()')
    endif

    if node is undefined
      die('error: unset node at ASTOptimizerDeadCodeRemove::_processNode()')
    endif

    opcode = node.opcode

    # Enter scope if needed.
    if opcode is AST_OPCODE_BLOCK
      symbolTable = node.symbolTable
    endif

    # Process child nodes recursively.
    this._processChildNodes(symbolTable, node)

    opcode      = node.opcode
    children    = node.children
    childrenCnt = len(children)
    x           = children[0]

    childrenCntOnEnter = len(children)

    value      = node.value
    rv         = node
    removeNode = false

    #
    # Process current one node.
    #

    if (opcode is AST_OPCODE_FOR_VALUES_RANGE) and (AST_IsEmpty(children[4]) is true)
      # empty for
      this._debug('Empty for loop at node #' ~ str(node.id))
      removeNode = true

    elif opcode is AST_OPCODE_WHILE
      if AST_IsEmpty(children[1]) is true
        # empty while
        this._debug('Empty while loop at node #' ~ str(node.id))
        removeNode = true

      elif AST_IsImmWithValue(children[0], false) is true
        # while false - never executed
        this._debug('While false {} at node #' ~ str(node.id))
        removeNode = true
      endif

    elif opcode is AST_OPCODE_IF
      children    = node.children
      childrenCnt = len(children)

      nodeCond = children[0]
      nodeBody = children[1]
      nodeElse = children[2]

      #
      # Remove empty branches.
      #

      if childrenCnt is 3
        if AST_IsEmpty(nodeElse) is true
          # if cond {...} else {} - empty else branch.
          this._debug('Remove empty else node #' ~ str(nodeElse.id))
          node.children = [nodeCond, nodeBody]
          childrenCnt   = 2

          if AST_IsEmpty(nodeBody) is true
            # if cond {} else {} - both branches empty.
            this._debug('Remove empty if body node #' ~ str(nodeBody.id))
            removeNode = true
          endif

        elif AST_IsEmpty(nodeBody) is true
          # if cond {} else {...} - empty body, but else exists.
          # Invert condition.
          this._debug('Invert condition at if node #' ~ str(node.id))

          AST_InvertBoolean(nodeCond)

          node.children = [nodeCond, nodeElse]

          nodeBody    = nodeElse
          childrenCnt = 2
        endif

      elif AST_IsEmpty(nodeBody) is true
        # if cond {}
        this._debug('Empty if at node #' ~ str(node.id))
        removeNode = true
      endif

      #
      # Check for imm condition.
      #

      if removeNode is true
        # Nothing to do - node is already marked to remove.

      elif AST_IsImmWithValue(nodeCond, true) is true
        # if true {...}            - always true
        # if true {...} else {...} - always true
        this._debug('if true {...} at node #' ~ str(node.id))
        rv = nodeBody

      elif AST_IsImmWithValue(nodeCond, false) is true
        if childrenCnt is 3
          # if false {...} else {...} - always else branch.
          this._debug('if false {...} else {...} at node #' ~ str(node.id))
          rv = nodeElse
        else
          # if false {...} - always false, nothing to do.
          this._debug('if false {...} at node #' ~ str(node.id))
          removeNode = true
        endif
      endif

    elif opcode is AST_OPCODE_DECLARE_OR_ASSIGN
      if x.opcode is AST_OPCODE_VARIABLE
        # x = ...
        symbolInfo = symbolTable.lookup(x.value)
        if symbolInfo.readHits is 0
          # Assign to unused variable.
          rval = children[1]

          if AST_HasSideEffects(rval) is true
            # Extra side effects on rval. We can't remove whole statement.
            # x = y -> y
            node.hasSideEffects = true
            # TODO
            # rv = rval

          else
            this._debug('Useless assign at node #' ~ str(node.id) ~ ' (' ~ x.value ~ ')')
            removeNode = true
            symbolTable.decreaseWriteHits(x.value)
          endif
        endif
      endif

    elif opcode is AST_OPCODE_FUNCTION
      symbolInfo = symbolTable.lookup(node.name)
      if symbolInfo.readHits is 0
        # Unused function.
        removeNode = true
        symbolTable.global.remove(node.name)
      endif

    elif (opcode is AST_OPCODE_TYPE_CAST) and (x.opcode is AST_OPCODE_TYPE_CAST)
      # Nested type cast: convert(convert(...))
      this._debug('Reduced nested type cast at node #' ~ str(node.id))
      node.children[0] = x.children[0]
    endif

    if removeNode is true
      this._removeNode(node)

    elif childrenCntOnEnter isnt len(node.children)
      # TODO: Review it?
      # Process child nodes recursively.
      this._processChildNodes(symbolTable, node)
    endif

    # Clean up symbol table if needed.
    if opcode is AST_OPCODE_BLOCK
      symbolTable.removeUnusedSymbols()
    endif
  endmethod

  method processNode(node)
    this._processNode(node.symbolTable, node)
  endmethod
endclass
