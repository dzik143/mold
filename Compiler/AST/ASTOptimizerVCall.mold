################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import './AST.mold'
import './ASTUtils.mold'

class ASTOptimizerVCall
  method constructor(app)
    this.app         = app
    this.symbolTable = app.getSymbolTable()
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTOptimizerVCall ]', msg
    endif
  endmethod

  method _processNode(node)
    global AST_OPCODE_VCALL
    global AST_OPCODE_BLOCK
    global AST_OPCODE_CALL

    this.app.setLogContext(node)

    opcode      = node.opcode
    children    = node.children
    childrenCnt = len(children)

    if opcode is AST_OPCODE_VCALL
      # obj.foo(...)
      thiz           = children[0]
      symbolInfoThiz = thiz.symbolInfo

      if symbolInfoThiz is defined
        classProto = thiz.symbolInfo.classProto

        if (classProto is defined) and (classProto.vtable is defined)
          # We already know class proto.
          # Convert vcall to ordinary call.
          methodProto = classProto.vtable{node.value}

          if methodProto is defined
            if ((methodProto.isOverloaded is defined) and
                (methodProto.isOverloaded is true))
              # Method is overloaded by another class.
              # Keep virtual call.
              this._debug('Skipped vcall [' ~ node.value ~ '] at node #' ~ str(node.id))

            else
              # TODO: Use not x.
              if node.isUsedAsLeftValue is true
                isRetValUsed = false
              else
                isRetValUsed = true
              endif

              node.value            = methodProto.fullName
              node.opcode           = AST_OPCODE_CALL
              node.isOptimizedVcall = true
              node.symbolInfo       = this.symbolTable.lookupForCall(methodProto.fullName, childrenCnt, isRetValUsed)

              this._debug('Changed vcall [' ~ node.value ~ '] to ordinary call at node #' ~ str(node.id))

              # TODO: Optimize it.
              # Detect recursive calls. We use it in further optimizations.
              blockNode         = AST_GetParentBlock(node)
              symbolTable       = blockNode.symbolTable
              currentMethodName = symbolTable.getCurrentFunctionName()

              if ((currentMethodName is defined) and
                  (currentMethodName is methodProto.fullName))

                this._debug('Recursive call detected at node #' ~ str(node.id) ~ ' (' ~ methodProto.fullName ~ ')')
                node.symbolInfo.proto.isRecursive = true
              endif
            endif
          endif
        endif
      endif

    else
      # Process child nodes recursively.
      for values oneChild in children
        this._processNode(oneChild)
      endfor
    endif
  endmethod

  method processNode(node)
    this._processNode(node)
  endmethod
endclass
