################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        #
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         #
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

import 'AST/AST.mold'

class ASTOptimizerConstantFolding
  method constructor(app)
    this.app = app
    this.globals = app.getSymbolTable()
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTConstantFolding ]', msg
    endif
  endmethod

  method _setToImm(dst, value)
    global AST_DATA_BOOL, AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_DATA_UNDEFINED
    global AST_OPCODE_VARIABLE

    type = typeof(value)

    if (type is 'array') or (type is 'map')
      # TODO: Clone initialize list?
      # Crash after attemp to modify moved constant [] or {}.

    else
      this._debug('Set node #' + str(dst.id) + ' to imm "' + str(value) + '" (' + type + ')')

      if dst.opcode is AST_OPCODE_VARIABLE
        if typeof(dst.symbolInfo) isnt 'undefined'
          dst.symbolInfo.readHits = dst.symbolInfo.readHits - 1
        endif
      endif

      if type is 'boolean'
        newOpcode = AST_DATA_BOOL

      elif type is 'integer'
        newOpcode = AST_DATA_INTEGER

      elif type is 'float'
        newOpcode = AST_DATA_DOUBLE

      elif type is 'string'
        newOpcode = AST_DATA_STRING

      #elif type is 'array'
      #  newOpcode = AST_DATA_ARRAY
      #
      #elif type is 'map'
      #  newOpcode = AST_DATA_MAP

      elif type is 'undefined'
        newOpcode = AST_DATA_UNDEFINED

      else
        # Remove newOpcode assign.
        newOpcode = -1
        die('error: unhandled result in constant folding: ' + type)
      endif

      dst.childrenCnt = 0
      dst.children    = []
      dst.opcode      = newOpcode
      dst.value       = value
    endif
  endmethod

  method _processNodeArray(node)
    newValue    = []
    isImm       = true
    idx         = 0
    children    = node.children
    childrenCnt = node.childrenCnt

    while (isImm is true) and (idx < childrenCnt)
      this.processNode(children[idx])
      newValue[idx] = children[idx].value
      isImm = AST_IsImm(children[idx])
      idx   = idx + 1
    endwhile

    if isImm is true
      this._setToImm(node, newValue)
    endif
  endmethod

  method _processNodeMap(node)
    newValue    = {}
    isImm       = true
    idx         = 0
    children    = node.children
    childrenCnt = node.childrenCnt

    while (isImm is true) and (idx < childrenCnt)
      nodeKey   = children[idx]
      nodeValue = children[idx + 1]

      this.processNode(nodeKey)
      this.processNode(nodeValue)

      if AST_IsImm(nodeKey) and AST_IsImm(nodeValue)
        newValue[nodeKey.value] = nodeValue.value
      else
        isImm = false
      endif
      idx = idx + 2
    endwhile

    if isImm is true
      this._setToImm(node, newValue)
    endif

  endmethod

  method processNode(node) -> isNodeChanged
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_IF
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_CALL
    global AST_OPCODE_NEG
    global AST_OPCODE_NOP
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ
    global AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_COMPARE_GT, AST_OPCODE_COMPARE_GE
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV, AST_OPCODE_IDIV
    global AST_DATA_BOOL, AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_DATA_UNDEFINED
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR
    global AST_OPCODE_REFERENCE
    global AST_OPCODE_TYPE_CAST
    global SYMBOL_KIND_CONST

    isNodeChanged = false

    opcode      = node.opcode
    value       = node.value
    newValue    = node._undefined_ # TODO: Clean up this mess.
    childrenCnt = node.childrenCnt
    children    = node.children
    x           = children[0]
    y           = children[1]
    areArgsImm  = true

    if (opcode is AST_OPCODE_CALL) and (value is 'global')
      # Global import - do nothing.

    else
      # General case - go on.
      if opcode is AST_DATA_ARRAY
        if typeof(value) isnt 'array'
          this._processNodeArray(node)
        endif

      elif opcode is AST_DATA_MAP
        if typeof(value) isnt 'map'
          this._processNodeMap(node)
        endif

      else
        # Process all child nodes first.
        startIdx = 0

        if (opcode is AST_OPCODE_DECLARE_OR_ASSIGN) and (x.opcode is AST_OPCODE_VARIABLE)
          # Don't touch variable lval to avoid imm = imm code.
          startIdx = 1
        endif

        for idx in startIdx .. childrenCnt
          this.processNodeUntilNotChanged(children[idx])

          if AST_IsImm(children[idx]) is false
            # There is at least one non-imm arg.
            # We can't calculate immediate value.
            areArgsImm = false
          endif
        endfor

        if (opcode is AST_OPCODE_MUL) or (opcode is AST_OPCODE_ADD)
          if (y.opcode is opcode)
            # imm * (imm * a) * gives (imm * imm) * a
            # imm * (imm + a) + gives (imm + imm) + a
            tmp              = y.children[1]
            y.children[1]    = node.children[0]
            node.children[0] = tmp
            isNodeChanged    = true
          endif

        elif opcode is AST_OPCODE_VARIABLE
          # Convert variable to constant if possible.
          # TODO: Clean up this mess.
          if (typeof(node.storedValue) isnt 'undefined') and (typeof(node.storedValue) isnt 'array') and AST_IsImm(node.storedValue)
            if typeof(node.storedValue) isnt 'array'
              if (typeof(node.storedValue.value) isnt 'array') and (typeof(node.storedValue.value) isnt 'map')
                if this.globals.isset(value) is false
                  newValue = node.storedValue.value
                endif
              endif
            endif
          endif

          if (typeof(newValue) is 'undefined') and (this.globals.isset(value) is true)
            symbolInfo = this.globals.lookup(value)
            # TODO: Handle imm arrays/maps/objects.
            if symbolInfo.writeHits is 1

              if (typeof(symbolInfo.value) is 'integer') or (typeof(symbolInfo.value) is 'float') or (typeof(symbolInfo.value) is 'boolean')
                newValue = symbolInfo.value
              endif
            endif
          endif

        elif (opcode is AST_OPCODE_CALL) and (value is 'print')
          # Special case: print(x,y,z,...) function.
          newParams  = []
          lastWasImm = false

          for idx in 0 .. childrenCnt
            # Convert imm to strings.
            if (children[idx].opcode >= AST_OPCODE_PROGRAM) or (children[idx].opcode is AST_DATA_ARRAY) or (children[idx].opcode is AST_DATA_MAP)
              # Stay non-imm params as is.
              lastWasImm = false
              newParams[len(newParams)] = children[idx]

            else
              # Join string imms.
              if lastWasImm is true
                # Both previous and current params are strings - concatenate them.
                newParams[len(newParams) - 1].value = newParams[len(newParams) - 1].value + ' ' + str(children[idx].value)

              elif children[idx].opcode is AST_DATA_STRING
                # Current param is string, but previous not.
                # Push new param to list.
                newParams[len(newParams)] = children[idx]

              else
                # Both previous and current params are *NOT* strings.
                # Convert it to string.
                this._setToImm(children[idx], str(children[idx].value))
                newParams[len(newParams)] = children[idx]
              endif

              lastWasImm = true
            endif
          endfor

          node.children    = newParams
          node.childrenCnt = len(newParams)
        endif

        # Calculate imm result if all child nodes are imm.
        if areArgsImm is true

          # Dispatch opcode.
          if opcode is AST_OPCODE_CALL
            if value is 'typeof'
              newValue = typeof(x.value)

            elif value is 'len'
              newValue = len(x.value)

            elif value is 'str'
              newValue = str(x.value)

            else
              # Unhandled call - do nothing.
            endif

          elif opcode is AST_OPCODE_NEG
            newValue = -x.value

          elif childrenCnt is 2
            # x op y
            if opcode is AST_OPCODE_ADD
              newValue = x.value + y.value

            elif opcode is AST_OPCODE_SUB
              newValue = x.value - y.value

            elif opcode is AST_OPCODE_MUL
              newValue = x.value * y.value

            elif opcode is AST_OPCODE_DIV
              newValue = x.value / y.value

            elif opcode is AST_OPCODE_IDIV
              newValue = x.value // y.value

            elif opcode is AST_OPCODE_COMPARE_EQ
              newValue = x.value is y.value

            elif opcode is AST_OPCODE_COMPARE_NEQ
              newValue = x.value isnt y.value

            elif opcode is AST_OPCODE_COMPARE_LT
              if x.value < y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_COMPARE_LE
              if x.value <= y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_COMPARE_GT
              if x.value > y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_COMPARE_GE
              if x.value >= y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_BOOL_AND
              if (x.value is true) and (y.value is true)
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_BOOL_OR
              if (x.value is true) or (y.value is true)
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_REFERENCE
              # x[y]
              newValue = x.value[y.value]
            endif
          endif

        elif (opcode is AST_OPCODE_CALL) and (value is 'typeof')
          # typeof(...) - non imm variant.
          # Maybe we already know type?
          astType = AST_GetDataType(x)
          if astType isnt -1
            newValue = AST_ConvertDataTypeToText(astType)
          endif
        endif

        # TODO: Clean up this mess.
        #if newValue isnt value
        if typeof(newValue) isnt 'undefined'
          this._setToImm(node, newValue)
          isNodeChanged = true
        else
          isNodeChanged = false
        endif
      endif
    endif
  endmethod

  method processNodeUntilNotChanged(node) -> isAnyChangedDone
    isAnyChangedDone = false
    while this.processNode(node) is true
      # Repeat as long as node changed.
      isAnyChangedDone = true
    endwhile
  endmethod
endclass
