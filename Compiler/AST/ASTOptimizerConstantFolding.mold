################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import './AST.mold'

class ASTOptimizerConstantFolding
  method constructor(app)
    this.app = app
    this.globals = app.getSymbolTable()
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTConstantFolding ]', msg
    endif
  endmethod

  method _setToImm(dst, value)
    global AST_DATA_BOOL, AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_DATA_UNDEFINED
    global AST_OPCODE_VARIABLE

    type = typeof(value)

    this._debug('Set node #' ~ str(dst.id) ~ ' to imm "' ~ str(value) ~ '" (' ~ type ~ ')')

    if dst.opcode is AST_OPCODE_VARIABLE
      if dst.symbolInfo is defined
        dst.symbolInfo.readHits = dst.symbolInfo.readHits - 1
      endif
    endif

    if type is 'boolean'
      newOpcode = AST_DATA_BOOL

    elif type is 'integer'
      newOpcode = AST_DATA_INTEGER

    elif type is 'float'
      newOpcode = AST_DATA_DOUBLE

    elif type is 'string'
      newOpcode = AST_DATA_STRING

    elif type is 'undefined'
      newOpcode = AST_DATA_UNDEFINED

    elif type is 'array'
      newOpcode = AST_DATA_ARRAY

    elif type is 'map'
      newOpcode = AST_DATA_MAP

    else
      # Remove newOpcode assign.
      newOpcode = -1
      die('error: unhandled result in constant folding: ' ~ type)
    endif

    dst.children = []
    dst.opcode   = newOpcode
    dst.value    = value
  endmethod

  method _processNodeArray(node)
    valuesStatic  = []
    useStaticList = false

    for values oneChild in node.children
      isChildChanged = this.processNode(oneChild)

      if AST_IsImm(oneChild) is true
        childValue               = oneChild.value
        useStaticList            = true
        oneChild.movedToInitList = true
      else
        childValue = null
      endif

      valuesStatic[@afterlast] = childValue
    endfor

    if useStaticList is true
      node.initList = valuesStatic
    endif
  endmethod

  method _processNodeMap(node)
    valuesStatic  = {}
    useStaticList = false

    children    = node.children
    childrenCnt = len(children)

    # TODO: Use foreach with step by.
    for idx in 0 .. childrenCnt step 2
      nodeKey   = children[idx]
      nodeValue = children[idx + 1]

      isKeyChanged   = this.processNode(nodeKey)
      isValueChanged = this.processNode(nodeValue)

      if AST_IsImm(nodeKey) is false
        die('error: non-imm map key in init list')
      endif

      if AST_IsImm(nodeValue) is true
        childValue                = nodeValue.value
        useStaticList             = true
        nodeValue.movedToInitList = true
      else
        childValue = null
      endif

      valuesStatic{nodeKey.value} = childValue
    endfor

    if useStaticList is true
      node.initList = valuesStatic
    endif
  endmethod

  method processNode(node) -> isNodeChanged
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_IF
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_CALL
    global AST_OPCODE_NEG
    global AST_OPCODE_NOP
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ
    global AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_COMPARE_GT, AST_OPCODE_COMPARE_GE
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV, AST_OPCODE_IDIV
    global AST_DATA_BOOL, AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_DATA_UNDEFINED
    global AST_OPCODE_STRING_JOIN
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR
    global AST_OPCODE_REFERENCE_BY_INDEX
    global AST_OPCODE_REFERENCE_BY_KEY
    global AST_OPCODE_TYPE_CAST
    global SYMBOL_KIND_CONST
    global AST_OPCODE_IS_TYPEOF
    global AST_OPCODE_IS_NOT_TYPEOF

    global MOLD_SYSCALL_ID_ORD
    global MOLD_SYSCALL_ID_ASC
    global MOLD_SYSCALL_ID_PARSE_INTEGER
    global MOLD_SYSCALL_ID_PARSE_FLOAT

    global MOLD_SYSCALL_ID_BITAND
    global MOLD_SYSCALL_ID_BITOR
    global MOLD_SYSCALL_ID_BITXOR
    global MOLD_SYSCALL_ID_BITNOT

    global MOLD_SYSCALL_ID_EXIT
    global MOLD_SYSCALL_ID_DIE
    global MOLD_SYSCALL_ID_STR
    global MOLD_SYSCALL_ID_LEN
    global MOLD_SYSCALL_ID_TYPEOF
    global MOLD_SYSCALL_ID_GET_TYPEID

    isNodeChanged = false

    value    = null
    newValue = null

    opcode      = node.opcode
    value       = node.value
    children    = node.children
    childrenCnt = len(children)
    x           = children[0]
    y           = children[1]
    areArgsImm  = true

    if (opcode is AST_OPCODE_CALL) and (value is 'global')
      # Global import - do nothing.

    else
      # General case - go on.
      if opcode is AST_DATA_ARRAY
        if typeof(value) isnt 'array'
          this._processNodeArray(node)
        endif

      elif opcode is AST_DATA_MAP
        if typeof(value) isnt 'map'
          this._processNodeMap(node)
        endif

      else
        # Process all child nodes first.
        startIdx = 0

        if (opcode is AST_OPCODE_DECLARE_OR_ASSIGN) and (x.opcode is AST_OPCODE_VARIABLE)
          # Don't touch variable lval to avoid imm = imm code.
          startIdx = 1
        endif

        for idx in startIdx .. childrenCnt
          isChildChanged = this.processNodeUntilNotChanged(children[idx])

          if AST_IsImm(children[idx]) is false
            # There is at least one non-imm arg.
            # We can't calculate immediate value.
            areArgsImm = false
          endif
        endfor

        if (opcode is AST_OPCODE_MUL) or (opcode is AST_OPCODE_ADD)
          if (y.opcode is opcode)
            # imm * (imm * a) * gives (imm * imm) * a
            # imm * (imm + a) + gives (imm + imm) + a
            tmp              = y.children[1]
            y.children[1]    = node.children[0]
            node.children[0] = tmp
            isNodeChanged    = true
          endif

        elif opcode is AST_OPCODE_VARIABLE
          # Convert variable to constant if possible.
          # TODO: Clean up this mess.
          if ((node.storedValue is defined) and
              (typeof(node.storedValue) isnt 'array') and
              (AST_IsImm(node.storedValue) is true))

            if typeof(node.storedValue) isnt 'array'

              if ((typeof(node.storedValue.value) isnt 'array') and
                  (typeof(node.storedValue.value) isnt 'map'))

                if this.globals.isset(value) is false
                  newValue = node.storedValue.value
                endif
              endif
            endif
          endif

          if (newValue is undefined) and (this.globals.isset(value) is true)
            symbolInfo = this.globals.lookup(value)
            # TODO: Handle imm arrays/maps/objects.
            if symbolInfo.writeHits is 1

              if ((typeof(symbolInfo.value) is 'integer') or
                  (typeof(symbolInfo.value) is 'float') or
                  (typeof(symbolInfo.value) is 'boolean'))

                # TODO: Review it.
                newValue = symbolInfo.value
                #symbolInfo.kind = SYMBOL_KIND_CONST
              endif
            endif
          endif

        elif (opcode is AST_OPCODE_CALL) and (value is 'print')
          # Special case: print(x,y,z,...) function.
          newParams  = []
          lastWasImm = false

          for values oneChild in children
            # Convert imm to strings.
            if ((oneChild.opcode >= AST_OPCODE_PROGRAM) or
                (oneChild.opcode is AST_DATA_ARRAY) or
                (oneChild.opcode is AST_DATA_MAP))

              # Stay non-imm params as is.
              lastWasImm = false
              newParams[@afterlast] = oneChild

            else
              # Join string imms.
              if lastWasImm is true
                # Both previous and current params are strings - concatenate them.
                newParams[@last].value = newParams[@last].value ~ ' ' ~ str(oneChild.value)

              elif oneChild.opcode is AST_DATA_STRING
                # Current param is string, but previous not.
                # Push new param to list.
                newParams[@afterlast] = oneChild

              else
                # Both previous and current params are *NOT* strings.
                # Convert it to string.
                this._setToImm(oneChild, str(oneChild.value))
                newParams[@afterlast] = oneChild
              endif

              lastWasImm = true
            endif
          endfor

          node.children = newParams

        # TODO: Why symbolInfo.value is never set here?
        elif ((opcode is AST_OPCODE_CALL) and
              (value is '__mold_syscall') and
              (node.symbolInfoForSyscallId is defined) and
              (node.symbolInfoForSyscallId.writeHits <= 1) and
              (node.symbolInfoForSyscallId.value is integer))

          this._debug('Set syscall id at node #' ~ str(node.id) ~ ' to imm "' ~ str(node.symbolInfoForSyscallId.value) ~ '" (integer)')

          node.sysCallId = node.symbolInfoForSyscallId.value
          node.symbolInfoForSyscallId.readHits = node.symbolInfoForSyscallId.readHits - 1

        # TODO: Review it.
        elif (((opcode is AST_OPCODE_REFERENCE_BY_INDEX) or (opcode is AST_OPCODE_REFERENCE_BY_KEY)) and
              (x.opcode is AST_OPCODE_VARIABLE) and
              (x.symbolInfo.kind is SYMBOL_KIND_CONST) and
              (AST_IsImm(y) is true))

          # box[i] or box{key}
          # Access to constant array with imm index.
          # We can resolve it at compilation time.
          if opcode is AST_OPCODE_REFERENCE_BY_INDEX
            newValue = x.symbolInfo.value[y.value]
          else
            newValue = x.symbolInfo.value{y.value}
          endif

          if (typeof(newValue) isnt 'array') and (typeof(newValue) isnt 'map')
            x.symbolInfo.readHits = x.symbolInfo.readHits - 1
          endif
        endif

        # Calculate imm result if all child nodes are imm.
        if (newValue is undefined) and (areArgsImm is true)

          # Dispatch opcode.
          if opcode is AST_OPCODE_CALL
            # TODO: Why we get non-integer sysCallId here?
            if (value is '__mold_syscall') and (childrenCnt is 1)
              # __mold_syscall(id, x)
              sysCallId = node.sysCallId
              xValue    = x.value

              if ((sysCallId is MOLD_SYSCALL_ID_ORD) or
                  (sysCallId is MOLD_SYSCALL_ID_ASC) or
                  (sysCallId is MOLD_SYSCALL_ID_PARSE_INTEGER) or
                  (sysCallId is MOLD_SYSCALL_ID_PARSE_FLOAT) or
                  (sysCallId is MOLD_SYSCALL_ID_STR) or
                  (sysCallId is MOLD_SYSCALL_ID_LEN) or
                  (sysCallId is MOLD_SYSCALL_ID_TYPEOF) or
                  (sysCallId is MOLD_SYSCALL_ID_GET_TYPEID))

                newValue = __mold_syscall(sysCallId, xValue)
              endif
            endif

          elif opcode is AST_OPCODE_IS_TYPEOF
            newValue = __mold_syscall(MOLD_SYSCALL_ID_GET_TYPEID, x.value) is value

          elif opcode is AST_OPCODE_IS_NOT_TYPEOF
            newValue = __mold_syscall(MOLD_SYSCALL_ID_GET_TYPEID, x.value) isnt value

          elif opcode is AST_OPCODE_NEG
            newValue = -x.value

          elif childrenCnt is 2
            # x op y
            if opcode is AST_OPCODE_ADD
              newValue = x.value + y.value

            elif opcode is AST_OPCODE_STRING_JOIN
              newValue = x.value ~ y.value

            elif opcode is AST_OPCODE_SUB
              newValue = x.value - y.value

            elif opcode is AST_OPCODE_MUL
              newValue = x.value * y.value

            elif opcode is AST_OPCODE_DIV
              newValue = x.value / y.value

            elif opcode is AST_OPCODE_IDIV
              newValue = x.value // y.value

            elif opcode is AST_OPCODE_COMPARE_EQ
              newValue = x.value is y.value

            elif opcode is AST_OPCODE_COMPARE_NEQ
              newValue = x.value isnt y.value

            elif opcode is AST_OPCODE_COMPARE_LT
              if x.value < y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_COMPARE_LE
              if x.value <= y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_COMPARE_GT
              if x.value > y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_COMPARE_GE
              if x.value >= y.value
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_BOOL_AND
              if (x.value is true) and (y.value is true)
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_BOOL_OR
              if (x.value is true) or (y.value is true)
                newValue = true
              else
                newValue = false
              endif

            elif opcode is AST_OPCODE_REFERENCE_BY_INDEX
              # x[y]
              newValue = x.value[y.value]

            elif opcode is AST_OPCODE_REFERENCE_BY_KEY
              # x{y}
              newValue = x.value{y.value}
            endif
          endif

        # TODO: Why we sometimes get non-integer sysCallId here?
        elif ((opcode is AST_OPCODE_CALL) and
              (value is '__mold_syscall') and
              (node.sysCallId is integer) and
              (node.sysCallId is MOLD_SYSCALL_ID_TYPEOF))

          # typeof(...) - non imm variant.
          # Maybe we already know type?
          astType = AST_GetDataType(x)
          if astType isnt -1
            newValue = AST_ConvertDataTypeToText(astType)
          endif
        endif

        # TODO: Clean up this mess.
        if newValue is defined
          this._setToImm(node, newValue)
          isNodeChanged = true
        else
          isNodeChanged = false
        endif
      endif
    endif
  endmethod

  method processNodeUntilNotChanged(node) -> isAnyChangedDone
    isAnyChangedDone = false
    while this.processNode(node) is true
      # Repeat as long as node changed.
      isAnyChangedDone = true
    endwhile
  endmethod
endclass
