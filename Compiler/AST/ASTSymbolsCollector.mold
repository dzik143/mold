################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'AST/ASTUtils.mold'

class ASTSymbolsCollector

  method constructor(app)
    this.app = app
  endmethod

  # ----------------------------------------------------------------------------
  #                          Internal API (private)
  # ----------------------------------------------------------------------------

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTSymbolsCollector ]', msg
    endif
  endmethod

  method _collectSymbolsFromLeftNode(symbolTable, node)
    this._collectSymbols(symbolTable, node, true)
  endmethod

  method _collectSymbolsFromRightNode(symbolTable, node)
    this._collectSymbols(symbolTable, node, false)
  endmethod

  method _updateVariableSymbolInfo(node, variableName, newSymbolInfo)
    global AST_OPCODE_VARIABLE

    # TODO: Clean up this mess.
    if node.opcode is AST_OPCODE_VARIABLE
      if node.value is variableName
        node.symbolInfo = newSymbolInfo
      endif

    else
      for values item in node.children
        this._updateVariableSymbolInfo(item, variableName, newSymbolInfo)
      endfor
    endif
  endmethod

  method _collectSymbols(symbolTable, node, isLeftNode)
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_CALL
    global AST_OPCODE_IF
    global AST_OPCODE_WHILE
    global AST_OPCODE_VCALL
    global AST_OPCODE_REFERENCE_BY_INDEX
    global AST_OPCODE_REFERENCE_BY_KEY
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_CLASS
    global AST_OPCODE_CLASS_METHOD
    global AST_OPCODE_NOP
    global AST_OPCODE_TYPE_CAST
    global AST_OPCODE_COMPARE_EQ
    global AST_OPCODE_COMPARE_NEQ
    global AST_OPCODE_COMPARE_LE
    global AST_OPCODE_BOOL_NOT
    global AST_OPCODE_CALL_NEW
    global AST_DATA_UNDEFINED
    global AST_DATA_BOOL
    global AST_DATA_OBJECT
    global AST_DATA_ARRAY
    global AST_DATA_STRING
    global SYMBOL_KIND_VAR_GLOBAL, SYMBOL_KIND_VAR_RETVAL, SYMBOL_KIND_CONST
    global AST_OPCODE_MUL, AST_OPCODE_SUB, AST_OPCODE_DIV, AST_OPCODE_IDIV
    global AST_DATA_DOUBLE, AST_DATA_INTEGER

    global AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_FOR_VALUES
    global AST_OPCODE_FOR_KEYS
    global AST_OPCODE_FOR_KEYS_VALUES
    global AST_OPCODE_FOR_INDEXES
    global AST_OPCODE_FOR_INDEXES_VALUES

    # TODO: Clean up this mess.
    # TODO: Better way to pass current line/column to error
    # handler.
    this.app.setLogContext(node)

    opcode      = node.opcode
    children    = node.children
    childrenCnt = len(children)

    # TODO: Remove it.
    # We use it to work-around problem with emitting [object] to
    # external source.ast file.
    for values item in children
      item.parent = node
    endfor

    # TODO: Clean up this mess.
    if (opcode is AST_OPCODE_VARIABLE) and (node.value is '__this_placeholder__')
      # Do nothing.

    elif opcode is AST_OPCODE_PROGRAM
      symbolTable      = this.app.getSymbolTable()
      node.symbolTable = symbolTable

      for values item in children
        this._collectSymbolsFromLeftNode(node.symbolTable, item)
      endfor

    elif opcode is AST_DATA_STRING
      if isLeftNode is true
        this.app.logError('string type cannot be modified')
      endif

      symbolInfo = symbolTable.insertLiteral(node.value)

      node.opcode     = AST_OPCODE_VARIABLE
      node.value      = symbolInfo.name
      node.symbolInfo = symbolInfo

    elif opcode is AST_OPCODE_CLASS
      # Collect members.
      className   = node.value.name
      baseName    = node.value.baseName
      vtable      = {}
      baseMethods = {}
      classProto  = {}

      # Import base class if any.
      if baseName is defined
        # Derived class, build class by applying derived over base one.
        baseProto   = symbolTable.lookupClass(baseName).proto
        baseMethods = baseProto.vtable

        # Merge base class first.
        for keys oneMethodName values methodProto in baseMethods
          vtable{oneMethodName} = methodProto
        endfor
      endif

      # Apply current declared class.
      for values child in children
        opcode = child.opcode

        if opcode is AST_OPCODE_CLASS_METHOD
          methodName      = child.value.name
          methodParamsCnt = len(child.params)

          child.fullName   = '__' ~ className ~ '_' ~ methodName ~ '$' ~ str(methodParamsCnt)
          child.className  = className
          child.classProto = classProto

          if baseMethods{methodName} is defined
            # Save proto of base method if any.
            baseMethodProto  = baseMethods{methodName}
            child.baseMethod = baseMethodProto
            baseMethodProto.isOverloaded = true
          endif

          vtable{methodName} = child

          this._collectSymbolsFromLeftNode(symbolTable, child)
        endif
      endfor

      # Declare new class.
      classProto.name               = className
      classProto.baseName           = baseName
      classProto.vtable             = vtable
      classProto.propertyClassNames = {}

      node.proto = classProto

      symbolTable.insertClass(className, classProto)

    elif (opcode is AST_OPCODE_FUNCTION) or (opcode is AST_OPCODE_CLASS_METHOD)
      nodeBody  = children[0]
      funcProto = node
      value     = node.value
      #params    = value.params

      funcProto.params = value.params
      funcProto.name   = value.name
      funcProto.rv     = value.rv

      if node.fullName is defined
        funcName = node.fullName
      else
        funcName = value.name
      endif

      funcProto.fullName = funcName

      symbolTable.insertFunction(funcName, funcProto)

      if nodeBody.symbolTable is undefined
        # Init new symbol table if not existing yet.
        nodeBody.symbolTable = symbolTable.enterScopeForProcedure(funcName)

        paramShift = 0

        # TODO: Why we need to add this param by hand?
        if opcode is AST_OPCODE_CLASS_METHOD
          # Optimize it.
          symbolInfo = nodeBody.symbolTable.insertParam('this', 0)
          symbolInfo.classProto = funcProto.classProto
          nodeBody.symbolTable.assignType('this', AST_DATA_OBJECT)

          paramShift = 1
        endif

        for indexes paramIdx values paramName in funcProto.params
          nodeBody.symbolTable.insertParam(paramName, paramShift + paramIdx)

          # TODO: Handle non-variant parameters.
          nodeBody.symbolTable.assignType(paramName, -1)
        endfor
      endif

      this._collectSymbolsFromLeftNode(nodeBody.symbolTable, nodeBody)

      # Verify is return value set after function end if needed.
      if funcProto.rv is defined
        if nodeBody.symbolTable.isset(funcProto.rv) is true
          # Return value is set inside all branches. Go on.
          # Change variable kind to RETVAL and force variant type.
          # TODO: Handle non-variant return values.
          symbolInfo         = nodeBody.symbolTable.lookup(funcProto.rv)
          symbolInfo.kind    = SYMBOL_KIND_VAR_RETVAL
          symbolInfo.astType = -1

          # TODO: Clean up this mess.
          #symbolInfo.name     = '__rv'
          #symbolInfo.alias    = funcProto.rv
          symbolInfo.readHits = symbolInfo.readHits + 1
          #nodeBody.symbolTable.symbols['__rv'] = symbolInfo

        else
          # Error - there is at least one branch, where return value is
          # not set.
          this.app.logError("unset return variable '" ~ funcProto.rv ~ "' in '" ~ funcName ~ "' function")
        endif
      endif

    elif opcode is AST_OPCODE_BLOCK
      if node.symbolTable is undefined
        # Init new symbol table if not existing yet.
        node.symbolTable = symbolTable.enterScope()

        # TODO: Review it.
        if node.symbolTable.deepIdx is 1
          node.symbolTable.importExternalVariable('argv')
          node.symbolTable.importExternalVariable('argc')
        endif
      endif

      for values item in children
        this._collectSymbolsFromLeftNode(node.symbolTable, item)
      endfor

      node.symbolTable.leaveScope()

    elif opcode is AST_OPCODE_VARIABLE
      if isLeftNode is true
        # x = ...
        symbolInfo = symbolTable.lookupForWrite(node.value)
      else
        # ... = x
        symbolInfo = symbolTable.lookupForRead(node.value)
      endif

      # Track data type.
      node.symbolInfo = symbolInfo

    elif opcode is AST_OPCODE_REFERENCE_BY_INDEX
       # There are two cases:
       # 1. x[i] = ...  : x is left , i is right
       # 2. ...  = x[i] : x is right, i is right
       # Rule:
       # - x always save L/R context,
       # - index (i) has always R context (lookup for read).

       nodeBox = children[0]
       nodeIdx = children[1]

       this._collectSymbols(symbolTable, nodeBox, isLeftNode)
       this._collectSymbolsFromRightNode(symbolTable, nodeIdx)

       # TODO: Review it.
       # It's not needed - we already accessed box container.
       if nodeBox.opcode is AST_OPCODE_VARIABLE
         # x[i] = ... is read for x too.
         symbolTable.lookupForRead(children[0].value)

         # TODO: Review it.
         if isLeftNode is true
           # x[i] = ...
           symbolTable.useAsArray(nodeBox.value)
         else
           # ... = x[i]
           symbolTable.useAsArrayOrString(nodeBox.value)
         endif
       endif

       # TODO: Handle complex nodes.
       if nodeIdx.opcode is AST_OPCODE_VARIABLE
         symbolTable.useAsIndex(nodeIdx.value)
       endif

    elif opcode is AST_OPCODE_REFERENCE_BY_KEY
       # There are two cases:
       # 1. x{key} = ...    : x is left , key is right
       # 2. ...    = x{key} : x is right, key is right
       # Rule:
       # - x always save L/R context,
       # - index (i) has always R context (lookup for read).
       nodeBox = children[0]
       nodeKey = children[1]

       this._collectSymbols(symbolTable, nodeBox, isLeftNode)
       this._collectSymbolsFromRightNode(symbolTable, nodeKey)

       # TODO: Review it.
       # It's not needed - we already accessed box container.
       if nodeBox.opcode is AST_OPCODE_VARIABLE
         # x[i] = ... is read for x too.
         symbolTable.lookupForRead(children[0].value)

         # Posible improvement: Distinguish between map and object.
         # Posible improvement: Distinguish between x.key and x{key}.
         symbolTable.useAsMapOrObject(nodeBox.value)
       endif

       # TODO: Handle complex nodes.
       if nodeKey.opcode is AST_OPCODE_VARIABLE
         symbolTable.useAsKey(nodeKey.value)
       endif

    elif opcode is AST_OPCODE_DECLARE_OR_ASSIGN
      # lval = rval
      lval = children[0]
      rval = children[1]

      if lval.opcode is AST_OPCODE_VARIABLE
        # TODO: Review it.
        # Handle constant arrays.
        if (rval.opcode is AST_DATA_ARRAY) and (typeof(rval.value) is 'array')
          # Insert new constant.
          symbolInfo  = symbolTable.insertConst(lval.value, rval.value)
          node.opcode = AST_OPCODE_NOP

/*
          TEMPORARY DISABLED DUE TO x[-10000] issue (should gives undefined)
          # TODO: Review it.
          # TODO: Optimize it.
          innerType = AST_GetDataTypeFromValue(rval.value[0])

          for values v in rval.value
            if innerType isnt AST_GetDataTypeFromValue(v)
              # At least two different types found.
              # Fall back to varaint.
              innerType = -1
            endif
          endfor

          symbolInfo.astInnerType = innerType

          this._debug('Assigned inner type at node #' ~ str(node.id) ~ ' (' ~ str(innerType) ~ ')')
*/

        else
          # Simple lval (single variable) - insert into symbol table.
          symbolInfo = symbolTable.lookupForWriteOrInsert(lval.value)
        endif

        lval.symbolInfo = symbolInfo

        # Scan rval.
        this._collectSymbolsFromRightNode(symbolTable, rval)

        # Save value node for constant propagation.
        symbolTable.assignNode(lval.value, lval)

        if AST_IsImm(rval) is true
          symbolTable.assignValue(lval.value, rval.value)
        endif

        # Handle well-known types.
        if rval.opcode is AST_OPCODE_CALL_NEW
          # lval = new Xxx(...)
          if symbolTable.isset(rval.value) is true
            oldClassProto = symbolInfo.classProto
            newClassProto = symbolTable.lookupClass(rval.value).proto

            if (oldClassProto is defined) and (oldClassProto isnt newClassProto)
              # Class mismatch.
              # obj = new A()
              # obj = new B()
              #
              # TODO: Clean up this mess.
              this._debug('Class mismatch while assigning new object at node #' ~ str(node.id))
              x = []
              symbolInfo.classProto = x[0]
            else
              symbolInfo.classProto = newClassProto
            endif
          endif
        endif

        # TODO: Review it.
        symbolTable.assignType(lval.value, AST_GetDataType(rval))

        # TODO: Review it.
        # Force variant for: x = null
        if rval.opcode is AST_DATA_UNDEFINED
          symbolInfo.isAstTypeFrozen = true
        endif

        # TODO?
        # Handle overwrite one object by instance of another one.
        # objA = new A()
        # objB = new B()
        # obj = objA
        # obj = objB

      else
        # Complex lval - go on deeper.
        this._collectSymbolsFromLeftNode(symbolTable, lval)
        this._collectSymbolsFromRightNode(symbolTable, rval)
      endif

    elif opcode is AST_OPCODE_IF
      # if cond then x else y
      # cond is rval,
      # x,y are lval.

      # Scan condition (rval)
      this._collectSymbolsFromRightNode(symbolTable, children[0])

      # Scan condition (lval)
      this._collectSymbolsFromLeftNode(symbolTable, children[1])

      if childrenCnt is 3
        # Optional else block (lval).
        this._collectSymbolsFromLeftNode(symbolTable, children[2])

        # Merge symbols defined in both nodes. We know it's always set.
        # if cond
        #   x = 1
        # else
        #   x = 2
        # endif

        symbolTable1 = children[1].symbolTable
        symbolTable2 = children[2].symbolTable

        symbols1 = symbolTable1.exportSymbols()
        symbols2 = symbolTable2.exportSymbols()

        for values symbolInfo1 in symbols1
          symbolInfo2 = symbols2{symbolInfo1.name}

          if symbolInfo2 is defined
            # Symbol defined in both nodes - move into parent node.
            # TODO: Use max(x, y) or x+y?
            readHits  = symbolInfo1.readHits  + symbolInfo2.readHits
            writeHits = symbolInfo1.writeHits + symbolInfo2.writeHits

            # Remove from child true/false node.
            symbolTable1.remove(symbolInfo1.name)
            symbolTable2.remove(symbolInfo1.name)

            if symbolTable.isset(symbolInfo1.name) is false
              symbolTable.insert(symbolInfo1.name, symbolInfo1)
            endif

            symbolInfo1.readHits  = readHits
            symbolInfo1.writeHits = writeHits

            # Merge AST data type.
            astType1 = symbolTable1.astType
            astType2 = symbolTable2.astType

            if astType1 isnt astType2
              # Type mismatch.
              # TODO: Review it.
              # TODO: Clean up this mess.
              if ((astType1 is -1) and
                 ((astType2 is AST_DATA_STRING) or (astType2 >= AST_DATA_OBJECT)))
                # variant vs string|object|map|array
                # Do nothing.
              elif ((astType2 is -1) and
                   ((astType1 is AST_DATA_STRING) or (astType1 >= AST_DATA_OBJECT)))
                # string|object|map|array vs variant
                # string vs variant
                # Do nothing.

              else
                typeName1 = AST_ConvertDataTypeToText(astType1)
                typeName2 = AST_ConvertDataTypeToText(astType2)
                id        = symbolInfo1.name
                this.app.logError("attempted to use '" ~ id ~ "' as " ~ typeName2 ~ "; it was used as " ~ typeName1 ~ ' before')

                #astType = -1
                #
                #if (astType1 is AST_DATA_DOUBLE) and (astType2 is AST_DATA_INTEGER)
                #  astType = AST_DATA_DOUBLE
                #
                #elif (astType1 is AST_DATA_INTEGER) and (astType2 is AST_DATA_DOUBLE)
                #  astType = AST_DATA_DOUBLE
                #endif
                #
                #symbolInfo1.astType = astType
              endif

            else
              classProto1 = symbolInfo1.classProto
              classProto2 = symbolInfo2.classProto

              if classProto1 isnt classProto2
                # Object class mismatch. Keep virtual call.
                # TODO: Clean up this mess.
                x = []
                symbolInfo1.classProto = x[0]
              endif
            endif

            # TODO: Optimize it.
            this._updateVariableSymbolInfo(children[1], symbolInfo1.name, symbolInfo1)
            this._updateVariableSymbolInfo(children[2], symbolInfo1.name, symbolInfo1)
          endif
        endfor
      endif

      # TODO: Better way to merge symbols from IF branches recursively.
      if node.symbolTable is undefined
        node.symbolTable = symbolTable
      endif

    elif opcode is AST_OPCODE_FOR_VALUES_RANGE
      # for idx in idxStart .. idxEnd by step
      iterNode     = children[0]
      idxStartNode = children[1]
      idxEndNode   = children[2]
      idxStepNode  = children[3]
      bodyNode     = children[4]

      if symbolTable.isset(iterNode.value) is true
        this.app.setLogContext(iterNode)
        this.app.logError("'" ~ iterNode.value ~ "' cannot be used as iterator")
      endif

      # TODO: Optimize it.
      bodyNode.symbolTable = symbolTable.enterScopeForLoop()
      bodyNode.symbolTable.insertLocal(iterNode.value)
      iterNode.symbolInfo = bodyNode.symbolTable.lookupForReadAndWrite(iterNode.value)
      bodyNode.symbolTable.assignType(iterNode.value, AST_DATA_INTEGER)

      this._collectSymbolsFromRightNode(symbolTable, idxStartNode)
      this._collectSymbolsFromRightNode(symbolTable, idxEndNode)
      this._collectSymbolsFromRightNode(symbolTable, idxStepNode)
      this._collectSymbolsFromLeftNode(symbolTable, bodyNode)

    elif ((opcode is AST_OPCODE_FOR_VALUES) or
          (opcode is AST_OPCODE_FOR_KEYS) or
          (opcode is AST_OPCODE_FOR_KEYS_VALUES) or
          (opcode is AST_OPCODE_FOR_INDEXES) or
          (opcode is AST_OPCODE_FOR_INDEXES_VALUES))

      # for values v in box
      # for keys k in box
      # for indexes idx in box

      # Two last nodes are box and loop body.
      iteratorsCnt = childrenCnt - 2
      boxNode      = children[childrenCnt - 2]
      bodyNode     = children[childrenCnt - 1]

      # TODO: Optimize it.
      bodyNode.symbolTable = symbolTable.enterScopeForLoop()

      # Process iterators.
      for idx in 0 .. iteratorsCnt
        iterNode = children[idx]
        if symbolTable.isset(iterNode.value) is true
          this.app.logError("'" ~ iterNode.value ~ "' is already defined in another context")
        endif

        bodyNode.symbolTable.insertLocal(iterNode.value)

        # TODO: Review it.
        iterNode.symbolInfo = bodyNode.symbolTable.lookupForReadAndWrite(iterNode.value)
        iterNode.symbolInfo.usedAsIterator = true
        iterNode.symbolInfo.astType = -1
        iterNode.symbolInfo.isAstTypeFrozen = true
      endfor

      # TODO: Is it always ok?
      # TODO: Check for variable node.
      boxNode.symbolInfo = bodyNode.symbolTable.lookupForRead(boxNode.value)

      # TODO: Clean up this mess.
      if (opcode is AST_OPCODE_FOR_INDEXES) or (opcode is AST_OPCODE_FOR_INDEXES_VALUES)
        bodyNode.symbolTable.useAsIndex(children[0].value)

      elif (opcode is AST_OPCODE_FOR_KEYS) or (opcode is AST_OPCODE_FOR_KEYS_VALUES)
        bodyNode.symbolTable.useAsKey(children[0].value)
      endif

      this._collectSymbolsFromRightNode(symbolTable, boxNode)
      this._collectSymbolsFromLeftNode(symbolTable, bodyNode)

    elif opcode is AST_OPCODE_WHILE
      # while (cond) body
      condNode = children[0]
      bodyNode = children[1]

      bodyNode.symbolTable = symbolTable.enterScopeForLoop()

      this._collectSymbolsFromRightNode(symbolTable, condNode)
      this._collectSymbolsFromLeftNode(symbolTable, bodyNode)

    else
      goOnIntoChildren = true

      if opcode is AST_OPCODE_CALL
        funcName = node.value

        if ((funcName is 'print') or
            (funcName is 'super') or
            (funcName is '__mold_syscall') or
            (funcName is 'global'))

          # One of built-in function - declaration is not needed.
          if symbolTable.isset(funcName) is false
            # TODO: Fill up proto?
            symbolTable.insertFunction(funcName, {'builtIn': true})
          endif
        endif

        # Mark that function was called.
        node.symbolInfo = symbolTable.lookupForCall(node.value)
        isLeftNode      = false

        # Mark recursive calls. We use it in further optizations.
        if ((node.symbolInfo.proto.isRecursive isnt true) and
            (symbolTable.getCurrentFunctionName() is funcName))

          this._debug('Recursive call detected at node #' ~ str(node.id) ~ ' (' ~ funcName ~ ')')
          node.symbolInfo.proto.isRecursive = true
        endif

        # Import global symbol.
        if funcName is 'global'
          for values item in children
            symbolTable.importGlobal(item.value)
          endfor
          goOnIntoChildren = false
        endif

      elif opcode is AST_OPCODE_VCALL
        isLeftNode = false
      endif

      if goOnIntoChildren is true
        for values item in children
          this._collectSymbols(symbolTable, item, isLeftNode)
        endfor
      endif
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                                Public API
  # ----------------------------------------------------------------------------

  method buildSymbolTable(node)
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK

    # Only code blocks should store symbol table.
    if (node.opcode isnt AST_OPCODE_BLOCK) and (node.opcode isnt AST_OPCODE_PROGRAM)
      die('error: only block or program nodes can own symbol table')
    endif

    this._collectSymbolsFromLeftNode(node.symbolTable, node)
  endmethod
endclass
