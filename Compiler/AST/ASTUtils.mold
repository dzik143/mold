################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'

const AST_DataTypeNames = [
  '-',         # 0
  'integer',   # 1
  'float',     # 2
  'float',     # 3 double
  'string',    # 4
  'boolean',   # 5
  'object',    # 6
  'null',      # 7
  'undefined', # 8
  'array',     # 9
  'map'        # 10
]

const AST_DataTypeForMIR = [
  '[error]',   # 0
  'int32',     # integer
  'float32',   # float
  'float64',   # double
  'string',    # string
  'bool32',    # boolean
  'variant',   # object
  '[error]',   # null
  'variant',   # undefined
  'variant',   # array (TODO)
  'variant'    # map (TODO)
]

# Possible improvement: Move to better place?
const MOLD_SYSCALL_ID_ORD           = 31
const MOLD_SYSCALL_ID_ASC           = 32
const MOLD_SYSCALL_ID_PARSE_INTEGER = 33
const MOLD_SYSCALL_ID_PARSE_FLOAT   = 34

const MOLD_SYSCALL_ID_BITAND = 35
const MOLD_SYSCALL_ID_BITOR  = 36
const MOLD_SYSCALL_ID_BITXOR = 37
const MOLD_SYSCALL_ID_BITNOT = 38

const MOLD_SYSCALL_ID_EXIT   = 40
const MOLD_SYSCALL_ID_DIE    = 41
const MOLD_SYSCALL_ID_STR    = 42
const MOLD_SYSCALL_ID_LEN    = 43
const MOLD_SYSCALL_ID_TYPEOF = 44

const MOLD_SYSCALL_ID_GET_TYPEID = 57

#const MOLD_SYSCALL_ID_  '__mold_printToStdOutput': MOLD_SYSCALL_ONE_ARG + 45,
#const MOLD_SYSCALL_ID_  '__mold_warning': MOLD_SYSCALL_ONE_ARG + 46,
#const MOLD_SYSCALL_ID_  '__mold_arrayInsertAfterLast':   MOLD_SYSCALL_TWO_ARGS + 50,
#const MOLD_SYSCALL_ID_  '__mold_arrayInsertBeforeFirst': MOLD_SYSCALL_TWO_ARGS + 51

# TODO: Synchronize id along whole code.
function AST_GetNextId() -> rv
  global NodeId
  rv = NodeId
  NodeId = NodeId + 1
endfunction

function AST_CreateNode(opcode, value, args) -> rv
  rv = {
    'id': AST_GetNextId(),
    'opcode': opcode,
    'children': args,
    'value': value
  }
endfunction

function AST_CreateNodeVariable(name) -> rv
  global AST_OPCODE_VARIABLE
  rv = AST_CreateNode(AST_OPCODE_VARIABLE, name, [])
endfunction

function AST_CreateNodeInteger(value) -> rv
  global AST_DATA_INTEGER
  rv = AST_CreateNode(AST_DATA_INTEGER, value, [])
endfunction

function AST_CreateNodeString(value) -> rv
  global AST_DATA_STRING
  rv = AST_CreateNode(AST_DATA_STRING, value, [])
endfunction

function AST_CreateNodeCall(name, args) -> rv
  global AST_OPCODE_CALL
  rv = AST_CreateNode(AST_OPCODE_CALL, name, args)
endfunction

function AST_CreateNodeBlock(children) -> rv
  global AST_OPCODE_BLOCK
  rv = AST_CreateNode(AST_OPCODE_BLOCK, null, children)
endfunction

function AST_CreateNodeSysCall(sysCallId, args) -> rv
  rv = AST_CreateNodeCall('__mold_syscall', args)
  rv.sysCallId = sysCallId
endfunction

function AST_GetDataTypeFromValue(value) -> rv
  global AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_BOOL

  if value is integer
    rv = AST_DATA_INTEGER

  elif value is float
    rv = AST_DATA_DOUBLE

  elif value is boolean
    rv = AST_DATA_BOOL

  else
    rv = -1
  endif
endfunction

function AST_GetOpcodeAsText(opcode) -> rv
  global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
  global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_UNDEFINED
  global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
  global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
  global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
  global AST_OPCODE_CALL
  global AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
  global AST_OPCODE_IDIV
  global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
  global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
  global AST_OPCODE_CALL_NEW, AST_OPCODE_VCALL
  global AST_OPCODE_BLOCK, AST_OPCODE_FUNCTION, AST_OPCODE_CLASS
  global AST_OPCODE_CLASS_METHOD
  global AST_OPCODE_IF
  global AST_OPCODE_WHILE
  global AST_OPCODE_FOR_VALUES_RANGE
  global AST_OPCODE_TYPE_CAST

  global AST_OPCODE_ASSIGN
  global AST_OPCODE_DECLARE
  global AST_OPCODE_DECLARE_OR_ASSIGN
  global AST_OPCODE_FUNCTION
  global AST_OPCODE_CLASS
  global AST_OPCODE_NOP
  global AST_OPCODE_VARIABLE

  global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
  global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
  global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
  global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
  global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
  global AST_OPCODE_REFERENCE_BY_INDEX
  global AST_OPCODE_REFERENCE_BY_KEY
  global AST_OPCODE_CALL
  global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
  global AST_OPCODE_IDIV
  global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
  global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
  global AST_OPCODE_CALL_NEW, AST_OPCODE_VCALL
  global AST_OPCODE_STRING_JOIN

  if opcode is AST_OPCODE_PROGRAM
    rv = 'PROGRAM'

  elif opcode is AST_OPCODE_BLOCK
    rv = 'BLOCK'

  elif opcode is AST_OPCODE_FUNCTION
    rv = 'FUNCTION'

  elif opcode is AST_OPCODE_CLASS
    rv = 'CLASS'

  elif opcode is AST_OPCODE_CLASS_METHOD
    rv = 'METHOD'

  elif opcode is AST_OPCODE_IF
    rv = 'IF'

  elif opcode is AST_OPCODE_FOR_VALUES_RANGE
    rv = 'FOR'

  elif opcode is AST_OPCODE_WHILE
    rv = 'WHILE'

  elif opcode is AST_OPCODE_CALL
    rv = 'CALL'

  elif opcode is AST_OPCODE_REFERENCE_BY_INDEX
    rv = 'REFERENCE_BY_INDEX'

  elif opcode is AST_OPCODE_REFERENCE_BY_KEY
    rv = 'REFERENCE_BY_KEY'

  elif opcode is AST_DATA_INTEGER
    rv = 'INTEGER'

  elif opcode is AST_DATA_STRING
    rv = 'STRING'

  elif opcode is AST_DATA_FLOAT
    rv = 'FLOAT'

  elif opcode is AST_DATA_DOUBLE
    rv = 'DOUBLE'

  elif opcode is AST_DATA_BOOL
    rv = 'BOOL'

  elif opcode is AST_DATA_ARRAY
    rv = 'ARRAY'

  elif opcode is AST_DATA_MAP
    rv = 'MAP'

  elif opcode is AST_DATA_UNDEFINED
    rv = 'UNDEFINED'

  elif opcode is AST_OPCODE_BOOL_AND
    rv = 'BOOL_AND'

  elif opcode is AST_OPCODE_BOOL_OR
    rv = 'BOOL_OR'

  elif opcode is AST_OPCODE_NEG
    rv = 'NEG'

  elif opcode is AST_OPCODE_ADD
    rv = 'ADD'

  elif opcode is AST_OPCODE_STRING_JOIN
    rv = 'STRING_JOIN'

  elif opcode is AST_OPCODE_SUB
    rv = 'SUB'

  elif opcode is AST_OPCODE_MUL
    rv = 'MUL'

  elif opcode is AST_OPCODE_DIV
    rv = 'DIV'

  elif opcode is AST_OPCODE_IDIV
    rv = 'IDIV'

  elif opcode is AST_OPCODE_COMPARE_EQ
    rv = 'CMP_EQ'

  elif opcode is AST_OPCODE_COMPARE_NEQ
    rv = 'CMP_NE'

  elif opcode is AST_OPCODE_COMPARE_LT
    rv = 'CMP_LT'

  elif opcode is AST_OPCODE_COMPARE_LE
    rv = 'CMP_LE'

  elif opcode is AST_OPCODE_COMPARE_GT
    rv = 'CMP_GT'

  elif opcode is AST_OPCODE_COMPARE_GE
    rv = 'CMP_GE'

  elif opcode is AST_OPCODE_DECLARE_OR_ASSIGN
    rv = 'DECLARE_OR_ASSIGN'

  elif opcode is AST_OPCODE_VARIABLE
    rv = 'VARIABLE'

  elif opcode is AST_OPCODE_NOP
    rv = 'NOP'

  elif opcode is AST_OPCODE_TYPE_CAST
    rv = 'TYPE_CAST'

  elif opcode is AST_OPCODE_CALL_NEW
    rv = 'CALL_NEW'

  elif opcode is AST_OPCODE_VCALL
    rv = 'VCALL'

  else
    rv = '[UNKNOWN: ' ~ str(opcode) ~ ']'
  endif
endfunction

function AST_GetOpcodeAsShortText(opcode) -> rv
  global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
  global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
  global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
  global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
  global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
  global AST_OPCODE_CALL
  global AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
  global AST_OPCODE_IDIV
  global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
  global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
  global AST_OPCODE_CALL_NEW, AST_OPCODE_VCALL
  global AST_OPCODE_BLOCK, AST_OPCODE_FUNCTION, AST_OPCODE_CLASS
  global AST_OPCODE_CLASS_METHOD
  global AST_OPCODE_IF
  global AST_OPCODE_WHILE
  global AST_OPCODE_FOR_VALUES_RANGE
  global AST_OPCODE_NOP
  global AST_DATA_NONE

  global AST_OPCODE_ASSIGN
  global AST_OPCODE_DECLARE
  global AST_OPCODE_DECLARE_OR_ASSIGN
  global AST_OPCODE_FUNCTION
  global AST_OPCODE_CLASS
  global AST_OPCODE_NOP
  global AST_OPCODE_VARIABLE
  global AST_OPCODE_BLOCK
  global AST_OPCODE_TYPE_CAST

  global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
  global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
  global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
  global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
  global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
  global AST_OPCODE_REFERENCE_BY_INDEX
  global AST_OPCODE_REFERENCE_BY_KEY
  global AST_OPCODE_CALL
  global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
  global AST_OPCODE_IDIV
  global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
  global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
  global AST_OPCODE_CALL_NEW, AST_OPCODE_VCALL
  global AST_OPCODE_FOR_VALUES_RANGE, AST_OPCODE_WHILE
  global AST_OPCODE_FOR_VALUES
  global AST_OPCODE_FOR_KEYS
  global AST_OPCODE_FOR_KEYS_VALUES
  global AST_OPCODE_FOR_INDEXES
  global AST_OPCODE_FOR_INDEXES_VALUES
  global AST_OPCODE_STRING_JOIN
  global AST_OPCODE_IS_TYPEOF
  global AST_OPCODE_IS_NOT_TYPEOF

  if opcode is AST_OPCODE_REFERENCE_BY_INDEX
    rv = '&i'

  elif opcode is AST_OPCODE_REFERENCE_BY_KEY
    rv = '&s'

  elif opcode is AST_DATA_UNDEFINED
    rv = 'null'

  elif opcode is AST_DATA_INTEGER
    rv = 'i'

  elif opcode is AST_DATA_STRING
    rv = 's'

  elif opcode is AST_DATA_FLOAT
    rv = 'f'

  elif opcode is AST_DATA_DOUBLE
    rv = 'f'

  elif opcode is AST_DATA_BOOL
    rv = 'b'

  elif opcode is AST_DATA_ARRAY
    rv = 'a'

  elif opcode is AST_DATA_MAP
    rv = 'm'

  elif opcode is AST_OPCODE_BOOL_AND
    rv = 'and'

  elif opcode is AST_OPCODE_BOOL_OR
    rv = 'or'

  elif opcode is AST_OPCODE_NEG
    rv = '-'

  elif opcode is AST_OPCODE_ADD
    rv = '+'

  elif opcode is AST_OPCODE_STRING_JOIN
    rv = '~'

  elif opcode is AST_OPCODE_SUB
    rv = '-'

  elif opcode is AST_OPCODE_MUL
    rv = '*'

  elif opcode is AST_OPCODE_DIV
    rv = '/'

  elif opcode is AST_OPCODE_IDIV
    rv =  '//'

  elif opcode is AST_OPCODE_COMPARE_EQ
    rv = 'eq'

  elif opcode is AST_OPCODE_COMPARE_NEQ
    rv = 'ne'

  elif opcode is AST_OPCODE_COMPARE_LT
    rv = 'lt'

  elif opcode is AST_OPCODE_COMPARE_LE
    rv = 'le'

  elif opcode is AST_OPCODE_COMPARE_GT
    rv = 'gt'

  elif opcode is AST_OPCODE_COMPARE_GE
    rv = 'ge'

  elif opcode is AST_OPCODE_IS_TYPEOF
    rv = 'typeof'

  elif opcode is AST_OPCODE_IS_NOT_TYPEOF
    rv = 'nottypeof'

  elif opcode is AST_OPCODE_VARIABLE
    rv = 'v'

  # TODO: Review it.
  elif opcode is AST_OPCODE_CALL
    rv = 'call'

  elif opcode is AST_OPCODE_CALL_NEW
    rv = 'new'

  elif opcode is AST_OPCODE_VCALL
    rv = 'vcall'

  elif opcode is AST_OPCODE_BLOCK
    rv = 'block'

  elif opcode is AST_OPCODE_DECLARE_OR_ASSIGN
    rv = '='

  elif opcode is AST_OPCODE_FOR_VALUES_RANGE
    rv = 'for'

  elif opcode is AST_OPCODE_WHILE
    rv = 'while'

  elif opcode is AST_OPCODE_IF
    rv = 'if'

  elif opcode is AST_OPCODE_FOR_VALUES
    rv = 'for_v'

  elif opcode is AST_OPCODE_FOR_KEYS
    rv = 'for_k'

  elif opcode is AST_OPCODE_FOR_INDEXES
    rv = 'for_i'

  elif opcode is AST_OPCODE_FOR_INDEXES_VALUES
    rv = 'for_iv'

  elif opcode is AST_OPCODE_FOR_KEYS_VALUES
    rv = 'for_kv'

  elif opcode is AST_OPCODE_TYPE_CAST
    rv = 'cast'

  elif opcode is AST_OPCODE_NOP
    # TODO: Review it.
    rv = 'nop'

  elif opcode is AST_DATA_NONE
    # TODO: Review it.
    rv = '__unused'

  else
    # TODO: Handle terminal nodes.
    rv = 'error'
    die('error: unhandled opcode: ' ~ str(opcode))
  endif
endfunction

function AST_InvertBoolean(node)
  global AST_DATA_BOOL
  global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR
  global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
  global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
  global AST_OPCODE_TYPE_CAST
  global AST_OPCODE_IS_TYPEOF
  global AST_OPCODE_IS_NOT_TYPEOF

  opcode = node.opcode

  if opcode is AST_DATA_BOOL
    if node.value is true
      node.value = false
    else
      node.value = true
    endif

  elif opcode is AST_OPCODE_COMPARE_EQ
    node.opcode = AST_OPCODE_COMPARE_NEQ

  elif opcode is AST_OPCODE_COMPARE_NEQ
    node.opcode = AST_OPCODE_COMPARE_EQ

  elif opcode is AST_OPCODE_COMPARE_LE
    node.opcode = AST_OPCODE_COMPARE_GT

  elif opcode is AST_OPCODE_COMPARE_LT
    node.opcode = AST_OPCODE_COMPARE_GE

  elif opcode is AST_OPCODE_COMPARE_GT
    node.opcode = AST_OPCODE_COMPARE_LE

  elif opcode is AST_OPCODE_COMPARE_GE
    node.opcode = AST_OPCODE_COMPARE_LT

  elif opcode is AST_OPCODE_BOOL_AND
    # not(x and y) = (not x) or (not y)
    AST_InvertBoolean(node.children[0])
    AST_InvertBoolean(node.children[1])
    node.opcode = AST_OPCODE_BOOL_OR

  elif opcode is AST_OPCODE_BOOL_OR
    # not(x or y) = (not x) and (not y)
    AST_InvertBoolean(node.children[0])
    AST_InvertBoolean(node.children[1])
    node.opcode = AST_OPCODE_BOOL_AND

  elif opcode is AST_OPCODE_TYPE_CAST
    AST_InvertBoolean(node.children[0])

  elif opcode is AST_OPCODE_IS_TYPEOF
    node.opcode = AST_OPCODE_IS_NOT_TYPEOF

  elif opcode is AST_OPCODE_IS_NOT_TYPEOF
    node.opcode = AST_OPCODE_IS_TYPEOF

  else
    die('error: unhandled opcode in AST_InvertBoolean: ' ~ str(opcode))
  endif

endfunction

function AST_IsVar(x) -> rv
  global AST_OPCODE_VARIABLE
  rv = x.opcode is AST_OPCODE_VARIABLE
endfunction

function AST_IsImm(x) -> rv
  global AST_OPCODE_PROGRAM
  global AST_DATA_ARRAY
  global AST_DATA_MAP

  if x.opcode is AST_DATA_ARRAY
    rv = x.value is array

  elif x.opcode is AST_DATA_MAP
    rv = x.value is map

  elif x.opcode < AST_OPCODE_PROGRAM
    rv = true

  else
    rv = false
  endif
endfunction

function AST_IsPrimitiveImm(x) -> rv
  global AST_DATA_OBJECT
  # TODO: Review it.
  # TODO: Is undefined primitive?
  if x.opcode < AST_DATA_OBJECT
    rv = true
  else
    rv = false
  endif
endfunction

function AST_IsImmWithValue(x, value) -> rv
  if (AST_IsImm(x) is true) and (x.value is value)
    rv = true
  else
    rv = false
  endif
endfunction

function AST_IsEmpty(x) -> rv
  rv = len(x.children) is 0
endfunction

function AST_IsImmOrVar(x) -> rv
  if (AST_IsImm(x) is true) or (AST_IsVar(x) is true)
    rv = true
  else
    rv = false
  endif
endfunction

function AST_HasSideEffects(node) -> rv
  global AST_OPCODE_CALL
  global AST_OPCODE_CALL_NEW
  global AST_OPCODE_VCALL

  opcode = node.opcode

  if opcode is AST_OPCODE_CALL
    # TODO: Check function protos.
    # TODO: Don't use hardcoded values.
    # TODO: Why we sometimes got non-integer syscall id?
    # TODO: Clean up this mess.
    rv = true

    if ((node.value is '__mold_syscall') and
        (node.sysCallId is integer))

      if (((node.sysCallId >= 31) and (node.sysCallId <= 44)) or
           (node.sysCallId is 56) or
           (node.sysCallId is 57))
        # Built-in function without side effect.
        rv = false
      endif
    endif

  elif (opcode is AST_OPCODE_CALL_NEW) or (opcode is AST_OPCODE_VCALL)
    # TODO: Check function protos.
    rv = true

  else
    rv          = false
    childIdx    = 0
    children    = node.children
    childrenCnt = len(children)

    while (childIdx < childrenCnt) and (rv is false)
      rv       = AST_HasSideEffects(children[childIdx])
      childIdx = childIdx + 1
    endwhile
  endif
endfunction

function AST_GetHashInternal(node, isCodeMode) -> rv
  global AST_DATA_ARRAY
  global AST_DATA_MAP
  global AST_DATA_STRING
  global AST_OPCODE_CALL
  global AST_OPCODE_CALL_NEW
  global AST_OPCODE_VCALL
  global AST_OPCODE_TYPE_CAST

  opcode      = node.opcode
  children    = node.children
  childrenCnt = len(children)

  if false #typeof(node.hash) is defined
    # Node already hashed - just use it.
    rv = node.hash

  else
    # First ask for hash at this node - calculate it from stratch
    # and save for further calls.
    if (opcode is AST_DATA_MAP) or (opcode is AST_DATA_ARRAY)
      rv = '@' ~ str(node.id)

    elif opcode is AST_DATA_STRING
      # TODO: Review it.
      if node.symbolInfo is defined
        rv = node.symbolInfo.name
      else
        rv = 's:' ~ str(len(node.value)) ~ ':' ~ node.value
      endif

    elif AST_IsVar(node) is true
      if isCodeMode is true
        rv = '@' ~ node.value

      else
        if node.storedValue is undefined
          # TODO: Review it.
          rv = '@' ~ node.value

        elif node.storedValue is array
          rv = ''
          for values item in node.storedValue
            rv = rv ~ '@' ~ str(item.id)
          endfor

        else
          rv = '@' ~ str(node.id)

          # TODO: Fix it.
          # TODO: Broken code after CSE optimization:
          #
          # function foo()
          # endfunction
          # x = 1234
          # foo()
          # print x

          # OLD IMPLEMENTATION:
          # rv = '@' ~ str(node.storedValue.id)
        endif
      endif
/*
    elif node.opcode is AST_DATA_ARRAY
      rv = AST_GetOpcodeAsShortText(opcode) ~ ',' ~ str(childrenCnt)
      for idx in 0 .. childrenCnt
        rv  = rv ~ ',' ~ AST_GetHash(children[idx])
      endfor

    elif node.opcode is AST_DATA_MAP
      rv  = AST_GetOpcodeAsShortText(opcode) ~ ',' ~ str(childrenCnt)
      idx = 0
      # TODO: Use for step/by.
      while idx < childrenCnt
        rv  = rv ~ ',' ~ AST_GetHash(children[idx]) ~ ',' ~ AST_GetHash(children[idx + 1])
        idx = idx + 2
      endwhile
*/
    elif AST_IsPrimitiveImm(node) is true
      rv = AST_GetOpcodeAsShortText(opcode) ~ str(node.value)

    elif ((opcode is AST_OPCODE_CALL) or
          (opcode is AST_OPCODE_CALL_NEW) or
          (opcode is AST_OPCODE_VCALL))

      # TODO: Review it.

      if (isCodeMode is false) and (AST_HasSideEffects(node) is true)
        # Called function has side effect.
        # Eeach call to function is unique.
        # Avoid CSE optimization.
        name = '@' ~ str(node.id)
      else
        # Code comparision or there is no side effect.
        # The same parameters means the same result.
        name = node.value
      endif

      rv = AST_GetOpcodeAsShortText(opcode) ~ ':' ~ name ~ ',' ~ str(childrenCnt)

      # TODO: Clean up this mess.
      # Hash syscall id to avoid fake code duplication result.
      if node.value is '__mold_syscall'
        rv = rv ~ ',' ~ str(node.sysCallId)
      endif

      # Hash call parameters.
      for values childNode in children
        rv  = rv ~ ',' ~ AST_GetHashInternal(childNode, isCodeMode)
      endfor

    elif opcode is AST_OPCODE_TYPE_CAST
      rv = 'cast,' ~ str(node.astDataType) ~ ',' ~ AST_GetHashInternal(children[0], isCodeMode)

    else
      rv = AST_GetOpcodeAsShortText(opcode) ~ ',' ~ str(childrenCnt)
      for values childNode in children
        rv  = rv ~ ',' ~ AST_GetHashInternal(childNode, isCodeMode)
      endfor
    endif

    if isCodeMode is false
      node.hash = rv
    endif
  endif
endfunction

function AST_PrefetchHash(node)
  unused = AST_GetHashInternal(node, false)
endfunction

function AST_GetHash(node) -> rv
  rv = AST_GetHashInternal(node, false)
endfunction

function AST_GetHashForCodeComparison(node) -> rv
  rv = AST_GetHashInternal(node, true)
endfunction

function AST_IsDataNode(node) -> rv
  global AST_OPCODE_PROGRAM
  if node.opcode < AST_OPCODE_PROGRAM
    rv = true
  else
    rv = false
  endif
endfunction

function AST_ConvertDataTypeToText(dataType) -> rv
  global AST_DataTypeNames

  if (dataType is defined) and (dataType > 0)
    rv = AST_DataTypeNames[dataType]
  else
    rv = 'variant'
  endif
endfunction

function AST_ConvertDataTypeToMIR(dataType) -> rv
  # TODO: Clean up this mess?
  global AST_DataTypeForMIR

  if (dataType is defined) and (dataType > 0)
    rv = AST_DataTypeForMIR[dataType]
  else
    rv = 'variant'
  endif
endfunction

function AST_GetDataType(node) -> rv
  global AST_OPCODE_VARIABLE
  global AST_OPCODE_NEG
  global AST_OPCODE_ADD
  global AST_OPCODE_SUB
  global AST_OPCODE_MUL
  global AST_OPCODE_DIV
  global AST_OPCODE_IDIV
  global AST_OPCODE_COMPARE_EQ, AST_OPCODE_BOOL_OR, AST_OPCODE_BOOL_NOT
  global AST_OPCODE_IS_TYPEOF, AST_OPCODE_IS_NOT_TYPEOF

  global AST_DATA_UNDEFINED
  global AST_DATA_INTEGER
  global AST_DATA_DOUBLE
  global AST_DATA_STRING
  global AST_DATA_BOOL
  global AST_DATA_OBJECT
  global AST_OPCODE_TYPE_CAST
  global AST_OPCODE_CALL
  global AST_OPCODE_CALL_NEW
  global AST_OPCODE_REFERENCE_BY_INDEX
  global AST_OPCODE_REFERENCE_BY_KEY
  global AST_OPCODE_STRING_JOIN
  global SYMBOL_KIND_CONST

  rv = -1

  if node._cachedAstDataType is defined
    rv = node._cachedAstDataType

  else
    opcode = node.opcode
    rv     = -1

    if ((opcode is AST_DATA_INTEGER) and
        (node.value is integer) and
        (node.value < -2147483648) or (node.value > 2147483647))

      # TODO: Review it.
      # We always keep 64-bit integers as variants.
      # Do nothing - we want to keep variant type (-1).

    elif opcode is AST_OPCODE_VARIABLE
      symbolInfo = node.symbolInfo

      if (symbolInfo is defined) and (symbolInfo.astType is defined)
        rv = symbolInfo.astType
      endif

    elif opcode is AST_OPCODE_TYPE_CAST
      rv = node.astDataType

    elif opcode is AST_OPCODE_REFERENCE_BY_INDEX
      # TODO: Why we need this if here?
      box = node.children[0]
      if ((box.opcode is AST_OPCODE_VARIABLE) and
          (box.symbolInfo is defined) and
          (box.symbolInfo.astInnerType is defined))

        rv = box.symbolInfo.astInnerType
      endif

    elif opcode is AST_OPCODE_CALL
      # TODO: Clean up this mess.
      #if ((node.value is '__mold_syscall') and
      #    (node.sysCallId is integer) and
      #    (node.sysCallId is 43))
      #  # TODO: Remove hard-coded value (57=gettypeid)
      #  rv = AST_DATA_INTEGER

      if ((node.symbolInfo is defined) and
          (node.symbolInfo.proto.astTypeRetVal is defined))
        rv = node.symbolInfo.proto.astTypeRetVal
      endif

    elif opcode is AST_OPCODE_CALL_NEW
      rv = AST_DATA_OBJECT

    elif opcode is AST_DATA_UNDEFINED
      # TODO: Review it.
      # Always store null as variant.
      rv = -1

    else
      children    = node.children
      childrenCnt = len(children)

      if AST_IsDataNode(node) is true
        rv = opcode

      elif childrenCnt is 2
        x = AST_GetDataType(children[0])
        y = AST_GetDataType(children[1])

        # TODO: Validate types.
        if ((opcode is AST_OPCODE_ADD) or
            (opcode is AST_OPCODE_MUL) or
            (opcode is AST_OPCODE_SUB))

          if (x is AST_DATA_DOUBLE) or (y is AST_DATA_DOUBLE)
            rv = AST_DATA_DOUBLE
          elif (x is -1) or (y is -1)
            rv = -1
          else
            rv = x
          endif

        elif opcode is AST_OPCODE_STRING_JOIN
          # x ~ y
          rv = AST_DATA_STRING

        elif opcode is AST_OPCODE_DIV
          if (x is -1) or (y is -1)
            rv = -1
          else
            rv = AST_DATA_DOUBLE
          endif

        elif opcode is AST_OPCODE_IDIV
          if (x is -1) or (y is -1)
            rv = -1
          else
            rv = AST_DATA_INTEGER
          endif

        elif ((opcode >= AST_OPCODE_COMPARE_EQ) and
              (opcode <= AST_OPCODE_BOOL_OR))
          # Logic result: x op y
          rv = AST_DATA_BOOL
        endif

      elif childrenCnt is 1
        xType = AST_GetDataType(children[0])

        if opcode is AST_OPCODE_NEG
          rv = xType

        elif ((opcode is AST_OPCODE_BOOL_NOT) or
              (opcode is AST_OPCODE_IS_TYPEOF) or
              (opcode is AST_OPCODE_IS_NOT_TYPEOF))
          rv = AST_DATA_BOOL
        endif
      endif

      # Cache result for further use.
      # TODO: Review it.
      # node._cachedAstDataType = rv
    endif

    #print 'Detected ast type [', rv, '] at node #' ~ str(node.id)

    if rv isnt integer
      die('error: unset AST data type at AST_GetDataType() at node #' ~ str(node.id))
    endif
  endif
endfunction

function AST_TypeCast(node, dstDataType) -> rv
  global AST_OPCODE_TYPE_CAST
  global AST_DATA_STRING
  global AST_DATA_OBJECT

  #print 'AST_TypeCast', typeof(node), dstDataType

  rv = node

  if node.opcode is AST_OPCODE_TYPE_CAST
    # Avoid nested convert(convert(...))
    node.astDataType = dstDataType

  else
    srcDataType = AST_GetDataType(node)

    if srcDataType is dstDataType
      # Nothing to do.

    elif (srcDataType is AST_DATA_STRING) and (dstDataType is -1)
      # String -> Variant : do nothing.

    elif (dstDataType is AST_DATA_STRING) and (srcDataType is -1)
      # Variant -> String : do nothing.

    elif (srcDataType is AST_DATA_OBJECT) and (dstDataType is -1)
      # Object -> Variant : do nothing.

    else
      # Types mismatch - wrap into type cast node.
      #print '[ ASTUtils ] Type cast node #' ~ str(node.id), ' from', srcDataType, 'to', dstDataType
      rv = {
        'id': AST_GetNextId(),
        'opcode': AST_OPCODE_TYPE_CAST,
        'astDataType': dstDataType,
        'children': [node]
       }
    endif
  endif
endfunction

function AST_GetTopNodeInBlock(node) -> rv
  global AST_OPCODE_BLOCK
  rv = node
  while rv.parent.opcode isnt AST_OPCODE_BLOCK
    rv = rv.parent
  endwhile
endfunction

function AST_GetParentBlock(node) -> rv
  rv = AST_GetTopNodeInBlock(node).parent
endfunction

function AST_IsOkAsBox(node) -> rv
  global AST_OPCODE_VARIABLE
  global AST_OPCODE_REFERENCE_BY_INDEX
  global AST_OPCODE_REFERENCE_BY_KEY

  rv = false

  # Simplify it.
  if ((node.opcode is AST_OPCODE_VARIABLE) or
      (node.opcode is AST_OPCODE_REFERENCE_BY_INDEX) or
      (node.opcode is AST_OPCODE_REFERENCE_BY_KEY))
    rv = true
  endif
endfunction

function AST_CloneNode(node) -> rv
  rv = {}

  for keys propertyId values propertyValue in node
    rv{propertyId} = propertyValue
  endfor

  # Clone children (deep copy).
  newChildren = []
  for indexes idx values oneChild in node.children
    newChildren[idx] = AST_CloneNode(oneChild)
  endfor

  rv.children = newChildren
  rv.id       = AST_GetNextId()
  rv.parent   = null
endfunction
