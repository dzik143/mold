################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'AST/ASTUtils.mold'

class ASTOptimizerCSE
  method constructor(app)
    this.app    = app
    this.nextId = 0
  endmethod

  method _getNextId() -> rv
    rv = this.nextId
    this.nextId = rv + 1
  endmethod

  method _createNodeVariable() -> rv
    global AST_OPCODE_VARIABLE

    rv = {
      # TODO: Ask AST for id?
      'id': AST_GetNextId(),
      'opcode': AST_OPCODE_VARIABLE,
      'value': '__cse' + str(this._getNextId()),
      'children': [],
      'childrenCnt': 0
    }
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTOptimizerCSE ]', msg
    endif
  endmethod

  method _processNode(node, mapOfExpressions, symbolTable) -> rv
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_IF
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_CALL
    global AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_WHILE
    global AST_OPCODE_NEG
    global AST_OPCODE_NOP
    global AST_OPCODE_SWITCH
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ
    global AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_COMPARE_GT, AST_OPCODE_COMPARE_GE
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV, AST_OPCODE_IDIV
    global AST_DATA_BOOL, AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_DATA_UNDEFINED
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR
    global SYMBOL_KIND_CONST
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_CLASS
    global AST_OPCODE_CLASS_METHOD
    global AST_OPCODE_VCALL
    global AST_OPCODE_FOR_INDEXES_VALUES

    # Switch symbolTable if needed.
    if node.symbolTable is defined
      symbolTable = node.symbolTable
    endif

    # TODO: Use null if ready?
    opcode      = node.opcode
    value       = node.value
    goOn        = true
    children    = node.children
    childrenCnt = len(children)
    rv          = node

    # DEBUG ONLY
    AST_ValidateNode(node)

    for values oneChild in children
      # TODO: Remove this hack.
      oneChild.parent = node
    endfor

    if opcode is AST_OPCODE_DECLARE_OR_ASSIGN
      lval = children[0]
      rval = children[1]

      if lval.opcode is AST_OPCODE_VARIABLE
        AST_Hash(lval)
      endif

      # TODO: Clean up this mess.
      AST_Hash(rval)

      newRval = this._processNode(rval, mapOfExpressions, symbolTable)

      if ((lval.opcode is AST_OPCODE_VARIABLE) and
          (newRval.opcode is AST_OPCODE_VARIABLE) and
          (lval.value is newRval.value))

        # Useless assign: x = x
        this._debug('Useless self-assign at node #' + str(node.id) + ' (' + lval.hash + ')')
        rv.opcode   = AST_OPCODE_NOP
        rv.children = []

      elif newRval isnt rval
        # Update rval if needed.
        children[1] = newRval
      endif

    elif (opcode is AST_OPCODE_IF) or (opcode is AST_OPCODE_SWITCH)
      # TODO: Enable IF branches.
      # IF branch or function/method.
      # Start new expression table from scratch.
      for values oneChild in children
        mapOfExpressions = {}
        this._processNode(oneChild, mapOfExpressions, symbolTable)
      endfor

    elif opcode is AST_OPCODE_WHILE
      # TODO: Review it.
      # This is fix for:
      #  rv = values[name]
      #  while values['parent'] is defined
      #  values = values['parent']
      #  rv = values[name]
      # endwhile
      for values oneChild in children
        mapOfExpressions = {}
        this._processNode(oneChild, mapOfExpressions, symbolTable)
      endfor

    elif (opcode is AST_OPCODE_FUNCTION) or (opcode is AST_OPCODE_CLASS_METHOD)
      # IF branch or function/method.
      # Start new expression table from scratch.
      mapOfExpressions = {}
      for values oneChild in children
        this._processNode(oneChild, mapOfExpressions, symbolTable)
      endfor

    elif (opcode is AST_OPCODE_CALL) or (opcode is AST_OPCODE_VCALL)
      # TODO: Use for values oneChild indexes childIdx loop.
      for idx in 0 .. childrenCnt
        AST_Hash(children[idx])
        newNode = this._processNode(children[idx], mapOfExpressions, symbolTable)
        if newNode isnt children[idx]
          children[idx] = newNode
        endif
      endfor

    else

      # TODO: Review it.
      if ((opcode >= AST_OPCODE_FOR_VALUES_RANGE) and
          (opcode < AST_OPCODE_FOR_INDEXES_VALUES))

        mapOfExpressions = {}
      endif

      if (len(node.children) > 0) and (node.hash is defined)
        matchedNode = mapOfExpressions{node.hash}

        if matchedNode is node
          # Do nothing - it's the same node.

        elif matchedNode is undefined
          # Expression seen first time, save it in map and wait for
          # more expressions from different nodes.
          node.symbolTable = symbolTable
          mapOfExpressions{node.hash} = node
          this._debug('Expression found at node #' + str(node.id) + ', (' + node.hash + ')')

        else
          # Two nodes with common subexpression found.
          # Move common subexpression to new temp var.
          this._debug('Common subexpression at nodes (#' + str(node.id) + ', #' + str(matchedNode.id) + ') (' + node.hash + ')')

          if matchedNode.opcode is AST_OPCODE_VARIABLE
            # Common subexpression is already assigned to variable.
            # Just use it one more time in another place.

          elif ((matchedNode.parent.opcode is AST_OPCODE_DECLARE_OR_ASSIGN) and
                (matchedNode.parent.children[0].opcode is AST_OPCODE_VARIABLE) and
                (matchedNode.parent.children[1] is matchedNode))

            # z = (common subexpression)
            # Common subexpression is already assigned to some variable in
            # original code.
            # We don't need extra __csexx variable, just use existing one instead.
            matchedNode = matchedNode.parent.children[0]

          else
            # Common subexpression lives in the middle of right-value code.
            # We need to emit __csexx = ... asign before first use.

            # Find nearest common block, that holds both expressions.
            block1 = AST_GetParentBlock(matchedNode)
            block2 = AST_GetParentBlock(node)

            lastInstructionNode1 = AST_GetTopNodeInBlock(matchedNode)
            lastInstructionNode2 = AST_GetTopNodeInBlock(node)

            if block1 is block2
              # Both expressions live in the same block.
              # Put new csexx assign just before first one.
              commonBlock = block1

            else
              # Expressions live in different blocks.
              # Compare block deeps.
              deep1 = block1.symbolTable.deepIdx
              deep2 = block2.symbolTable.deepIdx

              # Nivelate differences in deep along nodes.
              # ...   ...
              # node1 ...
              # ...   ...
              # ...   node2
              while deep1 > deep2
                lastInstructionNode1 = AST_GetTopNodeInBlock(block1)
                block1 = AST_GetParentBlock(block1)
                deep1  = deep1 - 1
              endwhile

              # ...   ...
              # ...   node2
              # ...   ...
              # node1 ...
              while deep2 > deep1
                lastInstructionNode2 = AST_GetTopNodeInBlock(block2)
                block2 = AST_GetParentBlock(block2)
                deep2  = deep2 - 1
              endwhile

              # Both block nodes are at the same deep now.
              # Go up from both sides until we reach common one.
              #    ...
              #    node
              # ...   ...
              # node1 node2
              while block1 isnt block2
                lastInstructionNode1 = AST_GetTopNodeInBlock(block1)
                lastInstructionNode2 = AST_GetTopNodeInBlock(block2)
                block1 = AST_GetParentBlock(block1)
                block2 = AST_GetParentBlock(block2)
              endwhile

              commonBlock = block1
            endif

            matchedNode.opcode   = AST_OPCODE_VARIABLE
            matchedNode.value    = '__cse' + str(this._getNextId())
            matchedNode.children = []

            commonBlock.symbolTable.lookupForWriteOrInsert(matchedNode.value)
            commonBlock.symbolTable.lookupForRead(matchedNode.value)

            # TODO: Optimize it.
            newCommonBlockChildren = []
            isCseEmited = false

            for values oneChild in commonBlock.children
              if (isCseEmited is false)
                if ((oneChild is lastInstructionNode1) or
                    (oneChild is lastInstructionNode2))

                  # Push __csexx = ... before first usage.
                  isCseEmited = true
                  newCommonBlockChildren[len(newCommonBlockChildren)] = {
                    'id': AST_GetNextId(),
                    'opcode': AST_OPCODE_DECLARE_OR_ASSIGN,
                    'children': [matchedNode, node],
                   'childrenCnt': 2
                  }
                endif
              endif

              newCommonBlockChildren[len(newCommonBlockChildren)] = oneChild
            endfor

            if isCseEmited is false
              die('error: cse found, but not emited')
            endif

            commonBlock.children = newCommonBlockChildren
          endif

          # TODO: Handle already assigned variable.
          if matchedNode.symbolTable is defined
            matchedNode.symbolTable.lookupForRead(matchedNode.value)
          endif

          rv = matchedNode

          # Don't go on into deeper nodes.
          goOn = false
        endif
      endif

      if goOn is true
        # TODO: Use for values oneChild indexes childIdx loop.
        for idx in 0 .. childrenCnt
          newNode = this._processNode(children[idx], mapOfExpressions, symbolTable)
          if newNode isnt children[idx]
            children[idx] = newNode
          endif
        endfor
      endif
    endif

    # DEBUG ONLY
    AST_ValidateNode(node)
  endmethod

  method processNode(node)
    mapOfExpressions = {}
    symbolTable      = node.symbolTable
    this._processNode(node, mapOfExpressions, symbolTable)
  endmethod
endclass
