################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import '../Utils/SymbolTable.mold'
import '../Utils/Common.mold'

import './AST.mold'
import './ASTUtils.mold'

class ASTPrinterHtml

  method _printSymbolTable(symbolTable)
    global AST_OPCODE_PROGRAM
    global SYMBOL_KIND_CONST
    global SYMBOL_KIND_AS_TEXT

    symbols = symbolTable.exportSymbols()

    print '<table border="1">'
    print '<tr><th>var</th><th>write</th><th>read</th><th>init value</th><th>kind</th><th>data type</th><th>loop level</th><th>class name</th></tr>'

    for keys symbolId values symbolInfo in symbols
      value = '-'

      if symbolInfo.value is defined
        value = symbolInfo.value
        if value is string
          value = '"' ~ value ~ '"'
        endif
      endif

      print '<tr>'
      print '<td>', symbolInfo.name, '</td>'
      print '<td>', symbolInfo.writeHits, '</td>'
      print '<td>', symbolInfo.readHits, '</td>'
      print '<td>', value, '</td>'
      print '<td>', SYMBOL_KIND_AS_TEXT[symbolInfo.kind], '</td>'
      print '<td>', AST_ConvertDataTypeToText(symbolInfo.astType), '</td>'
      print '<td>', symbolInfo.loopLevel, '</td>'

      if symbolInfo.classProto is defined
        print '<td>' ~ symbolInfo.classProto.name ~ '</td>'
      else
        print '<td>-</td>'
      endif

      print '</tr>'
    endfor
    print '</table>'
  endmethod

  method _printNode(node)
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_CALL
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_VCALL
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_CLASS
    global AST_OPCODE_CLASS_METHOD
    global AST_OPCODE_TYPE_CAST

    opcode   = node.opcode
    children = node.children

    print '<table style="border: solid 1px">'
    print '<tr><td>#' ~ str(node.id), '<b>', AST_GetOpcodeAsText(opcode), '</b></td></tr>'

    if node.hash is defined
      print '<tr><td><small><i>', node.hash, '</i></small></td></tr>'
    endif

    if node.hasSideEffects is @all(defined, true)
      print '<tr><td><small>has side effects</small></td></tr>'
    endif

    if opcode is @any(AST_OPCODE_FUNCTION, AST_OPCODE_CLASS_METHOD)
      print '<tr><td>', node.name, '</td></tr>'
    endif

    if opcode is @any(AST_OPCODE_BLOCK, AST_OPCODE_PROGRAM)
      if node.symbolTable is defined
        print '<tr><td>'
        this._printSymbolTable(node.symbolTable)
        print '</td></tr>'
      endif

      for values childNode in children
        print '<tr><td>'
        this._printNode(childNode)
        print '</td></tr>'
      endfor

    elif opcode is AST_OPCODE_CLASS
      for values childNode in children
        print '<tr><td>'
        this._printNode(childNode)
        print '</td></tr>'
      endfor

    else
      if ((opcode < AST_OPCODE_PROGRAM) or
          (opcode is @any(AST_OPCODE_CALL,
                          AST_OPCODE_VCALL,
                          AST_OPCODE_VARIABLE)))

        value = node.value
        if value is string
          value = "'" ~ value ~ "' <i>(" ~ AST_ConvertDataTypeToText(AST_GetDataType(node)) ~ ")</i>"
        endif

        print '<tr><td>', value, '</td></tr>'

      elif opcode is AST_OPCODE_TYPE_CAST
        print '<tr><td><i>(' ~ AST_ConvertDataTypeToText(node.astDataType) ~ ')</i></td></tr>'
      endif

      print '<tr>'
      for values childNode in children
        print '<td>'
        this._printNode(childNode)
        print '</td>'
      endfor
      print '</tr>'
    endif

    if opcode is AST_OPCODE_VARIABLE

      print '<tr><td><hr>'

      if node.storedValue is array

        for values item in node.storedValue
          print '@' ~ str(item.id), '<br>'
        endfor

      elif node.storedValue is undefined
        print '?'

      else
        print '@' ~ str(node.storedValue.id)
      endif

      print '</td></tr>'
    endif

    print '</table>'
  endmethod

  method printNode(node)
    print '<html><body>'
    this._printNode(node)
    print '</body></html>'
  endmethod
endclass
