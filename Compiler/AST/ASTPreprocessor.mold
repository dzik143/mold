################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import './AST.mold'
import './ASTUtils.mold'

const MOLD_SYSCALL_ZERO_ARGS = 0x0000
const MOLD_SYSCALL_ONE_ARG   = 0x1000
const MOLD_SYSCALL_TWO_ARGS  = 0x2000

MOLD_SYSCALL_MAP = {
  'FileOpenForRead':   MOLD_SYSCALL_ONE_ARG + 1,
  'FileOpenForWrite':  MOLD_SYSCALL_ONE_ARG + 2,
  'FileOpenForCreate': MOLD_SYSCALL_ONE_ARG + 3,
  'FileClose':         MOLD_SYSCALL_ONE_ARG + 4,

  'FileReadInt8':    MOLD_SYSCALL_ONE_ARG + 8,
  'FileReadInt16':   MOLD_SYSCALL_ONE_ARG + 9,
  'FileReadInt32':   MOLD_SYSCALL_ONE_ARG + 10,
  'FileReadInt64':   MOLD_SYSCALL_ONE_ARG + 11,
  'FileReadFloat32': MOLD_SYSCALL_ONE_ARG + 14,
  'FileReadFloat64': MOLD_SYSCALL_ONE_ARG + 15,
  'FileReadBool8':   MOLD_SYSCALL_ONE_ARG + 16,
  'FileReadBool16':  MOLD_SYSCALL_ONE_ARG + 17,
  'FileReadBool32':  MOLD_SYSCALL_ONE_ARG + 18,
  'FileReadBool64':  MOLD_SYSCALL_ONE_ARG + 19,
  'FileReadChar':    MOLD_SYSCALL_ONE_ARG + 20,

  'FileWriteInt8':    MOLD_SYSCALL_TWO_ARGS + 21,
  'FileWriteChar':    MOLD_SYSCALL_TWO_ARGS + 21,
  'FileWriteInt16':   MOLD_SYSCALL_TWO_ARGS + 22,
  'FileWriteInt32':   MOLD_SYSCALL_TWO_ARGS + 23,
  'FileWriteInt64':   MOLD_SYSCALL_TWO_ARGS + 24,
  'FileWriteFloat64': MOLD_SYSCALL_TWO_ARGS + 24,

  'FileLoad': MOLD_SYSCALL_ONE_ARG + 29,

  'ord':          MOLD_SYSCALL_ONE_ARG + 31,
  'asc':          MOLD_SYSCALL_ONE_ARG + 32,
  'ParseInteger': MOLD_SYSCALL_ONE_ARG + 33,
  'ParseFloat':   MOLD_SYSCALL_ONE_ARG + 34,

  'bitand': MOLD_SYSCALL_TWO_ARGS + 35,
  'bitor':  MOLD_SYSCALL_TWO_ARGS + 36,
  'bitxor': MOLD_SYSCALL_TWO_ARGS + 37,
  'bitnot': MOLD_SYSCALL_ONE_ARG  + 38,

  'exit':   MOLD_SYSCALL_ZERO_ARGS + 40,
  'die':    MOLD_SYSCALL_ONE_ARG + 41,
  'str':    MOLD_SYSCALL_ONE_ARG + 42,
  'len':    MOLD_SYSCALL_ONE_ARG + 43,
  'typeof': MOLD_SYSCALL_ONE_ARG + 44,

  '__mold_printToStdOutput': MOLD_SYSCALL_ONE_ARG + 45,
  '__mold_warning': MOLD_SYSCALL_ONE_ARG + 46,

  '__mold_arrayInsertAfterLast':   MOLD_SYSCALL_TWO_ARGS + 50,
  '__mold_arrayInsertBeforeFirst': MOLD_SYSCALL_TWO_ARGS + 51
}

MOLD_TYPE_ID_MAP = {
  'undefined': 0,
  'integer':   2,
  'float':     4,
  'string':    5,
  'boolean':   6,
  'array':     7,
  'map':       8,
  'object':    9
}

class ASTPreprocessor
  method constructor(app)
    this.app = app
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTPreprocessor ]', msg
    endif
  endmethod

  method _processNode(node)
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_CALL
    global AST_OPCODE_SUB
    global AST_OPCODE_BLOCK
    global AST_OPCODE_CLASS_METHOD
    global AST_DATA_STRING
    global AST_DATA_INTEGER
    global AST_DATA_BOOL
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ
    global AST_OPCODE_COMPARE_GT, AST_OPCODE_COMPARE_GE
    global AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_BOOL_OR, AST_OPCODE_BOOL_AND
    global MOLD_SYSCALL_MAP
    global AST_OPCODE_REFERENCE_BY_INDEX
    global AST_DATA_SELECTOR
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_CLASS_METHOD
    global MOLD_TYPE_ID_MAP
    global AST_OPCODE_IS_TYPEOF
    global AST_OPCODE_NOP
    global MOLD_SYSCALL_ID_LEN
    global MOLD_SYSCALL_ID_DIE
    global AST_OPCODE_IF
    global AST_OPCODE_FOR_VALUES, AST_OPCODE_FOR_KEYS, AST_OPCODE_FOR_INDEXES
    global AST_OPCODE_FOR_KEYS_VALUES, AST_OPCODE_FOR_INDEXES_VALUES

    opcode   = node.opcode
    children = node.children

    # Process children recursively.
    for values oneChild in children
      this._processNode(oneChild)
    endfor

    # TODO: Clean up this mess.
    # TODO: Better way to pass current line/column to error
    # handler.
    this.app.setLogContext(node)

    # Handle @any(...) and @all(...) placeholders if logic expressions.
    if opcode is @any(AST_OPCODE_COMPARE_EQ,
                      AST_OPCODE_COMPARE_NEQ,
                      AST_OPCODE_COMPARE_GT,
                      AST_OPCODE_COMPARE_GE,
                      AST_OPCODE_COMPARE_LT,
                      AST_OPCODE_COMPARE_LE)
      # if x OP y
      x = children[0]
      y = children[1]

      # Possible improvement: Avoid code duplication?
      # Possible improvement: Support for flat or/and with many args?
      if ((x.opcode is AST_OPCODE_CALL) and
          (x.value  is @any('@any', '@all')))
        # Replace:
        #   @any(x1, x2, x3) OP y
        #   @all(x1, x2, x3) OP y
        # By:
        #   (x1 OP y) or  (x2 OP y) or  (x3 OP y) or  ...
        #   (x1 OP y) and (x2 OP y) and (x3 OP y) and ...
        if x.value is '@any'
          newNode     = AST_CreateNode(AST_DATA_BOOL, false, [])
          logicOpcode = AST_OPCODE_BOOL_OR
        else
          newNode     = AST_CreateNode(AST_DATA_BOOL, true, [])
          logicOpcode = AST_OPCODE_BOOL_AND
        endif

        for values xn in x.children
          nextOpNode = AST_CreateNode(opcode, '', [ xn, AST_CloneNode(y) ])
          newNode    = AST_CreateNode(logicOpcode, '', [ newNode, nextOpNode ])
        endfor
        node.opcode   = newNode.opcode
        node.children = newNode.children
        # Expand placeholders in just created nodes recurively.
        # In this case we handle IF @any(...) is @any(...) like expressions.
        this._processNode(node)
      endif

      if ((y.opcode is AST_OPCODE_CALL) and
          (y.value  is @any('@any', '@all')))
        # Replace:
        #   x OP @any(y1, y2, y3, ...)
        #   x OP @all(y1, y2, y3, ...)
        # By:
        #   (x OP y1) or  (x OP y2) or  (x OP y3) or ...
        #   (x OP y1) and (x OP y2) and (x OP y3) or ...
        if y.value is '@any'
          newNode     = AST_CreateNode(AST_DATA_BOOL, false, [])
          logicOpcode = AST_OPCODE_BOOL_OR
        else
          newNode     = AST_CreateNode(AST_DATA_BOOL, true, [])
          logicOpcode = AST_OPCODE_BOOL_AND
        endif

        for values yn in y.children
          nextOpNode = AST_CreateNode(opcode, '', [ AST_CloneNode(x), yn ])
          newNode    = AST_CreateNode(logicOpcode, '', [ newNode, nextOpNode ])
        endfor
        node.opcode   = newNode.opcode
        node.children = newNode.children
        # Expand placeholders in just created nodes recurively.
        # In this case we handle IF @any(...) is @any(...) like expressions.
        this._processNode(node)
      endif

      opcode   = node.opcode
      children = node.children
    endif

    # Process current node.
    if opcode is @any(AST_OPCODE_COMPARE_EQ,
                      AST_OPCODE_COMPARE_NEQ)

      # TODO: Review it.
      # x is y
      x = children[0]
      y = children[1]

      if y.opcode is AST_OPCODE_VARIABLE
        # Expand special built-in conditions:
        # - x is defined,
        # - x is odd,
        # - etc.
        name   = y.value
        typeId = null

        if name is 'defined'
          # x is defined => x isnt undefined
          AST_InvertBoolean(node)
          typeId = 0
        else
          typeId = MOLD_TYPE_ID_MAP{name}
        endif

        if typeId is defined
          # TODO: Optimize it.
          # Promote x is/isnt typename to is_typeof(x,typeid)
          node.opcode   = node.opcode + AST_OPCODE_IS_TYPEOF - AST_OPCODE_COMPARE_EQ
          node.children = [x]
          node.value    = typeId

          # children[0] = AST_CreateNodeSysCall(MOLD_SYSCALL_ID_GET_TYPEID, [x])
          # children[1] = AST_CreateNodeInteger(typeId)
          # TODO: Clean up this mess.
          x.__isUsedAsTypeofArg = true

        elif name is 'empty'
          # x is   empty -> len(x) is 0
          # x isnt empty -> len(x) isnt 0
          children[0] = AST_CreateNodeSysCall(MOLD_SYSCALL_ID_LEN, x)
          children[1] = AST_CreateNodeInteger(0)
        endif
      endif

    elif opcode is AST_OPCODE_CALL
      funcName  = node.value
      sysCallId = MOLD_SYSCALL_MAP{funcName}

      # TODO: Review it.
      if funcName is 'typeof'
        children[0].__isUsedAsTypeofArg = true
      endif

      if sysCallId is defined
        # One of built-in functions.
        # Verify number of passed parameters.
        paramsExpectedCnt = sysCallId // 0x1000
        paramsPassedCnt   = len(node.children)

        if paramsExpectedCnt isnt paramsPassedCnt
          this.app.logError('built-in ' ~ funcName ~ ' function requires exactly ' ~ str(paramsExpectedCnt) ~ ' parameter(s), but ' ~ str(paramsPassedCnt) ~ ' were passed')
        endif

        # Map to related syscall routine.
        node.value      = '__mold_syscall'
        node.sysCallId  = bitand(sysCallId, 0xff)

      elif funcName is '__mold_syscall'
        # TODO: Clean up this mess.
        # Treat first parameter as hard-coded integer syscall id.
        #if children[0].opcode is AST_DATA_INTEGER
          node.sysCallId = children[0].value
        #else
        #  this.app.logError('non-integer syscall id')
        #endif

        newChildren = []
        childrenCnt = len(node.children)

        for idx in 1 .. childrenCnt
          newChildren[idx - 1] = children[idx]
        endfor

        node.children = newChildren
      endif

    elif ((opcode is AST_OPCODE_REFERENCE_BY_INDEX) and
          (node.children[1].opcode is AST_DATA_SELECTOR))

      # x[@selector]
      box      = node.children[0]
      selector = node.children[1].value

      # Simplify it.
      # TODO: Handle empty array error.
      if selector is '@last'
        # x[@last] -> x[len(x) - 1]
        node.children[1] = AST_CreateNode(AST_OPCODE_SUB, '-', [
          AST_CreateNodeSysCall(MOLD_SYSCALL_ID_LEN, [AST_CloneNode(box)]),
          AST_CreateNodeInteger(1)
        ])

      elif selector is '@first'
        # x[@first] = 0
        node.children[1] = AST_CreateNodeInteger(0)

      else
        this.app.setLogContext(node)
        this.app.logError("unsupported selector '" ~ selector ~ "'")
      endif

    elif opcode is @any(AST_OPCODE_FUNCTION,
                        AST_OPCODE_CLASS_METHOD)
      # TODO: Clean up this mess.
      funcName   = node.value
      funcParams = []
      funcRetVar = null
      funcCode   = null

      # Collect parameter names.
      for values oneParamNode in children[0].children
        funcParams[@afterlast] = oneParamNode.value
      endfor

      # Collect function return variable if exists.
      if len(children) is 3
        # foo(x,y,z) -> rv
        funcRetVar = children[1].value
        funcCode   = children[2]
      else
        # foo(x,y,z)
        funcCode = children[1]
      endif

      # Inject proto.
      node.value = {
        'name': funcName,
        'params': funcParams,
        'rv': funcRetVar
      }

      if (opcode is AST_OPCODE_CLASS_METHOD) and (funcCode is undefined)
        # Method without code (pure virtual).
        # Build stub code for non-implemented methods.
        # TODO: Optimize it.
        # TODO: Use exceptions if ready?
        className      = node.parent.value.name
        methodName     = funcName
        fullMethodName = className ~ '.' ~ methodName
        node.isPureVirtual = true

        funcCode = AST_CreateNodeBlock([
          AST_CreateNodeSysCall(MOLD_SYSCALL_ID_DIE, [
            AST_CreateNodeString('not implemented: ' ~ fullMethodName)
          ])
        ])
      endif

      # Inject code block.
      node.children = [funcCode]

    elif opcode is @any(AST_OPCODE_FOR_VALUES,
                        AST_OPCODE_FOR_KEYS,
                        AST_OPCODE_FOR_INDEXES)
      # for values  v in box [ where condition ] body
      # for keys    k in box [ where condition ] body
      # for indexes i in box [ where condition ] body
      if len(children) is 4
        # There is optional where condition passed.
        # Move where to the body part.
        # Possible improvement: Smarter way to handle where condition?
        #
        # Replace:
        #   for ... where cond
        #   endfor
        #
        # By:
        #   for ...
        #     if cond
        #       ...
        #     endif
        #   endfor
        valuesKeysOrIndexesNode = children[0]
        boxNode                 = children[1]
        whereConditionNode      = children[2]
        bodyNode                = children[3]

        newBodyNode = AST_CreateNode(AST_OPCODE_BLOCK, '', [
          AST_CreateNode(AST_OPCODE_IF, 'if', [
            whereConditionNode,
            bodyNode
          ])
        ])

        node.children = [
          valuesKeysOrIndexesNode,
          boxNode,
          newBodyNode
        ]
      endif

    elif opcode is @any(AST_OPCODE_FOR_KEYS_VALUES,
                        AST_OPCODE_FOR_INDEXES_VALUES)
      # Possible improvemen: Avoid code duplication?
      # for indexes i values v in box [ where condition ] body
      # for keys    k values v in box [ where condition ] body
      if len(children) is 5
        # There is optional where condition passed.
        # Move where to the body part.
        # Possible improvement: Smarter way to handle where condition?
        #
        # Replace:
        #   for ... where cond
        #   endfor
        #
        # By:
        #   for ...
        #     if cond
        #       ...
        #     endif
        #   endfor
        indexesOrKeysNode  = children[0]
        valuesNode         = children[1]
        boxNode            = children[2]
        whereConditionNode = children[3]
        bodyNode           = children[4]

        newBodyNode = AST_CreateNode(AST_OPCODE_BLOCK, '', [
          AST_CreateNode(AST_OPCODE_IF, 'if', [
            whereConditionNode,
            bodyNode
          ])
        ])

        node.children = [
          indexesOrKeysNode,
          valuesNode,
          boxNode,
          newBodyNode
        ]
      endif
    endif
  endmethod

  method processNode(node)
    this._processNode(node)
  endmethod
endclass
