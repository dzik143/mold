################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'AST/ASTUtils.mold'

class ASTTypeCast
  method constructor(app)
    this.app = app
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTTypeCast ]', msg
    endif
  endmethod

  method _processNode(node)
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_CALL
    global AST_OPCODE_IF
    global AST_OPCODE_WHILE
    global AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_VCALL
    global AST_OPCODE_REFERENCE_BY_INDEX
    global AST_OPCODE_REFERENCE_BY_KEY
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_CLASS
    global AST_OPCODE_CLASS_METHOD
    global AST_OPCODE_NOP
    global AST_OPCODE_SWITCH
    global AST_OPCODE_TYPE_CAST
    global AST_OPCODE_COMPARE_EQ
    global AST_OPCODE_COMPARE_LE
    global AST_OPCODE_BOOL_NOT
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR
    global AST_OPCODE_CALL_NEW
    global AST_OPCODE_STRING_JOIN
    global AST_DATA_BOOL
    global SYMBOL_KIND_VAR_GLOBAL, SYMBOL_KIND_VAR_RETVAL
    global AST_OPCODE_ADD, AST_OPCODE_MUL, AST_OPCODE_SUB, AST_OPCODE_DIV, AST_OPCODE_IDIV
    global AST_DATA_DOUBLE, AST_DATA_INTEGER, AST_DATA_STRING

    opcode = node.opcode

    if opcode isnt AST_OPCODE_TYPE_CAST
      value       = node.value
      children    = node.children
      childrenCnt = len(children)

      # Process child nodes recursively.
      for values oneChild in children
        this._processNode(oneChild)
      endfor

      # Process current node.
      if opcode is AST_OPCODE_DECLARE_OR_ASSIGN
        # x = y
        x = children[0]
        y = children[1]

        if x.opcode is AST_OPCODE_VARIABLE
          # x = y
          # TODO: Review it?
          astDataTypeLeft  = AST_GetDataType(x)
          astDataTypeRight = AST_GetDataType(y)

          if astDataTypeLeft isnt astDataTypeRight
            children[1] = AST_TypeCast(y, astDataTypeLeft)
          endif

        elif ((x.opcode is AST_OPCODE_REFERENCE_BY_INDEX) or
              (x.opcode is AST_OPCODE_REFERENCE_BY_KEY))
          # x[i] = y
          # x{i} = y
          # Do nothing.
          # We already able to handle any value types.
        endif

      elif ((opcode is AST_OPCODE_ADD) or
            (opcode is AST_OPCODE_MUL) or
            (opcode is AST_OPCODE_SUB) or
            (opcode is AST_OPCODE_DIV) or
            (opcode is AST_OPCODE_IDIV) or
            ((opcode >= AST_OPCODE_COMPARE_EQ) and (opcode <= AST_OPCODE_COMPARE_LE)))

        x = children[0]
        y = children[1]

        xType = AST_GetDataType(x)
        yType = AST_GetDataType(y)

        if xType isnt yType
          # TODO: Better error handler.
          # TODO: Handle error at compilation time if possible.
          if xType is -1
            # concrete x variant
            this._debug('Type mismatch at arithmetic expression node #' ~ str(node.id) ~ ' (' ~ str(xType) ~ ' vs ' ~ str(yType) ~ ')')
            children[1] = AST_TypeCast(y, xType)

          elif yType is -1
            # variant x concrete
            this._debug('Type mismatch at arithmetic expression node #' ~ str(node.id) ~ ' (' ~ str(xType) ~ ' vs ' ~ str(yType) ~ ')')
            children[0] = AST_TypeCast(x, yType)

          else
            die('runtime error: implicit type conversion not supported anymore')
          endif
        endif

      elif (opcode is AST_OPCODE_BOOL_AND) or (opcode is AST_OPCODE_BOOL_OR)
        # TODO: Review it.
        children[0] = AST_TypeCast(children[0], AST_DATA_BOOL)
        children[1] = AST_TypeCast(children[1], AST_DATA_BOOL)

      elif opcode is AST_OPCODE_STRING_JOIN
        children[0] = AST_TypeCast(children[0], AST_DATA_STRING)
        children[1] = AST_TypeCast(children[1], AST_DATA_STRING)

      elif opcode is AST_OPCODE_REFERENCE_BY_INDEX
        # ... = x[idx]
        children[1] = AST_TypeCast(children[1], AST_DATA_INTEGER)

      elif opcode is AST_OPCODE_REFERENCE_BY_KEY
        # ... = x{key}
        children[1] = AST_TypeCast(children[1], AST_DATA_STRING)

      elif opcode is AST_OPCODE_FOR_VALUES_RANGE
        children[1] = AST_TypeCast(children[1], AST_DATA_INTEGER) # idxBegin
        children[2] = AST_TypeCast(children[2], AST_DATA_INTEGER) # idxEnd
        children[3] = AST_TypeCast(children[3], AST_DATA_INTEGER) # idxStep

      elif opcode is AST_OPCODE_SWITCH
        # TODO: Handle non-integer switch?
        # switch expr
        children[0] = AST_TypeCast(children[0], AST_DATA_INTEGER)

      elif opcode is AST_OPCODE_CALL
        # TODO: Clean up this mess.
        if node.value is 'super'
          funcProto     = node.funcProto
          firstParamIdx = 1
        else
          funcProto     = node.symbolInfo.proto
          firstParamIdx = 0
        endif

        astTypeParams = funcProto.astTypeParams

        if astTypeParams is defined
          for idx in 0 .. childrenCnt
            # Adjust argument type.
            children[idx] = AST_TypeCast(children[idx], astTypeParams[firstParamIdx + idx])
          endfor

        elif (node.value isnt 'global') and (node.value isnt 'print')
          for idx in 0 .. childrenCnt
            # Adjust argument type.
            # TODO: Handle non-variant params.
            children[idx] = AST_TypeCast(children[idx], -1)
          endfor
        endif

      elif opcode is AST_OPCODE_CALL_NEW
        classProto = node.symbolTable.lookupClass(node.value).proto
        funcProto  = classProto.vtable.constructor

        if funcProto is defined
          astTypeParams = funcProto.astTypeParams
          for idx in 0 .. childrenCnt
            # Adjust argument type.
            children[idx] = AST_TypeCast(children[idx], astTypeParams[idx])
          endfor
        endif

      elif opcode is AST_OPCODE_VCALL
        for idx in 0 .. childrenCnt
          # Adjust argument type.
          # TODO: Handle non-variant params.
          children[idx] = AST_TypeCast(children[idx], -1)
        endfor

      else
        # Always cast compare result to machine type.
        # TODO: Optimize it.
        for idx in 0 .. childrenCnt
          childNode   = children[idx]
          childOpcode = childNode.opcode

          if ((childOpcode >= AST_OPCODE_COMPARE_EQ) and
              (childOpcode <= AST_OPCODE_BOOL_NOT))

            children[idx] = AST_TypeCast(childNode, AST_DATA_BOOL)
          endif
        endfor
      endif
    endif
  endmethod

  method processNode(node)
    this._processNode(node)
  endmethod
endclass
