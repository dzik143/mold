################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (c) 2015, 2018 Sylwester Wysocki (sw143@wp.pl).                    #
#                                                                              #
# The Mold code and any derived work however based on this software are        #
# copyright of Sylwester Wysocki. Redistribution and use of the present        #
# software is allowed according to terms specified in the file LICENSE         #
# which comes in the source distribution.                                      #
#                                                                              #
# All rights reserved.                                                         #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'AST/ASTUtils.mold'

class ASTSyntaxValidator
  method constructor(app)
    this.app = app
  endmethod

  method processNode(node)
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_IF
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_CALL
    global AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_WHILE
    global AST_OPCODE_NEG
    global AST_OPCODE_NOP
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ
    global AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_COMPARE_GT, AST_OPCODE_COMPARE_GE
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV, AST_OPCODE_IDIV
    global AST_DATA_BOOL, AST_DATA_INTEGER, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_DATA_UNDEFINED
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR
    global AST_OPCODE_REFERENCE
    global SYMBOL_KIND_CONST

    opcode      = node.opcode
    value       = node.value
    newValue    = node.value
    childrenCnt = node.childrenCnt
    children    = node.children

    if opcode is AST_OPCODE_REFERENCE
      # box[idx]
      # box: variable, reference
      # idx:
      opcodeBox   = children[0].opcode
      opcodeIndex = children[1].opcode

      if (opcodeBox isnt AST_OPCODE_VARIABLE) and (opcodeBox isnt AST_OPCODE_REFERENCE)
        # Error - box node should stores variable name or another reference.
        die('error: array or map expected')
      endif

      # TODO: Verify right node.
      # this.processNode(node)

    else
      for idx in 0 .. childrenCnt
        this.processNode(children[idx])
      endfor
    endif
  endmethod
endclass
