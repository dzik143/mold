################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/ASTTranslator.mold'
import 'MIR/MIR.mold'

class ASTTranslatorMIR0 extends ASTTranslator

  # ----------------------------------------------------------------------------
  #                                Init code
  # ----------------------------------------------------------------------------

  method constructor(app)
    super(app)
    this.code = new MIRCode()
  endmethod

  # ----------------------------------------------------------------------------
  #                         Implement built-in functions
  # ----------------------------------------------------------------------------

  method _loadArgsVector()
    this.code.loadArgv()
  endmethod

  method _loadArgsCount()
    this.code.loadArgc()
  endmethod

  # ----------------------------------------------------------------------------
  #                     Implement ASTTranslator interface
  # ----------------------------------------------------------------------------

  method _neg(rv, value)
    this.code.neg()
  endmethod

  method _add(rv, x, y)
    this.code.add()
  endmethod

  method _stringJoin(rv, x, y)
    this.code.stringJoin()
  endmethod

  method _sub(rv, x, y)
    this.code.sub()
  endmethod

  method _mul(rv, x, y)
    this.code.mul()
  endmethod

  method _div(rv, x, y)
    this.code.div()
  endmethod

  method _idiv(rv, x, y)
    this.code.idiv()
  endmethod

  method _loadArray(rv)
    this.code.loadArray()
  endmethod

  method _loadMap(rv)
    this.code.loadMap()
  endmethod

  method _loadNull(rv)
    this.code.loadNull()
  endmethod

  method _loadImm(rv, value)
    this.code.loadImm(value)
  endmethod

  method _convert(dst, src, srcType, dstType)
    # TODO: Review it.
    # Do nothing. We always use variant.
  endmethod

  method _compareEQ(rv, x, y)
    this.code.cmpEQ()
  endmethod

  method _compareNEQ(rv, x, y)
    this.code.cmpNEQ()
  endmethod

  method _compareLT(rv, x, y)
    this.code.cmpLT()
  endmethod

  method _compareLE(rv, x, y)
    this.code.cmpLE()
  endmethod

  method _compareGT(rv, x, y)
    this.code.cmpGT()
  endmethod

  method _compareGE(rv, x, y)
    this.code.cmpGE()
  endmethod

  method _isTypeOf(rv, x, typeId)
    global MOLD_SYSCALL_ID_GET_TYPEID
    this.code.syscall(MOLD_SYSCALL_ID_GET_TYPEID, 1)
    this.code.loadImm(typeId)
    this.code.cmpEQ()
  endmethod

  method _isNotTypeOf(rv, x, typeId)
    global MOLD_SYSCALL_ID_GET_TYPEID
    this.code.syscall(MOLD_SYSCALL_ID_GET_TYPEID, 1)
    this.code.loadImm(typeId)
    this.code.cmpNEQ()
  endmethod

  method _loadVariable(name)
    global SYMBOL_KIND_VAR_LOCAL
    global SYMBOL_KIND_VAR_GLOBAL
    global SYMBOL_KIND_VAR_PARAM
    global SYMBOL_KIND_VAR_RETVAL
    global SYMBOL_KIND_CONST

    symbolInfo = this.symbolTable.lookup(name)

    kind = symbolInfo.kind
    id   = symbolInfo.id

    if kind is SYMBOL_KIND_VAR_LOCAL
      # Local variable
      this.code.loadLocal(id)

    elif kind is SYMBOL_KIND_VAR_GLOBAL
      # Global variable
      this.code.loadGlobal(id)

    elif kind is SYMBOL_KIND_VAR_PARAM
      # One of call parameters.
      this.code.loadParamN(id)

    elif kind is SYMBOL_KIND_VAR_RETVAL
      # Return value of current function.
      this.code.loadRetVal()

    elif kind is SYMBOL_KIND_CONST
      # Constant - treat as imm.
      this.code.loadImm(symbolInfo.value)

    else
      this._error("unexpected symbol kind '" ~ name ~ "' (" ~ str(kind) ~ ")")
    endif
  endmethod

  method _assign(name, unusedValue)
    global SYMBOL_KIND_VAR_LOCAL
    global SYMBOL_KIND_VAR_GLOBAL
    global SYMBOL_KIND_VAR_PARAM
    global SYMBOL_KIND_VAR_RETVAL

    symbolInfo = this.symbolTable.lookup(name)
    kind       = symbolInfo.kind
    id         = symbolInfo.id

    if kind is SYMBOL_KIND_VAR_LOCAL
      # Local variable
      symbolInfo.id = this.code.storeLocal(id)

    elif kind is SYMBOL_KIND_VAR_GLOBAL
      # Global variable
      symbolInfo.id = this.code.storeGlobal(id)

    elif kind is SYMBOL_KIND_VAR_PARAM
      # One of call parameters.
      this.code.storeParamN(id)

    elif kind is SYMBOL_KIND_VAR_RETVAL
      # Return value of current function.
      this.code.storeRetVal()

    else
      # TODO: Handle terminal nodes.
      this._error("unexpected symbol kind '" ~ name ~ "' (" ~ str(kind) ~ ")")
    endif
  endmethod

  method _syscall(rv, id, params, paramsCnt)
    this.code.syscall(id, paramsCnt)

    # TODO: Clean up this mess.
    if rv is undefined
      this.code.drop()
    endif
  endmethod

  method _call(rv, proto, params, paramsCnt)
    this.code.call(proto)

    # TODO: Clean up this mess.
    if rv is undefined
      this.code.drop()
    endif
  endmethod

  method _loadFromIndex(rv, unusedBox, unusedIdx)
    this.code.loadFromIndex()
  endmethod

  method _loadFromKey(rv, unusedBox, unusedKey)
    this.code.loadFromKey()
  endmethod

  method _storeAtIndex(unusedBox, unusedIdx, unusedValue)
    this.code.storeAtIndex()
  endmethod

  method _storeAtKey(unusedBox, unusedKey, unusedValue)
    this.code.storeAtKey()
  endmethod

  method _storeAtIndexAndDrop(unusedBox, unusedIdx, unusedValue)
    this.code.storeAtIndex()
    this.code.drop()
  endmethod

  method _storeAtKeyAndDrop(unusedBox, unusedKey, unusedValue)
    this.code.storeAtKey()
    this.code.drop()
  endmethod

  method _createObject(rv, classProto)
    this.code.createObject(classProto)
  endmethod

  method _evaluateNodeLazyBoolAnd(rv, leftAst, rightAst)
    # x and y
    endLabelId = this.code.createLabel()

    this.code.loadImm(false)         # [false]
    x = this._evaluateNode(leftAst)  # [false x]
    this.code.jmpIfFalse(endLabelId) # [false]

    # Evaluate right node only if left is true.
    y = this._evaluateNode(rightAst) # [y]
    this.code.moveBack()             # []
    this.code.emitLabel(endLabelId)
  endmethod

  method _evaluateNodeLazyBoolOr(rv, leftAst, rightAst)
    # x or y
    endLabelId = this.code.createLabel()

    this.code.loadImm(true)         # [true]
    x = this._evaluateNode(leftAst) # [true x]
    this.code.jmpIfTrue(endLabelId) # [true]

    # Evaluate right node only if left is false.
    y = this._evaluateNode(rightAst)# [y]
    this.code.moveBack()            # []
    this.code.emitLabel(endLabelId)
  endmethod

  method _invokeMethod(rv, methodName, params, paramsCnt)
    # TODO: Remove paramsCnt
    this.code.vcall(methodName, paramsCnt)
  endmethod

  method _executeNodeFor(iterName, valueStart, valueEnd, valueStep, bodyAst)
    symbolTable = this.symbolTable
    code        = this.code
    loopLabelId = code.createLabel()
    endLabelId  = code.createLabel()

    # [step, endIdx, startIdx]
    iterSymbolInfo    = symbolTable.lookup(iterName)
    iterId            = code.storeLocal(iterSymbolInfo.id)
    iterSymbolInfo.id = iterId

    # [step, endIdx]
    code.emitLabel(loopLabelId)
      code.dup()                  # [step, endIdx, endIdx]
      code.loadLocal(iterId)      # [step, endIdx, endIdx, idx]
      code.cmpLE()                # [step, endIdx, true/false]
      code.jmpIfTrue(endLabelId)  # [step, endIdx]

      this._executeNode(bodyAst)

      code.over()                 # [step, endIdx, step]
      code.loadLocal(iterId)      # [step, endIdx, step, iterId]
      code.add()                  # [step, endIdx, newIdx]
      code.storeLocal(iterId)     # [step, endIdx]]
      code.jmp(loopLabelId)       # [startIdx, endIdx, step]

    code.emitLabel(endLabelId)
    code.dropN(2)                 # []
  endmethod

  method _executeNodeForEach(iteratorKey, iteratorValue, box, bodyAst, isMapMode)
    global AST_DATA_INTEGER

    symbolTable = this.symbolTable
    code        = this.code
    loopLabelId = code.createLabel()
    endLabelId  = code.createLabel()

    keyId   = null
    valueId = null

    # Avoid exeuting loop body directly.
    # TODO: Handle inner functions in better way.
    code.jmp(endLabelId)

    if iteratorKey is defined
      symbolInfo    = symbolTable.lookup(iteratorKey)
      keyId         = code.allocateLocalId()
      symbolInfo.id = keyId
    endif

    if iteratorValue is defined
      symbolInfo    = symbolTable.lookup(iteratorValue)
      valueId       = code.allocateLocalId()
      symbolInfo.id = valueId
    endif

    # Translate loop body as inner function.
    code.emitLabel(loopLabelId)
      this._executeNode(bodyAst)
      code.innerRet()
    code.emitLabel(endLabelId)

    # TODO: Clean up this mess.
    bodyIp = code.resolveLabel(loopLabelId)

    if isMapMode is true
      code.forEachKeys(keyId, valueId, bodyIp)
    else
      code.forEachIndexes(keyId, valueId, bodyIp)
    endif
  endmethod

  method _executeNodeWhile(condAst, bodyAst)
    code        = this.code
    loopLabelId = code.createLabel()
    endLabelId  = code.createLabel()

    code.emitLabel(loopLabelId)
      # if (!cond) goto end
      cond = this._evaluateNode(condAst)
      code.jmpIfFalse(endLabelId)

      # Loop body
      this._executeNode(bodyAst)
      code.jmp(loopLabelId)

    code.emitLabel(endLabelId)
  endmethod

  method _executeNodeIf(cond, codeIfTrue, codeIfFalse)
    code         = this.code
    falseLabelId = code.createLabel()
    endLabelId   = code.createLabel()

    code.jmpIfFalse(falseLabelId)
    this._executeNode(codeIfTrue)

    if codeIfFalse is defined
      code.jmp(endLabelId)
      code.emitLabel(falseLabelId)
      this._executeNode(codeIfFalse)
    else
      code.emitLabel(falseLabelId)
    endif

    code.emitLabel(endLabelId)
  endmethod

  method _executeNodePrint(node)
    children = node.children
    params   = []

    for values childNode in children
      params[@afterlast] = this._evaluateNode(childNode)
    endfor

    # TODO: Simplify it.
    for values oneParam in params
      this._releaseTempVar(oneParam)
    endfor

    this.code.callPrint(len(params))
  endmethod

  method _declareFunction(funcName, funcProto)
    funcProto.labelId = this.code.createLabel()
  endmethod

  method _declareClass(className, classProto)
    this.code.createClass(classProto)
  endmethod

  method _emitFunctionBody(funcName, funcProto)
    this._debug('Going to emit function body "' ~ str(funcName) ~ '"')

    params    = funcProto.params
    paramsCnt = len(funcProto.params)
    children  = funcProto.children
    codeAst   = children[0]
    rvName    = funcProto.rv

    code = this.code

    # TODO: Simplify it.
    oldSymbolTable   = this.symbolTable
    this.symbolTable = codeAst.symbolTable

    labelId = code.createAndEmitLabel()

    funcProto.ptr = code.resolveLabel(labelId)

    code.comment('-----------------------------------------------')
    code.comment('function ' ~ funcName)
    code.comment('-----------------------------------------------')

    code.beginProc(funcName, params, paramsCnt, rvName)

    # TODO: Clean up this mess.
    if funcProto.className is defined
      # Add this parameter.
      paramsCnt = paramsCnt + 1
    endif

    code.initFrame(paramsCnt)

    # Translate code.
    for values item in codeAst.children
      this._executeNode(item)
    endfor

    code.ret(paramsCnt)
    code.endProc()

    this.symbolTable = oldSymbolTable

    this._debug('Function body emmited')
  endmethod

  method _dropRetVal()
    this.code.drop()
  endmethod

  # ----------------------------------------------------------------------------
  #                                Public API
  # ----------------------------------------------------------------------------

  method run(ast)
    this._executeNode(ast)

    # TODO: Review it.
    this.symbolTable = ast.symbolTable
    this._emitGlobals()
  endmethod
endclass
