################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki (sw143@wp.pl)                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'

class ASTTranslator

  # ----------------------------------------------------------------------------
  #                                Init code
  # ----------------------------------------------------------------------------

  method constructor(app)
    this.app = app

    # TODO: Clean up this mess.
    this.nextId          = 1
    this.importedModules = {}

    # TODO: Remove redundant array if map iteration will work.
    this.vtable        = {}
    this.vtableKeys    = []
    this.vtableKeysCnt = 0

    # TODO: Use null?
    this.currentClassProto    = false
    this.currentFunctionProto = false

    # TODO: Use many deep levels in symbol table.
    this.branchDeepIdx = 0
  endmethod

  # ----------------------------------------------------------------------------
  #                             Error handlers
  # ----------------------------------------------------------------------------

  method _debug(msg)
    if false
      print '[ ASTTranslator ]', msg
    endif
  endmethod

  method _error(msg)
    die('error: ' + msg)
  endmethod

  # ----------------------------------------------------------------------------
  #                            Built-in functions
  # ----------------------------------------------------------------------------

  method _callLen(x) -> rv
    rv = false
    this._error('_callLen not implemented')
  endmethod

  method _callStr(x) -> rv
    rv = false
    this._error('_callStr not implemented')
  endmethod

  method _callStrEscape(x) -> rv
    rv = false
    this._error('_callStrEscape not implemented')
  endmethod

  method _callExit()
    this._error('_callExit not implemented')
  endmethod

  method _callMoldWarning(msg)
    this._error('_callMoldWarning not implemented')
  endmethod

  method _callMoldPrintToStdOut(msg)
    this._error('_callMoldPrintToStdOut not implemented')
  endmethod

  method _callDie(msg)
    this._error('_callDie not implemented')
  endmethod

  method _callMoldCreateObject(classProto) -> rv
    rv = false
    this._error('_callMoldCreateObject not implemented')
  endmethod

  method _callMoldGetClassName(thiz) -> rv
    rv = false
    this._error('_callMoldGetClassName not implemented')
  endmethod

  method _callMoldParseFile(filePath) -> rv
    rv = false
    this._error('_callMoldParseFile not implemented')
  endmethod

  method _loadArgsVector() -> rv
    rv = false
    this._error('_loadArgsVector not implemented')
  endmethod

  method _loadArgsCount() -> rv
    rv = false
    this._error('_callLoadArgsCount not implemented')
  endmethod

  # ----------------------------------------------------------------------------
  #            Methods, which should be overloaded in derived class
  # ----------------------------------------------------------------------------

  method _loadArray() -> rv
    rv = false
    this._error('_loadArray() not implemented')
  endmethod

  method _loadMap() -> rv
    rv = false
    this._error('_loadMap() not implemented')
  endmethod

  method _loadImm(value) -> rv
    rv = false
    this._error('_loadImm() not implemented')
  endmethod

  method _loadImmAsVariant(value) -> rv
    # TODO: Review is it really needed?
    rv = false
    this._error('_loadImmAsVariant() not implemented')
  endmethod

  method _loadVariable(name) -> rv
    rv = false
    this._error('_loadVariable() not implemented')
  endmethod

  method _call(funcProto, params, paramsCnt) -> rv
    rv = false
    this._error('_call() not implemented')
  endmethod

  method _invokeMethod(methodName, params, paramsCnt) -> rv
    rv = false
    this._error('_invokeMethod() not implemented')
  endmethod

  method _callPrint(params, paramsCnt)
    this._error('_callPrint() not implemented')
  endmethod

  method _typeof(value) -> rv
    rv = false
    this._error('_typeof() not implemented')
  endmethod

  method _neg(value) -> rv
    rv = false
    this._error('_neg() not implemented')
  endmethod

  method _add(x, y) -> rv
    rv = false
    this._error('_add() not implemented')
  endmethod

  method _sub(x, y) -> rv
    rv = false
    this._error('_sub() not implemented')
  endmethod

  method _mul(x, y) -> rv
    rv = false
    this._error('_mul() not implemented')
  endmethod

  method _div(x, y) -> rv
    rv = false
    this._error('_div() not implemented')
  endmethod

  method _idiv(x, y) -> rv
    rv = false
    this._error('_idiv() not implemented')
  endmethod

  method _compareEQ(x, y) -> rv
    rv = false
    this._error('_compareEQ() not implemented')
  endmethod

  method _compareNEQ(x, y) -> rv
    rv = false
    this._error('_compareNEQ() not implemented')
  endmethod

  method _compareLT(x, y) -> rv
    rv = false
    this._error('_compareLT() not implemented')
  endmethod

  method _compareLE(x, y) -> rv
    rv = false
    this._error('_compareLE() not implemented')
  endmethod

  method _compareGT(x, y) -> rv
    rv = false
    this._error('_compareGT() not implemented')
  endmethod

  method _compareGE(x, y) -> rv
    rv = false
    this._error('_compareGE() not implemented')
  endmethod

  method _boolAnd(x, y) -> rv
    rv = false
    this._error('_boolAnd() not implemented')
  endmethod

  method _boolOr(x, y) -> rv
    rv = false
    this._error('_boolOr() not implemented')
  endmethod

  method _loadFromIndex(box, idx) -> rv
    rv = false
    this._error('_loadFromIndex() not implemented')
  endmethod

  method _storeAtIndex(box, idx, value)
    this._error('_storeAtIndex() not implemented')
  endmethod

  method _storeAtIndexAndDrop(rv, key, value)
    this._storeAtIndex(rv, key, value)
  endmethod

  method _createObject(classProto) -> rv
    rv = false
    this._error('_createObject() not implemented')
  endmethod

  method _convert(srcNode, srcType, dstType) -> rv
    rv = false
    this._error('_convert() is not implemented')
  endmethod

  method _dropRetVal()
  endmethod

  method _declareFunction(funcName, funcProto)
  endmethod

  method _declareClass(className, classProto)
  endmethod

  method _emitFunctionBody(funcName, funcProto)
  endmethod

  method _declareExternalFunction(funcName, funcProto)
    this.symbolTable.insertFunction(funcName, funcProto)
  endmethod

  # ----------------------------------------------------------------------------
  #                         Internal helpers (private)
  # ----------------------------------------------------------------------------

  method _enterScope(ast)
    this.symbolTable = ast.symbolTable
  endmethod

  method _leaveScope()
    childTable = this.symbolTable
    this.symbolTable = this.symbolTable.parent

    # TODO: Remove it. We temporary merge child symbols to keep all proc vars
    # in one flat frame.
    symbolsCurrent      = this.symbolTable.symbols
    symbolsCurrentIndex = symbolsCurrent['_index']
    symbolsCurrentCnt   = len(symbolsCurrentIndex)

    symbolsChild      = childTable.symbols
    symbolsChildIndex = childTable.symbols['_index']
    symbolsChildCnt   = len(symbolsChildIndex)

    for idx in 0 .. symbolsChildCnt
      item = symbolsChildIndex[idx]
      id   = item.name

      if typeof(symbolsCurrent[id]) is 'undefined'
        symbolsCurrent[id]                     = item
        symbolsCurrentIndex[symbolsCurrentCnt] = item
        symbolsCurrentCnt                      = symbolsCurrentCnt + 1

      else
        # TODO: Accumulate hits?
        if symbolsCurrent[id].astType isnt item.astType
          die('error: type conflict for variable "' + item.name + '"')
          #symbolsCurrent[id].astType = -1
          #item.astType = -1
        endif
      endif
    endfor
  endmethod

  method _verifyNumberOfParameters(name, paramsExpectedCnt, paramsPassedCnt)
    if paramsPassedCnt isnt paramsExpectedCnt
      die('error: ' + name + ' function requires exactly ' + str(paramsExpectedCnt) + ' parameter(s), but ' + str(paramsPassedCnt) + ' were passed')
    endif
  endmethod

/*
  method _getNextId() -> rv
    rv          = this.nextId
    this.nextId = this.nextId + 1
  endmethod

  method _createTempVar() -> rv
    rv = '_tmp' + str(this._getNextId())
  endmethod

  method _createTempLabel() -> rv
    rv = '_l' + str(this._getNextId())
  endmethod

  method _createTempVarAndAssign(value) -> rv
    rv = this._createTempVar()
    this._declareAndAssign(rv, value)
  endmethod
*/
  method _emitFunction(ast)
    global AST_OPCODE_CLASS_METHOD

    funcProto = ast
    funcName  = ast['fullName']
    children  = ast['children']

    if typeof(children) isnt 'undefined'
      this.app._debug('Emitting function ' + funcName + '...')

      oldSymbolTable   = this.symbolTable
      this.symbolTable = ast.children[0].symbolTable

      if typeof(funcProto.className) isnt 'undefined'
        this.currentClassProto = oldSymbolTable.lookupClass(funcProto.className)['proto']
      endif

      this.currentFunctionProto = funcProto

      this._declareFunction(funcName, funcProto)
      this._emitFunctionBody(funcName, funcProto)

      this.currentFunctionProto = false
      this.currentClassProto    = false

      this.symbolTable = oldSymbolTable
    endif
  endmethod

  method _emitGlobals()
    global SYMBOL_KIND_FUNCTION
    global SYMBOL_KIND_CLASS
    global SYMBOL_KIND_METHOD

    this._debug('Going to emit globals')

    symbols = this.symbolTable.exportSymbols()
    symbolsIndex = symbols._index
    symbolsCnt   = len(symbolsIndex)

    for idx in 0 .. symbolsCnt
      symbolInfo = symbolsIndex[idx]
      symbolKind = symbolInfo.kind

      if symbolKind is SYMBOL_KIND_FUNCTION
        this._emitFunction(symbolInfo.proto)

      elif symbolKind is SYMBOL_KIND_CLASS
        this._declareClass(symbolInfo.name, symbolInfo.proto)
      endif
    endfor

    this._debug('Globals emmited')
  endmethod

  method _callSuper(params, paramsCnt)
    methodProto = this.currentFunctionProto
    classProto  = this.currentClassProto

    if (methodProto is false) or (typeof(methodProto['fullName']) is 'undefined')
      this._error('super called outside of class')

    elif methodProto['name'] isnt 'constructor'
      this._error('super called outside of constructor')

    elif methodProto['name'] isnt 'constructor'
      this._error('super called outside of constructor')

    elif typeof(classProto['baseName']) is 'undefined'
      this._error('class ' + classProto['name'] + ' has no base class')

    elif typeof(methodProto['baseMethod']) is 'undefined'
      this._error('class ' + classProto['baseName'] + ' has no constructor declared')

    elif methodProto['paramsCnt'] isnt paramsCnt
      this._error('base constructor requires exactly ' + str(methodProto['paramsCnt']) + ' parameters, but ' + str(paramsCnt) + ' were passed')

    else
      # Base constructor exists, inject this reference to call list.
      newParams = ['__mold_this']
      for idx in 0 .. paramsCnt
        newParams[idx + 1] = params[idx]
      endfor

      # TODO: Remove this fix.
      methodProto['isConstructor'] = true

      this._call(methodProto['baseMethod'], newParams, paramsCnt + 1)
    endif

  endmethod

  # ----------------------------------------------------------------------------
  #                         Function and class protos
  # ----------------------------------------------------------------------------

  method _getClassProto(className) -> rv
    rv = this.symbolTable.lookupClass(className)['proto']
  endmethod

  method _getMethodProto(className, methodName, paramsCnt) -> rv
    rv = false
    die('ASTTranslator::_getMethodProto() not implemented')
  endmethod

  # ----------------------------------------------------------------------------
  #                             Symbols (private)
  # ----------------------------------------------------------------------------

  method _isset(name) -> rv
    rv = this.symbolTable.isset(name)
  endmethod

  method _importGlobal(name)
    this.symbolTable.importGlobal(name)
  endmethod

  method _declareVariableIfNotSet(name)
    if this._isset(name) is false
      this._declareVariable(name)
    endif
  endmethod

  method _declareAndAssign(name, value)
    #this._declareVariable(name)
    this._assign(name, value)
  endmethod

  method _declareVariable(name)
    die('ASTTranslator::_declareVariable() not implemented')
  endmethod

  method _assign(name, value)
    die('_assign() not implemented')
  endmethod

  # ----------------------------------------------------------------------------
  #                     Internal implementation (private)
  # ----------------------------------------------------------------------------

  method _evaluateNode(ast) -> rv
    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_REFERENCE, AST_OPCODE_CALL
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_INVOKE_METHOD
    global AST_OPCODE_TYPE_CAST

    opcode      = ast['opcode']
    value       = ast['value']
    children    = ast['children']
    childrenCnt = ast['childrenCnt']

    this._debug('_evaluateNode: ' + str(opcode) + ', ' + str(value))

    #
    # DEBUG ONLY
    #

    if (ast.isTranslated is true) and (AST_IsImmOrVar(ast) is false)
      die('error: node #' + str(ast.id) + ' is already translated (eval)')
    endif

    if childrenCnt isnt len(ast.children)
      die('error: inconsistent childrenCnt (' + str(childrenCnt) + ') vs len(children) (' + str(len(ast.children)) + ') at node #' + str(ast.id))
    endif

    ast.isTranslated = true

    #
    # END OF DEBUG ONLY
    #

    # TODO: Clean up this mess.
    # This is temporary hack to get result type before allocating new
    # temp var.
    #astDataType         = AST_GetDataType(ast)
    #this.rvDataTypeHack = AST_ConvertDataTypeToMIR(astDataType)

    if opcode is AST_DATA_ARRAY
      if typeof(value) is 'array'
        rv = this._loadImm(value)

      else
        rv = this._loadArray()
        # TODO: Handle non-variant indexes and values.
        for idx in 0 .. childrenCnt
          key   = this._loadImmAsVariant(idx)
          value = this._evaluateNode(children[idx])
          valueAsVariant = this._convert(value, AST_GetDataType(children[idx]), -1)
          this._storeAtIndex(rv, key, valueAsVariant)
        endfor
      endif

    elif opcode is AST_DATA_MAP
      rv = this._loadMap()

      for idx in 0 .. childrenCnt step 2
        # TODO: Handle non-variant values.
        key   = this._evaluateNode(children[idx])
        value = this._evaluateNode(children[idx + 1])
        valueAsVariant = this._convert(value, AST_GetDataType(children[idx + 1]), -1)
        this._storeAtIndex(rv, key, valueAsVariant)
      endfor

    elif (opcode < AST_OPCODE_PROGRAM)
      # Imm data node, just return value.
      rv = this._loadImm(value)

    elif opcode is AST_OPCODE_CALL
      # foo(x,y,z...).
      rv = this._evaluateNodeCall(ast)

    elif opcode is AST_OPCODE_INVOKE_METHOD
      # obj.foo(x, y, z, ...)
      rv = this._evaluateNodeInvokeMethod(ast)

    elif opcode is AST_OPCODE_VARIABLE
      if value is 'argv'
        # Built-in access to command line parametrs.
        rv = this._loadArgsVector()

        if this.symbolTable.procLevel > 0
          this.symbolTable.importGlobal('argv')
        endif

      elif value is 'argc'
        # Built-in access to command line parametrs.
        rv = this._loadArgsCount()

        if this.symbolTable.procLevel > 0
          this.symbolTable.importGlobal('argc')
        endif

      else
        # Treat as ordinary variable.
        rv = this._loadVariable(value)
      endif

    elif opcode is AST_OPCODE_TYPE_CAST
      srcNode = children[0]
      srcType = AST_GetDataType(srcNode)
      dstType = AST_GetDataType(ast)

      rv = this._evaluateNode(srcNode)

      if srcType isnt dstType
        rv = this._convert(rv, srcType, dstType)
      endif

    elif opcode is AST_OPCODE_NEG
      rv = this._neg(this._evaluateNode(children[0]))

    elif opcode is AST_OPCODE_BOOL_AND
      # Lazy 'and' operator.
      rv = this._evaluateNodeLazyBoolAnd(children[0], children[1])

    elif opcode is AST_OPCODE_BOOL_OR
      # Lazy 'or' operator.
      rv = this._evaluateNodeLazyBoolOr(children[0], children[1])

    elif opcode is AST_OPCODE_CALL_NEW
      classProto = this._getClassProto(value)
      rv         = this._createObject(classProto)

      # Call constructor if any.
      methodProto = classProto['vtable']['constructor']

      if typeof(methodProto) isnt 'undefined'
        params      = [rv]
        paramsCnt   = methodProto['paramsCnt'] + 1
        this._verifyNumberOfParameters('constructor', paramsCnt, childrenCnt)

        for idx in 1 .. childrenCnt
          params[idx] = this._evaluateNode(children[idx])
        endfor

        # TODO: Remove this fix.
        methodProto['isConstructor'] = true

        this._call(methodProto, params, paramsCnt)
      endif

    elif childrenCnt is 2
      # x OP y
      left  = this._evaluateNode(children[0])
      right = this._evaluateNode(children[1])

      if opcode is AST_OPCODE_REFERENCE
        # x[idx]
        rv = this._loadFromIndex(left, right)

      elif opcode is AST_OPCODE_COMPARE_EQ
        rv = this._compareEQ(left, right)

      elif opcode is AST_OPCODE_COMPARE_NEQ
        rv = this._compareNEQ(left, right)

      elif opcode is AST_OPCODE_COMPARE_GT
        rv = this._compareGT(left, right)

      elif opcode is AST_OPCODE_COMPARE_GE
        rv = this._compareGE(left, right)

      elif opcode is AST_OPCODE_COMPARE_LT
        rv = this._compareLT(left, right)

      elif opcode is AST_OPCODE_COMPARE_LE
        rv = this._compareLE(left, right)

      elif opcode is AST_OPCODE_ADD
        rv = this._add(left, right)

      elif opcode is AST_OPCODE_SUB
        rv = this._sub(left, right)

      elif opcode is AST_OPCODE_MUL
        rv = this._mul(left, right)

      elif opcode is AST_OPCODE_DIV
        rv = this._div(left, right)

      elif opcode is AST_OPCODE_IDIV
        rv = this._idiv(left, right)

      else
        rv = -1
      endif

    else
      # TODO: Handle terminal nodes.
      rv = -1
      die('error: unexpected rvalue node ' + str(opcode) + ' ' + str(value))
    endif

    # TODO: Return symbolInfo instead of symbol name?
    if typeof(rv) is 'string'
      astDataType = AST_GetDataType(ast)
      mirDataType = AST_ConvertDataTypeToMIR(astDataType)
      this.symbolTable.assignMirType(rv, mirDataType)
    endif
  endmethod

  method _evaluateNodeCall(ast) -> rv
    rv          = false
    funcName    = ast['value']
    children    = ast['children']
    childrenCnt = ast['childrenCnt']

    # TODO: Handle in parser?
    if funcName is 'super'
      this._loadVariable('this')
    endif

    # Evaluate parameters.
    params    = []
    paramsCnt = childrenCnt

    for idx in 0 .. childrenCnt
      params[idx] = this._evaluateNode(children[idx])
    endfor

    if funcName is 'typeof'
      # Built-in typeof.
      this._verifyNumberOfParameters('built-in typeof', 1, paramsCnt)
      rv = this._typeof(params[0])

    elif funcName is 'print'
      # Built-in print function.
      this._callPrint(params, paramsCnt)

    elif funcName is 'super'
      this._callSuper(params, paramsCnt)

    elif funcName is 'len'
      this._verifyNumberOfParameters('built-in len', 1, paramsCnt)
      rv = this._callLen(params[0])

    elif funcName is 'str'
      this._verifyNumberOfParameters('built-in str', 1, paramsCnt)
      rv = this._callStr(params[0])

    elif funcName is 'strescape'
      this._verifyNumberOfParameters('built-in strescape', 1, paramsCnt)
      rv = this._callStrEscape(params[0])

    elif funcName is 'exit'
      this._verifyNumberOfParameters('built-in exit', 0, paramsCnt)
      this._callExit()

    elif funcName is 'die'
      this._verifyNumberOfParameters('built-in die', 1, paramsCnt)
      this._callDie(params[0])

    elif funcName is '__mold_createObject'
      this._verifyNumberOfParameters('built-in __mold_createObject', 1, paramsCnt)
      rv = this._callMoldCreateObject(params[0])

    elif funcName is '__mold_getClassName'
      this._verifyNumberOfParameters('built-in __mold_getClassName', 1, paramsCnt)
      rv = this._callMoldGetClassName(params[0])

    elif funcName is '__mold_warning'
      this._verifyNumberOfParameters('built-in __mold_warning', 1, paramsCnt)
      this._callMoldWarning(params[0])

    elif funcName is '__mold_printToStdOutput'
      this._verifyNumberOfParameters('built-in __mold_printToStdOutput', 1, paramsCnt)
      this._callMoldPrintToStdOut(params[0])

    elif (funcName is '__mold_parseFile') or (funcName is 'moldParseFile')
      this._verifyNumberOfParameters('built-in __mold_parseFile', 1, paramsCnt)
      rv = this._callMoldParseFile(params[0])

    else
      # Generic foo(x,y,z...) call.
      funcEntry = this.symbolTable.lookupFunction(funcName, childrenCnt)
      funcProto = funcEntry['proto']
      rv        = this._call(funcProto, params, paramsCnt)
    endif
  endmethod

  method _evaluateNodeInvokeMethod(ast) -> rv
    methodName  = ast['value']
    children    = ast['children']
    childrenCnt = ast['childrenCnt']

    # Evaluate this and try to resolve static className
    # (compilation time) if possible.
    thiz = this._evaluateNode(children[0])

    # Evaluate parameters.
    params    = []
    params[0] = thiz
    paramsCnt = childrenCnt

    for idx in 1 .. childrenCnt
      params[idx] = this._evaluateNode(children[idx])
    endfor

    # Call method.
    # TODO: Change to static call if possible.
    rv = this._invokeMethod(methodName, params, paramsCnt)
  endmethod

  method _evaluateNodeLazyBoolAnd(leftAst, rightAst) -> rv
    rv = false
    this._error('_evaluateNodeBoolAnd() not implemented')
  endmethod

  method _evaluateNodeLazyBoolOr(leftAst, rightAst) -> rv
    rv = false
    this._error('_evaluateNodeBoolOr() not implemented')
  endmethod

  method _executeNodeFor(iteratorName, valueStart, valueEnd, valueStep, bodyAst)
    this._error('_executeNodeFor() not implemented')
  endmethod

  method _executeNodeWhile(condAst, bodyAst)
    this._error('_executeNodeWhile() not implemented')
  endmethod

  method _executeNodeIf(cond, codeIfTrue, codeIfFalse)
    this._error('_executeNodeIf() not implemented')
  endmethod

  method _executeNodeSwitch(node)
    this._error('switch not implemented')
  endmethod

  method _executeNode(ast)
    global AST_OPCODE_PROGRAM, AST_OPCODE_BLOCK, AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_FOR_VALUES_RANGE, AST_OPCODE_WHILE
    global AST_OPCODE_CALL, AST_OPCODE_FUNCTION, AST_OPCODE_IF, AST_OPCODE_SWITCH
    global AST_OPCODE_VARIABLE, AST_OPCODE_REFERENCE
    global AST_OPCODE_CLASS, AST_OPCODE_CLASS_METHOD, AST_OPCODE_INVOKE_METHOD
    global AST_OPCODE_NOP, AST_DATA_STRING, AST_OPCODE_ADD
    global SYMBOL_KIND_VAR_RETVAL
    global AST_OPCODE_FOR_VALUES
    global AST_OPCODE_FOR_KEYS
    global AST_OPCODE_FOR_KEYS_VALUES
    global AST_OPCODE_FOR_INDEXES
    global AST_OPCODE_FOR_INDEXES_VALUES

    # Fetch opcode.
    opcode      = ast['opcode']
    value       = ast['value']
    children    = ast['children']
    childrenCnt = ast['childrenCnt']

    this._debug('_executeNode: ' + str(opcode) + ', ' + str(value))

    #
    # DEBUG ONLY
    #

    # print ast.id, opcode, value

    if ast.isTranslated is true
      die('error: node #' + str(ast.id) + ' is already translated')
    endif

    if childrenCnt isnt len(ast.children)
      die('error: inconsistent childrenCnt (' + str(childrenCnt) + ') vs len(children) (' + str(len(ast.children)) + ') at node #' + str(ast.id))
    endif

    ast.isTranslated = true

    #
    # END OF DEBUG ONLY
    #

    # Dispatch opcode.
    if opcode is AST_OPCODE_PROGRAM
      funcProto = {
        'name': 'start',
        'params': [],
        'paramsCnt': 0,
        'children': ast.children,
        'childrenCnt': ast.childrenCnt
      }
      this.symbolTable = ast.symbolTable
      this.currentFunctionProto = funcProto
      this._emitFunctionBody('start', funcProto)
      this.currentFunctionProto = false

    elif opcode is AST_OPCODE_BLOCK
      oldSymbolTable   = this.symbolTable

      this._enterScope(ast)

      for idx in 0 .. childrenCnt
        this._executeNode(children[idx])
      endfor

      this._leaveScope()

      this.symbolTable = oldSymbolTable

    elif opcode is AST_OPCODE_DECLARE_OR_ASSIGN
      # x = y
      lval = children[0]

      if lval['opcode'] is AST_OPCODE_VARIABLE
        # x = y
        lval = lval['value']
        rval = this._evaluateNode(children[1])
        this._assign(lval, rval)

        # Special case: x = x + y
        if (children[1].opcode is AST_OPCODE_ADD) and (lval is children[1].children[0].value)
          symbolInfo = this.symbolTable.lookup(lval)
          symbolInfo.duplicateOnFirstWrite = true
        endif

      elif lval['opcode'] is AST_OPCODE_REFERENCE
        # x[i] = y
        boxNode   = lval['children'][0]
        indexNode = lval['children'][1]
        valueNode = children[1]

        # TODO: Handle non-variant index and value.
        box   = this._evaluateNode(boxNode)
        index = this._evaluateNode(indexNode)
        rval  = this._evaluateNode(valueNode)

        this._storeAtIndexAndDrop(box, index, rval)

      else
        die('error: unexpected lvalue node ' + str(lval['opcode']) + ' ' + str(lval['value']))
      endif

    elif opcode is AST_OPCODE_FOR_VALUES_RANGE
      # for x in startIdx .. endIdx
      # endfor
      #
      # for x in startIdx .. endIdx step y
      # endfor

      iteratorName = children[0]['value']
      valueStep  = this._evaluateNode(children[3])
      valueEnd   = this._evaluateNode(children[2])
      valueStart = this._evaluateNode(children[1])
      bodyAst    = children[4]

      # TODO: Clean up this mess?
      oldSymbolTable   = this.symbolTable
      this.symbolTable = bodyAst.symbolTable

      # Is it really needed?
      astDataType = AST_GetDataType(children[0])
      mirDataType = AST_ConvertDataTypeToMIR(astDataType)
      this.symbolTable.assignMirType(iteratorName, mirDataType)

      this._executeNodeFor(iteratorName, valueStart, valueEnd, valueStep, bodyAst)
      this.symbolTable = oldSymbolTable

    elif opcode is AST_OPCODE_FOR_VALUES
      # for values v in box
      iteratorValue = children[0]['value']
      box           = this._evaluateNode(children[1])
      loopBodyNode  = children[2]

      # Enter loop scope.
      # TODO: Use null for unused iterator?
      this._enterScope(loopBodyNode)
      this._executeNodeForEach(-1, iteratorValue, box, loopBodyNode)
      this._leaveScope()

    elif opcode is AST_OPCODE_FOR_KEYS
      # for values v in box
      iteratorKey  = children[0]['value']
      box          = this._evaluateNode(children[1])
      loopBodyNode = children[2]

      # Enter loop scope.
      # TODO: Use null for unused iterator?
      this._enterScope(loopBodyNode)
      this._executeNodeForEach(iteratorKey, -1, box, loopBodyNode)
      this._leaveScope()

    elif opcode is AST_OPCODE_FOR_KEYS_VALUES
      # for keys k values v in box
      iteratorKey   = children[0]['value']
      iteratorValue = children[1]['value']
      box           = this._evaluateNode(children[2])
      loopBodyNode  = children[3]

      # Enter loop scope.
      # TODO: Use null for unused iterator?
      this._enterScope(loopBodyNode)
      this._executeNodeForEach(iteratorKey, iteratorValue, box, loopBodyNode)
      this._leaveScope()

    elif opcode is AST_OPCODE_WHILE
      # while (cond)
      #   body...
      # endwhile
      condAst = children[0]
      bodyAst = children[1]

      # TODO: Clean up this mess?
      oldSymbolTable   = this.symbolTable
      this.symbolTable = bodyAst.symbolTable
      this._executeNodeWhile(condAst, bodyAst)
      this.symbolTable = oldSymbolTable

    elif opcode is AST_OPCODE_IF
      cond        = this._evaluateNode(children[0])
      codeIfTrue  = children[1]
      codeIfFalse = children[2]
      this._executeNodeIf(cond, codeIfTrue, codeIfFalse)

    elif opcode is AST_OPCODE_FUNCTION
      # Do nothing.

    elif opcode is AST_OPCODE_CALL
      if value is 'global'
        # Built-in global directive.

        for idx in 0 .. childrenCnt
          paramName = children[idx]['value']
          if typeof(paramName) isnt 'string'
            this._error('global directive expects string, but ' + typeof(paramName) + ' passed')
          else
            this._importGlobal(paramName)
          endif
        endfor

      else
        this._evaluateNodeCall(ast)
        this._dropRetVal()
      endif

    elif opcode is AST_OPCODE_SWITCH
      this._executeNodeSwitch(ast)

    elif opcode is AST_OPCODE_CLASS
      # Do nothing.

    elif opcode is AST_OPCODE_INVOKE_METHOD
      this._evaluateNodeInvokeMethod(ast)
      this._dropRetVal()

    elif opcode is AST_OPCODE_NOP
      # Do nothing.

    else
      # Fatal - unknown node. Should never happen in production.
      this._error('unknown opcode ' + str(opcode))
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                                Public API
  # ----------------------------------------------------------------------------

  method run(ast)
    this._executeNode(ast)
  endmethod
endclass
