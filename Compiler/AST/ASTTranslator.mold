################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'

class ASTTranslator

  # ----------------------------------------------------------------------------
  #                                Init code
  # ----------------------------------------------------------------------------

  method constructor(app)
    this.app = app

    # TODO: Use null?
    this.currentClassProto    = false
    this.currentFunctionProto = false
    this.symbolTableForTemps  = false
  endmethod

  # ----------------------------------------------------------------------------
  #                             Error handlers
  # ----------------------------------------------------------------------------

  method _debug(msg)
    if false
      print '[ ASTTranslator ]', msg
    endif
  endmethod

  method _error(msg)
    this.app.logError(msg)
  endmethod

  # ----------------------------------------------------------------------------
  #                            Built-in functions
  # ----------------------------------------------------------------------------

  method _loadArgsVector(rv)
    this._error('_loadArgsVector not implemented')
  endmethod

  method _loadArgsCount(rv)
    this._error('_callLoadArgsCount not implemented')
  endmethod

  method _syscall(rv, id, params, paramsCnt)
    this._error('_syscall() not implemented')
  endmethod

  # ----------------------------------------------------------------------------
  #            Methods, which should be overloaded in derived class
  # ----------------------------------------------------------------------------

  method _loadArray(rv)
    this._error('_loadArray() not implemented')
  endmethod

  method _loadMap(rv)
    this._error('_loadMap() not implemented')
  endmethod

  method _loadImm(rv, value)
    this._error('_loadImm() not implemented')
  endmethod

  method _loadImmAsVariant(rv, value)
    # TODO: Review is it really needed?
    this._error('_loadImmAsVariant() not implemented')
  endmethod

  method _loadVariable(name)
    this._error('_loadVariable() not implemented')
  endmethod

  method _call(rv, funcProto, params, paramsCnt)
    this._error('_call() not implemented')
  endmethod

  method _invokeMethod(methodName, params, paramsCnt)
    this._error('_invokeMethod() not implemented')
  endmethod

  method _callPrint(params, paramsCnt)
    this._error('_callPrint() not implemented')
  endmethod

  method _neg(rv, value)
    this._error('_neg() not implemented')
  endmethod

  method _add(rv, x, y)
    this._error('_add() not implemented')
  endmethod

  method _sub(rv, x, y)
    this._error('_sub() not implemented')
  endmethod

  method _mul(rv, x, y)
    this._error('_mul() not implemented')
  endmethod

  method _div(rv, x, y)
    this._error('_div() not implemented')
  endmethod

  method _idiv(rv, x, y)
    this._error('_idiv() not implemented')
  endmethod

  method _compareEQ(rv, x, y)
    this._error('_compareEQ() not implemented')
  endmethod

  method _compareNEQ(rv, x, y)
    this._error('_compareNEQ() not implemented')
  endmethod

  method _compareLT(rv, x, y)
    this._error('_compareLT() not implemented')
  endmethod

  method _compareLE(rv, x, y)
    this._error('_compareLE() not implemented')
  endmethod

  method _compareGT(rv, x, y)
    this._error('_compareGT() not implemented')
  endmethod

  method _compareGE(rv, x, y)
    this._error('_compareGE() not implemented')
  endmethod

  method _boolAnd(rv, x, y)
    this._error('_boolAnd() not implemented')
  endmethod

  method _boolOr(rv, x, y)
    this._error('_boolOr() not implemented')
  endmethod

  method _loadFromIndex(rv, box, idx)
    this._error('_loadFromIndex() not implemented')
  endmethod

  method _loadFromKey(rv, box, key)
    this._error('_loadFromKey() not implemented')
  endmethod

  method _storeAtIndex(box, idx, value)
    this._error('_storeAtIndex() not implemented')
  endmethod

  method _storeAtKey(box, key, value)
    this._error('_storeAtKey() not implemented')
  endmethod

  method _storeAtIndexAndDrop(rv, idx, value)
    this._error('_storeAtIndexAndDrop() not implemented')
  endmethod

  method _storeAtKeyAndDrop(rv, key, value)
    this._error('_storeAtKeyAndDrop() not implemented')
  endmethod

  method _createObject(rv, classProto)
    this._error('_createObject() not implemented')
  endmethod

  method _convert(dst, src, srcType, dstType)
    this._error('_convert() is not implemented')
  endmethod

  method _dropRetVal()
  endmethod

  method _declareFunction(funcName, funcProto)
  endmethod

  method _declareClass(className, classProto)
  endmethod

  method _emitFunctionBody(funcName, funcProto)
  endmethod

  method _declareExternalFunction(funcName, funcProto)
    this.symbolTable.insertFunction(funcName, funcProto)
  endmethod

  # ----------------------------------------------------------------------------
  #                         Internal helpers (private)
  # ----------------------------------------------------------------------------

  method _getTempVar(wantedType) -> rv
    # TODO: Clean up this mess.
    rv = this.symbolTableForTemps.getTempVarForReadAndWrite(wantedType)
  endmethod

  method _releaseTempVar(name)
    this.symbolTableForTemps.releaseTempVar(name)
  endmethod

  method _enterScope(ast)
    this.symbolTable = ast.symbolTable
  endmethod

  method _leaveScope()
    childTable = this.symbolTable
    this.symbolTable = this.symbolTable.parent

    # TODO: Remove it. We temporary merge child symbols to keep all proc vars
    # in one flat frame.
    symbolsCurrent = this.symbolTable.symbols
    symbolsChild   = childTable.symbols

    for values item in symbolsChild
      #if item.readHits + item.writeHits > 0
        id = item.name

        if symbolsCurrent{id} is undefined
          symbolsCurrent{id} = item
        else
          # TODO: Accumulate hits?
          # TODO: Implement inner frames.
          if symbolsCurrent{id}.astType isnt item.astType
            die('error: type conflict for variable "' + item.name + '"')
          endif
        endif
      #endif
    endfor
  endmethod

  method _verifyNumberOfParameters(name, paramsExpectedCnt, paramsPassedCnt)
    if paramsPassedCnt isnt paramsExpectedCnt
      die('error: ' + name + ' function requires exactly ' + str(paramsExpectedCnt) + ' parameter(s), but ' + str(paramsPassedCnt) + ' were passed')
    endif
  endmethod

  method _emitFunction(ast)
    global AST_OPCODE_CLASS_METHOD

    funcProto = ast
    funcName  = ast.fullName
    children  = ast.children

    if children is defined
      this.app.logDebug('Emitting function ' + funcName + '...')

      oldSymbolTable   = this.symbolTable
      this.symbolTable = ast.children[0].symbolTable
      this.symbolTableForTemps = this.symbolTable

      if funcProto.className is defined
        this.currentClassProto = oldSymbolTable.lookupClass(funcProto.className).proto
      endif

      this.currentFunctionProto = funcProto

      this._declareFunction(funcName, funcProto)
      this._emitFunctionBody(funcName, funcProto)

      this.currentFunctionProto = false
      this.currentClassProto    = false

      this.symbolTable = oldSymbolTable
      this.symbolTableForTemps = false

      this.app.logDebug('Function emited: ' + funcName)
    endif
  endmethod

  method _emitGlobals()
    global SYMBOL_KIND_FUNCTION
    global SYMBOL_KIND_CLASS
    global SYMBOL_KIND_METHOD

    this._debug('Going to emit globals')

    symbols = this.symbolTable.exportSymbols()

    # TODO: Clean up this mess.
    arrayOfSymbols = []
    for values oneSymbol in symbols
      arrayOfSymbols[@afterlast] = oneSymbol
    endfor

    # TODO: symbolInfo is undefined after function emmited
    # when compiled with if-to-switch optimization.
    #for values symbolInfo in symbols
    for values symbolInfo in arrayOfSymbols
      symbolKind = symbolInfo.kind

      if symbolKind is SYMBOL_KIND_FUNCTION
        this._emitFunction(symbolInfo.proto)

      elif symbolKind is SYMBOL_KIND_CLASS
        this._declareClass(symbolInfo.name, symbolInfo.proto)
      endif
    endfor

    this._debug('Globals emmited')
  endmethod

  method _callSuper(rv, params, unusedParamsCnt)
    methodProto = this.currentFunctionProto
    classProto  = this.currentClassProto

    if (methodProto is false) or (methodProto.fullName is undefined)
      this._error('super called outside of class')

    elif methodProto.name isnt 'constructor'
      this._error('super called outside of constructor')

    elif methodProto.name isnt 'constructor'
      this._error('super called outside of constructor')

    elif classProto.baseName is undefined
      this._error('class ' + classProto.name + ' has no base class')

    elif methodProto.baseMethod is undefined
      this._error('class ' + classProto.baseName + ' has no constructor declared')

    elif len(methodProto.params) isnt len(params)
      this._error('base constructor requires exactly ' + str(len(methodProto.params)) + ' parameters, but ' + str(len(params)) + ' were passed')

    else
      # Base constructor exists, inject this reference to call list.
      newParams = ['__mold_this']

      for indexes paramIdx values oneParam in params
        newParams[paramIdx + 1] = oneParam
      endfor

      # TODO: Remove this fix.
      methodProto.isConstructor = true

      this._call(rv, methodProto.baseMethod, newParams, len(newParams))
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                         Function and class protos
  # ----------------------------------------------------------------------------

  method _getClassProto(className) -> rv
    rv = this.symbolTable.lookupClass(className).proto
  endmethod

  method _getMethodProto(className, methodName, paramsCnt) -> rv
    rv = false
    die('ASTTranslator::_getMethodProto() not implemented')
  endmethod

  # ----------------------------------------------------------------------------
  #                             Symbols (private)
  # ----------------------------------------------------------------------------

  method _isset(name) -> rv
    rv = this.symbolTable.isset(name)
  endmethod

  method _importGlobal(name)
    this.symbolTable.importGlobal(name)
  endmethod

  method _declareVariableIfNotSet(name)
    if this._isset(name) is false
      this._declareVariable(name)
    endif
  endmethod

  method _declareAndAssign(name, value)
    #this._declareVariable(name)
    this._assign(name, value)
  endmethod

  method _declareVariable(name)
    die('ASTTranslator::_declareVariable() not implemented')
  endmethod

  method _assign(name, value)
    die('_assign() not implemented')
  endmethod

  # ----------------------------------------------------------------------------
  #                     Internal implementation (private)
  # ----------------------------------------------------------------------------

  method _evaluateNode(ast) -> rv
    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_REFERENCE_BY_INDEX
    global AST_OPCODE_REFERENCE_BY_KEY
    global AST_OPCODE_CALL
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_VCALL
    global AST_OPCODE_TYPE_CAST

    opcode      = ast.opcode
    value       = ast.value
    children    = ast.children
    childrenCnt = len(children)

    this._debug('_evaluateNode: ' + str(opcode) + ', ' + str(value))

    # TODO: Better way to pass source position to error handler.
    this.app.setLogContext(ast)

    #
    # DEBUG ONLY
    #

    if (ast.isTranslated is true) and (AST_IsImmOrVar(ast) is false)
      die('error: node #' + str(ast.id) + ' is already translated (eval)')
    endif

    ast.isTranslated = true

    #
    # END OF DEBUG ONLY
    #

    if opcode is AST_OPCODE_VARIABLE
      # Load variable.
      # We don't need to create extra temp ("scratch") variable.
      # Just read it directly.
      rv = value

      if value is 'argv'
        # Built-in access to command line parametrs.
        this._loadArgsVector()

        if this.symbolTable.procLevel > 0
          this.symbolTable.importGlobal('argv')
        endif

      elif value is 'argc'
        # Built-in access to command line parametrs.
        this._loadArgsCount()

        if this.symbolTable.procLevel > 0
          this.symbolTable.importGlobal('argc')
        endif

      else
        # Treat as ordinary variable.
        this._loadVariable(value)
      endif

    elif opcode is AST_OPCODE_TYPE_CAST
      srcNode = children[0]
      srcType = AST_GetDataType(srcNode)
      dstType = AST_GetDataType(ast)

      src = this._evaluateNode(srcNode)

      if srcType is dstType
        # No conversion needed. Use source value directly.
        rv = src
      else
        # This code is needed only in MIR1 flow.
        dstTypeMir = AST_ConvertDataTypeToMIR(dstType)
        srcTypeMir = AST_ConvertDataTypeToMIR(srcType)

        if dstTypeMir is srcTypeMir
          # Two AST types, which map to the same machine type.
          # We can reuse the same variable as is.
          rv = src

        else
          # Type mismatch. Perform conversion into another variable.
          # TODO: Clean up this mess.
          rv = this._getTempVar(dstTypeMir)
          this.symbolTable.assignMirType(rv, dstTypeMir)
          this._releaseTempVar(src)
          this._convert(rv, src, srcType, dstType)
        endif
      endif

    else
      # TODO: Clean up this mess.
      # This code is needed only in MIR1 flow.
      astDataType = AST_GetDataType(ast)
      mirDataType = AST_ConvertDataTypeToMIR(astDataType)
      rv = this._getTempVar(mirDataType)
      this.symbolTable.assignMirType(rv, mirDataType)

      # Assign temp var to current node ("scratch").
      ast.tempVar = rv

      if opcode is AST_DATA_ARRAY
        if typeof(value) is 'array'
          this._loadImm(rv, value)

        else
          this._loadArray(rv)

          if childrenCnt > 0
            # TODO: Handle non-variant indexes and values.
            key            = this._getTempVar('variant')
            valueAsVariant = this._getTempVar('variant')

            for indexes childIdx values childNode in children
              this._loadImmAsVariant(key, childIdx)
              value = this._evaluateNode(childNode)
              this._convert(valueAsVariant, value, AST_GetDataType(childNode), -1)
              this._storeAtIndex(rv, key, valueAsVariant)

              # TODO: Is it really needed?
              this._releaseTempVar(value)
            endfor

            # TODO: Is it really needed?
            this._releaseTempVar(key)
            this._releaseTempVar(valueAsVariant)
          endif
        endif

      elif opcode is AST_DATA_MAP
        this._loadMap(rv)

        if childrenCnt > 0
          # TODO: Handle non-variant values.
          valueAsVariant = this._getTempVar('variant')

          for idx in 0 .. childrenCnt step 2
            key   = this._evaluateNode(children[idx])
            value = this._evaluateNode(children[idx + 1])
            this._convert(valueAsVariant, value, AST_GetDataType(children[idx + 1]), -1)
            this._storeAtKey(rv, key, valueAsVariant)

            # TODO: Is it really needed?
            this._releaseTempVar(key)
            this._releaseTempVar(value)
          endfor

          # TODO: Is it really needed?
          this._releaseTempVar(valueAsVariant)
        endif

      elif (opcode < AST_OPCODE_PROGRAM)
        # Imm data node, just return value.
        this._loadImm(rv, value)

      elif opcode is AST_OPCODE_CALL
        # foo(x,y,z...).
        this._evaluateNodeCall(rv, ast)

      elif opcode is AST_OPCODE_VCALL
        # obj.foo(x, y, z, ...)
        this._evaluateNodeInvokeMethod(rv, ast)

      elif opcode is AST_OPCODE_NEG
        # TODO: Simplify it.
        x = this._evaluateNode(children[0])
        this._releaseTempVar(x)
        this._neg(rv, x)

      elif opcode is AST_OPCODE_BOOL_AND
        # Lazy 'and' operator.
        this._evaluateNodeLazyBoolAnd(rv, children[0], children[1])

      elif opcode is AST_OPCODE_BOOL_OR
        # Lazy 'or' operator.
        this._evaluateNodeLazyBoolOr(rv, children[0], children[1])

      elif opcode is AST_OPCODE_CALL_NEW
        classProto = this._getClassProto(value)
        this._createObject(rv, classProto)

        # Call constructor if any.
        methodProto = classProto.vtable.constructor

        if methodProto is defined
          params    = [rv]
          paramsCnt = len(methodProto.params) + 1

          this._verifyNumberOfParameters('constructor', paramsCnt, childrenCnt)

          for idx in 1 .. childrenCnt
            params[idx] = this._evaluateNode(children[idx])
          endfor

          # TODO: Remove this fix.
          methodProto.isConstructor = true

          unusedRv = this._getTempVar('variant')
          this._call(unusedRv, methodProto, params, paramsCnt)
          this._releaseTempVar(unusedRv)
        endif

      elif childrenCnt is 2
        # x OP y
        left  = this._evaluateNode(children[0])
        right = this._evaluateNode(children[1])

        # Release temp var used to store argument nodes.
        this._releaseTempVar(left)
        this._releaseTempVar(right)

        if opcode is AST_OPCODE_REFERENCE_BY_INDEX
          # x[idx]
          this._loadFromIndex(rv, left, right)

        elif opcode is AST_OPCODE_REFERENCE_BY_KEY
          # x{key}
          this._loadFromKey(rv, left, right)

        elif opcode is AST_OPCODE_COMPARE_EQ
          this._compareEQ(rv, left, right)

        elif opcode is AST_OPCODE_COMPARE_NEQ
          this._compareNEQ(rv, left, right)

        elif opcode is AST_OPCODE_COMPARE_GT
          this._compareGT(rv, left, right)

        elif opcode is AST_OPCODE_COMPARE_GE
          this._compareGE(rv, left, right)

        elif opcode is AST_OPCODE_COMPARE_LT
          this._compareLT(rv, left, right)

        elif opcode is AST_OPCODE_COMPARE_LE
          this._compareLE(rv, left, right)

        elif opcode is AST_OPCODE_ADD
          this._add(rv, left, right)

        elif opcode is AST_OPCODE_SUB
          this._sub(rv, left, right)

        elif opcode is AST_OPCODE_MUL
          this._mul(rv, left, right)

        elif opcode is AST_OPCODE_DIV
          this._div(rv, left, right)

        elif opcode is AST_OPCODE_IDIV
          this._idiv(rv, left, right)
        endif

      else
        die('error: unexpected rvalue node ' + str(opcode) + ' ' + str(value))
      endif
    endif

    # TODO: Review it?
    # TODO: Return symbolInfo instead of symbol name?
    #if typeof(rv) is 'string'
    #  astDataType = AST_GetDataType(ast)
    #  mirDataType = AST_ConvertDataTypeToMIR(astDataType)
    #  this.symbolTable.assignMirType(rv, mirDataType)
    #endif
  endmethod

  method _evaluateNodeCall(rv, ast)
    funcName      = ast.value
    children      = ast.children
    childrenCnt   = len(children)

    # TODO: Handle in parser?
    # Is it really needed?
    if funcName is 'super'
      this._loadVariable('this')
    endif

    # Evaluate parameters.
    params    = []
    paramsCnt = childrenCnt

    for idx in 0 .. childrenCnt
      params[idx] = this._evaluateNode(children[idx])
    endfor

    # TODO: Simplify it.
    for values oneParam in params
      this._releaseTempVar(oneParam)
    endfor

    if funcName is 'print'
      # Built-in print function.
      this._callPrint(params, paramsCnt)

    elif funcName is 'super'
      this._callSuper(rv, params, paramsCnt)

    elif (funcName is '__mold_syscall')
      this._syscall(rv, ast.sysCallId, params, paramsCnt)

    else
      # Generic foo(x,y,z...) call.
      funcEntry = this.symbolTable.lookupFunction(funcName, childrenCnt)
      funcProto = funcEntry.proto
      this._call(rv, funcProto, params, paramsCnt)
    endif
  endmethod

  method _evaluateNodeInvokeMethod(rv, ast)
    methodName  = ast.value
    children    = ast.children
    childrenCnt = len(children)

    # Evaluate this and try to resolve static className
    # (compilation time) if possible.
    thiz = this._evaluateNode(children[0])

    # Evaluate parameters.
    params    = []
    params[0] = thiz
    paramsCnt = childrenCnt

    for idx in 1 .. childrenCnt
      params[idx] = this._evaluateNode(children[idx])
    endfor

    # Virtual method call.
    this._invokeMethod(rv, methodName, params, paramsCnt)

    # TODO: Simplify it.
    for values oneParam in params
      this._releaseTempVar(oneParam)
    endfor
  endmethod

  method _evaluateNodeLazyBoolAnd(rv, leftAst, rightAst) -> rv
    this._error('_evaluateNodeBoolAnd() not implemented')
  endmethod

  method _evaluateNodeLazyBoolOr(rv, leftAst, rightAst) -> rv
    this._error('_evaluateNodeBoolOr() not implemented')
  endmethod

  method _executeNodeFor(iteratorName, valueStart, valueEnd, valueStep, bodyAst)
    this._error('_executeNodeFor() not implemented')
  endmethod

  method _executeNodeWhile(condAst, bodyAst)
    this._error('_executeNodeWhile() not implemented')
  endmethod

  method _executeNodeIf(cond, codeIfTrue, codeIfFalse)
    this._error('_executeNodeIf() not implemented')
  endmethod

  method _executeNodeSwitch(node)
    this._error('switch not implemented')
  endmethod

  method _executeNode(ast)
    global AST_OPCODE_PROGRAM, AST_OPCODE_BLOCK, AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_FOR_VALUES_RANGE, AST_OPCODE_WHILE
    global AST_OPCODE_CALL, AST_OPCODE_FUNCTION, AST_OPCODE_IF, AST_OPCODE_SWITCH
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_REFERENCE_BY_INDEX
    global AST_OPCODE_REFERENCE_BY_KEY
    global AST_OPCODE_CLASS, AST_OPCODE_CLASS_METHOD, AST_OPCODE_VCALL
    global AST_OPCODE_NOP, AST_DATA_STRING, AST_OPCODE_ADD
    global SYMBOL_KIND_VAR_RETVAL
    global AST_OPCODE_FOR_VALUES
    global AST_OPCODE_FOR_KEYS
    global AST_OPCODE_FOR_KEYS_VALUES
    global AST_OPCODE_FOR_INDEXES
    global AST_OPCODE_FOR_INDEXES_VALUES

    # TODO: Better way to pass source position to error handler.
    this.app.setLogContext(ast)

    # Fetch opcode.
    opcode      = ast.opcode
    value       = ast.value
    children    = ast.children
    childrenCnt = len(children)

    this._debug('_executeNode: ' + str(opcode) + ', ' + str(value))

    #
    # DEBUG ONLY
    #

    # print ast.id, opcode, value

    if ast.isTranslated is true
      die('error: node #' + str(ast.id) + ' is already translated')
    endif

    ast.isTranslated = true

    #
    # END OF DEBUG ONLY
    #

    # Dispatch opcode.
    if opcode is AST_OPCODE_PROGRAM
      funcProto = {
        'name': 'start',
        'params': [],
        'children': ast.children
      }

      this.symbolTable = ast.symbolTable
      this.currentFunctionProto = funcProto
      this.symbolTableForTemps = ast.children[0].symbolTable
      this._emitFunctionBody('start', funcProto)
      this.currentFunctionProto = false

    elif opcode is AST_OPCODE_BLOCK
      oldSymbolTable   = this.symbolTable

      this._enterScope(ast)

      for idx in 0 .. childrenCnt
        this._executeNode(children[idx])
      endfor

      this._leaveScope()

      this.symbolTable = oldSymbolTable

    elif opcode is AST_OPCODE_DECLARE_OR_ASSIGN
      # x = y
      lval = children[0]

      if lval.opcode is AST_OPCODE_VARIABLE
        # x = y
        lval = lval.value
        rval = this._evaluateNode(children[1])
        this._assign(lval, rval)

        # Special case: x = x + y
        if (children[1].opcode is AST_OPCODE_ADD) and (lval is children[1].children[0].value)
          symbolInfo = this.symbolTable.lookup(lval)
          symbolInfo.duplicateOnFirstWrite = true
        endif

        # Simplify it.
        this._releaseTempVar(rval)

      elif ((lval.opcode is AST_OPCODE_REFERENCE_BY_INDEX) or
            (lval.opcode is AST_OPCODE_REFERENCE_BY_KEY))
        # x[i] = y
        boxNode   = lval.children[0]
        indexNode = lval.children[1]
        valueNode = children[1]

        # TODO: Handle non-variant index and value.
        box      = this._evaluateNode(boxNode)
        idxOrKey = this._evaluateNode(indexNode)
        rval     = this._evaluateNode(valueNode)

        if lval.opcode is AST_OPCODE_REFERENCE_BY_INDEX
          this._storeAtIndexAndDrop(box, idxOrKey, rval)
        else
          this._storeAtKeyAndDrop(box, idxOrKey, rval)
        endif

        # TODO: Simplify it.
        this._releaseTempVar(box)
        this._releaseTempVar(idxOrKey)
        this._releaseTempVar(rval)

      else
        die('error: unexpected lvalue node ' + str(lval.opcode) + ' ' + str(lval.value))
      endif

    elif opcode is AST_OPCODE_FOR_VALUES_RANGE
      # for x in startIdx .. endIdx
      # endfor
      #
      # for x in startIdx .. endIdx step y
      # endfor

      iteratorName = children[0].value
      valueStep  = this._evaluateNode(children[3])
      valueEnd   = this._evaluateNode(children[2])
      valueStart = this._evaluateNode(children[1])
      bodyAst    = children[4]

      this._enterScope(bodyAst)

      # Is it really needed?
      astDataType = AST_GetDataType(children[0])
      mirDataType = AST_ConvertDataTypeToMIR(astDataType)
      this.symbolTable.assignMirType(iteratorName, mirDataType)

      this._executeNodeFor(iteratorName, valueStart, valueEnd, valueStep, bodyAst)
      this._leaveScope()

      # TODO: Simplify it.
      this._releaseTempVar(valueStep)
      this._releaseTempVar(valueEnd)
      this._releaseTempVar(valueStart)

    elif opcode is AST_OPCODE_FOR_VALUES
      # for values v in box
      iteratorValue = children[0].value
      box           = this._evaluateNode(children[1])
      loopBodyNode  = children[2]

      # Enter loop scope.
      # TODO: Use null for unused iterator?
      this._enterScope(loopBodyNode)
      this._executeNodeForEach(-1, iteratorValue, box, loopBodyNode)
      this._leaveScope()

      # TODO: Simplify it.
      this._releaseTempVar(box)

    elif ((opcode is AST_OPCODE_FOR_KEYS) or
          (opcode is AST_OPCODE_FOR_INDEXES))

      # for values v in box
      iteratorKey  = children[0].value
      box          = this._evaluateNode(children[1])
      loopBodyNode = children[2]

      # Enter loop scope.
      # TODO: Use null for unused iterator?
      this._enterScope(loopBodyNode)
      this._executeNodeForEach(iteratorKey, -1, box, loopBodyNode)
      this._leaveScope()

      # TODO: Simplify it.
      this._releaseTempVar(box)

    elif ((opcode is AST_OPCODE_FOR_KEYS_VALUES) or
          (opcode is AST_OPCODE_FOR_INDEXES_VALUES))

      # for keys k values v in box
      iteratorKey   = children[0].value
      iteratorValue = children[1].value
      box           = this._evaluateNode(children[2])
      loopBodyNode  = children[3]

      # Enter loop scope.
      # TODO: Use null for unused iterator?
      this._enterScope(loopBodyNode)
      this._executeNodeForEach(iteratorKey, iteratorValue, box, loopBodyNode)
      this._leaveScope()

      # TODO: Simplify it.
      this._releaseTempVar(box)

    elif opcode is AST_OPCODE_WHILE
      # while (cond)
      #   body...
      # endwhile
      condAst = children[0]
      bodyAst = children[1]

      # TODO: Clean up this mess?
      oldSymbolTable   = this.symbolTable
      this.symbolTable = bodyAst.symbolTable
      this._executeNodeWhile(condAst, bodyAst)
      this.symbolTable = oldSymbolTable

    elif opcode is AST_OPCODE_IF
      cond        = this._evaluateNode(children[0])
      codeIfTrue  = children[1]
      codeIfFalse = children[2]
      this._executeNodeIf(cond, codeIfTrue, codeIfFalse)

      # TODO: Simplify it.
      this._releaseTempVar(cond)

    elif opcode is AST_OPCODE_FUNCTION
      # Do nothing.

    elif opcode is AST_OPCODE_CALL
      if value is 'global'
        # Built-in global directive.

        for idx in 0 .. childrenCnt
          paramName = children[idx].value
          if typeof(paramName) isnt 'string'
            this._error('global directive expects string, but ' + typeof(paramName) + ' passed')
          else
            this._importGlobal(paramName)
          endif
        endfor

      else
        # TODO: Use null?
        unusedRv = this._getTempVar('variant')
        this._evaluateNodeCall(unusedRv, ast)
        this._dropRetVal()
        this._releaseTempVar(unusedRv)
      endif

    elif opcode is AST_OPCODE_SWITCH
      this._executeNodeSwitch(ast)

    elif opcode is AST_OPCODE_CLASS
      # Do nothing.

    elif opcode is AST_OPCODE_VCALL
      # TODO: Use null?
      unusedRv = this._getTempVar('variant')
      this._evaluateNodeInvokeMethod(unusedRv, ast)
      this._dropRetVal()
      this._releaseTempVar(unusedRv)

    elif opcode is AST_OPCODE_NOP
      # Do nothing.

    else
      # Fatal - unknown node. Should never happen in production.
      this._error('unknown opcode ' + str(opcode))
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                                Public API
  # ----------------------------------------------------------------------------

  method run(ast)
    this._executeNode(ast)
  endmethod
endclass
