################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'AST/ASTUtils.mold'

class ASTOptimizerInline
  method constructor(app)
    this.app              = app
    this.symbolTable      = app.getSymbolTable()
    this.symbolsCollector = app.getAstSymbolsCollector()
  endmethod

  method _debug(msg)
    global DEBUG_AST_OPTIMIZER
    if DEBUG_AST_OPTIMIZER is true
      print '[ ASTOptimizerInline ]', msg
    endif
  endmethod

  method _resolveParamsForInline(symbolTable, namePrefix, node) -> rv
    global AST_OPCODE_VARIABLE
    global SYMBOL_KIND_VAR_PARAM
    global SYMBOL_KIND_VAR_RETVAL
    global SYMBOL_KIND_VAR_LOCAL

    newChildren = []
    children    = node.children
    childrenCnt = node.childrenCnt
    newValue    = node.value
    newOpcode   = node.opcode

    if node.opcode is AST_OPCODE_VARIABLE
      if symbolTable.isset(node.value) is true
        symbolInfo = symbolTable.lookup(node.value)

        if ((symbolInfo.kind is SYMBOL_KIND_VAR_PARAM) or
            (symbolInfo.kind is SYMBOL_KIND_VAR_RETVAL) or
            (symbolInfo.kind is SYMBOL_KIND_VAR_LOCAL))

          newValue = namePrefix + node.value
        endif

      else
        # TODO: Review it.
        # We handle loop iterators here.
        newValue = namePrefix + node.value
      endif

    else
      for idx in 0 .. childrenCnt
        newChildren[idx] = this._resolveParamsForInline(symbolTable, namePrefix, children[idx])
      endfor
    endif

    rv = {
      'id': AST_GetNextId(),
      'opcode': newOpcode,
      'childrenCnt': len(newChildren),
      'children': newChildren,
      'value': newValue
    }
  endmethod

  method _injectParamInit(dst, symbolTable, paramName, paramInitValueNode)
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_VARIABLE

    symbolTable.lookupForWriteOrInsert(paramName)

    dst[len(dst)] = {
      'id': AST_GetNextId(),
      'opcode': AST_OPCODE_DECLARE_OR_ASSIGN,
      'childrenCnt': 2,
      'children': [
        {
          'id': AST_GetNextId(),
          'opcode': AST_OPCODE_VARIABLE,
          'childrenCnt': 0,
          'children': [],
          'value': paramName
        },
        paramInitValueNode
      ]
    }
  endmethod

  method _injectFunctionBody(dst, symbolTable, callNode)
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_VARIABLE
    global AST_OPCODE_NOP
    global AST_OPCODE_BLOCK
    global AST_OPCODE_CALL

    symbolInfo    = callNode.symbolInfo
    functionProto = symbolInfo.proto

    if (functionProto is undefined) or (functionProto.builtIn is true)
      # Built-in function. Don't touch.

    elif functionProto.isRecursive is true
      # Skip recursive call.
      this._debug('Skipped recursive call at node #' + str(callNode.id) + ' (' + callNode.value + ')')

    else
      params     = functionProto.params
      paramsCnt  = functionProto.paramsCnt
      namePrefix = '__inline' + str(callNode.id) + '_'

      bodyNode    = functionProto.children[0]
      children    = bodyNode.children
      childrenCnt = bodyNode.childrenCnt

      symbolInfo.readHits = symbolInfo.readHits - 1

      # Init temporary variable to store return value if needed.
      rvName     = functionProto.rv
      rvFullName = rvName

      if rvName is defined
        rvFullName = namePrefix + rvName
        symbolTable.insertLocal(rvFullName)
      endif

      # Init this parameter if needed.
      if functionProto.classProto is defined
        thizParamNode  = callNode.children[0]
        thizSymbolInfo = thizParamNode.symbolInfo
        paramName      = namePrefix + 'this'
        childIdx       = 1

        # TODO: Review it.
        # x = new Object()
        # x = x.foo(x)
        # print x <---- BUG! x has readHits 0 now.

        #if thizSymbolInfo is defined
        #  #thizSymbolInfo.readHits = thizSymbolInfo.readHits - 1
        #endif

        this._injectParamInit(dst, symbolTable, paramName, thizParamNode)
      else

        childIdx = 0
      endif

      # Init ordinary call parameters.
      for paramIdx in 0 .. paramsCnt
        paramName          = namePrefix + params[paramIdx]
        paramInitValueNode = callNode.children[childIdx]
        this._injectParamInit(dst, symbolTable, paramName, paramInitValueNode)
        childIdx = childIdx + 1
      endfor

      # Inject function body.
      for idx in 0 .. childrenCnt
        childNode = children[idx]

        if ((childNode.opcode is AST_OPCODE_CALL) and
            (childNode.value is 'global') and
            (symbolTable.deepIdx <= 1))

          # Ignore global directive if we inject function body into global space.
          # It's not needed anymore.
        else
          newNode       = this._resolveParamsForInline(bodyNode.symbolTable, namePrefix, childNode)
          dst[len(dst)] = newNode
          this.symbolsCollector._collectSymbols(symbolTable, newNode, true)
        endif
      endfor

      # Remove original call node.
      callNode.children    = []
      callNode.childrenCnt = 0

      this._debug('Inject function body (' + callNode.value + ') at node #' + str(callNode.id))

      if callNode.parent.opcode is AST_OPCODE_BLOCK
        # Call is localized on left side (used as pure call without
        # return value).
        callNode.opcode = AST_OPCODE_NOP

      else
        # Call is localized on right side (used for read).
        # Replace function call by return value.
        callNode.opcode     = AST_OPCODE_VARIABLE
        callNode.value      = namePrefix + rvName
        callNode.symbolInfo = symbolTable.lookupForRead(rvFullName)
      endif
    endif
  endmethod

  method _processNode_injectInlineFunctions(dst, symbolTable, node)
    global AST_OPCODE_CALL
    global AST_OPCODE_BOOL_AND
    global AST_OPCODE_BOOL_OR
    global AST_OPCODE_IF
    global AST_OPCODE_WHILE

    opcode      = node.opcode
    children    = node.children
    childrenCnt = node.childrenCnt

    if (opcode is AST_OPCODE_BOOL_AND) or (opcode is AST_OPCODE_BOOL_OR)
      # Lazy and/or. Don't touch.

    else
      # Don't touch IF/WHILE condition.
      # TODO: Review it.
      if (opcode is AST_OPCODE_IF) or (opcode is AST_OPCODE_WHILE)
        startIdx = 1
      else
        startIdx = 0
      endif

      # Process child nodes recursively.
      for idx in startIdx .. childrenCnt
        childNode = children[idx]
        this._processNode_injectInlineFunctions(dst, symbolTable, childNode)
      endfor

      if node.opcode is AST_OPCODE_CALL
        this._injectFunctionBody(dst, symbolTable, node)
      endif
    endif
  endmethod

  method _processNode(symbolTable, node)
    global AST_OPCODE_CALL
    global AST_OPCODE_IF
    global AST_OPCODE_WHILE
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_VCALL

    opcode      = node.opcode
    children    = node.children
    childrenCnt = node.childrenCnt

    # Switch symbolTable if needed.
    if node.symbolTable is defined
      symbolTable = node.symbolTable
    endif

    # TODO: Use null?
    # TODO: Optimize it.
    newChildren = []

    # Process child nodes recursively.
    for idx in 0 .. childrenCnt
      childNode = children[idx]

      if childNode.opcode is AST_OPCODE_DECLARE_OR_ASSIGN
        # Input:
        #   x = foo(...)
        #
        # Output:
        #   foo_body_1
        #   foo_body_2
        #   ...
        #   inline_rv = foo_body_n
        #   x = inline_rv
        #
        rvalNode = childNode.children[1]
        this._processNode_injectInlineFunctions(newChildren, symbolTable, rvalNode)

      elif ((childNode.opcode is AST_OPCODE_CALL) or
            (childNode.opcode is AST_OPCODE_VCALL))

        # foo()
        callParams    = childNode.children
        callParamsCnt = childNode.childrenCnt

        # Resolve function calls in parameters list.
        for paramIdx in 0 .. callParamsCnt
          this._processNode_injectInlineFunctions(newChildren, symbolTable, callParams[paramIdx])
        endfor

        # Resolve function call itself.
        this._processNode_injectInlineFunctions(newChildren, symbolTable, childNode)

      elif (opcode is AST_OPCODE_IF) or (opcode is AST_OPCODE_WHILE)
        # Resolve condition first.
        #this._processNode_injectInlineFunctions(newChildren, symbolTable, childNode.children[0])

        # Resolve node itself.
        #this._processNode_injectInlineFunctions(newChildren, symbolTable, childNode)

        for childIdx in 1 .. childNode.childrenCnt
          this._processNode(symbolTable, childNode.children[childIdx])
        endfor

      else
        # Process nodes recursively.
        this._processNode(symbolTable, childNode)
      endif

      newChildren[len(newChildren)] = childNode
    endfor

    node.children    = newChildren
    node.childrenCnt = len(newChildren)
  endmethod

  method processNode(node)
    this._processNode(node.symbolTable, node)
  endmethod
endclass
