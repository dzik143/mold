################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'AST/ASTUtils.mold'
import 'Utils/SymbolTable.mold'

SHOW_TYPE_CAST_NODES_ENABLED = false

class ASTPrinterText

  method _printNode_twoArgsOp(node, op)
    global AST_OPCODE_MUL
    global AST_OPCODE_DIV
    global AST_OPCODE_IDIV
    global AST_OPCODE_BOOL_AND
    global AST_OPCODE_BOOL_OR

    children  = node.children
    x = children[0]
    y = children[1]

    useParentForX = false
    useParentForY = false

    # Check is parenthesis
    if ((node.opcode is AST_OPCODE_MUL) or
        (node.opcode is AST_OPCODE_DIV) or
        (node.opcode is AST_OPCODE_IDIV) or
        (node.opcode is AST_OPCODE_BOOL_AND) or
        (node.opcode is AST_OPCODE_BOOL_OR))

      useParentForX = AST_IsImmOrVar(x) isnt true
      useParentForY = AST_IsImmOrVar(y) isnt true
    endif

    if useParentForX is true
      # Complex node - put into parenthes.
      __mold_printToStdOutput('(')
      this._printNode('', x)
      __mold_printToStdOutput(')')

    else
      # Simple node.
      this._printNode('', x)
    endif

    __mold_printToStdOutput(' ' + op + ' ')

    if useParentForY is true
      # Complex node - put into parenthes.
      __mold_printToStdOutput('(')
      this._printNode('', y)
      __mold_printToStdOutput(')')
    else
      # Simple node.
      this._printNode('', y)
    endif
  endmethod

  method _printNode_codeBlock(prefix, node)
    global AST_OPCODE_NOP
    global AST_OPCODE_PROGRAM
    global AST_OPCODE_BLOCK
    global AST_OPCODE_IF
    global AST_OPCODE_WHILE
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_CLASS
    global AST_OPCODE_CLASS_METHOD

    if ((node.opcode isnt AST_OPCODE_CLASS) and
        (node.opcode isnt AST_OPCODE_FUNCTION) and
        (node.opcode isnt AST_OPCODE_CLASS_METHOD))

      prefix = prefix + '  '
    endif

    for values childNode in node.children
      if childNode.opcode isnt AST_OPCODE_NOP
        this._printNode(prefix, childNode)

        if ((childNode.opcode isnt AST_OPCODE_BLOCK) and
            (childNode.opcode isnt AST_OPCODE_IF) and
            (node.opcode isnt AST_OPCODE_CLASS))

          print ''
        endif
      endif
    endfor
  endmethod

  method _printNode_paramsList(node, beginIdx, parenthesis)
    children    = node.children
    childrenCnt = node.childrenCnt

    sep = ''

    if parenthesis is true
      __mold_printToStdOutput('(')
    endif

    for idx in beginIdx .. childrenCnt
      __mold_printToStdOutput(sep)
      this._printNode('', children[idx])
      sep = ', '
    endfor

    if parenthesis is true
      __mold_printToStdOutput(')')
    endif
  endmethod

  method _printNode(prefix, node)
    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_CALL
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_VCALL
    global AST_OPCODE_BLOCK, AST_OPCODE_FUNCTION, AST_OPCODE_CLASS
    global AST_OPCODE_CLASS_METHOD
    global AST_OPCODE_IF
    global AST_OPCODE_SWITCH
    global AST_OPCODE_WHILE
    global AST_OPCODE_FOR_VALUES_RANGE
    global AST_OPCODE_FOR_VALUES
    global AST_OPCODE_FOR_KEYS
    global AST_OPCODE_FOR_KEYS_VALUES
    global AST_OPCODE_FOR_INDEXES
    global AST_OPCODE_FOR_INDEXES_VALUES

    global AST_OPCODE_ASSIGN
    global AST_OPCODE_DECLARE
    global AST_OPCODE_DECLARE_OR_ASSIGN
    global AST_OPCODE_FUNCTION
    global AST_OPCODE_CLASS
    global AST_OPCODE_NOP
    global AST_OPCODE_VARIABLE

    global AST_DATA_INTEGER, AST_DATA_FLOAT, AST_DATA_DOUBLE, AST_DATA_STRING
    global AST_DATA_BOOL, AST_DATA_OBJECT, AST_DATA_NULL, AST_DATA_UNDEFINED
    global AST_DATA_ARRAY, AST_DATA_MAP, AST_OPCODE_VARIABLE
    global AST_OPCODE_PROGRAM, AST_OPCODE_NEG
    global AST_OPCODE_BOOL_AND, AST_OPCODE_BOOL_OR, AST_OPCODE_IDIV
    global AST_OPCODE_REFERENCE_BY_INDEX
    global AST_OPCODE_REFERENCE_BY_KEY
    global AST_OPCODE_CALL
    global AST_OPCODE_ADD, AST_OPCODE_SUB, AST_OPCODE_MUL, AST_OPCODE_DIV
    global AST_OPCODE_IDIV
    global AST_OPCODE_COMPARE_EQ, AST_OPCODE_COMPARE_NEQ, AST_OPCODE_COMPARE_GT
    global AST_OPCODE_COMPARE_GE, AST_OPCODE_COMPARE_LT, AST_OPCODE_COMPARE_LE
    global AST_OPCODE_CALL_NEW, AST_OPCODE_VCALL
    global AST_OPCODE_TYPE_CAST
    global SHOW_TYPE_CAST_NODES_ENABLED

    global SYMBOL_KIND_CONST

    opcode      = node.opcode
    value       = node.value
    childrenCnt = node.childrenCnt
    children    = node.children
    lval        = children[0]
    rval        = children[1]
    x           = lval
    y           = rval

    if opcode is AST_DATA_STRING
      __mold_printToStdOutput("'")
      __mold_printToStdOutput(value)
      __mold_printToStdOutput("'")

    elif opcode is AST_DATA_ARRAY
      if typeof(node.value) is 'array'
        # Array has initializer list - just render it.
        print node.value

      else
        # Array is build up dynamically from child nodes - go on.
        __mold_printToStdOutput('[')
        sep = ''
        for values childNode in children
          __mold_printToStdOutput(sep)
          this._printNode(prefix, childNode)
          sep = ', '
        endfor
        __mold_printToStdOutput(']')
      endif

    elif opcode is AST_DATA_MAP
      if typeof(node.value) is 'map'
        # Map has initializer list - just render it.
        print node.value
      elif node.childrenCnt is 0
        # Empty map.
        print '{}'
      else
        # TODO: Handle non-imm maps.
        print '[map]'
        # die('error: non-imm maps are not supported yet')
      endif

    elif opcode < AST_OPCODE_PROGRAM
      __mold_printToStdOutput(value)

    elif opcode is AST_OPCODE_PROGRAM
      for values childNode in children
        this._printNode(prefix, childNode)
      endfor

    elif opcode is AST_OPCODE_BLOCK
      symbolTable  = node.symbolTable
      #this._printSymbolTable(symbolTable)

      if symbolTable is defined
        # Declare complex constants if needed.
        symbols = symbolTable.exportSymbols()

        for values item in symbols
          if (item.kind is SYMBOL_KIND_CONST) and (item.readHits > 0)
            value = item.value
            if (typeof(value) is 'array') or (typeof(value) is 'map')
              print prefix, ' const', item.name, '=', value
            #else
            #  print prefix, ' ', symbolInfo.name, '=', value
            endif
          endif
        endfor
      endif

      # Emit block body.
      this._printNode_codeBlock(prefix, node)

    elif opcode is AST_OPCODE_CLASS
      __mold_printToStdOutput('class ')
      __mold_printToStdOutput(node.name)
      print ''
      this._printNode_codeBlock(prefix, node)
      print 'endclass'

    elif (opcode is AST_OPCODE_CLASS_METHOD) or (opcode is AST_OPCODE_FUNCTION)
      if opcode is AST_OPCODE_CLASS_METHOD
        __mold_printToStdOutput(prefix + 'method ')
      else
        __mold_printToStdOutput(prefix + 'function ')
      endif

      __mold_printToStdOutput(node.name)
      __mold_printToStdOutput('(')

      sep = ''

      for values oneParam in node.params
        __mold_printToStdOutput(sep)
        __mold_printToStdOutput(oneParam)
        sep = ', '
      endfor

      __mold_printToStdOutput(')')

      if node.rv is defined
        print ' ->', node.rv
      else
        print ''
      endif

      this._printNode_codeBlock(prefix, node)

      if opcode is AST_OPCODE_CLASS_METHOD
        print prefix + 'endmethod'
      else
        print prefix + 'endfunction'
      endif

    elif opcode is AST_OPCODE_VCALL
      # TODO: Is it left or right node?
      if node.parent.opcode is AST_OPCODE_BLOCK
        # Left node - add spaces prefix.
        __mold_printToStdOutput(prefix)
      endif

      this._printNode(prefix, children[0])
      __mold_printToStdOutput('.')
      __mold_printToStdOutput(value)
      this._printNode_paramsList(node, 1, true)

    elif opcode is AST_OPCODE_CALL_NEW
      __mold_printToStdOutput('new ')
      __mold_printToStdOutput(value)
      this._printNode_paramsList(node, 1, true)

    elif opcode is AST_OPCODE_IF
      __mold_printToStdOutput(prefix + 'if ')
      this._printNode('', children[0])
      print ''

      if children[1].opcode is AST_OPCODE_IF
        this._printNode(prefix + '  ', children[1])
      else
        this._printNode(prefix, children[1])
      endif

      if childrenCnt is 3
        __mold_printToStdOutput(prefix)
        print 'else'
        if children[2].opcode is AST_OPCODE_IF
          this._printNode(prefix + '  ', children[2])
        else
          this._printNode(prefix, children[2])
        endif
      endif

      print prefix + 'endif'

    elif opcode is AST_OPCODE_SWITCH
      __mold_printToStdOutput(prefix + 'switch ')
      this._printNode('', children[0])
      print ''

      for idx in 1 .. childrenCnt
        arrayOfValues = children[idx].arrayOfValues

        if arrayOfValues is defined
          # Render when value1, value2, ..., valueN list
          __mold_printToStdOutput(prefix)
          __mold_printToStdOutput('  when ')
          sep = ''

          for values oneValue in arrayOfValues
            __mold_printToStdOutput(sep)
            __mold_printToStdOutput(oneValue)
            sep = ', '
          endfor
          print ''
        else
          print prefix + '  otherwise'
        endif

        # Emit code.
        if children[idx].opcode is AST_OPCODE_BLOCK
          this._printNode(prefix + '  ', children[idx])
        else
          this._printNode(prefix + '    ', children[idx])
        endif
      endfor

      print prefix + 'endswitch'

    elif opcode is AST_OPCODE_TYPE_CAST
      if SHOW_TYPE_CAST_NODES_ENABLED is true
        srcType  = AST_GetDataType(children[0])
        dstType  = AST_GetDataType(node)
        funcName = 'conv_' + AST_ConvertDataTypeToMIR(srcType) + '_to_' + AST_ConvertDataTypeToMIR(dstType)

        __mold_printToStdOutput(prefix)
        __mold_printToStdOutput(funcName)
        this._printNode_paramsList(node, 0, true)
      else
        this._printNode(prefix, children[0])
      endif

    elif opcode is AST_OPCODE_CALL
      __mold_printToStdOutput(prefix)
      __mold_printToStdOutput(value)

      if value is 'print'
        __mold_printToStdOutput(' ')
        this._printNode_paramsList(node, 0, false)
      else
        this._printNode_paramsList(node, 0, true)
      endif

    elif opcode is AST_OPCODE_WHILE
      __mold_printToStdOutput(prefix)
      __mold_printToStdOutput('while ')
      this._printNode('', children[0])
      print ''

      this._printNode_codeBlock(prefix, children[1])
      __mold_printToStdOutput(prefix)
      __mold_printToStdOutput('endwhile')

    elif opcode is AST_OPCODE_FOR_VALUES_RANGE
      __mold_printToStdOutput(prefix)
      __mold_printToStdOutput('for ')
      this._printNode('', children[0])

      __mold_printToStdOutput(' in ')
      this._printNode('', children[1])

      __mold_printToStdOutput(' .. ')
      this._printNode('', children[2])

      if children[3].value isnt 1
        __mold_printToStdOutput(' by ')
        this._printNode('', children[3])
      endif
      print ''

      this._printNode_codeBlock(prefix, children[4])
      __mold_printToStdOutput(prefix)
      __mold_printToStdOutput('endfor')

    elif opcode is AST_OPCODE_FOR_VALUES
      __mold_printToStdOutput(prefix)
      __mold_printToStdOutput('for values ')
      this._printNode('', children[0])

      __mold_printToStdOutput(' in ')
      this._printNode('', children[1])

      print ''

      this._printNode_codeBlock(prefix, children[2])
      __mold_printToStdOutput(prefix)
      __mold_printToStdOutput('endfor')

    elif opcode is AST_OPCODE_VARIABLE
      symbolInfo = node.symbolInfo

      if ((symbolInfo is defined) and
          (symbolInfo.kind is SYMBOL_KIND_CONST) and
          (typeof(symbolInfo.value) is 'string'))

        value = "'" + str(symbolInfo.value) + "'"
      endif

      __mold_printToStdOutput(value)

    elif opcode is AST_OPCODE_REFERENCE_BY_INDEX
      this._printNode('', lval)
      __mold_printToStdOutput('[')
      this._printNode('', rval)
      __mold_printToStdOutput(']')

    elif opcode is AST_OPCODE_REFERENCE_BY_KEY
      this._printNode('', lval)
      __mold_printToStdOutput('{')
      this._printNode('', rval)
      __mold_printToStdOutput('}')

    elif opcode is AST_OPCODE_DECLARE_OR_ASSIGN
      __mold_printToStdOutput(prefix)
      this._printNode('', lval)
      __mold_printToStdOutput(' = ')
      this._printNode('', rval)

    elif opcode is AST_OPCODE_NEG
      __mold_printToStdOutput('- ')
      if (x.opcode is AST_OPCODE_ADD) or (x.opcode is AST_OPCODE_SUB)
        __mold_printToStdOutput('(')
        this._printNode('', x)
        __mold_printToStdOutput(')')
      else
        this._printNode('', x)
      endif

    elif opcode is AST_OPCODE_ADD
      this._printNode_twoArgsOp(node, '+')

    elif opcode is AST_OPCODE_SUB
      this._printNode_twoArgsOp(node, '-')

    elif opcode is AST_OPCODE_MUL
      this._printNode_twoArgsOp(node, '*')

    elif opcode is AST_OPCODE_DIV
      this._printNode_twoArgsOp(node, '/')

    elif opcode is AST_OPCODE_IDIV
      this._printNode_twoArgsOp(node, '//')

    elif opcode is AST_OPCODE_COMPARE_EQ
      this._printNode_twoArgsOp(node, 'is')

    elif opcode is AST_OPCODE_COMPARE_NEQ
      this._printNode_twoArgsOp(node, 'isnt')

    elif opcode is AST_OPCODE_COMPARE_GT
      this._printNode_twoArgsOp(node, '>')

    elif opcode is AST_OPCODE_COMPARE_GE
      this._printNode_twoArgsOp(node, '>=')

    elif opcode is AST_OPCODE_COMPARE_LT
      this._printNode_twoArgsOp(node, '<')

    elif opcode is AST_OPCODE_COMPARE_LE
      this._printNode_twoArgsOp(node, '<=')

    elif opcode is AST_OPCODE_BOOL_AND
      this._printNode_twoArgsOp(node, 'and')

    elif opcode is AST_OPCODE_BOOL_OR
      this._printNode_twoArgsOp(node, 'or')

    elif opcode is AST_OPCODE_NOP

    else
      die('error: unhandled opcode: ' + str(opcode))
    endif
  endmethod

  method printNode(node)
    prefix = ''
    this._printNode(prefix, node)
  endmethod
endclass
