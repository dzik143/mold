################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import '../Parser/ParserMold.mold'
import '../Utils/Common.mold'

import './AST.mold'

class ASTModuleResolver
  method constructor(app)
    this.app             = app
    this.importedModules = {}
    this.parser          = new Parser()
  endmethod

  method _resolveImportsInternal(ast, pathPrefix)
    global AST_OPCODE_CALL

    program     = ast.children[0]
    children    = program.children
    newChildren = []

    for values oneChild in children

      if (oneChild.opcode is AST_OPCODE_CALL) and (oneChild.value is 'import')
        # TODO: Verify parameters.
        modulePath     = oneChild.children[0].value
        modulePathDir  = UTILS_GetDirNameFromPath(modulePath)
        modulePathFull = UTILS_NormalizePath(pathPrefix ~ '/' ~ modulePath)

        if this.importedModules{modulePathFull} is undefined
          # Load only once.
          this.importedModules{modulePathFull} = true

          this.app.logDebug('Resolving module [' ~ modulePathFull ~ ']...')

          # Parse source into AST tree.
          importedAst = this.parser.parseFile(modulePathFull)

          # Resolve imports recursively.
          newPathPrefix = UTILS_NormalizePath(pathPrefix ~ '/' ~ modulePathDir)
          this._resolveImportsInternal(importedAst, newPathPrefix)

          importedProgram  = importedAst.children[0]
          importedChildren = importedProgram.children

          for values oneImportedChild in importedChildren
            newChildren[@afterlast] = oneImportedChild
          endfor
        endif

      elif (oneChild.opcode is AST_OPCODE_CALL) and (oneChild.value is 'importFrom')
        # import from 'A'
        # import foo from 'A'
        modulePath = oneChild.children[0].value
        moduleDir  = UTILS_GetDirNameFromPath(modulePath)

        if moduleDir isnt '.'
          newPathPrefix = pathPrefix ~ '/' ~ moduleDir
        else
          newPathPrefix = pathPrefix
        endif

        moduleBase = UTILS_GetBaseNameFromPath(modulePath)
        moduleName = UTILS_NormalizePath(newPathPrefix ~ '/' ~ moduleBase ~ '.mold')

        if this.importedModules{moduleName} is undefined
          # Load only once.
          this.importedModules{moduleName} = true

          this.app.logDebug('Resolving module [' ~ str(moduleName) ~ ']...')

          # Parse source into AST tree.
          importedAst = this.parser.parseFile(moduleName)

          # Resolve imports recursively.
          this._resolveImportsInternal(importedAst, newPathPrefix)

          importedProgram  = importedAst.children[0]
          importedChildren = importedProgram.children

          for values oneImportedChild in importedChildren
            newChildren[@afterlast] = oneImportedChild
          endfor
        endif

      else
        newChildren[@afterlast] = oneChild
      endif
    endfor

    program.children = newChildren
  endmethod

  method resolveImports(ast)
    this._resolveImportsInternal(ast, '.')
  endmethod
endclass
