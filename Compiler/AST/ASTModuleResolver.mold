################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import '../Parser/ParserMold.mold'
import '../Utils/Common.mold'

import './AST.mold'

class ASTModuleResolver
  method constructor(app)
    this.app             = app
    this.importedModules = {}
    this.parser          = new Parser()
    this.nextModuleIdx   = 1
  endmethod

  method getNextModuleId() -> rv
    rv = '__m' ~ str(this.nextModuleIdx)
    this.nextModuleIdx = this.nextModuleIdx + 1
  endmethod

  method _resolveImportsInternal(ast, pathPrefix)
    global AST_OPCODE_MODULE
    global AST_OPCODE_CALL
    global AST_OPCODE_NOP

    program         = ast.children[0]
    children        = program.children
    importedSymbols = {}

    for values oneChild in children

      if ((oneChild.opcode is AST_OPCODE_CALL) and
          (oneChild.value  is @any('import', 'importFrom')))

        # TODO: Verify parameters.
        modulePath     = oneChild.children[@last].value
        modulePathDir  = UTILS_GetDirNameFromPath(modulePath)
        modulePathFull = UTILS_NormalizePath(`${pathPrefix}/${modulePath}`)

        # Search for module in cache first.
        moduleId = this.importedModules{modulePathFull}

        originalChildren = oneChild.children

        if moduleId is undefined
          # Module not loaded yet - load it now.
          moduleId = this.getNextModuleId()
          this.importedModules{modulePathFull} = moduleId

          this.app.logDebug(`Resolving module [ ${modulePathFull} ]...`)

          # Parse source into AST tree.
          importedAst = this.parser.parseFile(modulePathFull)

          # Resolve imports recursively.
          newPathPrefix = UTILS_NormalizePath(`${pathPrefix}/${modulePathDir}`)
          this._resolveImportsInternal(importedAst, newPathPrefix)

          oneChild.opcode   = AST_OPCODE_MODULE
          oneChild.children = importedAst.children
          oneChild.value    = 'importModuleOnce'

        else
          oneChild.opcode   = AST_OPCODE_NOP
          oneChild.value    = 'alreadyImported'
          oneChild.children = []
        endif

        # Build map of imported symbols.
        # TODO: Simplify it.
        for idx in 0 .. len(originalChildren) - 1
          oneName = originalChildren[idx].value
          importedSymbols{oneName} = moduleId ~ '_' ~ oneName
        endfor

        oneChild.value = moduleId
      endif
    endfor

    ast.importedSymbols = importedSymbols
  endmethod

  method getTranslationMapForModule(moduleId) -> rv
    rv = this.translationMap{moduleId}
  endmethod

  method resolveImports(ast)
    ast.value = '__m0'
    this._resolveImportsInternal(ast, '.')
  endmethod
endclass
