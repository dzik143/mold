################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

import 'AST/AST.mold'
import 'Parser/ParserMold.mold'

class ASTModuleResolver
  method constructor(app)
    this.app             = app
    this.importedModules = {}
    this.parser          = new Parser()
  endmethod

  method resolveImports(ast)
    global AST_OPCODE_CALL

    program     = ast.children[0]
    children    = program.children
    childrenCnt = len(children)

    newChildrenCnt = 0
    newChildren    = []

    for values oneChild in children

      if (oneChild.opcode is AST_OPCODE_CALL) and (oneChild.value is 'import')
        # TODO: Verify parameters.
        moduleName = oneChild.children[0].value

        if this.importedModules{moduleName} is undefined
          # Load only once.
          this.importedModules{moduleName} = true

          this.app.logDebug('Resolving module [' ~ str(moduleName) ~ ']...')

          # Parse source into AST tree.
          importedAst = this.parser.parseFile(moduleName)

          # Resolve imports recursively.
          this.resolveImports(importedAst)

          importedProgram     = importedAst.children[0]
          importedChildren    = importedProgram.children
          importedChildrenCnt = len(importedChildren)

          for values oneImportedChild in importedChildren
            newChildren[newChildrenCnt] = oneImportedChild
            newChildrenCnt = newChildrenCnt + 1
          endfor
        endif

      else
        newChildren[newChildrenCnt] = oneChild
        newChildrenCnt = newChildrenCnt + 1
      endif
    endfor

    program.children = newChildren
  endmethod
endclass
