################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2020 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

SYMBOL_KIND_VAR_LOCAL  = 1
SYMBOL_KIND_VAR_GLOBAL = 2
SYMBOL_KIND_VAR_PARAM  = 3
SYMBOL_KIND_VAR_RETVAL = 4
SYMBOL_KIND_CONST      = 5
SYMBOL_KIND_LABEL      = 6

SYMBOL_KIND_FUNCTION   = 7
SYMBOL_KIND_CLASS      = 8
SYMBOL_KIND_METHOD     = 9
SYMBOL_KIND_JMP_TABLE  = 10

import 'AST/ASTUtils.mold'

SYMBOL_KIND_AS_TEXT = [
  '[error]',
  'local',
  'global',
  'param',
  'rv',
  'const',
  'label',
  'function',
  'class',
  'method'
]

SymbolTable_NextId = 0

function SymbolTable_GetNextId() -> rv
  global SymbolTable_NextId
  rv = SymbolTable_NextId
  SymbolTable_NextId = rv + 1
endfunction

class SymbolTable
  method constructor(app)
    this._debug('Created new object')
    this.app       = app
    this.deepIdx   = 0
    this.deepMax   = 128
    this.loopLevel = 0
    this.procLevel = 0

    # Track used literals to avoid emitting the same text
    # multiple times.
    this.literals = {}

    # Track temporary variables usage and reuse them if possible.
    this.poolOfTempVars = {
      'int32':   {'cnt': 0, 'pool': []},
      'int64':   {'cnt': 0, 'pool': []},
      'float64': {'cnt': 0, 'pool': []},
      'bool32':  {'cnt': 0, 'pool': []},
      'variant': {'cnt': 0, 'pool': []},
      'string':  {'cnt': 0, 'pool': []}
    }

    this.parent      = null
    this.globalTable = this

    # TODO: Remove it when map iteration ready.
    this.symbols = {}
  endmethod

  method _debug(msg)
    if false
      print '[ SymbolTable ]', msg
    endif
  endmethod

  method _error(msg)
    this.app.logError(msg)
  endmethod

  method _errorTypeMismatch(oldType, newType)
    this._error('attemp to assign ' ~ AST_ConvertDataTypeToText(newType) ~ ' to ' ~ AST_ConvertDataTypeToText(oldType))
  endmethod

  method _errorIfUsedAsNumber(name)
    symbolInfo = this.lookup(name)
    if symbolInfo.usedAsNumber is defined
      this._error("'" ~ name ~ "' was used as number before")
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                               Generic calls
  # ----------------------------------------------------------------------------

  method getDeep() -> rv
    rv = this.deepIdx
  endmethod

  method exportSymbols() -> rv
    rv = this.symbols
  endmethod

  method insert(name, entry)
    if this.symbols{name} is defined
      this._error("redeclaration of '" ~ name ~ "'")

    else
      this.symbols{name} = entry
      entry.writeHits = 0
      entry.readHits  = 0
      entry.loopLevel = this.loopLevel

      # Default data type to variant if not set.
      # TODO: Review it?
      #if entry.astType is undefined
      #  entry.astType = -1
      #endif
    endif
  endmethod

  method remove(name)
    # TODO: Optimize it.
    # TODO: Use remove() when ready.
    entry      = this.lookup(name)
    newSymbols = {}

    for keys id values symbolInfo in this.symbols
      if symbolInfo.name isnt entry.name
        newSymbols{id} = symbolInfo
      endif
    endfor

    this.symbols = newSymbols
  endmethod

  method importExternalVariable(name)
    global SYMBOL_KIND_VAR_GLOBAL
    this.insert(name, {
      'name': name,
      'kind': SYMBOL_KIND_VAR_GLOBAL
    })
  endmethod

  method insertGlobal(name, entry)
    this.app.getSymbolTable().insert(name, entry)
  endmethod

  method _lookupInternal(name) -> rv
    global SYMBOL_KIND_VAR_LOCAL
    global SYMBOL_KIND_VAR_GLOBAL

    rv  = this.symbols{name}
    tab = this

    while (rv is undefined) and (tab.deepIdx > 0)
      tab = tab.parent
      rv  = tab._lookupInternal(name)
    endwhile

    # Handle unimported global.
    # TODO: Clean up this mess.
    if rv is defined
      if (tab.procLevel is 0) and (this.procLevel > 0)

        if ((rv.kind is SYMBOL_KIND_VAR_LOCAL) or
            (rv.kind is SYMBOL_KIND_VAR_GLOBAL))

          x  = []
          rv = x[0]
        endif
      endif
    endif
  endmethod

  method lookup(name) -> rv
    rv = this._lookupInternal(name)

    if rv is undefined
      this._error("'" ~ name ~ "' was not declared in this scope")
    endif

    # TODO: Use max(x, y) if ready.
    if this.loopLevel > rv.loopLevel
      rv.loopLevel = this.loopLevel
    endif
  endmethod

  method lookupForRead(name) -> rv
    rv          = this.lookup(name)
    rv.readHits = rv.readHits + 1
  endmethod

  method lookupForCall(name, paramsCnt, isRetValUsed) -> rv
    rv = this.lookupFunction(name, paramsCnt, isRetValUsed)
    rv.readHits = rv.readHits + 1
  endmethod

  method lookupForWrite(name) -> rv
    rv           = this.lookup(name)
    rv.writeHits = rv.writeHits + 1
  endmethod

  method lookupForReadAndWrite(name) -> rv
    rv           = this.lookup(name)
    rv.readHits  = rv.readHits  + 1
    rv.writeHits = rv.writeHits + 1
  endmethod

  method lookupForWriteOrInsert(name) -> rv
    if this.isset(name) is false
      this.insertLocal(name)
    endif
    rv = this.lookupForWrite(name)
  endmethod

  method lookupGlobal(name) -> rv
    rv = this.globalTable.lookup(name)
  endmethod

  method decreaseReadHits(name)
    entry = this.lookup(name)
    entry.readHits = entry.readHits - 1
  endmethod

  method decreaseWriteHits(name)
    entry = this.lookup(name)
    entry.writeHits = entry.writeHits - 1
  endmethod

  method isset(name) -> rv
    rv = this._lookupInternal(name) is defined
  endmethod

  # ----------------------------------------------------------------------------
  #                   Helpers to track how variables are used
  # ----------------------------------------------------------------------------

  method useAsArray(name)
    global AST_DATA_ARRAY
    this._errorIfUsedAsNumber(name)
    this.assignTypeAndFreeze(name, AST_DATA_ARRAY)
  endmethod

  method useAsArrayOrString(name)
    # TODO: Review it.
    this._errorIfUsedAsNumber(name)
    this.assignTypeAndFreeze(name, -1)
  endmethod

  method useAsMap(name)
    global AST_DATA_MAP
    this._errorIfUsedAsNumber(name)
    this.assignTypeAndFreeze(name, AST_DATA_MAP)
  endmethod

  method useAsIndex(name)
    global AST_DATA_INTEGER
    this.assignType(name, AST_DATA_INTEGER)
  endmethod

  method useAsInteger(name)
    global AST_DATA_INTEGER
    this.assignType(name, AST_DATA_INTEGER)
  endmethod

  method useAsFloat(name)
    global AST_DATA_DOUBLE
    this.assignType(name, AST_DATA_DOUBLE)
  endmethod

  method useAsString(name)
    global AST_DATA_STRING
    this._errorIfUsedAsNumber(name)
    this.assignType(name, AST_DATA_STRING)
  endmethod

  method useAsKey(name)
    global AST_DATA_STRING
    this._errorIfUsedAsNumber(name)
    this.assignType(name, AST_DATA_STRING)
  endmethod

  method useAsObject(name)
    global AST_DATA_OBJECT
    this._errorIfUsedAsNumber(name)
    this.assignType(name, AST_DATA_OBJECT)
  endmethod

  method useAsMapOrObject(name)
    # TODO: Review it.
    this._errorIfUsedAsNumber(name)
    this.assignTypeAndFreeze(name, -1)
  endmethod

  method useAsTypeofArg(name)
    # TODO: Review it.
    this.assignTypeAndFreeze(name, -1)
  endmethod

  method useAsNumber(name)
    symbolInfo = this.lookup(name)
    symbolInfo.usedAsNumber = true
  endmethod

  # ----------------------------------------------------------------------------
  #                   Scopes (0=global, 1,2,3...=local)
  # ----------------------------------------------------------------------------

  method enterScope() -> rv
    this._debug('Enter scope')

    if this.deepIdx >= this.deepMax
      this._error('too deep (' ~ str(this.deepIdx) ~ ')')
    endif

    rv = new SymbolTable(this.app)
    rv.parent       = this
    rv.deepIdx      = this.deepIdx + 1
    rv.procLevel    = this.procLevel
    rv.globalTable  = this.globalTable
    rv.functionName = this.functionName
  endmethod

  method enterScopeForLoop() -> rv
    rv           = this.enterScope()
    rv.loopLevel = this.loopLevel + 1
  endmethod

  method enterScopeForProcedure(functionName) -> rv
    rv              = this.enterScope()
    rv.procLevel    = this.procLevel + 1
    rv.functionName = functionName
  endmethod

  method leaveScope() -> rv
    this._debug('Leave scope')

    if this.deepIdx < 1
      this._error('unmatched scope leave')
    endif

    # TODO: Review it.
    #this.vacuum()
    rv = this.parent
  endmethod

  # ----------------------------------------------------------------------------
  #                              Function helpers
  # ----------------------------------------------------------------------------

  method insertFunction(name, proto)
    global SYMBOL_KIND_FUNCTION
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_FUNCTION,
      'proto': proto
    }

    this.insertGlobal(name, newEntry)
  endmethod

  method lookupFunction(name, paramsCnt, isRetValUsed) -> rv
    global SYMBOL_KIND_FUNCTION
    global AST_OPCODE_CLASS_METHOD

    rv = this.lookup(name)

    if rv.kind isnt SYMBOL_KIND_FUNCTION
      this._error("'" ~ name ~ "' is not a function")

    elif rv.proto.builtIn is undefined
      # TODO: Clean up this mess.
      if rv.proto.opcode is AST_OPCODE_CLASS_METHOD
        # Adjust for this parameter for direct call.
        paramsCnt = paramsCnt - 1
      endif

      if len(rv.proto.params) isnt paramsCnt
        this._error("function '" ~ name ~ "' requires exactly " ~ str(len(rv.proto.params)) ~ ' parameters, but ' ~ str(paramsCnt) ~ ' were passed')

      elif (isRetValUsed is true) and (rv.proto.rv is undefined)
        this._error("function '" ~ name ~ "' does not return a value")

      elif (isRetValUsed is false) and (rv.proto.rv is defined)
        this._error("unused return value of '" ~ name ~ "' function")
      endif

    endif
  endmethod

  method getCurrentFunctionName() -> rv
    rv = this.functionName
  endmethod

  # ----------------------------------------------------------------------------
  #                               Class helpers
  # ----------------------------------------------------------------------------

  method insertClass(name, proto)
    global SYMBOL_KIND_CLASS
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_CLASS,
      'proto': proto
    }
    this.insertGlobal(name, newEntry)
  endmethod

  method lookupClass(name) -> rv
    global SYMBOL_KIND_CLASS
    rv = this.lookupGlobal(name)
    if rv.kind isnt SYMBOL_KIND_CLASS
      this._error("'" ~ name ~ "' is not a class")
    endif
  endmethod

  # ----------------------------------------------------------------------------
  #                               Variable helper
  # ----------------------------------------------------------------------------

  method insertLocal(name)
    global SYMBOL_KIND_VAR_LOCAL

    if this.deepIdx < 1
      this._error('attemp to declare local within global table')
    endif

    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_VAR_LOCAL
    }
    this.insert(name, newEntry)
  endmethod

  method importGlobal(name)
    global SYMBOL_KIND_VAR_GLOBAL
    global SYMBOL_KIND_CONST

    if this.deepIdx <= 1
      this._error('global directive used in global space')

    elif this.isset(name) is true
      # Symbol already declared in current scope.
      # Check is it global.
      symbolInfo = this.lookup(name)

      if symbolInfo.kind is SYMBOL_KIND_VAR_GLOBAL
        # It's already imported global. Do nothing.

      elif symbolInfo.kind is SYMBOL_KIND_CONST
        # It's a global constant. Do nothing.
      else
        # It's already declared as another kind.
        this._error("conflicting declaration 'global " ~ name ~ "'")
      endif

    else
      # TODO: Clean up this mess.
      mainScope = this
      while mainScope.deepIdx > 1
        mainScope = mainScope.parent
      endwhile

      # Find symbol in global scope.
      symbolInfo = mainScope.lookup(name)

      # Keep access stats after import.
      writeHits = symbolInfo.writeHits
      readHits  = symbolInfo.readHits
      loopLevel = this.loopLevel

      if symbolInfo.kind isnt SYMBOL_KIND_VAR_GLOBAL
        # Symbol found in main() function for first time.
        # Change to global and move to global symbol table.
        symbolInfo.kind = SYMBOL_KIND_VAR_GLOBAL

        # Move into global scope.
        this.globalTable.insert(name, symbolInfo)
      endif

      # Import global var into current scope.
      this.insert(name, symbolInfo)

      # Keep access stats after import.
      symbolInfo.writeHits = writeHits
      symbolInfo.readHits  = readHits

      # TODO: Use max.
      if loopLevel > symbolInfo.loopLevel
        symbolInfo.loopLevel = loopLevel
      endif
    endif
  endmethod

  method insertParam(name, paramId) -> newEntry
    global SYMBOL_KIND_VAR_PARAM

    # TODO: Handle non-variant parameters.
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_VAR_PARAM,
      'id': paramId,
      'astType': -1
    }
    this.insert(name, newEntry)
  endmethod

  method insertRetVal(name) -> newEntry
    global SYMBOL_KIND_VAR_RETVAL
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_VAR_RETVAL,
      'astType': -1
    }
    this.insert(name, newEntry)
    #this.symbols[name] = newEntry
    # TODO: Is it really needed?
    unused = this.lookupForRead(name)
  endmethod

  method insertConst(name, value) -> newEntry
    global SYMBOL_KIND_CONST
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_CONST,
      'value': value
    }

    # TODO: Review it
    this.insert(name, newEntry)
    this.globalTable.insert(name, newEntry)
  endmethod

  method insertLiteral(text) -> literalEntry
    global AST_DATA_STRING

    literalEntry = this.globalTable.literals{text}

    if literalEntry is undefined
      # Literal seen first time. Wrap it into new constant.
      name         = '__literal' ~ str(SymbolTable_GetNextId())
      literalEntry = this.insertConst(name, text)
      this.globalTable.literals{text} = literalEntry

      # TODO: Review it.
      literalEntry.astType = AST_DATA_STRING
    endif
  endmethod

  method lookupLiteralForRead(text) -> literalEntry
    literalEntry = this.insertLiteral(text)
    literalEntry.readHits = literalEntry.readHits + 1
  endmethod

  # ----------------------------------------------------------------------------
  #                               Constant helpers
  # ----------------------------------------------------------------------------

  method createConstFromValue(value) -> rv
    rv     = '__const' ~ str(SymbolTable_GetNextId())
    unused = this.insertConst(rv, value)
  endmethod

  method assignValue(name, value)
    symbolInfo = this.lookup(name)
    symbolInfo.value = value
  endmethod

  method assignNode(name, node)
    symbolInfo = this.lookup(name)
    symbolInfo.node = node
  endmethod

  method assignType(name, newType)
    global SYMBOL_KIND_VAR_LOCAL
    global SYMBOL_KIND_VAR_GLOBAL
    global SYMBOL_KIND_VAR_PARAM

    symbolInfo = this.lookup(name)
    oldType    = symbolInfo.astType

    if (oldType is undefined) or (newType isnt oldType)
      goOn = false

      if oldType is undefined
        # <?> = ...
        # First type assign. Go on.
        goOn = true

      elif ((symbolInfo.kind isnt SYMBOL_KIND_VAR_LOCAL) and
            (symbolInfo.kind isnt SYMBOL_KIND_VAR_GLOBAL) and
            (symbolInfo.kind isnt SYMBOL_KIND_VAR_PARAM))
        # Don't touch anything, which we don't sure we can change a type of.
        # Example: don't touch function parameters and return variable.
        # They're always variants for now.
        # TODO: Handle non-variant call parameters.

      elif oldType is -1
        # <variant> = ...
        # Type is already variant.
        if ((symbolInfo.isAstTypeFrozen is undefined) or
            (symbolInfo.isAstTypeFrozen is false))
          # Change type to concrete one, but only if it's not explicit
          # frozen to variant.
          goOn = true
        endif

      elif newType is -1
        # ... = <variant>
        # New type is variant, so potentially may handle any type internally.
        # Do nothing now, but we need to generate extra conversion opcode
        # in the further stages.

      else
        # Error - type mismatch.
        this._errorTypeMismatch(oldType, newType)
      endif

      if goOn is true
        # TODO: Review it.
        # TODO: Clean up this mess (MIR vs AST types).
        symbolInfo.astType = newType
        symbolInfo.type    = AST_ConvertDataTypeToMIR(newType)
        this._debug('Assign AST type [' ~ AST_ConvertDataTypeToText(newType) ~ '] to variable [' ~ str(name) ~ ']')
      else
        this._debug('Ignored ineffective AST type change from [' ~ AST_ConvertDataTypeToText(oldType) ~ '] to [' ~ AST_ConvertDataTypeToText(newType) ~ '] for variable [' ~ str(name) ~ ']')
      endif
    endif
  endmethod

  method freezeType(name)
    symbolInfo = this.lookup(name)
    symbolInfo.isAstTypeFrozen = true
  endmethod

  method assignTypeAndFreeze(name, newType)
    this.assignType(name, newType)
    this.freezeType(name)
  endmethod

  method assignMirType(name, type)
    symbolInfo = this.lookup(name)
    symbolInfo.type = type
  endmethod

  method removeUnusedSymbols()
    global SYMBOL_KIND_VAR_PARAM
    global SYMBOL_KIND_VAR_RETVAL

    newSymbols = {}

    # TODO: Use remove() if ready.
    for keys symbolId values symbolInfo in this.symbols
      # TODO: Remove this hack.
      if (symbolInfo.writeHits > 0) or (symbolInfo.readHits > 0) or (symbolInfo.kind is SYMBOL_KIND_VAR_PARAM) or (symbolInfo.kind is SYMBOL_KIND_VAR_RETVAL)
        # Variable is used at least once time. Keep it in table.
        newSymbols{symbolInfo.name} = symbolInfo

        # TODO: Clean up this mess.
        # Always keep return val.
        #if symbolInfo.kind is SYMBOL_KIND_VAR_RETVAL
        #  newSymbols{symbolInfo.alias} = symbolInfo
        #endif
      else
        # Variable was never accesed for read. Remove it from table.
        this._debug('Removed unused symbol [' ~ symbolInfo.name ~ ']')
      endif
    endfor

    this.symbols = newSymbols
  endmethod

  # ----------------------------------------------------------------------------
  #                               Label helpers
  # ----------------------------------------------------------------------------

  method createLabel() -> rv
    global SYMBOL_KIND_LABEL

    # TODO: Store labels in symbol table too.
    rv = 'l' ~ str(SymbolTable_GetNextId())
    this.insert(rv, {
      'name': rv,
      'kind': SYMBOL_KIND_LABEL
    })
  endmethod

  method insertJmpTable(jmpTable) -> newEntry
    global SYMBOL_KIND_JMP_TABLE
    name = '__jmptable' ~ str(SymbolTable_GetNextId())
    newEntry = {
      'name': name,
      'kind': SYMBOL_KIND_JMP_TABLE,
      'labels': jmpTable
    }
    this.insertGlobal(name, newEntry)
  endmethod

  # ----------------------------------------------------------------------------
  #                        Temporary variable helpers
  # ----------------------------------------------------------------------------

  method getTempVar(wantedType) -> rv
    # TODO: Review it.
    if this.poolOfTempVars{wantedType}.cnt > 0
      # Get first free temp var from pool
      poolObj = this.poolOfTempVars{wantedType}
      poolCnt = poolObj.cnt - 1

      poolObj.cnt = poolCnt
      rv = poolObj.pool[poolCnt]
      this._debug('Get temp var [' ~ rv ~ '] from pool (' ~ wantedType ~ ')')

    else
      # There is no free temp vars. Allocate new one.
      rv = 'tmp' ~ str(SymbolTable_GetNextId())
      this.insertLocal(rv)
      # TODO: Clean up this mess.
      symbolInfo        = this.lookup(rv)
      symbolInfo.isTemp = true
      symbolInfo.type   = wantedType
      this._debug('Allocated new temp var [' ~ rv ~ '] (' ~ wantedType ~ ')')
    endif

    #symbolInfo.refCnt = 1
  endmethod

  method getTempVarForWrite(wantedType) -> rv
    rv     = this.getTempVar(wantedType)
    unused = this.lookupForWrite(rv)
  endmethod

  method getTempVarForReadAndWrite(wantedType) -> rv
    rv     = this.getTempVar(wantedType)
    unused = this.lookupForReadAndWrite(rv)
  endmethod

  method releaseTempVar(name)
    symbolInfo = this._lookupInternal(name)
    # TODO: Clean up this mess.
    if ((symbolInfo is defined) and
        (symbolInfo.isTemp is defined) and
        (symbolInfo.isTemp is true))

      #symbolInfo.refCnt = symbolInfo.refCnt - 1

      #if symbolInfo.refCnt is 0
        # Variable is not used anymore.
        # Push back to pool of temp variables available to use.
        mirType = symbolInfo.type

        if mirType is defined
          poolObj = this.poolOfTempVars{mirType}
          poolObj.pool[poolObj.cnt] = symbolInfo.name
          poolObj.cnt               = poolObj.cnt + 1
        endif

        this._debug('Release temp var [' ~ symbolInfo.name ~ '] to pool (' ~ str(mirType) ~ ')')
      #endif
    endif
  endmethod
endclass
