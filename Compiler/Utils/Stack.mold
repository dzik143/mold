################################################################################
#                                                                              #
# This file is part of Mold project.                                           #
# Copyright (C) 2015, 2019 Sylwester Wysocki <sw143@wp.pl>                     #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program. If not, see <http://www.gnu.org/licenses/>          #
#                                                                              #
################################################################################

class Stack
  method constructor()
    this.data = []
    this.size = 0
  endmethod

  method getItems() -> rv
    # TODO: Optimize it.
    rv   = []
    data = this.data
    size = this.size

    for idx in 0 .. size
      rv[idx] = data[idx]
    endfor
  endmethod

  method push(x)
    this.data[this.size] = x
    this.size = this.size + 1
  endmethod

  method pop() -> rv
    if this.size is 0
      # TODO: Handle terminal node.
      rv = -1
      die('error: stack is empty')
    else

      this.size = this.size - 1
      rv = this.data[this.size]
    endif
  endmethod

  method over()
    this.push(this.data[this.size - 2])
  endmethod

  method dup()
    this.push(this.data[this.size - 1])
  endmethod

  method eat()
    this.size = this.size - 1
  endmethod

  method eatN(n)
    this.size = this.size - n
  endmethod

  method setByAbsoluteIdx(idx, val)
    this.data[idx] = val
  endmethod

  method getByAbsoluteIdx(idx) -> rv
    rv = this.data[idx]
  endmethod

  method peek() -> rv
    if this.size > 0
      rv = this.data[this.size - 1]
    else
      # TODO: Handle terminal nodes.
      rv = false
      die('error: peek from empty stack')
    endif
  endmethod

  method peekN(idx) -> rv
    if this.size >= idx
      rv = this.data[this.size - idx]
    else
      # TODO: Handle terminal nodes.
      rv = false
      die('error: peek ' + str(idx) + ' item, but only ' + str(this.size) + ' available')
    endif
  endmethod
endclass
