x = []
undefined = [0]
object = 0

NodeId = 1000

#import 'AST/AST.mold'
#import 'Parser/ParserMold.mold'

#class Parser
#endclass

DEBUG_AST_OPTIMIZER = true
UNICC_DEBUG         = true

import 'AppMold.mold'
import 'AST/ASTSymbolsCollector.mold'
import 'AST/ASTPrinterText.mold'
import 'AST/ASTPrinterHtml.mold'
import 'AST/ASTTranslatorMIR0.mold'
import 'AST/ASTTranslatorMIR1.mold'
import 'MIR/MIRQuadCollector.mold'
import 'CodeGenerator/CodeGeneratorX64.mold'
import 'VM/VMachineStack.mold'

import '1.ast'
#import 'Parser/ParserMold.mold'

#parser = new Parser()
#ast    = parser.parseFile(argv[1])

# Convert AST to form understood by translator.
# TODO: Remove this step.
#ast = ast.convert()


#print '<pre>'

app                         = new AppMold()
astSymbolsCollector         = app.getAstSymbolsCollector()
astOptimizerConstantFolding = app.getAstOptimizerConstantFolding()
astEvaluator                = app.getAstEvaluator()
astOptimizerCSE             = app.getAstOptimizerCSE()
astOptimizerDeadCodeRemove  = app.getAstOptimizerDeadCodeRemove()
astModuleResolver           = app.getAstModuleResolver()
astPrinterText              = new ASTPrinterText()
astPrinterHtml              = new ASTPrinterHtml()

if typeof(astModuleResolver) isnt 'undefined'
  print 'Resolving imports...'
  astModuleResolver.resolveImports(ast)
endif

print 'Building symbol table...'
astSymbolsCollector.buildSymbolTable(ast)

print 'Evaluate AST...'
astEvaluator.processNode(ast)

print 'Constant folding...'
astOptimizerConstantFolding.processNode(ast)

print 'Dead code elimination...'
astOptimizerDeadCodeRemove.processNode(ast)

print 'CSE...'
astOptimizerCSE.processNode(ast)

print 'Type cast...'
app.getAstTypeCast().processNode(ast)

#astPrinterText.printNode(ast)

#print '</pre>'


#astPrinterHtml.printNode(ast)

print 'Going to translate AST (init)...'
astTranslator     = new ASTTranslatorMIR1(app)
astTranslatorMIR0 = new ASTTranslatorMIR0(app)
vm                = new VMachineStack()

# TODO: MIR0 (stack based)
#print 'Going to translate AST to MIR0...'
#astTranslatorMIR0.run(ast)
#vm.loadCode(astTranslator.code)
#vm.dumpCode()

# MIR1 (register based)
print 'Going to translate AST to MIR1...'
mirCollector = new MIRQuadCollector()
astTranslator.connectTo(mirCollector)

astTranslator.run(ast)
mirCollector.printQuads()

# TODO: Better way to pass quads + meta + symbolTable.
code = astTranslator.code
code.quads = mirCollector.getQuads()
code.symbolTable = app.getSymbolTable()

# Generate x64 code.
codeGenerator = new CodeGeneratorX64()
codeGenerator.run(code)
