x = []
undefined = x[0]
object = 0

NodeId = 1000


#import 'AST/AST.mold'
#import 'Parser/ParserMold.mold'

#class Parser
#endclass

DEBUG_AST_OPTIMIZER = true
UNICC_DEBUG         = true

import 'Utils/SymbolTable.mold'
import 'AppMold.mold'
import 'AST/ASTSymbolsCollector.mold'
import 'AST/ASTPrinterText.mold'
import 'AST/ASTPrinterHtml.mold'
import 'AST/ASTTranslatorMIR0.mold'

import 'AST/ASTTranslatorMIR1.mold'
import 'MIR/MIRQuadCollector.mold'
import 'MIR/MIRQuadOptimizer.mold'
import 'CodeGenerator/CodeGeneratorX64.mold'
import 'VM/VMachineStack.mold'

import '1.ast'
#import 'Parser/ParserMold.mold'

#parser = new Parser()
#ast    = parser.parseFile(argv[1])

# Convert AST to form understood by translator.
# TODO: Remove this step.
#ast = ast.convert()

DEBUG_AST_OPTIMIZER = true
DEBUG_MOLD = true


#print '<pre>'

app                 = new AppMold()
astSymbolsCollector = app.getAstSymbolsCollector()
astModuleResolver   = app.getAstModuleResolver()
astPrinterText      = new ASTPrinterText()
astPrinterHtml      = new ASTPrinterHtml()

if typeof(astModuleResolver) isnt 'undefined'
  print 'Resolving imports...'
  astModuleResolver.resolveImports(ast)
endif

# Preprocess AST to expand built-in constructions.
# Example: x is defined => typeof(x) isnt 'undefined'
app.logDebug('Preprocessing AST nodes...')
app.getAstPreprocessor().processNode(ast)

app.logDebug('Building symbol table...')
astSymbolsCollector.buildSymbolTable(ast)

# ------------------------------------------------------------------------------
/*
# TODO: More generic way to apply selected optimizations.
app.logDebug('VCall optimization...')
app.getAstOptimizerVCall().processNode(ast)

app.logDebug('Inline optimization... (TEMPORARY DISABLED!)')
#app.getAstOptimizerInline().processNode(ast)

# Evaluate values stored inside nodes before go-on with
# further AST optimization.
app.logDebug('Evaluating AST nodes...')
app.getAstEvaluator().processNode(ast)

app.logDebug('Constant folding...')
app.getAstOptimizerConstantFolding().processNode(ast)

app.logDebug('If optimization...')
app.getAstOptimizerIf().processNode(ast)

app.logDebug('Dead code elimination...')
app.getAstOptimizerDeadCodeRemove().processNode(ast)

app.logDebug('Common subexpression elimination (CSE)...')
app.getAstOptimizerCSE().processNode(ast)
*/
# ------------------------------------------------------------------------------

print 'Type cast...'
app.getAstTypeCast().processNode(ast)

#astPrinterText.printNode(ast)

#print '</pre>'


#astPrinterHtml.printNode(ast)

print 'Going to translate AST (init)...'
astTranslator = new ASTTranslatorMIR1(app)

# MIR1 (register based)
print 'Going to translate AST to MIR1...'
mirCollector = new MIRQuadCollector()
mirOptimizer = new MIRQuadOptimizer()
astTranslator.connectTo(mirCollector)
#astTranslator.connectTo(mirOptimizer).connectTo(mirCollector)

astTranslator.run(ast)

print 'Going to print MIR1 code...'
mirCollector.printQuads()

# TODO: Better way to pass quads + meta + symbolTable.
print 'Going to generate x64 code...'
code = astTranslator.code
code.quads = mirCollector.getQuads()
code.symbolTable = app.getSymbolTable()

# Generate x64 code.
codeGenerator = new CodeGeneratorX64()
codeGenerator.run(code)
