format PE64 console 5.0
entry __MOLD_Main
include 'win64a.inc'
; ------------------------------------------------------------------------------
;                                 Code section
; ------------------------------------------------------------------------------
section '.text' code readable executable
stack 1024*1024*4, 1024*1024*4
include 'Variant.asm'
; -----------------------------------------------
; function debug
; -----------------------------------------------
debug:
  ; init frame
  ; ----------
  tmp1187 EQU rbp - 24 ; 16 bytes
  tmp1184 EQU rbp - 28 ; 4 bytes
  tmp1183 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ msg ], xmm0
  mov [tmp1187 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1184 ], 1
  xor  eax, eax
  or   dword [ UNICC_DEBUG ], eax
  setz cl
  or   dword [ tmp1184 ], eax
  setz al
  xor  al, cl
  jnz l1185
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l1185:
l1186:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1187 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore msg
  restore tmp1183
  restore tmp1184
  restore tmp1187
; -----------------------------------------------
; function __AST_constructor$3
; -----------------------------------------------
__AST_constructor$3:
  ; init frame
  ; ----------
  tmp1190 EQU rbp - 12 ; 4 bytes
  tmp1189 EQU rbp - 28 ; 16 bytes
  tmp1188 EQU rbp - 32 ; 4 bytes
  token EQU rbp - 48 ; 16 bytes
  emit EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ emit ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ token ], xmm0
  mov [tmp1189 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1188 ], 0
  mov [ tmp1189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1188 ]
  mov [ tmp1189 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1189 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1188 ], 0
  mov [ tmp1189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1188 ]
  mov [ tmp1189 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1189 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1188 ], 0
  mov [ tmp1189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1188 ]
  mov [ tmp1189 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1189 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1188 ], 0
  mov [ tmp1189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1188 ]
  mov [ tmp1189 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1189 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ emit ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ token ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1189 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ NodeId ]
  mov [ tmp1189 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1189 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1190 ], 1
  mov eax, dword [ NodeId ]
  add eax, dword [ tmp1190 ]
  mov dword [ NodeId ], eax

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1189 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore emit
  restore token
  restore tmp1188
  restore tmp1189
  restore tmp1190
; -----------------------------------------------
; function __AST__printInternal$3
; -----------------------------------------------
__AST__printInternal$3:
  ; init frame
  ; ----------
  i EQU rbp - 12 ; 4 bytes
  prefix EQU rbp - 28 ; 16 bytes
  tmp1206 EQU rbp - 44 ; 16 bytes
  tmp1203 EQU rbp - 48 ; 4 bytes
  tmp1202 EQU rbp - 64 ; 16 bytes
  tmp1201 EQU rbp - 80 ; 16 bytes
  tmp1198 EQU rbp - 84 ; 4 bytes
  tmp1197 EQU rbp - 88 ; 4 bytes
  tmp1196 EQU rbp - 92 ; 4 bytes
  tmp1195 EQU rbp - 108 ; 16 bytes
  tmp1194 EQU rbp - 112 ; 4 bytes
  tmp1193 EQU rbp - 128 ; 16 bytes
  deepIdx EQU rbp - 144 ; 16 bytes
  node EQU rbp - 160 ; 16 bytes
  this EQU rbp - 176 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ deepIdx ], xmm0
  mov [tmp1193 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1195 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1201 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1202 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1206 + Variant_t.type], VARIANT_UNDEFINED
  mov [prefix + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
l1191:
  mov dword [ tmp1194 ], 0
  mov [ tmp1195 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1194 ]
  mov [ tmp1195 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ tmp1195 ]
  lea  r8 , [ tmp1193 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1193 + Variant_t.value]
  mov dword [ tmp1196 ], eax
  cmp dword [ tmp1196 ], 0
  jz l1192
  lea  rcx, [ prefix ]
  call __MOLD_VariantDestroy
  lea rcx, [ prefix ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  mov dword [ tmp1194 ], 1
  mov eax, dword [ deepIdx + Variant_t.value]
  mov dword [ tmp1197 ], eax
  mov dword [ i ], 0
l1199:
  mov eax, dword [ i ]
  cmp eax, dword [ tmp1197 ]
  jge l1200
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal9 ]
  lea  r8 , [ prefix ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ i ]
  add eax, dword [ tmp1194 ]
  mov dword [ i ], eax
  jmp l1199
l1200:
  lea  rcx, [ tmp1195 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp1195 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1198 ], 0
  mov [ tmp1202 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1198 ]
  mov [ tmp1202 + Variant_t.value], rax
  lea  rcx , [ tmp1195 ]
  lea  rdx , [ tmp1202 ]
  lea  r8 , [ tmp1193 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1193 + Variant_t.value]
  mov dword [ tmp1203 ], eax
  cmp dword [ tmp1203 ], 0
  jz l1204
  lea  rcx, [ tmp1195 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ tmp1195 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1202 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1195 ]
  lea  rdi , [ tmp1202 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1201 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ tmp1202 ]
  lea  r8 , [ tmp1201 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1202 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp1202 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp1201 ]
  lea  r8 , [ tmp1202 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l1205
l1204:
  lea  rcx, [ tmp1195 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ tmp1195 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1202 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1195 ]
  lea  rdi , [ tmp1202 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1201 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ tmp1202 ]
  lea  r8 , [ tmp1201 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp1201 ]
  call  __MOLD_PrintVariantLn
l1205:
  lea  rcx, [ tmp1202 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1202 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1198 ], 1
  mov [ tmp1206 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1198 ]
  mov [ tmp1206 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp1206 ]
  lea  r8 , [ tmp1195 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp1193 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1202 ]
  lea  r8 , [ tmp1195 ]
  lea  rdi , [ tmp1193 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AST__printInternal$3
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantLoadFromKey
  jmp l1191
l1192:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1193 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1195 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1202 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1206 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore node
  restore deepIdx
  restore tmp1193
  restore tmp1194
  restore tmp1195
  restore tmp1196
  restore tmp1197
  restore tmp1198
  restore tmp1201
  restore tmp1202
  restore tmp1203
  restore tmp1206
  restore prefix
  restore i
; -----------------------------------------------
; function __AST_print$1
; -----------------------------------------------
__AST_print$1:
  ; init frame
  ; ----------
  tmp1209 EQU rbp - 24 ; 16 bytes
  tmp1208 EQU rbp - 28 ; 4 bytes
  tmp1207 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1207 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1209 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ __literal10 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal11 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal10 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp1208 ], 0
  mov [ tmp1209 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1208 ]
  mov [ tmp1209 + Variant_t.value], rax
  lea  rcx, [ tmp1207 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ this ]
  lea  r8 , [ tmp1209 ]
  lea  rdi , [ tmp1207 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AST__printInternal$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1207 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1209 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp1207
  restore tmp1208
  restore tmp1209
; -----------------------------------------------
; function __AST__convertInternal$3
; -----------------------------------------------
__AST__convertInternal$3:
  ; init frame
  ; ----------
  newChild EQU rbp - 24 ; 16 bytes
  tmp1227 EQU rbp - 28 ; 4 bytes
  oneParam EQU rbp - 44 ; 16 bytes
  idx EQU rbp - 60 ; 16 bytes
  newParams EQU rbp - 76 ; 16 bytes
  tmp1222 EQU rbp - 92 ; 16 bytes
  tmp1219 EQU rbp - 96 ; 4 bytes
  tmp1216 EQU rbp - 100 ; 4 bytes
  tmp1213 EQU rbp - 104 ; 4 bytes
  tmp1212 EQU rbp - 120 ; 16 bytes
  tmp1211 EQU rbp - 124 ; 4 bytes
  tmp1210 EQU rbp - 140 ; 16 bytes
  value EQU rbp - 156 ; 16 bytes
  opcode EQU rbp - 172 ; 16 bytes
  childrenCnt EQU rbp - 176 ; 4 bytes
  children EQU rbp - 192 ; 16 bytes
  rv EQU rdi
  deepIdx EQU rbp - 208 ; 16 bytes
  node EQU rbp - 224 ; 16 bytes
  this EQU rbp - 240 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ deepIdx ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1210 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1212 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1222 + Variant_t.type], VARIANT_UNDEFINED
  mov [newParams + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [newChild + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ rv ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  call  __MOLD_VariantArrayCreate
  mov dword [ childrenCnt ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1211 ], 102
  mov [ tmp1212 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1211 ]
  mov [ tmp1212 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1212 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1210 + Variant_t.value]
  mov dword [ tmp1213 ], eax
  cmp dword [ tmp1213 ], 0
  jz l1214
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1215
l1214:
  mov dword [ tmp1211 ], 103
  mov [ tmp1212 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1211 ]
  mov [ tmp1212 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1212 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1210 + Variant_t.value]
  mov dword [ tmp1216 ], eax
  cmp dword [ tmp1216 ], 0
  jz l1217
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1218
l1217:
  mov dword [ tmp1211 ], 104
  mov [ tmp1212 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1211 ]
  mov [ tmp1212 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1212 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1210 + Variant_t.value]
  mov dword [ tmp1219 ], eax
  cmp dword [ tmp1219 ], 0
  jz l1220
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1210 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1212 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1212 + Variant_t.value], 0
  lea  rcx, [ tmp1222 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1222 ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1210 ]
  lea  rdx , [ tmp1212 ]
  lea  r8 , [ tmp1222 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ newParams ]
  lea rdx, [ tmp1210 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys idx values oneParam
; 
  jmp l1224
l1223:
  mov dword [ tmp1211 ], 1
  mov [ tmp1212 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1211 ]
  mov [ tmp1212 + Variant_t.value], rax
  lea  rcx , [ idx ]
  lea  rdx , [ tmp1212 ]
  lea  r8 , [ tmp1222 ]
  call  __MOLD_VariantAdd
  mov eax, dword [ tmp1222 + Variant_t.value]
  mov dword [ tmp1211 ], eax
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp1211 ]
  lea  r8 , [ oneParam ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l1224:
  lea  rcx , [ tmp1210 ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l1223 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys idx values oneParam
; -----------------------------
; 
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ newParams ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
l1220:
l1221:
l1218:
l1215:
  lea  rcx , [ rv ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal20 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal20 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal21 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal21 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantLoadFromKey
l1225:
  mov dword [ tmp1211 ], 0
  mov [ tmp1222 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1211 ]
  mov [ tmp1222 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ tmp1222 ]
  lea  r8 , [ tmp1210 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1210 + Variant_t.value]
  mov dword [ tmp1213 ], eax
  cmp dword [ tmp1213 ], 0
  jz l1226
  mov dword [ tmp1211 ], 1
  mov [ tmp1212 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1211 ]
  mov [ tmp1212 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp1212 ]
  lea  r8 , [ tmp1222 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp1222 ]
  lea  rdi , [ tmp1210 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AST__convertInternal$3
  pop rdi
  lea  rcx, [ newChild ]
  call __MOLD_VariantDestroy
  lea rcx, [ newChild ]
  lea rdx, [ tmp1210 ]
  call __MOLD_VariantMove
  lea  rcx , [ children ]
  lea  rdx , [ childrenCnt ]
  lea  r8 , [ newChild ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1227 ], 1
  mov eax, dword [ childrenCnt ]
  add eax, dword [ tmp1227 ]
  mov dword [ childrenCnt ], eax
  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  jmp l1225
l1226:
  lea  rcx , [ rv ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1210 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1212 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1222 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator idx
  ; Skipped loop iterator oneParam
  lea  rcx, [ newChild ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore node
  restore deepIdx
  restore rv
  restore children
  restore childrenCnt
  restore opcode
  restore value
  restore tmp1210
  restore tmp1211
  restore tmp1212
  restore tmp1213
  restore tmp1216
  restore tmp1219
  restore tmp1222
  restore newParams
  restore idx
  restore oneParam
  restore tmp1227
  restore newChild
; -----------------------------------------------
; function __AST_convert$1
; -----------------------------------------------
__AST_convert$1:
  ; init frame
  ; ----------
  tmp1230 EQU rbp - 24 ; 16 bytes
  tmp1229 EQU rbp - 28 ; 4 bytes
  tmp1228 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1228 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1230 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1229 ], 0
  mov [ tmp1230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1229 ]
  mov [ tmp1230 + Variant_t.value], rax
  lea  rcx, [ tmp1228 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ this ]
  lea  r8 , [ tmp1230 ]
  lea  rdi , [ tmp1228 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AST__convertInternal$3
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1228 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1228 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1230 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1228
  restore tmp1229
  restore tmp1230
; -----------------------------------------------
; function __Parser_constructor$1
; -----------------------------------------------
__Parser_constructor$1:
  ; init frame
  ; ----------
  tmp1231 EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1231 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1231 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1231 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal24 ]
  lea  r8 , [ tmp1231 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1231 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp1231
; -----------------------------------------------
; function __Parser__handleError$4
; -----------------------------------------------
__Parser__handleError$4:
  ; init frame
  ; ----------
  tmp1241 EQU rbp - 24 ; 16 bytes
  tmp1240 EQU rbp - 40 ; 16 bytes
  tmp1239 EQU rbp - 56 ; 16 bytes
  tmp1238 EQU rbp - 72 ; 16 bytes
  tmp1237 EQU rbp - 88 ; 16 bytes
  tmp1236 EQU rbp - 104 ; 16 bytes
  tmp1235 EQU rbp - 120 ; 16 bytes
  tmp1234 EQU rbp - 136 ; 16 bytes
  tmp1233 EQU rbp - 152 ; 16 bytes
  tmp1232 EQU rbp - 168 ; 16 bytes
  msg EQU rbp - 184 ; 16 bytes
  column EQU rbp - 200 ; 16 bytes
  line EQU rbp - 216 ; 16 bytes
  this EQU rbp - 232 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ line ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ column ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ msg ], xmm0
  mov [tmp1232 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1233 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1234 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1235 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1236 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1237 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1238 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1239 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1240 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1241 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1234 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1234 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ line ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1240 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ column ]
  lea  rdi , [ tmp1240 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1241 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal26 ]
  lea  rdx , [ msg ]
  lea  r8 , [ tmp1241 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1239 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1240 ]
  lea  rdx , [ tmp1241 ]
  lea  r8 , [ tmp1239 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1238 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal25 ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1238 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1238 ]
  lea  r8 , [ tmp1236 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal25 ]
  lea  rdx , [ tmp1236 ]
  lea  r8 , [ tmp1235 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1233 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1234 ]
  lea  rdx , [ tmp1235 ]
  lea  r8 , [ tmp1233 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1232 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1233 ]
  lea  rdi , [ tmp1232 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1232 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1234 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1240 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore line
  restore column
  restore msg
  restore tmp1232
  restore tmp1233
  restore tmp1234
  restore tmp1235
  restore tmp1236
  restore tmp1237
  restore tmp1238
  restore tmp1239
  restore tmp1240
  restore tmp1241
; -----------------------------------------------
; function __Parser__parseInternal$2
; -----------------------------------------------
__Parser__parseInternal$2:
  ; init frame
  ; ----------
  go EQU rbp - 24 ; 16 bytes
  goIdx EQU rbp - 28 ; 4 bytes
  lnode EQU rbp - 44 ; 16 bytes
  i EQU rbp - 48 ; 4 bytes
  stringLen EQU rbp - 64 ; 16 bytes
  __cse0 EQU rbp - 80 ; 16 bytes
  node EQU rbp - 96 ; 16 bytes
  emit EQU rbp - 112 ; 16 bytes
  currentProductionLength EQU rbp - 128 ; 16 bytes
  newBufCnt EQU rbp - 132 ; 4 bytes
  newValue EQU rbp - 148 ; 16 bytes
  nextChar EQU rbp - 164 ; 16 bytes
  idx EQU rbp - 168 ; 4 bytes
  numberOfBytesToRead EQU rbp - 172 ; 4 bytes
  lexInnerGoOn EQU rbp - 176 ; 4 bytes
  next EQU rbp - 192 ; 16 bytes
  mach EQU rbp - 208 ; 16 bytes
  chr EQU rbp - 224 ; 16 bytes
  length EQU rbp - 228 ; 4 bytes
  dfa_st EQU rbp - 244 ; 16 bytes
  reduceIter EQU rbp - 248 ; 4 bytes
  cnt EQU rbp - 264 ; 16 bytes
  act EQU rbp - 280 ; 16 bytes
  state EQU rbp - 296 ; 16 bytes
  actionIdx EQU rbp - 300 ; 4 bytes
  rv EQU rbp - 304 ; 4 bytes
  currentLen EQU rbp - 308 ; 4 bytes
  currentSym EQU rbp - 324 ; 16 bytes
  tmp1407 EQU rbp - 328 ; 4 bytes
  tmp1399 EQU rbp - 344 ; 16 bytes
  tmp1376 EQU rbp - 348 ; 4 bytes
  tmp1375 EQU rbp - 352 ; 4 bytes
  tmp1303 EQU rbp - 368 ; 16 bytes
  tmp1291 EQU rbp - 384 ; 16 bytes
  tmp1290 EQU rbp - 400 ; 16 bytes
  tmp1289 EQU rbp - 416 ; 16 bytes
  tmp1286 EQU rbp - 420 ; 4 bytes
  tmp1281 EQU rbp - 424 ; 4 bytes
  tmp1278 EQU rbp - 428 ; 4 bytes
  tmp1276 EQU rbp - 432 ; 4 bytes
  tmp1275 EQU rbp - 436 ; 4 bytes
  tmp1270 EQU rbp - 452 ; 16 bytes
  tmp1268 EQU rbp - 456 ; 4 bytes
  tmp1267 EQU rbp - 460 ; 4 bytes
  tmp1263 EQU rbp - 464 ; 4 bytes
  tmp1261 EQU rbp - 468 ; 4 bytes
  tmp1256 EQU rbp - 472 ; 4 bytes
  tmp1253 EQU rbp - 476 ; 4 bytes
  tmp1248 EQU rbp - 492 ; 16 bytes
  tmp1247 EQU rbp - 508 ; 16 bytes
  tmp1246 EQU rbp - 524 ; 16 bytes
  tmp1245 EQU rbp - 540 ; 16 bytes
  tmp1244 EQU rbp - 544 ; 4 bytes
  tmp1243 EQU rbp - 560 ; 16 bytes
  tmp1242 EQU rbp - 564 ; 4 bytes
  stackColumns EQU rbp - 580 ; 16 bytes
  stackLines EQU rbp - 596 ; 16 bytes
  stackStates EQU rbp - 612 ; 16 bytes
  stackNodes EQU rbp - 628 ; 16 bytes
  stackValues EQU rbp - 644 ; 16 bytes
  stackIdx EQU rbp - 648 ; 4 bytes
  currentRet EQU rbp - 664 ; 16 bytes
  currentLhs EQU rbp - 680 ; 16 bytes
  currentIdx EQU rbp - 696 ; 16 bytes
  currentAct EQU rbp - 712 ; 16 bytes
  constantsMap EQU rbp - 728 ; 16 bytes
  bufSize EQU rbp - 732 ; 4 bytes
  buf EQU rbp - 748 ; 16 bytes
  lookupByte EQU rbp - 764 ; 16 bytes
  column EQU rbp - 768 ; 4 bytes
  line EQU rbp - 772 ; 4 bytes
  inputLen EQU rbp - 788 ; 16 bytes
  inputIdx EQU rbp - 792 ; 4 bytes
  input EQU rbp - 808 ; 16 bytes
  masterIter EQU rbp - 812 ; 4 bytes
  innerGoOn EQU rbp - 816 ; 4 bytes
  goOn EQU rbp - 820 ; 4 bytes
  ast EQU rdi
  text EQU rbp - 836 ; 16 bytes
  this EQU rbp - 852 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 880

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  mov [input + Variant_t.type], VARIANT_UNDEFINED
  mov [inputLen + Variant_t.type], VARIANT_UNDEFINED
  mov [lookupByte + Variant_t.type], VARIANT_UNDEFINED
  mov [buf + Variant_t.type], VARIANT_UNDEFINED
  mov [constantsMap + Variant_t.type], VARIANT_UNDEFINED
  mov [currentAct + Variant_t.type], VARIANT_UNDEFINED
  mov [currentIdx + Variant_t.type], VARIANT_UNDEFINED
  mov [currentLhs + Variant_t.type], VARIANT_UNDEFINED
  mov [currentRet + Variant_t.type], VARIANT_UNDEFINED
  mov [stackValues + Variant_t.type], VARIANT_UNDEFINED
  mov [stackNodes + Variant_t.type], VARIANT_UNDEFINED
  mov [stackStates + Variant_t.type], VARIANT_UNDEFINED
  mov [stackLines + Variant_t.type], VARIANT_UNDEFINED
  mov [stackColumns + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1243 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1245 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1246 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1247 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1248 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1270 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1289 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1290 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1291 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1303 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1399 + Variant_t.type], VARIANT_UNDEFINED
  mov [currentSym + Variant_t.type], VARIANT_UNDEFINED
  mov [state + Variant_t.type], VARIANT_UNDEFINED
  mov [act + Variant_t.type], VARIANT_UNDEFINED
  mov [cnt + Variant_t.type], VARIANT_UNDEFINED
  mov [dfa_st + Variant_t.type], VARIANT_UNDEFINED
  mov [chr + Variant_t.type], VARIANT_UNDEFINED
  mov [mach + Variant_t.type], VARIANT_UNDEFINED
  mov [next + Variant_t.type], VARIANT_UNDEFINED
  mov [nextChar + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [currentProductionLength + Variant_t.type], VARIANT_UNDEFINED
  mov [emit + Variant_t.type], VARIANT_UNDEFINED
  mov [node + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse0 + Variant_t.type], VARIANT_UNDEFINED
  mov [stringLen + Variant_t.type], VARIANT_UNDEFINED
  mov [lnode + Variant_t.type], VARIANT_UNDEFINED
  mov [go + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1242 ], 0
  mov [ ast + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ ast + Variant_t.value], rax
  mov dword [ goOn ], 1
  mov dword [ innerGoOn ], 1
  mov dword [ masterIter ], 1
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ text ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ __literal28 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal27 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  lea  rcx, [ input ]
  call __MOLD_VariantDestroy
  lea rcx, [ input ]
  lea rdx, [ text ]
  call __MOLD_VariantMove
  mov dword [ inputIdx ], 0
  lea  rcx, [ inputLen ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ text ]
  lea  rdi , [ inputLen ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ line ], 1
  mov dword [ column ], 1
  mov dword [ tmp1242 ], 0
  mov [ lookupByte + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ lookupByte + Variant_t.value], rax
  mov dword [ tmp1242 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ inputLen ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1244 ], eax
  cmp dword [ tmp1244 ], 0
  jz l1249
  mov dword [ tmp1242 ], 0
  lea  rcx, [ lookupByte ]
  call __MOLD_VariantDestroy
  lea  rcx , [ input ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ lookupByte ]
  call  __MOLD_VariantLoadFromIndex_int32
l1249:
l1250:
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1247 + Variant_t.value], 0
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1248 ]
  lea rdx, [ lookupByte ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ buf ]
  call __MOLD_VariantDestroy
  lea rcx, [ buf ]
  lea rdx, [ tmp1243 ]
  call __MOLD_VariantMove
  mov dword [ bufSize ], 1
  mov dword [ inputIdx ], 1
  lea  rcx, [ constantsMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal24 ]
  lea  r8 , [ constantsMap ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1242 ], 0
  mov [ currentAct + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ currentAct + Variant_t.value], rax
  mov dword [ tmp1242 ], 0
  mov [ currentIdx + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ currentIdx + Variant_t.value], rax
  mov dword [ tmp1242 ], 0
  mov [ currentLhs + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ currentLhs + Variant_t.value], rax
  mov dword [ tmp1242 ], 0
  mov [ currentRet + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ currentRet + Variant_t.value], rax
  mov dword [ stackIdx ], 0
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1248 + Variant_t.value], 0
  mov dword [ tmp1242 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackValues ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackValues ]
  lea rdx, [ tmp1243 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1247 + Variant_t.value], 0
  mov dword [ tmp1242 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackNodes ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackNodes ]
  lea rdx, [ tmp1243 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1248 + Variant_t.value], 0
  mov dword [ tmp1242 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackStates ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackStates ]
  lea rdx, [ tmp1243 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1247 + Variant_t.value], 0
  mov dword [ tmp1242 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackLines ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackLines ]
  lea rdx, [ tmp1243 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1248 + Variant_t.value], 0
  mov dword [ tmp1242 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackColumns ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackColumns ]
  lea rdx, [ tmp1243 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal29 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
l1251:
  mov dword [ tmp1253 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp1253 ], eax
  setz al
  xor  al, cl
  jnz l1252
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal8 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal30 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ masterIter ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal31 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov dword [ tmp1242 ], -1
  mov [ currentSym + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ currentSym + Variant_t.value], rax
  mov dword [ currentLen ], 0
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ tmp1248 + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_select ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], -1
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1253 ], eax
  cmp dword [ tmp1253 ], 0
  jz l1254
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal32 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov dword [ tmp1242 ], 0
  mov [ dfa_st + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ dfa_st + Variant_t.value], rax
  mov dword [ length ], 0
  mov dword [ tmp1242 ], 0
  mov [ chr + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ chr + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ tmp1248 + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ mach ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_select ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ mach ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], 0
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ next ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ next ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1242 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ next ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1256 ], eax
  cmp dword [ tmp1256 ], 0
  jz l1257
  mov dword [ tmp1242 ], 0
  mov [ currentSym + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ currentSym + Variant_t.value], rax
  jmp l1258
l1257:
l1259:
  mov dword [ tmp1261 ], 0
  mov dword [ tmp1242 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ dfa_st ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1263 ], eax
  cmp dword [ tmp1263 ], 0
  jz l1262
  mov dword [ tmp1242 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ next ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1261 ], eax
l1262:
  cmp dword [ tmp1261 ], 0
  jz l1260
  mov dword [ lexInnerGoOn ], 1
  mov eax, dword [ mach + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_idx ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ dfa_st + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ chr ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ chr ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], -1
  mov [ dfa_st + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ dfa_st + Variant_t.value], rax
l1264:
  mov dword [ tmp1263 ], 0
  mov dword [ tmp1268 ], 1
  xor  eax, eax
  or   dword [ lexInnerGoOn ], eax
  setz cl
  or   dword [ tmp1268 ], eax
  setz al
  xor  al, cl
  jnz l1266
  mov eax, dword [ chr + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_chars ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], -1
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1263 ], eax
l1266:
  cmp dword [ tmp1263 ], 0
  jz l1265
  mov dword [ tmp1267 ], 0
  mov eax, dword [ chr + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_chars ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ next ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
  cmp dword [ tmp1268 ], 0
  jz l1269
  mov dword [ tmp1242 ], 1
  mov [ tmp1270 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1270 + Variant_t.value], rax
  lea  rcx , [ chr ]
  lea  rdx , [ tmp1270 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantAdd
  mov eax, dword [ tmp1248 + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_chars ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ next ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
l1269:
  cmp dword [ tmp1267 ], 0
  jz l1271
  mov dword [ tmp1242 ], 2
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ chr ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantDivAsInteger
  mov eax, dword [ tmp1247 + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ dfa_st ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_trans ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ dfa_st ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ mach + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_accept ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ dfa_st + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
  cmp dword [ tmp1268 ], 0
  jz l1273
  mov dword [ tmp1275 ], 1
  mov eax, dword [ length ]
  add eax, dword [ tmp1275 ]
  mov dword [ currentLen ], eax
  mov eax, dword [ mach + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _dfa_accept ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ dfa_st + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], 1
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ currentSym ]
  call  __MOLD_VariantSub
  mov dword [ tmp1276 ], 1
  mov dword [ tmp1242 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ currentSym ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1278 ], eax
  cmp dword [ tmp1278 ], 0
  jnz l1277
  mov eax, dword [ currentSym + Variant_t.value]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _symbolsGreedy ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1276 ], eax
l1277:
  cmp dword [ tmp1276 ], 0
  jz l1279
  mov dword [ tmp1242 ], -1
  mov [ dfa_st + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ dfa_st + Variant_t.value], rax
l1279:
l1280:
l1273:
l1274:
  mov dword [ tmp1275 ], 1
  mov eax, dword [ length ]
  add eax, dword [ tmp1275 ]
  mov dword [ length ], eax
  mov eax, dword [ length ]
  sub eax, dword [ bufSize ]
  mov dword [ tmp1275 ], eax
  mov dword [ tmp1281 ], 2
  mov eax, dword [ tmp1275 ]
  add eax, dword [ tmp1281 ]
  mov dword [ numberOfBytesToRead ], eax
  mov dword [ tmp1242 ], 1
  mov dword [ idx ], 0
l1282:
  mov eax, dword [ idx ]
  cmp eax, dword [ numberOfBytesToRead ]
  jge l1283
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ inputIdx ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ inputLen ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
  cmp dword [ tmp1268 ], 0
  jz l1284
  lea  rcx, [ nextChar ]
  call __MOLD_VariantDestroy
  lea  rcx , [ input ]
  lea  rdx , [ inputIdx ]
  lea  r8 , [ nextChar ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1286 ], 1
  mov eax, dword [ inputIdx ]
  add eax, dword [ tmp1286 ]
  mov dword [ inputIdx ], eax
  jmp l1285
l1284:
  mov dword [ tmp1275 ], 0
  mov [ nextChar + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1275 ]
  mov [ nextChar + Variant_t.value], rax
l1285:
  lea  rcx , [ buf ]
  lea  rdx , [ bufSize ]
  lea  r8 , [ nextChar ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1286 ], 1
  mov eax, dword [ bufSize ]
  add eax, dword [ tmp1286 ]
  mov dword [ bufSize ], eax
  mov eax, dword [ idx ]
  add eax, dword [ tmp1242 ]
  mov dword [ idx ], eax
  jmp l1282
l1283:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ length ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ next ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ next ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  mov dword [ lexInnerGoOn ], 0
l1271:
l1272:
  mov dword [ tmp1281 ], 2
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ chr ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ chr ]
  call  __MOLD_VariantAdd
  jmp l1264
l1265:
  jmp l1259
l1260:
l1258:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentSym ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal33 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  jmp l1255
l1254:
  mov dword [ tmp1281 ], 0
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1256 ], eax
  cmp dword [ tmp1256 ], 0
  jz l1287
  mov dword [ tmp1281 ], 0
  mov [ currentSym + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ currentSym + Variant_t.value], rax
l1287:
l1288:
l1255:
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentSym ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp1270 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLen ]
  mov [ tmp1270 + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1270 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1291 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1291 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1290 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal36 ]
  lea  rdx , [ tmp1291 ]
  lea  r8 , [ tmp1290 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1289 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal34 ]
  lea  rdx , [ tmp1290 ]
  lea  r8 , [ tmp1289 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1289 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal35 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov dword [ rv ], -1
  mov dword [ actionIdx ], 1
  lea  rcx, [ state ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ state ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ state + Variant_t.value]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ act ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _act ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ act ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], 0
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ act ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], 3
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ cnt ]
  call  __MOLD_VariantMul
l1292:
  mov dword [ tmp1253 ], 0
  mov dword [ tmp1281 ], -1
  mov eax, dword [ rv ]
  cmp eax, dword [ tmp1281 ]
  jnz l1294
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ actionIdx ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ cnt ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1253 ], eax
l1294:
  cmp dword [ tmp1253 ], 0
  jz l1293
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ act ]
  lea  rdx , [ actionIdx ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ currentSym ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1256 ], eax
  cmp dword [ tmp1256 ], 0
  jz l1295
  mov dword [ tmp1242 ], 1
  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1242 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentAct ]
  call __MOLD_VariantDestroy
  lea  rcx , [ act ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentAct ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ currentAct ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1297
  mov dword [ rv ], 0
  jmp l1298
l1297:
  mov dword [ tmp1242 ], 2
  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1242 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentIdx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ act ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentIdx ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ rv ], 1
l1298:
l1295:
l1296:
  mov dword [ tmp1242 ], 3
  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1242 ]
  mov dword [ actionIdx ], eax
  jmp l1292
l1293:
  mov dword [ tmp1281 ], -1
  mov eax, dword [ rv ]
  cmp eax, dword [ tmp1281 ]
  jnz l1299
  mov eax, dword [ state + Variant_t.value]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentIdx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _def_prod ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentIdx ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], -1
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ currentIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1301
  mov dword [ tmp1281 ], 1
  mov [ currentAct + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ currentAct + Variant_t.value], rax
  mov dword [ rv ], 1
  jmp l1302
l1301:
  mov dword [ rv ], 0
l1302:
l1299:
l1300:
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ rv ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1247 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentAct ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1270 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentIdx ]
  lea  rdi , [ tmp1270 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1303 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1270 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1303 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1291 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal39 ]
  lea  rdx , [ tmp1303 ]
  lea  r8 , [ tmp1291 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1290 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1291 ]
  lea  r8 , [ tmp1290 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1289 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal38 ]
  lea  rdx , [ tmp1290 ]
  lea  r8 , [ tmp1289 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1289 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal37 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov dword [ tmp1281 ], 0
  mov eax, dword [ rv ]
  cmp eax, dword [ tmp1281 ]
  jnz l1304
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1248 + Variant_t.value], rax
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  lea  r9 , [ __literal40 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__handleError$4
  pop rdi
l1304:
l1305:
  mov dword [ tmp1281 ], 2
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentAct ]
  lea  rdx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1281 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1256 ], eax
  cmp dword [ tmp1256 ], 0
  jz l1306
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal41 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  lea  rcx, [ nextChar ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ currentLen ]
  lea  r8 , [ nextChar ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1242 ], 1
  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1242 ]
  mov dword [ stackIdx ], eax
  mov dword [ tmp1242 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1242 ]
  mov dword [ tmp1281 ], eax
  mov dword [ tmp1242 ], 0
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1281 ], 1
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentAct ]
  lea  rdx , [ tmp1247 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1281 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1308
  mov dword [ tmp1281 ], -1
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l1309
l1308:
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ currentIdx ]
  call  __MOLD_VariantStoreAtIndex_int32
l1309:
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackLines ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackColumns ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValue ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  mov dword [ tmp1281 ], 1
  mov dword [ idx ], 0
l1310:
  mov eax, dword [ idx ]
  cmp eax, dword [ currentLen ]
  jge l1311
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ newValue ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ idx ]
  add eax, dword [ tmp1281 ]
  mov dword [ idx ], eax
  jmp l1310
l1311:
  mov dword [ tmp1281 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1281 ]
  mov dword [ tmp1242 ], eax
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1242 ], 0
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx , [ buf ]
  lea  rdx , [ currentLen ]
  lea  r8 , [ nextChar ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1267 ], 0
  mov dword [ tmp1242 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ currentSym ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
  cmp dword [ tmp1268 ], 0
  jz l1312
  mov dword [ tmp1281 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1281 ]
  mov dword [ tmp1242 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ currentSym ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
l1312:
  cmp dword [ tmp1267 ], 0
  jz l1313
  mov dword [ tmp1242 ], 0
  mov eax, dword [ currentLen ]
  cmp eax, dword [ tmp1242 ]
  jle l1315
  mov dword [ tmp1242 ], 1
  mov dword [ idx ], 0
l1317:
  mov eax, dword [ idx ]
  cmp eax, dword [ currentLen ]
  jge l1318
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1275 ], 10
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1275 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1276 ], eax
  cmp dword [ tmp1276 ], 0
  jz l1319
  mov dword [ tmp1286 ], 1
  mov eax, dword [ line ]
  add eax, dword [ tmp1286 ]
  mov dword [ line ], eax
  mov dword [ column ], 1
  jmp l1320
l1319:
  mov dword [ tmp1286 ], 1
  mov eax, dword [ column ]
  add eax, dword [ tmp1286 ]
  mov dword [ column ], eax
l1320:
  mov eax, dword [ idx ]
  add eax, dword [ tmp1242 ]
  mov dword [ idx ], eax
  jmp l1317
l1318:
  mov eax, dword [ bufSize ]
  sub eax, dword [ currentLen ]
  mov dword [ newBufCnt ], eax
  mov dword [ tmp1281 ], 1
  mov dword [ idx ], 0
l1321:
  mov eax, dword [ idx ]
  cmp eax, dword [ newBufCnt ]
  jge l1322
  mov eax, dword [ idx ]
  add eax, dword [ currentLen ]
  mov dword [ tmp1275 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1275 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp1281 ]
  mov dword [ idx ], eax
  jmp l1321
l1322:
  mov eax, dword [ newBufCnt ]
  mov dword [ bufSize ], eax
  jmp l1316
l1315:
  mov dword [ bufSize ], 0
l1316:
  mov dword [ tmp1242 ], 0
  mov eax, dword [ bufSize ]
  cmp eax, dword [ tmp1242 ]
  jnz l1323
  mov dword [ tmp1242 ], 0
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ input ]
  lea  rdx , [ inputIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ bufSize ], 1
  mov dword [ tmp1281 ], 1
  mov eax, dword [ inputIdx ]
  add eax, dword [ tmp1281 ]
  mov dword [ inputIdx ], eax
l1323:
l1324:
  mov dword [ tmp1242 ], -1
  mov [ currentSym + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ currentSym + Variant_t.value], rax
  mov dword [ currentLen ], 0
l1313:
l1314:
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal42 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
l1306:
l1307:
  mov dword [ innerGoOn ], 1
  mov dword [ reduceIter ], 1
l1325:
  mov dword [ tmp1256 ], 0
  mov dword [ tmp1268 ], 1
  xor  eax, eax
  or   dword [ innerGoOn ], eax
  setz cl
  or   dword [ tmp1268 ], eax
  setz al
  xor  al, cl
  jnz l1327
  mov dword [ tmp1242 ], 1
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentAct ]
  lea  rdx , [ tmp1247 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1242 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1242 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1256 ], eax
l1327:
  cmp dword [ tmp1256 ], 0
  jz l1326
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal8 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal30 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ masterIter ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp1270 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ reduceIter ]
  mov [ tmp1270 + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1270 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1289 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal44 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1289 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1289 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal43 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov eax, dword [ currentIdx + Variant_t.value]
  mov dword [ tmp1242 ], eax
  cmp dword [ tmp1242 ], 0
  jl l1329
  cmp dword [ tmp1242 ], 249
  jg l1329
  mov eax, dword [ tmp1242 ]
  jmp qword [ __jmptable1330 + rax * 8]
l1331:
  mov dword [ tmp1275 ], 1
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1328
l1332:
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1328
l1333:
  mov dword [ tmp1281 ], 0
  mov [ currentRet + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ currentRet + Variant_t.value], rax
  jmp l1328
l1334:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal45 ]
  call __MOLD_VariantMove
  jmp l1328
l1335:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantMove
  jmp l1328
l1336:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal47 ]
  call __MOLD_VariantMove
  jmp l1328
l1337:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal48 ]
  call __MOLD_VariantMove
  jmp l1328
l1338:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal49 ]
  call __MOLD_VariantMove
  jmp l1328
l1339:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1328
l1340:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1270 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1270 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1270 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1341
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1247 + Variant_t.value], rax
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1248 + Variant_t.value], rax
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1270 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1270 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1270 ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal51 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1248 ]
  lea  r9 , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__handleError$4
  pop rdi
l1341:
l1342:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1328
l1343:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1344:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1275 ], 4
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1243 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1345:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1275 ], 3
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1275 ], 1
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1346:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1275 ], 5
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1275 ], 3
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1347:
  mov dword [ tmp1275 ], 3
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1328
l1348:
  mov dword [ tmp1275 ], 3
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentRet ]
  lea  rdx , [ tmp1243 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  jmp l1328
l1349:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1243 + Variant_t.value], 0
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1350:
  mov dword [ tmp1275 ], 4
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1328
l1351:
  mov dword [ tmp1275 ], 5
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1328
l1352:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentRet ]
  lea  rdx , [ tmp1247 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  jmp l1328
l1353:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1247 + Variant_t.value], 0
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1354:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal53 ]
  call __MOLD_VariantMove
  jmp l1328
l1355:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal54 ]
  call __MOLD_VariantMove
  jmp l1328
l1356:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1357:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1248 ]
  call __MOLD_VariantMove
  jmp l1328
l1358:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal55 ]
  call __MOLD_VariantMove
  jmp l1328
l1359:
  mov dword [ tmp1281 ], 1
  mov [ currentRet + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ currentRet + Variant_t.value], rax
  jmp l1328
l1360:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantAdd
  jmp l1328
l1361:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantSub
  jmp l1328
l1362:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantMul
  jmp l1328
l1363:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantDiv
  jmp l1328
l1364:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStringJoin
  jmp l1328
l1365:
  mov dword [ tmp1275 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantDivAsInteger
  jmp l1328
l1366:
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ currentRet ]
  call  __MOLD_VariantNeg
  jmp l1328
l1367:
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentRet ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1368
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1247 + Variant_t.value], rax
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1248 ]
  lea  r9 , [ __literal56 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__handleError$4
  pop rdi
l1368:
l1369:
  jmp l1328
l1370:
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ currentRet ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  33
  call  __MOLD_SysCall
  pop rdi
  jmp l1328
l1371:
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ currentRet ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  34
  call  __MOLD_SysCall
  pop rdi
  jmp l1328
l1372:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  mov dword [ tmp1275 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ stringLen ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ stringLen ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1281 ], 1
  mov dword [ tmp1275 ], 1
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1275 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ stringLen ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1275 ], eax
  mov dword [ idx ], 1
l1373:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp1275 ]
  jge l1374
  mov dword [ tmp1376 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ tmp1375 ], eax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1375 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ currentRet ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ idx ]
  add eax, dword [ tmp1281 ]
  mov dword [ idx ], eax
  jmp l1373
l1374:
  jmp l1328
l1377:
  mov dword [ tmp1267 ], 1
  mov eax, dword [ tmp1267 ]
  mov [ currentRet + Variant_t.type], VARIANT_BOOLEAN
  mov [ currentRet + Variant_t.value], rax
  jmp l1328
l1378:
  mov dword [ tmp1267 ], 0
  mov eax, dword [ tmp1267 ]
  mov [ currentRet + Variant_t.type], VARIANT_BOOLEAN
  mov [ currentRet + Variant_t.value], rax
  jmp l1328
l1379:
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1248 + Variant_t.value], rax
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  lea  r9 , [ __literal57 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__handleError$4
  pop rdi
  jmp l1328
l1329:
  mov dword [ tmp1286 ], 249
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1286 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ currentIdx ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1380
  mov dword [ tmp1275 ], 1
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1275 ]
  mov dword [ tmp1286 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1286 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
l1380:
l1381:
l1328:
  mov dword [ tmp1286 ], 3
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1286 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ currentIdx ]
  lea  r8 , [ __cse0 ]
  call  __MOLD_VariantMul
  mov dword [ tmp1286 ], 2
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1286 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantAdd
  mov eax, dword [ tmp1247 + Variant_t.value]
  mov dword [ tmp1286 ], eax
  lea  rcx, [ currentLhs ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _productions ]
  lea  rdx , [ tmp1286 ]
  lea  r8 , [ currentLhs ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1286 ], 1
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1286 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantAdd
  mov eax, dword [ tmp1247 + Variant_t.value]
  mov dword [ tmp1286 ], eax
  lea  rcx, [ currentProductionLength ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _productions ]
  lea  rdx , [ tmp1286 ]
  lea  r8 , [ currentProductionLength ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1286 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1286 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantAdd
  mov eax, dword [ tmp1247 + Variant_t.value]
  mov dword [ tmp1286 ], eax
  lea  rcx, [ emit ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _productions ]
  lea  rdx , [ tmp1286 ]
  lea  r8 , [ emit ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1286 ], 0
  mov [ node + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1286 ]
  mov [ node + Variant_t.value], rax
  mov dword [ tmp1286 ], 1
  mov eax, dword [ currentProductionLength + Variant_t.value]
  mov dword [ tmp1275 ], eax
  mov dword [ i ], 0
l1382:
  mov eax, dword [ i ]
  cmp eax, dword [ tmp1275 ]
  jge l1383
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1375 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1375 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1384
  mov dword [ tmp1375 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1375 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
  cmp dword [ tmp1268 ], 0
  jz l1386
l1388:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1375 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1375 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1276 ], eax
  cmp dword [ tmp1276 ], 0
  jz l1389
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantLoadFromKey
  jmp l1388
l1389:
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
l1386:
l1387:
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ node ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1375 ], 0
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1375 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
l1384:
l1385:
  mov dword [ tmp1376 ], 1
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1376 ]
  mov dword [ stackIdx ], eax
  mov eax, dword [ i ]
  add eax, dword [ tmp1286 ]
  mov dword [ i ], eax
  jmp l1382
l1383:
  mov dword [ tmp1281 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1390
  lea  rcx, [ lnode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ lnode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ lnode ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
  cmp dword [ tmp1268 ], 0
  jz l1392
l1394:
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lnode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1281 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1278 ], eax
  cmp dword [ tmp1278 ], 0
  jz l1395
  lea  rcx , [ lnode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ lnode ]
  call  __MOLD_VariantLoadFromKey
  jmp l1394
l1395:
  lea  rcx , [ lnode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ lnode ]
  call  __MOLD_VariantStoreAtKey
  jmp l1393
l1392:
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtIndex_int32
l1393:
l1390:
l1391:
  mov dword [ tmp1281 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ emit ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
  cmp dword [ tmp1267 ], 0
  jz l1396
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1243 ]
  lea  rdx, [vtable_AST]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ emit ]
  lea  r8 , [ currentRet ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AST_constructor$3
  pop rdi
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea rcx, [ node ]
  lea rdx, [ tmp1243 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal20 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal21 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtKey
l1396:
l1397:
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentLhs ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1291 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1291 ]
  lea rdx, [ __const1398 ]
  call __MOLD_VariantMove
  mov [ tmp1270 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ stackIdx ]
  mov [ tmp1270 + Variant_t.value], rax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1270 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1399 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ __literal61 ]
  lea  r8 , [ tmp1399 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1303 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal60 ]
  lea  rdx , [ tmp1399 ]
  lea  r8 , [ tmp1303 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1290 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1291 ]
  lea  rdx , [ tmp1303 ]
  lea  r8 , [ tmp1290 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1289 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal59 ]
  lea  rdx , [ tmp1290 ]
  lea  r8 , [ tmp1289 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1289 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal58 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov dword [ tmp1267 ], 0
  mov dword [ tmp1281 ], 70
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ currentLhs ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
  cmp dword [ tmp1268 ], 0
  jz l1400
  mov dword [ tmp1281 ], 0
  mov dword [ tmp1267 ], 0
  mov ecx, dword [ stackIdx ]
  cmp ecx, dword [ tmp1281 ]
  setz byte [ tmp1267 ]
l1400:
  cmp dword [ tmp1267 ], 0
  jz l1401
  mov dword [ tmp1281 ], 0
  mov eax, dword [ currentLen ]
  cmp eax, dword [ tmp1281 ]
  jle l1403
  mov dword [ tmp1281 ], 1
  mov dword [ idx ], 0
l1405:
  mov eax, dword [ idx ]
  cmp eax, dword [ currentLen ]
  jge l1406
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1247 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1286 ], 10
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1286 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1407 ], eax
  cmp dword [ tmp1407 ], 0
  jz l1408
  mov dword [ tmp1375 ], 1
  mov eax, dword [ line ]
  add eax, dword [ tmp1375 ]
  mov dword [ line ], eax
  mov dword [ column ], 1
  jmp l1409
l1408:
  mov dword [ tmp1375 ], 1
  mov eax, dword [ column ]
  add eax, dword [ tmp1375 ]
  mov dword [ column ], eax
l1409:
  mov eax, dword [ idx ]
  add eax, dword [ tmp1281 ]
  mov dword [ idx ], eax
  jmp l1405
l1406:
  mov eax, dword [ bufSize ]
  sub eax, dword [ currentLen ]
  mov dword [ newBufCnt ], eax
  mov dword [ tmp1275 ], 1
  mov dword [ idx ], 0
l1410:
  mov eax, dword [ idx ]
  cmp eax, dword [ newBufCnt ]
  jge l1411
  mov eax, dword [ idx ]
  add eax, dword [ currentLen ]
  mov dword [ tmp1286 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1286 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp1275 ]
  mov dword [ idx ], eax
  jmp l1410
l1411:
  mov eax, dword [ newBufCnt ]
  mov dword [ bufSize ], eax
  jmp l1404
l1403:
  mov dword [ bufSize ], 0
l1404:
  mov dword [ tmp1281 ], 0
  mov eax, dword [ bufSize ]
  cmp eax, dword [ tmp1281 ]
  jnz l1412
  mov dword [ tmp1281 ], 0
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ input ]
  lea  rdx , [ inputIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ bufSize ], 1
  mov dword [ tmp1275 ], 1
  mov eax, dword [ inputIdx ]
  add eax, dword [ tmp1275 ]
  mov dword [ inputIdx ], eax
l1412:
l1413:
  lea  rcx , [ stackValues ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ ast ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], -1
  mov [ currentSym + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ currentSym + Variant_t.value], rax
  mov dword [ currentLen ], 0
  mov dword [ innerGoOn ], 0
  jmp l1402
l1401:
  mov dword [ rv ], 0
  mov dword [ goIdx ], 1
  lea  rcx, [ state ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ state ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ state + Variant_t.value]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ go ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _go ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ go ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], 0
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ go ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ tmp1247 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1281 ], 3
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ cnt ]
  call  __MOLD_VariantMul
l1414:
  mov dword [ tmp1268 ], 0
  mov dword [ tmp1281 ], 0
  mov eax, dword [ rv ]
  cmp eax, dword [ tmp1281 ]
  jnz l1416
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ goIdx ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ cnt ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1268 ], eax
l1416:
  cmp dword [ tmp1268 ], 0
  jz l1415
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ go ]
  lea  rdx , [ goIdx ]
  lea  r8 , [ tmp1248 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ currentLhs ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1407 ], eax
  cmp dword [ tmp1407 ], 0
  jz l1417
  mov dword [ tmp1275 ], 1
  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentAct ]
  call __MOLD_VariantDestroy
  lea  rcx , [ go ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentAct ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1275 ], 2
  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1275 ]
  mov dword [ tmp1281 ], eax
  lea  rcx, [ currentIdx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ go ]
  lea  rdx , [ tmp1281 ]
  lea  r8 , [ currentIdx ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ rv ], 1
l1417:
l1418:
  mov dword [ tmp1275 ], 3
  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1275 ]
  mov dword [ goIdx ], eax
  jmp l1414
l1415:
  mov dword [ tmp1275 ], 1
  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1275 ]
  mov dword [ stackIdx ], eax
  mov dword [ tmp1281 ], 0
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx , [ stackValues ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackLines ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackColumns ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1281 ], 1
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentAct ]
  lea  rdx , [ tmp1247 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1281 ], 0
  mov [ tmp1247 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1247 + Variant_t.value], rax
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1247 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1407 ], eax
  cmp dword [ tmp1407 ], 0
  jz l1419
  mov dword [ tmp1281 ], -1
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l1420
l1419:
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ currentIdx ]
  call  __MOLD_VariantStoreAtIndex_int32
l1420:
l1402:
  mov dword [ tmp1275 ], 1
  mov eax, dword [ reduceIter ]
  add eax, dword [ tmp1275 ]
  mov dword [ reduceIter ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal62 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  jmp l1325
l1326:
  mov dword [ tmp1281 ], 1
  mov [ tmp1270 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1270 + Variant_t.value], rax
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentAct ]
  lea  rdx , [ tmp1270 ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentIdx ]
  lea  rdi , [ tmp1248 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1399 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1399 ]
  lea rdx, [ __const1421 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1291 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1399 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1291 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1303 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal64 ]
  lea  rdx , [ tmp1291 ]
  lea  r8 , [ tmp1303 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1290 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1248 ]
  lea  rdx , [ tmp1303 ]
  lea  r8 , [ tmp1290 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1289 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal39 ]
  lea  rdx , [ tmp1290 ]
  lea  r8 , [ tmp1289 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1289 ]
  lea  r8 , [ tmp1246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal63 ]
  lea  rdx , [ tmp1246 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1245 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  debug
  pop rdi
  mov dword [ tmp1267 ], 0
  mov dword [ tmp1281 ], 1
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ currentAct ]
  lea  rdx , [ tmp1248 ]
  lea  rdi , [ tmp1247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1281 ], 0
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ tmp1247 ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1407 ], eax
  cmp dword [ tmp1407 ], 0
  jz l1422
  mov dword [ tmp1281 ], 249
  mov [ tmp1248 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1281 ]
  mov [ tmp1248 + Variant_t.value], rax
  lea  rcx , [ currentIdx ]
  lea  rdx , [ tmp1248 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1267 ], eax
l1422:
  cmp dword [ tmp1267 ], 0
  jz l1423
  mov dword [ goOn ], 0
l1423:
l1424:
  mov dword [ tmp1275 ], 1
  mov eax, dword [ masterIter ]
  add eax, dword [ tmp1275 ]
  mov dword [ masterIter ], eax
  mov dword [ tmp1281 ], 1000000
  mov eax, dword [ masterIter ]
  cmp eax, dword [ tmp1281 ]
  jle l1425
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal65 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l1425:
l1426:
  jmp l1251
l1252:

  ; clean frame
  ; -----------
  lea  rcx, [ input ]
  call __MOLD_VariantDestroy
  lea  rcx, [ inputLen ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lookupByte ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buf ]
  call __MOLD_VariantDestroy
  lea  rcx, [ constantsMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentAct ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentIdx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentLhs ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackNodes ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackStates ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackLines ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackColumns ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1247 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1248 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1270 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentSym ]
  call __MOLD_VariantDestroy
  lea  rcx, [ state ]
  call __MOLD_VariantDestroy
  lea  rcx, [ act ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dfa_st ]
  call __MOLD_VariantDestroy
  lea  rcx, [ chr ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mach ]
  call __MOLD_VariantDestroy
  lea  rcx, [ next ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nextChar ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentProductionLength ]
  call __MOLD_VariantDestroy
  lea  rcx, [ emit ]
  call __MOLD_VariantDestroy
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse0 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stringLen ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lnode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ go ]
  call __MOLD_VariantDestroy

  add  rsp, 880
  pop  rbp
  ret

  restore this
  restore text
  restore ast
  restore goOn
  restore innerGoOn
  restore masterIter
  restore input
  restore inputIdx
  restore inputLen
  restore line
  restore column
  restore lookupByte
  restore buf
  restore bufSize
  restore constantsMap
  restore currentAct
  restore currentIdx
  restore currentLhs
  restore currentRet
  restore stackIdx
  restore stackValues
  restore stackNodes
  restore stackStates
  restore stackLines
  restore stackColumns
  restore tmp1242
  restore tmp1243
  restore tmp1244
  restore tmp1245
  restore tmp1246
  restore tmp1247
  restore tmp1248
  restore tmp1253
  restore tmp1256
  restore tmp1261
  restore tmp1263
  restore tmp1267
  restore tmp1268
  restore tmp1270
  restore tmp1275
  restore tmp1276
  restore tmp1278
  restore tmp1281
  restore tmp1286
  restore tmp1289
  restore tmp1290
  restore tmp1291
  restore tmp1303
  restore tmp1375
  restore tmp1376
  restore tmp1399
  restore tmp1407
  restore currentSym
  restore currentLen
  restore rv
  restore actionIdx
  restore state
  restore act
  restore cnt
  restore reduceIter
  restore dfa_st
  restore length
  restore chr
  restore mach
  restore next
  restore lexInnerGoOn
  restore numberOfBytesToRead
  restore idx
  restore nextChar
  restore newValue
  restore newBufCnt
  restore currentProductionLength
  restore emit
  restore node
  restore __cse0
  restore stringLen
  restore i
  restore lnode
  restore goIdx
  restore go
; -----------------------------------------------
; function __Parser_parseFile$2
; -----------------------------------------------
__Parser_parseFile$2:
  ; init frame
  ; ----------
  tmp1427 EQU rbp - 24 ; 16 bytes
  ast EQU rdi
  source EQU rbp - 40 ; 16 bytes
  path EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ path ], xmm0
  mov [source + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1427 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ source ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ path ]
  lea  rdi , [ source ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  29
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ path ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1427 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ source ]
  lea  rdi , [ tmp1427 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__parseInternal$2
  pop rdi
  lea rcx, [ ast ]
  lea rdx, [ tmp1427 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ source ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1427 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore path
  restore source
  restore ast
  restore tmp1427
; -----------------------------------------------
; function __Parser_parseText$2
; -----------------------------------------------
__Parser_parseText$2:
  ; init frame
  ; ----------
  tmp1428 EQU rbp - 24 ; 16 bytes
  ast EQU rdi
  text EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  mov [tmp1428 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ __literal8 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1428 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ text ]
  lea  rdi , [ tmp1428 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__parseInternal$2
  pop rdi
  lea rcx, [ ast ]
  lea rdx, [ tmp1428 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1428 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore text
  restore ast
  restore tmp1428
; -----------------------------------------------
; function AST_GetNextId
; -----------------------------------------------
AST_GetNextId:
  ; init frame
  ; ----------
  tmp1431 EQU rbp - 12 ; 4 bytes
  tmp1430 EQU rbp - 16 ; 4 bytes
  tmp1429 EQU rbp - 32 ; 16 bytes
  rv EQU rdi

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  mov [tmp1429 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ NodeId ]
  mov [ rv + Variant_t.value], rax
  mov dword [ tmp1431 ], 1
  mov eax, dword [ NodeId ]
  add eax, dword [ tmp1431 ]
  mov dword [ NodeId ], eax

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1429 ]
  call __MOLD_VariantDestroy

  add  rsp, 64
  pop  rbp
  ret

  restore rv
  restore tmp1429
  restore tmp1430
  restore tmp1431
; -----------------------------------------------
; function AST_CreateNodeInteger
; -----------------------------------------------
AST_CreateNodeInteger:
  ; init frame
  ; ----------
  tmp1434 EQU rbp - 24 ; 16 bytes
  tmp1433 EQU rbp - 40 ; 16 bytes
  tmp1432 EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  value EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ value ], xmm0
  mov [tmp1432 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1433 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1434 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1432 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1432 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1434 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp1434 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp1433 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1433 ]
  lea rdx, [ tmp1434 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1432 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1433 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1433 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_DATA_INTEGER ]
  mov [ tmp1433 + Variant_t.value], rax
  lea  rcx , [ tmp1432 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1433 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1433 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1433 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1432 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp1433 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1433 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1433 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1432 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1433 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ rv ]
  lea rdx, [ tmp1432 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1432 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1433 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1434 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore value
  restore rv
  restore tmp1432
  restore tmp1433
  restore tmp1434
; -----------------------------------------------
; function AST_GetOpcodeAsText
; -----------------------------------------------
AST_GetOpcodeAsText:
  ; init frame
  ; ----------
  tmp1481 EQU rbp - 24 ; 16 bytes
  tmp1480 EQU rbp - 40 ; 16 bytes
  tmp1479 EQU rbp - 56 ; 16 bytes
  tmp1435 EQU rbp - 60 ; 4 bytes
  rv EQU rdi
  opcode EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ opcode ], xmm0
  mov [tmp1479 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1480 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1481 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp1435 ], eax
  cmp dword [ tmp1435 ], 1
  jl l1437
  cmp dword [ tmp1435 ], 999
  jg l1437
  mov eax, dword [ tmp1435 ]
  jmp qword [ __jmptable1438 + rax * 8]
l1439:
  lea rcx, [ rv ]
  lea rdx, [ __literal66 ]
  call __MOLD_VariantMove
  jmp l1436
l1440:
  lea rcx, [ rv ]
  lea rdx, [ __literal67 ]
  call __MOLD_VariantMove
  jmp l1436
l1441:
  lea rcx, [ rv ]
  lea rdx, [ __literal68 ]
  call __MOLD_VariantMove
  jmp l1436
l1442:
  lea rcx, [ rv ]
  lea rdx, [ __literal69 ]
  call __MOLD_VariantMove
  jmp l1436
l1443:
  lea rcx, [ rv ]
  lea rdx, [ __literal70 ]
  call __MOLD_VariantMove
  jmp l1436
l1444:
  lea rcx, [ rv ]
  lea rdx, [ __literal71 ]
  call __MOLD_VariantMove
  jmp l1436
l1445:
  lea rcx, [ rv ]
  lea rdx, [ __literal72 ]
  call __MOLD_VariantMove
  jmp l1436
l1446:
  lea rcx, [ rv ]
  lea rdx, [ __literal73 ]
  call __MOLD_VariantMove
  jmp l1436
l1447:
  lea rcx, [ rv ]
  lea rdx, [ __literal74 ]
  call __MOLD_VariantMove
  jmp l1436
l1448:
  lea rcx, [ rv ]
  lea rdx, [ __literal75 ]
  call __MOLD_VariantMove
  jmp l1436
l1449:
  lea rcx, [ rv ]
  lea rdx, [ __literal76 ]
  call __MOLD_VariantMove
  jmp l1436
l1450:
  lea rcx, [ rv ]
  lea rdx, [ __literal77 ]
  call __MOLD_VariantMove
  jmp l1436
l1451:
  lea rcx, [ rv ]
  lea rdx, [ __literal78 ]
  call __MOLD_VariantMove
  jmp l1436
l1452:
  lea rcx, [ rv ]
  lea rdx, [ __literal79 ]
  call __MOLD_VariantMove
  jmp l1436
l1453:
  lea rcx, [ rv ]
  lea rdx, [ __literal80 ]
  call __MOLD_VariantMove
  jmp l1436
l1454:
  lea rcx, [ rv ]
  lea rdx, [ __literal81 ]
  call __MOLD_VariantMove
  jmp l1436
l1455:
  lea rcx, [ rv ]
  lea rdx, [ __literal82 ]
  call __MOLD_VariantMove
  jmp l1436
l1456:
  lea rcx, [ rv ]
  lea rdx, [ __literal83 ]
  call __MOLD_VariantMove
  jmp l1436
l1457:
  lea rcx, [ rv ]
  lea rdx, [ __literal84 ]
  call __MOLD_VariantMove
  jmp l1436
l1458:
  lea rcx, [ rv ]
  lea rdx, [ __literal85 ]
  call __MOLD_VariantMove
  jmp l1436
l1459:
  lea rcx, [ rv ]
  lea rdx, [ __literal86 ]
  call __MOLD_VariantMove
  jmp l1436
l1460:
  lea rcx, [ rv ]
  lea rdx, [ __literal87 ]
  call __MOLD_VariantMove
  jmp l1436
l1461:
  lea rcx, [ rv ]
  lea rdx, [ __literal88 ]
  call __MOLD_VariantMove
  jmp l1436
l1462:
  lea rcx, [ rv ]
  lea rdx, [ __literal89 ]
  call __MOLD_VariantMove
  jmp l1436
l1463:
  lea rcx, [ rv ]
  lea rdx, [ __literal90 ]
  call __MOLD_VariantMove
  jmp l1436
l1464:
  lea rcx, [ rv ]
  lea rdx, [ __literal91 ]
  call __MOLD_VariantMove
  jmp l1436
l1465:
  lea rcx, [ rv ]
  lea rdx, [ __literal92 ]
  call __MOLD_VariantMove
  jmp l1436
l1466:
  lea rcx, [ rv ]
  lea rdx, [ __literal93 ]
  call __MOLD_VariantMove
  jmp l1436
l1467:
  lea rcx, [ rv ]
  lea rdx, [ __literal94 ]
  call __MOLD_VariantMove
  jmp l1436
l1468:
  lea rcx, [ rv ]
  lea rdx, [ __literal95 ]
  call __MOLD_VariantMove
  jmp l1436
l1469:
  lea rcx, [ rv ]
  lea rdx, [ __literal96 ]
  call __MOLD_VariantMove
  jmp l1436
l1470:
  lea rcx, [ rv ]
  lea rdx, [ __literal97 ]
  call __MOLD_VariantMove
  jmp l1436
l1471:
  lea rcx, [ rv ]
  lea rdx, [ __literal98 ]
  call __MOLD_VariantMove
  jmp l1436
l1472:
  lea rcx, [ rv ]
  lea rdx, [ __literal99 ]
  call __MOLD_VariantMove
  jmp l1436
l1473:
  lea rcx, [ rv ]
  lea rdx, [ __literal100 ]
  call __MOLD_VariantMove
  jmp l1436
l1474:
  lea rcx, [ rv ]
  lea rdx, [ __literal101 ]
  call __MOLD_VariantMove
  jmp l1436
l1475:
  lea rcx, [ rv ]
  lea rdx, [ __literal102 ]
  call __MOLD_VariantMove
  jmp l1436
l1476:
  lea rcx, [ rv ]
  lea rdx, [ __literal103 ]
  call __MOLD_VariantMove
  jmp l1436
l1477:
  lea rcx, [ rv ]
  lea rdx, [ __literal104 ]
  call __MOLD_VariantMove
  jmp l1436
l1478:
  lea rcx, [ rv ]
  lea rdx, [ __literal105 ]
  call __MOLD_VariantMove
  jmp l1436
l1437:
  lea  rcx, [ tmp1481 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1481 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1480 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1481 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp1480 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ __literal106 ]
  lea  rdx , [ tmp1480 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
l1436:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1481 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore opcode
  restore rv
  restore tmp1435
  restore tmp1479
  restore tmp1480
  restore tmp1481
; -----------------------------------------------
; function AST_GetOpcodeAsShortText
; -----------------------------------------------
AST_GetOpcodeAsShortText:
  ; init frame
  ; ----------
  tmp1526 EQU rbp - 24 ; 16 bytes
  tmp1525 EQU rbp - 40 ; 16 bytes
  tmp1524 EQU rbp - 56 ; 16 bytes
  tmp1482 EQU rbp - 60 ; 4 bytes
  rv EQU rdi
  opcode EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ opcode ], xmm0
  mov [tmp1524 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1525 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1526 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp1482 ], eax
  cmp dword [ tmp1482 ], 1
  jl l1484
  cmp dword [ tmp1482 ], 999
  jg l1484
  mov eax, dword [ tmp1482 ]
  jmp qword [ __jmptable1485 + rax * 8]
l1486:
  lea rcx, [ rv ]
  lea rdx, [ __literal107 ]
  call __MOLD_VariantMove
  jmp l1483
l1487:
  lea rcx, [ rv ]
  lea rdx, [ __literal108 ]
  call __MOLD_VariantMove
  jmp l1483
l1488:
  lea rcx, [ rv ]
  lea rdx, [ __literal109 ]
  call __MOLD_VariantMove
  jmp l1483
l1489:
  lea rcx, [ rv ]
  lea rdx, [ __literal110 ]
  call __MOLD_VariantMove
  jmp l1483
l1490:
  lea rcx, [ rv ]
  lea rdx, [ __literal111 ]
  call __MOLD_VariantMove
  jmp l1483
l1491:
  lea rcx, [ rv ]
  lea rdx, [ __literal112 ]
  call __MOLD_VariantMove
  jmp l1483
l1492:
  lea rcx, [ rv ]
  lea rdx, [ __literal113 ]
  call __MOLD_VariantMove
  jmp l1483
l1493:
  lea rcx, [ rv ]
  lea rdx, [ __literal114 ]
  call __MOLD_VariantMove
  jmp l1483
l1494:
  lea rcx, [ rv ]
  lea rdx, [ __literal115 ]
  call __MOLD_VariantMove
  jmp l1483
l1495:
  lea rcx, [ rv ]
  lea rdx, [ __literal116 ]
  call __MOLD_VariantMove
  jmp l1483
l1496:
  lea rcx, [ rv ]
  lea rdx, [ __literal117 ]
  call __MOLD_VariantMove
  jmp l1483
l1497:
  lea rcx, [ rv ]
  lea rdx, [ __literal118 ]
  call __MOLD_VariantMove
  jmp l1483
l1498:
  lea rcx, [ rv ]
  lea rdx, [ __literal119 ]
  call __MOLD_VariantMove
  jmp l1483
l1499:
  lea rcx, [ rv ]
  lea rdx, [ __literal120 ]
  call __MOLD_VariantMove
  jmp l1483
l1500:
  lea rcx, [ rv ]
  lea rdx, [ __literal121 ]
  call __MOLD_VariantMove
  jmp l1483
l1501:
  lea rcx, [ rv ]
  lea rdx, [ __literal122 ]
  call __MOLD_VariantMove
  jmp l1483
l1502:
  lea rcx, [ rv ]
  lea rdx, [ __literal123 ]
  call __MOLD_VariantMove
  jmp l1483
l1503:
  lea rcx, [ rv ]
  lea rdx, [ __literal124 ]
  call __MOLD_VariantMove
  jmp l1483
l1504:
  lea rcx, [ rv ]
  lea rdx, [ __literal125 ]
  call __MOLD_VariantMove
  jmp l1483
l1505:
  lea rcx, [ rv ]
  lea rdx, [ __literal126 ]
  call __MOLD_VariantMove
  jmp l1483
l1506:
  lea rcx, [ rv ]
  lea rdx, [ __literal127 ]
  call __MOLD_VariantMove
  jmp l1483
l1507:
  lea rcx, [ rv ]
  lea rdx, [ __literal128 ]
  call __MOLD_VariantMove
  jmp l1483
l1508:
  lea rcx, [ rv ]
  lea rdx, [ __literal129 ]
  call __MOLD_VariantMove
  jmp l1483
l1509:
  lea rcx, [ rv ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
  jmp l1483
l1510:
  lea rcx, [ rv ]
  lea rdx, [ __literal131 ]
  call __MOLD_VariantMove
  jmp l1483
l1511:
  lea rcx, [ rv ]
  lea rdx, [ __literal132 ]
  call __MOLD_VariantMove
  jmp l1483
l1512:
  lea rcx, [ rv ]
  lea rdx, [ __literal133 ]
  call __MOLD_VariantMove
  jmp l1483
l1513:
  lea rcx, [ rv ]
  lea rdx, [ __literal134 ]
  call __MOLD_VariantMove
  jmp l1483
l1514:
  lea rcx, [ rv ]
  lea rdx, [ __literal135 ]
  call __MOLD_VariantMove
  jmp l1483
l1515:
  lea rcx, [ rv ]
  lea rdx, [ __literal136 ]
  call __MOLD_VariantMove
  jmp l1483
l1516:
  lea rcx, [ rv ]
  lea rdx, [ __literal137 ]
  call __MOLD_VariantMove
  jmp l1483
l1517:
  lea rcx, [ rv ]
  lea rdx, [ __literal138 ]
  call __MOLD_VariantMove
  jmp l1483
l1518:
  lea rcx, [ rv ]
  lea rdx, [ __literal139 ]
  call __MOLD_VariantMove
  jmp l1483
l1519:
  lea rcx, [ rv ]
  lea rdx, [ __literal140 ]
  call __MOLD_VariantMove
  jmp l1483
l1520:
  lea rcx, [ rv ]
  lea rdx, [ __literal141 ]
  call __MOLD_VariantMove
  jmp l1483
l1521:
  lea rcx, [ rv ]
  lea rdx, [ __literal142 ]
  call __MOLD_VariantMove
  jmp l1483
l1522:
  lea rcx, [ rv ]
  lea rdx, [ __literal143 ]
  call __MOLD_VariantMove
  jmp l1483
l1523:
  lea rcx, [ rv ]
  lea rdx, [ __literal144 ]
  call __MOLD_VariantMove
  jmp l1483
l1484:
  lea rcx, [ rv ]
  lea rdx, [ __literal145 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1526 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1526 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1525 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal146 ]
  lea  rdx , [ tmp1526 ]
  lea  r8 , [ tmp1525 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1524 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1525 ]
  lea  rdi , [ tmp1524 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l1483:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1524 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1526 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore opcode
  restore rv
  restore tmp1482
  restore tmp1524
  restore tmp1525
  restore tmp1526
; -----------------------------------------------
; function AST_InvertBoolean
; -----------------------------------------------
AST_InvertBoolean:
  ; init frame
  ; ----------
  tmp1563 EQU rbp - 24 ; 16 bytes
  tmp1560 EQU rbp - 28 ; 4 bytes
  __cse2 EQU rbp - 44 ; 16 bytes
  tmp1557 EQU rbp - 48 ; 4 bytes
  __cse1 EQU rbp - 64 ; 16 bytes
  tmp1554 EQU rbp - 68 ; 4 bytes
  tmp1551 EQU rbp - 72 ; 4 bytes
  tmp1548 EQU rbp - 76 ; 4 bytes
  tmp1545 EQU rbp - 80 ; 4 bytes
  tmp1542 EQU rbp - 84 ; 4 bytes
  tmp1537 EQU rbp - 88 ; 4 bytes
  tmp1534 EQU rbp - 104 ; 16 bytes
  tmp1533 EQU rbp - 108 ; 4 bytes
  tmp1530 EQU rbp - 112 ; 4 bytes
  tmp1529 EQU rbp - 128 ; 16 bytes
  tmp1528 EQU rbp - 132 ; 4 bytes
  tmp1527 EQU rbp - 148 ; 16 bytes
  opcode EQU rbp - 164 ; 16 bytes
  node EQU rbp - 180 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1527 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1529 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1534 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse1 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse2 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1563 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1528 ], 5
  mov [ tmp1529 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1529 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1529 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1530 ], eax
  cmp dword [ tmp1530 ], 0
  jz l1531
  lea  rcx, [ tmp1529 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1529 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1533 ], 1
  mov eax, dword [ tmp1533 ]
  mov [ tmp1534 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ tmp1529 ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1533 ], eax
  cmp dword [ tmp1533 ], 0
  jz l1535
  mov dword [ tmp1537 ], 0
  mov eax, dword [ tmp1537 ]
  mov [ tmp1527 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1536
l1535:
  mov dword [ tmp1537 ], 1
  mov eax, dword [ tmp1537 ]
  mov [ tmp1527 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
l1536:
  jmp l1532
l1531:
  mov dword [ tmp1528 ], 400
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1533 ], eax
  cmp dword [ tmp1533 ], 0
  jz l1538
  mov dword [ tmp1528 ], 401
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1539
l1538:
  mov dword [ tmp1528 ], 401
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1537 ], eax
  cmp dword [ tmp1537 ], 0
  jz l1540
  mov dword [ tmp1528 ], 400
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1541
l1540:
  mov dword [ tmp1528 ], 405
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1542 ], eax
  cmp dword [ tmp1542 ], 0
  jz l1543
  mov dword [ tmp1528 ], 402
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1544
l1543:
  mov dword [ tmp1528 ], 404
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1545 ], eax
  cmp dword [ tmp1545 ], 0
  jz l1546
  mov dword [ tmp1528 ], 403
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1547
l1546:
  mov dword [ tmp1528 ], 402
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1548 ], eax
  cmp dword [ tmp1548 ], 0
  jz l1549
  mov dword [ tmp1528 ], 405
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1550
l1549:
  mov dword [ tmp1528 ], 403
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1551 ], eax
  cmp dword [ tmp1551 ], 0
  jz l1552
  mov dword [ tmp1528 ], 404
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1553
l1552:
  mov dword [ tmp1528 ], 500
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1554 ], eax
  cmp dword [ tmp1554 ], 0
  jz l1555
  lea  rcx, [ __cse1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ __cse1 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1528 ], 0
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse1 ]
  lea  rdx , [ tmp1528 ]
  lea  r8 , [ tmp1534 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1527 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1534 ]
  lea  rdi , [ tmp1527 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_InvertBoolean
  pop rdi
  mov dword [ tmp1528 ], 1
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse1 ]
  lea  rdx , [ tmp1528 ]
  lea  r8 , [ tmp1534 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1527 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1534 ]
  lea  rdi , [ tmp1527 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_InvertBoolean
  pop rdi
  mov dword [ tmp1528 ], 501
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1556
l1555:
  mov dword [ tmp1528 ], 501
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1557 ], eax
  cmp dword [ tmp1557 ], 0
  jz l1558
  lea  rcx, [ __cse2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ __cse2 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1528 ], 0
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse2 ]
  lea  rdx , [ tmp1528 ]
  lea  r8 , [ tmp1534 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1527 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1534 ]
  lea  rdi , [ tmp1527 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_InvertBoolean
  pop rdi
  mov dword [ tmp1528 ], 1
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse2 ]
  lea  rdx , [ tmp1528 ]
  lea  r8 , [ tmp1534 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1527 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1534 ]
  lea  rdi , [ tmp1527 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_InvertBoolean
  pop rdi
  mov dword [ tmp1528 ], 500
  mov [ tmp1527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1527 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1559
l1558:
  mov dword [ tmp1528 ], 600
  mov [ tmp1534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1528 ]
  mov [ tmp1534 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1527 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1527 + Variant_t.value]
  mov dword [ tmp1560 ], eax
  cmp dword [ tmp1560 ], 0
  jz l1561
  lea  rcx, [ tmp1529 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp1529 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1528 ], 0
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1529 ]
  lea  rdx , [ tmp1528 ]
  lea  r8 , [ tmp1534 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1527 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1534 ]
  lea  rdi , [ tmp1527 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_InvertBoolean
  pop rdi
  jmp l1562
l1561:
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1534 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1563 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal147 ]
  lea  rdx , [ tmp1534 ]
  lea  r8 , [ tmp1563 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1527 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1563 ]
  lea  rdi , [ tmp1527 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l1562:
l1559:
l1556:
l1553:
l1550:
l1547:
l1544:
l1541:
l1539:
l1532:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1527 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1529 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1534 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse2 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore node
  restore opcode
  restore tmp1527
  restore tmp1528
  restore tmp1529
  restore tmp1530
  restore tmp1533
  restore tmp1534
  restore tmp1537
  restore tmp1542
  restore tmp1545
  restore tmp1548
  restore tmp1551
  restore tmp1554
  restore __cse1
  restore tmp1557
  restore __cse2
  restore tmp1560
  restore tmp1563
; -----------------------------------------------
; function AST_IsVar
; -----------------------------------------------
AST_IsVar:
  ; init frame
  ; ----------
  tmp1567 EQU rbp - 24 ; 16 bytes
  tmp1566 EQU rbp - 28 ; 4 bytes
  tmp1565 EQU rbp - 44 ; 16 bytes
  tmp1564 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  x EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1564 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1565 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1567 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1565 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1565 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1566 ], 201
  mov [ tmp1567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1566 ]
  mov [ tmp1567 + Variant_t.value], rax
  lea  rcx , [ tmp1565 ]
  lea  rdx , [ tmp1567 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1564 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1565 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1567 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1564
  restore tmp1565
  restore tmp1566
  restore tmp1567
; -----------------------------------------------
; function AST_IsImm
; -----------------------------------------------
AST_IsImm:
  ; init frame
  ; ----------
  tmp1581 EQU rbp - 12 ; 4 bytes
  tmp1578 EQU rbp - 16 ; 4 bytes
  tmp1575 EQU rbp - 20 ; 4 bytes
  tmp1572 EQU rbp - 24 ; 4 bytes
  tmp1571 EQU rbp - 40 ; 16 bytes
  tmp1570 EQU rbp - 44 ; 4 bytes
  tmp1569 EQU rbp - 60 ; 16 bytes
  tmp1568 EQU rbp - 76 ; 16 bytes
  rv EQU rdi
  x EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1568 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1569 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1571 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1569 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1569 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1570 ], 9
  mov [ tmp1571 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1570 ]
  mov [ tmp1571 + Variant_t.value], rax
  lea  rcx , [ tmp1569 ]
  lea  rdx , [ tmp1571 ]
  lea  r8 , [ tmp1568 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1568 + Variant_t.value]
  mov dword [ tmp1572 ], eax
  cmp dword [ tmp1572 ], 0
  jz l1573
  lea  rcx, [ tmp1569 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1569 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1571 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1569 ]
  lea  rdi , [ tmp1571 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1571 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ
  jmp l1574
l1573:
  lea  rcx, [ tmp1571 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1571 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1570 ], 10
  mov [ tmp1569 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1570 ]
  mov [ tmp1569 + Variant_t.value], rax
  lea  rcx , [ tmp1571 ]
  lea  rdx , [ tmp1569 ]
  lea  r8 , [ tmp1568 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1568 + Variant_t.value]
  mov dword [ tmp1575 ], eax
  cmp dword [ tmp1575 ], 0
  jz l1576
  lea  rcx, [ tmp1571 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1571 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1571 ]
  lea  rdi , [ tmp1569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1569 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ
  jmp l1577
l1576:
  lea  rcx, [ tmp1569 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1569 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1570 ], 100
  mov [ tmp1571 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1570 ]
  mov [ tmp1571 + Variant_t.value], rax
  lea  rcx , [ tmp1569 ]
  lea  rdx , [ tmp1571 ]
  lea  r8 , [ tmp1568 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1568 + Variant_t.value]
  mov dword [ tmp1578 ], eax
  cmp dword [ tmp1578 ], 0
  jz l1579
  mov dword [ tmp1581 ], 1
  mov eax, dword [ tmp1581 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  jmp l1580
l1579:
  mov dword [ tmp1581 ], 0
  mov eax, dword [ tmp1581 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
l1580:
l1577:
l1574:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1568 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1569 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1571 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1568
  restore tmp1569
  restore tmp1570
  restore tmp1571
  restore tmp1572
  restore tmp1575
  restore tmp1578
  restore tmp1581
; -----------------------------------------------
; function AST_IsPrimitiveImm
; -----------------------------------------------
AST_IsPrimitiveImm:
  ; init frame
  ; ----------
  tmp1589 EQU rbp - 12 ; 4 bytes
  tmp1586 EQU rbp - 16 ; 4 bytes
  tmp1585 EQU rbp - 32 ; 16 bytes
  tmp1584 EQU rbp - 36 ; 4 bytes
  tmp1583 EQU rbp - 52 ; 16 bytes
  tmp1582 EQU rbp - 68 ; 16 bytes
  rv EQU rdi
  x EQU rbp - 84 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1582 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1583 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1585 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1583 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1583 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1584 ], 8
  mov [ tmp1585 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1584 ]
  mov [ tmp1585 + Variant_t.value], rax
  lea  rcx , [ tmp1583 ]
  lea  rdx , [ tmp1585 ]
  lea  r8 , [ tmp1582 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1582 + Variant_t.value]
  mov dword [ tmp1586 ], eax
  cmp dword [ tmp1586 ], 0
  jz l1587
  mov dword [ tmp1589 ], 1
  mov eax, dword [ tmp1589 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  jmp l1588
l1587:
  mov dword [ tmp1589 ], 0
  mov eax, dword [ tmp1589 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
l1588:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1582 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1583 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1585 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1582
  restore tmp1583
  restore tmp1584
  restore tmp1585
  restore tmp1586
  restore tmp1589
; -----------------------------------------------
; function AST_IsImmWithValue
; -----------------------------------------------
AST_IsImmWithValue:
  ; init frame
  ; ----------
  tmp1595 EQU rbp - 24 ; 16 bytes
  tmp1594 EQU rbp - 28 ; 4 bytes
  tmp1593 EQU rbp - 44 ; 16 bytes
  tmp1592 EQU rbp - 60 ; 16 bytes
  tmp1590 EQU rbp - 64 ; 4 bytes
  rv EQU rdi
  value EQU rbp - 80 ; 16 bytes
  x EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  mov [tmp1592 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1593 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1595 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1590 ], 0
  lea  rcx, [ tmp1593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp1593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp1594 ], 1
  mov eax, dword [ tmp1594 ]
  mov [ tmp1595 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1595 + Variant_t.value], rax
  lea  rcx , [ tmp1593 ]
  lea  rdx , [ tmp1595 ]
  lea  r8 , [ tmp1592 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1592 + Variant_t.value]
  mov dword [ tmp1594 ], eax
  cmp dword [ tmp1594 ], 0
  jz l1591
  lea  rcx, [ tmp1595 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1595 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1595 ]
  lea  rdx , [ value ]
  lea  r8 , [ tmp1592 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1592 + Variant_t.value]
  mov dword [ tmp1590 ], eax
l1591:
  cmp dword [ tmp1590 ], 0
  jz l1596
  mov dword [ tmp1594 ], 1
  mov eax, dword [ tmp1594 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  jmp l1597
l1596:
  mov dword [ tmp1594 ], 0
  mov eax, dword [ tmp1594 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
l1597:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1592 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1593 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1595 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore x
  restore value
  restore rv
  restore tmp1590
  restore tmp1592
  restore tmp1593
  restore tmp1594
  restore tmp1595
; -----------------------------------------------
; function AST_IsEmpty
; -----------------------------------------------
AST_IsEmpty:
  ; init frame
  ; ----------
  tmp1601 EQU rbp - 12 ; 4 bytes
  tmp1600 EQU rbp - 28 ; 16 bytes
  tmp1599 EQU rbp - 44 ; 16 bytes
  tmp1598 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  x EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1598 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1599 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1600 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1600 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp1600 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1600 ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1601 ], 0
  mov [ tmp1600 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1601 ]
  mov [ tmp1600 + Variant_t.value], rax
  lea  rcx , [ tmp1599 ]
  lea  rdx , [ tmp1600 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1598 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1600 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1598
  restore tmp1599
  restore tmp1600
  restore tmp1601
; -----------------------------------------------
; function AST_IsImmOrVar
; -----------------------------------------------
AST_IsImmOrVar:
  ; init frame
  ; ----------
  tmp1607 EQU rbp - 24 ; 16 bytes
  tmp1606 EQU rbp - 28 ; 4 bytes
  tmp1605 EQU rbp - 44 ; 16 bytes
  tmp1604 EQU rbp - 60 ; 16 bytes
  tmp1602 EQU rbp - 64 ; 4 bytes
  rv EQU rdi
  x EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1604 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1605 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1607 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1602 ], 1
  lea  rcx, [ tmp1605 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp1605 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp1606 ], 1
  mov eax, dword [ tmp1606 ]
  mov [ tmp1607 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1607 + Variant_t.value], rax
  lea  rcx , [ tmp1605 ]
  lea  rdx , [ tmp1607 ]
  lea  r8 , [ tmp1604 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1604 + Variant_t.value]
  mov dword [ tmp1606 ], eax
  cmp dword [ tmp1606 ], 0
  jnz l1603
  lea  rcx, [ tmp1607 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp1607 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsVar
  pop rdi
  mov dword [ tmp1606 ], 1
  mov eax, dword [ tmp1606 ]
  mov [ tmp1605 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1605 + Variant_t.value], rax
  lea  rcx , [ tmp1607 ]
  lea  rdx , [ tmp1605 ]
  lea  r8 , [ tmp1604 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1604 + Variant_t.value]
  mov dword [ tmp1602 ], eax
l1603:
  cmp dword [ tmp1602 ], 0
  jz l1608
  mov dword [ tmp1606 ], 1
  mov eax, dword [ tmp1606 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  jmp l1609
l1608:
  mov dword [ tmp1606 ], 0
  mov eax, dword [ tmp1606 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
l1609:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1604 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1605 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1607 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1602
  restore tmp1604
  restore tmp1605
  restore tmp1606
  restore tmp1607
; -----------------------------------------------
; function AST_HasSideEffects
; -----------------------------------------------
AST_HasSideEffects:
  ; init frame
  ; ----------
  childrenCnt EQU rbp - 24 ; 16 bytes
  children EQU rbp - 40 ; 16 bytes
  childIdx EQU rbp - 44 ; 4 bytes
  tmp1630 EQU rbp - 48 ; 4 bytes
  tmp1621 EQU rbp - 52 ; 4 bytes
  tmp1620 EQU rbp - 68 ; 16 bytes
  tmp1618 EQU rbp - 72 ; 4 bytes
  tmp1616 EQU rbp - 76 ; 4 bytes
  tmp1613 EQU rbp - 80 ; 4 bytes
  tmp1612 EQU rbp - 96 ; 16 bytes
  tmp1611 EQU rbp - 100 ; 4 bytes
  tmp1610 EQU rbp - 116 ; 16 bytes
  rv EQU rdi
  opcode EQU rbp - 132 ; 16 bytes
  node EQU rbp - 148 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1610 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1612 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1620 + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1611 ], 152
  mov [ tmp1612 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1611 ]
  mov [ tmp1612 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1612 ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1613 ], eax
  cmp dword [ tmp1613 ], 0
  jz l1614
  mov dword [ tmp1616 ], 0
  lea  rcx, [ tmp1612 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1612 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1612 ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1618 ], eax
  cmp dword [ tmp1618 ], 0
  jz l1617
  mov dword [ tmp1618 ], 0
  lea  rcx, [ tmp1612 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1612 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1611 ], 31
  mov [ tmp1620 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1611 ]
  mov [ tmp1620 + Variant_t.value], rax
  lea  rcx , [ tmp1620 ]
  lea  rdx , [ tmp1612 ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1621 ], eax
  cmp dword [ tmp1621 ], 0
  jz l1619
  lea  rcx, [ tmp1620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1620 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1611 ], 44
  mov [ tmp1612 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1611 ]
  mov [ tmp1612 + Variant_t.value], rax
  lea  rcx , [ tmp1620 ]
  lea  rdx , [ tmp1612 ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1618 ], eax
l1619:
  mov eax, dword [ tmp1618 ]
  mov dword [ tmp1616 ], eax
l1617:
  cmp dword [ tmp1616 ], 0
  jz l1622
  mov dword [ tmp1618 ], 0
  mov eax, dword [ tmp1618 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  jmp l1623
l1622:
  mov dword [ tmp1618 ], 1
  mov eax, dword [ tmp1618 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
l1623:
  jmp l1615
l1614:
  mov dword [ tmp1616 ], 1
  mov dword [ tmp1611 ], 107
  mov [ tmp1612 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1611 ]
  mov [ tmp1612 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1612 ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1618 ], eax
  cmp dword [ tmp1618 ], 0
  jnz l1624
  mov dword [ tmp1611 ], 106
  mov [ tmp1612 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1611 ]
  mov [ tmp1612 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1612 ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1616 ], eax
l1624:
  cmp dword [ tmp1616 ], 0
  jz l1625
  mov dword [ tmp1618 ], 1
  mov eax, dword [ tmp1618 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  jmp l1626
l1625:
  mov dword [ tmp1618 ], 0
  mov eax, dword [ tmp1618 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  mov dword [ childIdx ], 0
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
l1627:
  mov dword [ tmp1618 ], 0
  mov [ tmp1612 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childIdx ]
  mov [ tmp1612 + Variant_t.value], rax
  lea  rcx , [ tmp1612 ]
  lea  rdx , [ childrenCnt ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1621 ], eax
  cmp dword [ tmp1621 ], 0
  jz l1629
  mov dword [ tmp1621 ], 0
  mov eax, dword [ tmp1621 ]
  mov [ tmp1612 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1612 + Variant_t.value], rax
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1612 ]
  lea  r8 , [ tmp1610 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1610 + Variant_t.value]
  mov dword [ tmp1618 ], eax
l1629:
  cmp dword [ tmp1618 ], 0
  jz l1628
  lea  rcx, [ tmp1612 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ tmp1612 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1610 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1612 ]
  lea  rdi , [ tmp1610 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HasSideEffects
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1610 ]
  call __MOLD_VariantMove
  mov dword [ tmp1630 ], 1
  mov eax, dword [ childIdx ]
  add eax, dword [ tmp1630 ]
  mov dword [ childIdx ], eax
  jmp l1627
l1628:
l1626:
l1615:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1610 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1612 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1620 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore node
  restore opcode
  restore rv
  restore tmp1610
  restore tmp1611
  restore tmp1612
  restore tmp1613
  restore tmp1616
  restore tmp1618
  restore tmp1620
  restore tmp1621
  restore tmp1630
  restore childIdx
  restore children
  restore childrenCnt
; -----------------------------------------------
; function AST_HashInternal
; -----------------------------------------------
AST_HashInternal:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  item EQU rbp - 56 ; 16 bytes
  tmp1666 EQU rbp - 72 ; 16 bytes
  tmp1665 EQU rbp - 88 ; 16 bytes
  tmp1659 EQU rbp - 92 ; 4 bytes
  tmp1654 EQU rbp - 108 ; 16 bytes
  tmp1649 EQU rbp - 112 ; 4 bytes
  tmp1646 EQU rbp - 116 ; 4 bytes
  tmp1643 EQU rbp - 120 ; 4 bytes
  tmp1640 EQU rbp - 136 ; 16 bytes
  tmp1639 EQU rbp - 152 ; 16 bytes
  tmp1636 EQU rbp - 156 ; 4 bytes
  tmp1635 EQU rbp - 172 ; 16 bytes
  tmp1634 EQU rbp - 176 ; 4 bytes
  tmp1632 EQU rbp - 180 ; 4 bytes
  tmp1631 EQU rbp - 196 ; 16 bytes
  rv EQU rdi
  childrenCnt EQU rbp - 212 ; 16 bytes
  children EQU rbp - 228 ; 16 bytes
  opcode EQU rbp - 244 ; 16 bytes
  isCodeMode EQU rbp - 260 ; 16 bytes
  node EQU rbp - 276 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ isCodeMode ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1631 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1635 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1639 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1640 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1654 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1665 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1666 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1632 ], 1
  mov dword [ tmp1634 ], 10
  mov [ tmp1635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1634 ]
  mov [ tmp1635 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1631 + Variant_t.value]
  mov dword [ tmp1636 ], eax
  cmp dword [ tmp1636 ], 0
  jnz l1633
  mov dword [ tmp1634 ], 9
  mov [ tmp1635 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1634 ]
  mov [ tmp1635 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1631 + Variant_t.value]
  mov dword [ tmp1632 ], eax
l1633:
  cmp dword [ tmp1632 ], 0
  jz l1637
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1635 ]
  lea  rdi , [ tmp1631 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1638
l1637:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsVar
  pop rdi
  mov dword [ tmp1636 ], 1
  mov eax, dword [ tmp1636 ]
  mov [ tmp1640 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1640 + Variant_t.value], rax
  lea  rcx , [ tmp1635 ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1631 + Variant_t.value]
  mov dword [ tmp1636 ], eax
  cmp dword [ tmp1636 ], 0
  jz l1641
  mov dword [ tmp1643 ], 1
  mov eax, dword [ tmp1643 ]
  mov [ tmp1640 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1640 + Variant_t.value], rax
  lea  rcx , [ isCodeMode ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1631 + Variant_t.value]
  mov dword [ tmp1643 ], eax
  cmp dword [ tmp1643 ], 0
  jz l1644
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1645
l1644:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1635 ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1640 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1631 + Variant_t.value]
  mov dword [ tmp1646 ], eax
  cmp dword [ tmp1646 ], 0
  jz l1647
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1648
l1647:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1635 ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1640 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1631 + Variant_t.value]
  mov dword [ tmp1649 ], eax
  cmp dword [ tmp1649 ], 0
  jz l1650
  lea rcx, [ rv ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l1653
l1652:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1635 ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1654 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1654 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  ret
l1653:
  lea  rcx , [ tmp1631 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l1652 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l1651
l1650:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1635 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1640 ]
  lea  rdi , [ tmp1631 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
l1651:
l1648:
l1645:
  jmp l1642
l1641:
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsPrimitiveImm
  pop rdi
  mov dword [ tmp1643 ], 1
  mov eax, dword [ tmp1643 ]
  mov [ tmp1635 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1635 + Variant_t.value], rax
  lea  rcx , [ tmp1640 ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1631 + Variant_t.value]
  mov dword [ tmp1643 ], eax
  cmp dword [ tmp1643 ], 0
  jz l1655
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1631 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsShortText
  pop rdi
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1640 ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1631 ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1656
l1655:
  mov dword [ tmp1646 ], 1
  mov dword [ tmp1634 ], 152
  mov [ tmp1631 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1634 ]
  mov [ tmp1631 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1649 ], eax
  cmp dword [ tmp1649 ], 0
  jnz l1657
  mov dword [ tmp1649 ], 1
  mov dword [ tmp1634 ], 107
  mov [ tmp1631 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1634 ]
  mov [ tmp1631 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1659 ], eax
  cmp dword [ tmp1659 ], 0
  jnz l1658
  mov dword [ tmp1634 ], 106
  mov [ tmp1631 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1634 ]
  mov [ tmp1631 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1649 ], eax
l1658:
  mov eax, dword [ tmp1649 ]
  mov dword [ tmp1646 ], eax
l1657:
  cmp dword [ tmp1646 ], 0
  jz l1660
  mov dword [ tmp1649 ], 0
  mov dword [ tmp1659 ], 0
  mov eax, dword [ tmp1659 ]
  mov [ tmp1631 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1631 + Variant_t.value], rax
  lea  rcx , [ isCodeMode ]
  lea  rdx , [ tmp1631 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1659 ], eax
  cmp dword [ tmp1659 ], 0
  jz l1662
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1631 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HasSideEffects
  pop rdi
  mov dword [ tmp1659 ], 1
  mov eax, dword [ tmp1659 ]
  mov [ tmp1640 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1640 + Variant_t.value], rax
  lea  rcx , [ tmp1631 ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1649 ], eax
l1662:
  cmp dword [ tmp1649 ], 0
  jz l1663
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1640 ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin
  jmp l1664
l1663:
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
l1664:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsShortText
  pop rdi
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ childrenCnt ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1666 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal155 ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1666 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1665 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp1666 ]
  lea  r8 , [ tmp1665 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal25 ]
  lea  rdx , [ tmp1665 ]
  lea  r8 , [ tmp1654 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp1635 ]
  lea  rdx , [ tmp1654 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1640 ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1649 ], eax
  cmp dword [ tmp1649 ], 0
  jz l1667
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1640 ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal155 ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ tmp1654 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1654 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
l1667:
l1668:
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l1670
l1669:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ childNode ]
  lea  rdx , [ isCodeMode ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashInternal
  pop rdi
  lea  rcx, [ tmp1654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal155 ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ tmp1654 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1654 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  ret
l1670:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l1669 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l1661
l1660:
  mov dword [ tmp1634 ], 600
  mov [ tmp1640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1634 ]
  mov [ tmp1640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1649 ], eax
  cmp dword [ tmp1649 ], 0
  jz l1671
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1640 ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1634 ], 0
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1634 ]
  lea  r8 , [ tmp1631 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1631 ]
  lea  rdx , [ isCodeMode ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashInternal
  pop rdi
  lea  rcx, [ tmp1665 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal155 ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1665 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1635 ]
  lea  rdx , [ tmp1665 ]
  lea  r8 , [ tmp1654 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ __literal156 ]
  lea  rdx , [ tmp1654 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1672
l1671:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsShortText
  pop rdi
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ childrenCnt ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal155 ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1654 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp1635 ]
  lea  rdx , [ tmp1654 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l1674
l1673:
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ childNode ]
  lea  rdx , [ isCodeMode ]
  lea  rdi , [ tmp1635 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashInternal
  pop rdi
  lea  rcx, [ tmp1654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal155 ]
  lea  rdx , [ tmp1635 ]
  lea  r8 , [ tmp1654 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1654 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  ret
l1674:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l1673 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
l1672:
l1661:
l1656:
l1642:
l1638:
  mov dword [ tmp1632 ], 0
  mov eax, dword [ tmp1632 ]
  mov [ tmp1640 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1640 + Variant_t.value], rax
  lea  rcx , [ isCodeMode ]
  lea  rdx , [ tmp1640 ]
  lea  r8 , [ tmp1635 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1635 + Variant_t.value]
  mov dword [ tmp1632 ], eax
  cmp dword [ tmp1632 ], 0
  jz l1675
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStoreAtKey
l1675:
l1676:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1631 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1635 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  ; Skipped loop iterator childNode

  add  rsp, 304
  pop  rbp
  ret

  restore node
  restore isCodeMode
  restore opcode
  restore children
  restore childrenCnt
  restore rv
  restore tmp1631
  restore tmp1632
  restore tmp1634
  restore tmp1635
  restore tmp1636
  restore tmp1639
  restore tmp1640
  restore tmp1643
  restore tmp1646
  restore tmp1649
  restore tmp1654
  restore tmp1659
  restore tmp1665
  restore tmp1666
  restore item
  restore name
  restore childNode
; -----------------------------------------------
; function AST_Hash
; -----------------------------------------------
AST_Hash:
  ; init frame
  ; ----------
  tmp1679 EQU rbp - 24 ; 16 bytes
  tmp1678 EQU rbp - 28 ; 4 bytes
  tmp1677 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1677 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1679 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1678 ], 0
  mov eax, dword [ tmp1678 ]
  mov [ tmp1679 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1679 + Variant_t.value], rax
  lea  rcx, [ tmp1677 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdx , [ tmp1679 ]
  lea  rdi , [ tmp1677 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashInternal
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1677 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1677 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1679 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1677
  restore tmp1678
  restore tmp1679
; -----------------------------------------------
; function AST_HashForCodeComparison
; -----------------------------------------------
AST_HashForCodeComparison:
  ; init frame
  ; ----------
  tmp1682 EQU rbp - 24 ; 16 bytes
  tmp1681 EQU rbp - 28 ; 4 bytes
  tmp1680 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1680 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1682 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1681 ], 1
  mov eax, dword [ tmp1681 ]
  mov [ tmp1682 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1682 + Variant_t.value], rax
  lea  rcx, [ tmp1680 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdx , [ tmp1682 ]
  lea  rdi , [ tmp1680 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashInternal
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1680 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1680 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1682 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1680
  restore tmp1681
  restore tmp1682
; -----------------------------------------------
; function AST_IsDataNode
; -----------------------------------------------
AST_IsDataNode:
  ; init frame
  ; ----------
  tmp1690 EQU rbp - 12 ; 4 bytes
  tmp1687 EQU rbp - 16 ; 4 bytes
  tmp1686 EQU rbp - 32 ; 16 bytes
  tmp1685 EQU rbp - 36 ; 4 bytes
  tmp1684 EQU rbp - 52 ; 16 bytes
  tmp1683 EQU rbp - 68 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 84 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1683 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1684 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1686 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1684 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1684 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1685 ], 100
  mov [ tmp1686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1685 ]
  mov [ tmp1686 + Variant_t.value], rax
  lea  rcx , [ tmp1684 ]
  lea  rdx , [ tmp1686 ]
  lea  r8 , [ tmp1683 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1683 + Variant_t.value]
  mov dword [ tmp1687 ], eax
  cmp dword [ tmp1687 ], 0
  jz l1688
  mov dword [ tmp1690 ], 1
  mov eax, dword [ tmp1690 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  jmp l1689
l1688:
  mov dword [ tmp1690 ], 0
  mov eax, dword [ tmp1690 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
l1689:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1683 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1684 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1686 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1683
  restore tmp1684
  restore tmp1685
  restore tmp1686
  restore tmp1687
  restore tmp1690
; -----------------------------------------------
; function AST_ConvertDataTypeToText
; -----------------------------------------------
AST_ConvertDataTypeToText:
  ; init frame
  ; ----------
  tmp1696 EQU rbp - 12 ; 4 bytes
  tmp1695 EQU rbp - 16 ; 4 bytes
  tmp1694 EQU rbp - 32 ; 16 bytes
  tmp1693 EQU rbp - 48 ; 16 bytes
  tmp1691 EQU rbp - 52 ; 4 bytes
  rv EQU rdi
  dataType EQU rbp - 68 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ dataType ], xmm0
  mov [tmp1693 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1694 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1691 ], 0
  lea  rcx, [ tmp1694 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ dataType ]
  lea  rdi , [ tmp1694 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1694 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1693 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1693 + Variant_t.value]
  mov dword [ tmp1695 ], eax
  cmp dword [ tmp1695 ], 0
  jz l1692
  mov dword [ tmp1696 ], 0
  mov [ tmp1694 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1696 ]
  mov [ tmp1694 + Variant_t.value], rax
  lea  rcx , [ tmp1694 ]
  lea  rdx , [ dataType ]
  lea  r8 , [ tmp1693 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1693 + Variant_t.value]
  mov dword [ tmp1691 ], eax
l1692:
  cmp dword [ tmp1691 ], 0
  jz l1697
  mov eax, dword [ dataType + Variant_t.value]
  mov dword [ tmp1696 ], eax
  lea  rcx , [ AST_DataTypeNames ]
  lea  rdx , [ tmp1696 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1698
l1697:
  lea rcx, [ rv ]
  lea rdx, [ __literal158 ]
  call __MOLD_VariantMove
l1698:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1693 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1694 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore dataType
  restore rv
  restore tmp1691
  restore tmp1693
  restore tmp1694
  restore tmp1695
  restore tmp1696
; -----------------------------------------------
; function AST_ConvertDataTypeToMIR
; -----------------------------------------------
AST_ConvertDataTypeToMIR:
  ; init frame
  ; ----------
  tmp1704 EQU rbp - 12 ; 4 bytes
  tmp1703 EQU rbp - 16 ; 4 bytes
  tmp1702 EQU rbp - 32 ; 16 bytes
  tmp1701 EQU rbp - 48 ; 16 bytes
  tmp1699 EQU rbp - 52 ; 4 bytes
  rv EQU rdi
  dataType EQU rbp - 68 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ dataType ], xmm0
  mov [tmp1701 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1702 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1699 ], 0
  lea  rcx, [ tmp1702 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ dataType ]
  lea  rdi , [ tmp1702 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1702 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1701 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1701 + Variant_t.value]
  mov dword [ tmp1703 ], eax
  cmp dword [ tmp1703 ], 0
  jz l1700
  mov dword [ tmp1704 ], 0
  mov [ tmp1702 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1704 ]
  mov [ tmp1702 + Variant_t.value], rax
  lea  rcx , [ tmp1702 ]
  lea  rdx , [ dataType ]
  lea  r8 , [ tmp1701 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1701 + Variant_t.value]
  mov dword [ tmp1699 ], eax
l1700:
  cmp dword [ tmp1699 ], 0
  jz l1705
  mov eax, dword [ dataType + Variant_t.value]
  mov dword [ tmp1704 ], eax
  lea  rcx , [ AST_DataTypeForMIR ]
  lea  rdx , [ tmp1704 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1706
l1705:
  lea rcx, [ rv ]
  lea rdx, [ __literal158 ]
  call __MOLD_VariantMove
l1706:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1701 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1702 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore dataType
  restore rv
  restore tmp1699
  restore tmp1701
  restore tmp1702
  restore tmp1703
  restore tmp1704
; -----------------------------------------------
; function AST_GetDataType
; -----------------------------------------------
AST_GetDataType:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  childrenCnt EQU rbp - 56 ; 16 bytes
  children EQU rbp - 72 ; 16 bytes
  symbolInfo EQU rbp - 88 ; 16 bytes
  opcode EQU rbp - 104 ; 16 bytes
  tmp1787 EQU rbp - 120 ; 16 bytes
  tmp1776 EQU rbp - 124 ; 4 bytes
  tmp1774 EQU rbp - 128 ; 4 bytes
  tmp1772 EQU rbp - 132 ; 4 bytes
  tmp1770 EQU rbp - 136 ; 4 bytes
  tmp1768 EQU rbp - 140 ; 4 bytes
  tmp1761 EQU rbp - 144 ; 4 bytes
  tmp1755 EQU rbp - 148 ; 4 bytes
  tmp1747 EQU rbp - 152 ; 4 bytes
  tmp1740 EQU rbp - 156 ; 4 bytes
  tmp1738 EQU rbp - 160 ; 4 bytes
  tmp1732 EQU rbp - 164 ; 4 bytes
  tmp1720 EQU rbp - 168 ; 4 bytes
  tmp1718 EQU rbp - 172 ; 4 bytes
  tmp1717 EQU rbp - 188 ; 16 bytes
  tmp1715 EQU rbp - 192 ; 4 bytes
  tmp1713 EQU rbp - 196 ; 4 bytes
  tmp1712 EQU rbp - 200 ; 4 bytes
  tmp1709 EQU rbp - 204 ; 4 bytes
  tmp1708 EQU rbp - 220 ; 16 bytes
  tmp1707 EQU rbp - 236 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 252 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1707 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1708 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1717 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1787 + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ node ]
  lea  rdx , [ __literal159 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1708 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1708 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1709 ], eax
  cmp dword [ tmp1709 ], 0
  jz l1710
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1712 ], -1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1712 ]
  mov [ rv + Variant_t.value], rax
  mov dword [ tmp1713 ], 1
  mov dword [ tmp1712 ], 1
  mov [ tmp1708 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1712 ]
  mov [ tmp1708 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1708 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1715 ], eax
  cmp dword [ tmp1715 ], 0
  jnz l1714
  mov dword [ tmp1715 ], 1
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1717 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1717 ]
  lea  rdi , [ tmp1708 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1708 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1718 ], eax
  cmp dword [ tmp1718 ], 0
  jnz l1716
  mov dword [ tmp1718 ], 0
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1708 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1712 ], -2147483648
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1712 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ tmp1717 ]
  lea  rdx , [ tmp1708 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1720 ], eax
  cmp dword [ tmp1720 ], 0
  jz l1719
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp1717 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1712 ], 2147483647
  mov [ tmp1708 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1712 ]
  mov [ tmp1708 + Variant_t.value], rax
  lea  rcx , [ tmp1717 ]
  lea  rdx , [ tmp1708 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1718 ], eax
l1719:
  mov eax, dword [ tmp1718 ]
  mov dword [ tmp1715 ], eax
l1716:
  mov eax, dword [ tmp1715 ]
  mov dword [ tmp1713 ], eax
l1714:
  cmp dword [ tmp1713 ], 0
  jz l1721
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp1712 ], eax
  cmp dword [ tmp1712 ], 107
  jl l1724
  cmp dword [ tmp1712 ], 600
  jg l1724
  mov eax, dword [ tmp1712 ]
  jmp qword [ __jmptable1725 + rax * 8]
l1726:
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1715 ], 0
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp1708 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1708 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1718 ], eax
  cmp dword [ tmp1718 ], 0
  jz l1727
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1717 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1717 ]
  lea  rdi , [ tmp1708 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1708 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1715 ], eax
l1727:
  cmp dword [ tmp1715 ], 0
  jz l1728
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
l1728:
l1729:
  jmp l1723
l1730:
  lea  rcx , [ node ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  jmp l1723
l1731:
  mov dword [ tmp1732 ], 6
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
  jmp l1723
l1724:
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1708 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsDataNode
  pop rdi
  mov dword [ tmp1715 ], 1
  mov eax, dword [ tmp1715 ]
  mov [ tmp1717 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ tmp1708 ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1715 ], eax
  cmp dword [ tmp1715 ], 0
  jz l1733
  lea rcx, [ rv ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  jmp l1734
l1733:
  mov dword [ tmp1732 ], 2
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1718 ], eax
  cmp dword [ tmp1718 ], 0
  jz l1735
  mov dword [ tmp1732 ], 0
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1732 ]
  lea  r8 , [ tmp1717 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1717 ]
  lea  rdi , [ tmp1707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp1707 ]
  call __MOLD_VariantMove
  mov dword [ tmp1732 ], 1
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1732 ]
  lea  r8 , [ tmp1717 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1717 ]
  lea  rdi , [ tmp1707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp1707 ]
  call __MOLD_VariantMove
  mov dword [ tmp1720 ], 1
  mov dword [ tmp1732 ], 302
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1738 ], eax
  cmp dword [ tmp1738 ], 0
  jnz l1737
  mov dword [ tmp1738 ], 1
  mov dword [ tmp1732 ], 304
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1740 ], eax
  cmp dword [ tmp1740 ], 0
  jnz l1739
  mov dword [ tmp1732 ], 303
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1738 ], eax
l1739:
  mov eax, dword [ tmp1738 ]
  mov dword [ tmp1720 ], eax
l1737:
  cmp dword [ tmp1720 ], 0
  jz l1741
  mov dword [ tmp1738 ], 1
  mov dword [ tmp1732 ], 3
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1740 ], eax
  cmp dword [ tmp1740 ], 0
  jnz l1743
  mov dword [ tmp1732 ], 3
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1738 ], eax
l1743:
  cmp dword [ tmp1738 ], 0
  jz l1744
  mov dword [ tmp1732 ], 3
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
  jmp l1745
l1744:
  mov dword [ tmp1740 ], 1
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1747 ], eax
  cmp dword [ tmp1747 ], 0
  jnz l1746
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1740 ], eax
l1746:
  cmp dword [ tmp1740 ], 0
  jz l1748
  mov dword [ tmp1732 ], -1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
  jmp l1749
l1748:
  lea rcx, [ rv ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
l1749:
l1745:
  jmp l1742
l1741:
  mov dword [ tmp1732 ], 350
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1738 ], eax
  cmp dword [ tmp1738 ], 0
  jz l1750
  mov dword [ tmp1732 ], 4
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
  jmp l1751
l1750:
  mov dword [ tmp1732 ], 305
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1740 ], eax
  cmp dword [ tmp1740 ], 0
  jz l1752
  mov dword [ tmp1747 ], 1
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1755 ], eax
  cmp dword [ tmp1755 ], 0
  jnz l1754
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1747 ], eax
l1754:
  cmp dword [ tmp1747 ], 0
  jz l1756
  mov dword [ tmp1732 ], -1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
  jmp l1757
l1756:
  mov dword [ tmp1732 ], 3
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
l1757:
  jmp l1753
l1752:
  mov dword [ tmp1732 ], 308
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1747 ], eax
  cmp dword [ tmp1747 ], 0
  jz l1758
  mov dword [ tmp1755 ], 1
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1761 ], eax
  cmp dword [ tmp1761 ], 0
  jnz l1760
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1755 ], eax
l1760:
  cmp dword [ tmp1755 ], 0
  jz l1762
  mov dword [ tmp1732 ], -1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
  jmp l1763
l1762:
  mov dword [ tmp1732 ], 1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
l1763:
  jmp l1759
l1758:
  mov dword [ tmp1755 ], 0
  mov dword [ tmp1732 ], 400
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ tmp1717 ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1761 ], eax
  cmp dword [ tmp1761 ], 0
  jz l1764
  mov dword [ tmp1732 ], 501
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1755 ], eax
l1764:
  cmp dword [ tmp1755 ], 0
  jz l1765
  mov dword [ tmp1761 ], 1
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1768 ], eax
  cmp dword [ tmp1768 ], 0
  jnz l1767
  mov dword [ tmp1768 ], 1
  mov dword [ tmp1732 ], -1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1770 ], eax
  cmp dword [ tmp1770 ], 0
  jnz l1769
  mov dword [ tmp1770 ], 1
  mov dword [ tmp1732 ], 4
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1772 ], eax
  cmp dword [ tmp1772 ], 0
  jnz l1771
  mov dword [ tmp1772 ], 1
  mov dword [ tmp1732 ], 4
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1774 ], eax
  cmp dword [ tmp1774 ], 0
  jnz l1773
  mov dword [ tmp1774 ], 1
  mov dword [ tmp1732 ], 8
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ tmp1717 ]
  lea  rdx , [ x ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1776 ], eax
  cmp dword [ tmp1776 ], 0
  jnz l1775
  mov dword [ tmp1732 ], 8
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ tmp1717 ]
  lea  rdx , [ y ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1774 ], eax
l1775:
  mov eax, dword [ tmp1774 ]
  mov dword [ tmp1772 ], eax
l1773:
  mov eax, dword [ tmp1772 ]
  mov dword [ tmp1770 ], eax
l1771:
  mov eax, dword [ tmp1770 ]
  mov dword [ tmp1768 ], eax
l1769:
  mov eax, dword [ tmp1768 ]
  mov dword [ tmp1761 ], eax
l1767:
  cmp dword [ tmp1761 ], 0
  jz l1777
  mov dword [ tmp1732 ], -1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
  jmp l1778
l1777:
  mov dword [ tmp1732 ], 5
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
l1778:
l1765:
l1766:
l1759:
l1753:
l1751:
l1742:
  jmp l1736
l1735:
  mov dword [ tmp1732 ], 1
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1720 ], eax
  cmp dword [ tmp1720 ], 0
  jz l1779
  mov dword [ tmp1732 ], 0
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1732 ]
  lea  r8 , [ tmp1717 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1717 ]
  lea  rdi , [ tmp1707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp1707 ]
  call __MOLD_VariantMove
  mov dword [ tmp1732 ], 301
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1738 ], eax
  cmp dword [ tmp1738 ], 0
  jz l1781
  lea rcx, [ rv ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
  jmp l1782
l1781:
  mov dword [ tmp1732 ], 502
  mov [ tmp1717 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ tmp1717 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1740 ], eax
  cmp dword [ tmp1740 ], 0
  jz l1783
  mov dword [ tmp1732 ], 5
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1732 ]
  mov [ rv + Variant_t.value], rax
l1783:
l1784:
l1782:
l1779:
l1780:
l1736:
l1734:
l1723:
l1721:
l1722:
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1717 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1717 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp1707 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1707 + Variant_t.value]
  mov dword [ tmp1713 ], eax
  cmp dword [ tmp1713 ], 0
  jz l1785
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1708 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1708 ]
  lea  rdi , [ tmp1717 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1787 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal163 ]
  lea  rdx , [ tmp1717 ]
  lea  r8 , [ tmp1787 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1787 ]
  lea  rdi , [ tmp1707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l1785:
l1786:
l1710:
l1711:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1707 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1708 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1717 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy

  add  rsp, 288
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1707
  restore tmp1708
  restore tmp1709
  restore tmp1712
  restore tmp1713
  restore tmp1715
  restore tmp1717
  restore tmp1718
  restore tmp1720
  restore tmp1732
  restore tmp1738
  restore tmp1740
  restore tmp1747
  restore tmp1755
  restore tmp1761
  restore tmp1768
  restore tmp1770
  restore tmp1772
  restore tmp1774
  restore tmp1776
  restore tmp1787
  restore opcode
  restore symbolInfo
  restore children
  restore childrenCnt
  restore x
  restore y
; -----------------------------------------------
; function AST_TypeCast
; -----------------------------------------------
AST_TypeCast:
  ; init frame
  ; ----------
  srcDataType EQU rbp - 24 ; 16 bytes
  tmp1812 EQU rbp - 40 ; 16 bytes
  tmp1811 EQU rbp - 56 ; 16 bytes
  tmp1808 EQU rbp - 60 ; 4 bytes
  tmp1804 EQU rbp - 64 ; 4 bytes
  tmp1800 EQU rbp - 68 ; 4 bytes
  tmp1798 EQU rbp - 72 ; 4 bytes
  tmp1795 EQU rbp - 76 ; 4 bytes
  tmp1792 EQU rbp - 80 ; 4 bytes
  tmp1791 EQU rbp - 96 ; 16 bytes
  tmp1790 EQU rbp - 100 ; 4 bytes
  tmp1789 EQU rbp - 116 ; 16 bytes
  tmp1788 EQU rbp - 132 ; 16 bytes
  rv EQU rdi
  dstDataType EQU rbp - 148 ; 16 bytes
  node EQU rbp - 164 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dstDataType ], xmm0
  mov [tmp1788 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1789 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1791 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1811 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1812 + Variant_t.type], VARIANT_UNDEFINED
  mov [srcDataType + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1789 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1789 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1790 ], 600
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1790 ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ tmp1789 ]
  lea  rdx , [ tmp1791 ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1792 ], eax
  cmp dword [ tmp1792 ], 0
  jz l1793
  lea  rcx , [ node ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ dstDataType ]
  call  __MOLD_VariantStoreAtKey
  jmp l1794
l1793:
  lea  rcx, [ tmp1788 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1788 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ srcDataType ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcDataType ]
  lea rdx, [ tmp1788 ]
  call __MOLD_VariantMove
  lea  rcx , [ srcDataType ]
  lea  rdx , [ dstDataType ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1795 ], eax
  cmp dword [ tmp1795 ], 0
  jz l1796
  mov dword [ tmp1798 ], 1
  mov dword [ tmp1790 ], 4
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1790 ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ srcDataType ]
  lea  rdx , [ tmp1791 ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1800 ], eax
  cmp dword [ tmp1800 ], 0
  jnz l1799
  mov dword [ tmp1790 ], -1
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1790 ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ dstDataType ]
  lea  rdx , [ tmp1791 ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1798 ], eax
l1799:
  cmp dword [ tmp1798 ], 0
  jz l1801
  mov dword [ tmp1800 ], 1
  mov dword [ tmp1790 ], 4
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1790 ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ dstDataType ]
  lea  rdx , [ tmp1791 ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1804 ], eax
  cmp dword [ tmp1804 ], 0
  jnz l1803
  mov dword [ tmp1790 ], -1
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1790 ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ srcDataType ]
  lea  rdx , [ tmp1791 ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1800 ], eax
l1803:
  cmp dword [ tmp1800 ], 0
  jz l1805
  mov dword [ tmp1804 ], 1
  mov dword [ tmp1790 ], 6
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1790 ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ srcDataType ]
  lea  rdx , [ tmp1791 ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1808 ], eax
  cmp dword [ tmp1808 ], 0
  jnz l1807
  mov dword [ tmp1790 ], -1
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1790 ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ dstDataType ]
  lea  rdx , [ tmp1791 ]
  lea  r8 , [ tmp1788 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1788 + Variant_t.value]
  mov dword [ tmp1804 ], eax
l1807:
  cmp dword [ tmp1804 ], 0
  jz l1809
  lea  rcx, [ tmp1788 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1788 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1789 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp1789 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp1791 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1791 ]
  lea rdx, [ tmp1789 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1788 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1791 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_TYPE_CAST ]
  mov [ tmp1791 + Variant_t.value], rax
  lea  rcx , [ tmp1788 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1791 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1791 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1791 ]
  lea rdx, [ dstDataType ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1788 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1791 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1789 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1789 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1811 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1811 + Variant_t.value], 0
  lea  rcx, [ tmp1812 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1812 ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1789 ]
  lea  rdx , [ tmp1811 ]
  lea  r8 , [ tmp1812 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp1791 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1791 ]
  lea rdx, [ tmp1789 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1788 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp1791 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ rv ]
  lea rdx, [ tmp1788 ]
  call __MOLD_VariantMove
l1809:
l1810:
l1805:
l1806:
l1801:
l1802:
l1796:
l1797:
l1794:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1788 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1789 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1791 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1811 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1812 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcDataType ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore node
  restore dstDataType
  restore rv
  restore tmp1788
  restore tmp1789
  restore tmp1790
  restore tmp1791
  restore tmp1792
  restore tmp1795
  restore tmp1798
  restore tmp1800
  restore tmp1804
  restore tmp1808
  restore tmp1811
  restore tmp1812
  restore srcDataType
; -----------------------------------------------
; function AST_GetTopNodeInBlock
; -----------------------------------------------
AST_GetTopNodeInBlock:
  ; init frame
  ; ----------
  tmp1819 EQU rbp - 12 ; 4 bytes
  tmp1818 EQU rbp - 16 ; 4 bytes
  tmp1817 EQU rbp - 32 ; 16 bytes
  tmp1816 EQU rbp - 48 ; 16 bytes
  tmp1815 EQU rbp - 64 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1815 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1816 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1817 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
l1813:
  lea  rcx, [ tmp1817 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1817 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1816 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1817 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1816 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1818 ], 101
  mov [ tmp1817 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1818 ]
  mov [ tmp1817 + Variant_t.value], rax
  lea  rcx , [ tmp1816 ]
  lea  rdx , [ tmp1817 ]
  lea  r8 , [ tmp1815 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1815 + Variant_t.value]
  mov dword [ tmp1819 ], eax
  cmp dword [ tmp1819 ], 0
  jz l1814
  lea  rcx , [ rv ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  jmp l1813
l1814:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1815 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1816 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1817 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1815
  restore tmp1816
  restore tmp1817
  restore tmp1818
  restore tmp1819
; -----------------------------------------------
; function AST_GetParentBlock
; -----------------------------------------------
AST_GetParentBlock:
  ; init frame
  ; ----------
  tmp1821 EQU rbp - 24 ; 16 bytes
  tmp1820 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1820 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1821 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1821 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1821 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx , [ tmp1821 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1820 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1821 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1820
  restore tmp1821
; -----------------------------------------------
; function AST_IsOkAsBox
; -----------------------------------------------
AST_IsOkAsBox:
  ; init frame
  ; ----------
  tmp1830 EQU rbp - 12 ; 4 bytes
  tmp1828 EQU rbp - 16 ; 4 bytes
  tmp1827 EQU rbp - 32 ; 16 bytes
  tmp1826 EQU rbp - 36 ; 4 bytes
  tmp1825 EQU rbp - 52 ; 16 bytes
  tmp1823 EQU rbp - 68 ; 16 bytes
  tmp1822 EQU rbp - 72 ; 4 bytes
  rv EQU rdi
  node EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1823 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1825 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1827 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1822 ], 0
  mov eax, dword [ tmp1822 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  mov dword [ tmp1822 ], 1
  lea  rcx, [ tmp1825 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1825 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1826 ], 201
  mov [ tmp1827 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1826 ]
  mov [ tmp1827 + Variant_t.value], rax
  lea  rcx , [ tmp1825 ]
  lea  rdx , [ tmp1827 ]
  lea  r8 , [ tmp1823 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1823 + Variant_t.value]
  mov dword [ tmp1828 ], eax
  cmp dword [ tmp1828 ], 0
  jnz l1824
  mov dword [ tmp1828 ], 1
  lea  rcx, [ tmp1827 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1827 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1826 ], 203
  mov [ tmp1825 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1826 ]
  mov [ tmp1825 + Variant_t.value], rax
  lea  rcx , [ tmp1827 ]
  lea  rdx , [ tmp1825 ]
  lea  r8 , [ tmp1823 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1823 + Variant_t.value]
  mov dword [ tmp1830 ], eax
  cmp dword [ tmp1830 ], 0
  jnz l1829
  lea  rcx, [ tmp1825 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp1825 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1826 ], 204
  mov [ tmp1827 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1826 ]
  mov [ tmp1827 + Variant_t.value], rax
  lea  rcx , [ tmp1825 ]
  lea  rdx , [ tmp1827 ]
  lea  r8 , [ tmp1823 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1823 + Variant_t.value]
  mov dword [ tmp1828 ], eax
l1829:
  mov eax, dword [ tmp1828 ]
  mov dword [ tmp1822 ], eax
l1824:
  cmp dword [ tmp1822 ], 0
  jz l1831
  mov dword [ tmp1828 ], 1
  mov eax, dword [ tmp1828 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
l1831:
l1832:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1823 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1825 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1827 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1822
  restore tmp1823
  restore tmp1825
  restore tmp1826
  restore tmp1827
  restore tmp1828
  restore tmp1830
; -----------------------------------------------
; function AST_CloneNode
; -----------------------------------------------
AST_CloneNode:
  ; init frame
  ; ----------
  oneChild EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 40 ; 16 bytes
  tmp1839 EQU rbp - 56 ; 16 bytes
  tmp1838 EQU rbp - 60 ; 4 bytes
  propertyValue EQU rbp - 76 ; 16 bytes
  propertyId EQU rbp - 92 ; 16 bytes
  tmp1833 EQU rbp - 108 ; 16 bytes
  newChildren EQU rbp - 124 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1833 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp1839 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx , [ rv ]
  call  __MOLD_VariantMapCreate
; 
; -----------------------------
; BEGIN: for keys propertyId values propertyValue
; 
  jmp l1835
l1834:
  lea  rcx , [ rv ]
  lea  rdx , [ propertyId ]
  lea  r8 , [ propertyValue ]
  call  __MOLD_VariantStoreAtKey
  ret
l1835:
  lea  rcx , [ node ]
  lea  rdx , [ propertyId ]
  lea  r8 , [ propertyValue ]
  lea  r9 , [ l1834 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys propertyId values propertyValue
; -----------------------------
; 
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp1833 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp1833 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys idx values oneChild
; 
  jmp l1837
l1836:
  mov eax, dword [ idx + Variant_t.value]
  mov dword [ tmp1838 ], eax
  lea  rcx, [ tmp1839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oneChild ]
  lea  rdi , [ tmp1839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CloneNode
  pop rdi
  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp1838 ]
  lea  r8 , [ tmp1839 ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l1837:
  lea  rcx , [ tmp1833 ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l1836 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys idx values oneChild
; -----------------------------
; 
  lea  rcx , [ rv ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1833 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp1833 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx , [ rv ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp1833 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1833 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator propertyId
  ; Skipped loop iterator propertyValue
  lea  rcx, [ tmp1839 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator idx
  ; Skipped loop iterator oneChild

  add  rsp, 176
  pop  rbp
  ret

  restore node
  restore rv
  restore newChildren
  restore tmp1833
  restore propertyId
  restore propertyValue
  restore tmp1838
  restore tmp1839
  restore idx
  restore oneChild
; -----------------------------------------------
; function SymbolTable_GetNextId
; -----------------------------------------------
SymbolTable_GetNextId:
  ; init frame
  ; ----------
  tmp1842 EQU rbp - 24 ; 16 bytes
  tmp1841 EQU rbp - 28 ; 4 bytes
  tmp1840 EQU rbp - 44 ; 16 bytes
  rv EQU rdi

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  mov [tmp1840 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1842 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SymbolTable_NextId ]
  mov [ rv + Variant_t.value], rax
  mov dword [ tmp1841 ], 1
  mov [ tmp1842 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1841 ]
  mov [ tmp1842 + Variant_t.value], rax
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1842 ]
  lea  r8 , [ tmp1840 ]
  call  __MOLD_VariantAdd
  mov eax, dword [ tmp1840 + Variant_t.value]
  mov dword [ SymbolTable_NextId ], eax

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1840 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1842 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore rv
  restore tmp1840
  restore tmp1841
  restore tmp1842
; -----------------------------------------------
; function __SymbolTable_constructor$2
; -----------------------------------------------
__SymbolTable_constructor$2:
  ; init frame
  ; ----------
  tmp1849 EQU rbp - 12 ; 4 bytes
  tmp1848 EQU rbp - 28 ; 16 bytes
  tmp1847 EQU rbp - 44 ; 16 bytes
  tmp1846 EQU rbp - 60 ; 16 bytes
  tmp1845 EQU rbp - 76 ; 16 bytes
  tmp1844 EQU rbp - 80 ; 4 bytes
  tmp1843 EQU rbp - 96 ; 16 bytes
  app EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp1843 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1845 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1846 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1847 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1848 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1843 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal172 ]
  lea  rdi , [ tmp1843 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1844 ], 0
  mov [ tmp1843 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1843 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1844 ], 128
  mov [ tmp1843 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1843 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal175 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1844 ], 0
  mov [ tmp1843 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1843 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1844 ], 0
  mov [ tmp1843 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1843 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1843 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1843 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal178 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1843 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1843 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1846 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1844 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1847 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1845 ]
  lea rdx, [ tmp1846 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1843 ]
  lea  rdx , [ __literal180 ]
  lea  r8 , [ tmp1845 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1846 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1844 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1847 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1845 ]
  lea rdx, [ tmp1846 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1843 ]
  lea  rdx , [ __literal183 ]
  lea  r8 , [ tmp1845 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1846 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1844 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1847 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1845 ]
  lea rdx, [ tmp1846 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1843 ]
  lea  rdx , [ __literal184 ]
  lea  r8 , [ tmp1845 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1846 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1844 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1847 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1845 ]
  lea rdx, [ tmp1846 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1843 ]
  lea  rdx , [ __literal185 ]
  lea  r8 , [ tmp1845 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1846 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1844 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1847 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1845 ]
  lea rdx, [ tmp1846 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1843 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp1845 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1846 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1844 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1844 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1847 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1845 ]
  lea rdx, [ tmp1846 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1843 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp1845 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal179 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1849 ], 0
  mov eax, dword [ tmp1849 ]
  mov [ tmp1843 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1843 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1843 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1843 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp1843 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1843 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1848 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore app
  restore tmp1843
  restore tmp1844
  restore tmp1845
  restore tmp1846
  restore tmp1847
  restore tmp1848
  restore tmp1849
; -----------------------------------------------
; function __SymbolTable__debug$2
; -----------------------------------------------
__SymbolTable__debug$2:
  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
; -----------------------------------------------
; function __SymbolTable__error$2
; -----------------------------------------------
__SymbolTable__error$2:
  ; init frame
  ; ----------
  tmp1851 EQU rbp - 24 ; 16 bytes
  tmp1850 EQU rbp - 40 ; 16 bytes
  msg EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp1850 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1851 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1851 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp1851 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1850 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1851 ]
  lea  rdx , [ msg ]
  lea  rdi, [ tmp1850 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*11]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1850 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1851 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp1850
  restore tmp1851
; -----------------------------------------------
; function __SymbolTable_getDeep$1
; -----------------------------------------------
__SymbolTable_getDeep$1:
  ; init frame
  ; ----------
  tmp1852 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1852 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1852 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1852
; -----------------------------------------------
; function __SymbolTable_exportSymbols$1
; -----------------------------------------------
__SymbolTable_exportSymbols$1:
  ; init frame
  ; ----------
  tmp1853 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1853 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1853 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1853
; -----------------------------------------------
; function __SymbolTable_insert$3
; -----------------------------------------------
__SymbolTable_insert$3:
  ; init frame
  ; ----------
  tmp1863 EQU rbp - 12 ; 4 bytes
  tmp1862 EQU rbp - 28 ; 16 bytes
  tmp1861 EQU rbp - 44 ; 16 bytes
  tmp1858 EQU rbp - 48 ; 4 bytes
  tmp1857 EQU rbp - 64 ; 16 bytes
  tmp1856 EQU rbp - 80 ; 16 bytes
  tmp1855 EQU rbp - 96 ; 16 bytes
  tmp1854 EQU rbp - 112 ; 16 bytes
  entry EQU rbp - 128 ; 16 bytes
  name EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ entry ], xmm0
  mov [tmp1854 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1855 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1856 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1857 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1861 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1862 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1857 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp1857 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1856 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1857 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1856 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1855 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1856 ]
  lea  rdi , [ tmp1855 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1855 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1854 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1854 + Variant_t.value]
  mov dword [ tmp1858 ], eax
  cmp dword [ tmp1858 ], 0
  jz l1859
  lea  rcx, [ tmp1862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp1862 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal189 ]
  lea  rdx , [ tmp1862 ]
  lea  r8 , [ tmp1861 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1854 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1861 ]
  lea  rdi , [ tmp1854 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
  jmp l1860
l1859:
  lea  rcx, [ tmp1854 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp1854 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1854 ]
  lea  rdx , [ name ]
  lea  r8 , [ entry ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1863 ], 0
  mov [ tmp1854 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1863 ]
  mov [ tmp1854 + Variant_t.value], rax
  lea  rcx , [ entry ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp1854 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1863 ], 0
  mov [ tmp1854 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1863 ]
  mov [ tmp1854 + Variant_t.value], rax
  lea  rcx , [ entry ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1854 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1854 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1854 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ entry ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1854 ]
  call  __MOLD_VariantStoreAtKey
l1860:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1854 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1855 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1856 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1857 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1854
  restore tmp1855
  restore tmp1856
  restore tmp1857
  restore tmp1858
  restore tmp1861
  restore tmp1862
  restore tmp1863
; -----------------------------------------------
; function __SymbolTable_remove$2
; -----------------------------------------------
__SymbolTable_remove$2:
  ; init frame
  ; ----------
  symbolInfo EQU rbp - 24 ; 16 bytes
  id EQU rbp - 40 ; 16 bytes
  tmp1870 EQU rbp - 44 ; 4 bytes
  tmp1869 EQU rbp - 60 ; 16 bytes
  tmp1868 EQU rbp - 76 ; 16 bytes
  tmp1867 EQU rbp - 92 ; 16 bytes
  tmp1864 EQU rbp - 108 ; 16 bytes
  newSymbols EQU rbp - 124 ; 16 bytes
  entry EQU rbp - 140 ; 16 bytes
  name EQU rbp - 156 ; 16 bytes
  this EQU rbp - 172 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [entry + Variant_t.type], VARIANT_UNDEFINED
  mov [newSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1864 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1867 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1868 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1869 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp1864 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1864 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea rcx, [ entry ]
  lea rdx, [ tmp1864 ]
  call __MOLD_VariantMove
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newSymbols ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1864 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp1864 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys id values symbolInfo
; 
  jmp l1866
l1865:
  lea  rcx, [ tmp1868 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1868 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ entry ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1869 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1868 ]
  lea  rdx , [ tmp1869 ]
  lea  r8 , [ tmp1867 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1867 + Variant_t.value]
  mov dword [ tmp1870 ], eax
  cmp dword [ tmp1870 ], 0
  jz l1871
  lea  rcx , [ newSymbols ]
  lea  rdx , [ id ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
l1871:
l1872:
  ret
l1866:
  lea  rcx , [ tmp1864 ]
  lea  rdx , [ id ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l1865 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys id values symbolInfo
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ newSymbols ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1864 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1867 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1868 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1869 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator id
  ; Skipped loop iterator symbolInfo

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore newSymbols
  restore tmp1864
  restore tmp1867
  restore tmp1868
  restore tmp1869
  restore tmp1870
  restore id
  restore symbolInfo
; -----------------------------------------------
; function __SymbolTable_importExternalVariable$2
; -----------------------------------------------
__SymbolTable_importExternalVariable$2:
  ; init frame
  ; ----------
  tmp1875 EQU rbp - 24 ; 16 bytes
  tmp1874 EQU rbp - 40 ; 16 bytes
  tmp1873 EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1873 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1874 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1875 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1874 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1874 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1875 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1875 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1874 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1875 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1875 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_GLOBAL ]
  mov [ tmp1875 + Variant_t.value], rax
  lea  rcx , [ tmp1874 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp1875 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1873 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1874 ]
  lea  rdi , [ tmp1873 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insert$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1873 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1874 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1875 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1873
  restore tmp1874
  restore tmp1875
; -----------------------------------------------
; function __SymbolTable_insertGlobal$3
; -----------------------------------------------
__SymbolTable_insertGlobal$3:
  ; init frame
  ; ----------
  tmp1878 EQU rbp - 24 ; 16 bytes
  tmp1877 EQU rbp - 40 ; 16 bytes
  tmp1876 EQU rbp - 56 ; 16 bytes
  entry EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ entry ], xmm0
  mov [tmp1876 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1877 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1878 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp1878 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1878 ]
  lea  rdi, [ tmp1877 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*18]
  pop rdi
  lea  rcx, [ tmp1876 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1877 ]
  lea  rdx , [ name ]
  lea  r8 , [ entry ]
  lea  rdi, [ tmp1876 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*14]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1876 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1877 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1878 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1876
  restore tmp1877
  restore tmp1878
; -----------------------------------------------
; function __SymbolTable__lookupInternal$2
; -----------------------------------------------
__SymbolTable__lookupInternal$2:
  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes
  tmp1896 EQU rbp - 28 ; 4 bytes
  tmp1892 EQU rbp - 32 ; 4 bytes
  tmp1890 EQU rbp - 36 ; 4 bytes
  tmp1887 EQU rbp - 52 ; 16 bytes
  tmp1886 EQU rbp - 56 ; 4 bytes
  tmp1885 EQU rbp - 60 ; 4 bytes
  tmp1883 EQU rbp - 64 ; 4 bytes
  tmp1880 EQU rbp - 80 ; 16 bytes
  tmp1879 EQU rbp - 96 ; 16 bytes
  tab EQU rbp - 112 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 128 ; 16 bytes
  this EQU rbp - 144 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tab + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1879 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1880 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1887 + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp1880 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1880 ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tab ]
  call __MOLD_VariantDestroy
  lea rcx, [ tab ]
  lea rdx, [ this ]
  call __MOLD_VariantMove
l1881:
  mov dword [ tmp1883 ], 0
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1880 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1880 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1879 + Variant_t.value]
  mov dword [ tmp1885 ], eax
  cmp dword [ tmp1885 ], 0
  jz l1884
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tab ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp1880 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1886 ], 0
  mov [ tmp1887 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1886 ]
  mov [ tmp1887 + Variant_t.value], rax
  lea  rcx , [ tmp1887 ]
  lea  rdx , [ tmp1880 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1879 + Variant_t.value]
  mov dword [ tmp1883 ], eax
l1884:
  cmp dword [ tmp1883 ], 0
  jz l1882
  lea  rcx , [ tab ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tab ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1879 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tab ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp1879 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*19]
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1879 ]
  call __MOLD_VariantMove
  jmp l1881
l1882:
  lea  rcx, [ tmp1887 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1887 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1887 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1879 + Variant_t.value]
  mov dword [ tmp1885 ], eax
  cmp dword [ tmp1885 ], 0
  jz l1888
  mov dword [ tmp1890 ], 0
  lea  rcx, [ tmp1887 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tab ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1887 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1886 ], 0
  mov [ tmp1880 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1886 ]
  mov [ tmp1880 + Variant_t.value], rax
  lea  rcx , [ tmp1887 ]
  lea  rdx , [ tmp1880 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1879 + Variant_t.value]
  mov dword [ tmp1892 ], eax
  cmp dword [ tmp1892 ], 0
  jz l1891
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1880 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1886 ], 0
  mov [ tmp1887 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1886 ]
  mov [ tmp1887 + Variant_t.value], rax
  lea  rcx , [ tmp1887 ]
  lea  rdx , [ tmp1880 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1879 + Variant_t.value]
  mov dword [ tmp1890 ], eax
l1891:
  cmp dword [ tmp1890 ], 0
  jz l1893
  mov dword [ tmp1892 ], 1
  lea  rcx, [ tmp1887 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp1887 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1886 ], 1
  mov [ tmp1880 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1886 ]
  mov [ tmp1880 + Variant_t.value], rax
  lea  rcx , [ tmp1887 ]
  lea  rdx , [ tmp1880 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1879 + Variant_t.value]
  mov dword [ tmp1896 ], eax
  cmp dword [ tmp1896 ], 0
  jnz l1895
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp1880 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1886 ], 2
  mov [ tmp1887 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1886 ]
  mov [ tmp1887 + Variant_t.value], rax
  lea  rcx , [ tmp1880 ]
  lea  rdx , [ tmp1887 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1879 + Variant_t.value]
  mov dword [ tmp1892 ], eax
l1895:
  cmp dword [ tmp1892 ], 0
  jz l1897
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp1886 ], 0
  lea  rcx , [ x ]
  lea  rdx , [ tmp1886 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
l1897:
l1898:
l1893:
l1894:
l1888:
l1889:

  ; clean frame
  ; -----------
  lea  rcx, [ tab ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1879 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1887 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tab
  restore tmp1879
  restore tmp1880
  restore tmp1883
  restore tmp1885
  restore tmp1886
  restore tmp1887
  restore tmp1890
  restore tmp1892
  restore tmp1896
  restore x
; -----------------------------------------------
; function __SymbolTable_lookup$2
; -----------------------------------------------
__SymbolTable_lookup$2:
  ; init frame
  ; ----------
  tmp1906 EQU rbp - 24 ; 16 bytes
  tmp1905 EQU rbp - 40 ; 16 bytes
  tmp1904 EQU rbp - 56 ; 16 bytes
  tmp1901 EQU rbp - 60 ; 4 bytes
  tmp1900 EQU rbp - 76 ; 16 bytes
  tmp1899 EQU rbp - 92 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1899 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1900 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1904 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1905 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1906 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1899 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1899 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__lookupInternal$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1899 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1900 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1900 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1900 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1899 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1899 + Variant_t.value]
  mov dword [ tmp1901 ], eax
  cmp dword [ tmp1901 ], 0
  jz l1902
  lea  rcx, [ tmp1905 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal193 ]
  lea  r8 , [ tmp1905 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1904 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal52 ]
  lea  rdx , [ tmp1905 ]
  lea  r8 , [ tmp1904 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1899 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1904 ]
  lea  rdi , [ tmp1899 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l1902:
l1903:
  lea  rcx, [ tmp1900 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1900 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1906 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1906 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1906 ]
  lea  rdx , [ tmp1900 ]
  lea  r8 , [ tmp1899 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1899 + Variant_t.value]
  mov dword [ tmp1901 ], eax
  cmp dword [ tmp1901 ], 0
  jz l1907
  lea  rcx, [ tmp1899 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1899 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1899 ]
  call  __MOLD_VariantStoreAtKey
l1907:
l1908:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1899 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1900 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1906 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1899
  restore tmp1900
  restore tmp1901
  restore tmp1904
  restore tmp1905
  restore tmp1906
; -----------------------------------------------
; function __SymbolTable_lookupForRead$2
; -----------------------------------------------
__SymbolTable_lookupForRead$2:
  ; init frame
  ; ----------
  tmp1912 EQU rbp - 24 ; 16 bytes
  tmp1911 EQU rbp - 28 ; 4 bytes
  tmp1910 EQU rbp - 44 ; 16 bytes
  tmp1909 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1909 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1910 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1912 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1909 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1909 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1909 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1910 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1911 ], 1
  mov [ tmp1912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1911 ]
  mov [ tmp1912 + Variant_t.value], rax
  lea  rcx , [ tmp1910 ]
  lea  rdx , [ tmp1912 ]
  lea  r8 , [ tmp1909 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1909 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1909 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1910 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1912 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1909
  restore tmp1910
  restore tmp1911
  restore tmp1912
; -----------------------------------------------
; function __SymbolTable_lookupForCall$2
; -----------------------------------------------
__SymbolTable_lookupForCall$2:
  ; init frame
  ; ----------
  tmp1916 EQU rbp - 24 ; 16 bytes
  tmp1915 EQU rbp - 28 ; 4 bytes
  tmp1914 EQU rbp - 44 ; 16 bytes
  tmp1913 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1913 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1914 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1916 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1913 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1913 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1913 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1914 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1914 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1915 ], 1
  mov [ tmp1916 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1915 ]
  mov [ tmp1916 + Variant_t.value], rax
  lea  rcx , [ tmp1914 ]
  lea  rdx , [ tmp1916 ]
  lea  r8 , [ tmp1913 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1913 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1913 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1914 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1916 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1913
  restore tmp1914
  restore tmp1915
  restore tmp1916
; -----------------------------------------------
; function __SymbolTable_lookupForWrite$2
; -----------------------------------------------
__SymbolTable_lookupForWrite$2:
  ; init frame
  ; ----------
  tmp1920 EQU rbp - 24 ; 16 bytes
  tmp1919 EQU rbp - 28 ; 4 bytes
  tmp1918 EQU rbp - 44 ; 16 bytes
  tmp1917 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1917 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1918 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1920 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1917 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1917 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp1918 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1919 ], 1
  mov [ tmp1920 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1919 ]
  mov [ tmp1920 + Variant_t.value], rax
  lea  rcx , [ tmp1918 ]
  lea  rdx , [ tmp1920 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp1917 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1917 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1920 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1917
  restore tmp1918
  restore tmp1919
  restore tmp1920
; -----------------------------------------------
; function __SymbolTable_lookupForReadAndWrite$2
; -----------------------------------------------
__SymbolTable_lookupForReadAndWrite$2:
  ; init frame
  ; ----------
  tmp1924 EQU rbp - 24 ; 16 bytes
  tmp1923 EQU rbp - 28 ; 4 bytes
  tmp1922 EQU rbp - 44 ; 16 bytes
  tmp1921 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1921 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1922 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1924 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1921 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1921 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1922 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1922 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1923 ], 1
  mov [ tmp1924 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1923 ]
  mov [ tmp1924 + Variant_t.value], rax
  lea  rcx , [ tmp1922 ]
  lea  rdx , [ tmp1924 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1924 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp1924 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1923 ], 1
  mov [ tmp1922 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1923 ]
  mov [ tmp1922 + Variant_t.value], rax
  lea  rcx , [ tmp1924 ]
  lea  rdx , [ tmp1922 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp1921 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1921 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1922 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1924 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1921
  restore tmp1922
  restore tmp1923
  restore tmp1924
; -----------------------------------------------
; function __SymbolTable_lookupForWriteOrInsert$2
; -----------------------------------------------
__SymbolTable_lookupForWriteOrInsert$2:
  ; init frame
  ; ----------
  tmp1928 EQU rbp - 24 ; 16 bytes
  tmp1927 EQU rbp - 28 ; 4 bytes
  tmp1926 EQU rbp - 44 ; 16 bytes
  tmp1925 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1925 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1926 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1928 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1926 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1926 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_isset$2
  pop rdi
  mov dword [ tmp1927 ], 0
  mov eax, dword [ tmp1927 ]
  mov [ tmp1928 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1928 + Variant_t.value], rax
  lea  rcx , [ tmp1926 ]
  lea  rdx , [ tmp1928 ]
  lea  r8 , [ tmp1925 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp1925 + Variant_t.value]
  mov dword [ tmp1927 ], eax
  cmp dword [ tmp1927 ], 0
  jz l1929
  lea  rcx, [ tmp1925 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1925 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertLocal$2
  pop rdi
l1929:
l1930:
  lea  rcx, [ tmp1925 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1925 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForWrite$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1925 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1925 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1926 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1928 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1925
  restore tmp1926
  restore tmp1927
  restore tmp1928
; -----------------------------------------------
; function __SymbolTable_lookupGlobal$2
; -----------------------------------------------
__SymbolTable_lookupGlobal$2:
  ; init frame
  ; ----------
  tmp1932 EQU rbp - 24 ; 16 bytes
  tmp1931 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1931 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1932 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1932 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp1932 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1931 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1932 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp1931 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1931 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1931 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1932 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1931
  restore tmp1932
; -----------------------------------------------
; function __SymbolTable_decreaseReadHits$2
; -----------------------------------------------
__SymbolTable_decreaseReadHits$2:
  ; init frame
  ; ----------
  tmp1936 EQU rbp - 24 ; 16 bytes
  tmp1935 EQU rbp - 28 ; 4 bytes
  tmp1934 EQU rbp - 44 ; 16 bytes
  tmp1933 EQU rbp - 60 ; 16 bytes
  entry EQU rbp - 76 ; 16 bytes
  name EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [entry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1933 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1934 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1936 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1933 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1933 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea rcx, [ entry ]
  lea rdx, [ tmp1933 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1934 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ entry ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1934 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1935 ], 1
  mov [ tmp1936 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1935 ]
  mov [ tmp1936 + Variant_t.value], rax
  lea  rcx , [ tmp1934 ]
  lea  rdx , [ tmp1936 ]
  lea  r8 , [ tmp1933 ]
  call  __MOLD_VariantSub
  lea  rcx , [ entry ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp1933 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1933 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1934 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1936 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1933
  restore tmp1934
  restore tmp1935
  restore tmp1936
; -----------------------------------------------
; function __SymbolTable_decreaseWriteHits$2
; -----------------------------------------------
__SymbolTable_decreaseWriteHits$2:
  ; init frame
  ; ----------
  tmp1940 EQU rbp - 24 ; 16 bytes
  tmp1939 EQU rbp - 28 ; 4 bytes
  tmp1938 EQU rbp - 44 ; 16 bytes
  tmp1937 EQU rbp - 60 ; 16 bytes
  entry EQU rbp - 76 ; 16 bytes
  name EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [entry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1937 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1938 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1940 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1937 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea rcx, [ entry ]
  lea rdx, [ tmp1937 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1938 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ entry ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp1938 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1939 ], 1
  mov [ tmp1940 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1939 ]
  mov [ tmp1940 + Variant_t.value], rax
  lea  rcx , [ tmp1938 ]
  lea  rdx , [ tmp1940 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantSub
  lea  rcx , [ entry ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1938 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1940 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1937
  restore tmp1938
  restore tmp1939
  restore tmp1940
; -----------------------------------------------
; function __SymbolTable_isset$2
; -----------------------------------------------
__SymbolTable_isset$2:
  ; init frame
  ; ----------
  tmp1943 EQU rbp - 24 ; 16 bytes
  tmp1942 EQU rbp - 40 ; 16 bytes
  tmp1941 EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1941 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1942 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1943 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1943 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1943 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__lookupInternal$2
  pop rdi
  lea  rcx, [ tmp1942 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1943 ]
  lea  rdi , [ tmp1942 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1942 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareNE

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1941 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1942 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1943 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1941
  restore tmp1942
  restore tmp1943
; -----------------------------------------------
; function __SymbolTable_enterScope$1
; -----------------------------------------------
__SymbolTable_enterScope$1:
  ; init frame
  ; ----------
  tmp1953 EQU rbp - 24 ; 16 bytes
  tmp1952 EQU rbp - 28 ; 4 bytes
  tmp1951 EQU rbp - 44 ; 16 bytes
  tmp1950 EQU rbp - 60 ; 16 bytes
  tmp1947 EQU rbp - 64 ; 4 bytes
  tmp1946 EQU rbp - 80 ; 16 bytes
  tmp1945 EQU rbp - 96 ; 16 bytes
  tmp1944 EQU rbp - 112 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1944 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1945 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1946 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1950 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1951 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1953 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal194 ]
  lea  rdi , [ tmp1944 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
  lea  rcx, [ tmp1945 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp1945 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1946 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal175 ]
  lea  r8 , [ tmp1946 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1946 ]
  lea  rdx , [ tmp1945 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp1944 + Variant_t.value]
  mov dword [ tmp1947 ], eax
  cmp dword [ tmp1947 ], 0
  jz l1948
  lea  rcx, [ tmp1945 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp1945 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1946 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1945 ]
  lea  rdi , [ tmp1946 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1951 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1946 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp1951 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1950 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal195 ]
  lea  rdx , [ tmp1951 ]
  lea  r8 , [ tmp1950 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1950 ]
  lea  rdi , [ tmp1944 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l1948:
l1949:
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1944 ]
  lea  rdx, [vtable_SymbolTable]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp1946 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp1946 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1945 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1944 ]
  lea  rdx , [ tmp1946 ]
  lea  rdi , [ tmp1945 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_constructor$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1944 ]
  call __MOLD_VariantMove
  lea  rcx , [ rv ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1945 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp1945 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1952 ], 1
  mov [ tmp1953 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1952 ]
  mov [ tmp1953 + Variant_t.value], rax
  lea  rcx , [ tmp1945 ]
  lea  rdx , [ tmp1953 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp1944 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1945 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1946 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1953 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1944
  restore tmp1945
  restore tmp1946
  restore tmp1947
  restore tmp1950
  restore tmp1951
  restore tmp1952
  restore tmp1953
; -----------------------------------------------
; function __SymbolTable_enterScopeForLoop$1
; -----------------------------------------------
__SymbolTable_enterScopeForLoop$1:
  ; init frame
  ; ----------
  tmp1957 EQU rbp - 24 ; 16 bytes
  tmp1956 EQU rbp - 28 ; 4 bytes
  tmp1955 EQU rbp - 44 ; 16 bytes
  tmp1954 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1954 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1955 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1957 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1954 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp1954 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_enterScope$1
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1954 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1955 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1955 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1956 ], 1
  mov [ tmp1957 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1956 ]
  mov [ tmp1957 + Variant_t.value], rax
  lea  rcx , [ tmp1955 ]
  lea  rdx , [ tmp1957 ]
  lea  r8 , [ tmp1954 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1954 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1954 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1955 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1957 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1954
  restore tmp1955
  restore tmp1956
  restore tmp1957
; -----------------------------------------------
; function __SymbolTable_enterScopeForProcedure$2
; -----------------------------------------------
__SymbolTable_enterScopeForProcedure$2:
  ; init frame
  ; ----------
  tmp1961 EQU rbp - 24 ; 16 bytes
  tmp1960 EQU rbp - 28 ; 4 bytes
  tmp1959 EQU rbp - 44 ; 16 bytes
  tmp1958 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  functionName EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ functionName ], xmm0
  mov [tmp1958 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1959 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1961 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1958 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp1958 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_enterScope$1
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1958 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1959 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1959 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1960 ], 1
  mov [ tmp1961 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1960 ]
  mov [ tmp1961 + Variant_t.value], rax
  lea  rcx , [ tmp1959 ]
  lea  rdx , [ tmp1961 ]
  lea  r8 , [ tmp1958 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1958 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ functionName ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1958 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1959 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore functionName
  restore rv
  restore tmp1958
  restore tmp1959
  restore tmp1960
  restore tmp1961
; -----------------------------------------------
; function __SymbolTable_leaveScope$1
; -----------------------------------------------
__SymbolTable_leaveScope$1:
  ; init frame
  ; ----------
  tmp1966 EQU rbp - 12 ; 4 bytes
  tmp1965 EQU rbp - 28 ; 16 bytes
  tmp1964 EQU rbp - 32 ; 4 bytes
  tmp1963 EQU rbp - 48 ; 16 bytes
  tmp1962 EQU rbp - 64 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1962 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1963 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1965 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1962 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal198 ]
  lea  rdi , [ tmp1962 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
  lea  rcx, [ tmp1963 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp1963 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1964 ], 1
  mov [ tmp1965 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1964 ]
  mov [ tmp1965 + Variant_t.value], rax
  lea  rcx , [ tmp1963 ]
  lea  rdx , [ tmp1965 ]
  lea  r8 , [ tmp1962 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp1962 + Variant_t.value]
  mov dword [ tmp1966 ], eax
  cmp dword [ tmp1966 ], 0
  jz l1967
  lea  rcx, [ tmp1962 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal199 ]
  lea  rdi , [ tmp1962 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l1967:
l1968:
  lea  rcx , [ this ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1962 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1963 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1965 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1962
  restore tmp1963
  restore tmp1964
  restore tmp1965
  restore tmp1966
; -----------------------------------------------
; function __SymbolTable_insertFunction$3
; -----------------------------------------------
__SymbolTable_insertFunction$3:
  ; init frame
  ; ----------
  tmp1970 EQU rbp - 24 ; 16 bytes
  tmp1969 EQU rbp - 40 ; 16 bytes
  newEntry EQU rbp - 56 ; 16 bytes
  proto EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  mov [newEntry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1969 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1970 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1969 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1970 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1969 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1970 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_FUNCTION ]
  mov [ tmp1970 + Variant_t.value], rax
  lea  rcx , [ tmp1969 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1970 ]
  lea rdx, [ proto ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1969 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp1969 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1969 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi , [ tmp1969 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertGlobal$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1969 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore proto
  restore newEntry
  restore tmp1969
  restore tmp1970
; -----------------------------------------------
; function __SymbolTable_lookupFunction$3
; -----------------------------------------------
__SymbolTable_lookupFunction$3:
  ; init frame
  ; ----------
  tmp1990 EQU rbp - 24 ; 16 bytes
  tmp1989 EQU rbp - 40 ; 16 bytes
  tmp1988 EQU rbp - 56 ; 16 bytes
  tmp1987 EQU rbp - 72 ; 16 bytes
  tmp1986 EQU rbp - 88 ; 16 bytes
  tmp1981 EQU rbp - 92 ; 4 bytes
  tmp1980 EQU rbp - 108 ; 16 bytes
  tmp1979 EQU rbp - 124 ; 16 bytes
  tmp1978 EQU rbp - 140 ; 16 bytes
  tmp1975 EQU rbp - 144 ; 4 bytes
  tmp1974 EQU rbp - 160 ; 16 bytes
  tmp1973 EQU rbp - 164 ; 4 bytes
  tmp1972 EQU rbp - 180 ; 16 bytes
  tmp1971 EQU rbp - 196 ; 16 bytes
  rv EQU rdi
  paramsCnt EQU rbp - 212 ; 16 bytes
  name EQU rbp - 228 ; 16 bytes
  this EQU rbp - 244 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp1971 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1972 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1974 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1978 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1979 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1980 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1986 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1987 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1988 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1989 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1990 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1971 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1971 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupGlobal$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1971 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1972 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp1972 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1973 ], 7
  mov [ tmp1974 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1973 ]
  mov [ tmp1974 + Variant_t.value], rax
  lea  rcx , [ tmp1972 ]
  lea  rdx , [ tmp1974 ]
  lea  r8 , [ tmp1971 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1971 + Variant_t.value]
  mov dword [ tmp1975 ], eax
  cmp dword [ tmp1975 ], 0
  jz l1976
  lea  rcx, [ tmp1979 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal201 ]
  lea  r8 , [ tmp1979 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1978 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal52 ]
  lea  rdx , [ tmp1979 ]
  lea  r8 , [ tmp1978 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1971 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1978 ]
  lea  rdi , [ tmp1971 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
  jmp l1977
l1976:
  lea  rcx, [ tmp1980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp1980 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1972 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1980 ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp1972 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1974 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1972 ]
  lea  rdi , [ tmp1974 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1974 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp1971 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1971 + Variant_t.value]
  mov dword [ tmp1981 ], eax
  cmp dword [ tmp1981 ], 0
  jz l1982
  mov dword [ tmp1973 ], 1
  mov [ tmp1974 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1973 ]
  mov [ tmp1974 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp1974 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantSub
l1982:
l1983:
  lea  rcx, [ tmp1980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp1980 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1972 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1980 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp1972 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1974 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1972 ]
  lea  rdi , [ tmp1974 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1974 ]
  lea  rdx , [ paramsCnt ]
  lea  r8 , [ tmp1971 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1971 + Variant_t.value]
  mov dword [ tmp1981 ], eax
  cmp dword [ tmp1981 ], 0
  jz l1984
  lea  rcx, [ tmp1988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp1988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1988 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp1980 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1972 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1980 ]
  lea  rdi , [ tmp1972 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1974 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp1972 ]
  lea  rdi , [ tmp1974 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1972 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramsCnt ]
  lea  rdi , [ tmp1972 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1972 ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp1990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1989 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal205 ]
  lea  rdx , [ tmp1990 ]
  lea  r8 , [ tmp1989 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1987 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1974 ]
  lea  rdx , [ tmp1989 ]
  lea  r8 , [ tmp1987 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1986 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal204 ]
  lea  rdx , [ tmp1987 ]
  lea  r8 , [ tmp1986 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1979 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp1986 ]
  lea  r8 , [ tmp1979 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1978 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal203 ]
  lea  rdx , [ tmp1979 ]
  lea  r8 , [ tmp1978 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1971 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp1978 ]
  lea  rdi , [ tmp1971 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l1984:
l1985:
l1977:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1971 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1972 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1974 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1980 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1988 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore name
  restore paramsCnt
  restore rv
  restore tmp1971
  restore tmp1972
  restore tmp1973
  restore tmp1974
  restore tmp1975
  restore tmp1978
  restore tmp1979
  restore tmp1980
  restore tmp1981
  restore tmp1986
  restore tmp1987
  restore tmp1988
  restore tmp1989
  restore tmp1990
; -----------------------------------------------
; function __SymbolTable_getCurrentFunctionName$1
; -----------------------------------------------
__SymbolTable_getCurrentFunctionName$1:
  ; init frame
  ; ----------
  tmp1991 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1991 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1991 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1991
; -----------------------------------------------
; function __SymbolTable_insertClass$3
; -----------------------------------------------
__SymbolTable_insertClass$3:
  ; init frame
  ; ----------
  tmp1993 EQU rbp - 24 ; 16 bytes
  tmp1992 EQU rbp - 40 ; 16 bytes
  newEntry EQU rbp - 56 ; 16 bytes
  proto EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  mov [newEntry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1992 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1993 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1992 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1992 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1993 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1993 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1992 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1993 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_CLASS ]
  mov [ tmp1993 + Variant_t.value], rax
  lea  rcx , [ tmp1992 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp1993 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1993 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1993 ]
  lea rdx, [ proto ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1992 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp1993 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp1992 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1992 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi , [ tmp1992 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertGlobal$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1992 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1993 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore proto
  restore newEntry
  restore tmp1992
  restore tmp1993
; -----------------------------------------------
; function __SymbolTable_lookupClass$2
; -----------------------------------------------
__SymbolTable_lookupClass$2:
  ; init frame
  ; ----------
  tmp2002 EQU rbp - 24 ; 16 bytes
  tmp2001 EQU rbp - 40 ; 16 bytes
  tmp1998 EQU rbp - 44 ; 4 bytes
  tmp1997 EQU rbp - 60 ; 16 bytes
  tmp1996 EQU rbp - 64 ; 4 bytes
  tmp1995 EQU rbp - 80 ; 16 bytes
  tmp1994 EQU rbp - 96 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1994 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1995 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1997 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2001 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2002 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1994 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1994 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupGlobal$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp1994 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1995 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp1995 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1996 ], 8
  mov [ tmp1997 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1996 ]
  mov [ tmp1997 + Variant_t.value], rax
  lea  rcx , [ tmp1995 ]
  lea  rdx , [ tmp1997 ]
  lea  r8 , [ tmp1994 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1994 + Variant_t.value]
  mov dword [ tmp1998 ], eax
  cmp dword [ tmp1998 ], 0
  jz l1999
  lea  rcx, [ tmp2002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp2002 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2001 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal52 ]
  lea  rdx , [ tmp2002 ]
  lea  r8 , [ tmp2001 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1994 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2001 ]
  lea  rdi , [ tmp1994 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l1999:
l2000:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1994 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1995 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1997 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1994
  restore tmp1995
  restore tmp1996
  restore tmp1997
  restore tmp1998
  restore tmp2001
  restore tmp2002
; -----------------------------------------------
; function __SymbolTable_insertLocal$2
; -----------------------------------------------
__SymbolTable_insertLocal$2:
  ; init frame
  ; ----------
  tmp2007 EQU rbp - 12 ; 4 bytes
  tmp2006 EQU rbp - 28 ; 16 bytes
  tmp2005 EQU rbp - 32 ; 4 bytes
  tmp2004 EQU rbp - 48 ; 16 bytes
  tmp2003 EQU rbp - 64 ; 16 bytes
  newEntry EQU rdi
  name EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp2003 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2004 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2006 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2004 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp2004 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2005 ], 1
  mov [ tmp2006 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2005 ]
  mov [ tmp2006 + Variant_t.value], rax
  lea  rcx , [ tmp2004 ]
  lea  rdx , [ tmp2006 ]
  lea  r8 , [ tmp2003 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2003 + Variant_t.value]
  mov dword [ tmp2007 ], eax
  cmp dword [ tmp2007 ], 0
  jz l2008
  lea  rcx, [ tmp2003 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal208 ]
  lea  rdi , [ tmp2003 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l2008:
l2009:
  lea  rcx, [ tmp2003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2003 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2006 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2006 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2003 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2006 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2006 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_LOCAL ]
  mov [ tmp2006 + Variant_t.value], rax
  lea  rcx , [ tmp2003 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2006 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2003 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2003 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi , [ tmp2003 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insert$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2003 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2004 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2006 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore newEntry
  restore tmp2003
  restore tmp2004
  restore tmp2005
  restore tmp2006
  restore tmp2007
; -----------------------------------------------
; function __SymbolTable_importGlobal$2
; -----------------------------------------------
__SymbolTable_importGlobal$2:
  ; init frame
  ; ----------
  loopLevel EQU rbp - 24 ; 16 bytes
  readHits EQU rbp - 40 ; 16 bytes
  writeHits EQU rbp - 56 ; 16 bytes
  mainScope EQU rbp - 72 ; 16 bytes
  tmp2027 EQU rbp - 88 ; 16 bytes
  tmp2026 EQU rbp - 104 ; 16 bytes
  tmp2023 EQU rbp - 108 ; 4 bytes
  tmp2020 EQU rbp - 112 ; 4 bytes
  tmp2017 EQU rbp - 116 ; 4 bytes
  tmp2014 EQU rbp - 120 ; 4 bytes
  tmp2013 EQU rbp - 136 ; 16 bytes
  tmp2012 EQU rbp - 140 ; 4 bytes
  tmp2011 EQU rbp - 156 ; 16 bytes
  tmp2010 EQU rbp - 172 ; 16 bytes
  symbolInfo EQU rbp - 188 ; 16 bytes
  name EQU rbp - 204 ; 16 bytes
  this EQU rbp - 220 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2010 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2011 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2013 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2026 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2027 + Variant_t.type], VARIANT_UNDEFINED
  mov [mainScope + Variant_t.type], VARIANT_UNDEFINED
  mov [writeHits + Variant_t.type], VARIANT_UNDEFINED
  mov [readHits + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLevel + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 1
  mov [ tmp2013 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2013 + Variant_t.value], rax
  lea  rcx , [ tmp2011 ]
  lea  rdx , [ tmp2013 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp2010 + Variant_t.value]
  mov dword [ tmp2014 ], eax
  cmp dword [ tmp2014 ], 0
  jz l2015
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal209 ]
  lea  rdi , [ tmp2010 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
  jmp l2016
l2015:
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2013 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_isset$2
  pop rdi
  mov dword [ tmp2017 ], 1
  mov eax, dword [ tmp2017 ]
  mov [ tmp2011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2011 + Variant_t.value], rax
  lea  rcx , [ tmp2013 ]
  lea  rdx , [ tmp2011 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2010 + Variant_t.value]
  mov dword [ tmp2017 ], eax
  cmp dword [ tmp2017 ], 0
  jz l2018
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2010 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2010 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 2
  mov [ tmp2013 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2013 + Variant_t.value], rax
  lea  rcx , [ tmp2011 ]
  lea  rdx , [ tmp2013 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2010 + Variant_t.value]
  mov dword [ tmp2020 ], eax
  cmp dword [ tmp2020 ], 0
  jz l2021
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2013 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 5
  mov [ tmp2011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2011 + Variant_t.value], rax
  lea  rcx , [ tmp2013 ]
  lea  rdx , [ tmp2011 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2010 + Variant_t.value]
  mov dword [ tmp2023 ], eax
  cmp dword [ tmp2023 ], 0
  jz l2024
  lea  rcx, [ tmp2027 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp2027 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal210 ]
  lea  rdx , [ tmp2027 ]
  lea  r8 , [ tmp2026 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2026 ]
  lea  rdi , [ tmp2010 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l2024:
l2025:
l2021:
l2022:
  jmp l2019
l2018:
  lea  rcx, [ mainScope ]
  call __MOLD_VariantDestroy
  lea rcx, [ mainScope ]
  lea rdx, [ this ]
  call __MOLD_VariantMove
l2028:
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ mainScope ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 1
  mov [ tmp2013 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2013 + Variant_t.value], rax
  lea  rcx , [ tmp2013 ]
  lea  rdx , [ tmp2011 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2010 + Variant_t.value]
  mov dword [ tmp2020 ], eax
  cmp dword [ tmp2020 ], 0
  jz l2029
  lea  rcx , [ mainScope ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ mainScope ]
  call  __MOLD_VariantLoadFromKey
  jmp l2028
l2029:
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ mainScope ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp2010 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2010 ]
  call __MOLD_VariantMove
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ loopLevel ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ loopLevel ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2013 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 2
  mov [ tmp2011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2011 + Variant_t.value], rax
  lea  rcx , [ tmp2013 ]
  lea  rdx , [ tmp2011 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2010 + Variant_t.value]
  mov dword [ tmp2023 ], eax
  cmp dword [ tmp2023 ], 0
  jz l2030
  mov dword [ tmp2012 ], 2
  mov [ tmp2010 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2010 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2011 ]
  lea  rdx , [ name ]
  lea  r8 , [ symbolInfo ]
  lea  rdi, [ tmp2010 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*14]
  pop rdi
l2030:
l2031:
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ symbolInfo ]
  lea  rdi , [ tmp2010 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insert$3
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2011 ]
  lea  rdx , [ loopLevel ]
  lea  r8 , [ tmp2010 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2010 + Variant_t.value]
  mov dword [ tmp2023 ], eax
  cmp dword [ tmp2023 ], 0
  jz l2032
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ loopLevel ]
  call  __MOLD_VariantStoreAtKey
l2032:
l2033:
l2019:
l2016:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2010 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mainScope ]
  call __MOLD_VariantDestroy
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLevel ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore tmp2010
  restore tmp2011
  restore tmp2012
  restore tmp2013
  restore tmp2014
  restore tmp2017
  restore tmp2020
  restore tmp2023
  restore tmp2026
  restore tmp2027
  restore mainScope
  restore writeHits
  restore readHits
  restore loopLevel
; -----------------------------------------------
; function __SymbolTable_insertParam$3
; -----------------------------------------------
__SymbolTable_insertParam$3:
  ; init frame
  ; ----------
  tmp2035 EQU rbp - 24 ; 16 bytes
  tmp2034 EQU rbp - 40 ; 16 bytes
  newEntry EQU rdi
  paramId EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramId ], xmm0
  mov [tmp2034 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2035 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2034 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2034 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2035 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2035 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2034 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2035 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2035 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_PARAM ]
  mov [ tmp2035 + Variant_t.value], rax
  lea  rcx , [ tmp2034 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2035 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2035 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2035 ]
  lea rdx, [ paramId ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2034 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2035 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2034 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2034 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi , [ tmp2034 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insert$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2034 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2035 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore paramId
  restore newEntry
  restore tmp2034
  restore tmp2035
; -----------------------------------------------
; function __SymbolTable_insertRetVal$2
; -----------------------------------------------
__SymbolTable_insertRetVal$2:
  ; init frame
  ; ----------
  tmp2039 EQU rbp - 12 ; 4 bytes
  tmp2038 EQU rbp - 16 ; 4 bytes
  tmp2037 EQU rbp - 32 ; 16 bytes
  tmp2036 EQU rbp - 48 ; 16 bytes
  newEntry EQU rdi
  name EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp2036 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2037 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2036 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2036 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2037 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2037 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2036 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2037 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2037 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_RETVAL ]
  mov [ tmp2037 + Variant_t.value], rax
  lea  rcx , [ tmp2036 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2037 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2039 ], 1
  mov eax, dword [ tmp2039 ]
  neg eax
  mov dword [ tmp2038 ], eax
  mov [ tmp2037 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2038 ]
  mov [ tmp2037 + Variant_t.value], rax
  lea  rcx , [ tmp2036 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2037 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2036 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2036 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi , [ tmp2036 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insert$3
  pop rdi
  lea  rcx, [ tmp2036 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2036 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForRead$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2036 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2037 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore newEntry
  restore tmp2036
  restore tmp2037
  restore tmp2038
  restore tmp2039
; -----------------------------------------------
; function __SymbolTable_insertConst$3
; -----------------------------------------------
__SymbolTable_insertConst$3:
  ; init frame
  ; ----------
  tmp2041 EQU rbp - 24 ; 16 bytes
  tmp2040 EQU rbp - 40 ; 16 bytes
  newEntry EQU rdi
  value EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [tmp2040 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2041 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2040 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2041 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2041 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2040 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2041 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2041 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_CONST ]
  mov [ tmp2041 + Variant_t.value], rax
  lea  rcx , [ tmp2040 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2041 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2041 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2041 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2040 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2041 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2040 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2040 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi , [ tmp2040 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insert$3
  pop rdi
  lea  rcx, [ tmp2041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2041 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2040 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2041 ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi, [ tmp2040 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*14]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2040 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2041 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore newEntry
  restore tmp2040
  restore tmp2041
; -----------------------------------------------
; function __SymbolTable_insertLiteral$2
; -----------------------------------------------
__SymbolTable_insertLiteral$2:
  ; init frame
  ; ----------
  name EQU rbp - 24 ; 16 bytes
  tmp2049 EQU rbp - 28 ; 4 bytes
  tmp2048 EQU rbp - 44 ; 16 bytes
  tmp2045 EQU rbp - 48 ; 4 bytes
  tmp2044 EQU rbp - 64 ; 16 bytes
  tmp2043 EQU rbp - 80 ; 16 bytes
  tmp2042 EQU rbp - 96 ; 16 bytes
  literalEntry EQU rdi
  text EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  mov [tmp2042 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2043 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2044 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2048 + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2044 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2044 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2044 ]
  lea  rdx , [ __literal178 ]
  lea  r8 , [ tmp2043 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2043 ]
  lea  rdx , [ text ]
  lea  r8 , [ literalEntry ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ literalEntry ]
  lea  rdi , [ tmp2043 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2043 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2042 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2042 + Variant_t.value]
  mov dword [ tmp2045 ], eax
  cmp dword [ tmp2045 ], 0
  jz l2046
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2043 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2043 ]
  lea  rdi , [ tmp2042 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal211 ]
  lea  rdx , [ tmp2042 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ text ]
  lea  rdi , [ tmp2042 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertConst$3
  pop rdi
  lea rcx, [ literalEntry ]
  lea rdx, [ tmp2042 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2043 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2043 ]
  lea  rdx , [ __literal178 ]
  lea  r8 , [ tmp2042 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2042 ]
  lea  rdx , [ text ]
  lea  r8 , [ literalEntry ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2049 ], 4
  mov [ tmp2042 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2049 ]
  mov [ tmp2042 + Variant_t.value], rax
  lea  rcx , [ literalEntry ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2042 ]
  call  __MOLD_VariantStoreAtKey
l2046:
l2047:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2044 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore text
  restore literalEntry
  restore tmp2042
  restore tmp2043
  restore tmp2044
  restore tmp2045
  restore tmp2048
  restore tmp2049
  restore name
; -----------------------------------------------
; function __SymbolTable_createConstFromValue$2
; -----------------------------------------------
__SymbolTable_createConstFromValue$2:
  ; init frame
  ; ----------
  tmp2052 EQU rbp - 24 ; 16 bytes
  tmp2051 EQU rbp - 40 ; 16 bytes
  tmp2050 EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  value EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  mov [tmp2050 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2051 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2052 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2052 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2052 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  lea  rcx, [ tmp2051 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2052 ]
  lea  rdi , [ tmp2051 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ __literal212 ]
  lea  rdx , [ tmp2051 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2051 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  lea  rdi , [ tmp2051 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertConst$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2051 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2052 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore value
  restore rv
  restore tmp2050
  restore tmp2051
  restore tmp2052
; -----------------------------------------------
; function __SymbolTable_assignValue$3
; -----------------------------------------------
__SymbolTable_assignValue$3:
  ; init frame
  ; ----------
  tmp2053 EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2053 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2053 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2053 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2053 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2053 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore symbolInfo
  restore tmp2053
; -----------------------------------------------
; function __SymbolTable_assignNode$3
; -----------------------------------------------
__SymbolTable_assignNode$3:
  ; init frame
  ; ----------
  tmp2054 EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  node EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2054 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2054 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2054 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2054 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal213 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2054 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore node
  restore symbolInfo
  restore tmp2054
; -----------------------------------------------
; function __SymbolTable_assignType$3
; -----------------------------------------------
__SymbolTable_assignType$3:
  ; init frame
  ; ----------
  goOn EQU rbp - 12 ; 4 bytes
  tmp2084 EQU rbp - 28 ; 16 bytes
  tmp2083 EQU rbp - 44 ; 16 bytes
  tmp2082 EQU rbp - 60 ; 16 bytes
  tmp2081 EQU rbp - 76 ; 16 bytes
  tmp2078 EQU rbp - 92 ; 16 bytes
  tmp2077 EQU rbp - 108 ; 16 bytes
  tmp2076 EQU rbp - 124 ; 16 bytes
  tmp2075 EQU rbp - 140 ; 16 bytes
  tmp2074 EQU rbp - 144 ; 4 bytes
  tmp2069 EQU rbp - 148 ; 4 bytes
  tmp2067 EQU rbp - 152 ; 4 bytes
  tmp2064 EQU rbp - 156 ; 4 bytes
  tmp2063 EQU rbp - 160 ; 4 bytes
  tmp2060 EQU rbp - 176 ; 16 bytes
  tmp2059 EQU rbp - 180 ; 4 bytes
  tmp2056 EQU rbp - 184 ; 4 bytes
  tmp2055 EQU rbp - 200 ; 16 bytes
  oldType EQU rbp - 216 ; 16 bytes
  symbolInfo EQU rbp - 232 ; 16 bytes
  newType EQU rbp - 248 ; 16 bytes
  name EQU rbp - 264 ; 16 bytes
  this EQU rbp - 280 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ newType ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [oldType + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2055 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2060 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2075 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2076 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2077 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2078 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2081 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2082 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2083 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2084 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2055 ]
  call __MOLD_VariantMove
  lea  rcx, [ oldType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ oldType ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newType ]
  lea  rdx , [ oldType ]
  lea  r8 , [ tmp2055 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2055 + Variant_t.value]
  mov dword [ tmp2056 ], eax
  cmp dword [ tmp2056 ], 0
  jz l2057
  mov dword [ goOn ], 0
  lea  rcx, [ tmp2060 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oldType ]
  lea  rdi , [ tmp2060 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2060 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2055 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2055 + Variant_t.value]
  mov dword [ tmp2059 ], eax
  cmp dword [ tmp2059 ], 0
  jz l2061
  mov dword [ goOn ], 1
  jmp l2062
l2061:
  mov dword [ tmp2064 ], -1
  mov [ tmp2060 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2064 ]
  mov [ tmp2060 + Variant_t.value], rax
  lea  rcx , [ oldType ]
  lea  rdx , [ tmp2060 ]
  lea  r8 , [ tmp2055 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2055 + Variant_t.value]
  mov dword [ tmp2063 ], eax
  cmp dword [ tmp2063 ], 0
  jz l2065
  mov dword [ tmp2067 ], 0
  mov dword [ tmp2064 ], 1
  mov [ tmp2060 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2064 ]
  mov [ tmp2060 + Variant_t.value], rax
  lea  rcx , [ oldType ]
  lea  rdx , [ tmp2060 ]
  lea  r8 , [ tmp2055 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2055 + Variant_t.value]
  mov dword [ tmp2069 ], eax
  cmp dword [ tmp2069 ], 0
  jz l2068
  mov dword [ tmp2064 ], 3
  mov [ tmp2060 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2064 ]
  mov [ tmp2060 + Variant_t.value], rax
  lea  rcx , [ newType ]
  lea  rdx , [ tmp2060 ]
  lea  r8 , [ tmp2055 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2055 + Variant_t.value]
  mov dword [ tmp2067 ], eax
l2068:
  cmp dword [ tmp2067 ], 0
  jz l2070
  mov dword [ goOn ], 1
  jmp l2071
l2070:
  mov dword [ tmp2064 ], -1
  mov [ tmp2060 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2064 ]
  mov [ tmp2060 + Variant_t.value], rax
  lea  rcx , [ newType ]
  lea  rdx , [ tmp2060 ]
  lea  r8 , [ tmp2055 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2055 + Variant_t.value]
  mov dword [ tmp2069 ], eax
  cmp dword [ tmp2069 ], 0
  jz l2072
  mov dword [ goOn ], 1
  jmp l2073
l2072:
  lea  rcx, [ tmp2060 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newType ]
  lea  rdi , [ tmp2060 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp2078 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oldType ]
  lea  rdi , [ tmp2078 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp2077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal215 ]
  lea  rdx , [ tmp2078 ]
  lea  r8 , [ tmp2077 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2060 ]
  lea  rdx , [ tmp2077 ]
  lea  r8 , [ tmp2076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal214 ]
  lea  rdx , [ tmp2076 ]
  lea  r8 , [ tmp2075 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2075 ]
  lea  rdi , [ tmp2055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__error$2
  pop rdi
l2073:
l2071:
l2065:
l2066:
l2062:
  mov dword [ tmp2063 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp2063 ], eax
  setz al
  xor  al, cl
  jnz l2079
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ newType ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2060 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newType ]
  lea  rdi , [ tmp2060 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp2078 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ name ]
  lea  rdi , [ tmp2078 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2081 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2078 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2081 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal217 ]
  lea  rdx , [ tmp2081 ]
  lea  r8 , [ tmp2077 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2060 ]
  lea  rdx , [ tmp2077 ]
  lea  r8 , [ tmp2076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal216 ]
  lea  rdx , [ tmp2076 ]
  lea  r8 , [ tmp2075 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2075 ]
  lea  rdi , [ tmp2055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
  jmp l2080
l2079:
  lea  rcx, [ tmp2060 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oldType ]
  lea  rdi , [ tmp2060 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp2078 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newType ]
  lea  rdi , [ tmp2078 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp2084 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ name ]
  lea  rdi , [ tmp2084 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2083 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2084 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2083 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2082 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal220 ]
  lea  rdx , [ tmp2083 ]
  lea  r8 , [ tmp2082 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2081 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2078 ]
  lea  rdx , [ tmp2082 ]
  lea  r8 , [ tmp2081 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal219 ]
  lea  rdx , [ tmp2081 ]
  lea  r8 , [ tmp2077 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2060 ]
  lea  rdx , [ tmp2077 ]
  lea  r8 , [ tmp2076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal218 ]
  lea  rdx , [ tmp2076 ]
  lea  r8 , [ tmp2075 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2075 ]
  lea  rdi , [ tmp2055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
l2080:
l2057:
l2058:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2055 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2060 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2078 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2084 ]
  call __MOLD_VariantDestroy

  add  rsp, 320
  pop  rbp
  ret

  restore this
  restore name
  restore newType
  restore symbolInfo
  restore oldType
  restore tmp2055
  restore tmp2056
  restore tmp2059
  restore tmp2060
  restore tmp2063
  restore tmp2064
  restore tmp2067
  restore tmp2069
  restore tmp2074
  restore tmp2075
  restore tmp2076
  restore tmp2077
  restore tmp2078
  restore tmp2081
  restore tmp2082
  restore tmp2083
  restore tmp2084
  restore goOn
; -----------------------------------------------
; function __SymbolTable_assignMirType$3
; -----------------------------------------------
__SymbolTable_assignMirType$3:
  ; init frame
  ; ----------
  tmp2085 EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  type EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ type ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2085 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2085 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2085 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2085 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ type ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2085 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore type
  restore symbolInfo
  restore tmp2085
; -----------------------------------------------
; function __SymbolTable_removeUnusedSymbols$1
; -----------------------------------------------
__SymbolTable_removeUnusedSymbols$1:
  ; init frame
  ; ----------
  symbolInfo EQU rbp - 24 ; 16 bytes
  symbolId EQU rbp - 40 ; 16 bytes
  tmp2103 EQU rbp - 56 ; 16 bytes
  tmp2102 EQU rbp - 72 ; 16 bytes
  tmp2099 EQU rbp - 76 ; 4 bytes
  tmp2098 EQU rbp - 92 ; 16 bytes
  tmp2097 EQU rbp - 96 ; 4 bytes
  tmp2096 EQU rbp - 112 ; 16 bytes
  tmp2095 EQU rbp - 128 ; 16 bytes
  tmp2093 EQU rbp - 132 ; 4 bytes
  tmp2091 EQU rbp - 136 ; 4 bytes
  tmp2089 EQU rbp - 140 ; 4 bytes
  tmp2086 EQU rbp - 156 ; 16 bytes
  newSymbols EQU rbp - 172 ; 16 bytes
  this EQU rbp - 188 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [newSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2086 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2095 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2096 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2098 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2102 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2103 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newSymbols ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2086 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp2086 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys symbolId values symbolInfo
; 
  jmp l2088
l2087:
  mov dword [ tmp2089 ], 1
  mov dword [ tmp2091 ], 1
  mov dword [ tmp2093 ], 1
  lea  rcx, [ tmp2096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp2096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2097 ], 0
  mov [ tmp2098 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2097 ]
  mov [ tmp2098 + Variant_t.value], rax
  lea  rcx , [ tmp2098 ]
  lea  rdx , [ tmp2096 ]
  lea  r8 , [ tmp2095 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2095 + Variant_t.value]
  mov dword [ tmp2099 ], eax
  cmp dword [ tmp2099 ], 0
  jnz l2094
  lea  rcx, [ tmp2098 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2098 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2097 ], 0
  mov [ tmp2096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2097 ]
  mov [ tmp2096 + Variant_t.value], rax
  lea  rcx , [ tmp2096 ]
  lea  rdx , [ tmp2098 ]
  lea  r8 , [ tmp2095 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2095 + Variant_t.value]
  mov dword [ tmp2093 ], eax
l2094:
  cmp dword [ tmp2093 ], 0
  jnz l2092
  lea  rcx, [ tmp2096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2097 ], 3
  mov [ tmp2098 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2097 ]
  mov [ tmp2098 + Variant_t.value], rax
  lea  rcx , [ tmp2096 ]
  lea  rdx , [ tmp2098 ]
  lea  r8 , [ tmp2095 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2095 + Variant_t.value]
  mov dword [ tmp2091 ], eax
l2092:
  cmp dword [ tmp2091 ], 0
  jnz l2090
  lea  rcx, [ tmp2098 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2098 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2097 ], 4
  mov [ tmp2096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2097 ]
  mov [ tmp2096 + Variant_t.value], rax
  lea  rcx , [ tmp2098 ]
  lea  rdx , [ tmp2096 ]
  lea  r8 , [ tmp2095 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2095 + Variant_t.value]
  mov dword [ tmp2089 ], eax
l2090:
  cmp dword [ tmp2089 ], 0
  jz l2100
  lea  rcx, [ tmp2095 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2095 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newSymbols ]
  lea  rdx , [ tmp2095 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
  jmp l2101
l2100:
  lea  rcx, [ tmp2096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2096 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2103 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2096 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp2103 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2102 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal222 ]
  lea  rdx , [ tmp2103 ]
  lea  r8 , [ tmp2102 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2095 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2102 ]
  lea  rdi , [ tmp2095 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
l2101:
  ret
l2088:
  lea  rcx , [ tmp2086 ]
  lea  rdx , [ symbolId ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l2087 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys symbolId values symbolInfo
; -----------------------------
; 
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ newSymbols ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2086 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2095 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2096 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2098 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolId
  ; Skipped loop iterator symbolInfo

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore newSymbols
  restore tmp2086
  restore tmp2089
  restore tmp2091
  restore tmp2093
  restore tmp2095
  restore tmp2096
  restore tmp2097
  restore tmp2098
  restore tmp2099
  restore tmp2102
  restore tmp2103
  restore symbolId
  restore symbolInfo
; -----------------------------------------------
; function __SymbolTable_createLabel$1
; -----------------------------------------------
__SymbolTable_createLabel$1:
  ; init frame
  ; ----------
  tmp2107 EQU rbp - 24 ; 16 bytes
  tmp2106 EQU rbp - 40 ; 16 bytes
  tmp2105 EQU rbp - 56 ; 16 bytes
  tmp2104 EQU rbp - 72 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp2104 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2105 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2106 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2107 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2106 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2106 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  lea  rcx, [ tmp2105 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2106 ]
  lea  rdi , [ tmp2105 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ __literal223 ]
  lea  rdx , [ tmp2105 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2106 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2106 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2107 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2107 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2106 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2107 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2107 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_LABEL ]
  mov [ tmp2107 + Variant_t.value], rax
  lea  rcx , [ tmp2106 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2107 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2105 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp2106 ]
  lea  rdi , [ tmp2105 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insert$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2105 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2106 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2107 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp2104
  restore tmp2105
  restore tmp2106
  restore tmp2107
; -----------------------------------------------
; function __SymbolTable_insertJmpTable$2
; -----------------------------------------------
__SymbolTable_insertJmpTable$2:
  ; init frame
  ; ----------
  tmp2110 EQU rbp - 24 ; 16 bytes
  tmp2109 EQU rbp - 40 ; 16 bytes
  tmp2108 EQU rbp - 56 ; 16 bytes
  newEntry EQU rdi
  name EQU rbp - 72 ; 16 bytes
  jmpTable EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ jmpTable ], xmm0
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2108 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2109 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2110 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2110 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  lea  rcx, [ tmp2109 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2110 ]
  lea  rdi , [ tmp2109 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal224 ]
  lea  rdx , [ tmp2109 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2109 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2109 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2110 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2109 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2110 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2110 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_JMP_TABLE ]
  mov [ tmp2110 + Variant_t.value], rax
  lea  rcx , [ tmp2109 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2110 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2110 ]
  lea rdx, [ jmpTable ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2109 ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp2110 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2109 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2109 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi , [ tmp2109 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertGlobal$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2109 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore jmpTable
  restore name
  restore newEntry
  restore tmp2108
  restore tmp2109
  restore tmp2110
; -----------------------------------------------
; function __SymbolTable_getTempVar$2
; -----------------------------------------------
__SymbolTable_getTempVar$2:
  ; init frame
  ; ----------
  symbolInfo EQU rbp - 24 ; 16 bytes
  tmp2123 EQU rbp - 28 ; 4 bytes
  poolCnt EQU rbp - 44 ; 16 bytes
  poolObj EQU rbp - 60 ; 16 bytes
  tmp2122 EQU rbp - 76 ; 16 bytes
  tmp2121 EQU rbp - 92 ; 16 bytes
  tmp2120 EQU rbp - 108 ; 16 bytes
  tmp2119 EQU rbp - 124 ; 16 bytes
  tmp2116 EQU rbp - 128 ; 4 bytes
  tmp2115 EQU rbp - 132 ; 4 bytes
  tmp2114 EQU rbp - 148 ; 16 bytes
  tmp2113 EQU rbp - 164 ; 16 bytes
  tmp2112 EQU rbp - 180 ; 16 bytes
  tmp2111 EQU rbp - 196 ; 16 bytes
  rv EQU rdi
  wantedType EQU rbp - 212 ; 16 bytes
  this EQU rbp - 228 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [tmp2111 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2112 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2113 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2114 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2119 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2120 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2121 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2122 + Variant_t.type], VARIANT_UNDEFINED
  mov [poolObj + Variant_t.type], VARIANT_UNDEFINED
  mov [poolCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2114 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal179 ]
  lea  r8 , [ tmp2114 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2113 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2114 ]
  lea  rdx , [ wantedType ]
  lea  r8 , [ tmp2113 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2113 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp2112 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2115 ], 0
  mov [ tmp2113 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2115 ]
  mov [ tmp2113 + Variant_t.value], rax
  lea  rcx , [ tmp2113 ]
  lea  rdx , [ tmp2112 ]
  lea  r8 , [ tmp2111 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2111 + Variant_t.value]
  mov dword [ tmp2116 ], eax
  cmp dword [ tmp2116 ], 0
  jz l2117
  lea  rcx, [ tmp2113 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal179 ]
  lea  r8 , [ tmp2113 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2113 ]
  lea  rdx , [ wantedType ]
  lea  r8 , [ poolObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2113 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp2113 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2115 ], 1
  mov [ tmp2112 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2115 ]
  mov [ tmp2112 + Variant_t.value], rax
  lea  rcx , [ tmp2113 ]
  lea  rdx , [ tmp2112 ]
  lea  r8 , [ poolCnt ]
  call  __MOLD_VariantSub
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ poolCnt ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2112 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ poolCnt + Variant_t.value]
  mov dword [ tmp2115 ], eax
  lea  rcx , [ tmp2112 ]
  lea  rdx , [ tmp2115 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2122 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ wantedType ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2122 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2121 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal227 ]
  lea  rdx , [ tmp2122 ]
  lea  r8 , [ tmp2121 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2120 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ tmp2121 ]
  lea  r8 , [ tmp2120 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2119 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal226 ]
  lea  rdx , [ tmp2120 ]
  lea  r8 , [ tmp2119 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2111 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2119 ]
  lea  rdi , [ tmp2111 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
  jmp l2118
l2117:
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2112 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  lea  rcx, [ tmp2111 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2112 ]
  lea  rdi , [ tmp2111 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ __literal228 ]
  lea  rdx , [ tmp2111 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2111 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2111 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertLocal$2
  pop rdi
  lea  rcx, [ tmp2111 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2111 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$2
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2111 ]
  call __MOLD_VariantMove
  mov dword [ tmp2123 ], 1
  mov eax, dword [ tmp2123 ]
  mov [ tmp2111 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2111 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp2111 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ wantedType ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2122 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ wantedType ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2122 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2121 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal231 ]
  lea  rdx , [ tmp2122 ]
  lea  r8 , [ tmp2121 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2120 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ tmp2121 ]
  lea  r8 , [ tmp2120 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2119 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal230 ]
  lea  rdx , [ tmp2120 ]
  lea  r8 , [ tmp2119 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2111 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2119 ]
  lea  rdi , [ tmp2111 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
l2118:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2111 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2113 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2114 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ poolCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore tmp2111
  restore tmp2112
  restore tmp2113
  restore tmp2114
  restore tmp2115
  restore tmp2116
  restore tmp2119
  restore tmp2120
  restore tmp2121
  restore tmp2122
  restore poolObj
  restore poolCnt
  restore tmp2123
  restore symbolInfo
; -----------------------------------------------
; function __SymbolTable_getTempVarForWrite$2
; -----------------------------------------------
__SymbolTable_getTempVarForWrite$2:
  ; init frame
  ; ----------
  tmp2124 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  wantedType EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [tmp2124 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2124 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ wantedType ]
  lea  rdi , [ tmp2124 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_getTempVar$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp2124 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2124 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2124 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForWrite$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2124 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore tmp2124
; -----------------------------------------------
; function __SymbolTable_getTempVarForReadAndWrite$2
; -----------------------------------------------
__SymbolTable_getTempVarForReadAndWrite$2:
  ; init frame
  ; ----------
  tmp2125 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  wantedType EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [tmp2125 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2125 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ wantedType ]
  lea  rdi , [ tmp2125 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_getTempVar$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp2125 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2125 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2125 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForRead$2
  pop rdi
  lea  rcx, [ tmp2125 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2125 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForWrite$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2125 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore tmp2125
; -----------------------------------------------
; function __SymbolTable_releaseTempVar$2
; -----------------------------------------------
__SymbolTable_releaseTempVar$2:
  ; init frame
  ; ----------
  poolObj EQU rbp - 24 ; 16 bytes
  mirType EQU rbp - 40 ; 16 bytes
  tmp2140 EQU rbp - 56 ; 16 bytes
  tmp2139 EQU rbp - 72 ; 16 bytes
  tmp2138 EQU rbp - 88 ; 16 bytes
  tmp2137 EQU rbp - 104 ; 16 bytes
  tmp2136 EQU rbp - 108 ; 4 bytes
  tmp2131 EQU rbp - 124 ; 16 bytes
  tmp2130 EQU rbp - 128 ; 4 bytes
  tmp2129 EQU rbp - 144 ; 16 bytes
  tmp2127 EQU rbp - 148 ; 4 bytes
  tmp2126 EQU rbp - 164 ; 16 bytes
  symbolInfo EQU rbp - 180 ; 16 bytes
  name EQU rbp - 196 ; 16 bytes
  this EQU rbp - 212 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2126 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2129 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2131 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2137 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2138 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2139 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2140 + Variant_t.type], VARIANT_UNDEFINED
  mov [mirType + Variant_t.type], VARIANT_UNDEFINED
  mov [poolObj + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2126 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2126 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__lookupInternal$2
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2126 ]
  call __MOLD_VariantMove
  mov dword [ tmp2127 ], 0
  lea  rcx, [ tmp2129 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2129 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2129 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2126 + Variant_t.value]
  mov dword [ tmp2130 ], eax
  cmp dword [ tmp2130 ], 0
  jz l2128
  lea  rcx, [ tmp2129 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp2129 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2130 ], 1
  mov eax, dword [ tmp2130 ]
  mov [ tmp2131 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2131 + Variant_t.value], rax
  lea  rcx , [ tmp2129 ]
  lea  rdx , [ tmp2131 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2126 + Variant_t.value]
  mov dword [ tmp2127 ], eax
l2128:
  cmp dword [ tmp2127 ], 0
  jz l2132
  lea  rcx, [ mirType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ mirType ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2131 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ mirType ]
  lea  rdi , [ tmp2131 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2131 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2126 + Variant_t.value]
  mov dword [ tmp2130 ], eax
  cmp dword [ tmp2130 ], 0
  jz l2134
  lea  rcx, [ tmp2131 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal179 ]
  lea  r8 , [ tmp2131 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2131 ]
  lea  rdx , [ mirType ]
  lea  r8 , [ poolObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2126 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2131 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp2131 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp2131 + Variant_t.value]
  mov dword [ tmp2136 ], eax
  lea  rcx, [ tmp2131 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2131 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2126 ]
  lea  rdx , [ tmp2136 ]
  lea  r8 , [ tmp2131 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp2126 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp2126 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2136 ], 1
  mov [ tmp2129 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2136 ]
  mov [ tmp2129 + Variant_t.value], rax
  lea  rcx , [ tmp2126 ]
  lea  rdx , [ tmp2129 ]
  lea  r8 , [ tmp2131 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp2131 ]
  call  __MOLD_VariantStoreAtKey
l2134:
l2135:
  lea  rcx, [ tmp2129 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2129 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2126 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ mirType ]
  lea  rdi , [ tmp2126 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2140 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2126 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2140 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2139 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal233 ]
  lea  rdx , [ tmp2140 ]
  lea  r8 , [ tmp2139 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2129 ]
  lea  rdx , [ tmp2139 ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2137 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal232 ]
  lea  rdx , [ tmp2138 ]
  lea  r8 , [ tmp2137 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2131 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2137 ]
  lea  rdi , [ tmp2131 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__debug$2
  pop rdi
l2132:
l2133:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2126 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2129 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2131 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore tmp2126
  restore tmp2127
  restore tmp2129
  restore tmp2130
  restore tmp2131
  restore tmp2136
  restore tmp2137
  restore tmp2138
  restore tmp2139
  restore tmp2140
  restore mirType
  restore poolObj
; -----------------------------------------------
; function __ASTModuleResolver_constructor$2
; -----------------------------------------------
__ASTModuleResolver_constructor$2:
  ; init frame
  ; ----------
  tmp2142 EQU rbp - 24 ; 16 bytes
  tmp2141 EQU rbp - 40 ; 16 bytes
  app EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp2141 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2142 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2141 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ tmp2141 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2141 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2141 ]
  lea  rdx, [vtable_Parser]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp2142 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2141 ]
  lea  rdi , [ tmp2142 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser_constructor$1
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal235 ]
  lea  r8 , [ tmp2141 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2141 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2142 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore app
  restore tmp2141
  restore tmp2142
; -----------------------------------------------
; function __ASTModuleResolver_resolveImports$2
; -----------------------------------------------
__ASTModuleResolver_resolveImports$2:
  ; init frame
  ; ----------
  oneImportedChild EQU rbp - 24 ; 16 bytes
  importedChildren EQU rbp - 40 ; 16 bytes
  importedProgram EQU rbp - 56 ; 16 bytes
  importedAst EQU rbp - 72 ; 16 bytes
  moduleName EQU rbp - 88 ; 16 bytes
  oneChild EQU rbp - 104 ; 16 bytes
  tmp2162 EQU rbp - 108 ; 4 bytes
  tmp2159 EQU rbp - 124 ; 16 bytes
  tmp2158 EQU rbp - 140 ; 16 bytes
  tmp2157 EQU rbp - 144 ; 4 bytes
  tmp2154 EQU rbp - 160 ; 16 bytes
  tmp2151 EQU rbp - 164 ; 4 bytes
  tmp2150 EQU rbp - 180 ; 16 bytes
  tmp2148 EQU rbp - 184 ; 4 bytes
  tmp2145 EQU rbp - 188 ; 4 bytes
  tmp2144 EQU rbp - 204 ; 16 bytes
  tmp2143 EQU rbp - 220 ; 16 bytes
  newChildren EQU rbp - 236 ; 16 bytes
  newChildrenCnt EQU rbp - 240 ; 4 bytes
  children EQU rbp - 256 ; 16 bytes
  program EQU rbp - 272 ; 16 bytes
  ast EQU rbp - 288 ; 16 bytes
  this EQU rbp - 304 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 336

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [program + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2143 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2144 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2150 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2154 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2158 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2159 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [moduleName + Variant_t.type], VARIANT_UNDEFINED
  mov [importedAst + Variant_t.type], VARIANT_UNDEFINED
  mov [importedProgram + Variant_t.type], VARIANT_UNDEFINED
  mov [importedChildren + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp2144 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2144 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2145 ], 0
  lea  rcx, [ program ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2144 ]
  lea  rdx , [ tmp2145 ]
  lea  r8 , [ program ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ program ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ newChildrenCnt ], 0
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2147
l2146:
  mov dword [ tmp2148 ], 0
  lea  rcx, [ tmp2144 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2144 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2145 ], 152
  mov [ tmp2150 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2145 ]
  mov [ tmp2150 + Variant_t.value], rax
  lea  rcx , [ tmp2144 ]
  lea  rdx , [ tmp2150 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2143 + Variant_t.value]
  mov dword [ tmp2151 ], eax
  cmp dword [ tmp2151 ], 0
  jz l2149
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2150 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2150 ]
  lea  rdx , [ __literal47 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2143 + Variant_t.value]
  mov dword [ tmp2148 ], eax
l2149:
  cmp dword [ tmp2148 ], 0
  jz l2152
  lea  rcx, [ tmp2144 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2144 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2145 ], 0
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2144 ]
  lea  rdx , [ tmp2145 ]
  lea  r8 , [ tmp2150 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ moduleName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2150 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ moduleName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2154 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ tmp2154 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2144 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2154 ]
  lea  rdx , [ moduleName ]
  lea  r8 , [ tmp2144 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2144 ]
  lea  rdi , [ tmp2150 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2150 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2143 + Variant_t.value]
  mov dword [ tmp2151 ], eax
  cmp dword [ tmp2151 ], 0
  jz l2155
  lea  rcx, [ tmp2143 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2157 ], 1
  mov eax, dword [ tmp2157 ]
  mov [ tmp2150 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2150 + Variant_t.value], rax
  lea  rcx , [ tmp2143 ]
  lea  rdx , [ moduleName ]
  lea  r8 , [ tmp2150 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2143 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2144 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ moduleName ]
  lea  rdi , [ tmp2144 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2159 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2144 ]
  lea  rdx , [ __literal237 ]
  lea  r8 , [ tmp2159 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2158 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal236 ]
  lea  rdx , [ tmp2159 ]
  lea  r8 , [ tmp2158 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2143 ]
  lea  rdx , [ tmp2158 ]
  lea  rdi, [ tmp2150 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*58]
  pop rdi
  lea  rcx, [ tmp2143 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal235 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2143 ]
  lea  rdx , [ moduleName ]
  lea  rdi, [ tmp2150 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*7]
  pop rdi
  lea  rcx, [ importedAst ]
  call __MOLD_VariantDestroy
  lea rcx, [ importedAst ]
  lea rdx, [ tmp2150 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ importedAst ]
  lea  rdi, [ tmp2150 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*4]
  pop rdi
  lea  rcx, [ importedAst ]
  call __MOLD_VariantDestroy
  lea rcx, [ importedAst ]
  lea rdx, [ tmp2150 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ importedAst ]
  lea  rdi , [ tmp2150 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTModuleResolver_resolveImports$2
  pop rdi
  lea  rcx, [ tmp2143 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ importedAst ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2145 ], 0
  lea  rcx, [ importedProgram ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2143 ]
  lea  rdx , [ tmp2145 ]
  lea  r8 , [ importedProgram ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ importedChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ importedProgram ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ importedChildren ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values oneImportedChild
; 
  jmp l2161
l2160:
  lea  rcx , [ newChildren ]
  lea  rdx , [ newChildrenCnt ]
  lea  r8 , [ oneImportedChild ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp2162 ], 1
  mov eax, dword [ newChildrenCnt ]
  add eax, dword [ tmp2162 ]
  mov dword [ newChildrenCnt ], eax
  ret
l2161:
  lea  rcx , [ importedChildren ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneImportedChild ]
  lea  r9 , [ l2160 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneImportedChild
; -----------------------------
; 
l2155:
l2156:
  jmp l2153
l2152:
  lea  rcx , [ newChildren ]
  lea  rdx , [ newChildrenCnt ]
  lea  r8 , [ oneChild ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp2162 ], 1
  mov eax, dword [ newChildrenCnt ]
  add eax, dword [ tmp2162 ]
  mov dword [ newChildrenCnt ], eax
l2153:
  ret
l2147:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2146 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea  rcx , [ program ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ program ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2143 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2144 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2150 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2154 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ moduleName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedProgram ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedChildren ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneImportedChild

  add  rsp, 336
  pop  rbp
  ret

  restore this
  restore ast
  restore program
  restore children
  restore newChildrenCnt
  restore newChildren
  restore tmp2143
  restore tmp2144
  restore tmp2145
  restore tmp2148
  restore tmp2150
  restore tmp2151
  restore tmp2154
  restore tmp2157
  restore tmp2158
  restore tmp2159
  restore tmp2162
  restore oneChild
  restore moduleName
  restore importedAst
  restore importedProgram
  restore importedChildren
  restore oneImportedChild
; -----------------------------------------------
; function __ASTSymbolsCollector_constructor$2
; -----------------------------------------------
__ASTSymbolsCollector_constructor$2:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTSymbolsCollector__debug$2
; -----------------------------------------------
__ASTSymbolsCollector__debug$2:
  ; init frame
  ; ----------
  tmp2167 EQU rbp - 24 ; 16 bytes
  tmp2164 EQU rbp - 28 ; 4 bytes
  tmp2163 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp2167 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2164 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2164 ], eax
  setz al
  xor  al, cl
  jnz l2165
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal238 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2165:
l2166:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2167 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2163
  restore tmp2164
  restore tmp2167
; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbolsFromLeftNode$3:
  ; init frame
  ; ----------
  tmp2170 EQU rbp - 24 ; 16 bytes
  tmp2169 EQU rbp - 28 ; 4 bytes
  tmp2168 EQU rbp - 44 ; 16 bytes
  node EQU rbp - 60 ; 16 bytes
  symbolTable EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [tmp2168 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2170 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2169 ], 1
  mov eax, dword [ tmp2169 ]
  mov [ tmp2170 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2170 + Variant_t.value], rax
  lea  rcx, [ tmp2168 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  lea  r9 , [ tmp2170 ]
  lea  rdi , [ tmp2168 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbols$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2168 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2170 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore tmp2168
  restore tmp2169
  restore tmp2170
; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbolsFromRightNode$3
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbolsFromRightNode$3:
  ; init frame
  ; ----------
  tmp2173 EQU rbp - 24 ; 16 bytes
  tmp2172 EQU rbp - 28 ; 4 bytes
  tmp2171 EQU rbp - 44 ; 16 bytes
  node EQU rbp - 60 ; 16 bytes
  symbolTable EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [tmp2171 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2173 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2172 ], 0
  mov eax, dword [ tmp2172 ]
  mov [ tmp2173 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2173 + Variant_t.value], rax
  lea  rcx, [ tmp2171 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  lea  r9 , [ tmp2173 ]
  lea  rdi , [ tmp2171 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbols$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2171 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2173 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore tmp2171
  restore tmp2172
  restore tmp2173
; -----------------------------------------------
; function __ASTSymbolsCollector__updateVariableSymbolInfo$4
; -----------------------------------------------
__ASTSymbolsCollector__updateVariableSymbolInfo$4:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp2181 EQU rbp - 28 ; 4 bytes
  tmp2178 EQU rbp - 32 ; 4 bytes
  tmp2177 EQU rbp - 48 ; 16 bytes
  tmp2176 EQU rbp - 52 ; 4 bytes
  tmp2175 EQU rbp - 68 ; 16 bytes
  tmp2174 EQU rbp - 84 ; 16 bytes
  newSymbolInfo EQU rbp - 100 ; 16 bytes
  variableName EQU rbp - 116 ; 16 bytes
  node EQU rbp - 132 ; 16 bytes
  this EQU rbp - 148 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ variableName ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ newSymbolInfo ], xmm0
  mov [tmp2174 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2175 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2177 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2176 ], 201
  mov [ tmp2177 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2176 ]
  mov [ tmp2177 + Variant_t.value], rax
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2174 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2174 + Variant_t.value]
  mov dword [ tmp2178 ], eax
  cmp dword [ tmp2178 ], 0
  jz l2179
  lea  rcx, [ tmp2177 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2177 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2177 ]
  lea  rdx , [ variableName ]
  lea  r8 , [ tmp2174 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2174 + Variant_t.value]
  mov dword [ tmp2181 ], eax
  cmp dword [ tmp2181 ], 0
  jz l2182
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ newSymbolInfo ]
  call  __MOLD_VariantStoreAtKey
l2182:
l2183:
  jmp l2180
l2179:
  lea  rcx, [ tmp2174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2174 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2185
l2184:
  lea  rcx, [ tmp2177 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  r8 , [ variableName ]
  lea  r9 , [ newSymbolInfo ]
  lea  rdi , [ tmp2177 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$4
  pop rdi
  ret
l2185:
  lea  rcx , [ tmp2174 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2184 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
l2180:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2174 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2177 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore node
  restore variableName
  restore newSymbolInfo
  restore tmp2174
  restore tmp2175
  restore tmp2176
  restore tmp2177
  restore tmp2178
  restore tmp2181
  restore item
; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbols$4
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbols$4:
  ; init frame
  ; ----------
  goOnIntoChildren EQU rbp - 12 ; 4 bytes
  tmp2329 EQU rbp - 16 ; 4 bytes
  tmp2327 EQU rbp - 20 ; 4 bytes
  condNode EQU rbp - 36 ; 16 bytes
  __cse11 EQU rbp - 52 ; 16 bytes
  __cse10 EQU rbp - 68 ; 16 bytes
  idx EQU rbp - 72 ; 4 bytes
  boxNode EQU rbp - 88 ; 16 bytes
  iteratorsCnt EQU rbp - 104 ; 16 bytes
  tmp2316 EQU rbp - 108 ; 4 bytes
  tmp2315 EQU rbp - 112 ; 4 bytes
  __cse9 EQU rbp - 128 ; 16 bytes
  __cse8 EQU rbp - 144 ; 16 bytes
  bodyNode EQU rbp - 160 ; 16 bytes
  idxStepNode EQU rbp - 176 ; 16 bytes
  idxEndNode EQU rbp - 192 ; 16 bytes
  idxStartNode EQU rbp - 208 ; 16 bytes
  iterNode EQU rbp - 224 ; 16 bytes
  classProto2 EQU rbp - 240 ; 16 bytes
  classProto1 EQU rbp - 256 ; 16 bytes
  astType EQU rbp - 260 ; 4 bytes
  __cse7 EQU rbp - 276 ; 16 bytes
  astType2 EQU rbp - 292 ; 16 bytes
  astType1 EQU rbp - 308 ; 16 bytes
  writeHits EQU rbp - 324 ; 16 bytes
  readHits EQU rbp - 340 ; 16 bytes
  symbolInfo2 EQU rbp - 356 ; 16 bytes
  symbolInfo1 EQU rbp - 372 ; 16 bytes
  __cse6 EQU rbp - 388 ; 16 bytes
  symbols2 EQU rbp - 404 ; 16 bytes
  symbols1 EQU rbp - 420 ; 16 bytes
  symbolTable2 EQU rbp - 436 ; 16 bytes
  symbolTable1 EQU rbp - 452 ; 16 bytes
  tmp2298 EQU rbp - 456 ; 4 bytes
  tmp2294 EQU rbp - 460 ; 4 bytes
  x EQU rbp - 476 ; 16 bytes
  newClassProto EQU rbp - 492 ; 16 bytes
  oldClassProto EQU rbp - 508 ; 16 bytes
  rval EQU rbp - 524 ; 16 bytes
  lval EQU rbp - 540 ; 16 bytes
  tmp2278 EQU rbp - 544 ; 4 bytes
  tmp2276 EQU rbp - 548 ; 4 bytes
  tmp2267 EQU rbp - 552 ; 4 bytes
  tmp2265 EQU rbp - 556 ; 4 bytes
  tmp2262 EQU rbp - 560 ; 4 bytes
  tmp2255 EQU rbp - 564 ; 4 bytes
  __cse5 EQU rbp - 580 ; 16 bytes
  tmp2245 EQU rbp - 584 ; 4 bytes
  __cse4 EQU rbp - 600 ; 16 bytes
  paramName EQU rbp - 616 ; 16 bytes
  paramIdx EQU rbp - 632 ; 16 bytes
  __cse3 EQU rbp - 648 ; 16 bytes
  paramShift EQU rbp - 652 ; 4 bytes
  funcName EQU rbp - 668 ; 16 bytes
  params EQU rbp - 684 ; 16 bytes
  value EQU rbp - 700 ; 16 bytes
  funcProto EQU rbp - 716 ; 16 bytes
  nodeBody EQU rbp - 732 ; 16 bytes
  tmp2236 EQU rbp - 748 ; 16 bytes
  baseMethodProto EQU rbp - 764 ; 16 bytes
  methodParamsCnt EQU rbp - 780 ; 16 bytes
  methodName EQU rbp - 796 ; 16 bytes
  child EQU rbp - 812 ; 16 bytes
  methodProto EQU rbp - 828 ; 16 bytes
  oneMethodName EQU rbp - 844 ; 16 bytes
  baseProto EQU rbp - 860 ; 16 bytes
  classProto EQU rbp - 876 ; 16 bytes
  baseMethods EQU rbp - 892 ; 16 bytes
  vtable EQU rbp - 908 ; 16 bytes
  baseName EQU rbp - 924 ; 16 bytes
  className EQU rbp - 940 ; 16 bytes
  tmp2224 EQU rbp - 944 ; 4 bytes
  tmp2221 EQU rbp - 948 ; 4 bytes
  tmp2220 EQU rbp - 964 ; 16 bytes
  tmp2219 EQU rbp - 980 ; 16 bytes
  tmp2218 EQU rbp - 996 ; 16 bytes
  tmp2217 EQU rbp - 1012 ; 16 bytes
  tmp2216 EQU rbp - 1028 ; 16 bytes
  tmp2215 EQU rbp - 1044 ; 16 bytes
  symbolInfo EQU rbp - 1060 ; 16 bytes
  tmp2205 EQU rbp - 1064 ; 4 bytes
  tmp2193 EQU rbp - 1068 ; 4 bytes
  tmp2192 EQU rbp - 1072 ; 4 bytes
  tmp2190 EQU rbp - 1076 ; 4 bytes
  item EQU rbp - 1092 ; 16 bytes
  tmp2187 EQU rbp - 1108 ; 16 bytes
  tmp2186 EQU rbp - 1124 ; 16 bytes
  childrenCnt EQU rbp - 1140 ; 16 bytes
  children EQU rbp - 1156 ; 16 bytes
  opcode EQU rbp - 1172 ; 16 bytes
  isLeftNode EQU rbp - 1188 ; 16 bytes
  node EQU rbp - 1204 ; 16 bytes
  symbolTable EQU rbp - 1220 ; 16 bytes
  this EQU rbp - 1236 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 1264

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ isLeftNode ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2186 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2187 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2215 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2216 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2217 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2218 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2219 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2220 + Variant_t.type], VARIANT_UNDEFINED
  mov [className + Variant_t.type], VARIANT_UNDEFINED
  mov [baseName + Variant_t.type], VARIANT_UNDEFINED
  mov [vtable + Variant_t.type], VARIANT_UNDEFINED
  mov [baseMethods + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [baseProto + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [methodParamsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [baseMethodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2236 + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeBody + Variant_t.type], VARIANT_UNDEFINED
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse3 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [__cse4 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse5 + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [oldClassProto + Variant_t.type], VARIANT_UNDEFINED
  mov [newClassProto + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable1 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable2 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols1 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols2 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse6 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbolInfo2 + Variant_t.type], VARIANT_UNDEFINED
  mov [readHits + Variant_t.type], VARIANT_UNDEFINED
  mov [writeHits + Variant_t.type], VARIANT_UNDEFINED
  mov [astType1 + Variant_t.type], VARIANT_UNDEFINED
  mov [astType2 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse7 + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto1 + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto2 + Variant_t.type], VARIANT_UNDEFINED
  mov [iterNode + Variant_t.type], VARIANT_UNDEFINED
  mov [idxStartNode + Variant_t.type], VARIANT_UNDEFINED
  mov [idxEndNode + Variant_t.type], VARIANT_UNDEFINED
  mov [idxStepNode + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyNode + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse8 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse9 + Variant_t.type], VARIANT_UNDEFINED
  mov [iteratorsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [boxNode + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse10 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse11 + Variant_t.type], VARIANT_UNDEFINED
  mov [condNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*63]
  pop rdi
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2189
l2188:
  lea  rcx , [ item ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  ret
l2189:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2188 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  mov dword [ tmp2190 ], 1
  mov dword [ tmp2192 ], 201
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2192 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2193 ], eax
  cmp dword [ tmp2193 ], 0
  jnz l2191
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal55 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2190 ], eax
l2191:
  cmp dword [ tmp2190 ], 0
  jz l2194
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp2192 ], eax
  cmp dword [ tmp2192 ], 4
  jl l2197
  cmp dword [ tmp2192 ], 103
  jg l2197
  mov eax, dword [ tmp2192 ]
  jmp qword [ __jmptable2198 + rax * 8]
l2199:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*18]
  pop rdi
  lea rcx, [ symbolTable ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2201
l2200:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ item ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  ret
l2201:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2200 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2196
l2202:
  mov dword [ tmp2193 ], 1
  mov eax, dword [ tmp2193 ]
  mov [ tmp2187 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ isLeftNode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2193 ], eax
  cmp dword [ tmp2193 ], 0
  jz l2203
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal240 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2203:
l2204:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*44]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
  mov dword [ tmp2205 ], 201
  mov [ tmp2186 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2186 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
  jmp l2196
l2206:
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ baseName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ baseName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseMethods ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ baseName ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2193 ], eax
  cmp dword [ tmp2193 ], 0
  jz l2207
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ baseName ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*38]
  pop rdi
  lea  rcx, [ baseProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ baseProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ baseMethods ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys oneMethodName values methodProto
; 
  jmp l2210
l2209:
  lea  rcx , [ vtable ]
  lea  rdx , [ oneMethodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantStoreAtKey
  ret
l2210:
  lea  rcx , [ baseMethods ]
  lea  rdx , [ oneMethodName ]
  lea  r8 , [ methodProto ]
  lea  r9 , [ l2209 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys oneMethodName values methodProto
; -----------------------------
; 
l2207:
l2208:
; 
; -----------------------------
; BEGIN: for keys -1 values child
; 
  jmp l2212
l2211:
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ child ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 104
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2193 ], eax
  cmp dword [ tmp2193 ], 0
  jz l2213
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ child ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ child ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodParamsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2187 ]
  lea  rdi , [ methodParamsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodParamsCnt ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2219 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal245 ]
  lea  rdx , [ tmp2186 ]
  lea  r8 , [ tmp2219 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2218 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ tmp2219 ]
  lea  r8 , [ tmp2218 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2217 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal244 ]
  lea  rdx , [ tmp2218 ]
  lea  r8 , [ tmp2217 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2216 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ className ]
  lea  rdx , [ tmp2217 ]
  lea  r8 , [ tmp2216 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal243 ]
  lea  rdx , [ tmp2216 ]
  lea  r8 , [ tmp2215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ child ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ tmp2215 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ child ]
  lea  rdx , [ __literal246 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ child ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseMethods ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2220 ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2221 ], eax
  cmp dword [ tmp2221 ], 0
  jz l2222
  lea  rcx, [ baseMethodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseMethods ]
  lea  rdx , [ methodName ]
  lea  r8 , [ baseMethodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ child ]
  lea  rdx , [ __literal247 ]
  lea  r8 , [ baseMethodProto ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2224 ], 1
  mov eax, dword [ tmp2224 ]
  mov [ tmp2186 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2186 + Variant_t.value], rax
  lea  rcx , [ baseMethodProto ]
  lea  rdx , [ __literal248 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
l2222:
l2223:
  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ child ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ child ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
l2213:
l2214:
  ret
l2212:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ child ]
  lea  r9 , [ l2211 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values child
; -----------------------------
; 
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ baseName ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2186 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal249 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ className ]
  lea  r8 , [ classProto ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*37]
  pop rdi
  jmp l2196
l2197:
  mov dword [ tmp2193 ], 1
  mov dword [ tmp2205 ], 102
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2221 ], eax
  cmp dword [ tmp2221 ], 0
  jnz l2225
  mov dword [ tmp2205 ], 104
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2193 ], eax
l2225:
  cmp dword [ tmp2193 ], 0
  jz l2226
  mov dword [ tmp2205 ], 0
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ nodeBody ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2220 ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2221 ], eax
  cmp dword [ tmp2221 ], 0
  jz l2228
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  jmp l2229
l2228:
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
l2229:
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*34]
  pop rdi
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2220 ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2221 ], eax
  cmp dword [ tmp2221 ], 0
  jz l2230
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*32]
  pop rdi
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ paramShift ], 0
  mov dword [ tmp2205 ], 104
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2224 ], eax
  cmp dword [ tmp2224 ], 0
  jz l2232
  lea  rcx, [ __cse3 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse3 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 0
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse3 ]
  lea  rdx , [ __literal17 ]
  lea  r8 , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*41]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2205 ], 6
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse3 ]
  lea  rdx , [ __literal17 ]
  lea  r8 , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*48]
  pop rdi
  mov dword [ paramShift ], 1
l2232:
l2233:
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys paramIdx values paramName
; 
  jmp l2235
l2234:
  lea  rcx, [ __cse4 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse4 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramShift ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse4 ]
  lea  rdx , [ paramName ]
  lea  r8 , [ tmp2220 ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*41]
  pop rdi
  mov dword [ tmp2205 ], -1
  mov [ tmp2220 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2220 + Variant_t.value], rax
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse4 ]
  lea  rdx , [ paramName ]
  lea  r8 , [ tmp2220 ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*48]
  pop rdi
  ret
l2235:
  lea  rcx , [ tmp2186 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramName ]
  lea  r9 , [ l2234 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys paramIdx values paramName
; -----------------------------
; 
l2230:
l2231:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ nodeBody ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2220 ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2221 ], eax
  cmp dword [ tmp2221 ], 0
  jz l2237
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2220 ]
  lea  rdx , [ tmp2236 ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2224 ], 1
  mov eax, dword [ tmp2224 ]
  mov [ tmp2236 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2224 ], eax
  cmp dword [ tmp2224 ], 0
  jz l2239
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
  mov dword [ tmp2205 ], 4
  mov [ tmp2186 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2186 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2205 ], -1
  mov [ tmp2186 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2186 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 1
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2240
l2239:
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2218 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal252 ]
  lea  r8 , [ tmp2218 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2217 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal251 ]
  lea  rdx , [ tmp2218 ]
  lea  r8 , [ tmp2217 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2216 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ tmp2217 ]
  lea  r8 , [ tmp2216 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp2216 ]
  lea  r8 , [ tmp2215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2215 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2240:
l2237:
l2238:
  jmp l2227
l2226:
  mov dword [ tmp2205 ], 101
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2221 ], eax
  cmp dword [ tmp2221 ], 0
  jz l2241
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2187 ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2224 ], eax
  cmp dword [ tmp2224 ], 0
  jz l2243
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*30]
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 1
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2245 ], eax
  cmp dword [ tmp2245 ], 0
  jz l2246
  lea  rcx, [ __cse5 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse5 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse5 ]
  lea  rdx , [ __literal253 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*16]
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse5 ]
  lea  rdx , [ __literal254 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*16]
  pop rdi
l2246:
l2247:
l2243:
l2244:
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2249
l2248:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ item ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  ret
l2249:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2248 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*33]
  pop rdi
  jmp l2242
l2241:
  mov dword [ tmp2205 ], 201
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2224 ], eax
  cmp dword [ tmp2224 ], 0
  jz l2250
  mov dword [ tmp2245 ], 1
  mov eax, dword [ tmp2245 ]
  mov [ tmp2187 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ isLeftNode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2245 ], eax
  cmp dword [ tmp2245 ], 0
  jz l2252
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*23]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
  jmp l2253
l2252:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*21]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
l2253:
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
  jmp l2251
l2250:
  mov dword [ tmp2245 ], 1
  mov dword [ tmp2205 ], 203
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2255 ], eax
  cmp dword [ tmp2255 ], 0
  jnz l2254
  mov dword [ tmp2205 ], 204
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2245 ], eax
l2254:
  cmp dword [ tmp2245 ], 0
  jz l2256
  mov dword [ tmp2205 ], 0
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp2187 ]
  lea  r9 , [ isLeftNode ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbols$4
  pop rdi
  mov dword [ tmp2205 ], 1
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp2187 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  mov dword [ tmp2205 ], 0
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 201
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2255 ], eax
  cmp dword [ tmp2255 ], 0
  jz l2258
  mov dword [ tmp2205 ], 0
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2236 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*21]
  pop rdi
l2258:
l2259:
  jmp l2257
l2256:
  mov dword [ tmp2205 ], 205
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2255 ], eax
  cmp dword [ tmp2255 ], 0
  jz l2260
  mov dword [ tmp2205 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2205 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 201
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2262 ], eax
  cmp dword [ tmp2262 ], 0
  jz l2263
  mov dword [ tmp2265 ], 0
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 9
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2267 ], eax
  cmp dword [ tmp2267 ], 0
  jz l2266
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2187 ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2265 ], eax
l2266:
  cmp dword [ tmp2265 ], 0
  jz l2268
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*43]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
  mov dword [ tmp2205 ], 999
  mov [ tmp2186 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2186 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2269
l2268:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*25]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
l2269:
  lea  rcx , [ lval ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ rval ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ lval ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*47]
  pop rdi
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rval ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2265 ], 1
  mov eax, dword [ tmp2265 ]
  mov [ tmp2236 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2265 ], eax
  cmp dword [ tmp2265 ], 0
  jz l2270
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*46]
  pop rdi
l2270:
l2271:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 107
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2265 ], eax
  cmp dword [ tmp2265 ], 0
  jz l2272
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2236 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2267 ], 1
  mov eax, dword [ tmp2267 ]
  mov [ tmp2187 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2267 ], eax
  cmp dword [ tmp2267 ], 0
  jz l2274
  lea  rcx, [ oldClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ oldClassProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2236 ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*38]
  pop rdi
  lea  rcx, [ newClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ newClassProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2276 ], 0
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oldClassProto ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2278 ], eax
  cmp dword [ tmp2278 ], 0
  jz l2277
  lea  rcx , [ oldClassProto ]
  lea  rdx , [ newClassProto ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2276 ], eax
l2277:
  cmp dword [ tmp2276 ], 0
  jz l2279
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2236 ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal255 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2215 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__debug$2
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp2205 ], 0
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2280
l2279:
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ newClassProto ]
  call  __MOLD_VariantStoreAtKey
l2280:
l2274:
l2275:
l2272:
l2273:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rval ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2236 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*48]
  pop rdi
  jmp l2264
l2263:
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ lval ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ rval ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
l2264:
  jmp l2261
l2260:
  mov dword [ tmp2205 ], 150
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2262 ], eax
  cmp dword [ tmp2262 ], 0
  jz l2281
  mov dword [ tmp2205 ], 0
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp2236 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  mov dword [ tmp2205 ], 1
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp2236 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  mov dword [ tmp2205 ], 3
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2265 ], eax
  cmp dword [ tmp2265 ], 0
  jz l2283
  mov dword [ tmp2205 ], 2
  lea  rcx, [ __cse6 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ __cse6 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ __cse6 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  mov dword [ tmp2205 ], 1
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolTable1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolTable2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse6 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable2 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable1 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*13]
  pop rdi
  lea  rcx, [ symbols1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols1 ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable2 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*13]
  pop rdi
  lea  rcx, [ symbols2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols2 ]
  lea rdx, [ tmp2186 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values symbolInfo1
; 
  jmp l2286
l2285:
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolInfo2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbols2 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ symbolInfo2 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo2 ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2267 ], eax
  cmp dword [ tmp2267 ], 0
  jz l2287
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantAdd
  lea  rcx, [ __cse7 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ __cse7 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable1 ]
  lea  rdx , [ __cse7 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*15]
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable2 ]
  lea  rdx , [ __cse7 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*15]
  pop rdi
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2236 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2276 ], 0
  mov eax, dword [ tmp2276 ]
  mov [ tmp2187 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2276 ], eax
  cmp dword [ tmp2276 ], 0
  jz l2289
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ symbolInfo1 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*14]
  pop rdi
l2289:
l2290:
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ astType1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable1 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ astType1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ astType2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable2 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ astType2 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ astType1 ]
  lea  rdx , [ astType2 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2276 ], eax
  cmp dword [ tmp2276 ], 0
  jz l2291
  mov dword [ astType ], -1
  mov dword [ tmp2278 ], 0
  mov dword [ tmp2205 ], 3
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ astType1 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2294 ], eax
  cmp dword [ tmp2294 ], 0
  jz l2293
  mov dword [ tmp2205 ], 1
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ astType2 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2278 ], eax
l2293:
  cmp dword [ tmp2278 ], 0
  jz l2295
  mov dword [ astType ], 3
  jmp l2296
l2295:
  mov dword [ tmp2294 ], 0
  mov dword [ tmp2205 ], 1
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ astType1 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2298 ], eax
  cmp dword [ tmp2298 ], 0
  jz l2297
  mov dword [ tmp2205 ], 3
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ astType2 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2294 ], eax
l2297:
  cmp dword [ tmp2294 ], 0
  jz l2299
  mov dword [ astType ], 3
l2299:
l2300:
l2296:
  mov [ tmp2186 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType ]
  mov [ tmp2186 + Variant_t.value], rax
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2292
l2291:
  lea  rcx, [ classProto1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ classProto1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classProto2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ classProto2 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ classProto1 ]
  lea  rdx , [ classProto2 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2278 ], eax
  cmp dword [ tmp2278 ], 0
  jz l2301
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp2205 ], 0
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
l2301:
l2302:
l2292:
  mov dword [ tmp2205 ], 1
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2236 ]
  lea  r9 , [ symbolInfo1 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$4
  pop rdi
  mov dword [ tmp2205 ], 2
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2187 ]
  lea  r9 , [ symbolInfo1 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$4
  pop rdi
l2287:
l2288:
  ret
l2286:
  lea  rcx , [ symbols1 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo1 ]
  lea  r9 , [ l2285 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values symbolInfo1
; -----------------------------
; 
l2283:
l2284:
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2236 ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2265 ], eax
  cmp dword [ tmp2265 ], 0
  jz l2303
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey
l2303:
l2304:
  jmp l2282
l2281:
  mov dword [ tmp2205 ], 160
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2265 ], eax
  cmp dword [ tmp2265 ], 0
  jz l2305
  mov dword [ tmp2205 ], 0
  lea  rcx, [ iterNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ iterNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2205 ], 1
  lea  rcx, [ idxStartNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ idxStartNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2205 ], 2
  lea  rcx, [ idxEndNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ idxEndNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2205 ], 3
  lea  rcx, [ idxStepNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ idxStepNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2205 ], 4
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2236 ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2267 ], 1
  mov eax, dword [ tmp2267 ]
  mov [ tmp2236 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2267 ], eax
  cmp dword [ tmp2267 ], 0
  jz l2307
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2216 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal257 ]
  lea  r8 , [ tmp2216 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal256 ]
  lea  rdx , [ tmp2216 ]
  lea  r8 , [ tmp2215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2215 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2307:
l2308:
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*31]
  pop rdi
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ __cse8 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse8 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse9 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __cse9 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse8 ]
  lea  rdx , [ __cse9 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*39]
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse8 ]
  lea  rdx , [ __cse9 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*24]
  pop rdi
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2205 ], 1
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse8 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2187 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*48]
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ idxStartNode ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ idxEndNode ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ idxStepNode ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ bodyNode ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  jmp l2306
l2305:
  mov dword [ tmp2267 ], 1
  mov dword [ tmp2205 ], 161
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2276 ], eax
  cmp dword [ tmp2276 ], 0
  jnz l2309
  mov dword [ tmp2276 ], 1
  mov dword [ tmp2205 ], 162
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2278 ], eax
  cmp dword [ tmp2278 ], 0
  jnz l2310
  mov dword [ tmp2278 ], 1
  mov dword [ tmp2205 ], 163
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2294 ], eax
  cmp dword [ tmp2294 ], 0
  jnz l2311
  mov dword [ tmp2294 ], 1
  mov dword [ tmp2205 ], 164
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2298 ], eax
  cmp dword [ tmp2298 ], 0
  jnz l2312
  mov dword [ tmp2205 ], 165
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2294 ], eax
l2312:
  mov eax, dword [ tmp2294 ]
  mov dword [ tmp2278 ], eax
l2311:
  mov eax, dword [ tmp2278 ]
  mov dword [ tmp2276 ], eax
l2310:
  mov eax, dword [ tmp2276 ]
  mov dword [ tmp2267 ], eax
l2309:
  cmp dword [ tmp2267 ], 0
  jz l2313
  mov dword [ tmp2205 ], 2
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ iteratorsCnt ]
  call  __MOLD_VariantSub
  mov eax, dword [ iteratorsCnt + Variant_t.value]
  mov dword [ tmp2205 ], eax
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ boxNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2205 ], 1
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2205 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp2187 + Variant_t.value]
  mov dword [ tmp2205 ], eax
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*31]
  pop rdi
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2205 ], 1
  mov eax, dword [ iteratorsCnt + Variant_t.value]
  mov dword [ tmp2315 ], eax
  mov dword [ idx ], 0
l2317:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp2315 ]
  jge l2318
  lea  rcx, [ iterNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ iterNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2236 ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2276 ], 1
  mov eax, dword [ tmp2276 ]
  mov [ tmp2236 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2186 + Variant_t.value]
  mov dword [ tmp2276 ], eax
  cmp dword [ tmp2276 ], 0
  jz l2319
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2216 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal257 ]
  lea  r8 , [ tmp2216 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal256 ]
  lea  rdx , [ tmp2216 ]
  lea  r8 , [ tmp2215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2215 ]
  lea  rdi , [ tmp2186 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2319:
l2320:
  lea  rcx, [ __cse10 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse10 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse11 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __cse11 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse10 ]
  lea  rdx , [ __cse11 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*39]
  pop rdi
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse10 ]
  lea  rdx , [ __cse11 ]
  lea  rdi, [ tmp2186 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*24]
  pop rdi
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2276 ], 1
  mov eax, dword [ tmp2276 ]
  mov [ tmp2236 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ tmp2186 ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantStoreAtKey
  mov eax, dword [ idx ]
  add eax, dword [ tmp2205 ]
  mov dword [ idx ], eax
  jmp l2317
l2318:
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ boxNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2186 ]
  lea  rdx , [ tmp2187 ]
  lea  rdi, [ tmp2236 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*21]
  pop rdi
  lea  rcx , [ boxNode ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ boxNode ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ bodyNode ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  jmp l2314
l2313:
  mov dword [ tmp2316 ], 153
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2316 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2276 ], eax
  cmp dword [ tmp2276 ], 0
  jz l2321
  mov dword [ tmp2316 ], 0
  lea  rcx, [ condNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2316 ]
  lea  r8 , [ condNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2316 ], 1
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2316 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2236 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*31]
  pop rdi
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ condNode ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$3
  pop rdi
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ bodyNode ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi
  jmp l2322
l2321:
  mov dword [ goOnIntoChildren ], 1
  mov dword [ tmp2316 ], 152
  mov [ tmp2187 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2316 ]
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2278 ], eax
  cmp dword [ tmp2278 ], 0
  jz l2323
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2294 ], 1
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal45 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2298 ], eax
  cmp dword [ tmp2298 ], 0
  jnz l2325
  mov dword [ tmp2298 ], 1
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal259 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2327 ], eax
  cmp dword [ tmp2327 ], 0
  jnz l2326
  mov dword [ tmp2327 ], 1
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2329 ], eax
  cmp dword [ tmp2329 ], 0
  jnz l2328
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2327 ], eax
l2328:
  mov eax, dword [ tmp2327 ]
  mov dword [ tmp2298 ], eax
l2326:
  mov eax, dword [ tmp2298 ]
  mov dword [ tmp2294 ], eax
l2325:
  cmp dword [ tmp2294 ], 0
  jz l2330
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2298 ], 0
  mov eax, dword [ tmp2298 ]
  mov [ tmp2186 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2186 + Variant_t.value], rax
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2186 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2298 ], eax
  cmp dword [ tmp2298 ], 0
  jz l2332
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2186 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp2327 ], 1
  mov eax, dword [ tmp2327 ]
  mov [ tmp2187 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ tmp2186 ]
  lea  rdx , [ __literal260 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2186 ]
  lea  rdi, [ tmp2236 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*34]
  pop rdi
l2332:
l2333:
l2330:
l2331:
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  rdi, [ tmp2236 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*22]
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2294 ], 0
  mov eax, dword [ tmp2294 ]
  mov [ isLeftNode + Variant_t.type], VARIANT_BOOLEAN
  mov [ isLeftNode + Variant_t.value], rax
  mov dword [ tmp2294 ], 0
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2220 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2220 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal261 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2298 ], 1
  mov eax, dword [ tmp2298 ]
  mov [ tmp2187 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ tmp2186 ]
  lea  rdx , [ tmp2187 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2298 ], eax
  cmp dword [ tmp2298 ], 0
  jz l2334
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*36]
  pop rdi
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2236 + Variant_t.value]
  mov dword [ tmp2294 ], eax
l2334:
  cmp dword [ tmp2294 ], 0
  jz l2335
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2186 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2186 ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2218 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2218 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2217 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal263 ]
  lea  rdx , [ tmp2218 ]
  lea  r8 , [ tmp2217 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2216 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ tmp2217 ]
  lea  r8 , [ tmp2216 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal262 ]
  lea  rdx , [ tmp2216 ]
  lea  r8 , [ tmp2215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2215 ]
  lea  rdi , [ tmp2236 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__debug$2
  pop rdi
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2187 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2298 ], 1
  mov eax, dword [ tmp2298 ]
  mov [ tmp2187 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2187 + Variant_t.value], rax
  lea  rcx , [ tmp2236 ]
  lea  rdx , [ __literal261 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantStoreAtKey
l2335:
l2336:
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2187 + Variant_t.value]
  mov dword [ tmp2294 ], eax
  cmp dword [ tmp2294 ], 0
  jz l2337
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2340
l2339:
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2236 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2236 ]
  lea  rdi, [ tmp2187 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*40]
  pop rdi
  ret
l2340:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2339 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  mov dword [ goOnIntoChildren ], 0
l2337:
l2338:
  jmp l2324
l2323:
  mov dword [ tmp2316 ], 106
  mov [ tmp2236 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2316 ]
  mov [ tmp2236 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2236 ]
  lea  r8 , [ tmp2187 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2187 + Variant_t.value]
  mov dword [ tmp2294 ], eax
  cmp dword [ tmp2294 ], 0
  jz l2341
  mov dword [ tmp2298 ], 0
  mov eax, dword [ tmp2298 ]
  mov [ isLeftNode + Variant_t.type], VARIANT_BOOLEAN
  mov [ isLeftNode + Variant_t.value], rax
l2341:
l2342:
l2324:
  mov dword [ tmp2294 ], 1
  xor  eax, eax
  or   dword [ goOnIntoChildren ], eax
  setz cl
  or   dword [ tmp2294 ], eax
  setz al
  xor  al, cl
  jnz l2343
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2346
l2345:
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ item ]
  lea  r9 , [ isLeftNode ]
  lea  rdi , [ tmp2187 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbols$4
  pop rdi
  ret
l2346:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2345 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
l2343:
l2344:
l2322:
l2314:
l2306:
l2282:
l2261:
l2257:
l2251:
l2242:
l2227:
l2196:
l2194:
l2195:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2186 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2187 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2220 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseProto ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneMethodName
  ; Skipped loop iterator methodProto
  ; Skipped loop iterator child
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodParamsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseMethodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2236 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse3 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramIdx
  ; Skipped loop iterator paramName
  lea  rcx, [ __cse4 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse5 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse6 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo1
  lea  rcx, [ symbolInfo2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astType1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astType2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse7 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxStartNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxEndNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxStepNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse8 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse9 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse10 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse11 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ condNode ]
  call __MOLD_VariantDestroy

  add  rsp, 1264
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore isLeftNode
  restore opcode
  restore children
  restore childrenCnt
  restore tmp2186
  restore tmp2187
  restore item
  restore tmp2190
  restore tmp2192
  restore tmp2193
  restore tmp2205
  restore symbolInfo
  restore tmp2215
  restore tmp2216
  restore tmp2217
  restore tmp2218
  restore tmp2219
  restore tmp2220
  restore tmp2221
  restore tmp2224
  restore className
  restore baseName
  restore vtable
  restore baseMethods
  restore classProto
  restore baseProto
  restore oneMethodName
  restore methodProto
  restore child
  restore methodName
  restore methodParamsCnt
  restore baseMethodProto
  restore tmp2236
  restore nodeBody
  restore funcProto
  restore value
  restore params
  restore funcName
  restore paramShift
  restore __cse3
  restore paramIdx
  restore paramName
  restore __cse4
  restore tmp2245
  restore __cse5
  restore tmp2255
  restore tmp2262
  restore tmp2265
  restore tmp2267
  restore tmp2276
  restore tmp2278
  restore lval
  restore rval
  restore oldClassProto
  restore newClassProto
  restore x
  restore tmp2294
  restore tmp2298
  restore symbolTable1
  restore symbolTable2
  restore symbols1
  restore symbols2
  restore __cse6
  restore symbolInfo1
  restore symbolInfo2
  restore readHits
  restore writeHits
  restore astType1
  restore astType2
  restore __cse7
  restore astType
  restore classProto1
  restore classProto2
  restore iterNode
  restore idxStartNode
  restore idxEndNode
  restore idxStepNode
  restore bodyNode
  restore __cse8
  restore __cse9
  restore tmp2315
  restore tmp2316
  restore iteratorsCnt
  restore boxNode
  restore idx
  restore __cse10
  restore __cse11
  restore condNode
  restore tmp2327
  restore tmp2329
  restore goOnIntoChildren
; -----------------------------------------------
; function __ASTSymbolsCollector_buildSymbolTable$2
; -----------------------------------------------
__ASTSymbolsCollector_buildSymbolTable$2:
  ; init frame
  ; ----------
  tmp2353 EQU rbp - 12 ; 4 bytes
  tmp2352 EQU rbp - 28 ; 16 bytes
  tmp2351 EQU rbp - 32 ; 4 bytes
  tmp2350 EQU rbp - 48 ; 16 bytes
  tmp2349 EQU rbp - 64 ; 16 bytes
  tmp2347 EQU rbp - 68 ; 4 bytes
  node EQU rbp - 84 ; 16 bytes
  this EQU rbp - 100 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp2349 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2350 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2352 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2347 ], 0
  lea  rcx, [ tmp2350 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2350 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2351 ], 101
  mov [ tmp2352 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2351 ]
  mov [ tmp2352 + Variant_t.value], rax
  lea  rcx , [ tmp2350 ]
  lea  rdx , [ tmp2352 ]
  lea  r8 , [ tmp2349 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2349 + Variant_t.value]
  mov dword [ tmp2353 ], eax
  cmp dword [ tmp2353 ], 0
  jz l2348
  lea  rcx, [ tmp2352 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2352 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2351 ], 100
  mov [ tmp2350 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2351 ]
  mov [ tmp2350 + Variant_t.value], rax
  lea  rcx , [ tmp2352 ]
  lea  rdx , [ tmp2350 ]
  lea  r8 , [ tmp2349 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2349 + Variant_t.value]
  mov dword [ tmp2347 ], eax
l2348:
  cmp dword [ tmp2347 ], 0
  jz l2354
  lea  rcx, [ tmp2349 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal264 ]
  lea  rdi , [ tmp2349 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2354:
l2355:
  lea  rcx, [ tmp2350 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2350 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2349 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2350 ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp2349 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2349 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2350 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2352 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore node
  restore tmp2347
  restore tmp2349
  restore tmp2350
  restore tmp2351
  restore tmp2352
  restore tmp2353
; -----------------------------------------------
; function __ASTEvaluator_constructor$2
; -----------------------------------------------
__ASTEvaluator_constructor$2:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTEvaluator__debug$2
; -----------------------------------------------
__ASTEvaluator__debug$2:
  ; init frame
  ; ----------
  tmp2360 EQU rbp - 24 ; 16 bytes
  tmp2357 EQU rbp - 28 ; 4 bytes
  tmp2356 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp2360 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2357 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2357 ], eax
  setz al
  xor  al, cl
  jnz l2358
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal265 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2358:
l2359:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2360 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2356
  restore tmp2357
  restore tmp2360
; -----------------------------------------------
; function __ASTEvaluator__assignValue$4
; -----------------------------------------------
__ASTEvaluator__assignValue$4:
  ; init frame
  ; ----------
  tmp2361 EQU rbp - 24 ; 16 bytes
  newValue EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  rval EQU rbp - 72 ; 16 bytes
  lval EQU rbp - 88 ; 16 bytes
  valuesMap EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ lval ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rval ], xmm0
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2361 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValue ]
  lea rdx, [ rval ]
  call __MOLD_VariantMove
  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ lval ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2361 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore lval
  restore rval
  restore name
  restore newValue
  restore tmp2361
; -----------------------------------------------
; function __ASTEvaluator__getValue$3
; -----------------------------------------------
__ASTEvaluator__getValue$3:
  ; init frame
  ; ----------
  tmp2369 EQU rbp - 24 ; 16 bytes
  tmp2368 EQU rbp - 28 ; 4 bytes
  tmp2367 EQU rbp - 44 ; 16 bytes
  tmp2365 EQU rbp - 48 ; 4 bytes
  tmp2362 EQU rbp - 64 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 80 ; 16 bytes
  valuesMap EQU rbp - 96 ; 16 bytes
  this EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ name ], xmm0
  mov [tmp2362 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2367 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2369 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
l2363:
  mov dword [ tmp2365 ], 0
  lea  rcx, [ tmp2367 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp2367 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2367 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2362 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2362 + Variant_t.value]
  mov dword [ tmp2368 ], eax
  cmp dword [ tmp2368 ], 0
  jz l2366
  lea  rcx, [ tmp2369 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesMap ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2369 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2367 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2369 ]
  lea  rdi , [ tmp2367 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2367 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2362 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2362 + Variant_t.value]
  mov dword [ tmp2365 ], eax
l2366:
  cmp dword [ tmp2365 ], 0
  jz l2364
  lea  rcx , [ valuesMap ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ valuesMap ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  jmp l2363
l2364:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2362 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2367 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2369 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore name
  restore rv
  restore tmp2362
  restore tmp2365
  restore tmp2367
  restore tmp2368
  restore tmp2369
; -----------------------------------------------
; function __ASTEvaluator__mergeValues$3
; -----------------------------------------------
__ASTEvaluator__mergeValues$3:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp2375 EQU rbp - 28 ; 4 bytes
  tmp2372 EQU rbp - 32 ; 4 bytes
  tmp2371 EQU rbp - 48 ; 16 bytes
  tmp2370 EQU rbp - 64 ; 16 bytes
  rv EQU rdi
  y EQU rbp - 80 ; 16 bytes
  x EQU rbp - 96 ; 16 bytes
  this EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ y ], xmm0
  mov [tmp2370 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2371 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp2371 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2371 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2371 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2370 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2370 + Variant_t.value]
  mov dword [ tmp2372 ], eax
  cmp dword [ tmp2372 ], 0
  jz l2373
  lea  rcx, [ tmp2371 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2371 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2371 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2370 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2370 + Variant_t.value]
  mov dword [ tmp2375 ], eax
  cmp dword [ tmp2375 ], 0
  jz l2376
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2379
l2378:
  lea  rcx, [ tmp2370 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp2370 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  ret
l2379:
  lea  rcx , [ x ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2378 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2377
l2376:
  lea  rcx, [ tmp2370 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdx , [ x ]
  lea  rdi , [ tmp2370 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
l2377:
l2373:
l2374:
  lea  rcx, [ tmp2371 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2371 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2371 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2370 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2370 + Variant_t.value]
  mov dword [ tmp2372 ], eax
  cmp dword [ tmp2372 ], 0
  jz l2380
  lea  rcx, [ tmp2371 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2371 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2371 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2370 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2370 + Variant_t.value]
  mov dword [ tmp2375 ], eax
  cmp dword [ tmp2375 ], 0
  jz l2382
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2385
l2384:
  lea  rcx, [ tmp2370 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp2370 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  ret
l2385:
  lea  rcx , [ y ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2384 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2383
l2382:
  lea  rcx, [ tmp2370 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdx , [ y ]
  lea  rdi , [ tmp2370 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
l2383:
l2380:
l2381:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2370 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2371 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore x
  restore y
  restore rv
  restore tmp2370
  restore tmp2371
  restore tmp2372
  restore tmp2375
  restore item
; -----------------------------------------------
; function __ASTEvaluator__processConditionalNode$3
; -----------------------------------------------
__ASTEvaluator__processConditionalNode$3:
  ; init frame
  ; ----------
  newValue EQU rbp - 24 ; 16 bytes
  oldValue EQU rbp - 40 ; 16 bytes
  varId EQU rbp - 56 ; 16 bytes
  tmp2390 EQU rbp - 60 ; 4 bytes
  tmp2387 EQU rbp - 76 ; 16 bytes
  tmp2386 EQU rbp - 92 ; 16 bytes
  newValuesMap EQU rbp - 108 ; 16 bytes
  node EQU rbp - 124 ; 16 bytes
  valuesMap EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [newValuesMap + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2386 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2387 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [oldValue + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2386 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2386 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2387 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2387 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2386 ]
  lea  rdx , [ __literal266 ]
  lea  r8 , [ tmp2387 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newValuesMap ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValuesMap ]
  lea rdx, [ tmp2386 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2386 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newValuesMap ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp2386 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
; 
; -----------------------------
; BEGIN: for keys varId values -1
; 
  jmp l2389
l2388:
  lea  rcx , [ varId ]
  lea  rdx , [ __literal266 ]
  lea  r8 , [ tmp2386 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2386 + Variant_t.value]
  mov dword [ tmp2390 ], eax
  cmp dword [ tmp2390 ], 0
  jz l2391
  lea  rcx, [ tmp2386 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ varId ]
  lea  rdi , [ tmp2386 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$3
  pop rdi
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ oldValue ]
  lea rdx, [ tmp2386 ]
  call __MOLD_VariantMove
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2386 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oldValue ]
  lea  r8 , [ newValue ]
  lea  rdi , [ tmp2386 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__mergeValues$3
  pop rdi
  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2386 ]
  call  __MOLD_VariantStoreAtKey
l2391:
l2392:
  ret
l2389:
  lea  rcx , [ newValuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ __TrashBin ]
  lea  r9 , [ l2388 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys varId values __TrashBin
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ newValuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2386 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2387 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator varId
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore node
  restore newValuesMap
  restore tmp2386
  restore tmp2387
  restore tmp2390
  restore varId
  restore oldValue
  restore newValue
; -----------------------------------------------
; function __ASTEvaluator__processTwoAlternativeNodes$4
; -----------------------------------------------
__ASTEvaluator__processTwoAlternativeNodes$4:
  ; init frame
  ; ----------
  value2 EQU rbp - 24 ; 16 bytes
  value1 EQU rbp - 40 ; 16 bytes
  oldValue EQU rbp - 56 ; 16 bytes
  varId EQU rbp - 72 ; 16 bytes
  tmp2397 EQU rbp - 76 ; 4 bytes
  tmp2394 EQU rbp - 92 ; 16 bytes
  tmp2393 EQU rbp - 108 ; 16 bytes
  newValuesMap2 EQU rbp - 124 ; 16 bytes
  newValuesMap1 EQU rbp - 140 ; 16 bytes
  node2 EQU rbp - 156 ; 16 bytes
  node1 EQU rbp - 172 ; 16 bytes
  valuesMap EQU rbp - 188 ; 16 bytes
  this EQU rbp - 204 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ node2 ], xmm0
  mov [newValuesMap1 + Variant_t.type], VARIANT_UNDEFINED
  mov [newValuesMap2 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2393 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2394 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [oldValue + Variant_t.type], VARIANT_UNDEFINED
  mov [value1 + Variant_t.type], VARIANT_UNDEFINED
  mov [value2 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2393 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2394 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2394 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2393 ]
  lea  rdx , [ __literal266 ]
  lea  r8 , [ tmp2394 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newValuesMap1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValuesMap1 ]
  lea rdx, [ tmp2393 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2393 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2394 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2394 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2393 ]
  lea  rdx , [ __literal266 ]
  lea  r8 , [ tmp2394 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newValuesMap2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValuesMap2 ]
  lea rdx, [ tmp2393 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newValuesMap1 ]
  lea  r8 , [ node1 ]
  lea  rdi , [ tmp2393 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newValuesMap2 ]
  lea  r8 , [ node2 ]
  lea  rdi , [ tmp2393 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
; 
; -----------------------------
; BEGIN: for keys varId values -1
; 
  jmp l2396
l2395:
  lea  rcx , [ varId ]
  lea  rdx , [ __literal266 ]
  lea  r8 , [ tmp2393 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2393 + Variant_t.value]
  mov dword [ tmp2397 ], eax
  cmp dword [ tmp2397 ], 0
  jz l2398
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ varId ]
  lea  rdi , [ tmp2393 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$3
  pop rdi
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ oldValue ]
  lea rdx, [ tmp2393 ]
  call __MOLD_VariantMove
  lea  rcx, [ value1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value2 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value1 ]
  lea  r8 , [ value2 ]
  lea  rdi , [ tmp2393 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__mergeValues$3
  pop rdi
  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2393 ]
  call  __MOLD_VariantStoreAtKey
l2398:
l2399:
  ret
l2396:
  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ __TrashBin ]
  lea  r9 , [ l2395 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys varId values __TrashBin
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys varId values -1
; 
  jmp l2401
l2400:
  lea  rcx , [ varId ]
  lea  rdx , [ __literal266 ]
  lea  r8 , [ tmp2393 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2393 + Variant_t.value]
  mov dword [ tmp2397 ], eax
  cmp dword [ tmp2397 ], 0
  jz l2402
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ varId ]
  lea  rdi , [ tmp2393 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$3
  pop rdi
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ oldValue ]
  lea rdx, [ tmp2393 ]
  call __MOLD_VariantMove
  lea  rcx, [ value1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value2 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value1 ]
  lea  r8 , [ value2 ]
  lea  rdi , [ tmp2393 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__mergeValues$3
  pop rdi
  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2393 ]
  call  __MOLD_VariantStoreAtKey
l2402:
l2403:
  ret
l2401:
  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ __TrashBin ]
  lea  r9 , [ l2400 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys varId values __TrashBin
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ newValuesMap1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValuesMap2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2393 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2394 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator varId
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value2 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore node1
  restore node2
  restore newValuesMap1
  restore newValuesMap2
  restore tmp2393
  restore tmp2394
  restore tmp2397
  restore varId
  restore oldValue
  restore value1
  restore value2
; -----------------------------------------------
; function __ASTEvaluator__getArrayOfValueNodes$2
; -----------------------------------------------
__ASTEvaluator__getArrayOfValueNodes$2:
  ; init frame
  ; ----------
  tmp2415 EQU rbp - 24 ; 16 bytes
  tmp2414 EQU rbp - 40 ; 16 bytes
  item EQU rbp - 56 ; 16 bytes
  tmp2409 EQU rbp - 60 ; 4 bytes
  tmp2406 EQU rbp - 64 ; 4 bytes
  tmp2405 EQU rbp - 80 ; 16 bytes
  tmp2404 EQU rbp - 96 ; 16 bytes
  rv EQU rdi
  storedValue EQU rbp - 112 ; 16 bytes
  node EQU rbp - 128 ; 16 bytes
  this EQU rbp - 144 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [storedValue + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2404 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2405 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp2414 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2415 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ storedValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ storedValue ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp2405 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ storedValue ]
  lea  rdi , [ tmp2405 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2405 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2404 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2404 + Variant_t.value]
  mov dword [ tmp2406 ], eax
  cmp dword [ tmp2406 ], 0
  jz l2407
  lea  rcx, [ tmp2405 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ storedValue ]
  lea  rdi , [ tmp2405 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2405 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2404 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2404 + Variant_t.value]
  mov dword [ tmp2409 ], eax
  cmp dword [ tmp2409 ], 0
  jz l2410
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l2413
l2412:
  lea  rcx, [ tmp2405 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2405 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2404 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdx , [ tmp2405 ]
  lea  rdi , [ tmp2404 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  ret
l2413:
  lea  rcx , [ storedValue ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2412 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l2411
l2410:
  lea  rcx, [ tmp2404 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2404 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2405 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2405 + Variant_t.value], 0
  lea  rcx, [ tmp2414 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ storedValue ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2414 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2404 ]
  lea  rdx , [ tmp2405 ]
  lea  r8 , [ tmp2414 ]
  call  __MOLD_VariantStoreAtIndex
  lea rcx, [ rv ]
  lea rdx, [ tmp2404 ]
  call __MOLD_VariantMove
l2411:
l2407:
l2408:

  ; clean frame
  ; -----------
  lea  rcx, [ storedValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2404 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2405 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ tmp2414 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2415 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore node
  restore storedValue
  restore rv
  restore tmp2404
  restore tmp2405
  restore tmp2406
  restore tmp2409
  restore item
  restore tmp2414
  restore tmp2415
; -----------------------------------------------
; function __ASTEvaluator__processNode$3
; -----------------------------------------------
__ASTEvaluator__processNode$3:
  ; init frame
  ; ----------
  astType EQU rbp - 24 ; 16 bytes
  childNode EQU rbp - 40 ; 16 bytes
  tmp2502 EQU rbp - 44 ; 4 bytes
  tmp2500 EQU rbp - 48 ; 4 bytes
  tmp2498 EQU rbp - 52 ; 4 bytes
  tmp2496 EQU rbp - 56 ; 4 bytes
  tmp2494 EQU rbp - 60 ; 4 bytes
  tmp2491 EQU rbp - 64 ; 4 bytes
  tmp2484 EQU rbp - 68 ; 4 bytes
  cond EQU rbp - 84 ; 16 bytes
  body EQU rbp - 100 ; 16 bytes
  iterBeginValue EQU rbp - 116 ; 16 bytes
  iter EQU rbp - 132 ; 16 bytes
  methodProto EQU rbp - 148 ; 16 bytes
  classProto EQU rbp - 164 ; 16 bytes
  rval EQU rbp - 180 ; 16 bytes
  lval EQU rbp - 196 ; 16 bytes
  tmp2465 EQU rbp - 212 ; 16 bytes
  tmp2457 EQU rbp - 216 ; 4 bytes
  tmp2448 EQU rbp - 232 ; 16 bytes
  tmp2447 EQU rbp - 248 ; 16 bytes
  tmp2446 EQU rbp - 264 ; 16 bytes
  tmp2445 EQU rbp - 280 ; 16 bytes
  tmp2442 EQU rbp - 284 ; 4 bytes
  tmp2439 EQU rbp - 288 ; 4 bytes
  tmp2436 EQU rbp - 292 ; 4 bytes
  symbolInfo EQU rbp - 308 ; 16 bytes
  tmp2427 EQU rbp - 312 ; 4 bytes
  tmp2426 EQU rbp - 328 ; 16 bytes
  tmp2424 EQU rbp - 332 ; 4 bytes
  tmp2422 EQU rbp - 336 ; 4 bytes
  tmp2419 EQU rbp - 340 ; 4 bytes
  tmp2418 EQU rbp - 356 ; 16 bytes
  tmp2417 EQU rbp - 360 ; 4 bytes
  tmp2416 EQU rbp - 376 ; 16 bytes
  childrenCnt EQU rbp - 392 ; 16 bytes
  children EQU rbp - 408 ; 16 bytes
  opcode EQU rbp - 424 ; 16 bytes
  node EQU rbp - 440 ; 16 bytes
  valuesMap EQU rbp - 456 ; 16 bytes
  this EQU rbp - 472 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 512

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2416 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2418 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2426 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2445 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2446 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2447 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2448 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2465 + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [iter + Variant_t.type], VARIANT_UNDEFINED
  mov [iterBeginValue + Variant_t.type], VARIANT_UNDEFINED
  mov [body + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [astType + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2417 ], 201
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2419 ], eax
  cmp dword [ tmp2419 ], 0
  jz l2420
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2422 ], 0
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2418 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2424 ], eax
  cmp dword [ tmp2424 ], 0
  jz l2423
  mov dword [ tmp2424 ], 0
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 2
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2427 ], eax
  cmp dword [ tmp2427 ], 0
  jz l2425
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 1
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2424 ], eax
l2425:
  mov eax, dword [ tmp2424 ]
  mov dword [ tmp2422 ], eax
l2423:
  cmp dword [ tmp2422 ], 0
  jz l2428
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  jmp l2429
l2428:
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2418 ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$3
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantStoreAtKey
l2429:
  jmp l2421
l2420:
  mov dword [ tmp2417 ], 205
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2422 ], eax
  cmp dword [ tmp2422 ], 0
  jz l2430
  mov dword [ tmp2417 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2417 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ rval ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 106
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2424 ], eax
  cmp dword [ tmp2424 ], 0
  jz l2432
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 0
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2426 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2427 ], eax
  cmp dword [ tmp2427 ], 0
  jz l2434
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ classProto ]
  lea  rdi , [ tmp2426 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2436 ], eax
  cmp dword [ tmp2436 ], 0
  jz l2437
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp2418 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2439 ], eax
  cmp dword [ tmp2439 ], 0
  jz l2440
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2426 ]
  lea  rdi , [ tmp2418 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2442 ], eax
  cmp dword [ tmp2442 ], 0
  jz l2443
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2448 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal268 ]
  lea  r8 , [ tmp2448 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2447 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal44 ]
  lea  rdx , [ tmp2448 ]
  lea  r8 , [ tmp2447 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2446 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2447 ]
  lea  r8 , [ tmp2446 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2445 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal267 ]
  lea  rdx , [ tmp2446 ]
  lea  r8 , [ tmp2445 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2445 ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2443:
l2444:
l2440:
l2441:
l2437:
l2438:
l2434:
l2435:
  jmp l2433
l2432:
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 106
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2427 ], eax
  cmp dword [ tmp2427 ], 0
  jz l2449
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 0
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2426 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2436 ], eax
  cmp dword [ tmp2436 ], 0
  jz l2451
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ classProto ]
  lea  rdi , [ tmp2426 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2439 ], eax
  cmp dword [ tmp2439 ], 0
  jz l2453
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp2418 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2442 ], eax
  cmp dword [ tmp2442 ], 0
  jz l2455
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2426 ]
  lea  rdi , [ tmp2418 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2457 ], eax
  cmp dword [ tmp2457 ], 0
  jz l2458
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2448 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal268 ]
  lea  r8 , [ tmp2448 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2447 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal44 ]
  lea  rdx , [ tmp2448 ]
  lea  r8 , [ tmp2447 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2446 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2447 ]
  lea  r8 , [ tmp2446 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2445 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal267 ]
  lea  rdx , [ tmp2446 ]
  lea  r8 , [ tmp2445 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2445 ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2458:
l2459:
l2455:
l2456:
l2453:
l2454:
l2451:
l2452:
l2449:
l2450:
l2433:
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 201
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2424 ], eax
  cmp dword [ tmp2424 ], 0
  jz l2460
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ lval ]
  lea  r9 , [ rval ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__assignValue$4
  pop rdi
  jmp l2461
l2460:
  mov dword [ tmp2427 ], 1
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 203
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2436 ], eax
  cmp dword [ tmp2436 ], 0
  jnz l2462
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 204
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2427 ], eax
l2462:
  cmp dword [ tmp2427 ], 0
  jz l2463
  lea  rcx, [ tmp2465 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2465 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 0
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2465 ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2418 ]
  lea  rdi , [ tmp2426 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsOkAsBox
  pop rdi
  mov dword [ tmp2436 ], 0
  mov eax, dword [ tmp2436 ]
  mov [ tmp2418 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2436 ], eax
  cmp dword [ tmp2436 ], 0
  jz l2466
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal269 ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2466:
l2467:
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ lval ]
  lea  r9 , [ lval ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__assignValue$4
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ lval ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
l2463:
l2464:
l2461:
  jmp l2431
l2430:
  mov dword [ tmp2417 ], 150
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2424 ], eax
  cmp dword [ tmp2424 ], 0
  jz l2468
  mov dword [ tmp2417 ], 0
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2418 ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
  mov dword [ tmp2417 ], 2
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2427 ], eax
  cmp dword [ tmp2427 ], 0
  jz l2470
  mov dword [ tmp2417 ], 1
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2418 ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  jmp l2471
l2470:
  mov dword [ tmp2417 ], 1
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2417 ], 2
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ tmp2426 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2418 ]
  lea  r9 , [ tmp2426 ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processTwoAlternativeNodes$4
  pop rdi
l2471:
  jmp l2469
l2468:
  mov dword [ tmp2417 ], 160
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2427 ], eax
  cmp dword [ tmp2427 ], 0
  jz l2472
  mov dword [ tmp2417 ], 0
  lea  rcx, [ iter ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ iter ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2417 ], 1
  lea  rcx, [ iterBeginValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ iterBeginValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2417 ], 4
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ iter ]
  lea  r9 , [ iter ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__assignValue$4
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2416 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2426 + Variant_t.value], 0
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2418 ]
  lea rdx, [ iterBeginValue ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2416 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2426 + Variant_t.value], 1
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2418 ]
  lea rdx, [ iter ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2416 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ iter ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  jmp l2473
l2472:
  mov dword [ tmp2436 ], 1
  mov dword [ tmp2417 ], 161
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2439 ], eax
  cmp dword [ tmp2439 ], 0
  jnz l2474
  mov dword [ tmp2439 ], 1
  mov dword [ tmp2417 ], 162
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2442 ], eax
  cmp dword [ tmp2442 ], 0
  jnz l2475
  mov dword [ tmp2417 ], 164
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2439 ], eax
l2475:
  mov eax, dword [ tmp2439 ]
  mov dword [ tmp2436 ], eax
l2474:
  cmp dword [ tmp2436 ], 0
  jz l2476
  mov dword [ tmp2417 ], 2
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  jmp l2477
l2476:
  mov dword [ tmp2439 ], 1
  mov dword [ tmp2417 ], 163
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2442 ], eax
  cmp dword [ tmp2442 ], 0
  jnz l2478
  mov dword [ tmp2417 ], 165
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2439 ], eax
l2478:
  cmp dword [ tmp2439 ], 0
  jz l2479
  mov dword [ tmp2417 ], 3
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  jmp l2480
l2479:
  mov dword [ tmp2417 ], 153
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2442 ], eax
  cmp dword [ tmp2442 ], 0
  jz l2481
  mov dword [ tmp2417 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2417 ], 1
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2417 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ cond ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ cond ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processConditionalNode$3
  pop rdi
  jmp l2482
l2481:
  mov dword [ tmp2457 ], 1
  mov dword [ tmp2417 ], 152
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2484 ], eax
  cmp dword [ tmp2484 ], 0
  jnz l2483
  mov dword [ tmp2417 ], 106
  mov [ tmp2418 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2418 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2418 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2457 ], eax
l2483:
  cmp dword [ tmp2457 ], 0
  jz l2485
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l2488
l2487:
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2418 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2417 ], 201
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ tmp2418 ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2484 ], eax
  cmp dword [ tmp2484 ], 0
  jz l2489
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2426 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2491 ], eax
  cmp dword [ tmp2491 ], 0
  jz l2492
  lea  rcx, [ astType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ astType ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2494 ], 1
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astType ]
  lea  rdi , [ tmp2426 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2426 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2496 ], eax
  cmp dword [ tmp2496 ], 0
  jnz l2495
  mov dword [ tmp2496 ], 1
  mov dword [ tmp2417 ], -1
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ astType ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2498 ], eax
  cmp dword [ tmp2498 ], 0
  jnz l2497
  mov dword [ tmp2498 ], 1
  mov dword [ tmp2417 ], 6
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ astType ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2500 ], eax
  cmp dword [ tmp2500 ], 0
  jnz l2499
  mov dword [ tmp2500 ], 1
  mov dword [ tmp2417 ], 10
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ astType ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2502 ], eax
  cmp dword [ tmp2502 ], 0
  jnz l2501
  mov dword [ tmp2417 ], 9
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ astType ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2500 ], eax
l2501:
  mov eax, dword [ tmp2500 ]
  mov dword [ tmp2498 ], eax
l2499:
  mov eax, dword [ tmp2498 ]
  mov dword [ tmp2496 ], eax
l2497:
  mov eax, dword [ tmp2496 ]
  mov dword [ tmp2494 ], eax
l2495:
  cmp dword [ tmp2494 ], 0
  jz l2503
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ childNode ]
  lea  r9 , [ childNode ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__assignValue$4
  pop rdi
l2503:
l2504:
l2492:
l2493:
l2489:
l2490:
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
  ret
l2488:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2487 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l2486
l2485:
  mov dword [ tmp2484 ], 1
  mov dword [ tmp2417 ], 102
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2491 ], eax
  cmp dword [ tmp2491 ], 0
  jnz l2505
  mov dword [ tmp2417 ], 104
  mov [ tmp2426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2417 ]
  mov [ tmp2426 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2426 ]
  lea  r8 , [ tmp2416 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2416 + Variant_t.value]
  mov dword [ tmp2484 ], eax
l2505:
  cmp dword [ tmp2484 ], 0
  jz l2506
  lea  rcx , [ valuesMap ]
  call  __MOLD_VariantMapCreate
l2506:
l2507:
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l2509
l2508:
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp2416 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi
  ret
l2509:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2508 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
l2486:
l2482:
l2480:
l2477:
l2473:
l2469:
l2431:
l2421:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2416 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2418 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2426 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2465 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterBeginValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ astType ]
  call __MOLD_VariantDestroy

  add  rsp, 512
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore tmp2416
  restore tmp2417
  restore tmp2418
  restore tmp2419
  restore tmp2422
  restore tmp2424
  restore tmp2426
  restore tmp2427
  restore symbolInfo
  restore tmp2436
  restore tmp2439
  restore tmp2442
  restore tmp2445
  restore tmp2446
  restore tmp2447
  restore tmp2448
  restore tmp2457
  restore tmp2465
  restore lval
  restore rval
  restore classProto
  restore methodProto
  restore iter
  restore iterBeginValue
  restore body
  restore cond
  restore tmp2484
  restore tmp2491
  restore tmp2494
  restore tmp2496
  restore tmp2498
  restore tmp2500
  restore tmp2502
  restore childNode
  restore astType
; -----------------------------------------------
; function __ASTEvaluator_processNode$2
; -----------------------------------------------
__ASTEvaluator_processNode$2:
  ; init frame
  ; ----------
  tmp2510 EQU rbp - 24 ; 16 bytes
  valuesMap EQU rbp - 40 ; 16 bytes
  node EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [valuesMap + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2510 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ valuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesMap ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2510 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp2510 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__processNode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ valuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2510 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore node
  restore valuesMap
  restore tmp2510
; -----------------------------------------------
; function __ASTPreprocessor_constructor$2
; -----------------------------------------------
__ASTPreprocessor_constructor$2:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTPreprocessor__debug$2
; -----------------------------------------------
__ASTPreprocessor__debug$2:
  ; init frame
  ; ----------
  tmp2515 EQU rbp - 24 ; 16 bytes
  tmp2512 EQU rbp - 28 ; 4 bytes
  tmp2511 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp2515 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2512 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2512 ], eax
  setz al
  xor  al, cl
  jnz l2513
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal308 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2513:
l2514:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2515 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2511
  restore tmp2512
  restore tmp2515
; -----------------------------------------------
; function __ASTPreprocessor__processNode$2
; -----------------------------------------------
__ASTPreprocessor__processNode$2:
  ; init frame
  ; ----------
  __cse14 EQU rbp - 24 ; 16 bytes
  __cse13 EQU rbp - 40 ; 16 bytes
  selector EQU rbp - 56 ; 16 bytes
  box EQU rbp - 72 ; 16 bytes
  tmp2567 EQU rbp - 88 ; 16 bytes
  tmp2566 EQU rbp - 104 ; 16 bytes
  tmp2565 EQU rbp - 120 ; 16 bytes
  tmp2564 EQU rbp - 136 ; 16 bytes
  tmp2563 EQU rbp - 152 ; 16 bytes
  tmp2562 EQU rbp - 168 ; 16 bytes
  tmp2561 EQU rbp - 184 ; 16 bytes
  idx EQU rbp - 188 ; 4 bytes
  childrenCnt EQU rbp - 204 ; 16 bytes
  newChildren EQU rbp - 220 ; 16 bytes
  __cse12 EQU rbp - 236 ; 16 bytes
  paramsPassedCnt EQU rbp - 252 ; 16 bytes
  paramsExpectedCnt EQU rbp - 268 ; 16 bytes
  sysCallId EQU rbp - 284 ; 16 bytes
  funcName EQU rbp - 300 ; 16 bytes
  tmp2555 EQU rbp - 304 ; 4 bytes
  tmp2554 EQU rbp - 308 ; 4 bytes
  tmp2551 EQU rbp - 312 ; 4 bytes
  tmp2548 EQU rbp - 328 ; 16 bytes
  tmp2547 EQU rbp - 344 ; 16 bytes
  tmp2546 EQU rbp - 360 ; 16 bytes
  tmp2545 EQU rbp - 376 ; 16 bytes
  tmp2544 EQU rbp - 392 ; 16 bytes
  tmp2543 EQU rbp - 408 ; 16 bytes
  tmp2540 EQU rbp - 412 ; 4 bytes
  name EQU rbp - 428 ; 16 bytes
  y EQU rbp - 444 ; 16 bytes
  x EQU rbp - 460 ; 16 bytes
  tmp2535 EQU rbp - 476 ; 16 bytes
  tmp2534 EQU rbp - 492 ; 16 bytes
  tmp2533 EQU rbp - 496 ; 4 bytes
  tmp2528 EQU rbp - 500 ; 4 bytes
  tmp2525 EQU rbp - 504 ; 4 bytes
  tmp2524 EQU rbp - 520 ; 16 bytes
  tmp2521 EQU rbp - 524 ; 4 bytes
  tmp2520 EQU rbp - 540 ; 16 bytes
  tmp2519 EQU rbp - 544 ; 4 bytes
  oneChild EQU rbp - 560 ; 16 bytes
  tmp2516 EQU rbp - 576 ; 16 bytes
  children EQU rbp - 592 ; 16 bytes
  opcode EQU rbp - 608 ; 16 bytes
  node EQU rbp - 624 ; 16 bytes
  this EQU rbp - 640 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 672

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2516 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp2520 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2524 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2534 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2535 + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2543 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2544 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2545 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2546 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2547 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2548 + Variant_t.type], VARIANT_UNDEFINED
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [sysCallId + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsExpectedCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsPassedCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse12 + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2561 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2562 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2563 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2564 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2565 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2566 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2567 + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [selector + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse13 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse14 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2518
l2517:
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp2516 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPreprocessor__processNode$2
  pop rdi
  ret
l2518:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2517 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp2519 ], 400
  mov [ tmp2520 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2519 ]
  mov [ tmp2520 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2520 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2521 ], eax
  cmp dword [ tmp2521 ], 0
  jz l2522
  mov dword [ tmp2519 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2519 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2519 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2519 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2520 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2519 ], 201
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2519 ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ tmp2524 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2525 ], eax
  cmp dword [ tmp2525 ], 0
  jz l2526
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ name ]
  lea  rdx , [ __literal309 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2528 ], eax
  cmp dword [ tmp2528 ], 0
  jz l2529
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea rcx, [ name ]
  lea rdx, [ __literal50 ]
  call __MOLD_VariantMove
  mov dword [ tmp2519 ], 401
  mov [ tmp2516 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2519 ]
  mov [ tmp2516 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantStoreAtKey
l2529:
l2530:
  lea  rcx , [ name ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2528 ], eax
  cmp dword [ tmp2528 ], 0
  jz l2531
  mov dword [ tmp2519 ], 0
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2516 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2520 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2524 ]
  lea rdx, [ tmp2520 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2516 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_CALL ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx , [ tmp2516 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2524 ]
  lea rdx, [ __literal150 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2516 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2533 ], 44
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2533 ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx , [ tmp2516 ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2520 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2534 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2534 + Variant_t.value], 0
  lea  rcx, [ tmp2535 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2535 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ tmp2534 ]
  lea  r8 , [ tmp2535 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2524 ]
  lea rdx, [ tmp2520 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2516 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ children ]
  lea  rdx , [ tmp2519 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp2519 ], 4
  mov [ tmp2516 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2519 ]
  mov [ tmp2516 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __literal50 ]
  call  __MOLD_VariantStoreAtKey
l2531:
l2532:
l2526:
l2527:
  jmp l2523
l2522:
  mov dword [ tmp2519 ], 152
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2519 ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2524 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2525 ], eax
  cmp dword [ tmp2525 ], 0
  jz l2536
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ MOLD_SYSCALL_MAP ]
  lea  rdx , [ funcName ]
  lea  r8 , [ sysCallId ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sysCallId ]
  lea  rdi , [ tmp2524 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2524 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2528 ], eax
  cmp dword [ tmp2528 ], 0
  jz l2538
  mov dword [ tmp2519 ], 4096
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2519 ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2524 ]
  lea  r8 , [ paramsExpectedCnt ]
  call  __MOLD_VariantDivAsInteger
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ paramsPassedCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2524 ]
  lea  rdi , [ paramsPassedCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ paramsExpectedCnt ]
  lea  rdx , [ paramsPassedCnt ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2540 ], eax
  cmp dword [ tmp2540 ], 0
  jz l2541
  lea  rcx, [ __cse12 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ __cse12 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse12 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp2516 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*63]
  pop rdi
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramsExpectedCnt ]
  lea  rdi , [ tmp2524 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramsPassedCnt ]
  lea  rdi , [ tmp2520 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2548 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp2548 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2547 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal312 ]
  lea  rdx , [ tmp2548 ]
  lea  r8 , [ tmp2547 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2546 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2524 ]
  lea  rdx , [ tmp2547 ]
  lea  r8 , [ tmp2546 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2545 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal311 ]
  lea  rdx , [ tmp2546 ]
  lea  r8 , [ tmp2545 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2544 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ tmp2545 ]
  lea  r8 , [ tmp2544 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2543 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal310 ]
  lea  rdx , [ tmp2544 ]
  lea  r8 , [ tmp2543 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse12 ]
  lea  rdx , [ tmp2543 ]
  lea  rdi, [ tmp2516 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*11]
  pop rdi
l2541:
l2542:
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __literal150 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2519 ], 255
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2519 ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2524 ]
  lea  rdi , [ tmp2516 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2539
l2538:
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2540 ], eax
  cmp dword [ tmp2540 ], 0
  jz l2549
  mov dword [ tmp2519 ], 0
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2519 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2524 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2524 ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2519 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp2533 ], eax
  mov dword [ idx ], 1
l2552:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp2533 ]
  jge l2553
  mov dword [ tmp2555 ], 1
  mov eax, dword [ idx ]
  sub eax, dword [ tmp2555 ]
  mov dword [ tmp2554 ], eax
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp2554 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp2519 ]
  mov dword [ idx ], eax
  jmp l2552
l2553:
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey
l2549:
l2550:
l2539:
  jmp l2537
l2536:
  mov dword [ tmp2528 ], 0
  mov dword [ tmp2551 ], 203
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2551 ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2524 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2540 ], eax
  cmp dword [ tmp2540 ], 0
  jz l2556
  lea  rcx, [ tmp2535 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2535 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2551 ], 1
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2535 ]
  lea  rdx , [ tmp2551 ]
  lea  r8 , [ tmp2520 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2551 ], 20
  mov [ tmp2520 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2551 ]
  mov [ tmp2520 + Variant_t.value], rax
  lea  rcx , [ tmp2524 ]
  lea  rdx , [ tmp2520 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2528 ], eax
l2556:
  cmp dword [ tmp2528 ], 0
  jz l2557
  lea  rcx, [ __cse13 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ __cse13 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2551 ], 0
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse13 ]
  lea  rdx , [ tmp2551 ]
  lea  r8 , [ box ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2551 ], 1
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse13 ]
  lea  rdx , [ tmp2551 ]
  lea  r8 , [ tmp2520 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ selector ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ selector ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ selector ]
  lea  rdx , [ __literal313 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2516 + Variant_t.value]
  mov dword [ tmp2540 ], eax
  cmp dword [ tmp2540 ], 0
  jz l2559
  lea  rcx , [ __literal314 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2516 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2551 ], 1
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2520 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2535 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2535 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2524 ]
  lea rdx, [ tmp2535 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_SUB ]
  mov [ tmp2524 + Variant_t.value], rax
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2535 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2535 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2534 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2534 + Variant_t.value], 0
  lea  rcx, [ tmp2562 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2562 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2564 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2564 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp2563 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2563 ]
  lea rdx, [ tmp2564 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2562 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2563 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2563 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_CALL ]
  mov [ tmp2563 + Variant_t.value], rax
  lea  rcx , [ tmp2562 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2563 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2563 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2563 ]
  lea rdx, [ __literal150 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2562 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2563 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2533 ], 43
  mov [ tmp2563 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2533 ]
  mov [ tmp2563 + Variant_t.value], rax
  lea  rcx , [ tmp2562 ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2563 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2564 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2564 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2565 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2565 + Variant_t.value], 0
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ box ]
  lea  rdi , [ tmp2567 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CloneNode
  pop rdi
  lea  rcx, [ tmp2566 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2566 ]
  lea rdx, [ tmp2567 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2564 ]
  lea  rdx , [ tmp2565 ]
  lea  r8 , [ tmp2566 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2563 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2563 ]
  lea rdx, [ tmp2564 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2562 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2563 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2561 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2561 ]
  lea rdx, [ tmp2562 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2535 ]
  lea  rdx , [ tmp2534 ]
  lea  r8 , [ tmp2561 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp2534 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2534 + Variant_t.value], 1
  mov dword [ tmp2533 ], 1
  mov [ tmp2563 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2533 ]
  mov [ tmp2563 + Variant_t.value], rax
  lea  rcx, [ tmp2562 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2563 ]
  lea  rdi , [ tmp2562 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CreateNodeInteger
  pop rdi
  lea  rcx, [ tmp2561 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2561 ]
  lea rdx, [ tmp2562 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2535 ]
  lea  rdx , [ tmp2534 ]
  lea  r8 , [ tmp2561 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2524 ]
  lea rdx, [ tmp2535 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2520 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2524 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ tmp2516 ]
  lea  rdx , [ tmp2551 ]
  lea  r8 , [ tmp2520 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx , [ __literal315 ]
  call  __MOLD_PrintVariantLn
  jmp l2560
l2559:
  lea  rcx, [ __cse14 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ __cse14 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse14 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp2520 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*63]
  pop rdi
  lea  rcx, [ tmp2543 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal316 ]
  lea  rdx , [ selector ]
  lea  r8 , [ tmp2543 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse14 ]
  lea  rdx , [ tmp2543 ]
  lea  rdi, [ tmp2520 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*11]
  pop rdi
l2560:
l2557:
l2558:
l2537:
l2523:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2516 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp2520 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2524 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2534 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2535 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsExpectedCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsPassedCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse12 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2561 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2562 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2563 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2564 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2565 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2566 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ selector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse13 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse14 ]
  call __MOLD_VariantDestroy

  add  rsp, 672
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore tmp2516
  restore oneChild
  restore tmp2519
  restore tmp2520
  restore tmp2521
  restore tmp2524
  restore tmp2525
  restore tmp2528
  restore tmp2533
  restore tmp2534
  restore tmp2535
  restore x
  restore y
  restore name
  restore tmp2540
  restore tmp2543
  restore tmp2544
  restore tmp2545
  restore tmp2546
  restore tmp2547
  restore tmp2548
  restore tmp2551
  restore tmp2554
  restore tmp2555
  restore funcName
  restore sysCallId
  restore paramsExpectedCnt
  restore paramsPassedCnt
  restore __cse12
  restore newChildren
  restore childrenCnt
  restore idx
  restore tmp2561
  restore tmp2562
  restore tmp2563
  restore tmp2564
  restore tmp2565
  restore tmp2566
  restore tmp2567
  restore box
  restore selector
  restore __cse13
  restore __cse14
; -----------------------------------------------
; function __ASTPreprocessor_processNode$2
; -----------------------------------------------
__ASTPreprocessor_processNode$2:
  ; init frame
  ; ----------
  tmp2568 EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp2568 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2568 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp2568 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPreprocessor__processNode$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2568 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore tmp2568
; -----------------------------------------------
; function __ASTOptimizerConstantFolding_constructor$2
; -----------------------------------------------
__ASTOptimizerConstantFolding_constructor$2:
  ; init frame
  ; ----------
  tmp2569 EQU rbp - 24 ; 16 bytes
  app EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp2569 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp2569 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*18]
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal317 ]
  lea  r8 , [ tmp2569 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2569 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp2569
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__debug$2
; -----------------------------------------------
__ASTOptimizerConstantFolding__debug$2:
  ; init frame
  ; ----------
  tmp2574 EQU rbp - 24 ; 16 bytes
  tmp2571 EQU rbp - 28 ; 4 bytes
  tmp2570 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp2574 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2571 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2571 ], eax
  setz al
  xor  al, cl
  jnz l2572
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal318 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2572:
l2573:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2574 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2570
  restore tmp2571
  restore tmp2574
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__setToImm$3
; -----------------------------------------------
__ASTOptimizerConstantFolding__setToImm$3:
  ; init frame
  ; ----------
  newOpcode EQU rbp - 12 ; 4 bytes
  tmp2606 EQU rbp - 16 ; 4 bytes
  tmp2603 EQU rbp - 20 ; 4 bytes
  tmp2600 EQU rbp - 24 ; 4 bytes
  tmp2595 EQU rbp - 40 ; 16 bytes
  tmp2592 EQU rbp - 44 ; 4 bytes
  tmp2589 EQU rbp - 48 ; 4 bytes
  tmp2588 EQU rbp - 64 ; 16 bytes
  tmp2587 EQU rbp - 80 ; 16 bytes
  tmp2586 EQU rbp - 96 ; 16 bytes
  tmp2585 EQU rbp - 112 ; 16 bytes
  tmp2584 EQU rbp - 128 ; 16 bytes
  tmp2583 EQU rbp - 144 ; 16 bytes
  tmp2582 EQU rbp - 160 ; 16 bytes
  tmp2581 EQU rbp - 176 ; 16 bytes
  tmp2578 EQU rbp - 180 ; 4 bytes
  tmp2576 EQU rbp - 184 ; 4 bytes
  tmp2575 EQU rbp - 200 ; 16 bytes
  type EQU rbp - 216 ; 16 bytes
  value EQU rbp - 232 ; 16 bytes
  dst EQU rbp - 248 ; 16 bytes
  this EQU rbp - 264 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2575 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2581 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2582 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2583 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2584 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2585 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2586 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2587 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2588 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2595 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2576 ], 0
  lea  rcx , [ type ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2575 + Variant_t.value]
  mov dword [ tmp2578 ], eax
  cmp dword [ tmp2578 ], 0
  jz l2577
  lea  rcx , [ type ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2575 + Variant_t.value]
  mov dword [ tmp2576 ], eax
l2577:
  cmp dword [ tmp2576 ], 0
  jz l2579
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2583 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2584 ]
  lea  rdi , [ tmp2583 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp2584 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2588 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ type ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2588 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2587 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal321 ]
  lea  rdx , [ tmp2588 ]
  lea  r8 , [ tmp2587 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2586 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2584 ]
  lea  rdx , [ tmp2587 ]
  lea  r8 , [ tmp2586 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2585 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal320 ]
  lea  rdx , [ tmp2586 ]
  lea  r8 , [ tmp2585 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2582 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2583 ]
  lea  rdx , [ tmp2585 ]
  lea  r8 , [ tmp2582 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2581 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal319 ]
  lea  rdx , [ tmp2582 ]
  lea  r8 , [ tmp2581 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2581 ]
  lea  rdi , [ tmp2575 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding__debug$2
  pop rdi
  lea  rcx, [ tmp2583 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2583 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2589 ], 201
  mov [ tmp2584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2589 ]
  mov [ tmp2584 + Variant_t.value], rax
  lea  rcx , [ tmp2583 ]
  lea  rdx , [ tmp2584 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2575 + Variant_t.value]
  mov dword [ tmp2578 ], eax
  cmp dword [ tmp2578 ], 0
  jz l2590
  lea  rcx, [ tmp2583 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2583 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2583 ]
  lea  rdi , [ tmp2584 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2584 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2575 + Variant_t.value]
  mov dword [ tmp2592 ], eax
  cmp dword [ tmp2592 ], 0
  jz l2593
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2595 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2595 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2583 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2595 ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2583 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2589 ], 1
  mov [ tmp2595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2589 ]
  mov [ tmp2595 + Variant_t.value], rax
  lea  rcx , [ tmp2583 ]
  lea  rdx , [ tmp2595 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantSub
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantStoreAtKey
l2593:
l2594:
l2590:
l2591:
  lea  rcx , [ type ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2584 + Variant_t.value]
  mov dword [ tmp2578 ], eax
  cmp dword [ tmp2578 ], 0
  jz l2596
  mov dword [ newOpcode ], 5
  jmp l2597
l2596:
  lea  rcx , [ type ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2584 + Variant_t.value]
  mov dword [ tmp2592 ], eax
  cmp dword [ tmp2592 ], 0
  jz l2598
  mov dword [ newOpcode ], 1
  jmp l2599
l2598:
  lea  rcx , [ type ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2584 + Variant_t.value]
  mov dword [ tmp2600 ], eax
  cmp dword [ tmp2600 ], 0
  jz l2601
  mov dword [ newOpcode ], 3
  jmp l2602
l2601:
  lea  rcx , [ type ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2584 + Variant_t.value]
  mov dword [ tmp2603 ], eax
  cmp dword [ tmp2603 ], 0
  jz l2604
  mov dword [ newOpcode ], 4
  jmp l2605
l2604:
  lea  rcx , [ type ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2584 + Variant_t.value]
  mov dword [ tmp2606 ], eax
  cmp dword [ tmp2606 ], 0
  jz l2607
  mov dword [ newOpcode ], 8
  jmp l2608
l2607:
  mov dword [ newOpcode ], -1
  lea  rcx, [ tmp2581 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal324 ]
  lea  rdx , [ type ]
  lea  r8 , [ tmp2581 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2581 ]
  lea  rdi , [ tmp2584 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2608:
l2605:
l2602:
l2599:
l2597:
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2584 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ dst ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newOpcode ]
  mov [ tmp2584 + Variant_t.value], rax
  lea  rcx , [ dst ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ dst ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey
l2579:
l2580:

  ; clean frame
  ; -----------
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2583 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2595 ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore dst
  restore value
  restore type
  restore tmp2575
  restore tmp2576
  restore tmp2578
  restore tmp2581
  restore tmp2582
  restore tmp2583
  restore tmp2584
  restore tmp2585
  restore tmp2586
  restore tmp2587
  restore tmp2588
  restore tmp2589
  restore tmp2592
  restore tmp2595
  restore tmp2600
  restore tmp2603
  restore tmp2606
  restore newOpcode
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__processNodeArray$2
; -----------------------------------------------
__ASTOptimizerConstantFolding__processNodeArray$2:
  ; init frame
  ; ----------
  __cse15 EQU rbp - 24 ; 16 bytes
  tmp2617 EQU rbp - 28 ; 4 bytes
  tmp2616 EQU rbp - 44 ; 16 bytes
  tmp2615 EQU rbp - 48 ; 4 bytes
  tmp2611 EQU rbp - 52 ; 4 bytes
  tmp2610 EQU rbp - 56 ; 4 bytes
  tmp2609 EQU rbp - 72 ; 16 bytes
  childrenCnt EQU rbp - 88 ; 16 bytes
  children EQU rbp - 104 ; 16 bytes
  idx EQU rbp - 108 ; 4 bytes
  isImm EQU rbp - 124 ; 16 bytes
  newValue EQU rbp - 140 ; 16 bytes
  node EQU rbp - 156 ; 16 bytes
  this EQU rbp - 172 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [isImm + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2609 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2616 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse15 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValue ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp2610 ], 1
  mov eax, dword [ tmp2610 ]
  mov [ isImm + Variant_t.type], VARIANT_BOOLEAN
  mov [ isImm + Variant_t.value], rax
  mov dword [ idx ], 0
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
l2612:
  mov dword [ tmp2610 ], 0
  mov dword [ tmp2615 ], 1
  mov eax, dword [ tmp2615 ]
  mov [ tmp2616 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2616 + Variant_t.value], rax
  lea  rcx , [ isImm ]
  lea  rdx , [ tmp2616 ]
  lea  r8 , [ tmp2609 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2609 + Variant_t.value]
  mov dword [ tmp2615 ], eax
  cmp dword [ tmp2615 ], 0
  jz l2614
  mov [ tmp2616 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ idx ]
  mov [ tmp2616 + Variant_t.value], rax
  lea  rcx , [ tmp2616 ]
  lea  rdx , [ childrenCnt ]
  lea  r8 , [ tmp2609 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2609 + Variant_t.value]
  mov dword [ tmp2610 ], eax
l2614:
  cmp dword [ tmp2610 ], 0
  jz l2613
  lea  rcx, [ __cse15 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ __cse15 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2609 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __cse15 ]
  lea  rdi , [ tmp2609 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$2
  pop rdi
  lea  rcx, [ tmp2609 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse15 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2609 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newValue ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2609 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp2609 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse15 ]
  lea  rdi , [ tmp2609 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  lea  rcx, [ isImm ]
  call __MOLD_VariantDestroy
  lea rcx, [ isImm ]
  lea rdx, [ tmp2609 ]
  call __MOLD_VariantMove
  mov dword [ tmp2617 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp2617 ]
  mov dword [ idx ], eax
  jmp l2612
l2613:
  mov dword [ tmp2615 ], 1
  mov eax, dword [ tmp2615 ]
  mov [ tmp2616 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2616 + Variant_t.value], rax
  lea  rcx , [ isImm ]
  lea  rdx , [ tmp2616 ]
  lea  r8 , [ tmp2609 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2609 + Variant_t.value]
  mov dword [ tmp2615 ], eax
  cmp dword [ tmp2615 ], 0
  jz l2618
  lea  rcx, [ tmp2609 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ newValue ]
  lea  rdi , [ tmp2609 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding__setToImm$3
  pop rdi
l2618:
l2619:

  ; clean frame
  ; -----------
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isImm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2609 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse15 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore node
  restore newValue
  restore isImm
  restore idx
  restore children
  restore childrenCnt
  restore tmp2609
  restore tmp2610
  restore tmp2611
  restore tmp2615
  restore tmp2616
  restore tmp2617
  restore __cse15
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__processNodeMap$2
; -----------------------------------------------
__ASTOptimizerConstantFolding__processNodeMap$2:
  ; init frame
  ; ----------
  nodeValue EQU rbp - 24 ; 16 bytes
  nodeKey EQU rbp - 40 ; 16 bytes
  tmp2631 EQU rbp - 56 ; 16 bytes
  tmp2629 EQU rbp - 60 ; 4 bytes
  tmp2628 EQU rbp - 76 ; 16 bytes
  tmp2627 EQU rbp - 80 ; 4 bytes
  tmp2626 EQU rbp - 84 ; 4 bytes
  tmp2622 EQU rbp - 88 ; 4 bytes
  tmp2621 EQU rbp - 92 ; 4 bytes
  tmp2620 EQU rbp - 108 ; 16 bytes
  childrenCnt EQU rbp - 124 ; 16 bytes
  children EQU rbp - 140 ; 16 bytes
  idx EQU rbp - 144 ; 4 bytes
  isImm EQU rbp - 148 ; 4 bytes
  newValue EQU rbp - 164 ; 16 bytes
  node EQU rbp - 180 ; 16 bytes
  this EQU rbp - 196 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2620 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2628 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2631 + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeKey + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeValue + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValue ]
  call  __MOLD_VariantMapCreate
  mov dword [ isImm ], 1
  mov dword [ idx ], 0
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
l2623:
  mov dword [ tmp2621 ], 0
  mov dword [ tmp2627 ], 1
  xor  eax, eax
  or   dword [ isImm ], eax
  setz cl
  or   dword [ tmp2627 ], eax
  setz al
  xor  al, cl
  jnz l2625
  mov [ tmp2628 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ idx ]
  mov [ tmp2628 + Variant_t.value], rax
  lea  rcx , [ tmp2628 ]
  lea  rdx , [ childrenCnt ]
  lea  r8 , [ tmp2620 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2620 + Variant_t.value]
  mov dword [ tmp2621 ], eax
l2625:
  cmp dword [ tmp2621 ], 0
  jz l2624
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ nodeKey ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2629 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp2629 ]
  mov dword [ tmp2622 ], eax
  lea  rcx, [ nodeValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2622 ]
  lea  r8 , [ nodeValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2620 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ nodeKey ]
  lea  rdi , [ tmp2620 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$2
  pop rdi
  lea  rcx, [ tmp2620 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ nodeValue ]
  lea  rdi , [ tmp2620 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$2
  pop rdi
  mov dword [ tmp2626 ], 0
  lea  rcx, [ tmp2628 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeKey ]
  lea  rdi , [ tmp2628 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2627 ], 1
  mov eax, dword [ tmp2627 ]
  mov [ tmp2631 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2631 + Variant_t.value], rax
  lea  rcx , [ tmp2628 ]
  lea  rdx , [ tmp2631 ]
  lea  r8 , [ tmp2620 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2620 + Variant_t.value]
  mov dword [ tmp2627 ], eax
  cmp dword [ tmp2627 ], 0
  jz l2630
  lea  rcx, [ tmp2631 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeValue ]
  lea  rdi , [ tmp2631 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2627 ], 1
  mov eax, dword [ tmp2627 ]
  mov [ tmp2628 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2628 + Variant_t.value], rax
  lea  rcx , [ tmp2631 ]
  lea  rdx , [ tmp2628 ]
  lea  r8 , [ tmp2620 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2620 + Variant_t.value]
  mov dword [ tmp2626 ], eax
l2630:
  cmp dword [ tmp2626 ], 0
  jz l2632
  lea  rcx, [ tmp2620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeKey ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2620 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2628 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeValue ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2628 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newValue ]
  lea  rdx , [ tmp2620 ]
  lea  r8 , [ tmp2628 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2633
l2632:
  mov dword [ isImm ], 0
l2633:
  mov dword [ tmp2629 ], 2
  mov eax, dword [ idx ]
  add eax, dword [ tmp2629 ]
  mov dword [ idx ], eax
  jmp l2623
l2624:
  mov dword [ tmp2627 ], 1
  xor  eax, eax
  or   dword [ isImm ], eax
  setz cl
  or   dword [ tmp2627 ], eax
  setz al
  xor  al, cl
  jnz l2634
  lea  rcx, [ tmp2628 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ newValue ]
  lea  rdi , [ tmp2628 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding__setToImm$3
  pop rdi
l2634:
l2635:

  ; clean frame
  ; -----------
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2620 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2628 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2631 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeValue ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore node
  restore newValue
  restore isImm
  restore idx
  restore children
  restore childrenCnt
  restore tmp2620
  restore tmp2621
  restore tmp2622
  restore tmp2626
  restore tmp2627
  restore tmp2628
  restore tmp2629
  restore tmp2631
  restore nodeKey
  restore nodeValue
; -----------------------------------------------
; function __ASTOptimizerConstantFolding_processNode$2
; -----------------------------------------------
__ASTOptimizerConstantFolding_processNode$2:
  ; init frame
  ; ----------
  astType EQU rbp - 24 ; 16 bytes
  xValue EQU rbp - 40 ; 16 bytes
  sysCallId EQU rbp - 56 ; 16 bytes
  oneChild EQU rbp - 72 ; 16 bytes
  lastWasImm EQU rbp - 76 ; 4 bytes
  newParams EQU rbp - 92 ; 16 bytes
  __cse18 EQU rbp - 108 ; 16 bytes
  symbolInfo EQU rbp - 124 ; 16 bytes
  __cse17 EQU rbp - 140 ; 16 bytes
  __cse16 EQU rbp - 156 ; 16 bytes
  tmp EQU rbp - 172 ; 16 bytes
  idx EQU rbp - 176 ; 4 bytes
  startIdx EQU rbp - 180 ; 4 bytes
  tmp2802 EQU rbp - 184 ; 4 bytes
  tmp2796 EQU rbp - 188 ; 4 bytes
  tmp2792 EQU rbp - 192 ; 4 bytes
  tmp2787 EQU rbp - 196 ; 4 bytes
  tmp2782 EQU rbp - 200 ; 4 bytes
  tmp2777 EQU rbp - 204 ; 4 bytes
  tmp2774 EQU rbp - 208 ; 4 bytes
  tmp2771 EQU rbp - 212 ; 4 bytes
  tmp2768 EQU rbp - 216 ; 4 bytes
  tmp2765 EQU rbp - 220 ; 4 bytes
  tmp2746 EQU rbp - 224 ; 4 bytes
  tmp2743 EQU rbp - 228 ; 4 bytes
  tmp2740 EQU rbp - 232 ; 4 bytes
  tmp2711 EQU rbp - 248 ; 16 bytes
  tmp2710 EQU rbp - 264 ; 16 bytes
  tmp2709 EQU rbp - 280 ; 16 bytes
  tmp2708 EQU rbp - 296 ; 16 bytes
  tmp2707 EQU rbp - 312 ; 16 bytes
  tmp2693 EQU rbp - 316 ; 4 bytes
  tmp2681 EQU rbp - 320 ; 4 bytes
  tmp2675 EQU rbp - 324 ; 4 bytes
  tmp2673 EQU rbp - 328 ; 4 bytes
  tmp2669 EQU rbp - 332 ; 4 bytes
  tmp2659 EQU rbp - 336 ; 4 bytes
  tmp2656 EQU rbp - 352 ; 16 bytes
  tmp2655 EQU rbp - 356 ; 4 bytes
  tmp2651 EQU rbp - 360 ; 4 bytes
  tmp2646 EQU rbp - 364 ; 4 bytes
  tmp2641 EQU rbp - 368 ; 4 bytes
  tmp2640 EQU rbp - 384 ; 16 bytes
  tmp2638 EQU rbp - 388 ; 4 bytes
  tmp2637 EQU rbp - 404 ; 16 bytes
  tmp2636 EQU rbp - 408 ; 4 bytes
  areArgsImm EQU rbp - 412 ; 4 bytes
  y EQU rbp - 428 ; 16 bytes
  x EQU rbp - 444 ; 16 bytes
  childrenCnt EQU rbp - 460 ; 16 bytes
  children EQU rbp - 476 ; 16 bytes
  newValue EQU rbp - 492 ; 16 bytes
  value EQU rbp - 508 ; 16 bytes
  opcode EQU rbp - 524 ; 16 bytes
  isNodeChanged EQU rdi
  node EQU rbp - 540 ; 16 bytes
  this EQU rbp - 556 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 592

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2637 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2640 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2656 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2707 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2708 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2709 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2710 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2711 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse16 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse17 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse18 + Variant_t.type], VARIANT_UNDEFINED
  mov [newParams + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [sysCallId + Variant_t.type], VARIANT_UNDEFINED
  mov [xValue + Variant_t.type], VARIANT_UNDEFINED
  mov [astType + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2636 ], 0
  mov eax, dword [ tmp2636 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal325 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2638 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2638 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2638 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2638 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ areArgsImm ], 1
  mov dword [ tmp2636 ], 1
  mov dword [ tmp2638 ], 152
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2638 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2641 ], eax
  cmp dword [ tmp2641 ], 0
  jnz l2639
  lea  rcx , [ value ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2636 ], eax
l2639:
  cmp dword [ tmp2636 ], 0
  jz l2642
  mov dword [ tmp2638 ], 9
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2638 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2641 ], eax
  cmp dword [ tmp2641 ], 0
  jz l2644
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp2640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2646 ], eax
  cmp dword [ tmp2646 ], 0
  jz l2647
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding__processNodeArray$2
  pop rdi
l2647:
l2648:
  jmp l2645
l2644:
  mov dword [ tmp2638 ], 10
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2638 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2646 ], eax
  cmp dword [ tmp2646 ], 0
  jz l2649
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp2640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2651 ], eax
  cmp dword [ tmp2651 ], 0
  jz l2652
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding__processNodeMap$2
  pop rdi
l2652:
l2653:
  jmp l2650
l2649:
  mov dword [ startIdx ], 0
  mov dword [ tmp2651 ], 0
  mov dword [ tmp2638 ], 205
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2638 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2655 ], eax
  cmp dword [ tmp2655 ], 0
  jz l2654
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2638 ], 201
  mov [ tmp2656 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2638 ]
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2656 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2651 ], eax
l2654:
  cmp dword [ tmp2651 ], 0
  jz l2657
  mov dword [ startIdx ], 1
l2657:
l2658:
  mov dword [ tmp2638 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp2659 ], eax
  mov eax, dword [ startIdx ]
  mov dword [ idx ], eax
l2660:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp2659 ]
  jge l2661
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2656 ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNodeUntilNotChanged$2
  pop rdi
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2640 ]
  lea  rdi , [ tmp2656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2651 ], 0
  mov eax, dword [ tmp2651 ]
  mov [ tmp2640 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2651 ], eax
  cmp dword [ tmp2651 ], 0
  jz l2662
  mov dword [ areArgsImm ], 0
l2662:
l2663:
  mov eax, dword [ idx ]
  add eax, dword [ tmp2638 ]
  mov dword [ idx ], eax
  jmp l2660
l2661:
  mov dword [ tmp2651 ], 1
  mov dword [ tmp2659 ], 304
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2655 ], eax
  cmp dword [ tmp2655 ], 0
  jnz l2664
  mov dword [ tmp2659 ], 302
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2651 ], eax
l2664:
  cmp dword [ tmp2651 ], 0
  jz l2665
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2655 ], eax
  cmp dword [ tmp2655 ], 0
  jz l2667
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 1
  lea  rcx, [ tmp ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2659 ]
  lea  r8 , [ tmp ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 1
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2638 ], 0
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2638 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ tmp2659 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 0
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2659 ]
  lea  r8 , [ tmp ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp2669 ], 1
  mov eax, dword [ tmp2669 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
l2667:
l2668:
  jmp l2666
l2665:
  mov dword [ tmp2659 ], 201
  mov [ tmp2637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2655 ], eax
  cmp dword [ tmp2655 ], 0
  jz l2670
  lea  rcx, [ __cse16 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ __cse16 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2669 ], 0
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse16 ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2672
  mov dword [ tmp2673 ], 0
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse16 ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2675 ], eax
  cmp dword [ tmp2675 ], 0
  jz l2674
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse16 ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2675 ], 1
  mov eax, dword [ tmp2675 ]
  mov [ tmp2656 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ tmp2656 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2673 ], eax
l2674:
  mov eax, dword [ tmp2673 ]
  mov dword [ tmp2669 ], eax
l2672:
  cmp dword [ tmp2669 ], 0
  jz l2676
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2637 ]
  lea  rdi , [ tmp2656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2678
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse17 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __cse17 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2675 ], 0
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse17 ]
  lea  rdi , [ tmp2656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jz l2680
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse17 ]
  lea  rdi , [ tmp2656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2675 ], eax
l2680:
  cmp dword [ tmp2675 ], 0
  jz l2682
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal317 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp2656 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2681 ], 0
  mov eax, dword [ tmp2681 ]
  mov [ tmp2637 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2637 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jz l2684
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2684:
l2685:
l2682:
l2683:
l2678:
l2679:
l2676:
l2677:
  mov dword [ tmp2669 ], 0
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2686
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal317 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp2637 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp2673 ], 1
  mov eax, dword [ tmp2673 ]
  mov [ tmp2656 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ tmp2656 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2669 ], eax
l2686:
  cmp dword [ tmp2669 ], 0
  jz l2687
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal317 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp2640 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2640 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 1
  mov [ tmp2637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2637 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2689
  lea  rcx, [ __cse18 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __cse18 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2675 ], 1
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse18 ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jnz l2691
  mov dword [ tmp2681 ], 1
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse18 ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2693 ], eax
  cmp dword [ tmp2693 ], 0
  jnz l2692
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse18 ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
l2692:
  mov eax, dword [ tmp2681 ]
  mov dword [ tmp2675 ], eax
l2691:
  cmp dword [ tmp2675 ], 0
  jz l2694
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2694:
l2695:
l2689:
l2690:
l2687:
l2688:
  jmp l2671
l2670:
  mov dword [ tmp2669 ], 0
  mov dword [ tmp2659 ], 152
  mov [ tmp2637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2696
  lea  rcx , [ value ]
  lea  rdx , [ __literal45 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2669 ], eax
l2696:
  cmp dword [ tmp2669 ], 0
  jz l2697
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  call  __MOLD_VariantArrayCreate
  mov dword [ lastWasImm ], 0
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2700
l2699:
  mov dword [ tmp2673 ], 1
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 100
  mov [ tmp2656 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2675 ], eax
  cmp dword [ tmp2675 ], 0
  jnz l2701
  mov dword [ tmp2675 ], 1
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 9
  mov [ tmp2637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2637 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jnz l2702
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 10
  mov [ tmp2656 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ tmp2656 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2675 ], eax
l2702:
  mov eax, dword [ tmp2675 ]
  mov dword [ tmp2673 ], eax
l2701:
  cmp dword [ tmp2673 ], 0
  jz l2703
  mov dword [ lastWasImm ], 0
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newParams ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp2640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  jmp l2704
l2703:
  mov dword [ tmp2681 ], 1
  xor  eax, eax
  or   dword [ lastWasImm ], eax
  setz cl
  or   dword [ tmp2681 ], eax
  setz al
  xor  al, cl
  jnz l2705
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newParams ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2659 ], 1
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp2656 + Variant_t.value]
  mov dword [ tmp2659 ], eax
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp2659 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2709 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newParams ]
  lea  rdi , [ tmp2709 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2659 ], 1
  mov [ tmp2710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2710 + Variant_t.value], rax
  lea  rcx , [ tmp2709 ]
  lea  rdx , [ tmp2710 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2659 ], eax
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp2659 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2637 ]
  lea  rdi , [ tmp2707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2711 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal326 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2711 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2708 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2711 ]
  lea  r8 , [ tmp2708 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2708 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2706
l2705:
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 4
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jz l2712
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newParams ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp2640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  jmp l2713
l2712:
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2656 ]
  lea  rdi , [ tmp2707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ tmp2707 ]
  lea  rdi , [ tmp2640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding__setToImm$3
  pop rdi
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newParams ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp2640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
l2713:
l2706:
  mov dword [ lastWasImm ], 1
l2704:
  ret
l2700:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2699 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newParams ]
  call  __MOLD_VariantStoreAtKey
  jmp l2698
l2697:
  mov dword [ tmp2673 ], 0
  mov dword [ tmp2675 ], 1
  mov dword [ tmp2659 ], 203
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jnz l2715
  mov dword [ tmp2659 ], 204
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2675 ], eax
l2715:
  cmp dword [ tmp2675 ], 0
  jz l2714
  mov dword [ tmp2675 ], 0
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 201
  mov [ tmp2656 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2656 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jz l2716
  mov dword [ tmp2681 ], 0
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 5
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2693 ], eax
  cmp dword [ tmp2693 ], 0
  jz l2717
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2693 ], 1
  mov eax, dword [ tmp2693 ]
  mov [ tmp2656 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2656 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
l2717:
  mov eax, dword [ tmp2681 ]
  mov dword [ tmp2675 ], eax
l2716:
  mov eax, dword [ tmp2675 ]
  mov dword [ tmp2673 ], eax
l2714:
  cmp dword [ tmp2673 ], 0
  jz l2718
  mov dword [ tmp2659 ], 203
  mov [ tmp2656 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2656 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2656 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2675 ], eax
  cmp dword [ tmp2675 ], 0
  jz l2720
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2659 ], eax
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2659 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2721
l2720:
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2721:
  mov dword [ tmp2675 ], 0
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jz l2722
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2675 ], eax
l2722:
  cmp dword [ tmp2675 ], 0
  jz l2723
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2637 ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2656 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 1
  mov [ tmp2637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2637 + Variant_t.value], rax
  lea  rcx , [ tmp2656 ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantSub
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantStoreAtKey
l2723:
l2724:
l2718:
l2719:
l2698:
l2671:
l2666:
  mov dword [ tmp2655 ], 1
  xor  eax, eax
  or   dword [ areArgsImm ], eax
  setz cl
  or   dword [ tmp2655 ], eax
  setz al
  xor  al, cl
  jnz l2725
  mov dword [ tmp2659 ], 152
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2655 ], eax
  cmp dword [ tmp2655 ], 0
  jz l2727
  mov dword [ tmp2669 ], 0
  lea  rcx , [ value ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2729
  mov dword [ tmp2659 ], 1
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2669 ], eax
l2729:
  cmp dword [ tmp2669 ], 0
  jz l2730
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ sysCallId ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ xValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ xValue ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 31
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2732
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  jmp l2733
l2732:
  mov dword [ tmp2659 ], 32
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2675 ], eax
  cmp dword [ tmp2675 ], 0
  jz l2734
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  32
  call  __MOLD_SysCall
  pop rdi
  jmp l2735
l2734:
  mov dword [ tmp2659 ], 33
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jz l2736
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  33
  call  __MOLD_SysCall
  pop rdi
  jmp l2737
l2736:
  mov dword [ tmp2659 ], 34
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2693 ], eax
  cmp dword [ tmp2693 ], 0
  jz l2738
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  34
  call  __MOLD_SysCall
  pop rdi
  jmp l2739
l2738:
  mov dword [ tmp2659 ], 42
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2740 ], eax
  cmp dword [ tmp2740 ], 0
  jz l2741
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  jmp l2742
l2741:
  mov dword [ tmp2659 ], 43
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2743 ], eax
  cmp dword [ tmp2743 ], 0
  jz l2744
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  jmp l2745
l2744:
  mov dword [ tmp2659 ], 44
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2746 ], eax
  cmp dword [ tmp2746 ], 0
  jz l2747
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
l2747:
l2748:
l2745:
l2742:
l2739:
l2737:
l2735:
l2733:
l2730:
l2731:
  jmp l2728
l2727:
  mov dword [ tmp2659 ], 301
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2669 ], eax
  cmp dword [ tmp2669 ], 0
  jz l2749
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ newValue ]
  call  __MOLD_VariantNeg
  jmp l2750
l2749:
  mov dword [ tmp2659 ], 2
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2751
  mov dword [ tmp2659 ], 302
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2675 ], eax
  cmp dword [ tmp2675 ], 0
  jz l2753
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantAdd
  jmp l2754
l2753:
  mov dword [ tmp2659 ], 350
  mov [ tmp2637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2707 + Variant_t.value]
  mov dword [ tmp2681 ], eax
  cmp dword [ tmp2681 ], 0
  jz l2755
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2637 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin
  jmp l2756
l2755:
  mov dword [ tmp2659 ], 303
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2693 ], eax
  cmp dword [ tmp2693 ], 0
  jz l2757
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantSub
  jmp l2758
l2757:
  mov dword [ tmp2659 ], 304
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2740 ], eax
  cmp dword [ tmp2740 ], 0
  jz l2759
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantMul
  jmp l2760
l2759:
  mov dword [ tmp2659 ], 305
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2743 ], eax
  cmp dword [ tmp2743 ], 0
  jz l2761
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantDiv
  jmp l2762
l2761:
  mov dword [ tmp2659 ], 308
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2746 ], eax
  cmp dword [ tmp2746 ], 0
  jz l2763
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantDivAsInteger
  jmp l2764
l2763:
  mov dword [ tmp2659 ], 400
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2765 ], eax
  cmp dword [ tmp2765 ], 0
  jz l2766
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantCompareEQ
  jmp l2767
l2766:
  mov dword [ tmp2659 ], 401
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2768 ], eax
  cmp dword [ tmp2768 ], 0
  jz l2769
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantCompareNE
  jmp l2770
l2769:
  mov dword [ tmp2659 ], 404
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2771 ], eax
  cmp dword [ tmp2771 ], 0
  jz l2772
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2774 ], eax
  cmp dword [ tmp2774 ], 0
  jz l2775
  mov dword [ tmp2777 ], 1
  mov eax, dword [ tmp2777 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2776
l2775:
  mov dword [ tmp2777 ], 0
  mov eax, dword [ tmp2777 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2776:
  jmp l2773
l2772:
  mov dword [ tmp2659 ], 405
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2774 ], eax
  cmp dword [ tmp2774 ], 0
  jz l2778
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2777 ], eax
  cmp dword [ tmp2777 ], 0
  jz l2780
  mov dword [ tmp2782 ], 1
  mov eax, dword [ tmp2782 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2781
l2780:
  mov dword [ tmp2782 ], 0
  mov eax, dword [ tmp2782 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2781:
  jmp l2779
l2778:
  mov dword [ tmp2659 ], 402
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2777 ], eax
  cmp dword [ tmp2777 ], 0
  jz l2783
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2782 ], eax
  cmp dword [ tmp2782 ], 0
  jz l2785
  mov dword [ tmp2787 ], 1
  mov eax, dword [ tmp2787 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2786
l2785:
  mov dword [ tmp2787 ], 0
  mov eax, dword [ tmp2787 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2786:
  jmp l2784
l2783:
  mov dword [ tmp2659 ], 403
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2782 ], eax
  cmp dword [ tmp2782 ], 0
  jz l2788
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2787 ], eax
  cmp dword [ tmp2787 ], 0
  jz l2790
  mov dword [ tmp2792 ], 1
  mov eax, dword [ tmp2792 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2791
l2790:
  mov dword [ tmp2792 ], 0
  mov eax, dword [ tmp2792 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2791:
  jmp l2789
l2788:
  mov dword [ tmp2659 ], 500
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2787 ], eax
  cmp dword [ tmp2787 ], 0
  jz l2793
  mov dword [ tmp2792 ], 0
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2796 ], 1
  mov eax, dword [ tmp2796 ]
  mov [ tmp2640 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2796 ], eax
  cmp dword [ tmp2796 ], 0
  jz l2795
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2796 ], 1
  mov eax, dword [ tmp2796 ]
  mov [ tmp2707 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2792 ], eax
l2795:
  cmp dword [ tmp2792 ], 0
  jz l2797
  mov dword [ tmp2796 ], 1
  mov eax, dword [ tmp2796 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2798
l2797:
  mov dword [ tmp2796 ], 0
  mov eax, dword [ tmp2796 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2798:
  jmp l2794
l2793:
  mov dword [ tmp2659 ], 501
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2792 ], eax
  cmp dword [ tmp2792 ], 0
  jz l2799
  mov dword [ tmp2796 ], 1
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2802 ], 1
  mov eax, dword [ tmp2802 ]
  mov [ tmp2640 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2802 ], eax
  cmp dword [ tmp2802 ], 0
  jnz l2801
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2802 ], 1
  mov eax, dword [ tmp2802 ]
  mov [ tmp2707 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2796 ], eax
l2801:
  cmp dword [ tmp2796 ], 0
  jz l2803
  mov dword [ tmp2802 ], 1
  mov eax, dword [ tmp2802 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2804
l2803:
  mov dword [ tmp2802 ], 0
  mov eax, dword [ tmp2802 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2804:
  jmp l2800
l2799:
  mov dword [ tmp2659 ], 203
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2796 ], eax
  cmp dword [ tmp2796 ], 0
  jz l2805
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp2640 + Variant_t.value]
  mov dword [ tmp2659 ], eax
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2659 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2806
l2805:
  mov dword [ tmp2659 ], 204
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2802 ], eax
  cmp dword [ tmp2802 ], 0
  jz l2807
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2707 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2807:
l2808:
l2806:
l2800:
l2794:
l2789:
l2784:
l2779:
l2773:
l2770:
l2767:
l2764:
l2762:
l2760:
l2758:
l2756:
l2754:
l2751:
l2752:
l2750:
l2728:
  jmp l2726
l2725:
  mov dword [ tmp2655 ], 0
  mov dword [ tmp2659 ], 152
  mov [ tmp2640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2640 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2640 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2669 ], eax
  cmp dword [ tmp2669 ], 0
  jz l2809
  mov dword [ tmp2669 ], 0
  lea  rcx , [ value ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2673 ], eax
  cmp dword [ tmp2673 ], 0
  jz l2810
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2640 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2659 ], 44
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ tmp2640 ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2669 ], eax
l2810:
  mov eax, dword [ tmp2669 ]
  mov dword [ tmp2655 ], eax
l2809:
  cmp dword [ tmp2655 ], 0
  jz l2811
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ astType ]
  call __MOLD_VariantDestroy
  lea rcx, [ astType ]
  lea rdx, [ tmp2637 ]
  call __MOLD_VariantMove
  mov dword [ tmp2659 ], -1
  mov [ tmp2707 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2659 ]
  mov [ tmp2707 + Variant_t.value], rax
  lea  rcx , [ astType ]
  lea  rdx , [ tmp2707 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2669 ], eax
  cmp dword [ tmp2669 ], 0
  jz l2813
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astType ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValue ]
  lea rdx, [ tmp2637 ]
  call __MOLD_VariantMove
l2813:
l2814:
l2811:
l2812:
l2726:
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2707 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2707 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2637 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2637 + Variant_t.value]
  mov dword [ tmp2651 ], eax
  cmp dword [ tmp2651 ], 0
  jz l2815
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ newValue ]
  lea  rdi , [ tmp2637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding__setToImm$3
  pop rdi
  mov dword [ tmp2655 ], 1
  mov eax, dword [ tmp2655 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
  jmp l2816
l2815:
  mov dword [ tmp2655 ], 0
  mov eax, dword [ tmp2655 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
l2816:
l2650:
l2645:
l2642:
l2643:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2637 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2640 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2656 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2707 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2709 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2710 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse16 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse17 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse18 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astType ]
  call __MOLD_VariantDestroy

  add  rsp, 592
  pop  rbp
  ret

  restore this
  restore node
  restore isNodeChanged
  restore opcode
  restore value
  restore newValue
  restore children
  restore childrenCnt
  restore x
  restore y
  restore areArgsImm
  restore tmp2636
  restore tmp2637
  restore tmp2638
  restore tmp2640
  restore tmp2641
  restore tmp2646
  restore tmp2651
  restore tmp2655
  restore tmp2656
  restore tmp2659
  restore tmp2669
  restore tmp2673
  restore tmp2675
  restore tmp2681
  restore tmp2693
  restore tmp2707
  restore tmp2708
  restore tmp2709
  restore tmp2710
  restore tmp2711
  restore tmp2740
  restore tmp2743
  restore tmp2746
  restore tmp2765
  restore tmp2768
  restore tmp2771
  restore tmp2774
  restore tmp2777
  restore tmp2782
  restore tmp2787
  restore tmp2792
  restore tmp2796
  restore tmp2802
  restore startIdx
  restore idx
  restore tmp
  restore __cse16
  restore __cse17
  restore symbolInfo
  restore __cse18
  restore newParams
  restore lastWasImm
  restore oneChild
  restore sysCallId
  restore xValue
  restore astType
; -----------------------------------------------
; function __ASTOptimizerConstantFolding_processNodeUntilNotChanged$2
; -----------------------------------------------
__ASTOptimizerConstantFolding_processNodeUntilNotChanged$2:
  ; init frame
  ; ----------
  tmp2823 EQU rbp - 12 ; 4 bytes
  tmp2822 EQU rbp - 28 ; 16 bytes
  tmp2821 EQU rbp - 44 ; 16 bytes
  tmp2818 EQU rbp - 60 ; 16 bytes
  tmp2817 EQU rbp - 64 ; 4 bytes
  isAnyChangedDone EQU rdi
  node EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp2818 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2821 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2822 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2817 ], 0
  mov eax, dword [ tmp2817 ]
  mov [ isAnyChangedDone + Variant_t.type], VARIANT_BOOLEAN
  mov [ isAnyChangedDone + Variant_t.value], rax
l2819:
  lea  rcx, [ tmp2821 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp2821 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$2
  pop rdi
  mov dword [ tmp2817 ], 1
  mov eax, dword [ tmp2817 ]
  mov [ tmp2822 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2822 + Variant_t.value], rax
  lea  rcx , [ tmp2821 ]
  lea  rdx , [ tmp2822 ]
  lea  r8 , [ tmp2818 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2818 + Variant_t.value]
  mov dword [ tmp2817 ], eax
  cmp dword [ tmp2817 ], 0
  jz l2820
  mov dword [ tmp2823 ], 1
  mov eax, dword [ tmp2823 ]
  mov [ isAnyChangedDone + Variant_t.type], VARIANT_BOOLEAN
  mov [ isAnyChangedDone + Variant_t.value], rax
  jmp l2819
l2820:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2818 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2821 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2822 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore node
  restore isAnyChangedDone
  restore tmp2817
  restore tmp2818
  restore tmp2821
  restore tmp2822
  restore tmp2823
; -----------------------------------------------
; function __ASTOptimizerCSE_constructor$2
; -----------------------------------------------
__ASTOptimizerCSE_constructor$2:
  ; init frame
  ; ----------
  tmp2825 EQU rbp - 24 ; 16 bytes
  tmp2824 EQU rbp - 28 ; 4 bytes
  app EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp2825 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2824 ], 0
  mov [ tmp2825 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2824 ]
  mov [ tmp2825 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal327 ]
  lea  r8 , [ tmp2825 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2825 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp2824
  restore tmp2825
; -----------------------------------------------
; function __ASTOptimizerCSE__getNextId$1
; -----------------------------------------------
__ASTOptimizerCSE__getNextId$1:
  ; init frame
  ; ----------
  tmp2828 EQU rbp - 24 ; 16 bytes
  tmp2827 EQU rbp - 28 ; 4 bytes
  tmp2826 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp2826 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2828 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal327 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2827 ], 1
  mov [ tmp2828 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2827 ]
  mov [ tmp2828 + Variant_t.value], rax
  lea  rcx , [ rv ]
  lea  rdx , [ tmp2828 ]
  lea  r8 , [ tmp2826 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal327 ]
  lea  r8 , [ tmp2826 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2826 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2828 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp2826
  restore tmp2827
  restore tmp2828
; -----------------------------------------------
; function __ASTOptimizerCSE__createNodeVariable$1
; -----------------------------------------------
__ASTOptimizerCSE__createNodeVariable$1:
  ; init frame
  ; ----------
  tmp2833 EQU rbp - 24 ; 16 bytes
  tmp2832 EQU rbp - 40 ; 16 bytes
  tmp2831 EQU rbp - 56 ; 16 bytes
  tmp2830 EQU rbp - 72 ; 16 bytes
  tmp2829 EQU rbp - 88 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp2829 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2830 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2831 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2832 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2833 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2829 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2829 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2831 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2831 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp2830 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2830 ]
  lea rdx, [ tmp2831 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2829 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2830 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2830 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_VARIABLE ]
  mov [ tmp2830 + Variant_t.value], rax
  lea  rcx , [ tmp2829 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2830 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2833 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp2833 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__getNextId$1
  pop rdi
  lea  rcx, [ tmp2831 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2833 ]
  lea  rdi , [ tmp2831 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2832 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal328 ]
  lea  rdx , [ tmp2831 ]
  lea  r8 , [ tmp2832 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2830 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2830 ]
  lea rdx, [ tmp2832 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2829 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2830 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2830 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2830 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp2829 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2830 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ rv ]
  lea rdx, [ tmp2829 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2829 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2830 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2831 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2833 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp2829
  restore tmp2830
  restore tmp2831
  restore tmp2832
  restore tmp2833
; -----------------------------------------------
; function __ASTOptimizerCSE__debug$2
; -----------------------------------------------
__ASTOptimizerCSE__debug$2:
  ; init frame
  ; ----------
  tmp2838 EQU rbp - 24 ; 16 bytes
  tmp2835 EQU rbp - 28 ; 4 bytes
  tmp2834 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp2838 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2835 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2835 ], eax
  setz al
  xor  al, cl
  jnz l2836
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal329 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2836:
l2837:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2838 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2834
  restore tmp2835
  restore tmp2838
; -----------------------------------------------
; function __ASTOptimizerCSE__processNode$4
; -----------------------------------------------
__ASTOptimizerCSE__processNode$4:
  ; init frame
  ; ----------
  deep2 EQU rbp - 24 ; 16 bytes
  deep1 EQU rbp - 40 ; 16 bytes
  __cse20 EQU rbp - 56 ; 16 bytes
  __cse19 EQU rbp - 72 ; 16 bytes
  isCseEmited EQU rbp - 76 ; 4 bytes
  newCommonBlockChildren EQU rbp - 92 ; 16 bytes
  commonBlock EQU rbp - 108 ; 16 bytes
  lastInstructionNode2 EQU rbp - 124 ; 16 bytes
  lastInstructionNode1 EQU rbp - 140 ; 16 bytes
  block2 EQU rbp - 156 ; 16 bytes
  block1 EQU rbp - 172 ; 16 bytes
  matchedNode EQU rbp - 188 ; 16 bytes
  tmp2934 EQU rbp - 204 ; 16 bytes
  tmp2933 EQU rbp - 220 ; 16 bytes
  tmp2930 EQU rbp - 224 ; 4 bytes
  tmp2926 EQU rbp - 228 ; 4 bytes
  tmp2923 EQU rbp - 232 ; 4 bytes
  tmp2920 EQU rbp - 236 ; 4 bytes
  tmp2911 EQU rbp - 240 ; 4 bytes
  tmp2910 EQU rbp - 256 ; 16 bytes
  tmp2908 EQU rbp - 260 ; 4 bytes
  tmp2906 EQU rbp - 264 ; 4 bytes
  tmp2903 EQU rbp - 268 ; 4 bytes
  tmp2902 EQU rbp - 284 ; 16 bytes
  tmp2901 EQU rbp - 300 ; 16 bytes
  tmp2900 EQU rbp - 316 ; 16 bytes
  tmp2897 EQU rbp - 320 ; 4 bytes
  tmp2889 EQU rbp - 324 ; 4 bytes
  newNode EQU rbp - 340 ; 16 bytes
  childNode EQU rbp - 356 ; 16 bytes
  childIdx EQU rbp - 372 ; 16 bytes
  tmp2881 EQU rbp - 376 ; 4 bytes
  tmp2875 EQU rbp - 380 ; 4 bytes
  newRval EQU rbp - 396 ; 16 bytes
  rval EQU rbp - 412 ; 16 bytes
  lval EQU rbp - 428 ; 16 bytes
  tmp2862 EQU rbp - 444 ; 16 bytes
  tmp2861 EQU rbp - 460 ; 16 bytes
  tmp2860 EQU rbp - 476 ; 16 bytes
  tmp2859 EQU rbp - 492 ; 16 bytes
  tmp2856 EQU rbp - 496 ; 4 bytes
  tmp2854 EQU rbp - 500 ; 4 bytes
  tmp2850 EQU rbp - 504 ; 4 bytes
  tmp2847 EQU rbp - 508 ; 4 bytes
  oneChild EQU rbp - 524 ; 16 bytes
  tmp2842 EQU rbp - 528 ; 4 bytes
  tmp2841 EQU rbp - 544 ; 16 bytes
  tmp2840 EQU rbp - 560 ; 16 bytes
  tmp2839 EQU rbp - 576 ; 16 bytes
  rv EQU rdi
  children EQU rbp - 592 ; 16 bytes
  goOn EQU rbp - 596 ; 4 bytes
  opcode EQU rbp - 612 ; 16 bytes
  symbolTable EQU rbp - 628 ; 16 bytes
  mapOfExpressions EQU rbp - 644 ; 16 bytes
  node EQU rbp - 660 ; 16 bytes
  this EQU rbp - 676 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 704

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mapOfExpressions ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ symbolTable ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2839 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2840 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2841 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp2859 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2860 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2861 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2862 + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [newRval + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2900 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2901 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2902 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2910 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2933 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2934 + Variant_t.type], VARIANT_UNDEFINED
  mov [matchedNode + Variant_t.type], VARIANT_UNDEFINED
  mov [block1 + Variant_t.type], VARIANT_UNDEFINED
  mov [block2 + Variant_t.type], VARIANT_UNDEFINED
  mov [lastInstructionNode1 + Variant_t.type], VARIANT_UNDEFINED
  mov [lastInstructionNode2 + Variant_t.type], VARIANT_UNDEFINED
  mov [commonBlock + Variant_t.type], VARIANT_UNDEFINED
  mov [newCommonBlockChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse19 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse20 + Variant_t.type], VARIANT_UNDEFINED
  mov [deep1 + Variant_t.type], VARIANT_UNDEFINED
  mov [deep2 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2841 ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2842 ], eax
  cmp dword [ tmp2842 ], 0
  jz l2843
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
l2843:
l2844:
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ goOn ], 1
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2846
l2845:
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  ret
l2846:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2845 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp2847 ], 205
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2842 ], eax
  cmp dword [ tmp2842 ], 0
  jz l2848
  mov dword [ tmp2847 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2847 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 201
  mov [ tmp2841 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2841 + Variant_t.value], rax
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ tmp2841 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2850 ], eax
  cmp dword [ tmp2850 ], 0
  jz l2851
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ lval ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_Hash
  pop rdi
l2851:
l2852:
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rval ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_Hash
  pop rdi
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rval ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$4
  pop rdi
  lea  rcx, [ newRval ]
  call __MOLD_VariantDestroy
  lea rcx, [ newRval ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  mov dword [ tmp2850 ], 0
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 201
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2854 ], eax
  cmp dword [ tmp2854 ], 0
  jz l2853
  mov dword [ tmp2854 ], 0
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newRval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 201
  mov [ tmp2841 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2841 + Variant_t.value], rax
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ tmp2841 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2856 ], eax
  cmp dword [ tmp2856 ], 0
  jz l2855
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newRval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2854 ], eax
l2855:
  mov eax, dword [ tmp2854 ]
  mov dword [ tmp2850 ], eax
l2853:
  cmp dword [ tmp2850 ], 0
  jz l2857
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2841 ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2862 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal263 ]
  lea  rdx , [ tmp2862 ]
  lea  r8 , [ tmp2861 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2860 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ tmp2861 ]
  lea  r8 , [ tmp2860 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2859 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal330 ]
  lea  rdx , [ tmp2860 ]
  lea  r8 , [ tmp2859 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2859 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__debug$2
  pop rdi
  mov dword [ tmp2847 ], 999
  mov [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2839 + Variant_t.value], rax
  lea  rcx , [ rv ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2839 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ rv ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2858
l2857:
  lea  rcx , [ newRval ]
  lea  rdx , [ rval ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2854 ], eax
  cmp dword [ tmp2854 ], 0
  jz l2863
  mov dword [ tmp2847 ], 1
  lea  rcx , [ children ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ newRval ]
  call  __MOLD_VariantStoreAtIndex_int32
l2863:
l2864:
l2858:
  jmp l2849
l2848:
  mov dword [ tmp2850 ], 1
  mov dword [ tmp2847 ], 150
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2854 ], eax
  cmp dword [ tmp2854 ], 0
  jnz l2865
  mov dword [ tmp2847 ], 170
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2850 ], eax
l2865:
  cmp dword [ tmp2850 ], 0
  jz l2866
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2869
l2868:
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$4
  pop rdi
  ret
l2869:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2868 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  jmp l2867
l2866:
  mov dword [ tmp2847 ], 153
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2854 ], eax
  cmp dword [ tmp2854 ], 0
  jz l2870
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2873
l2872:
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$4
  pop rdi
  ret
l2873:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2872 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  jmp l2871
l2870:
  mov dword [ tmp2856 ], 1
  mov dword [ tmp2847 ], 102
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2875 ], eax
  cmp dword [ tmp2875 ], 0
  jnz l2874
  mov dword [ tmp2847 ], 104
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2856 ], eax
l2874:
  cmp dword [ tmp2856 ], 0
  jz l2876
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2879
l2878:
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$4
  pop rdi
  ret
l2879:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2878 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  jmp l2877
l2876:
  mov dword [ tmp2875 ], 1
  mov dword [ tmp2847 ], 152
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2881 ], eax
  cmp dword [ tmp2881 ], 0
  jnz l2880
  mov dword [ tmp2847 ], 106
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2875 ], eax
l2880:
  cmp dword [ tmp2875 ], 0
  jz l2882
; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l2885
l2884:
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ childNode ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_Hash
  pop rdi
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$4
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx , [ newNode ]
  lea  rdx , [ childNode ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2881 ], eax
  cmp dword [ tmp2881 ], 0
  jz l2886
  mov eax, dword [ childIdx + Variant_t.value]
  mov dword [ tmp2847 ], eax
  lea  rcx , [ children ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ newNode ]
  call  __MOLD_VariantStoreAtIndex_int32
l2886:
l2887:
  ret
l2885:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2884 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys childIdx values childNode
; -----------------------------
; 
  jmp l2883
l2882:
  mov dword [ tmp2881 ], 0
  mov dword [ tmp2847 ], 160
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2889 ], eax
  cmp dword [ tmp2889 ], 0
  jz l2888
  mov dword [ tmp2847 ], 165
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2881 ], eax
l2888:
  cmp dword [ tmp2881 ], 0
  jz l2890
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
l2890:
l2891:
  mov dword [ tmp2881 ], 0
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2841 ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2847 ], 0
  mov [ tmp2841 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2841 + Variant_t.value], rax
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2889 ], eax
  cmp dword [ tmp2889 ], 0
  jz l2892
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2840 ]
  lea  rdi , [ tmp2841 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2881 ], eax
l2892:
  cmp dword [ tmp2881 ], 0
  jz l2893
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ matchedNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ mapOfExpressions ]
  lea  rdx , [ tmp2841 ]
  lea  r8 , [ matchedNode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ matchedNode ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2889 ], eax
  cmp dword [ tmp2889 ], 0
  jz l2895
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ matchedNode ]
  lea  rdi , [ tmp2841 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2897 ], eax
  cmp dword [ tmp2897 ], 0
  jz l2898
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ mapOfExpressions ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2840 ]
  lea  rdi , [ tmp2841 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2862 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal332 ]
  lea  rdx , [ tmp2862 ]
  lea  r8 , [ tmp2861 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2860 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2861 ]
  lea  r8 , [ tmp2860 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2859 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal331 ]
  lea  rdx , [ tmp2860 ]
  lea  r8 , [ tmp2859 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2859 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__debug$2
  pop rdi
  jmp l2899
l2898:
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2840 ]
  lea  rdi , [ tmp2841 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2900 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2900 ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp2900 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2902 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2900 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp2902 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2901 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal335 ]
  lea  rdx , [ tmp2902 ]
  lea  r8 , [ tmp2901 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ tmp2901 ]
  lea  r8 , [ tmp2862 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal334 ]
  lea  rdx , [ tmp2862 ]
  lea  r8 , [ tmp2861 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2860 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2861 ]
  lea  r8 , [ tmp2860 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2859 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal333 ]
  lea  rdx , [ tmp2860 ]
  lea  r8 , [ tmp2859 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2859 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__debug$2
  pop rdi
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 201
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2903 ], eax
  cmp dword [ tmp2903 ], 0
  jz l2904
  mov dword [ tmp2906 ], 0
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 205
  mov [ tmp2841 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2841 + Variant_t.value], rax
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ tmp2841 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2908 ], eax
  cmp dword [ tmp2908 ], 0
  jz l2907
  mov dword [ tmp2908 ], 0
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2900 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 0
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2900 ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 201
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2911 ], eax
  cmp dword [ tmp2911 ], 0
  jz l2909
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2900 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2900 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 1
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ matchedNode ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2908 ], eax
l2909:
  mov eax, dword [ tmp2908 ]
  mov dword [ tmp2906 ], eax
l2907:
  cmp dword [ tmp2906 ], 0
  jz l2912
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2847 ], 0
  lea  rcx, [ matchedNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ matchedNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2913
l2912:
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ matchedNode ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block1 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block2 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ matchedNode ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode1 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode2 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx , [ block1 ]
  lea  rdx , [ block2 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2908 ], eax
  cmp dword [ tmp2908 ], 0
  jz l2914
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea rcx, [ commonBlock ]
  lea rdx, [ block1 ]
  call __MOLD_VariantMove
  jmp l2915
l2914:
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ block1 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ deep1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ deep1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ block2 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ deep2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ deep2 ]
  call  __MOLD_VariantLoadFromKey
l2916:
  lea  rcx , [ deep2 ]
  lea  rdx , [ deep1 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2911 ], eax
  cmp dword [ tmp2911 ], 0
  jz l2917
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode1 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block1 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  mov dword [ tmp2847 ], 1
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ deep1 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ deep1 ]
  call  __MOLD_VariantSub
  jmp l2916
l2917:
l2918:
  lea  rcx , [ deep1 ]
  lea  rdx , [ deep2 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2920 ], eax
  cmp dword [ tmp2920 ], 0
  jz l2919
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode2 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block2 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  mov dword [ tmp2847 ], 1
  mov [ tmp2840 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2840 + Variant_t.value], rax
  lea  rcx , [ deep2 ]
  lea  rdx , [ tmp2840 ]
  lea  r8 , [ deep2 ]
  call  __MOLD_VariantSub
  jmp l2918
l2919:
l2921:
  lea  rcx , [ block1 ]
  lea  rdx , [ block2 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2923 ], eax
  cmp dword [ tmp2923 ], 0
  jz l2922
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode1 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode2 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block1 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block2 ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  jmp l2921
l2922:
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea rcx, [ commonBlock ]
  lea rdx, [ block1 ]
  call __MOLD_VariantMove
l2915:
  mov dword [ tmp2847 ], 201
  mov [ tmp2839 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2847 ]
  mov [ tmp2839 + Variant_t.value], rax
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__getNextId$1
  pop rdi
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2840 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2859 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal328 ]
  lea  rdx , [ tmp2839 ]
  lea  r8 , [ tmp2859 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2859 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2839 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ __cse19 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse19 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse20 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __cse20 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse19 ]
  lea  rdx , [ __cse20 ]
  lea  rdi, [ tmp2839 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*25]
  pop rdi
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse19 ]
  lea  rdx , [ __cse20 ]
  lea  rdi, [ tmp2839 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*21]
  pop rdi
  lea  rcx, [ newCommonBlockChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newCommonBlockChildren ]
  call  __MOLD_VariantArrayCreate
  mov dword [ isCseEmited ], 0
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l2925
l2924:
  mov dword [ tmp2926 ], 0
  xor  eax, eax
  or   dword [ isCseEmited ], eax
  setz cl
  or   dword [ tmp2926 ], eax
  setz al
  xor  al, cl
  jnz l2927
  mov dword [ tmp2926 ], 1
  lea  rcx , [ oneChild ]
  lea  rdx , [ lastInstructionNode1 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2840 + Variant_t.value]
  mov dword [ tmp2930 ], eax
  cmp dword [ tmp2930 ], 0
  jnz l2929
  lea  rcx , [ oneChild ]
  lea  rdx , [ lastInstructionNode2 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2840 + Variant_t.value]
  mov dword [ tmp2926 ], eax
l2929:
  cmp dword [ tmp2926 ], 0
  jz l2931
  mov dword [ isCseEmited ], 1
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2841 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2900 ]
  lea rdx, [ tmp2910 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2900 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2900 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_DECLARE_OR_ASSIGN ]
  mov [ tmp2900 + Variant_t.value], rax
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2900 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2933 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2933 + Variant_t.value], 0
  lea  rcx, [ tmp2934 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2934 ]
  lea rdx, [ matchedNode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2933 ]
  lea  r8 , [ tmp2934 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp2933 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2933 + Variant_t.value], 1
  lea  rcx, [ tmp2934 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2934 ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2933 ]
  lea  r8 , [ tmp2934 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2900 ]
  lea rdx, [ tmp2910 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2841 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2900 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newCommonBlockChildren ]
  lea  rdx , [ tmp2841 ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
l2931:
l2932:
l2927:
l2928:
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newCommonBlockChildren ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  ret
l2925:
  lea  rcx , [ tmp2839 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2924 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp2926 ], 0
  xor  eax, eax
  or   dword [ isCseEmited ], eax
  setz cl
  or   dword [ tmp2926 ], eax
  setz al
  xor  al, cl
  jnz l2935
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal336 ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2935:
l2936:
  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newCommonBlockChildren ]
  call  __MOLD_VariantStoreAtKey
l2913:
l2904:
l2905:
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2841 ]
  lea  rdi , [ tmp2840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2903 ], eax
  cmp dword [ tmp2903 ], 0
  jz l2937
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2840 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2841 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2840 ]
  lea  rdx , [ tmp2841 ]
  lea  rdi, [ tmp2839 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*21]
  pop rdi
l2937:
l2938:
  lea rcx, [ rv ]
  lea rdx, [ matchedNode ]
  call __MOLD_VariantMove
  mov dword [ goOn ], 0
l2899:
l2895:
l2896:
l2893:
l2894:
  mov dword [ tmp2889 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp2889 ], eax
  setz al
  xor  al, cl
  jnz l2939
; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l2942
l2941:
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$4
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp2839 ]
  call __MOLD_VariantMove
  lea  rcx , [ newNode ]
  lea  rdx , [ childNode ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 + Variant_t.value]
  mov dword [ tmp2889 ], eax
  cmp dword [ tmp2889 ], 0
  jz l2943
  mov eax, dword [ childIdx + Variant_t.value]
  mov dword [ tmp2847 ], eax
  lea  rcx , [ children ]
  lea  rdx , [ tmp2847 ]
  lea  r8 , [ newNode ]
  call  __MOLD_VariantStoreAtIndex_int32
l2943:
l2944:
  ret
l2942:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2941 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys childIdx values childNode
; -----------------------------
; 
l2939:
l2940:
l2883:
l2877:
l2871:
l2867:
l2849:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2839 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2840 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2841 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newRval ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childIdx
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2900 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2933 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2934 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ matchedNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newCommonBlockChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse19 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse20 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ deep1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ deep2 ]
  call __MOLD_VariantDestroy

  add  rsp, 704
  pop  rbp
  ret

  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable
  restore opcode
  restore goOn
  restore children
  restore rv
  restore tmp2839
  restore tmp2840
  restore tmp2841
  restore tmp2842
  restore oneChild
  restore tmp2847
  restore tmp2850
  restore tmp2854
  restore tmp2856
  restore tmp2859
  restore tmp2860
  restore tmp2861
  restore tmp2862
  restore lval
  restore rval
  restore newRval
  restore tmp2875
  restore tmp2881
  restore childIdx
  restore childNode
  restore newNode
  restore tmp2889
  restore tmp2897
  restore tmp2900
  restore tmp2901
  restore tmp2902
  restore tmp2903
  restore tmp2906
  restore tmp2908
  restore tmp2910
  restore tmp2911
  restore tmp2920
  restore tmp2923
  restore tmp2926
  restore tmp2930
  restore tmp2933
  restore tmp2934
  restore matchedNode
  restore block1
  restore block2
  restore lastInstructionNode1
  restore lastInstructionNode2
  restore commonBlock
  restore newCommonBlockChildren
  restore isCseEmited
  restore __cse19
  restore __cse20
  restore deep1
  restore deep2
; -----------------------------------------------
; function __ASTOptimizerCSE_processNode$2
; -----------------------------------------------
__ASTOptimizerCSE_processNode$2:
  ; init frame
  ; ----------
  tmp2945 EQU rbp - 24 ; 16 bytes
  symbolTable EQU rbp - 40 ; 16 bytes
  mapOfExpressions EQU rbp - 56 ; 16 bytes
  node EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [mapOfExpressions + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2945 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ mapOfExpressions ]
  call __MOLD_VariantDestroy
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2945 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2945 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ mapOfExpressions ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2945 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable
  restore tmp2945
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove_constructor$2
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove_constructor$2:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__debug$2
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__debug$2:
  ; init frame
  ; ----------
  tmp2950 EQU rbp - 24 ; 16 bytes
  tmp2947 EQU rbp - 28 ; 4 bytes
  tmp2946 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp2950 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2947 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2947 ], eax
  setz al
  xor  al, cl
  jnz l2948
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal337 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2948:
l2949:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2950 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2946
  restore tmp2947
  restore tmp2950
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__removeNode$2
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__removeNode$2:
  ; init frame
  ; ----------
  tmp2955 EQU rbp - 12 ; 4 bytes
  tmp2954 EQU rbp - 28 ; 16 bytes
  tmp2953 EQU rbp - 44 ; 16 bytes
  tmp2952 EQU rbp - 60 ; 16 bytes
  tmp2951 EQU rbp - 76 ; 16 bytes
  node EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp2951 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2952 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2953 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2954 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2954 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2954 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2953 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2954 ]
  lea  rdi , [ tmp2953 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2952 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal338 ]
  lea  rdx , [ tmp2953 ]
  lea  r8 , [ tmp2952 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2951 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2952 ]
  lea  rdi , [ tmp2951 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ tmp2955 ], 999
  mov [ tmp2951 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2955 ]
  mov [ tmp2951 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2951 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2951 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2951 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2951 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2951 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2953 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2954 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore node
  restore tmp2951
  restore tmp2952
  restore tmp2953
  restore tmp2954
  restore tmp2955
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__moveNode$3
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__moveNode$3:
  ; init frame
  ; ----------
  tmp2961 EQU rbp - 24 ; 16 bytes
  tmp2960 EQU rbp - 40 ; 16 bytes
  tmp2959 EQU rbp - 56 ; 16 bytes
  tmp2958 EQU rbp - 72 ; 16 bytes
  tmp2957 EQU rbp - 88 ; 16 bytes
  tmp2956 EQU rbp - 104 ; 16 bytes
  __cse21 EQU rbp - 120 ; 16 bytes
  src EQU rbp - 136 ; 16 bytes
  dst EQU rbp - 152 ; 16 bytes
  this EQU rbp - 168 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  mov [__cse21 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2956 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2957 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2958 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2959 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2960 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2961 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse21 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ src ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ __cse21 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2960 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2960 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2959 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2960 ]
  lea  rdi , [ tmp2959 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2960 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse21 ]
  lea  rdi , [ tmp2960 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2961 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal340 ]
  lea  rdx , [ tmp2960 ]
  lea  r8 , [ tmp2961 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2958 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2959 ]
  lea  rdx , [ tmp2961 ]
  lea  r8 , [ tmp2958 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2957 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal339 ]
  lea  rdx , [ tmp2958 ]
  lea  r8 , [ tmp2957 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2956 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2957 ]
  lea  rdi , [ tmp2956 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  lea  rcx , [ dst ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ __cse21 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2956 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ src ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2956 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ dst ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2956 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2956 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ src ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2956 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ dst ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2956 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ __cse21 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2956 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2959 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2960 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore __cse21
  restore tmp2956
  restore tmp2957
  restore tmp2958
  restore tmp2959
  restore tmp2960
  restore tmp2961
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__processChildNodes$3
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__processChildNodes$3:
  ; init frame
  ; ----------
  newNode EQU rbp - 24 ; 16 bytes
  childNode EQU rbp - 40 ; 16 bytes
  tmp2974 EQU rbp - 44 ; 4 bytes
  tmp2971 EQU rbp - 60 ; 16 bytes
  tmp2970 EQU rbp - 76 ; 16 bytes
  tmp2967 EQU rbp - 80 ; 4 bytes
  tmp2966 EQU rbp - 96 ; 16 bytes
  tmp2963 EQU rbp - 100 ; 4 bytes
  tmp2962 EQU rbp - 116 ; 16 bytes
  newChildrenCnt EQU rbp - 120 ; 4 bytes
  newChildren EQU rbp - 136 ; 16 bytes
  node EQU rbp - 152 ; 16 bytes
  symbolTable EQU rbp - 168 ; 16 bytes
  this EQU rbp - 184 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2962 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2966 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2970 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2971 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  mov dword [ newChildrenCnt ], 0
  lea  rcx, [ tmp2962 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2962 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l2965
l2964:
  lea  rcx, [ tmp2966 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp2966 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__processNode$3
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp2966 ]
  call __MOLD_VariantMove
  lea  rcx , [ newNode ]
  lea  rdx , [ childNode ]
  lea  r8 , [ tmp2966 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2966 + Variant_t.value]
  mov dword [ tmp2967 ], eax
  cmp dword [ tmp2967 ], 0
  jz l2968
  lea  rcx, [ tmp2966 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  r8 , [ newNode ]
  lea  rdi , [ tmp2966 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__moveNode$3
  pop rdi
l2968:
l2969:
  lea  rcx, [ tmp2970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2970 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2963 ], 999
  mov [ tmp2971 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2963 ]
  mov [ tmp2971 + Variant_t.value], rax
  lea  rcx , [ tmp2970 ]
  lea  rdx , [ tmp2971 ]
  lea  r8 , [ tmp2966 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2966 + Variant_t.value]
  mov dword [ tmp2967 ], eax
  cmp dword [ tmp2967 ], 0
  jz l2972
  lea  rcx , [ newChildren ]
  lea  rdx , [ newChildrenCnt ]
  lea  r8 , [ newNode ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp2974 ], 1
  mov eax, dword [ newChildrenCnt ]
  add eax, dword [ tmp2974 ]
  mov dword [ newChildrenCnt ], eax
l2972:
l2973:
  ret
l2965:
  lea  rcx , [ tmp2962 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2964 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2962 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2966 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2970 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2971 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore newChildren
  restore newChildrenCnt
  restore tmp2962
  restore tmp2963
  restore tmp2966
  restore tmp2967
  restore tmp2970
  restore tmp2971
  restore tmp2974
  restore childNode
  restore newNode
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__processNode$3
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__processNode$3:
  ; init frame
  ; ----------
  tmp3040 EQU rbp - 12 ; 4 bytes
  __cse22 EQU rbp - 28 ; 16 bytes
  rval EQU rbp - 44 ; 16 bytes
  symbolInfo EQU rbp - 60 ; 16 bytes
  tmp3033 EQU rbp - 76 ; 16 bytes
  tmp3032 EQU rbp - 92 ; 16 bytes
  tmp3031 EQU rbp - 108 ; 16 bytes
  nodeElse EQU rbp - 124 ; 16 bytes
  nodeBody EQU rbp - 140 ; 16 bytes
  nodeCond EQU rbp - 156 ; 16 bytes
  tmp3023 EQU rbp - 160 ; 4 bytes
  tmp3010 EQU rbp - 164 ; 4 bytes
  tmp3002 EQU rbp - 168 ; 4 bytes
  tmp2999 EQU rbp - 184 ; 16 bytes
  tmp2998 EQU rbp - 188 ; 4 bytes
  tmp2995 EQU rbp - 192 ; 4 bytes
  tmp2990 EQU rbp - 208 ; 16 bytes
  tmp2987 EQU rbp - 224 ; 16 bytes
  tmp2986 EQU rbp - 228 ; 4 bytes
  tmp2982 EQU rbp - 232 ; 4 bytes
  tmp2977 EQU rbp - 236 ; 4 bytes
  tmp2976 EQU rbp - 252 ; 16 bytes
  tmp2975 EQU rbp - 268 ; 16 bytes
  removeNode EQU rbp - 272 ; 4 bytes
  rv EQU rdi
  childrenCntOnEnter EQU rbp - 288 ; 16 bytes
  x EQU rbp - 304 ; 16 bytes
  childrenCnt EQU rbp - 320 ; 16 bytes
  children EQU rbp - 336 ; 16 bytes
  opcode EQU rbp - 352 ; 16 bytes
  node EQU rbp - 368 ; 16 bytes
  symbolTable EQU rbp - 384 ; 16 bytes
  this EQU rbp - 400 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 432

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCntOnEnter + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2975 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2976 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2987 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2990 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2999 + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeCond + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeBody + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeElse + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3031 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3032 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3033 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse22 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2977 ], eax
  cmp dword [ tmp2977 ], 0
  jz l2978
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal341 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2978:
l2979:
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2977 ], eax
  cmp dword [ tmp2977 ], 0
  jz l2980
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal342 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l2980:
l2981:
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2982 ], 101
  mov [ tmp2976 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2982 ]
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2977 ], eax
  cmp dword [ tmp2977 ], 0
  jz l2983
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
l2983:
l2984:
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__processChildNodes$3
  pop rdi
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2982 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2982 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ childrenCntOnEnter ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCntOnEnter ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  mov dword [ removeNode ], 0
  mov dword [ tmp2977 ], 0
  mov dword [ tmp2982 ], 160
  mov [ tmp2976 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2982 ]
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2986 ], eax
  cmp dword [ tmp2986 ], 0
  jz l2985
  mov dword [ tmp2982 ], 4
  lea  rcx, [ tmp2987 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2982 ]
  lea  r8 , [ tmp2987 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2987 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp2986 ], 1
  mov eax, dword [ tmp2986 ]
  mov [ tmp2987 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2987 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2987 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2977 ], eax
l2985:
  cmp dword [ tmp2977 ], 0
  jz l2988
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal343 ]
  lea  rdx , [ tmp2987 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ removeNode ], 1
  jmp l2989
l2988:
  mov eax, dword [ opcode + Variant_t.value]
  mov dword [ tmp2982 ], eax
  cmp dword [ tmp2982 ], 102
  jl l2992
  cmp dword [ tmp2982 ], 205
  jg l2992
  mov eax, dword [ tmp2982 ]
  jmp qword [ __jmptable2993 + rax * 8]
l2994:
  mov dword [ tmp2995 ], 1
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2995 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp2986 ], 1
  mov eax, dword [ tmp2986 ]
  mov [ tmp2976 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ tmp2987 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2986 ], eax
  cmp dword [ tmp2986 ], 0
  jz l2996
  lea  rcx, [ tmp2987 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2987 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2987 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal344 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ removeNode ], 1
  jmp l2997
l2996:
  mov dword [ tmp2995 ], 0
  lea  rcx, [ tmp2987 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2995 ]
  lea  r8 , [ tmp2987 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2998 ], 0
  mov eax, dword [ tmp2998 ]
  mov [ tmp2999 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2987 ]
  lea  rdx , [ tmp2999 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmWithValue
  pop rdi
  mov dword [ tmp2998 ], 1
  mov eax, dword [ tmp2998 ]
  mov [ tmp2999 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2998 ], eax
  cmp dword [ tmp2998 ], 0
  jz l3000
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal345 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ removeNode ], 1
l3000:
l3001:
l2997:
  jmp l2991
l3003:
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2995 ], 0
  lea  rcx, [ nodeCond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2995 ]
  lea  r8 , [ nodeCond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2995 ], 1
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2995 ]
  lea  r8 , [ nodeBody ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2995 ], 2
  lea  rcx, [ nodeElse ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2995 ]
  lea  r8 , [ nodeElse ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2995 ], 3
  mov [ tmp2999 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2986 ], eax
  cmp dword [ tmp2986 ], 0
  jz l3004
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeElse ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp2998 ], 1
  mov eax, dword [ tmp2998 ]
  mov [ tmp2976 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ tmp2999 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2998 ], eax
  cmp dword [ tmp2998 ], 0
  jz l3006
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeElse ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2999 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal346 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2975 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2976 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2976 + Variant_t.value], 0
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2999 ]
  lea rdx, [ nodeCond ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2975 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp2976 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2976 + Variant_t.value], 1
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2999 ]
  lea rdx, [ nodeBody ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2975 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2995 ], 2
  mov [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ childrenCnt + Variant_t.value], rax
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeBody ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3002 ], 1
  mov eax, dword [ tmp3002 ]
  mov [ tmp2976 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ tmp2999 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp3002 ], eax
  cmp dword [ tmp3002 ], 0
  jz l3008
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2999 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal347 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ removeNode ], 1
l3008:
l3009:
  jmp l3007
l3006:
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeBody ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3002 ], 1
  mov eax, dword [ tmp3002 ]
  mov [ tmp2999 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp3002 ], eax
  cmp dword [ tmp3002 ], 0
  jz l3011
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal348 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeCond ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_InvertBoolean
  pop rdi
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2975 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2999 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2999 + Variant_t.value], 0
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2976 ]
  lea rdx, [ nodeCond ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2975 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp2999 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2999 + Variant_t.value], 1
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2976 ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2975 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea rcx, [ nodeBody ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove
  mov dword [ tmp2995 ], 2
  mov [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ childrenCnt + Variant_t.value], rax
l3011:
l3012:
l3007:
  jmp l3005
l3004:
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeBody ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp2998 ], 1
  mov eax, dword [ tmp2998 ]
  mov [ tmp2999 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2998 ], eax
  cmp dword [ tmp2998 ], 0
  jz l3013
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal349 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ removeNode ], 1
l3013:
l3014:
l3005:
  mov dword [ tmp2998 ], 1
  xor   eax, eax
  or    dword [ removeNode ], eax
  setnz cl
  or    dword [ tmp2998 ], eax
  setz  al
  xor   al, cl
  jnz l3015
  mov dword [ tmp2998 ], 1
  mov eax, dword [ tmp2998 ]
  mov [ tmp2976 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeCond ]
  lea  rdx , [ tmp2976 ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmWithValue
  pop rdi
  mov dword [ tmp2998 ], 1
  mov eax, dword [ tmp2998 ]
  mov [ tmp2976 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ tmp2999 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2998 ], eax
  cmp dword [ tmp2998 ], 0
  jz l3017
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2999 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal350 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ nodeBody ]
  call __MOLD_VariantMove
  jmp l3018
l3017:
  mov dword [ tmp3002 ], 0
  mov eax, dword [ tmp3002 ]
  mov [ tmp2999 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nodeCond ]
  lea  rdx , [ tmp2999 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmWithValue
  pop rdi
  mov dword [ tmp3002 ], 1
  mov eax, dword [ tmp3002 ]
  mov [ tmp2999 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp3002 ], eax
  cmp dword [ tmp3002 ], 0
  jz l3019
  mov dword [ tmp2995 ], 3
  mov [ tmp2999 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp3010 ], eax
  cmp dword [ tmp3010 ], 0
  jz l3021
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal351 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove
  jmp l3022
l3021:
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal352 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ removeNode ], 1
l3022:
l3019:
l3020:
l3018:
l3015:
l3016:
  jmp l2991
l3024:
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2995 ], 201
  mov [ tmp2976 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ tmp2999 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2986 ], eax
  cmp dword [ tmp2986 ], 0
  jz l3025
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2976 ]
  lea  rdi, [ tmp2975 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2975 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2995 ], 0
  mov [ tmp2999 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2998 ], eax
  cmp dword [ tmp2998 ], 0
  jz l3027
  mov dword [ tmp2995 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2995 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rval ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HasSideEffects
  pop rdi
  mov dword [ tmp3002 ], 1
  mov eax, dword [ tmp3002 ]
  mov [ tmp2976 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ tmp2999 ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp3002 ], eax
  cmp dword [ tmp3002 ], 0
  jz l3029
  mov dword [ tmp3010 ], 1
  mov eax, dword [ tmp3010 ]
  mov [ tmp2975 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2975 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal353 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantStoreAtKey
  jmp l3030
l3029:
  lea  rcx, [ __cse22 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __cse22 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2999 ]
  lea  rdi , [ tmp2976 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3033 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse22 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp3033 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3032 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal263 ]
  lea  rdx , [ tmp3033 ]
  lea  r8 , [ tmp3032 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3031 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp3032 ]
  lea  r8 , [ tmp3031 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal354 ]
  lea  rdx , [ tmp3031 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  mov dword [ removeNode ], 1
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ __cse22 ]
  lea  rdi, [ tmp2975 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*28]
  pop rdi
l3030:
l3027:
l3028:
l3025:
l3026:
  jmp l2991
l3034:
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2976 ]
  lea  rdi, [ tmp2975 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2975 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2995 ], 0
  mov [ tmp2999 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2986 ], eax
  cmp dword [ tmp2986 ], 0
  jz l3035
  mov dword [ removeNode ], 1
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2999 ]
  lea  rdx , [ tmp2976 ]
  lea  rdi, [ tmp2975 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*15]
  pop rdi
l3035:
l3036:
  jmp l2991
l2992:
  mov dword [ tmp2986 ], 0
  mov dword [ tmp2995 ], 600
  mov [ tmp2976 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2976 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2976 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2998 ], eax
  cmp dword [ tmp2998 ], 0
  jz l3037
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2995 ], 600
  mov [ tmp2999 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2999 + Variant_t.value], rax
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2975 + Variant_t.value]
  mov dword [ tmp2986 ], eax
l3037:
  cmp dword [ tmp2986 ], 0
  jz l3038
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal355 ]
  lea  rdx , [ tmp2999 ]
  lea  r8 , [ tmp2990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2990 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__debug$2
  pop rdi
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2975 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2995 ], 0
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3040 ], 0
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2976 ]
  lea  rdx , [ tmp3040 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp2975 ]
  lea  rdx , [ tmp2995 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3038:
l3039:
l2991:
l2989:
  mov dword [ tmp2986 ], 1
  xor  eax, eax
  or   dword [ removeNode ], eax
  setz cl
  or   dword [ tmp2986 ], eax
  setz al
  xor  al, cl
  jnz l3041
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__removeNode$2
  pop rdi
  jmp l3042
l3041:
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp2976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp2976 ]
  lea  rdi , [ tmp2975 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ childrenCntOnEnter ]
  lea  rdx , [ tmp2975 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2999 + Variant_t.value]
  mov dword [ tmp2986 ], eax
  cmp dword [ tmp2986 ], 0
  jz l3043
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp2999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__processChildNodes$3
  pop rdi
l3043:
l3044:
l3042:
  mov dword [ tmp2995 ], 101
  mov [ tmp2975 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2995 ]
  mov [ tmp2975 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp2975 ]
  lea  r8 , [ tmp2999 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2999 + Variant_t.value]
  mov dword [ tmp2977 ], eax
  cmp dword [ tmp2977 ], 0
  jz l3045
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2999 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*50]
  pop rdi
l3045:
l3046:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCntOnEnter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2975 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2976 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2987 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2999 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeCond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeElse ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse22 ]
  call __MOLD_VariantDestroy

  add  rsp, 432
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore x
  restore childrenCntOnEnter
  restore rv
  restore removeNode
  restore tmp2975
  restore tmp2976
  restore tmp2977
  restore tmp2982
  restore tmp2986
  restore tmp2987
  restore tmp2990
  restore tmp2995
  restore tmp2998
  restore tmp2999
  restore tmp3002
  restore tmp3010
  restore tmp3023
  restore nodeCond
  restore nodeBody
  restore nodeElse
  restore tmp3031
  restore tmp3032
  restore tmp3033
  restore symbolInfo
  restore rval
  restore __cse22
  restore tmp3040
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove_processNode$2
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove_processNode$2:
  ; init frame
  ; ----------
  tmp3048 EQU rbp - 24 ; 16 bytes
  tmp3047 EQU rbp - 40 ; 16 bytes
  node EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3047 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3048 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3048 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3048 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3047 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3048 ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp3047 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__processNode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3047 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3048 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3047
  restore tmp3048
; -----------------------------------------------
; function __ASTOptimizerVCall_constructor$2
; -----------------------------------------------
__ASTOptimizerVCall_constructor$2:
  ; init frame
  ; ----------
  tmp3049 EQU rbp - 24 ; 16 bytes
  app EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp3049 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3049 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp3049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*18]
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3049 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3049 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp3049
; -----------------------------------------------
; function __ASTOptimizerVCall__debug$2
; -----------------------------------------------
__ASTOptimizerVCall__debug$2:
  ; init frame
  ; ----------
  tmp3054 EQU rbp - 24 ; 16 bytes
  tmp3051 EQU rbp - 28 ; 4 bytes
  tmp3050 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3054 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3051 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3051 ], eax
  setz al
  xor  al, cl
  jnz l3052
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal356 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3052:
l3053:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3054 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3050
  restore tmp3051
  restore tmp3054
; -----------------------------------------------
; function __ASTOptimizerVCall__processNode$2
; -----------------------------------------------
__ASTOptimizerVCall__processNode$2:
  ; init frame
  ; ----------
  oneChild EQU rbp - 24 ; 16 bytes
  __cse23 EQU rbp - 40 ; 16 bytes
  symbolTable EQU rbp - 56 ; 16 bytes
  blockNode EQU rbp - 72 ; 16 bytes
  methodProto EQU rbp - 88 ; 16 bytes
  classProto EQU rbp - 104 ; 16 bytes
  symbolInfoThiz EQU rbp - 120 ; 16 bytes
  thiz EQU rbp - 136 ; 16 bytes
  tmp3083 EQU rbp - 140 ; 4 bytes
  tmp3082 EQU rbp - 156 ; 16 bytes
  tmp3079 EQU rbp - 160 ; 4 bytes
  tmp3078 EQU rbp - 176 ; 16 bytes
  tmp3077 EQU rbp - 192 ; 16 bytes
  tmp3076 EQU rbp - 208 ; 16 bytes
  tmp3075 EQU rbp - 224 ; 16 bytes
  tmp3072 EQU rbp - 228 ; 4 bytes
  tmp3067 EQU rbp - 244 ; 16 bytes
  tmp3066 EQU rbp - 248 ; 4 bytes
  tmp3064 EQU rbp - 252 ; 4 bytes
  tmp3061 EQU rbp - 256 ; 4 bytes
  tmp3058 EQU rbp - 260 ; 4 bytes
  tmp3057 EQU rbp - 276 ; 16 bytes
  tmp3056 EQU rbp - 280 ; 4 bytes
  tmp3055 EQU rbp - 296 ; 16 bytes
  children EQU rbp - 312 ; 16 bytes
  opcode EQU rbp - 328 ; 16 bytes
  node EQU rbp - 344 ; 16 bytes
  this EQU rbp - 360 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 400

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3055 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3057 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3067 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3075 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3076 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3077 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3078 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3082 + Variant_t.type], VARIANT_UNDEFINED
  mov [thiz + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfoThiz + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [blockNode + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse23 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3056 ], 106
  mov [ tmp3057 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3056 ]
  mov [ tmp3057 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3057 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3055 + Variant_t.value]
  mov dword [ tmp3058 ], eax
  cmp dword [ tmp3058 ], 0
  jz l3059
  mov dword [ tmp3056 ], 0
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3056 ]
  lea  r8 , [ thiz ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolInfoThiz ]
  call __MOLD_VariantDestroy
  lea  rcx , [ thiz ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfoThiz ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfoThiz ]
  lea  rdi , [ tmp3057 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3055 + Variant_t.value]
  mov dword [ tmp3061 ], eax
  cmp dword [ tmp3061 ], 0
  jz l3062
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ thiz ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3064 ], 0
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ classProto ]
  lea  rdi , [ tmp3057 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3055 + Variant_t.value]
  mov dword [ tmp3066 ], eax
  cmp dword [ tmp3066 ], 0
  jz l3065
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3067 ]
  lea  rdi , [ tmp3057 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3055 + Variant_t.value]
  mov dword [ tmp3064 ], eax
l3065:
  cmp dword [ tmp3064 ], 0
  jz l3068
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ tmp3067 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp3067 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3067 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3055 + Variant_t.value]
  mov dword [ tmp3066 ], eax
  cmp dword [ tmp3066 ], 0
  jz l3070
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal248 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3072 ], 1
  mov eax, dword [ tmp3072 ]
  mov [ tmp3057 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3057 + Variant_t.value], rax
  lea  rcx , [ tmp3067 ]
  lea  rdx , [ tmp3057 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3055 + Variant_t.value]
  mov dword [ tmp3072 ], eax
  cmp dword [ tmp3072 ], 0
  jz l3073
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3078 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3078 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3078 ]
  lea  rdi , [ tmp3067 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal358 ]
  lea  rdx , [ tmp3067 ]
  lea  r8 , [ tmp3077 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ tmp3077 ]
  lea  r8 , [ tmp3076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal357 ]
  lea  rdx , [ tmp3076 ]
  lea  r8 , [ tmp3075 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3075 ]
  lea  rdi , [ tmp3055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerVCall__debug$2
  pop rdi
  jmp l3074
l3073:
  lea  rcx, [ __cse23 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ __cse23 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ __cse23 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3056 ], 152
  mov [ tmp3055 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3056 ]
  mov [ tmp3055 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ __cse23 ]
  lea  rdi, [ tmp3055 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*22]
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3078 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3078 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3078 ]
  lea  rdi , [ tmp3067 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal360 ]
  lea  rdx , [ tmp3067 ]
  lea  r8 , [ tmp3077 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ tmp3077 ]
  lea  r8 , [ tmp3076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal359 ]
  lea  rdx , [ tmp3076 ]
  lea  r8 , [ tmp3075 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3075 ]
  lea  rdi , [ tmp3055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerVCall__debug$2
  pop rdi
  lea  rcx, [ tmp3055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp3055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ blockNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ blockNode ]
  lea rdx, [ tmp3055 ]
  call __MOLD_VariantMove
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ blockNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp3057 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*36]
  pop rdi
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ tmp3067 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3055 + Variant_t.value]
  mov dword [ tmp3079 ], eax
  cmp dword [ tmp3079 ], 0
  jz l3080
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3057 ]
  lea  rdi , [ tmp3067 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ tmp3057 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3082 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3057 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp3082 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal263 ]
  lea  rdx , [ tmp3082 ]
  lea  r8 , [ tmp3077 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3067 ]
  lea  rdx , [ tmp3077 ]
  lea  r8 , [ tmp3076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal262 ]
  lea  rdx , [ tmp3076 ]
  lea  r8 , [ tmp3075 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3075 ]
  lea  rdi , [ tmp3055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerVCall__debug$2
  pop rdi
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3055 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3067 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp3055 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3083 ], 1
  mov eax, dword [ tmp3083 ]
  mov [ tmp3067 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3067 + Variant_t.value], rax
  lea  rcx , [ tmp3055 ]
  lea  rdx , [ __literal261 ]
  lea  r8 , [ tmp3067 ]
  call  __MOLD_VariantStoreAtKey
l3080:
l3081:
l3074:
l3070:
l3071:
l3068:
l3069:
l3062:
l3063:
  jmp l3060
l3059:
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l3085
l3084:
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp3067 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerVCall__processNode$2
  pop rdi
  ret
l3085:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3084 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
l3060:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3055 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3057 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3067 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3078 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfoThiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ blockNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse23 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 400
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore tmp3055
  restore tmp3056
  restore tmp3057
  restore tmp3058
  restore tmp3061
  restore tmp3064
  restore tmp3066
  restore tmp3067
  restore tmp3072
  restore tmp3075
  restore tmp3076
  restore tmp3077
  restore tmp3078
  restore tmp3079
  restore tmp3082
  restore tmp3083
  restore thiz
  restore symbolInfoThiz
  restore classProto
  restore methodProto
  restore blockNode
  restore symbolTable
  restore __cse23
  restore oneChild
; -----------------------------------------------
; function __ASTOptimizerVCall_processNode$2
; -----------------------------------------------
__ASTOptimizerVCall_processNode$2:
  ; init frame
  ; ----------
  tmp3086 EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3086 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3086 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp3086 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerVCall__processNode$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3086 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3086
; -----------------------------------------------
; function __ASTOptimizerIf_constructor$2
; -----------------------------------------------
__ASTOptimizerIf_constructor$2:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTOptimizerIf__debug$2
; -----------------------------------------------
__ASTOptimizerIf__debug$2:
  ; init frame
  ; ----------
  tmp3091 EQU rbp - 24 ; 16 bytes
  tmp3088 EQU rbp - 28 ; 4 bytes
  tmp3087 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3091 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3088 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3088 ], eax
  setz al
  xor  al, cl
  jnz l3089
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal361 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3089:
l3090:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3091 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3087
  restore tmp3088
  restore tmp3091
; -----------------------------------------------
; function __ASTOptimizerIf__processNode$2
; -----------------------------------------------
__ASTOptimizerIf__processNode$2:
  ; init frame
  ; ----------
  oneChild EQU rbp - 24 ; 16 bytes
  lastCaseNode EQU rbp - 40 ; 16 bytes
  reusedNode EQU rbp - 56 ; 16 bytes
  caseNodeHash EQU rbp - 72 ; 16 bytes
  caseValue EQU rbp - 88 ; 16 bytes
  caseNode EQU rbp - 104 ; 16 bytes
  casesCnt EQU rbp - 108 ; 4 bytes
  currentIfNode EQU rbp - 124 ; 16 bytes
  goOn EQU rbp - 128 ; 4 bytes
  valueMax EQU rbp - 144 ; 16 bytes
  valueMin EQU rbp - 160 ; 16 bytes
  exprHash EQU rbp - 176 ; 16 bytes
  caseHashMap EQU rbp - 192 ; 16 bytes
  newChildren EQU rbp - 208 ; 16 bytes
  tmp3117 EQU rbp - 212 ; 4 bytes
  tmp3114 EQU rbp - 216 ; 4 bytes
  tmp3112 EQU rbp - 220 ; 4 bytes
  tmp3106 EQU rbp - 236 ; 16 bytes
  tmp3103 EQU rbp - 252 ; 16 bytes
  tmp3102 EQU rbp - 256 ; 4 bytes
  tmp3101 EQU rbp - 272 ; 16 bytes
  tmp3099 EQU rbp - 276 ; 4 bytes
  tmp3097 EQU rbp - 280 ; 4 bytes
  tmp3096 EQU rbp - 296 ; 16 bytes
  tmp3094 EQU rbp - 300 ; 4 bytes
  tmp3093 EQU rbp - 304 ; 4 bytes
  tmp3092 EQU rbp - 320 ; 16 bytes
  cond EQU rbp - 336 ; 16 bytes
  childrenCnt EQU rbp - 352 ; 16 bytes
  children EQU rbp - 368 ; 16 bytes
  opcode EQU rbp - 384 ; 16 bytes
  node EQU rbp - 400 ; 16 bytes
  this EQU rbp - 416 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 448

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3092 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3096 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3101 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3103 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3106 + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [caseHashMap + Variant_t.type], VARIANT_UNDEFINED
  mov [exprHash + Variant_t.type], VARIANT_UNDEFINED
  mov [valueMin + Variant_t.type], VARIANT_UNDEFINED
  mov [valueMax + Variant_t.type], VARIANT_UNDEFINED
  mov [currentIfNode + Variant_t.type], VARIANT_UNDEFINED
  mov [caseNode + Variant_t.type], VARIANT_UNDEFINED
  mov [caseValue + Variant_t.type], VARIANT_UNDEFINED
  mov [caseNodeHash + Variant_t.type], VARIANT_UNDEFINED
  mov [reusedNode + Variant_t.type], VARIANT_UNDEFINED
  mov [lastCaseNode + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3093 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3094 ], 0
  mov dword [ tmp3093 ], 150
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3096 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3097 ], eax
  cmp dword [ tmp3097 ], 0
  jz l3095
  mov dword [ tmp3097 ], 0
  mov dword [ tmp3093 ], 3
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3096 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3099 ], eax
  cmp dword [ tmp3099 ], 0
  jz l3098
  mov dword [ tmp3099 ], 0
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 400
  mov [ tmp3101 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3101 + Variant_t.value], rax
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ tmp3101 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3102 ], eax
  cmp dword [ tmp3102 ], 0
  jz l3100
  lea  rcx, [ tmp3103 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3103 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 1
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3103 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 1
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3096 + Variant_t.value], rax
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3099 ], eax
l3100:
  mov eax, dword [ tmp3099 ]
  mov dword [ tmp3097 ], eax
l3098:
  mov eax, dword [ tmp3097 ]
  mov dword [ tmp3094 ], eax
l3095:
  cmp dword [ tmp3094 ], 0
  jz l3104
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3092 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3096 + Variant_t.value], 0
  lea  rcx, [ tmp3106 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3106 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 0
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3106 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp3092 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea rcx, [ newChildren ]
  lea rdx, [ tmp3092 ]
  call __MOLD_VariantMove
  lea  rcx, [ caseHashMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ caseHashMap ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 0
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3101 ]
  lea  rdi , [ tmp3092 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_Hash
  pop rdi
  lea  rcx, [ exprHash ]
  call __MOLD_VariantDestroy
  lea rcx, [ exprHash ]
  lea rdx, [ tmp3092 ]
  call __MOLD_VariantMove
  mov dword [ tmp3093 ], 2147483647
  mov [ valueMin + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ valueMin + Variant_t.value], rax
  mov dword [ tmp3093 ], -2147483647
  mov [ valueMax + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ valueMax + Variant_t.value], rax
  mov dword [ goOn ], 1
  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentIfNode ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ casesCnt ], 0
l3107:
  mov dword [ tmp3099 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp3099 ], eax
  setz al
  xor  al, cl
  jnz l3108
  mov dword [ goOn ], 0
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 150
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3096 + Variant_t.value], rax
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3099 ], eax
  cmp dword [ tmp3099 ], 0
  jz l3109
  mov dword [ tmp3102 ], 0
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 400
  mov [ tmp3101 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3101 + Variant_t.value], rax
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ tmp3101 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3112 ], eax
  cmp dword [ tmp3112 ], 0
  jz l3111
  mov dword [ tmp3112 ], 0
  lea  rcx, [ tmp3103 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3103 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 1
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3103 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 1
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3096 + Variant_t.value], rax
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3114 ], eax
  cmp dword [ tmp3114 ], 0
  jz l3113
  lea  rcx, [ tmp3103 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3103 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 0
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3103 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3101 ]
  lea  rdi , [ tmp3096 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_Hash
  pop rdi
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ exprHash ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3112 ], eax
l3113:
  mov eax, dword [ tmp3112 ]
  mov dword [ tmp3102 ], eax
l3111:
  cmp dword [ tmp3102 ], 0
  jz l3115
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 1
  lea  rcx, [ caseNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ caseNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 1
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ caseValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ caseValue ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ caseNode ]
  lea  rdi , [ tmp3092 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashForCodeComparison
  pop rdi
  lea  rcx, [ caseNodeHash ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseNodeHash ]
  lea rdx, [ tmp3092 ]
  call __MOLD_VariantMove
  lea  rcx, [ reusedNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ caseHashMap ]
  lea  rdx , [ caseNodeHash ]
  lea  r8 , [ reusedNode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3117 ], 1
  mov eax, dword [ casesCnt ]
  add eax, dword [ tmp3117 ]
  mov dword [ casesCnt ], eax
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ reusedNode ]
  lea  rdi , [ tmp3096 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3112 ], eax
  cmp dword [ tmp3112 ], 0
  jz l3118
  lea  rcx , [ caseHashMap ]
  lea  rdx , [ caseNodeHash ]
  lea  r8 , [ caseNode ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newChildren ]
  lea  rdx , [ caseNode ]
  lea  rdi , [ tmp3092 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3092 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3096 + Variant_t.value], 0
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3101 ]
  lea rdx, [ caseValue ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3092 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ caseNode ]
  lea  rdx , [ __literal362 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantStoreAtKey
  jmp l3119
l3118:
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ reusedNode ]
  lea  rdx , [ __literal362 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ caseValue ]
  lea  rdi , [ tmp3092 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
l3119:
  lea  rcx , [ valueMax ]
  lea  rdx , [ caseValue ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3112 ], eax
  cmp dword [ tmp3112 ], 0
  jz l3120
  lea  rcx, [ valueMax ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueMax ]
  lea rdx, [ caseValue ]
  call __MOLD_VariantMove
l3120:
l3121:
  lea  rcx , [ caseValue ]
  lea  rdx , [ valueMin ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3112 ], eax
  cmp dword [ tmp3112 ], 0
  jz l3122
  lea  rcx, [ valueMin ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueMin ]
  lea rdx, [ caseValue ]
  call __MOLD_VariantMove
l3122:
l3123:
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3096 ]
  lea  rdi , [ tmp3101 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3093 ], 3
  mov [ tmp3096 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3096 + Variant_t.value], rax
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3112 ], eax
  cmp dword [ tmp3112 ], 0
  jz l3124
  mov dword [ goOn ], 1
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 2
  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ currentIfNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
l3124:
l3125:
l3115:
l3116:
l3109:
l3110:
  jmp l3107
l3108:
  mov dword [ tmp3093 ], 3
  mov eax, dword [ casesCnt ]
  cmp eax, dword [ tmp3093 ]
  jl l3126
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newChildren ]
  lea  rdi , [ tmp3101 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3093 ], 1
  mov [ tmp3103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3103 + Variant_t.value], rax
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3103 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp3096 + Variant_t.value]
  mov dword [ tmp3093 ], eax
  lea  rcx, [ lastCaseNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ lastCaseNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3102 ], 1
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 150
  mov [ tmp3103 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3103 + Variant_t.value], rax
  lea  rcx , [ tmp3096 ]
  lea  rdx , [ tmp3103 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3112 ], eax
  cmp dword [ tmp3112 ], 0
  jnz l3128
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3101 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3093 ], 1
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3101 ]
  lea  rdx , [ tmp3093 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3103 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3096 ]
  lea  rdi , [ tmp3103 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashForCodeComparison
  pop rdi
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ lastCaseNode ]
  lea  rdi , [ tmp3096 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HashForCodeComparison
  pop rdi
  lea  rcx , [ tmp3103 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3092 + Variant_t.value]
  mov dword [ tmp3102 ], eax
l3128:
  cmp dword [ tmp3102 ], 0
  jz l3129
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newChildren ]
  lea  rdx , [ currentIfNode ]
  lea  rdi , [ tmp3092 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ currentIfNode ]
  lea  rdi , [ tmp3092 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerIf__processNode$2
  pop rdi
l3129:
l3130:
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3093 ], 170
  mov [ tmp3092 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3093 ]
  mov [ tmp3092 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3092 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal363 ]
  lea  r8 , [ valueMin ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal364 ]
  lea  r8 , [ valueMax ]
  call  __MOLD_VariantStoreAtKey
l3126:
l3127:
  jmp l3105
l3104:
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l3132
l3131:
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp3092 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerIf__processNode$2
  pop rdi
  ret
l3132:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3131 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
l3105:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3092 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3101 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3103 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3106 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseHashMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ exprHash ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueMin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueMax ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseNodeHash ]
  call __MOLD_VariantDestroy
  lea  rcx, [ reusedNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastCaseNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 448
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore cond
  restore tmp3092
  restore tmp3093
  restore tmp3094
  restore tmp3096
  restore tmp3097
  restore tmp3099
  restore tmp3101
  restore tmp3102
  restore tmp3103
  restore tmp3106
  restore tmp3112
  restore tmp3114
  restore tmp3117
  restore newChildren
  restore caseHashMap
  restore exprHash
  restore valueMin
  restore valueMax
  restore goOn
  restore currentIfNode
  restore casesCnt
  restore caseNode
  restore caseValue
  restore caseNodeHash
  restore reusedNode
  restore lastCaseNode
  restore oneChild
; -----------------------------------------------
; function __ASTOptimizerIf_processNode$2
; -----------------------------------------------
__ASTOptimizerIf_processNode$2:
  ; init frame
  ; ----------
  tmp3133 EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3133 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3133 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp3133 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerIf__processNode$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3133 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3133
; -----------------------------------------------
; function __ASTOptimizerInline_constructor$2
; -----------------------------------------------
__ASTOptimizerInline_constructor$2:
  ; init frame
  ; ----------
  tmp3134 EQU rbp - 24 ; 16 bytes
  app EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp3134 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3134 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp3134 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*18]
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3134 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3134 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp3134 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*82]
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3134 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3134 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp3134
; -----------------------------------------------
; function __ASTOptimizerInline__debug$2
; -----------------------------------------------
__ASTOptimizerInline__debug$2:
  ; init frame
  ; ----------
  tmp3139 EQU rbp - 24 ; 16 bytes
  tmp3136 EQU rbp - 28 ; 4 bytes
  tmp3135 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3139 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3136 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3136 ], eax
  setz al
  xor  al, cl
  jnz l3137
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3137:
l3138:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3139 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3135
  restore tmp3136
  restore tmp3139
; -----------------------------------------------
; function __ASTOptimizerInline__resolveParamsForInline$4
; -----------------------------------------------
__ASTOptimizerInline__resolveParamsForInline$4:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  childIdx EQU rbp - 40 ; 16 bytes
  symbolInfo EQU rbp - 56 ; 16 bytes
  tmp3157 EQU rbp - 72 ; 16 bytes
  tmp3154 EQU rbp - 76 ; 4 bytes
  tmp3152 EQU rbp - 80 ; 4 bytes
  tmp3150 EQU rbp - 84 ; 4 bytes
  tmp3147 EQU rbp - 88 ; 4 bytes
  tmp3144 EQU rbp - 92 ; 4 bytes
  tmp3143 EQU rbp - 108 ; 16 bytes
  tmp3142 EQU rbp - 112 ; 4 bytes
  tmp3141 EQU rbp - 128 ; 16 bytes
  tmp3140 EQU rbp - 144 ; 16 bytes
  rv EQU rdi
  newOpcode EQU rbp - 160 ; 16 bytes
  newValue EQU rbp - 176 ; 16 bytes
  children EQU rbp - 192 ; 16 bytes
  newChildren EQU rbp - 208 ; 16 bytes
  node EQU rbp - 224 ; 16 bytes
  namePrefix EQU rbp - 240 ; 16 bytes
  symbolTable EQU rbp - 256 ; 16 bytes
  this EQU rbp - 272 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ namePrefix ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ node ], xmm0
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [newOpcode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3140 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3141 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3143 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3157 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3141 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3142 ], 201
  mov [ tmp3143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3142 ]
  mov [ tmp3143 + Variant_t.value], rax
  lea  rcx , [ tmp3141 ]
  lea  rdx , [ tmp3143 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3140 + Variant_t.value]
  mov dword [ tmp3144 ], eax
  cmp dword [ tmp3144 ], 0
  jz l3145
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3141 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp3141 ]
  lea  rdi, [ tmp3143 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  mov dword [ tmp3147 ], 1
  mov eax, dword [ tmp3147 ]
  mov [ tmp3141 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3141 + Variant_t.value], rax
  lea  rcx , [ tmp3143 ]
  lea  rdx , [ tmp3141 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3140 + Variant_t.value]
  mov dword [ tmp3147 ], eax
  cmp dword [ tmp3147 ], 0
  jz l3148
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3141 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3140 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp3141 ]
  lea  rdi, [ tmp3140 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp3140 ]
  call __MOLD_VariantMove
  mov dword [ tmp3150 ], 1
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp3141 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3142 ], 3
  mov [ tmp3143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3142 ]
  mov [ tmp3143 + Variant_t.value], rax
  lea  rcx , [ tmp3141 ]
  lea  rdx , [ tmp3143 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3140 + Variant_t.value]
  mov dword [ tmp3152 ], eax
  cmp dword [ tmp3152 ], 0
  jnz l3151
  mov dword [ tmp3152 ], 1
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp3143 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3142 ], 4
  mov [ tmp3141 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3142 ]
  mov [ tmp3141 + Variant_t.value], rax
  lea  rcx , [ tmp3143 ]
  lea  rdx , [ tmp3141 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3140 + Variant_t.value]
  mov dword [ tmp3154 ], eax
  cmp dword [ tmp3154 ], 0
  jnz l3153
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp3141 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3142 ], 1
  mov [ tmp3143 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3142 ]
  mov [ tmp3143 + Variant_t.value], rax
  lea  rcx , [ tmp3141 ]
  lea  rdx , [ tmp3143 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3140 + Variant_t.value]
  mov dword [ tmp3152 ], eax
l3153:
  mov eax, dword [ tmp3152 ]
  mov dword [ tmp3150 ], eax
l3151:
  cmp dword [ tmp3150 ], 0
  jz l3155
  lea  rcx, [ tmp3140 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ tmp3140 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin
l3155:
l3156:
  jmp l3149
l3148:
  lea  rcx, [ tmp3140 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ tmp3140 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin
l3149:
  jmp l3146
l3145:
; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l3159
l3158:
  mov eax, dword [ childIdx + Variant_t.value]
  mov dword [ tmp3142 ], eax
  lea  rcx, [ tmp3140 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ namePrefix ]
  lea  r9 , [ childNode ]
  lea  rdi , [ tmp3140 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__resolveParamsForInline$4
  pop rdi
  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp3142 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l3159:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3158 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys childIdx values childNode
; -----------------------------
; 
l3146:
  lea  rcx, [ tmp3140 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3140 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp3141 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3143 ]
  lea rdx, [ tmp3141 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3140 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3143 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3143 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3140 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3143 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3143 ]
  lea rdx, [ newChildren ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3140 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3143 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3143 ]
  lea rdx, [ newValue ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3140 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3143 ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ rv ]
  lea rdx, [ tmp3140 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3140 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3141 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3143 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childIdx
  ; Skipped loop iterator childNode

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore namePrefix
  restore node
  restore newChildren
  restore children
  restore newValue
  restore newOpcode
  restore rv
  restore tmp3140
  restore tmp3141
  restore tmp3142
  restore tmp3143
  restore tmp3144
  restore tmp3147
  restore tmp3150
  restore tmp3152
  restore tmp3154
  restore tmp3157
  restore symbolInfo
  restore childIdx
  restore childNode
; -----------------------------------------------
; function __ASTOptimizerInline__injectParamInit$5
; -----------------------------------------------
__ASTOptimizerInline__injectParamInit$5:
  ; init frame
  ; ----------
  tmp3168 EQU rbp - 24 ; 16 bytes
  tmp3167 EQU rbp - 40 ; 16 bytes
  tmp3166 EQU rbp - 56 ; 16 bytes
  tmp3165 EQU rbp - 72 ; 16 bytes
  tmp3164 EQU rbp - 88 ; 16 bytes
  tmp3163 EQU rbp - 104 ; 16 bytes
  tmp3162 EQU rbp - 120 ; 16 bytes
  tmp3161 EQU rbp - 136 ; 16 bytes
  tmp3160 EQU rbp - 152 ; 16 bytes
  paramInitValueNode EQU rbp - 168 ; 16 bytes
  paramName EQU rbp - 184 ; 16 bytes
  symbolTable EQU rbp - 200 ; 16 bytes
  dst EQU rbp - 216 ; 16 bytes
  this EQU rbp - 232 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramName ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ paramInitValueNode ], xmm0
  mov [tmp3160 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3161 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3162 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3163 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3164 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3165 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3166 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3167 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3168 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3160 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ paramName ]
  lea  rdi, [ tmp3160 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*25]
  pop rdi
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3161 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3163 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp3163 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp3162 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3162 ]
  lea rdx, [ tmp3163 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3162 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3162 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_DECLARE_OR_ASSIGN ]
  mov [ tmp3162 + Variant_t.value], rax
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3162 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3163 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3163 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3164 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3164 + Variant_t.value], 0
  lea  rcx, [ tmp3166 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3166 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3168 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp3168 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  lea  rcx, [ tmp3167 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3167 ]
  lea rdx, [ tmp3168 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3166 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3167 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3167 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_VARIABLE ]
  mov [ tmp3167 + Variant_t.value], rax
  lea  rcx , [ tmp3166 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3167 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3167 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3167 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp3166 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3167 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3167 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3167 ]
  lea rdx, [ paramName ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3166 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3167 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3165 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3165 ]
  lea rdx, [ tmp3166 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3163 ]
  lea  rdx , [ tmp3164 ]
  lea  r8 , [ tmp3165 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3164 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3164 + Variant_t.value], 1
  lea  rcx, [ tmp3165 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3165 ]
  lea rdx, [ paramInitValueNode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3163 ]
  lea  rdx , [ tmp3164 ]
  lea  r8 , [ tmp3165 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp3162 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3162 ]
  lea rdx, [ tmp3163 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3162 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3160 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ dst ]
  lea  rdx , [ tmp3161 ]
  lea  rdi , [ tmp3160 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3160 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3162 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3163 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3164 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3165 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3166 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3167 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3168 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore dst
  restore symbolTable
  restore paramName
  restore paramInitValueNode
  restore tmp3160
  restore tmp3161
  restore tmp3162
  restore tmp3163
  restore tmp3164
  restore tmp3165
  restore tmp3166
  restore tmp3167
  restore tmp3168
; -----------------------------------------------
; function __ASTOptimizerInline__injectFunctionBody$4
; -----------------------------------------------
__ASTOptimizerInline__injectFunctionBody$4:
  ; init frame
  ; ----------
  newNode EQU rbp - 24 ; 16 bytes
  childNode EQU rbp - 40 ; 16 bytes
  paramInitValueNode EQU rbp - 56 ; 16 bytes
  paramNameWithPrefix EQU rbp - 72 ; 16 bytes
  oneParamName EQU rbp - 88 ; 16 bytes
  paramIdx EQU rbp - 104 ; 16 bytes
  paramName EQU rbp - 120 ; 16 bytes
  thizParamNode EQU rbp - 136 ; 16 bytes
  childIdx EQU rbp - 140 ; 4 bytes
  rvFullName EQU rbp - 156 ; 16 bytes
  rvName EQU rbp - 172 ; 16 bytes
  children EQU rbp - 188 ; 16 bytes
  bodyNode EQU rbp - 204 ; 16 bytes
  namePrefix EQU rbp - 220 ; 16 bytes
  params EQU rbp - 236 ; 16 bytes
  tmp3200 EQU rbp - 252 ; 16 bytes
  tmp3197 EQU rbp - 256 ; 4 bytes
  tmp3195 EQU rbp - 260 ; 4 bytes
  tmp3191 EQU rbp - 264 ; 4 bytes
  tmp3184 EQU rbp - 268 ; 4 bytes
  tmp3183 EQU rbp - 272 ; 4 bytes
  tmp3182 EQU rbp - 288 ; 16 bytes
  tmp3181 EQU rbp - 304 ; 16 bytes
  tmp3180 EQU rbp - 320 ; 16 bytes
  tmp3179 EQU rbp - 336 ; 16 bytes
  tmp3174 EQU rbp - 352 ; 16 bytes
  tmp3173 EQU rbp - 356 ; 4 bytes
  tmp3172 EQU rbp - 372 ; 16 bytes
  tmp3170 EQU rbp - 376 ; 4 bytes
  tmp3169 EQU rbp - 392 ; 16 bytes
  functionProto EQU rbp - 408 ; 16 bytes
  symbolInfo EQU rbp - 424 ; 16 bytes
  callNode EQU rbp - 440 ; 16 bytes
  symbolTable EQU rbp - 456 ; 16 bytes
  dst EQU rbp - 472 ; 16 bytes
  this EQU rbp - 488 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 528

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ callNode ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [functionProto + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3169 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3172 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3174 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3179 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3180 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3181 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3182 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3200 + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [namePrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyNode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [rvName + Variant_t.type], VARIANT_UNDEFINED
  mov [rvFullName + Variant_t.type], VARIANT_UNDEFINED
  mov [thizParamNode + Variant_t.type], VARIANT_UNDEFINED
  mov [paramName + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [paramNameWithPrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [paramInitValueNode + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ functionProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ functionProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3170 ], 0
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ functionProto ]
  lea  rdi , [ tmp3172 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3173 ], eax
  cmp dword [ tmp3173 ], 0
  jz l3171
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal260 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3173 ], 1
  mov eax, dword [ tmp3173 ]
  mov [ tmp3174 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3174 + Variant_t.value], rax
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ tmp3174 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3170 ], eax
l3171:
  cmp dword [ tmp3170 ], 0
  jz l3175
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal261 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3173 ], 1
  mov eax, dword [ tmp3173 ]
  mov [ tmp3172 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3172 + Variant_t.value], rax
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ tmp3172 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3173 ], eax
  cmp dword [ tmp3173 ], 0
  jz l3177
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3174 ]
  lea  rdi , [ tmp3172 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3182 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp3182 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3181 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal263 ]
  lea  rdx , [ tmp3182 ]
  lea  r8 , [ tmp3181 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3180 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ tmp3181 ]
  lea  r8 , [ tmp3180 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3179 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal367 ]
  lea  rdx , [ tmp3180 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3179 ]
  lea  rdi , [ tmp3169 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__debug$2
  pop rdi
  jmp l3178
l3177:
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3172 ]
  lea  rdi , [ tmp3169 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3180 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3169 ]
  lea  rdx , [ __literal244 ]
  lea  r8 , [ tmp3180 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ namePrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal368 ]
  lea  rdx , [ tmp3180 ]
  lea  r8 , [ namePrefix ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3183 ], 0
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ tmp3183 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3183 ], 1
  mov [ tmp3174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3183 ]
  mov [ tmp3174 + Variant_t.value], rax
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ tmp3174 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantSub
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rvFullName ]
  call __MOLD_VariantDestroy
  lea rcx, [ rvFullName ]
  lea rdx, [ rvName ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rvName ]
  lea  rdi , [ tmp3174 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3184 ], eax
  cmp dword [ tmp3184 ], 0
  jz l3185
  lea  rcx, [ rvFullName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ rvName ]
  lea  r8 , [ rvFullName ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ rvFullName ]
  lea  rdi, [ tmp3169 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*39]
  pop rdi
l3185:
l3186:
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3172 ]
  lea  rdi , [ tmp3174 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3184 ], eax
  cmp dword [ tmp3184 ], 0
  jz l3187
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3183 ], 0
  lea  rcx, [ thizParamNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ tmp3183 ]
  lea  r8 , [ thizParamNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ paramName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ __literal17 ]
  lea  r8 , [ paramName ]
  call  __MOLD_VariantStringJoin
  mov dword [ childIdx ], 1
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ paramName ]
  lea  rax , [ thizParamNode ]
  push rax
  lea  rdi , [ tmp3169 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__injectParamInit$5
  add rsp, 8
  pop rdi
  jmp l3188
l3187:
  mov dword [ childIdx ], 0
l3188:
; 
; -----------------------------
; BEGIN: for keys paramIdx values oneParamName
; 
  jmp l3190
l3189:
  lea  rcx, [ paramNameWithPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ oneParamName ]
  lea  r8 , [ paramNameWithPrefix ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ paramInitValueNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ paramInitValueNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ paramNameWithPrefix ]
  lea  rax , [ paramInitValueNode ]
  push rax
  lea  rdi , [ tmp3169 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__injectParamInit$5
  add rsp, 8
  pop rdi
  mov dword [ tmp3191 ], 1
  mov eax, dword [ childIdx ]
  add eax, dword [ tmp3191 ]
  mov dword [ childIdx ], eax
  ret
l3190:
  lea  rcx , [ params ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ oneParamName ]
  lea  r9 , [ l3189 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys paramIdx values oneParamName
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3193
l3192:
  mov dword [ tmp3184 ], 1
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3183 ], 152
  mov [ tmp3172 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3183 ]
  mov [ tmp3172 + Variant_t.value], rax
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ tmp3172 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3195 ], eax
  cmp dword [ tmp3195 ], 0
  jnz l3194
  mov dword [ tmp3195 ], 1
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3197 ], eax
  cmp dword [ tmp3197 ], 0
  jnz l3196
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable ]
  lea  rdx , [ __literal174 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3183 ], 1
  mov [ tmp3174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3183 ]
  mov [ tmp3174 + Variant_t.value], rax
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ tmp3172 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3195 ], eax
l3196:
  mov eax, dword [ tmp3195 ]
  mov dword [ tmp3184 ], eax
l3194:
  cmp dword [ tmp3184 ], 0
  jz l3198
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3174 ]
  lea  r8 , [ namePrefix ]
  lea  r9 , [ childNode ]
  lea  rdi , [ tmp3169 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__resolveParamsForInline$4
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp3169 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ dst ]
  lea  rdx , [ newNode ]
  lea  rdi , [ tmp3169 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3195 ], 1
  mov eax, dword [ tmp3195 ]
  mov [ tmp3172 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3172 + Variant_t.value], rax
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ newNode ]
  lea  r9 , [ tmp3172 ]
  lea  rdi, [ tmp3169 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*62]
  pop rdi
l3198:
l3199:
  ret
l3193:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3192 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3169 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3200 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3200 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3200 ]
  lea  rdi , [ tmp3174 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3181 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal370 ]
  lea  rdx , [ tmp3174 ]
  lea  r8 , [ tmp3181 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3180 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ tmp3181 ]
  lea  r8 , [ tmp3180 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3179 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal369 ]
  lea  rdx , [ tmp3180 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3179 ]
  lea  rdi , [ tmp3169 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__debug$2
  pop rdi
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3172 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3183 ], 101
  mov [ tmp3174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3183 ]
  mov [ tmp3174 + Variant_t.value], rax
  lea  rcx , [ tmp3172 ]
  lea  rdx , [ tmp3174 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3169 + Variant_t.value]
  mov dword [ tmp3184 ], eax
  cmp dword [ tmp3184 ], 0
  jz l3201
  mov dword [ tmp3183 ], 999
  mov [ tmp3169 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3183 ]
  mov [ tmp3169 + Variant_t.value], rax
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantStoreAtKey
  jmp l3202
l3201:
  mov dword [ tmp3183 ], 201
  mov [ tmp3169 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3183 ]
  mov [ tmp3169 + Variant_t.value], rax
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3179 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ rvName ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3179 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ rvFullName ]
  lea  rdi, [ tmp3169 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*21]
  pop rdi
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantStoreAtKey
l3202:
l3178:
l3175:
l3176:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ functionProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3169 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3172 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3200 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvFullName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thizParamNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramIdx
  ; Skipped loop iterator oneParamName
  lea  rcx, [ paramInitValueNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy

  add  rsp, 528
  pop  rbp
  ret

  restore this
  restore dst
  restore symbolTable
  restore callNode
  restore symbolInfo
  restore functionProto
  restore tmp3169
  restore tmp3170
  restore tmp3172
  restore tmp3173
  restore tmp3174
  restore tmp3179
  restore tmp3180
  restore tmp3181
  restore tmp3182
  restore tmp3183
  restore tmp3184
  restore tmp3191
  restore tmp3195
  restore tmp3197
  restore tmp3200
  restore params
  restore namePrefix
  restore bodyNode
  restore children
  restore rvName
  restore rvFullName
  restore childIdx
  restore thizParamNode
  restore paramName
  restore paramIdx
  restore oneParamName
  restore paramNameWithPrefix
  restore paramInitValueNode
  restore childNode
  restore newNode
; -----------------------------------------------
; function __ASTOptimizerInline__processNode_injectInlineFunctions$4
; -----------------------------------------------
__ASTOptimizerInline__processNode_injectInlineFunctions$4:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 28 ; 4 bytes
  startIdx EQU rbp - 32 ; 4 bytes
  tmp3218 EQU rbp - 48 ; 16 bytes
  tmp3215 EQU rbp - 52 ; 4 bytes
  tmp3212 EQU rbp - 56 ; 4 bytes
  tmp3208 EQU rbp - 60 ; 4 bytes
  tmp3207 EQU rbp - 76 ; 16 bytes
  tmp3206 EQU rbp - 80 ; 4 bytes
  tmp3204 EQU rbp - 84 ; 4 bytes
  tmp3203 EQU rbp - 100 ; 16 bytes
  childrenCnt EQU rbp - 116 ; 16 bytes
  children EQU rbp - 132 ; 16 bytes
  opcode EQU rbp - 148 ; 16 bytes
  node EQU rbp - 164 ; 16 bytes
  symbolTable EQU rbp - 180 ; 16 bytes
  dst EQU rbp - 196 ; 16 bytes
  this EQU rbp - 212 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3203 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3207 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3218 + Variant_t.type], VARIANT_UNDEFINED
  mov [childNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3204 ], 0
  mov dword [ tmp3206 ], 500
  mov [ tmp3207 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3206 ]
  mov [ tmp3207 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3207 ]
  lea  r8 , [ tmp3203 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3203 + Variant_t.value]
  mov dword [ tmp3208 ], eax
  cmp dword [ tmp3208 ], 0
  jz l3205
  mov dword [ tmp3206 ], 501
  mov [ tmp3207 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3206 ]
  mov [ tmp3207 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3207 ]
  lea  r8 , [ tmp3203 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3203 + Variant_t.value]
  mov dword [ tmp3204 ], eax
l3205:
  cmp dword [ tmp3204 ], 0
  jz l3209
  mov dword [ tmp3208 ], 1
  mov dword [ tmp3206 ], 150
  mov [ tmp3207 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3206 ]
  mov [ tmp3207 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3207 ]
  lea  r8 , [ tmp3203 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3203 + Variant_t.value]
  mov dword [ tmp3212 ], eax
  cmp dword [ tmp3212 ], 0
  jnz l3211
  mov dword [ tmp3206 ], 153
  mov [ tmp3207 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3206 ]
  mov [ tmp3207 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3207 ]
  lea  r8 , [ tmp3203 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3203 + Variant_t.value]
  mov dword [ tmp3208 ], eax
l3211:
  cmp dword [ tmp3208 ], 0
  jz l3213
  mov dword [ startIdx ], 1
  jmp l3214
l3213:
  mov dword [ startIdx ], 0
l3214:
  mov dword [ tmp3206 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3215 ], eax
  mov eax, dword [ startIdx ]
  mov dword [ idx ], eax
l3216:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3215 ]
  jge l3217
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ childNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3203 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ childNode ]
  lea  rdi , [ tmp3203 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$4
  pop rdi
  mov eax, dword [ idx ]
  add eax, dword [ tmp3206 ]
  mov dword [ idx ], eax
  jmp l3216
l3217:
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3215 ], 152
  mov [ tmp3218 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3215 ]
  mov [ tmp3218 + Variant_t.value], rax
  lea  rcx , [ tmp3207 ]
  lea  rdx , [ tmp3218 ]
  lea  r8 , [ tmp3203 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3203 + Variant_t.value]
  mov dword [ tmp3208 ], eax
  cmp dword [ tmp3208 ], 0
  jz l3219
  lea  rcx, [ tmp3203 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ node ]
  lea  rdi , [ tmp3203 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__injectFunctionBody$4
  pop rdi
l3219:
l3220:
l3209:
l3210:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3203 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3218 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore dst
  restore symbolTable
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore tmp3203
  restore tmp3204
  restore tmp3206
  restore tmp3207
  restore tmp3208
  restore tmp3212
  restore tmp3215
  restore tmp3218
  restore startIdx
  restore idx
  restore childNode
; -----------------------------------------------
; function __ASTOptimizerInline__processNode$3
; -----------------------------------------------
__ASTOptimizerInline__processNode$3:
  ; init frame
  ; ----------
  childIdx EQU rbp - 12 ; 4 bytes
  __cse24 EQU rbp - 28 ; 16 bytes
  oneParam EQU rbp - 44 ; 16 bytes
  callParams EQU rbp - 60 ; 16 bytes
  rvalNode EQU rbp - 76 ; 16 bytes
  childNode EQU rbp - 92 ; 16 bytes
  tmp3244 EQU rbp - 96 ; 4 bytes
  tmp3243 EQU rbp - 100 ; 4 bytes
  tmp3240 EQU rbp - 104 ; 4 bytes
  tmp3234 EQU rbp - 108 ; 4 bytes
  tmp3232 EQU rbp - 112 ; 4 bytes
  tmp3229 EQU rbp - 116 ; 4 bytes
  tmp3224 EQU rbp - 120 ; 4 bytes
  tmp3223 EQU rbp - 136 ; 16 bytes
  tmp3222 EQU rbp - 152 ; 16 bytes
  tmp3221 EQU rbp - 168 ; 16 bytes
  newChildren EQU rbp - 184 ; 16 bytes
  children EQU rbp - 200 ; 16 bytes
  opcode EQU rbp - 216 ; 16 bytes
  node EQU rbp - 232 ; 16 bytes
  symbolTable EQU rbp - 248 ; 16 bytes
  this EQU rbp - 264 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3221 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3222 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3223 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [rvalNode + Variant_t.type], VARIANT_UNDEFINED
  mov [callParams + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [__cse24 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3223 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3222 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3223 ]
  lea  rdi , [ tmp3222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3222 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3221 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3221 + Variant_t.value]
  mov dword [ tmp3224 ], eax
  cmp dword [ tmp3224 ], 0
  jz l3225
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
l3225:
l3226:
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3228
l3227:
  lea  rcx, [ tmp3222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3222 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3229 ], 205
  mov [ tmp3223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3229 ]
  mov [ tmp3223 + Variant_t.value], rax
  lea  rcx , [ tmp3222 ]
  lea  rdx , [ tmp3223 ]
  lea  r8 , [ tmp3221 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3221 + Variant_t.value]
  mov dword [ tmp3224 ], eax
  cmp dword [ tmp3224 ], 0
  jz l3230
  lea  rcx, [ tmp3223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3223 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3229 ], 1
  lea  rcx, [ rvalNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3223 ]
  lea  rdx , [ tmp3229 ]
  lea  r8 , [ rvalNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newChildren ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ rvalNode ]
  lea  rdi , [ tmp3221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$4
  pop rdi
  jmp l3231
l3230:
  mov dword [ tmp3232 ], 1
  lea  rcx, [ tmp3223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3223 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3229 ], 152
  mov [ tmp3222 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3229 ]
  mov [ tmp3222 + Variant_t.value], rax
  lea  rcx , [ tmp3223 ]
  lea  rdx , [ tmp3222 ]
  lea  r8 , [ tmp3221 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3221 + Variant_t.value]
  mov dword [ tmp3234 ], eax
  cmp dword [ tmp3234 ], 0
  jnz l3233
  lea  rcx, [ tmp3222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3222 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3229 ], 106
  mov [ tmp3223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3229 ]
  mov [ tmp3223 + Variant_t.value], rax
  lea  rcx , [ tmp3222 ]
  lea  rdx , [ tmp3223 ]
  lea  r8 , [ tmp3221 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3221 + Variant_t.value]
  mov dword [ tmp3232 ], eax
l3233:
  cmp dword [ tmp3232 ], 0
  jz l3235
  lea  rcx, [ callParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ callParams ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values oneParam
; 
  jmp l3238
l3237:
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newChildren ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ oneParam ]
  lea  rdi , [ tmp3221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$4
  pop rdi
  ret
l3238:
  lea  rcx , [ callParams ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l3237 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newChildren ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ childNode ]
  lea  rdi , [ tmp3221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$4
  pop rdi
  jmp l3236
l3235:
  mov dword [ tmp3234 ], 1
  mov dword [ tmp3229 ], 150
  mov [ tmp3223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3229 ]
  mov [ tmp3223 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3223 ]
  lea  r8 , [ tmp3221 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3221 + Variant_t.value]
  mov dword [ tmp3240 ], eax
  cmp dword [ tmp3240 ], 0
  jnz l3239
  mov dword [ tmp3229 ], 153
  mov [ tmp3223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3229 ]
  mov [ tmp3223 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3223 ]
  lea  r8 , [ tmp3221 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3221 + Variant_t.value]
  mov dword [ tmp3234 ], eax
l3239:
  cmp dword [ tmp3234 ], 0
  jz l3241
  lea  rcx, [ __cse24 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ __cse24 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3229 ], 1
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse24 ]
  lea  rdi , [ tmp3221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov eax, dword [ tmp3221 + Variant_t.value]
  mov dword [ tmp3243 ], eax
  mov dword [ childIdx ], 1
l3245:
  mov eax, dword [ childIdx ]
  cmp eax, dword [ tmp3243 ]
  jge l3246
  lea  rcx, [ tmp3223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse24 ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ tmp3223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp3223 ]
  lea  rdi , [ tmp3221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__processNode$3
  pop rdi
  mov eax, dword [ childIdx ]
  add eax, dword [ tmp3229 ]
  mov dword [ childIdx ], eax
  jmp l3245
l3246:
  jmp l3242
l3241:
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp3221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__processNode$3
  pop rdi
l3242:
l3236:
l3231:
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newChildren ]
  lea  rdx , [ childNode ]
  lea  rdi , [ tmp3221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  ret
l3228:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3227 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3221 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3222 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3223 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ rvalNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ callParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam
  lea  rcx, [ __cse24 ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore opcode
  restore children
  restore newChildren
  restore tmp3221
  restore tmp3222
  restore tmp3223
  restore tmp3224
  restore tmp3229
  restore tmp3232
  restore tmp3234
  restore tmp3240
  restore tmp3243
  restore tmp3244
  restore childNode
  restore rvalNode
  restore callParams
  restore oneParam
  restore __cse24
  restore childIdx
; -----------------------------------------------
; function __ASTOptimizerInline_processNode$2
; -----------------------------------------------
__ASTOptimizerInline_processNode$2:
  ; init frame
  ; ----------
  tmp3248 EQU rbp - 24 ; 16 bytes
  tmp3247 EQU rbp - 40 ; 16 bytes
  node EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3247 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3248 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3248 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3247 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3248 ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp3247 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__processNode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3247 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3248 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3247
  restore tmp3248
; -----------------------------------------------
; function __ASTTypeCast_constructor$2
; -----------------------------------------------
__ASTTypeCast_constructor$2:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTTypeCast__debug$2
; -----------------------------------------------
__ASTTypeCast__debug$2:
  ; init frame
  ; ----------
  tmp3253 EQU rbp - 24 ; 16 bytes
  tmp3250 EQU rbp - 28 ; 4 bytes
  tmp3249 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3253 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3250 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3250 ], eax
  setz al
  xor  al, cl
  jnz l3251
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3251:
l3252:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3253 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3249
  restore tmp3250
  restore tmp3253
; -----------------------------------------------
; function __ASTTypeCast__processNode$2
; -----------------------------------------------
__ASTTypeCast__processNode$2:
  ; init frame
  ; ----------
  childOpcode EQU rbp - 24 ; 16 bytes
  childNode EQU rbp - 40 ; 16 bytes
  idx EQU rbp - 44 ; 4 bytes
  dstType EQU rbp - 48 ; 4 bytes
  yType EQU rbp - 64 ; 16 bytes
  xType EQU rbp - 80 ; 16 bytes
  astDataTypeRight EQU rbp - 96 ; 16 bytes
  astDataTypeLeft EQU rbp - 112 ; 16 bytes
  y EQU rbp - 128 ; 16 bytes
  x EQU rbp - 144 ; 16 bytes
  oneChild EQU rbp - 160 ; 16 bytes
  childrenCnt EQU rbp - 176 ; 16 bytes
  children EQU rbp - 192 ; 16 bytes
  tmp3329 EQU rbp - 196 ; 4 bytes
  tmp3326 EQU rbp - 200 ; 4 bytes
  tmp3321 EQU rbp - 204 ; 4 bytes
  tmp3319 EQU rbp - 208 ; 4 bytes
  tmp3317 EQU rbp - 212 ; 4 bytes
  tmp3297 EQU rbp - 228 ; 16 bytes
  tmp3296 EQU rbp - 244 ; 16 bytes
  tmp3295 EQU rbp - 260 ; 16 bytes
  tmp3294 EQU rbp - 276 ; 16 bytes
  tmp3293 EQU rbp - 292 ; 16 bytes
  tmp3292 EQU rbp - 308 ; 16 bytes
  tmp3291 EQU rbp - 324 ; 16 bytes
  tmp3286 EQU rbp - 328 ; 4 bytes
  tmp3284 EQU rbp - 332 ; 4 bytes
  tmp3282 EQU rbp - 336 ; 4 bytes
  tmp3280 EQU rbp - 340 ; 4 bytes
  tmp3276 EQU rbp - 344 ; 4 bytes
  tmp3273 EQU rbp - 348 ; 4 bytes
  tmp3269 EQU rbp - 352 ; 4 bytes
  tmp3266 EQU rbp - 356 ; 4 bytes
  tmp3265 EQU rbp - 372 ; 16 bytes
  tmp3262 EQU rbp - 376 ; 4 bytes
  tmp3257 EQU rbp - 380 ; 4 bytes
  tmp3256 EQU rbp - 396 ; 16 bytes
  tmp3255 EQU rbp - 400 ; 4 bytes
  tmp3254 EQU rbp - 416 ; 16 bytes
  opcode EQU rbp - 432 ; 16 bytes
  node EQU rbp - 448 ; 16 bytes
  this EQU rbp - 464 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 496

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3254 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3256 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3265 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3291 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3292 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3293 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3294 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3295 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3296 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3297 + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [astDataTypeLeft + Variant_t.type], VARIANT_UNDEFINED
  mov [astDataTypeRight + Variant_t.type], VARIANT_UNDEFINED
  mov [xType + Variant_t.type], VARIANT_UNDEFINED
  mov [yType + Variant_t.type], VARIANT_UNDEFINED
  mov [childNode + Variant_t.type], VARIANT_UNDEFINED
  mov [childOpcode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3255 ], 600
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3256 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3257 ], eax
  cmp dword [ tmp3257 ], 0
  jz l3258
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l3261
l3260:
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTypeCast__processNode$2
  pop rdi
  ret
l3261:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3260 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  mov dword [ tmp3255 ], 205
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3256 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3262 ], eax
  cmp dword [ tmp3262 ], 0
  jz l3263
  mov dword [ tmp3255 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3255 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3255 ], 201
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3266 ], eax
  cmp dword [ tmp3266 ], 0
  jz l3267
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ astDataTypeLeft ]
  call __MOLD_VariantDestroy
  lea rcx, [ astDataTypeLeft ]
  lea rdx, [ tmp3254 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ astDataTypeRight ]
  call __MOLD_VariantDestroy
  lea rcx, [ astDataTypeRight ]
  lea rdx, [ tmp3254 ]
  call __MOLD_VariantMove
  lea  rcx , [ astDataTypeLeft ]
  lea  rdx , [ astDataTypeRight ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3269 ], eax
  cmp dword [ tmp3269 ], 0
  jz l3270
  mov dword [ tmp3255 ], 1
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdx , [ astDataTypeLeft ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3270:
l3271:
  jmp l3268
l3267:
  mov dword [ tmp3269 ], 1
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3255 ], 203
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3256 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3273 ], eax
  cmp dword [ tmp3273 ], 0
  jnz l3272
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3255 ], 204
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3269 ], eax
l3272:
  cmp dword [ tmp3269 ], 0
  jz l3274
  mov dword [ tmp3255 ], 1
  mov dword [ tmp3276 ], -1
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3274:
l3275:
l3268:
  jmp l3264
l3263:
  mov dword [ tmp3266 ], 1
  mov dword [ tmp3255 ], 302
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3269 ], eax
  cmp dword [ tmp3269 ], 0
  jnz l3277
  mov dword [ tmp3269 ], 1
  mov dword [ tmp3255 ], 304
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3273 ], eax
  cmp dword [ tmp3273 ], 0
  jnz l3278
  mov dword [ tmp3273 ], 1
  mov dword [ tmp3255 ], 303
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3280 ], eax
  cmp dword [ tmp3280 ], 0
  jnz l3279
  mov dword [ tmp3280 ], 1
  mov dword [ tmp3255 ], 305
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3282 ], eax
  cmp dword [ tmp3282 ], 0
  jnz l3281
  mov dword [ tmp3282 ], 1
  mov dword [ tmp3255 ], 308
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3284 ], eax
  cmp dword [ tmp3284 ], 0
  jnz l3283
  mov dword [ tmp3284 ], 0
  mov dword [ tmp3255 ], 400
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3286 ], eax
  cmp dword [ tmp3286 ], 0
  jz l3285
  mov dword [ tmp3255 ], 405
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3284 ], eax
l3285:
  mov eax, dword [ tmp3284 ]
  mov dword [ tmp3282 ], eax
l3283:
  mov eax, dword [ tmp3282 ]
  mov dword [ tmp3280 ], eax
l3281:
  mov eax, dword [ tmp3280 ]
  mov dword [ tmp3273 ], eax
l3279:
  mov eax, dword [ tmp3273 ]
  mov dword [ tmp3269 ], eax
l3278:
  mov eax, dword [ tmp3269 ]
  mov dword [ tmp3266 ], eax
l3277:
  cmp dword [ tmp3266 ], 0
  jz l3287
  mov dword [ tmp3255 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3255 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea rcx, [ xType ]
  lea rdx, [ tmp3254 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ yType ]
  call __MOLD_VariantDestroy
  lea rcx, [ yType ]
  lea rdx, [ tmp3254 ]
  call __MOLD_VariantMove
  lea  rcx , [ xType ]
  lea  rdx , [ yType ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3269 ], eax
  cmp dword [ tmp3269 ], 0
  jz l3289
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3256 ]
  lea  rdi , [ tmp3265 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xType ]
  lea  rdi , [ tmp3256 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3297 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ yType ]
  lea  rdi , [ tmp3297 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3296 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3297 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp3296 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3295 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal373 ]
  lea  rdx , [ tmp3296 ]
  lea  r8 , [ tmp3295 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3294 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3295 ]
  lea  r8 , [ tmp3294 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3293 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal263 ]
  lea  rdx , [ tmp3294 ]
  lea  r8 , [ tmp3293 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3292 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3293 ]
  lea  r8 , [ tmp3292 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3291 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal372 ]
  lea  rdx , [ tmp3292 ]
  lea  r8 , [ tmp3291 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3291 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTypeCast__debug$2
  pop rdi
  mov dword [ tmp3273 ], 0
  mov dword [ tmp3255 ], 3
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ xType ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3280 ], eax
  cmp dword [ tmp3280 ], 0
  jz l3298
  mov dword [ tmp3255 ], 1
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ yType ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3273 ], eax
l3298:
  cmp dword [ tmp3273 ], 0
  jz l3299
  mov dword [ dstType ], 3
  jmp l3300
l3299:
  mov dword [ tmp3280 ], 0
  mov dword [ tmp3255 ], 1
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ xType ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3282 ], eax
  cmp dword [ tmp3282 ], 0
  jz l3301
  mov dword [ tmp3255 ], 3
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ yType ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3280 ], eax
l3301:
  cmp dword [ tmp3280 ], 0
  jz l3302
  mov dword [ dstType ], 3
  jmp l3303
l3302:
  mov dword [ dstType ], -1
l3303:
l3300:
  mov dword [ tmp3255 ], 0
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstType ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3255 ], 1
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstType ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3289:
l3290:
  jmp l3288
l3287:
  mov dword [ tmp3269 ], 1
  mov dword [ tmp3255 ], 500
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3273 ], eax
  cmp dword [ tmp3273 ], 0
  jnz l3304
  mov dword [ tmp3255 ], 501
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3269 ], eax
l3304:
  cmp dword [ tmp3269 ], 0
  jz l3305
  mov dword [ tmp3255 ], 0
  mov dword [ tmp3276 ], 0
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 5
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3256 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3255 ], 1
  mov dword [ tmp3276 ], 1
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 5
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3306
l3305:
  mov dword [ tmp3255 ], 350
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3273 ], eax
  cmp dword [ tmp3273 ], 0
  jz l3307
  mov dword [ tmp3255 ], 0
  mov dword [ tmp3276 ], 0
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 4
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3256 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3255 ], 1
  mov dword [ tmp3276 ], 1
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 4
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3308
l3307:
  mov dword [ tmp3255 ], 203
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3280 ], eax
  cmp dword [ tmp3280 ], 0
  jz l3309
  mov dword [ tmp3255 ], 1
  mov dword [ tmp3276 ], 1
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 1
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3256 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3310
l3309:
  mov dword [ tmp3255 ], 204
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3256 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3282 ], eax
  cmp dword [ tmp3282 ], 0
  jz l3311
  mov dword [ tmp3255 ], 1
  mov dword [ tmp3276 ], 1
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 4
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3312
l3311:
  mov dword [ tmp3255 ], 160
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3284 ], eax
  cmp dword [ tmp3284 ], 0
  jz l3313
  mov dword [ tmp3255 ], 1
  mov dword [ tmp3276 ], 1
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 1
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3256 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3255 ], 2
  mov dword [ tmp3276 ], 2
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 1
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3255 ], 3
  mov dword [ tmp3276 ], 3
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 1
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3256 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3314
l3313:
  mov dword [ tmp3255 ], 170
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3256 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3286 ], eax
  cmp dword [ tmp3286 ], 0
  jz l3315
  mov dword [ tmp3255 ], 0
  mov dword [ tmp3276 ], 0
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3276 ]
  lea  r8 , [ tmp3256 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3276 ], 1
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3276 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ tmp3265 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3255 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3316
l3315:
  mov dword [ tmp3317 ], 1
  mov dword [ tmp3255 ], 152
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3319 ], eax
  cmp dword [ tmp3319 ], 0
  jnz l3318
  mov dword [ tmp3319 ], 1
  mov dword [ tmp3255 ], 106
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3321 ], eax
  cmp dword [ tmp3321 ], 0
  jnz l3320
  mov dword [ tmp3255 ], 107
  mov [ tmp3265 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3255 ]
  mov [ tmp3265 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3265 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3319 ], eax
l3320:
  mov eax, dword [ tmp3319 ]
  mov dword [ tmp3317 ], eax
l3318:
  cmp dword [ tmp3317 ], 0
  jz l3322
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3319 ], eax
  cmp dword [ tmp3319 ], 0
  jz l3324
  mov dword [ tmp3255 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3276 ], eax
  mov dword [ idx ], 0
l3327:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3276 ]
  jge l3328
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3265 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3329 ], -1
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3329 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3265 ]
  lea  rdx , [ tmp3256 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp3255 ]
  mov dword [ idx ], eax
  jmp l3327
l3328:
l3324:
l3325:
  jmp l3323
l3322:
  mov dword [ tmp3326 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3276 ], eax
  mov dword [ idx ], 0
l3330:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3276 ]
  jge l3331
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ childNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ childOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ childOpcode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3319 ], 0
  mov dword [ tmp3329 ], 400
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3329 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx , [ tmp3256 ]
  lea  rdx , [ childOpcode ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3321 ], eax
  cmp dword [ tmp3321 ], 0
  jz l3332
  mov dword [ tmp3329 ], 502
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3329 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx , [ childOpcode ]
  lea  rdx , [ tmp3256 ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp3254 + Variant_t.value]
  mov dword [ tmp3319 ], eax
l3332:
  cmp dword [ tmp3319 ], 0
  jz l3333
  mov dword [ tmp3329 ], 5
  mov [ tmp3256 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3329 ]
  mov [ tmp3256 + Variant_t.value], rax
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ childNode ]
  lea  rdx , [ tmp3256 ]
  lea  rdi , [ tmp3254 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3254 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3333:
l3334:
  mov eax, dword [ idx ]
  add eax, dword [ tmp3326 ]
  mov dword [ idx ], eax
  jmp l3330
l3331:
l3323:
l3316:
l3314:
l3312:
l3310:
l3308:
l3306:
l3288:
l3264:
l3258:
l3259:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3254 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3256 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3265 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3297 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astDataTypeLeft ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astDataTypeRight ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ yType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childOpcode ]
  call __MOLD_VariantDestroy

  add  rsp, 496
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore tmp3254
  restore tmp3255
  restore tmp3256
  restore tmp3257
  restore tmp3262
  restore tmp3265
  restore tmp3266
  restore tmp3269
  restore tmp3273
  restore tmp3276
  restore tmp3280
  restore tmp3282
  restore tmp3284
  restore tmp3286
  restore tmp3291
  restore tmp3292
  restore tmp3293
  restore tmp3294
  restore tmp3295
  restore tmp3296
  restore tmp3297
  restore tmp3317
  restore tmp3319
  restore tmp3321
  restore tmp3326
  restore tmp3329
  restore children
  restore childrenCnt
  restore oneChild
  restore x
  restore y
  restore astDataTypeLeft
  restore astDataTypeRight
  restore xType
  restore yType
  restore dstType
  restore idx
  restore childNode
  restore childOpcode
; -----------------------------------------------
; function __ASTTypeCast_processNode$2
; -----------------------------------------------
__ASTTypeCast_processNode$2:
  ; init frame
  ; ----------
  tmp3335 EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3335 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3335 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp3335 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTypeCast__processNode$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3335 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3335
; -----------------------------------------------
; function __MIRCode_constructor$1
; -----------------------------------------------
__MIRCode_constructor$1:
  ; init frame
  ; ----------
  tmp3337 EQU rbp - 12 ; 4 bytes
  tmp3336 EQU rbp - 28 ; 16 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3336 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal377 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal381 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], -1
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], -1
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal387 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal388 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal390 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3336 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal392 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3337 ], 0
  mov [ tmp3336 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3337 ]
  mov [ tmp3336 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3336 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3336 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3336
  restore tmp3337
; -----------------------------------------------
; function __MIRCode_beginProc$5
; -----------------------------------------------
__MIRCode_beginProc$5:
  ; init frame
  ; ----------
  tmp3342 EQU rbp - 24 ; 16 bytes
  tmp3341 EQU rbp - 40 ; 16 bytes
  tmp3340 EQU rbp - 44 ; 4 bytes
  tmp3339 EQU rbp - 60 ; 16 bytes
  tmp3338 EQU rbp - 76 ; 16 bytes
  rv EQU rbp - 92 ; 16 bytes
  paramsCnt EQU rbp - 108 ; 16 bytes
  params EQU rbp - 124 ; 16 bytes
  name EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ params ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramsCnt ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ rv ], xmm0
  mov [tmp3338 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3339 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3341 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3342 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3338 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3338 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3339 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3339 + Variant_t.value]
  mov dword [ tmp3340 ], eax
  lea  rcx, [ tmp3339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3339 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3341 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3341 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3339 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3341 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3341 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3341 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3339 ]
  lea  rdx , [ __literal394 ]
  lea  r8 , [ tmp3341 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3341 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3341 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3339 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp3341 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3341 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3341 ]
  lea rdx, [ paramsCnt ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3339 ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ tmp3341 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3341 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3341 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3339 ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp3341 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ tmp3338 ]
  lea  rdx , [ tmp3340 ]
  lea  r8 , [ tmp3339 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3340 ], -1
  mov [ tmp3339 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3340 ]
  mov [ tmp3339 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal381 ]
  lea  r8 , [ tmp3339 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3340 ], -1
  mov [ tmp3339 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3340 ]
  mov [ tmp3339 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3339 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3338 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3339 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3341 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3342 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore name
  restore params
  restore paramsCnt
  restore rv
  restore tmp3338
  restore tmp3339
  restore tmp3340
  restore tmp3341
  restore tmp3342
; -----------------------------------------------
; function __MIRCode_endProc$1
; -----------------------------------------------
__MIRCode_endProc$1:
  ; init frame
  ; ----------
  tmp3346 EQU rbp - 24 ; 16 bytes
  tmp3345 EQU rbp - 28 ; 4 bytes
  tmp3344 EQU rbp - 44 ; 16 bytes
  tmp3343 EQU rbp - 60 ; 16 bytes
  __cse26 EQU rbp - 76 ; 16 bytes
  __cse25 EQU rbp - 92 ; 16 bytes
  proto EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [proto + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse25 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse26 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3343 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3344 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3346 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse26 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ __cse26 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3344 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ __cse26 + Variant_t.value]
  mov dword [ tmp3345 ], eax
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3344 ]
  lea  rdx , [ tmp3345 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ __cse25 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ __cse25 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ proto ]
  lea  rdx , [ __literal396 ]
  lea  r8 , [ __cse25 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3344 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3345 ], 1
  mov [ tmp3346 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3345 ]
  mov [ tmp3346 + Variant_t.value], rax
  lea  rcx , [ tmp3344 ]
  lea  rdx , [ tmp3346 ]
  lea  r8 , [ tmp3343 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ proto ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ tmp3343 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3346 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal394 ]
  lea  r8 , [ tmp3346 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ __cse25 ]
  lea  rdx , [ tmp3346 ]
  lea  r8 , [ tmp3343 ]
  call  __MOLD_VariantSub
  lea  rcx , [ proto ]
  lea  rdx , [ __literal398 ]
  lea  r8 , [ tmp3343 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3345 ], 1
  mov [ tmp3346 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3345 ]
  mov [ tmp3346 + Variant_t.value], rax
  lea  rcx , [ __cse26 ]
  lea  rdx , [ tmp3346 ]
  lea  r8 , [ tmp3343 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3343 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse25 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse26 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3343 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3344 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3346 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore proto
  restore __cse25
  restore __cse26
  restore tmp3343
  restore tmp3344
  restore tmp3345
  restore tmp3346
; -----------------------------------------------
; function __MIRCode_resolveLabel$2
; -----------------------------------------------
__MIRCode_resolveLabel$2:
  ; init frame
  ; ----------
  tmp3349 EQU rbp - 12 ; 4 bytes
  tmp3348 EQU rbp - 28 ; 16 bytes
  tmp3347 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  labelId EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3347 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3348 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3348 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3348 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3349 ], eax
  lea  rcx , [ tmp3348 ]
  lea  rdx , [ tmp3349 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3347 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3348 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore labelId
  restore rv
  restore tmp3347
  restore tmp3348
  restore tmp3349
; -----------------------------------------------
; function __MIRCode__resolveJmps$1
; -----------------------------------------------
__MIRCode__resolveJmps$1:
  ; init frame
  ; ----------
  targetIp EQU rbp - 24 ; 16 bytes
  labelId EQU rbp - 40 ; 16 bytes
  sourceIp EQU rbp - 56 ; 16 bytes
  idx EQU rbp - 60 ; 4 bytes
  tmp3361 EQU rbp - 64 ; 4 bytes
  tmp3358 EQU rbp - 68 ; 4 bytes
  tmp3357 EQU rbp - 72 ; 4 bytes
  tmp3356 EQU rbp - 88 ; 16 bytes
  tmp3353 EQU rbp - 92 ; 4 bytes
  tmp3352 EQU rbp - 96 ; 4 bytes
  tmp3351 EQU rbp - 100 ; 4 bytes
  tmp3350 EQU rbp - 116 ; 16 bytes
  code EQU rbp - 132 ; 16 bytes
  labels EQU rbp - 148 ; 16 bytes
  newUnresolvedJmpsCnt EQU rbp - 152 ; 4 bytes
  newUnresolvedJmps EQU rbp - 168 ; 16 bytes
  unresolvedJmpsCnt EQU rbp - 184 ; 16 bytes
  unresolvedJmps EQU rbp - 200 ; 16 bytes
  this EQU rbp - 216 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [unresolvedJmps + Variant_t.type], VARIANT_UNDEFINED
  mov [unresolvedJmpsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [newUnresolvedJmps + Variant_t.type], VARIANT_UNDEFINED
  mov [labels + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3350 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3356 + Variant_t.type], VARIANT_UNDEFINED
  mov [sourceIp + Variant_t.type], VARIANT_UNDEFINED
  mov [labelId + Variant_t.type], VARIANT_UNDEFINED
  mov [targetIp + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ unresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal392 ]
  lea  r8 , [ unresolvedJmps ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ unresolvedJmpsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ unresolvedJmpsCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newUnresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newUnresolvedJmps ]
  call  __MOLD_VariantArrayCreate
  mov dword [ newUnresolvedJmpsCnt ], 0
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ labels ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3351 ], 1
  mov eax, dword [ unresolvedJmpsCnt + Variant_t.value]
  mov dword [ tmp3352 ], eax
  mov dword [ idx ], 0
l3354:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3352 ]
  jge l3355
  lea  rcx, [ sourceIp ]
  call __MOLD_VariantDestroy
  lea  rcx , [ unresolvedJmps ]
  lea  rdx , [ idx ]
  lea  r8 , [ sourceIp ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ sourceIp + Variant_t.value]
  mov dword [ tmp3357 ], eax
  lea  rcx, [ tmp3356 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ tmp3357 ]
  lea  r8 , [ tmp3356 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3357 ], 1
  lea  rcx, [ labelId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3356 ]
  lea  rdx , [ tmp3357 ]
  lea  r8 , [ labelId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3357 ], eax
  lea  rcx, [ targetIp ]
  call __MOLD_VariantDestroy
  lea  rcx , [ labels ]
  lea  rdx , [ tmp3357 ]
  lea  r8 , [ targetIp ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3357 ], 0
  mov [ tmp3356 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3357 ]
  mov [ tmp3356 + Variant_t.value], rax
  lea  rcx , [ tmp3356 ]
  lea  rdx , [ targetIp ]
  lea  r8 , [ tmp3350 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp3350 + Variant_t.value]
  mov dword [ tmp3358 ], eax
  cmp dword [ tmp3358 ], 0
  jz l3359
  mov eax, dword [ sourceIp + Variant_t.value]
  mov dword [ tmp3357 ], eax
  lea  rcx, [ tmp3350 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ tmp3357 ]
  lea  r8 , [ tmp3350 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3357 ], 1
  lea  rcx , [ tmp3350 ]
  lea  rdx , [ tmp3357 ]
  lea  r8 , [ targetIp ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3360
l3359:
  lea  rcx , [ newUnresolvedJmps ]
  lea  rdx , [ newUnresolvedJmpsCnt ]
  lea  r8 , [ sourceIp ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3361 ], 1
  mov eax, dword [ newUnresolvedJmpsCnt ]
  add eax, dword [ tmp3361 ]
  mov dword [ newUnresolvedJmpsCnt ], eax
l3360:
  mov eax, dword [ idx ]
  add eax, dword [ tmp3351 ]
  mov dword [ idx ], eax
  jmp l3354
l3355:
  lea  rcx , [ this ]
  lea  rdx , [ __literal392 ]
  lea  r8 , [ newUnresolvedJmps ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3350 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newUnresolvedJmpsCnt ]
  mov [ tmp3350 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3350 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ unresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unresolvedJmpsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newUnresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3350 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3356 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sourceIp ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ targetIp ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore unresolvedJmps
  restore unresolvedJmpsCnt
  restore newUnresolvedJmps
  restore newUnresolvedJmpsCnt
  restore labels
  restore code
  restore tmp3350
  restore tmp3351
  restore tmp3352
  restore tmp3353
  restore tmp3356
  restore tmp3357
  restore tmp3358
  restore tmp3361
  restore idx
  restore sourceIp
  restore labelId
  restore targetIp
; -----------------------------------------------
; function __MIRCode_comment$2
; -----------------------------------------------
__MIRCode_comment$2:
  ; init frame
  ; ----------
  tmp3367 EQU rbp - 24 ; 16 bytes
  tmp3366 EQU rbp - 40 ; 16 bytes
  tmp3365 EQU rbp - 56 ; 16 bytes
  tmp3364 EQU rbp - 60 ; 4 bytes
  tmp3363 EQU rbp - 76 ; 16 bytes
  tmp3362 EQU rbp - 92 ; 16 bytes
  msg EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3362 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3363 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3365 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3366 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3367 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal390 ]
  lea  r8 , [ tmp3362 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3363 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ tmp3363 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3363 + Variant_t.value]
  mov dword [ tmp3364 ], eax
  lea  rcx, [ tmp3363 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3363 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3365 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3365 + Variant_t.value], 0
  lea  rcx, [ tmp3366 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3366 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3363 ]
  lea  rdx , [ tmp3365 ]
  lea  r8 , [ tmp3366 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3365 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3365 + Variant_t.value], 1
  lea  rcx, [ tmp3366 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3366 ]
  lea rdx, [ msg ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3363 ]
  lea  rdx , [ tmp3365 ]
  lea  r8 , [ tmp3366 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3362 ]
  lea  rdx , [ tmp3364 ]
  lea  r8 , [ tmp3363 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ tmp3362 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3364 ], 1
  mov [ tmp3366 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3364 ]
  mov [ tmp3366 + Variant_t.value], rax
  lea  rcx , [ tmp3362 ]
  lea  rdx , [ tmp3366 ]
  lea  r8 , [ tmp3363 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ tmp3363 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3362 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3363 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3365 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3366 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3367 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3362
  restore tmp3363
  restore tmp3364
  restore tmp3365
  restore tmp3366
  restore tmp3367
; -----------------------------------------------
; function __MIRCode_push0$2
; -----------------------------------------------
__MIRCode_push0$2:
  ; init frame
  ; ----------
  tmp3372 EQU rbp - 24 ; 16 bytes
  tmp3371 EQU rbp - 40 ; 16 bytes
  tmp3370 EQU rbp - 44 ; 4 bytes
  tmp3369 EQU rbp - 60 ; 16 bytes
  tmp3368 EQU rbp - 76 ; 16 bytes
  op EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  mov [tmp3368 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3369 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3371 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3372 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3368 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3369 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3369 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3369 + Variant_t.value]
  mov dword [ tmp3370 ], eax
  lea  rcx, [ tmp3369 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3369 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3371 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3371 + Variant_t.value], 0
  lea  rcx, [ tmp3372 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3372 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3369 ]
  lea  rdx , [ tmp3371 ]
  lea  r8 , [ tmp3372 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3368 ]
  lea  rdx , [ tmp3370 ]
  lea  r8 , [ tmp3369 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3368 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3368 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3370 ], 1
  mov [ tmp3372 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3370 ]
  mov [ tmp3372 + Variant_t.value], rax
  lea  rcx , [ tmp3368 ]
  lea  rdx , [ tmp3372 ]
  lea  r8 , [ tmp3369 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3369 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3368 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3369 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3371 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3372 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore op
  restore tmp3368
  restore tmp3369
  restore tmp3370
  restore tmp3371
  restore tmp3372
; -----------------------------------------------
; function __MIRCode_push1$3
; -----------------------------------------------
__MIRCode_push1$3:
  ; init frame
  ; ----------
  tmp3377 EQU rbp - 24 ; 16 bytes
  tmp3376 EQU rbp - 40 ; 16 bytes
  tmp3375 EQU rbp - 44 ; 4 bytes
  tmp3374 EQU rbp - 60 ; 16 bytes
  tmp3373 EQU rbp - 76 ; 16 bytes
  arg EQU rbp - 92 ; 16 bytes
  op EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg ], xmm0
  mov [tmp3373 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3374 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3376 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3377 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3373 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3373 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3374 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3374 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3374 + Variant_t.value]
  mov dword [ tmp3375 ], eax
  lea  rcx, [ tmp3374 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3374 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3376 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3376 + Variant_t.value], 0
  lea  rcx, [ tmp3377 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3377 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3374 ]
  lea  rdx , [ tmp3376 ]
  lea  r8 , [ tmp3377 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3376 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3376 + Variant_t.value], 1
  lea  rcx, [ tmp3377 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3377 ]
  lea rdx, [ arg ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3374 ]
  lea  rdx , [ tmp3376 ]
  lea  r8 , [ tmp3377 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3373 ]
  lea  rdx , [ tmp3375 ]
  lea  r8 , [ tmp3374 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3373 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3373 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3375 ], 1
  mov [ tmp3377 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3375 ]
  mov [ tmp3377 + Variant_t.value], rax
  lea  rcx , [ tmp3373 ]
  lea  rdx , [ tmp3377 ]
  lea  r8 , [ tmp3374 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3374 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3373 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3374 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3376 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3377 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore op
  restore arg
  restore tmp3373
  restore tmp3374
  restore tmp3375
  restore tmp3376
  restore tmp3377
; -----------------------------------------------
; function __MIRCode_push2$4
; -----------------------------------------------
__MIRCode_push2$4:
  ; init frame
  ; ----------
  tmp3382 EQU rbp - 24 ; 16 bytes
  tmp3381 EQU rbp - 40 ; 16 bytes
  tmp3380 EQU rbp - 44 ; 4 bytes
  tmp3379 EQU rbp - 60 ; 16 bytes
  tmp3378 EQU rbp - 76 ; 16 bytes
  arg2 EQU rbp - 92 ; 16 bytes
  arg1 EQU rbp - 108 ; 16 bytes
  op EQU rbp - 124 ; 16 bytes
  this EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ arg2 ], xmm0
  mov [tmp3378 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3379 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3381 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3382 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3378 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3378 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3379 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3379 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3379 + Variant_t.value]
  mov dword [ tmp3380 ], eax
  lea  rcx, [ tmp3379 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3379 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3381 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3381 + Variant_t.value], 0
  lea  rcx, [ tmp3382 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3382 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3379 ]
  lea  rdx , [ tmp3381 ]
  lea  r8 , [ tmp3382 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3381 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3381 + Variant_t.value], 1
  lea  rcx, [ tmp3382 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3382 ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3379 ]
  lea  rdx , [ tmp3381 ]
  lea  r8 , [ tmp3382 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3381 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3381 + Variant_t.value], 2
  lea  rcx, [ tmp3382 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3382 ]
  lea rdx, [ arg2 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3379 ]
  lea  rdx , [ tmp3381 ]
  lea  r8 , [ tmp3382 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3378 ]
  lea  rdx , [ tmp3380 ]
  lea  r8 , [ tmp3379 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3378 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3378 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3380 ], 1
  mov [ tmp3382 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3380 ]
  mov [ tmp3382 + Variant_t.value], rax
  lea  rcx , [ tmp3378 ]
  lea  rdx , [ tmp3382 ]
  lea  r8 , [ tmp3379 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3379 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3378 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3379 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3381 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3382 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore op
  restore arg1
  restore arg2
  restore tmp3378
  restore tmp3379
  restore tmp3380
  restore tmp3381
  restore tmp3382
; -----------------------------------------------
; function __MIRCode_push3$5
; -----------------------------------------------
__MIRCode_push3$5:
  ; init frame
  ; ----------
  tmp3387 EQU rbp - 24 ; 16 bytes
  tmp3386 EQU rbp - 40 ; 16 bytes
  tmp3385 EQU rbp - 44 ; 4 bytes
  tmp3384 EQU rbp - 60 ; 16 bytes
  tmp3383 EQU rbp - 76 ; 16 bytes
  arg3 EQU rbp - 92 ; 16 bytes
  arg2 EQU rbp - 108 ; 16 bytes
  arg1 EQU rbp - 124 ; 16 bytes
  op EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ arg2 ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ arg3 ], xmm0
  mov [tmp3383 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3384 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3386 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3387 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3383 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3383 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3384 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3384 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3384 + Variant_t.value]
  mov dword [ tmp3385 ], eax
  lea  rcx, [ tmp3384 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3384 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3386 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3386 + Variant_t.value], 0
  lea  rcx, [ tmp3387 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3387 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3384 ]
  lea  rdx , [ tmp3386 ]
  lea  r8 , [ tmp3387 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3386 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3386 + Variant_t.value], 1
  lea  rcx, [ tmp3387 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3387 ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3384 ]
  lea  rdx , [ tmp3386 ]
  lea  r8 , [ tmp3387 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3386 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3386 + Variant_t.value], 2
  lea  rcx, [ tmp3387 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3387 ]
  lea rdx, [ arg2 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3384 ]
  lea  rdx , [ tmp3386 ]
  lea  r8 , [ tmp3387 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3386 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3386 + Variant_t.value], 3
  lea  rcx, [ tmp3387 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3387 ]
  lea rdx, [ arg3 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3384 ]
  lea  rdx , [ tmp3386 ]
  lea  r8 , [ tmp3387 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3383 ]
  lea  rdx , [ tmp3385 ]
  lea  r8 , [ tmp3384 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3383 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3383 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3385 ], 1
  mov [ tmp3387 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3385 ]
  mov [ tmp3387 + Variant_t.value], rax
  lea  rcx , [ tmp3383 ]
  lea  rdx , [ tmp3387 ]
  lea  r8 , [ tmp3384 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3384 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3383 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3384 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3386 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3387 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore op
  restore arg1
  restore arg2
  restore arg3
  restore tmp3383
  restore tmp3384
  restore tmp3385
  restore tmp3386
  restore tmp3387
; -----------------------------------------------
; function __MIRCode_nop$1
; -----------------------------------------------
__MIRCode_nop$1:
  ; init frame
  ; ----------
  tmp3390 EQU rbp - 24 ; 16 bytes
  tmp3389 EQU rbp - 28 ; 4 bytes
  tmp3388 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3388 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3390 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3389 ], 0
  mov [ tmp3390 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3389 ]
  mov [ tmp3390 + Variant_t.value], rax
  lea  rcx, [ tmp3388 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3390 ]
  lea  rdi , [ tmp3388 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3388 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3390 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3388
  restore tmp3389
  restore tmp3390
; -----------------------------------------------
; function __MIRCode_neg$1
; -----------------------------------------------
__MIRCode_neg$1:
  ; init frame
  ; ----------
  tmp3393 EQU rbp - 24 ; 16 bytes
  tmp3392 EQU rbp - 28 ; 4 bytes
  tmp3391 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3391 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3393 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3392 ], 1
  mov [ tmp3393 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3392 ]
  mov [ tmp3393 + Variant_t.value], rax
  lea  rcx, [ tmp3391 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3393 ]
  lea  rdi , [ tmp3391 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3391 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3393 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3391
  restore tmp3392
  restore tmp3393
; -----------------------------------------------
; function __MIRCode_add$1
; -----------------------------------------------
__MIRCode_add$1:
  ; init frame
  ; ----------
  tmp3396 EQU rbp - 24 ; 16 bytes
  tmp3395 EQU rbp - 28 ; 4 bytes
  tmp3394 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3394 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3396 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3395 ], 2
  mov [ tmp3396 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3395 ]
  mov [ tmp3396 + Variant_t.value], rax
  lea  rcx, [ tmp3394 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3396 ]
  lea  rdi , [ tmp3394 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3394 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3396 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3394
  restore tmp3395
  restore tmp3396
; -----------------------------------------------
; function __MIRCode_sub$1
; -----------------------------------------------
__MIRCode_sub$1:
  ; init frame
  ; ----------
  tmp3399 EQU rbp - 24 ; 16 bytes
  tmp3398 EQU rbp - 28 ; 4 bytes
  tmp3397 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3397 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3399 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3398 ], 3
  mov [ tmp3399 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3398 ]
  mov [ tmp3399 + Variant_t.value], rax
  lea  rcx, [ tmp3397 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3399 ]
  lea  rdi , [ tmp3397 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3397 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3399 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3397
  restore tmp3398
  restore tmp3399
; -----------------------------------------------
; function __MIRCode_mul$1
; -----------------------------------------------
__MIRCode_mul$1:
  ; init frame
  ; ----------
  tmp3402 EQU rbp - 24 ; 16 bytes
  tmp3401 EQU rbp - 28 ; 4 bytes
  tmp3400 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3400 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3402 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3401 ], 4
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3401 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx, [ tmp3400 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3402 ]
  lea  rdi , [ tmp3400 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3400 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3400
  restore tmp3401
  restore tmp3402
; -----------------------------------------------
; function __MIRCode_div$1
; -----------------------------------------------
__MIRCode_div$1:
  ; init frame
  ; ----------
  tmp3405 EQU rbp - 24 ; 16 bytes
  tmp3404 EQU rbp - 28 ; 4 bytes
  tmp3403 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3403 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3405 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3404 ], 5
  mov [ tmp3405 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3404 ]
  mov [ tmp3405 + Variant_t.value], rax
  lea  rcx, [ tmp3403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3405 ]
  lea  rdi , [ tmp3403 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3403 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3405 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3403
  restore tmp3404
  restore tmp3405
; -----------------------------------------------
; function __MIRCode_idiv$1
; -----------------------------------------------
__MIRCode_idiv$1:
  ; init frame
  ; ----------
  tmp3408 EQU rbp - 24 ; 16 bytes
  tmp3407 EQU rbp - 28 ; 4 bytes
  tmp3406 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3406 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3408 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3407 ], 6
  mov [ tmp3408 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3407 ]
  mov [ tmp3408 + Variant_t.value], rax
  lea  rcx, [ tmp3406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3408 ]
  lea  rdi , [ tmp3406 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3406 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3408 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3406
  restore tmp3407
  restore tmp3408
; -----------------------------------------------
; function __MIRCode_stringJoin$1
; -----------------------------------------------
__MIRCode_stringJoin$1:
  ; init frame
  ; ----------
  tmp3411 EQU rbp - 24 ; 16 bytes
  tmp3410 EQU rbp - 28 ; 4 bytes
  tmp3409 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3409 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3411 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3410 ], 49
  mov [ tmp3411 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3410 ]
  mov [ tmp3411 + Variant_t.value], rax
  lea  rcx, [ tmp3409 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3411 ]
  lea  rdi , [ tmp3409 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3409 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3411 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3409
  restore tmp3410
  restore tmp3411
; -----------------------------------------------
; function __MIRCode_loadArray$1
; -----------------------------------------------
__MIRCode_loadArray$1:
  ; init frame
  ; ----------
  tmp3414 EQU rbp - 24 ; 16 bytes
  tmp3413 EQU rbp - 28 ; 4 bytes
  tmp3412 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3412 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3414 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3413 ], 8
  mov [ tmp3414 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3413 ]
  mov [ tmp3414 + Variant_t.value], rax
  lea  rcx, [ tmp3412 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3414 ]
  lea  rdi , [ tmp3412 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3412 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3414 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3412
  restore tmp3413
  restore tmp3414
; -----------------------------------------------
; function __MIRCode_loadMap$1
; -----------------------------------------------
__MIRCode_loadMap$1:
  ; init frame
  ; ----------
  tmp3417 EQU rbp - 24 ; 16 bytes
  tmp3416 EQU rbp - 28 ; 4 bytes
  tmp3415 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3415 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3417 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3416 ], 9
  mov [ tmp3417 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3416 ]
  mov [ tmp3417 + Variant_t.value], rax
  lea  rcx, [ tmp3415 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3417 ]
  lea  rdi , [ tmp3415 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3415 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3417 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3415
  restore tmp3416
  restore tmp3417
; -----------------------------------------------
; function __MIRCode_loadImm$2
; -----------------------------------------------
__MIRCode_loadImm$2:
  ; init frame
  ; ----------
  tmp3420 EQU rbp - 24 ; 16 bytes
  tmp3419 EQU rbp - 28 ; 4 bytes
  tmp3418 EQU rbp - 44 ; 16 bytes
  value EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  mov [tmp3418 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3420 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3419 ], 7
  mov [ tmp3420 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3419 ]
  mov [ tmp3420 + Variant_t.value], rax
  lea  rcx, [ tmp3418 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3420 ]
  lea  r8 , [ value ]
  lea  rdi , [ tmp3418 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3418 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3420 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore value
  restore tmp3418
  restore tmp3419
  restore tmp3420
; -----------------------------------------------
; function __MIRCode_cmpEQ$1
; -----------------------------------------------
__MIRCode_cmpEQ$1:
  ; init frame
  ; ----------
  tmp3423 EQU rbp - 24 ; 16 bytes
  tmp3422 EQU rbp - 28 ; 4 bytes
  tmp3421 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3421 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3423 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3422 ], 10
  mov [ tmp3423 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3422 ]
  mov [ tmp3423 + Variant_t.value], rax
  lea  rcx, [ tmp3421 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3423 ]
  lea  rdi , [ tmp3421 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3421 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3423 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3421
  restore tmp3422
  restore tmp3423
; -----------------------------------------------
; function __MIRCode_cmpNEQ$1
; -----------------------------------------------
__MIRCode_cmpNEQ$1:
  ; init frame
  ; ----------
  tmp3426 EQU rbp - 24 ; 16 bytes
  tmp3425 EQU rbp - 28 ; 4 bytes
  tmp3424 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3424 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3426 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3425 ], 11
  mov [ tmp3426 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3425 ]
  mov [ tmp3426 + Variant_t.value], rax
  lea  rcx, [ tmp3424 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3426 ]
  lea  rdi , [ tmp3424 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3424 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3426 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3424
  restore tmp3425
  restore tmp3426
; -----------------------------------------------
; function __MIRCode_cmpGT$1
; -----------------------------------------------
__MIRCode_cmpGT$1:
  ; init frame
  ; ----------
  tmp3429 EQU rbp - 24 ; 16 bytes
  tmp3428 EQU rbp - 28 ; 4 bytes
  tmp3427 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3427 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3429 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3428 ], 12
  mov [ tmp3429 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3428 ]
  mov [ tmp3429 + Variant_t.value], rax
  lea  rcx, [ tmp3427 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3429 ]
  lea  rdi , [ tmp3427 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3427 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3429 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3427
  restore tmp3428
  restore tmp3429
; -----------------------------------------------
; function __MIRCode_cmpGE$1
; -----------------------------------------------
__MIRCode_cmpGE$1:
  ; init frame
  ; ----------
  tmp3432 EQU rbp - 24 ; 16 bytes
  tmp3431 EQU rbp - 28 ; 4 bytes
  tmp3430 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3430 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3432 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3431 ], 13
  mov [ tmp3432 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3431 ]
  mov [ tmp3432 + Variant_t.value], rax
  lea  rcx, [ tmp3430 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3432 ]
  lea  rdi , [ tmp3430 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3430 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3432 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3430
  restore tmp3431
  restore tmp3432
; -----------------------------------------------
; function __MIRCode_cmpLT$1
; -----------------------------------------------
__MIRCode_cmpLT$1:
  ; init frame
  ; ----------
  tmp3435 EQU rbp - 24 ; 16 bytes
  tmp3434 EQU rbp - 28 ; 4 bytes
  tmp3433 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3433 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3435 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3434 ], 14
  mov [ tmp3435 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3434 ]
  mov [ tmp3435 + Variant_t.value], rax
  lea  rcx, [ tmp3433 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3435 ]
  lea  rdi , [ tmp3433 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3433 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3433
  restore tmp3434
  restore tmp3435
; -----------------------------------------------
; function __MIRCode_cmpLE$1
; -----------------------------------------------
__MIRCode_cmpLE$1:
  ; init frame
  ; ----------
  tmp3438 EQU rbp - 24 ; 16 bytes
  tmp3437 EQU rbp - 28 ; 4 bytes
  tmp3436 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3436 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3438 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3437 ], 15
  mov [ tmp3438 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3437 ]
  mov [ tmp3438 + Variant_t.value], rax
  lea  rcx, [ tmp3436 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3438 ]
  lea  rdi , [ tmp3436 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3436 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3438 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3436
  restore tmp3437
  restore tmp3438
; -----------------------------------------------
; function __MIRCode_loadLocal$2
; -----------------------------------------------
__MIRCode_loadLocal$2:
  ; init frame
  ; ----------
  tmp3442 EQU rbp - 12 ; 4 bytes
  tmp3441 EQU rbp - 28 ; 16 bytes
  tmp3440 EQU rbp - 32 ; 4 bytes
  tmp3439 EQU rbp - 48 ; 16 bytes
  id EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3439 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3441 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3440 ], 16
  mov [ tmp3441 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3440 ]
  mov [ tmp3441 + Variant_t.value], rax
  lea  rcx, [ tmp3439 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3441 ]
  lea  r8 , [ id ]
  lea  rdi , [ tmp3439 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi
  lea  rcx, [ tmp3441 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3441 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3441 ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp3439 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp3439 + Variant_t.value]
  mov dword [ tmp3442 ], eax
  cmp dword [ tmp3442 ], 0
  jz l3443
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantStoreAtKey
l3443:
l3444:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3439 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3441 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3439
  restore tmp3440
  restore tmp3441
  restore tmp3442
; -----------------------------------------------
; function __MIRCode_loadParamN$2
; -----------------------------------------------
__MIRCode_loadParamN$2:
  ; init frame
  ; ----------
  tmp3447 EQU rbp - 24 ; 16 bytes
  tmp3446 EQU rbp - 28 ; 4 bytes
  tmp3445 EQU rbp - 44 ; 16 bytes
  id EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3445 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3447 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3446 ], 17
  mov [ tmp3447 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3446 ]
  mov [ tmp3447 + Variant_t.value], rax
  lea  rcx, [ tmp3445 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3447 ]
  lea  r8 , [ id ]
  lea  rdi , [ tmp3445 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3445 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3447 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3445
  restore tmp3446
  restore tmp3447
; -----------------------------------------------
; function __MIRCode_loadGlobal$2
; -----------------------------------------------
__MIRCode_loadGlobal$2:
  ; init frame
  ; ----------
  tmp3450 EQU rbp - 24 ; 16 bytes
  tmp3449 EQU rbp - 28 ; 4 bytes
  tmp3448 EQU rbp - 44 ; 16 bytes
  id EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3448 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3450 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3449 ], 18
  mov [ tmp3450 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3449 ]
  mov [ tmp3450 + Variant_t.value], rax
  lea  rcx, [ tmp3448 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3450 ]
  lea  r8 , [ id ]
  lea  rdi , [ tmp3448 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3448 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3450 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3448
  restore tmp3449
  restore tmp3450
; -----------------------------------------------
; function __MIRCode_loadRetVal$1
; -----------------------------------------------
__MIRCode_loadRetVal$1:
  ; init frame
  ; ----------
  tmp3453 EQU rbp - 24 ; 16 bytes
  tmp3452 EQU rbp - 28 ; 4 bytes
  tmp3451 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3451 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3453 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3452 ], 19
  mov [ tmp3453 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3452 ]
  mov [ tmp3453 + Variant_t.value], rax
  lea  rcx, [ tmp3451 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3453 ]
  lea  rdi , [ tmp3451 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3451 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3453 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3451
  restore tmp3452
  restore tmp3453
; -----------------------------------------------
; function __MIRCode_loadFromIndex$1
; -----------------------------------------------
__MIRCode_loadFromIndex$1:
  ; init frame
  ; ----------
  tmp3456 EQU rbp - 24 ; 16 bytes
  tmp3455 EQU rbp - 28 ; 4 bytes
  tmp3454 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3454 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3456 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3455 ], 20
  mov [ tmp3456 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3455 ]
  mov [ tmp3456 + Variant_t.value], rax
  lea  rcx, [ tmp3454 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3456 ]
  lea  rdi , [ tmp3454 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3454 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3456 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3454
  restore tmp3455
  restore tmp3456
; -----------------------------------------------
; function __MIRCode_loadFromKey$1
; -----------------------------------------------
__MIRCode_loadFromKey$1:
  ; init frame
  ; ----------
  tmp3459 EQU rbp - 24 ; 16 bytes
  tmp3458 EQU rbp - 28 ; 4 bytes
  tmp3457 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3457 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3459 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3458 ], 21
  mov [ tmp3459 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3458 ]
  mov [ tmp3459 + Variant_t.value], rax
  lea  rcx, [ tmp3457 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3459 ]
  lea  rdi , [ tmp3457 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3457 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3459 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3457
  restore tmp3458
  restore tmp3459
; -----------------------------------------------
; function __MIRCode_allocateLocalId$1
; -----------------------------------------------
__MIRCode_allocateLocalId$1:
  ; init frame
  ; ----------
  tmp3463 EQU rbp - 24 ; 16 bytes
  tmp3462 EQU rbp - 28 ; 4 bytes
  tmp3461 EQU rbp - 44 ; 16 bytes
  tmp3460 EQU rbp - 60 ; 16 bytes
  newId EQU rdi
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3460 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3461 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3463 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3461 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3461 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3462 ], 1
  mov [ tmp3463 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3462 ]
  mov [ tmp3463 + Variant_t.value], rax
  lea  rcx , [ tmp3461 ]
  lea  rdx , [ tmp3463 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3460 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3461 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3463 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore newId
  restore tmp3460
  restore tmp3461
  restore tmp3462
  restore tmp3463
; -----------------------------------------------
; function __MIRCode_storeLocal$2
; -----------------------------------------------
__MIRCode_storeLocal$2:
  ; init frame
  ; ----------
  tmp3470 EQU rbp - 24 ; 16 bytes
  tmp3469 EQU rbp - 28 ; 4 bytes
  tmp3466 EQU rbp - 32 ; 4 bytes
  tmp3465 EQU rbp - 48 ; 16 bytes
  tmp3464 EQU rbp - 64 ; 16 bytes
  newId EQU rdi
  id EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3464 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3465 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3470 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3465 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ id ]
  lea  rdi , [ tmp3465 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3465 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3464 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3464 + Variant_t.value]
  mov dword [ tmp3466 ], eax
  cmp dword [ tmp3466 ], 0
  jz l3467
  lea  rcx, [ tmp3465 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3465 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3469 ], 1
  mov [ tmp3470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3469 ]
  mov [ tmp3470 + Variant_t.value], rax
  lea  rcx , [ tmp3465 ]
  lea  rdx , [ tmp3470 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey
  jmp l3468
l3467:
  lea rcx, [ newId ]
  lea rdx, [ id ]
  call __MOLD_VariantMove
l3468:
  mov dword [ tmp3469 ], 23
  mov [ tmp3470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3469 ]
  mov [ tmp3470 + Variant_t.value], rax
  lea  rcx, [ tmp3464 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3470 ]
  lea  r8 , [ newId ]
  lea  rdi , [ tmp3464 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3464 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3465 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3470 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore id
  restore newId
  restore tmp3464
  restore tmp3465
  restore tmp3466
  restore tmp3469
  restore tmp3470
; -----------------------------------------------
; function __MIRCode_storeParamN$2
; -----------------------------------------------
__MIRCode_storeParamN$2:
  ; init frame
  ; ----------
  tmp3473 EQU rbp - 24 ; 16 bytes
  tmp3472 EQU rbp - 28 ; 4 bytes
  tmp3471 EQU rbp - 44 ; 16 bytes
  id EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3471 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3473 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3472 ], 24
  mov [ tmp3473 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3472 ]
  mov [ tmp3473 + Variant_t.value], rax
  lea  rcx, [ tmp3471 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3473 ]
  lea  r8 , [ id ]
  lea  rdi , [ tmp3471 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3471 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3473 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3471
  restore tmp3472
  restore tmp3473
; -----------------------------------------------
; function __MIRCode_storeGlobal$2
; -----------------------------------------------
__MIRCode_storeGlobal$2:
  ; init frame
  ; ----------
  tmp3480 EQU rbp - 24 ; 16 bytes
  tmp3479 EQU rbp - 28 ; 4 bytes
  tmp3476 EQU rbp - 32 ; 4 bytes
  tmp3475 EQU rbp - 48 ; 16 bytes
  tmp3474 EQU rbp - 64 ; 16 bytes
  newId EQU rdi
  id EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3474 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3475 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3480 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3475 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ id ]
  lea  rdi , [ tmp3475 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3475 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3474 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3474 + Variant_t.value]
  mov dword [ tmp3476 ], eax
  cmp dword [ tmp3476 ], 0
  jz l3477
  lea  rcx, [ tmp3475 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ tmp3475 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3479 ], 1
  mov [ tmp3480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3479 ]
  mov [ tmp3480 + Variant_t.value], rax
  lea  rcx , [ tmp3475 ]
  lea  rdx , [ tmp3480 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey
  jmp l3478
l3477:
  lea rcx, [ newId ]
  lea rdx, [ id ]
  call __MOLD_VariantMove
l3478:
  mov dword [ tmp3479 ], 25
  mov [ tmp3480 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3479 ]
  mov [ tmp3480 + Variant_t.value], rax
  lea  rcx, [ tmp3474 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3480 ]
  lea  r8 , [ newId ]
  lea  rdi , [ tmp3474 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3474 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3475 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3480 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore id
  restore newId
  restore tmp3474
  restore tmp3475
  restore tmp3476
  restore tmp3479
  restore tmp3480
; -----------------------------------------------
; function __MIRCode_storeRetVal$1
; -----------------------------------------------
__MIRCode_storeRetVal$1:
  ; init frame
  ; ----------
  tmp3483 EQU rbp - 24 ; 16 bytes
  tmp3482 EQU rbp - 28 ; 4 bytes
  tmp3481 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3481 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3483 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3482 ], 26
  mov [ tmp3483 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3482 ]
  mov [ tmp3483 + Variant_t.value], rax
  lea  rcx, [ tmp3481 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3483 ]
  lea  rdi , [ tmp3481 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3481 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3483 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3481
  restore tmp3482
  restore tmp3483
; -----------------------------------------------
; function __MIRCode_storeAtIndex$1
; -----------------------------------------------
__MIRCode_storeAtIndex$1:
  ; init frame
  ; ----------
  tmp3486 EQU rbp - 24 ; 16 bytes
  tmp3485 EQU rbp - 28 ; 4 bytes
  tmp3484 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3484 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3486 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3485 ], 27
  mov [ tmp3486 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3485 ]
  mov [ tmp3486 + Variant_t.value], rax
  lea  rcx, [ tmp3484 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3486 ]
  lea  rdi , [ tmp3484 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3484 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3486 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3484
  restore tmp3485
  restore tmp3486
; -----------------------------------------------
; function __MIRCode_storeAtKey$1
; -----------------------------------------------
__MIRCode_storeAtKey$1:
  ; init frame
  ; ----------
  tmp3489 EQU rbp - 24 ; 16 bytes
  tmp3488 EQU rbp - 28 ; 4 bytes
  tmp3487 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3487 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3489 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3488 ], 28
  mov [ tmp3489 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3488 ]
  mov [ tmp3489 + Variant_t.value], rax
  lea  rcx, [ tmp3487 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3489 ]
  lea  rdi , [ tmp3487 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3487 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3489 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3487
  restore tmp3488
  restore tmp3489
; -----------------------------------------------
; function __MIRCode_moveBack$1
; -----------------------------------------------
__MIRCode_moveBack$1:
  ; init frame
  ; ----------
  tmp3492 EQU rbp - 24 ; 16 bytes
  tmp3491 EQU rbp - 28 ; 4 bytes
  tmp3490 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3490 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3492 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3491 ], 33
  mov [ tmp3492 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3491 ]
  mov [ tmp3492 + Variant_t.value], rax
  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3492 ]
  lea  rdi , [ tmp3490 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3490 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3492 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3490
  restore tmp3491
  restore tmp3492
; -----------------------------------------------
; function __MIRCode_drop$1
; -----------------------------------------------
__MIRCode_drop$1:
  ; init frame
  ; ----------
  tmp3495 EQU rbp - 24 ; 16 bytes
  tmp3494 EQU rbp - 28 ; 4 bytes
  tmp3493 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3493 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3495 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3494 ], 29
  mov [ tmp3495 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3494 ]
  mov [ tmp3495 + Variant_t.value], rax
  lea  rcx, [ tmp3493 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3495 ]
  lea  rdi , [ tmp3493 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3493 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3495 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3493
  restore tmp3494
  restore tmp3495
; -----------------------------------------------
; function __MIRCode_dropN$2
; -----------------------------------------------
__MIRCode_dropN$2:
  ; init frame
  ; ----------
  tmp3498 EQU rbp - 24 ; 16 bytes
  tmp3497 EQU rbp - 28 ; 4 bytes
  tmp3496 EQU rbp - 44 ; 16 bytes
  n EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ n ], xmm0
  mov [tmp3496 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3498 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3497 ], 30
  mov [ tmp3498 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3497 ]
  mov [ tmp3498 + Variant_t.value], rax
  lea  rcx, [ tmp3496 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3498 ]
  lea  r8 , [ n ]
  lea  rdi , [ tmp3496 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3496 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3498 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore n
  restore tmp3496
  restore tmp3497
  restore tmp3498
; -----------------------------------------------
; function __MIRCode_dup$1
; -----------------------------------------------
__MIRCode_dup$1:
  ; init frame
  ; ----------
  tmp3501 EQU rbp - 24 ; 16 bytes
  tmp3500 EQU rbp - 28 ; 4 bytes
  tmp3499 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3499 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3501 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3500 ], 31
  mov [ tmp3501 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3500 ]
  mov [ tmp3501 + Variant_t.value], rax
  lea  rcx, [ tmp3499 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3501 ]
  lea  rdi , [ tmp3499 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3499 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3501 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3499
  restore tmp3500
  restore tmp3501
; -----------------------------------------------
; function __MIRCode_over$1
; -----------------------------------------------
__MIRCode_over$1:
  ; init frame
  ; ----------
  tmp3504 EQU rbp - 24 ; 16 bytes
  tmp3503 EQU rbp - 28 ; 4 bytes
  tmp3502 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3502 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3504 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3503 ], 32
  mov [ tmp3504 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3503 ]
  mov [ tmp3504 + Variant_t.value], rax
  lea  rcx, [ tmp3502 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3504 ]
  lea  rdi , [ tmp3502 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3502 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3504 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3502
  restore tmp3503
  restore tmp3504
; -----------------------------------------------
; function __MIRCode_loadArgc$1
; -----------------------------------------------
__MIRCode_loadArgc$1:
  ; init frame
  ; ----------
  tmp3507 EQU rbp - 24 ; 16 bytes
  tmp3506 EQU rbp - 28 ; 4 bytes
  tmp3505 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3505 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3507 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3506 ], 252
  mov [ tmp3507 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3506 ]
  mov [ tmp3507 + Variant_t.value], rax
  lea  rcx, [ tmp3505 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3507 ]
  lea  rdi , [ tmp3505 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3505 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3507 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3505
  restore tmp3506
  restore tmp3507
; -----------------------------------------------
; function __MIRCode_loadArgv$1
; -----------------------------------------------
__MIRCode_loadArgv$1:
  ; init frame
  ; ----------
  tmp3510 EQU rbp - 24 ; 16 bytes
  tmp3509 EQU rbp - 28 ; 4 bytes
  tmp3508 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3508 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3510 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3509 ], 253
  mov [ tmp3510 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3509 ]
  mov [ tmp3510 + Variant_t.value], rax
  lea  rcx, [ tmp3508 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3510 ]
  lea  rdi , [ tmp3508 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3508 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3510 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3508
  restore tmp3509
  restore tmp3510
; -----------------------------------------------
; function __MIRCode_createObject$2
; -----------------------------------------------
__MIRCode_createObject$2:
  ; init frame
  ; ----------
  tmp3513 EQU rbp - 24 ; 16 bytes
  tmp3512 EQU rbp - 28 ; 4 bytes
  tmp3511 EQU rbp - 44 ; 16 bytes
  classProto EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classProto ], xmm0
  mov [tmp3511 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3513 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3512 ], 35
  mov [ tmp3513 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3512 ]
  mov [ tmp3513 + Variant_t.value], rax
  lea  rcx, [ tmp3511 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3513 ]
  lea  r8 , [ classProto ]
  lea  rdi , [ tmp3511 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3511 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3513 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore classProto
  restore tmp3511
  restore tmp3512
  restore tmp3513
; -----------------------------------------------
; function __MIRCode__jmpInternal$3
; -----------------------------------------------
__MIRCode__jmpInternal$3:
  ; init frame
  ; ----------
  tmp3527 EQU rbp - 24 ; 16 bytes
  tmp3524 EQU rbp - 28 ; 4 bytes
  tmp3523 EQU rbp - 44 ; 16 bytes
  tmp3522 EQU rbp - 60 ; 16 bytes
  tmp3519 EQU rbp - 64 ; 4 bytes
  tmp3516 EQU rbp - 68 ; 4 bytes
  tmp3515 EQU rbp - 84 ; 16 bytes
  tmp3514 EQU rbp - 100 ; 16 bytes
  addr EQU rbp - 116 ; 16 bytes
  opcode EQU rbp - 132 ; 16 bytes
  labelId EQU rbp - 148 ; 16 bytes
  this EQU rbp - 164 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ opcode ], xmm0
  mov [addr + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3514 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3515 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3522 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3523 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3527 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ labelId ]
  lea  rdi , [ tmp3515 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3515 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3514 + Variant_t.value]
  mov dword [ tmp3516 ], eax
  cmp dword [ tmp3516 ], 0
  jz l3517
  lea  rcx, [ tmp3514 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal399 ]
  lea  rdi , [ tmp3514 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l3517:
l3518:
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3515 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3519 ], eax
  lea  rcx, [ addr ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3515 ]
  lea  rdx , [ tmp3519 ]
  lea  r8 , [ addr ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ addr ]
  lea  rdi , [ tmp3515 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3515 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3514 + Variant_t.value]
  mov dword [ tmp3516 ], eax
  cmp dword [ tmp3516 ], 0
  jz l3520
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ labelId ]
  lea  rdi , [ tmp3515 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3523 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3515 ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp3523 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3522 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal400 ]
  lea  rdx , [ tmp3523 ]
  lea  r8 , [ tmp3522 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3514 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3522 ]
  lea  rdi , [ tmp3514 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
  jmp l3521
l3520:
  mov dword [ tmp3519 ], -1
  mov [ tmp3515 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3519 ]
  mov [ tmp3515 + Variant_t.value], rax
  lea  rcx , [ addr ]
  lea  rdx , [ tmp3515 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3514 + Variant_t.value]
  mov dword [ tmp3524 ], eax
  cmp dword [ tmp3524 ], 0
  jz l3525
  lea  rcx, [ tmp3514 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal392 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3515 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3515 + Variant_t.value]
  mov dword [ tmp3519 ], eax
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3515 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3514 ]
  lea  rdx , [ tmp3519 ]
  lea  r8 , [ tmp3515 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3514 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3514 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3519 ], 1
  mov [ tmp3527 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3519 ]
  mov [ tmp3527 + Variant_t.value], rax
  lea  rcx , [ tmp3514 ]
  lea  rdx , [ tmp3527 ]
  lea  r8 , [ tmp3515 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3515 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ labelId ]
  lea  rdi , [ tmp3515 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi
  jmp l3526
l3525:
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ addr ]
  lea  rdi , [ tmp3515 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi
l3526:
l3521:

  ; clean frame
  ; -----------
  lea  rcx, [ addr ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3514 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3527 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore labelId
  restore opcode
  restore addr
  restore tmp3514
  restore tmp3515
  restore tmp3516
  restore tmp3519
  restore tmp3522
  restore tmp3523
  restore tmp3524
  restore tmp3527
; -----------------------------------------------
; function __MIRCode_jmp$2
; -----------------------------------------------
__MIRCode_jmp$2:
  ; init frame
  ; ----------
  tmp3530 EQU rbp - 24 ; 16 bytes
  tmp3529 EQU rbp - 28 ; 4 bytes
  tmp3528 EQU rbp - 44 ; 16 bytes
  labelId EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3528 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3530 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3529 ], 39
  mov [ tmp3530 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3529 ]
  mov [ tmp3530 + Variant_t.value], rax
  lea  rcx, [ tmp3528 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3530 ]
  lea  rdi , [ tmp3528 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode__jmpInternal$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3528 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3530 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore labelId
  restore tmp3528
  restore tmp3529
  restore tmp3530
; -----------------------------------------------
; function __MIRCode_jmpIfTrue$2
; -----------------------------------------------
__MIRCode_jmpIfTrue$2:
  ; init frame
  ; ----------
  tmp3533 EQU rbp - 24 ; 16 bytes
  tmp3532 EQU rbp - 28 ; 4 bytes
  tmp3531 EQU rbp - 44 ; 16 bytes
  labelId EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3531 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3533 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3532 ], 40
  mov [ tmp3533 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3532 ]
  mov [ tmp3533 + Variant_t.value], rax
  lea  rcx, [ tmp3531 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3533 ]
  lea  rdi , [ tmp3531 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode__jmpInternal$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3531 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3533 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore labelId
  restore tmp3531
  restore tmp3532
  restore tmp3533
; -----------------------------------------------
; function __MIRCode_jmpIfFalse$2
; -----------------------------------------------
__MIRCode_jmpIfFalse$2:
  ; init frame
  ; ----------
  tmp3536 EQU rbp - 24 ; 16 bytes
  tmp3535 EQU rbp - 28 ; 4 bytes
  tmp3534 EQU rbp - 44 ; 16 bytes
  labelId EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3534 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3536 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3535 ], 41
  mov [ tmp3536 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3535 ]
  mov [ tmp3536 + Variant_t.value], rax
  lea  rcx, [ tmp3534 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3536 ]
  lea  rdi , [ tmp3534 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode__jmpInternal$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3534 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3536 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore labelId
  restore tmp3534
  restore tmp3535
  restore tmp3536
; -----------------------------------------------
; function __MIRCode_ret$2
; -----------------------------------------------
__MIRCode_ret$2:
  ; init frame
  ; ----------
  tmp3539 EQU rbp - 24 ; 16 bytes
  tmp3538 EQU rbp - 28 ; 4 bytes
  tmp3537 EQU rbp - 44 ; 16 bytes
  frameSize EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ frameSize ], xmm0
  mov [tmp3537 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3539 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3538 ], 43
  mov [ tmp3539 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3538 ]
  mov [ tmp3539 + Variant_t.value], rax
  lea  rcx, [ tmp3537 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3539 ]
  lea  r8 , [ frameSize ]
  lea  rdi , [ tmp3537 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3537 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3539 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore frameSize
  restore tmp3537
  restore tmp3538
  restore tmp3539
; -----------------------------------------------
; function __MIRCode_innerRet$1
; -----------------------------------------------
__MIRCode_innerRet$1:
  ; init frame
  ; ----------
  tmp3542 EQU rbp - 24 ; 16 bytes
  tmp3541 EQU rbp - 28 ; 4 bytes
  tmp3540 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3540 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3542 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3541 ], 44
  mov [ tmp3542 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3541 ]
  mov [ tmp3542 + Variant_t.value], rax
  lea  rcx, [ tmp3540 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3542 ]
  lea  rdi , [ tmp3540 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push0$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3540 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3542 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3540
  restore tmp3541
  restore tmp3542
; -----------------------------------------------
; function __MIRCode_call$2
; -----------------------------------------------
__MIRCode_call$2:
  ; init frame
  ; ----------
  tmp3545 EQU rbp - 24 ; 16 bytes
  tmp3544 EQU rbp - 28 ; 4 bytes
  tmp3543 EQU rbp - 44 ; 16 bytes
  proto EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ proto ], xmm0
  mov [tmp3543 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3545 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3544 ], 42
  mov [ tmp3545 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3544 ]
  mov [ tmp3545 + Variant_t.value], rax
  lea  rcx, [ tmp3543 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3545 ]
  lea  r8 , [ proto ]
  lea  rdi , [ tmp3543 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3543 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3545 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore proto
  restore tmp3543
  restore tmp3544
  restore tmp3545
; -----------------------------------------------
; function __MIRCode_vcall$3
; -----------------------------------------------
__MIRCode_vcall$3:
  ; init frame
  ; ----------
  tmp3548 EQU rbp - 24 ; 16 bytes
  tmp3547 EQU rbp - 28 ; 4 bytes
  tmp3546 EQU rbp - 44 ; 16 bytes
  paramsCnt EQU rbp - 60 ; 16 bytes
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3546 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3548 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3547 ], 36
  mov [ tmp3548 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3547 ]
  mov [ tmp3548 + Variant_t.value], rax
  lea  rcx, [ tmp3546 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3548 ]
  lea  r8 , [ name ]
  lea  r9 , [ paramsCnt ]
  lea  rdi , [ tmp3546 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push2$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3546 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3548 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore paramsCnt
  restore tmp3546
  restore tmp3547
  restore tmp3548
; -----------------------------------------------
; function __MIRCode_callPrint$2
; -----------------------------------------------
__MIRCode_callPrint$2:
  ; init frame
  ; ----------
  tmp3551 EQU rbp - 24 ; 16 bytes
  tmp3550 EQU rbp - 28 ; 4 bytes
  tmp3549 EQU rbp - 44 ; 16 bytes
  paramsCnt EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3549 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3551 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3550 ], 34
  mov [ tmp3551 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3550 ]
  mov [ tmp3551 + Variant_t.value], rax
  lea  rcx, [ tmp3549 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3551 ]
  lea  r8 , [ paramsCnt ]
  lea  rdi , [ tmp3549 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3549 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3551 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore paramsCnt
  restore tmp3549
  restore tmp3550
  restore tmp3551
; -----------------------------------------------
; function __MIRCode_initFrame$2
; -----------------------------------------------
__MIRCode_initFrame$2:
  ; init frame
  ; ----------
  tmp3554 EQU rbp - 24 ; 16 bytes
  tmp3553 EQU rbp - 28 ; 4 bytes
  tmp3552 EQU rbp - 44 ; 16 bytes
  paramsCnt EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3552 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3554 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3553 ], 46
  mov [ tmp3554 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3553 ]
  mov [ tmp3554 + Variant_t.value], rax
  lea  rcx, [ tmp3552 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3554 ]
  lea  r8 , [ paramsCnt ]
  lea  rdi , [ tmp3552 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push1$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3552 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3554 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore paramsCnt
  restore tmp3552
  restore tmp3553
  restore tmp3554
; -----------------------------------------------
; function __MIRCode_createLabel$1
; -----------------------------------------------
__MIRCode_createLabel$1:
  ; init frame
  ; ----------
  tmp3559 EQU rbp - 24 ; 16 bytes
  tmp3558 EQU rbp - 28 ; 4 bytes
  tmp3557 EQU rbp - 32 ; 4 bytes
  tmp3556 EQU rbp - 48 ; 16 bytes
  tmp3555 EQU rbp - 64 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3555 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3556 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3559 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3555 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3555 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3556 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ tmp3556 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3556 + Variant_t.value]
  mov dword [ tmp3557 ], eax
  mov dword [ tmp3558 ], -1
  mov [ tmp3556 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3558 ]
  mov [ tmp3556 + Variant_t.value], rax
  lea  rcx , [ tmp3555 ]
  lea  rdx , [ tmp3557 ]
  lea  r8 , [ tmp3556 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3555 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ tmp3555 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3557 ], 1
  mov [ tmp3559 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3557 ]
  mov [ tmp3559 + Variant_t.value], rax
  lea  rcx , [ tmp3555 ]
  lea  rdx , [ tmp3559 ]
  lea  r8 , [ tmp3556 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ tmp3556 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3555 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3556 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3559 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3555
  restore tmp3556
  restore tmp3557
  restore tmp3558
  restore tmp3559
; -----------------------------------------------
; function __MIRCode_emitLabel$2
; -----------------------------------------------
__MIRCode_emitLabel$2:
  ; init frame
  ; ----------
  tmp3571 EQU rbp - 24 ; 16 bytes
  tmp3568 EQU rbp - 28 ; 4 bytes
  tmp3567 EQU rbp - 44 ; 16 bytes
  tmp3566 EQU rbp - 60 ; 16 bytes
  tmp3563 EQU rbp - 64 ; 4 bytes
  tmp3562 EQU rbp - 68 ; 4 bytes
  tmp3561 EQU rbp - 84 ; 16 bytes
  tmp3560 EQU rbp - 100 ; 16 bytes
  targetId EQU rbp - 116 ; 16 bytes
  labelId EQU rbp - 132 ; 16 bytes
  this EQU rbp - 148 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [targetId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3560 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3561 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3566 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3567 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3571 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3561 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3562 ], eax
  lea  rcx, [ targetId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3561 ]
  lea  rdx , [ tmp3562 ]
  lea  r8 , [ targetId ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ targetId ]
  lea  rdi , [ tmp3561 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3561 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3560 + Variant_t.value]
  mov dword [ tmp3563 ], eax
  cmp dword [ tmp3563 ], 0
  jz l3564
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ targetId ]
  lea  rdi , [ tmp3561 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3561 ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp3567 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3566 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal400 ]
  lea  rdx , [ tmp3567 ]
  lea  r8 , [ tmp3566 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3566 ]
  lea  rdi , [ tmp3560 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
  jmp l3565
l3564:
  mov dword [ tmp3562 ], 0
  mov [ tmp3561 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3562 ]
  mov [ tmp3561 + Variant_t.value], rax
  lea  rcx , [ tmp3561 ]
  lea  rdx , [ targetId ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp3560 + Variant_t.value]
  mov dword [ tmp3568 ], eax
  cmp dword [ tmp3568 ], 0
  jz l3569
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ targetId ]
  lea  rdi , [ tmp3561 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3561 ]
  lea  rdx , [ __literal402 ]
  lea  r8 , [ tmp3567 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3566 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal401 ]
  lea  rdx , [ tmp3567 ]
  lea  r8 , [ tmp3566 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3566 ]
  lea  rdi , [ tmp3560 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
  jmp l3570
l3569:
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3562 ], eax
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3561 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3560 ]
  lea  rdx , [ tmp3562 ]
  lea  r8 , [ tmp3561 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal377 ]
  lea  r8 , [ tmp3561 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3560 + Variant_t.value]
  mov dword [ tmp3562 ], eax
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3561 ]
  lea  rdx , [ tmp3562 ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3561 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3562 ], 1
  mov [ tmp3571 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3562 ]
  mov [ tmp3571 + Variant_t.value], rax
  lea  rcx , [ tmp3561 ]
  lea  rdx , [ tmp3571 ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3560 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp3560 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode__resolveJmps$1
  pop rdi
l3570:
l3565:

  ; clean frame
  ; -----------
  lea  rcx, [ targetId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3561 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3571 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore labelId
  restore targetId
  restore tmp3560
  restore tmp3561
  restore tmp3562
  restore tmp3563
  restore tmp3566
  restore tmp3567
  restore tmp3568
  restore tmp3571
; -----------------------------------------------
; function __MIRCode_createAndEmitLabel$1
; -----------------------------------------------
__MIRCode_createAndEmitLabel$1:
  ; init frame
  ; ----------
  tmp3572 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3572 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3572 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp3572 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_createLabel$1
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp3572 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3572 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp3572 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_emitLabel$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3572 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3572
; -----------------------------------------------
; function __MIRCode_createMethod$2
; -----------------------------------------------
__MIRCode_createMethod$2:
  ; init frame
  ; ----------
  tmp3579 EQU rbp - 12 ; 4 bytes
  tmp3576 EQU rbp - 16 ; 4 bytes
  tmp3575 EQU rbp - 32 ; 16 bytes
  tmp3574 EQU rbp - 48 ; 16 bytes
  tmp3573 EQU rbp - 64 ; 16 bytes
  methodsList EQU rbp - 80 ; 16 bytes
  methodsMap EQU rbp - 96 ; 16 bytes
  id EQU rdi
  name EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [methodsMap + Variant_t.type], VARIANT_UNDEFINED
  mov [methodsList + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3573 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3574 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3575 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodsMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal387 ]
  lea  r8 , [ methodsMap ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal388 ]
  lea  r8 , [ methodsList ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodsMap ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp3575 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3574 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3575 ]
  lea  rdi , [ tmp3574 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3574 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3573 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3573 + Variant_t.value]
  mov dword [ tmp3576 ], eax
  cmp dword [ tmp3576 ], 0
  jz l3577
  lea  rcx , [ methodsMap ]
  lea  rdx , [ name ]
  lea  r8 , [ id ]
  call  __MOLD_VariantStoreAtKey
  mov eax, dword [ id + Variant_t.value]
  mov dword [ tmp3579 ], eax
  lea  rcx , [ methodsList ]
  lea  rdx , [ tmp3579 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3579 ], 1
  mov [ tmp3574 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3579 ]
  mov [ tmp3574 + Variant_t.value], rax
  lea  rcx , [ id ]
  lea  rdx , [ tmp3574 ]
  lea  r8 , [ tmp3573 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ tmp3573 ]
  call  __MOLD_VariantStoreAtKey
l3577:
l3578:

  ; clean frame
  ; -----------
  lea  rcx, [ methodsMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3573 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3574 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3575 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore name
  restore id
  restore methodsMap
  restore methodsList
  restore tmp3573
  restore tmp3574
  restore tmp3575
  restore tmp3576
  restore tmp3579
; -----------------------------------------------
; function __MIRCode_createClass$2
; -----------------------------------------------
__MIRCode_createClass$2:
  ; init frame
  ; ----------
  methodName EQU rbp - 24 ; 16 bytes
  tmp3584 EQU rbp - 40 ; 16 bytes
  tmp3581 EQU rbp - 44 ; 4 bytes
  tmp3580 EQU rbp - 60 ; 16 bytes
  classList EQU rbp - 76 ; 16 bytes
  classMap EQU rbp - 92 ; 16 bytes
  className EQU rbp - 108 ; 16 bytes
  id EQU rdi
  proto EQU rbp - 124 ; 16 bytes
  this EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ proto ], xmm0
  mov [className + Variant_t.type], VARIANT_UNDEFINED
  mov [classMap + Variant_t.type], VARIANT_UNDEFINED
  mov [classList + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3580 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3584 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ classMap ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ classMap ]
  lea  rdx , [ className ]
  lea  r8 , [ id ]
  call  __MOLD_VariantStoreAtKey
  mov eax, dword [ id + Variant_t.value]
  mov dword [ tmp3581 ], eax
  lea  rcx , [ classList ]
  lea  rdx , [ tmp3581 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3580 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ tmp3580 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys methodName values -1
; 
  jmp l3583
l3582:
  lea  rcx, [ tmp3584 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ methodName ]
  lea  rdi , [ tmp3584 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_createMethod$2
  pop rdi
  ret
l3583:
  lea  rcx , [ tmp3580 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ __TrashBin ]
  lea  r9 , [ l3582 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys methodName values __TrashBin
; -----------------------------
; 
  mov dword [ tmp3581 ], 1
  mov [ tmp3584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3581 ]
  mov [ tmp3584 + Variant_t.value], rax
  lea  rcx , [ id ]
  lea  rdx , [ tmp3584 ]
  lea  r8 , [ tmp3580 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3580 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3580 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3584 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator methodName

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore proto
  restore id
  restore className
  restore classMap
  restore classList
  restore tmp3580
  restore tmp3581
  restore tmp3584
  restore methodName
; -----------------------------------------------
; function __MIRCode_getClassProtoById$2
; -----------------------------------------------
__MIRCode_getClassProtoById$2:
  ; init frame
  ; ----------
  tmp3586 EQU rbp - 12 ; 4 bytes
  tmp3585 EQU rbp - 28 ; 16 bytes
  proto EQU rdi
  classList EQU rbp - 44 ; 16 bytes
  classId EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classId ], xmm0
  mov [classList + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3585 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ classId + Variant_t.value]
  mov dword [ tmp3586 ], eax
  lea  rcx , [ classList ]
  lea  rdx , [ tmp3586 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore classId
  restore classList
  restore proto
  restore tmp3585
  restore tmp3586
; -----------------------------------------------
; function __MIRCode_retValGuard$3
; -----------------------------------------------
__MIRCode_retValGuard$3:
  ; init frame
  ; ----------
  tmp3589 EQU rbp - 24 ; 16 bytes
  tmp3588 EQU rbp - 28 ; 4 bytes
  tmp3587 EQU rbp - 44 ; 16 bytes
  funcName EQU rbp - 60 ; 16 bytes
  rvName EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rvName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcName ], xmm0
  mov [tmp3587 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3589 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3588 ], 45
  mov [ tmp3589 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3588 ]
  mov [ tmp3589 + Variant_t.value], rax
  lea  rcx, [ tmp3587 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3589 ]
  lea  r8 , [ rvName ]
  lea  r9 , [ funcName ]
  lea  rdi , [ tmp3587 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push2$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3587 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3589 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rvName
  restore funcName
  restore tmp3587
  restore tmp3588
  restore tmp3589
; -----------------------------------------------
; function __MIRCode_forEach$4
; -----------------------------------------------
__MIRCode_forEach$4:
  ; init frame
  ; ----------
  tmp3592 EQU rbp - 24 ; 16 bytes
  tmp3591 EQU rbp - 28 ; 4 bytes
  tmp3590 EQU rbp - 44 ; 16 bytes
  cb EQU rbp - 60 ; 16 bytes
  valueId EQU rbp - 76 ; 16 bytes
  keyId EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ keyId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ valueId ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ cb ], xmm0
  mov [tmp3590 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3592 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3591 ], 100
  mov [ tmp3592 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3591 ]
  mov [ tmp3592 + Variant_t.value], rax
  lea  rcx, [ tmp3590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3592 ]
  lea  r8 , [ keyId ]
  lea  r9 , [ valueId ]
  lea  rax , [ cb ]
  push rax
  lea  rdi , [ tmp3590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push3$5
  add rsp, 8
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3590 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3592 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore keyId
  restore valueId
  restore cb
  restore tmp3590
  restore tmp3591
  restore tmp3592
; -----------------------------------------------
; function __MIRCode_syscall$3
; -----------------------------------------------
__MIRCode_syscall$3:
  ; init frame
  ; ----------
  tmp3595 EQU rbp - 24 ; 16 bytes
  tmp3594 EQU rbp - 28 ; 4 bytes
  tmp3593 EQU rbp - 44 ; 16 bytes
  paramsCnt EQU rbp - 60 ; 16 bytes
  id EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3593 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3595 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3594 ], 48
  mov [ tmp3595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3594 ]
  mov [ tmp3595 + Variant_t.value], rax
  lea  rcx, [ tmp3593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3595 ]
  lea  r8 , [ id ]
  lea  r9 , [ paramsCnt ]
  lea  rdi , [ tmp3593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_push2$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3593 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3595 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore id
  restore paramsCnt
  restore tmp3593
  restore tmp3594
  restore tmp3595
; -----------------------------------------------
; function __AppMold_constructor$1
; -----------------------------------------------
__AppMold_constructor$1:
  ; init frame
  ; ----------
  tmp3597 EQU rbp - 24 ; 16 bytes
  tmp3596 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3596 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3597 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal172 ]
  lea  rdi , [ tmp3596 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_SymbolTable]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTOptimizerConstantFolding]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal403 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTSymbolsCollector]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal404 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTEvaluator]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal405 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTPreprocessor]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPreprocessor_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal406 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTOptimizerCSE]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal407 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTOptimizerDeadCodeRemove]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal408 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTOptimizerVCall]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerVCall_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTOptimizerIf]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerIf_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal410 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTOptimizerInline]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal411 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTTypeCast]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTypeCast_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal412 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_ASTModuleResolver]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTModuleResolver_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal413 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp3596 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_clearLogContext$1
  pop rdi
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3596 ]
  lea  rdx, [vtable_MIRCode]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3596 ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_constructor$1
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3596 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal414 ]
  lea  rdi , [ tmp3596 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3596
  restore tmp3597
; -----------------------------------------------
; function __AppMold_clearLogContext$1
; -----------------------------------------------
__AppMold_clearLogContext$1:
  ; init frame
  ; ----------
  tmp3601 EQU rbp - 12 ; 4 bytes
  tmp3600 EQU rbp - 16 ; 4 bytes
  tmp3599 EQU rbp - 32 ; 16 bytes
  tmp3598 EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3598 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3599 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3598 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3598 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3599 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3599 ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3598 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp3599 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3601 ], 1
  mov eax, dword [ tmp3601 ]
  neg eax
  mov dword [ tmp3600 ], eax
  mov [ tmp3599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3600 ]
  mov [ tmp3599 + Variant_t.value], rax
  lea  rcx , [ tmp3598 ]
  lea  rdx , [ __literal21 ]
  lea  r8 , [ tmp3599 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3601 ], 1
  mov eax, dword [ tmp3601 ]
  neg eax
  mov dword [ tmp3600 ], eax
  mov [ tmp3599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3600 ]
  mov [ tmp3599 + Variant_t.value], rax
  lea  rcx , [ tmp3598 ]
  lea  rdx , [ __literal20 ]
  lea  r8 , [ tmp3599 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal415 ]
  lea  r8 , [ tmp3598 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3598 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3599 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3598
  restore tmp3599
  restore tmp3600
  restore tmp3601
; -----------------------------------------------
; function __AppMold_setLogContext$2
; -----------------------------------------------
__AppMold_setLogContext$2:
  ; init frame
  ; ----------
  ctx EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ctx ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal415 ]
  lea  r8 , [ ctx ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore ctx
; -----------------------------------------------
; function __AppMold_logDebug$2
; -----------------------------------------------
__AppMold_logDebug$2:
  ; init frame
  ; ----------
  tmp3606 EQU rbp - 24 ; 16 bytes
  tmp3603 EQU rbp - 28 ; 4 bytes
  tmp3602 EQU rbp - 32 ; 4 bytes
  msg EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3606 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3603 ], 1
  xor  eax, eax
  or   dword [ DEBUG_MOLD ], eax
  setz cl
  or   dword [ tmp3603 ], eax
  setz al
  xor  al, cl
  jnz l3604
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal416 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3604:
l3605:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3606 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3602
  restore tmp3603
  restore tmp3606
; -----------------------------------------------
; function __AppMold_logError$2
; -----------------------------------------------
__AppMold_logError$2:
  ; init frame
  ; ----------
  tmp3615 EQU rbp - 24 ; 16 bytes
  tmp3614 EQU rbp - 40 ; 16 bytes
  tmp3613 EQU rbp - 56 ; 16 bytes
  tmp3612 EQU rbp - 72 ; 16 bytes
  tmp3611 EQU rbp - 88 ; 16 bytes
  tmp3610 EQU rbp - 104 ; 16 bytes
  tmp3609 EQU rbp - 120 ; 16 bytes
  tmp3608 EQU rbp - 136 ; 16 bytes
  tmp3607 EQU rbp - 152 ; 16 bytes
  msgPrefix EQU rbp - 168 ; 16 bytes
  logCtx EQU rbp - 184 ; 16 bytes
  msg EQU rbp - 200 ; 16 bytes
  this EQU rbp - 216 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [logCtx + Variant_t.type], VARIANT_UNDEFINED
  mov [msgPrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3607 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3608 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3609 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3610 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3611 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3612 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3613 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3614 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3615 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ logCtx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal415 ]
  lea  r8 , [ logCtx ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3609 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp3609 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3607 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3609 ]
  lea  rdi , [ tmp3607 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3612 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal20 ]
  lea  r8 , [ tmp3612 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3609 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3612 ]
  lea  rdi , [ tmp3609 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3615 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal21 ]
  lea  r8 , [ tmp3615 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3612 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3615 ]
  lea  rdi , [ tmp3612 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3612 ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp3614 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal25 ]
  lea  rdx , [ tmp3614 ]
  lea  r8 , [ tmp3613 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3611 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3609 ]
  lea  rdx , [ tmp3613 ]
  lea  r8 , [ tmp3611 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3610 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal25 ]
  lea  rdx , [ tmp3611 ]
  lea  r8 , [ tmp3610 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ msgPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3607 ]
  lea  rdx , [ tmp3610 ]
  lea  r8 , [ msgPrefix ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3608 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ msgPrefix ]
  lea  rdx , [ msg ]
  lea  r8 , [ tmp3608 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3607 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3608 ]
  lea  rdi , [ tmp3607 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ logCtx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3607 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3609 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3612 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3615 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore msg
  restore logCtx
  restore msgPrefix
  restore tmp3607
  restore tmp3608
  restore tmp3609
  restore tmp3610
  restore tmp3611
  restore tmp3612
  restore tmp3613
  restore tmp3614
  restore tmp3615
; -----------------------------------------------
; function __AppMold_getMir1Code$1
; -----------------------------------------------
__AppMold_getMir1Code$1:
  ; init frame
  ; ----------
  tmp3616 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3616 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3616
; -----------------------------------------------
; function __AppMold_getSymbolTable$1
; -----------------------------------------------
__AppMold_getSymbolTable$1:
  ; init frame
  ; ----------
  tmp3617 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3617 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3617 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3617
; -----------------------------------------------
; function __AppMold_getAstSymbolsCollector$1
; -----------------------------------------------
__AppMold_getAstSymbolsCollector$1:
  ; init frame
  ; ----------
  tmp3618 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3618 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal404 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3618 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3618
; -----------------------------------------------
; function __AppMold_getAstOptimizerConstantFolding$1
; -----------------------------------------------
__AppMold_getAstOptimizerConstantFolding$1:
  ; init frame
  ; ----------
  tmp3619 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3619 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal403 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3619 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3619
; -----------------------------------------------
; function __AppMold_getAstPreprocessor$1
; -----------------------------------------------
__AppMold_getAstPreprocessor$1:
  ; init frame
  ; ----------
  tmp3620 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3620 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal406 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3620 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3620
; -----------------------------------------------
; function __AppMold_getAstEvaluator$1
; -----------------------------------------------
__AppMold_getAstEvaluator$1:
  ; init frame
  ; ----------
  tmp3621 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3621 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal405 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3621 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3621
; -----------------------------------------------
; function __AppMold_getAstOptimizerCSE$1
; -----------------------------------------------
__AppMold_getAstOptimizerCSE$1:
  ; init frame
  ; ----------
  tmp3622 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3622 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal407 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3622 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3622
; -----------------------------------------------
; function __AppMold_getAstOptimizerDeadCodeRemove$1
; -----------------------------------------------
__AppMold_getAstOptimizerDeadCodeRemove$1:
  ; init frame
  ; ----------
  tmp3623 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3623 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal408 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3623 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3623
; -----------------------------------------------
; function __AppMold_getAstOptimizerVCall$1
; -----------------------------------------------
__AppMold_getAstOptimizerVCall$1:
  ; init frame
  ; ----------
  tmp3624 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3624 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3624 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3624
; -----------------------------------------------
; function __AppMold_getAstOptimizerIf$1
; -----------------------------------------------
__AppMold_getAstOptimizerIf$1:
  ; init frame
  ; ----------
  tmp3625 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3625 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal410 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3625 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3625
; -----------------------------------------------
; function __AppMold_getAstOptimizerInline$1
; -----------------------------------------------
__AppMold_getAstOptimizerInline$1:
  ; init frame
  ; ----------
  tmp3626 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3626 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal411 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3626 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3626
; -----------------------------------------------
; function __AppMold_getAstModuleResolver$1
; -----------------------------------------------
__AppMold_getAstModuleResolver$1:
  ; init frame
  ; ----------
  tmp3627 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3627 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal413 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3627 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3627
; -----------------------------------------------
; function __AppMold_getAstTypeCast$1
; -----------------------------------------------
__AppMold_getAstTypeCast$1:
  ; init frame
  ; ----------
  tmp3628 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3628 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal412 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3628 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3628
; -----------------------------------------------
; function __ASTPrinterText__printNode_twoArgsOp$3
; -----------------------------------------------
__ASTPrinterText__printNode_twoArgsOp$3:
  ; init frame
  ; ----------
  tmp3647 EQU rbp - 24 ; 16 bytes
  tmp3646 EQU rbp - 40 ; 16 bytes
  tmp3641 EQU rbp - 44 ; 4 bytes
  tmp3639 EQU rbp - 48 ; 4 bytes
  tmp3637 EQU rbp - 52 ; 4 bytes
  tmp3635 EQU rbp - 56 ; 4 bytes
  tmp3634 EQU rbp - 72 ; 16 bytes
  tmp3633 EQU rbp - 88 ; 16 bytes
  tmp3631 EQU rbp - 92 ; 4 bytes
  tmp3630 EQU rbp - 96 ; 4 bytes
  tmp3629 EQU rbp - 112 ; 16 bytes
  useParentForY EQU rbp - 128 ; 16 bytes
  useParentForX EQU rbp - 144 ; 16 bytes
  y EQU rbp - 160 ; 16 bytes
  x EQU rbp - 176 ; 16 bytes
  children EQU rbp - 192 ; 16 bytes
  op EQU rbp - 208 ; 16 bytes
  node EQU rbp - 224 ; 16 bytes
  this EQU rbp - 240 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ op ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [useParentForX + Variant_t.type], VARIANT_UNDEFINED
  mov [useParentForY + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3629 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3633 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3634 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3646 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3647 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3630 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3630 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3630 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3630 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3631 ], 0
  mov eax, dword [ tmp3631 ]
  mov [ useParentForX + Variant_t.type], VARIANT_BOOLEAN
  mov [ useParentForX + Variant_t.value], rax
  mov dword [ tmp3631 ], 0
  mov eax, dword [ tmp3631 ]
  mov [ useParentForY + Variant_t.type], VARIANT_BOOLEAN
  mov [ useParentForY + Variant_t.value], rax
  mov dword [ tmp3631 ], 1
  lea  rcx, [ tmp3633 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3633 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3630 ], 304
  mov [ tmp3634 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3630 ]
  mov [ tmp3634 + Variant_t.value], rax
  lea  rcx , [ tmp3633 ]
  lea  rdx , [ tmp3634 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3629 + Variant_t.value]
  mov dword [ tmp3635 ], eax
  cmp dword [ tmp3635 ], 0
  jnz l3632
  mov dword [ tmp3635 ], 1
  lea  rcx, [ tmp3634 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3634 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3630 ], 305
  mov [ tmp3633 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3630 ]
  mov [ tmp3633 + Variant_t.value], rax
  lea  rcx , [ tmp3634 ]
  lea  rdx , [ tmp3633 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3629 + Variant_t.value]
  mov dword [ tmp3637 ], eax
  cmp dword [ tmp3637 ], 0
  jnz l3636
  mov dword [ tmp3637 ], 1
  lea  rcx, [ tmp3633 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3633 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3630 ], 308
  mov [ tmp3634 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3630 ]
  mov [ tmp3634 + Variant_t.value], rax
  lea  rcx , [ tmp3633 ]
  lea  rdx , [ tmp3634 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3629 + Variant_t.value]
  mov dword [ tmp3639 ], eax
  cmp dword [ tmp3639 ], 0
  jnz l3638
  mov dword [ tmp3639 ], 1
  lea  rcx, [ tmp3634 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3634 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3630 ], 500
  mov [ tmp3633 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3630 ]
  mov [ tmp3633 + Variant_t.value], rax
  lea  rcx , [ tmp3634 ]
  lea  rdx , [ tmp3633 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3629 + Variant_t.value]
  mov dword [ tmp3641 ], eax
  cmp dword [ tmp3641 ], 0
  jnz l3640
  lea  rcx, [ tmp3633 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3633 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3630 ], 501
  mov [ tmp3634 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3630 ]
  mov [ tmp3634 + Variant_t.value], rax
  lea  rcx , [ tmp3633 ]
  lea  rdx , [ tmp3634 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3629 + Variant_t.value]
  mov dword [ tmp3639 ], eax
l3640:
  mov eax, dword [ tmp3639 ]
  mov dword [ tmp3637 ], eax
l3638:
  mov eax, dword [ tmp3637 ]
  mov dword [ tmp3635 ], eax
l3636:
  mov eax, dword [ tmp3635 ]
  mov dword [ tmp3631 ], eax
l3632:
  cmp dword [ tmp3631 ], 0
  jz l3642
  lea  rcx, [ tmp3634 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp3634 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmOrVar
  pop rdi
  mov dword [ tmp3635 ], 1
  mov eax, dword [ tmp3635 ]
  mov [ tmp3633 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3633 + Variant_t.value], rax
  lea  rcx , [ tmp3634 ]
  lea  rdx , [ tmp3633 ]
  lea  r8 , [ useParentForX ]
  call  __MOLD_VariantCompareNE
  lea  rcx, [ tmp3633 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp3633 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmOrVar
  pop rdi
  mov dword [ tmp3635 ], 1
  mov eax, dword [ tmp3635 ]
  mov [ tmp3634 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3634 + Variant_t.value], rax
  lea  rcx , [ tmp3633 ]
  lea  rdx , [ tmp3634 ]
  lea  r8 , [ useParentForY ]
  call  __MOLD_VariantCompareNE
l3642:
l3643:
  mov dword [ tmp3631 ], 1
  mov eax, dword [ tmp3631 ]
  mov [ tmp3634 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3634 + Variant_t.value], rax
  lea  rcx , [ useParentForX ]
  lea  rdx , [ tmp3634 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3629 + Variant_t.value]
  mov dword [ tmp3631 ], eax
  cmp dword [ tmp3631 ], 0
  jz l3644
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal417 ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal196 ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3645
l3644:
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
l3645:
  lea  rcx, [ tmp3647 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ op ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ tmp3647 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3646 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal326 ]
  lea  rdx , [ tmp3647 ]
  lea  r8 , [ tmp3646 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3646 ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3631 ], 1
  mov eax, dword [ tmp3631 ]
  mov [ tmp3634 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3634 + Variant_t.value], rax
  lea  rcx , [ useParentForY ]
  lea  rdx , [ tmp3634 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3629 + Variant_t.value]
  mov dword [ tmp3631 ], eax
  cmp dword [ tmp3631 ], 0
  jz l3648
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal417 ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ y ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal196 ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3649
l3648:
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ y ]
  lea  rdi , [ tmp3629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
l3649:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ useParentForX ]
  call __MOLD_VariantDestroy
  lea  rcx, [ useParentForY ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3633 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3634 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore node
  restore op
  restore children
  restore x
  restore y
  restore useParentForX
  restore useParentForY
  restore tmp3629
  restore tmp3630
  restore tmp3631
  restore tmp3633
  restore tmp3634
  restore tmp3635
  restore tmp3637
  restore tmp3639
  restore tmp3641
  restore tmp3646
  restore tmp3647
; -----------------------------------------------
; function __ASTPrinterText__printNode_codeBlock$3
; -----------------------------------------------
__ASTPrinterText__printNode_codeBlock$3:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  tmp3669 EQU rbp - 28 ; 4 bytes
  tmp3664 EQU rbp - 44 ; 16 bytes
  tmp3661 EQU rbp - 60 ; 16 bytes
  tmp3658 EQU rbp - 64 ; 4 bytes
  tmp3656 EQU rbp - 68 ; 4 bytes
  tmp3655 EQU rbp - 84 ; 16 bytes
  tmp3654 EQU rbp - 88 ; 4 bytes
  tmp3653 EQU rbp - 104 ; 16 bytes
  tmp3652 EQU rbp - 120 ; 16 bytes
  tmp3650 EQU rbp - 124 ; 4 bytes
  node EQU rbp - 140 ; 16 bytes
  prefix EQU rbp - 156 ; 16 bytes
  this EQU rbp - 172 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ prefix ], xmm0
  or [ prefix  + Variant_t.flags ], VARIANT_FLAG_DUPLICATE_ON_FIRST_WRITE
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [tmp3652 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3653 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3655 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3661 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3664 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  mov dword [ tmp3650 ], 0
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3653 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3654 ], 103
  mov [ tmp3655 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3655 + Variant_t.value], rax
  lea  rcx , [ tmp3653 ]
  lea  rdx , [ tmp3655 ]
  lea  r8 , [ tmp3652 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3652 + Variant_t.value]
  mov dword [ tmp3656 ], eax
  cmp dword [ tmp3656 ], 0
  jz l3651
  mov dword [ tmp3656 ], 0
  lea  rcx, [ tmp3655 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3655 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3654 ], 102
  mov [ tmp3653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3653 + Variant_t.value], rax
  lea  rcx , [ tmp3655 ]
  lea  rdx , [ tmp3653 ]
  lea  r8 , [ tmp3652 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3652 + Variant_t.value]
  mov dword [ tmp3658 ], eax
  cmp dword [ tmp3658 ], 0
  jz l3657
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3653 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3654 ], 104
  mov [ tmp3655 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3655 + Variant_t.value], rax
  lea  rcx , [ tmp3653 ]
  lea  rdx , [ tmp3655 ]
  lea  r8 , [ tmp3652 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3652 + Variant_t.value]
  mov dword [ tmp3656 ], eax
l3657:
  mov eax, dword [ tmp3656 ]
  mov dword [ tmp3650 ], eax
l3651:
  cmp dword [ tmp3650 ], 0
  jz l3659
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal418 ]
  lea  r8 , [ prefix ]
  call  __MOLD_VariantStringJoin
l3659:
l3660:
  lea  rcx, [ tmp3652 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3652 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3663
l3662:
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3653 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3654 ], 999
  mov [ tmp3664 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3664 + Variant_t.value], rax
  lea  rcx , [ tmp3653 ]
  lea  rdx , [ tmp3664 ]
  lea  r8 , [ tmp3655 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3655 + Variant_t.value]
  mov dword [ tmp3650 ], eax
  cmp dword [ tmp3650 ], 0
  jz l3665
  lea  rcx, [ tmp3655 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp3655 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  mov dword [ tmp3656 ], 0
  lea  rcx, [ tmp3664 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3664 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3654 ], 101
  mov [ tmp3653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3653 + Variant_t.value], rax
  lea  rcx , [ tmp3664 ]
  lea  rdx , [ tmp3653 ]
  lea  r8 , [ tmp3655 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3655 + Variant_t.value]
  mov dword [ tmp3658 ], eax
  cmp dword [ tmp3658 ], 0
  jz l3667
  mov dword [ tmp3658 ], 0
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3653 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3654 ], 150
  mov [ tmp3664 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3664 + Variant_t.value], rax
  lea  rcx , [ tmp3653 ]
  lea  rdx , [ tmp3664 ]
  lea  r8 , [ tmp3655 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3655 + Variant_t.value]
  mov dword [ tmp3669 ], eax
  cmp dword [ tmp3669 ], 0
  jz l3668
  lea  rcx, [ tmp3664 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3664 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3654 ], 103
  mov [ tmp3653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3654 ]
  mov [ tmp3653 + Variant_t.value], rax
  lea  rcx , [ tmp3664 ]
  lea  rdx , [ tmp3653 ]
  lea  r8 , [ tmp3655 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3655 + Variant_t.value]
  mov dword [ tmp3658 ], eax
l3668:
  mov eax, dword [ tmp3658 ]
  mov dword [ tmp3656 ], eax
l3667:
  cmp dword [ tmp3656 ], 0
  jz l3670
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
l3670:
l3671:
l3665:
l3666:
  ret
l3663:
  lea  rcx , [ tmp3652 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3662 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3652 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3655 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3664 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore prefix
  restore node
  restore tmp3650
  restore tmp3652
  restore tmp3653
  restore tmp3654
  restore tmp3655
  restore tmp3656
  restore tmp3658
  restore tmp3661
  restore tmp3664
  restore tmp3669
  restore childNode
; -----------------------------------------------
; function __ASTPrinterText__printNode_paramsList$4
; -----------------------------------------------
__ASTPrinterText__printNode_paramsList$4:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  tmp3679 EQU rbp - 16 ; 4 bytes
  tmp3678 EQU rbp - 20 ; 4 bytes
  tmp3677 EQU rbp - 24 ; 4 bytes
  tmp3674 EQU rbp - 40 ; 16 bytes
  tmp3673 EQU rbp - 44 ; 4 bytes
  tmp3672 EQU rbp - 60 ; 16 bytes
  sep EQU rbp - 76 ; 16 bytes
  childrenCnt EQU rbp - 92 ; 16 bytes
  children EQU rbp - 108 ; 16 bytes
  parenthesis EQU rbp - 124 ; 16 bytes
  beginIdx EQU rbp - 140 ; 16 bytes
  node EQU rbp - 156 ; 16 bytes
  this EQU rbp - 172 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ beginIdx ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ parenthesis ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3672 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3674 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  mov dword [ tmp3673 ], 1
  mov eax, dword [ tmp3673 ]
  mov [ tmp3674 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3674 + Variant_t.value], rax
  lea  rcx , [ parenthesis ]
  lea  rdx , [ tmp3674 ]
  lea  r8 , [ tmp3672 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3672 + Variant_t.value]
  mov dword [ tmp3673 ], eax
  cmp dword [ tmp3673 ], 0
  jz l3675
  lea  rcx, [ tmp3672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal417 ]
  lea  rdi , [ tmp3672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
l3675:
l3676:
  mov dword [ tmp3677 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3678 ], eax
  mov eax, dword [ beginIdx + Variant_t.value]
  mov dword [ idx ], eax
l3680:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3678 ]
  jge l3681
  lea  rcx, [ tmp3672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sep ]
  lea  rdi , [ tmp3672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3674 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3674 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3674 ]
  lea  rdi , [ tmp3672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal419 ]
  call __MOLD_VariantMove
  mov eax, dword [ idx ]
  add eax, dword [ tmp3677 ]
  mov dword [ idx ], eax
  jmp l3680
l3681:
  mov dword [ tmp3673 ], 1
  mov eax, dword [ tmp3673 ]
  mov [ tmp3674 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3674 + Variant_t.value], rax
  lea  rcx , [ parenthesis ]
  lea  rdx , [ tmp3674 ]
  lea  r8 , [ tmp3672 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3672 + Variant_t.value]
  mov dword [ tmp3673 ], eax
  cmp dword [ tmp3673 ], 0
  jz l3682
  lea  rcx, [ tmp3672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal196 ]
  lea  rdi , [ tmp3672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
l3682:
l3683:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3672 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3674 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore node
  restore beginIdx
  restore parenthesis
  restore children
  restore childrenCnt
  restore sep
  restore tmp3672
  restore tmp3673
  restore tmp3674
  restore tmp3677
  restore tmp3678
  restore tmp3679
  restore idx
; -----------------------------------------------
; function __ASTPrinterText__printNode$3
; -----------------------------------------------
__ASTPrinterText__printNode$3:
  ; init frame
  ; ----------
  tmp3854 EQU rbp - 12 ; 4 bytes
  tmp3851 EQU rbp - 16 ; 4 bytes
  tmp3848 EQU rbp - 20 ; 4 bytes
  tmp3845 EQU rbp - 24 ; 4 bytes
  tmp3842 EQU rbp - 28 ; 4 bytes
  tmp3839 EQU rbp - 32 ; 4 bytes
  tmp3836 EQU rbp - 36 ; 4 bytes
  tmp3833 EQU rbp - 40 ; 4 bytes
  tmp3830 EQU rbp - 44 ; 4 bytes
  tmp3827 EQU rbp - 48 ; 4 bytes
  tmp3824 EQU rbp - 52 ; 4 bytes
  tmp3821 EQU rbp - 56 ; 4 bytes
  tmp3814 EQU rbp - 60 ; 4 bytes
  tmp3812 EQU rbp - 64 ; 4 bytes
  tmp3809 EQU rbp - 68 ; 4 bytes
  symbolInfo EQU rbp - 84 ; 16 bytes
  tmp3802 EQU rbp - 100 ; 16 bytes
  tmp3799 EQU rbp - 104 ; 4 bytes
  tmp3797 EQU rbp - 108 ; 4 bytes
  tmp3795 EQU rbp - 112 ; 4 bytes
  tmp3792 EQU rbp - 116 ; 4 bytes
  tmp3787 EQU rbp - 120 ; 4 bytes
  tmp3782 EQU rbp - 124 ; 4 bytes
  tmp3779 EQU rbp - 128 ; 4 bytes
  tmp3776 EQU rbp - 132 ; 4 bytes
  oneValue EQU rbp - 148 ; 16 bytes
  arrayOfValues EQU rbp - 164 ; 16 bytes
  idx EQU rbp - 168 ; 4 bytes
  tmp3771 EQU rbp - 172 ; 4 bytes
  tmp3764 EQU rbp - 176 ; 4 bytes
  tmp3763 EQU rbp - 180 ; 4 bytes
  tmp3758 EQU rbp - 184 ; 4 bytes
  tmp3753 EQU rbp - 188 ; 4 bytes
  tmp3750 EQU rbp - 192 ; 4 bytes
  oneParam EQU rbp - 208 ; 16 bytes
  tmp3737 EQU rbp - 224 ; 16 bytes
  item EQU rbp - 240 ; 16 bytes
  symbols EQU rbp - 256 ; 16 bytes
  symbolTable EQU rbp - 272 ; 16 bytes
  tmp3727 EQU rbp - 276 ; 4 bytes
  tmp3723 EQU rbp - 280 ; 4 bytes
  tmp3721 EQU rbp - 284 ; 4 bytes
  tmp3716 EQU rbp - 288 ; 4 bytes
  tmp3713 EQU rbp - 292 ; 4 bytes
  tmp3704 EQU rbp - 296 ; 4 bytes
  tmp3701 EQU rbp - 300 ; 4 bytes
  childNode EQU rbp - 316 ; 16 bytes
  sep EQU rbp - 332 ; 16 bytes
  tmp3694 EQU rbp - 336 ; 4 bytes
  tmp3693 EQU rbp - 352 ; 16 bytes
  tmp3690 EQU rbp - 356 ; 4 bytes
  tmp3687 EQU rbp - 360 ; 4 bytes
  tmp3686 EQU rbp - 376 ; 16 bytes
  tmp3685 EQU rbp - 380 ; 4 bytes
  tmp3684 EQU rbp - 396 ; 16 bytes
  x EQU rbp - 412 ; 16 bytes
  rval EQU rbp - 428 ; 16 bytes
  lval EQU rbp - 444 ; 16 bytes
  childrenCnt EQU rbp - 460 ; 16 bytes
  children EQU rbp - 476 ; 16 bytes
  value EQU rbp - 492 ; 16 bytes
  opcode EQU rbp - 508 ; 16 bytes
  node EQU rbp - 524 ; 16 bytes
  prefix EQU rbp - 540 ; 16 bytes
  this EQU rbp - 556 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 592

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ prefix ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3684 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3686 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3693 + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp3737 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [arrayOfValues + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp3802 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3685 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3685 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ lval ]
  call __MOLD_VariantMove
  mov dword [ tmp3685 ], 4
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3687 ], eax
  cmp dword [ tmp3687 ], 0
  jz l3688
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal52 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal52 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3689
l3688:
  mov dword [ tmp3685 ], 9
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3690 ], eax
  cmp dword [ tmp3690 ], 0
  jz l3691
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3693 ]
  lea  rdi , [ tmp3686 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3694 ], eax
  cmp dword [ tmp3694 ], 0
  jz l3695
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3686 ]
  call  __MOLD_PrintVariantLn
  jmp l3696
l3695:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal420 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3698
l3697:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sep ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal419 ]
  call __MOLD_VariantMove
  ret
l3698:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3697 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal34 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
l3696:
  jmp l3692
l3691:
  mov dword [ tmp3685 ], 10
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3694 ], eax
  cmp dword [ tmp3694 ], 0
  jz l3699
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3693 ]
  lea  rdi , [ tmp3686 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3701 ], eax
  cmp dword [ tmp3701 ], 0
  jz l3702
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3686 ]
  call  __MOLD_PrintVariantLn
  jmp l3703
l3702:
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3693 ]
  lea  rdi , [ tmp3686 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3685 ], 0
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3704 ], eax
  cmp dword [ tmp3704 ], 0
  jz l3705
  lea  rcx , [ __literal421 ]
  call  __MOLD_PrintVariantLn
  jmp l3706
l3705:
  lea  rcx , [ __literal422 ]
  call  __MOLD_PrintVariantLn
l3706:
l3703:
  jmp l3700
l3699:
  mov dword [ tmp3685 ], 100
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3701 ], eax
  cmp dword [ tmp3701 ], 0
  jz l3707
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3708
l3707:
  mov dword [ tmp3685 ], 100
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3704 ], eax
  cmp dword [ tmp3704 ], 0
  jz l3709
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3712
l3711:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  ret
l3712:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3711 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l3710
l3709:
  mov dword [ tmp3685 ], 101
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3713 ], eax
  cmp dword [ tmp3713 ], 0
  jz l3714
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3716 ], eax
  cmp dword [ tmp3716 ], 0
  jz l3717
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp3684 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*13]
  pop rdi
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ tmp3684 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l3720
l3719:
  mov dword [ tmp3721 ], 0
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3685 ], 5
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3723 ], eax
  cmp dword [ tmp3723 ], 0
  jz l3722
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3685 ], 0
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3721 ], eax
l3722:
  cmp dword [ tmp3721 ], 0
  jz l3724
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3723 ], 1
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3727 ], eax
  cmp dword [ tmp3727 ], 0
  jnz l3726
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3723 ], eax
l3726:
  cmp dword [ tmp3723 ], 0
  jz l3728
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 5 ]
  lea  rdx , [ prefix ]
  lea  r8 , [ __literal423 ]
  lea  r9 , [ tmp3693 ]
  lea  rax , [ __literal134 ]
  push rax
  lea  rax , [ value ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l3728:
l3729:
l3724:
l3725:
  ret
l3720:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3719 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
l3717:
l3718:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_codeBlock$3
  pop rdi
  jmp l3715
l3714:
  mov dword [ tmp3685 ], 103
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3716 ], eax
  cmp dword [ tmp3716 ], 0
  jz l3730
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal424 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_codeBlock$3
  pop rdi
  lea  rcx , [ __literal425 ]
  call  __MOLD_PrintVariantLn
  jmp l3731
l3730:
  mov dword [ tmp3721 ], 1
  mov dword [ tmp3685 ], 104
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3723 ], eax
  cmp dword [ tmp3723 ], 0
  jnz l3732
  mov dword [ tmp3685 ], 102
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3721 ], eax
l3732:
  cmp dword [ tmp3721 ], 0
  jz l3733
  mov dword [ tmp3685 ], 104
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3723 ], eax
  cmp dword [ tmp3723 ], 0
  jz l3735
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal426 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3737 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3736
l3735:
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal427 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3737 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
l3736:
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal417 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values oneParam
; 
  jmp l3739
l3738:
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sep ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oneParam ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal419 ]
  call __MOLD_VariantMove
  ret
l3739:
  lea  rcx , [ tmp3684 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l3738 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal196 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3686 ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3723 ], eax
  cmp dword [ tmp3723 ], 0
  jz l3740
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal428 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l3741
l3740:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
l3741:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_codeBlock$3
  pop rdi
  mov dword [ tmp3685 ], 104
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3723 ], eax
  cmp dword [ tmp3723 ], 0
  jz l3742
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal429 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3737 ]
  call  __MOLD_PrintVariantLn
  jmp l3743
l3742:
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal430 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3737 ]
  call  __MOLD_PrintVariantLn
l3743:
  jmp l3734
l3733:
  mov dword [ tmp3685 ], 106
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3723 ], eax
  cmp dword [ tmp3723 ], 0
  jz l3744
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3685 ], 101
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3727 ], eax
  cmp dword [ tmp3727 ], 0
  jz l3746
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
l3746:
l3747:
  mov dword [ tmp3685 ], 0
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal44 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3685 ], 1
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  mov dword [ tmp3727 ], 1
  mov eax, dword [ tmp3727 ]
  mov [ tmp3693 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3686 ]
  lea  r9 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_paramsList$4
  pop rdi
  jmp l3745
l3744:
  mov dword [ tmp3685 ], 107
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3727 ], eax
  cmp dword [ tmp3727 ], 0
  jz l3748
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal431 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3685 ], 1
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  mov dword [ tmp3750 ], 1
  mov eax, dword [ tmp3750 ]
  mov [ tmp3686 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3693 ]
  lea  r9 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_paramsList$4
  pop rdi
  jmp l3749
l3748:
  mov dword [ tmp3685 ], 150
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3750 ], eax
  cmp dword [ tmp3750 ], 0
  jz l3751
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal432 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3737 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3685 ], 0
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3685 ], 1
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3685 ], 150
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3753 ], eax
  cmp dword [ tmp3753 ], 0
  jz l3754
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal418 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp3685 ], 1
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3737 ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  jmp l3755
l3754:
  mov dword [ tmp3685 ], 1
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
l3755:
  mov dword [ tmp3685 ], 3
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3753 ], eax
  cmp dword [ tmp3753 ], 0
  jz l3756
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ __literal433 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3685 ], 2
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3685 ], 150
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3758 ], eax
  cmp dword [ tmp3758 ], 0
  jz l3759
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal418 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp3685 ], 2
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3737 ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  jmp l3760
l3759:
  mov dword [ tmp3685 ], 2
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
l3760:
l3756:
l3757:
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal434 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3737 ]
  call  __MOLD_PrintVariantLn
  jmp l3752
l3751:
  mov dword [ tmp3685 ], 170
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3685 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3753 ], eax
  cmp dword [ tmp3753 ], 0
  jz l3761
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal435 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3737 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3685 ], 0
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3685 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3685 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3763 ], eax
  mov dword [ idx ], 1
l3765:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3763 ]
  jge l3766
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal362 ]
  lea  r8 , [ arrayOfValues ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arrayOfValues ]
  lea  rdi , [ tmp3686 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3758 ], eax
  cmp dword [ tmp3758 ], 0
  jz l3767
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal436 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values oneValue
; 
  jmp l3770
l3769:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sep ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oneValue ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal419 ]
  call __MOLD_VariantMove
  ret
l3770:
  lea  rcx , [ arrayOfValues ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneValue ]
  lea  r9 , [ l3769 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneValue
; -----------------------------
; 
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  jmp l3768
l3767:
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal437 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3737 ]
  call  __MOLD_PrintVariantLn
l3768:
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3771 ], 101
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3771 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3758 ], eax
  cmp dword [ tmp3758 ], 0
  jz l3772
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal418 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3737 ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  jmp l3773
l3772:
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal438 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3737 ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
l3773:
  mov eax, dword [ idx ]
  add eax, dword [ tmp3685 ]
  mov dword [ idx ], eax
  jmp l3765
l3766:
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal439 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3737 ]
  call  __MOLD_PrintVariantLn
  jmp l3762
l3761:
  mov dword [ tmp3764 ], 600
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3758 ], eax
  cmp dword [ tmp3758 ], 0
  jz l3774
  mov dword [ tmp3764 ], 0
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  jmp l3775
l3774:
  mov dword [ tmp3764 ], 152
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3776 ], eax
  cmp dword [ tmp3776 ], 0
  jz l3777
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ value ]
  lea  rdx , [ __literal45 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3779 ], eax
  cmp dword [ tmp3779 ], 0
  jz l3780
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal326 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 0
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  mov dword [ tmp3782 ], 0
  mov eax, dword [ tmp3782 ]
  mov [ tmp3686 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3693 ]
  lea  r9 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_paramsList$4
  pop rdi
  jmp l3781
l3780:
  mov dword [ tmp3764 ], 0
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3686 + Variant_t.value], rax
  mov dword [ tmp3782 ], 1
  mov eax, dword [ tmp3782 ]
  mov [ tmp3693 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3686 ]
  lea  r9 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_paramsList$4
  pop rdi
l3781:
  jmp l3778
l3777:
  mov dword [ tmp3764 ], 153
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3779 ], eax
  cmp dword [ tmp3779 ], 0
  jz l3783
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal442 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 0
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3764 ], 1
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_codeBlock$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal443 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3784
l3783:
  mov dword [ tmp3764 ], 160
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3782 ], eax
  cmp dword [ tmp3782 ], 0
  jz l3785
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal444 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 0
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal445 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 1
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal446 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 2
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  mov dword [ tmp3764 ], 3
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3764 ], 1
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3787 ], eax
  cmp dword [ tmp3787 ], 0
  jz l3788
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal447 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 3
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
l3788:
l3789:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3764 ], 4
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_codeBlock$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal448 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3786
l3785:
  mov dword [ tmp3764 ], 161
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3787 ], eax
  cmp dword [ tmp3787 ], 0
  jz l3790
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal449 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 0
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal445 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3764 ], 1
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3764 ], 2
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3764 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3686 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_codeBlock$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal448 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3791
l3790:
  mov dword [ tmp3764 ], 201
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3792 ], eax
  cmp dword [ tmp3792 ], 0
  jz l3793
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3795 ], 0
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp3686 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3797 ], eax
  cmp dword [ tmp3797 ], 0
  jz l3796
  mov dword [ tmp3797 ], 0
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3764 ], 5
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3799 ], eax
  cmp dword [ tmp3799 ], 0
  jz l3798
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3686 ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3797 ], eax
l3798:
  mov eax, dword [ tmp3797 ]
  mov dword [ tmp3795 ], eax
l3796:
  cmp dword [ tmp3795 ], 0
  jz l3800
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3693 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3802 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3684 ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp3802 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal52 ]
  lea  rdx , [ tmp3802 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin
l3800:
l3801:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3794
l3793:
  mov dword [ tmp3764 ], 203
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3795 ], eax
  cmp dword [ tmp3795 ], 0
  jz l3803
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ lval ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal420 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ rval ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal34 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3804
l3803:
  mov dword [ tmp3764 ], 204
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3797 ], eax
  cmp dword [ tmp3797 ], 0
  jz l3805
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ lval ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal450 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ rval ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal451 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3806
l3805:
  mov dword [ tmp3764 ], 205
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3799 ], eax
  cmp dword [ tmp3799 ], 0
  jz l3807
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ prefix ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ lval ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal452 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ rval ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  jmp l3808
l3807:
  mov dword [ tmp3764 ], 301
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3809 ], eax
  cmp dword [ tmp3809 ], 0
  jz l3810
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal453 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3812 ], 1
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3693 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3764 ], 302
  mov [ tmp3686 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3686 + Variant_t.value], rax
  lea  rcx , [ tmp3693 ]
  lea  rdx , [ tmp3686 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3814 ], eax
  cmp dword [ tmp3814 ], 0
  jnz l3813
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp3686 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3764 ], 303
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ tmp3686 ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3812 ], eax
l3813:
  cmp dword [ tmp3812 ], 0
  jz l3815
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal417 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal196 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  jmp l3816
l3815:
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi
l3816:
  jmp l3811
l3810:
  mov dword [ tmp3764 ], 302
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3812 ], eax
  cmp dword [ tmp3812 ], 0
  jz l3817
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal118 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3818
l3817:
  mov dword [ tmp3764 ], 303
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3814 ], eax
  cmp dword [ tmp3814 ], 0
  jz l3819
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal117 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3820
l3819:
  mov dword [ tmp3764 ], 304
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3821 ], eax
  cmp dword [ tmp3821 ], 0
  jz l3822
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal120 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3823
l3822:
  mov dword [ tmp3764 ], 305
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3824 ], eax
  cmp dword [ tmp3824 ], 0
  jz l3825
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal121 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3826
l3825:
  mov dword [ tmp3764 ], 308
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3827 ], eax
  cmp dword [ tmp3827 ], 0
  jz l3828
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal122 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3829
l3828:
  mov dword [ tmp3764 ], 400
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3830 ], eax
  cmp dword [ tmp3830 ], 0
  jz l3831
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal454 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3832
l3831:
  mov dword [ tmp3764 ], 401
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3833 ], eax
  cmp dword [ tmp3833 ], 0
  jz l3834
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal455 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3835
l3834:
  mov dword [ tmp3764 ], 402
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3836 ], eax
  cmp dword [ tmp3836 ], 0
  jz l3837
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal456 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3838
l3837:
  mov dword [ tmp3764 ], 403
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3839 ], eax
  cmp dword [ tmp3839 ], 0
  jz l3840
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal457 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3841
l3840:
  mov dword [ tmp3764 ], 404
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3842 ], eax
  cmp dword [ tmp3842 ], 0
  jz l3843
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal458 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3844
l3843:
  mov dword [ tmp3764 ], 405
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3845 ], eax
  cmp dword [ tmp3845 ], 0
  jz l3846
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal459 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3847
l3846:
  mov dword [ tmp3764 ], 500
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3848 ], eax
  cmp dword [ tmp3848 ], 0
  jz l3849
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal115 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3850
l3849:
  mov dword [ tmp3764 ], 501
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3851 ], eax
  cmp dword [ tmp3851 ], 0
  jz l3852
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal116 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode_twoArgsOp$3
  pop rdi
  jmp l3853
l3852:
  mov dword [ tmp3764 ], 999
  mov [ tmp3693 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3764 ]
  mov [ tmp3693 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3684 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3684 + Variant_t.value]
  mov dword [ tmp3854 ], eax
  cmp dword [ tmp3854 ], 0
  jz l3855
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp3693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3737 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal146 ]
  lea  rdx , [ tmp3693 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3737 ]
  lea  rdi , [ tmp3684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l3855:
l3856:
l3853:
l3850:
l3847:
l3844:
l3841:
l3838:
l3835:
l3832:
l3829:
l3826:
l3823:
l3820:
l3818:
l3811:
l3808:
l3806:
l3804:
l3794:
l3791:
l3786:
l3784:
l3778:
l3775:
l3762:
l3752:
l3749:
l3745:
l3734:
l3731:
l3715:
l3710:
l3708:
l3700:
l3692:
l3689:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3684 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3686 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3693 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  ; Skipped loop iterator oneParam
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneValue
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 592
  pop  rbp
  ret

  restore this
  restore prefix
  restore node
  restore opcode
  restore value
  restore children
  restore childrenCnt
  restore lval
  restore rval
  restore x
  restore tmp3684
  restore tmp3685
  restore tmp3686
  restore tmp3687
  restore tmp3690
  restore tmp3693
  restore tmp3694
  restore sep
  restore childNode
  restore tmp3701
  restore tmp3704
  restore tmp3713
  restore tmp3716
  restore tmp3721
  restore tmp3723
  restore tmp3727
  restore symbolTable
  restore symbols
  restore item
  restore tmp3737
  restore oneParam
  restore tmp3750
  restore tmp3753
  restore tmp3758
  restore tmp3763
  restore tmp3764
  restore tmp3771
  restore idx
  restore arrayOfValues
  restore oneValue
  restore tmp3776
  restore tmp3779
  restore tmp3782
  restore tmp3787
  restore tmp3792
  restore tmp3795
  restore tmp3797
  restore tmp3799
  restore tmp3802
  restore symbolInfo
  restore tmp3809
  restore tmp3812
  restore tmp3814
  restore tmp3821
  restore tmp3824
  restore tmp3827
  restore tmp3830
  restore tmp3833
  restore tmp3836
  restore tmp3839
  restore tmp3842
  restore tmp3845
  restore tmp3848
  restore tmp3851
  restore tmp3854
; -----------------------------------------------
; function __ASTPrinterText_printNode$2
; -----------------------------------------------
__ASTPrinterText_printNode$2:
  ; init frame
  ; ----------
  tmp3857 EQU rbp - 24 ; 16 bytes
  prefix EQU rbp - 40 ; 16 bytes
  node EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [prefix + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3857 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ prefix ]
  call __MOLD_VariantDestroy
  lea rcx, [ prefix ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3857 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp3857 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText__printNode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3857 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore node
  restore prefix
  restore tmp3857
; -----------------------------------------------
; function __ASTPrinterHtml__printSymbolTable$2
; -----------------------------------------------
__ASTPrinterHtml__printSymbolTable$2:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  tmp3871 EQU rbp - 44 ; 4 bytes
  tmp3870 EQU rbp - 60 ; 16 bytes
  tmp3869 EQU rbp - 76 ; 16 bytes
  tmp3866 EQU rbp - 80 ; 4 bytes
  tmp3863 EQU rbp - 84 ; 4 bytes
  tmp3862 EQU rbp - 100 ; 16 bytes
  tmp3861 EQU rbp - 116 ; 16 bytes
  tmp3858 EQU rbp - 132 ; 16 bytes
  symbolsIndex EQU rbp - 148 ; 16 bytes
  symbols EQU rbp - 164 ; 16 bytes
  symbolTable EQU rbp - 180 ; 16 bytes
  this EQU rbp - 196 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsIndex + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3858 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3861 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3862 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3869 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3870 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [value + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3858 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp3858 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*13]
  pop rdi
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ tmp3858 ]
  call __MOLD_VariantMove
  lea  rcx, [ symbolsIndex ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbols ]
  lea  rdx , [ __literal460 ]
  lea  r8 , [ symbolsIndex ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ __literal461 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal462 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values symbolInfo
; 
  jmp l3860
l3859:
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ __literal117 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3862 ]
  lea  rdi , [ tmp3861 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3861 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3858 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3858 + Variant_t.value]
  mov dword [ tmp3863 ], eax
  cmp dword [ tmp3863 ], 0
  jz l3864
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3861 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3861 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp3858 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3858 + Variant_t.value]
  mov dword [ tmp3866 ], eax
  cmp dword [ tmp3866 ], 0
  jz l3867
  lea  rcx, [ tmp3870 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp3870 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal463 ]
  lea  rdx , [ tmp3870 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin
l3867:
l3868:
l3864:
l3865:
  lea  rcx , [ __literal464 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3861 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ tmp3861 ]
  lea  r9 , [ __literal466 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp3861 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ tmp3861 ]
  lea  r9 , [ __literal466 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp3861 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ tmp3861 ]
  lea  r9 , [ __literal466 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ value ]
  lea  r9 , [ __literal466 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp3862 + Variant_t.value]
  mov dword [ tmp3871 ], eax
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ SYMBOL_KIND_AS_TEXT ]
  lea  rdx , [ tmp3871 ]
  lea  r8 , [ tmp3861 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ tmp3861 ]
  lea  r9 , [ __literal466 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3862 ]
  lea  rdi , [ tmp3861 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ tmp3861 ]
  lea  r9 , [ __literal466 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3861 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal465 ]
  lea  r8 , [ tmp3861 ]
  lea  r9 , [ __literal466 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3862 ]
  lea  rdi , [ tmp3861 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3861 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3858 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3858 + Variant_t.value]
  mov dword [ tmp3863 ], eax
  cmp dword [ tmp3863 ], 0
  jz l3872
  lea  rcx, [ tmp3862 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ tmp3862 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3862 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3861 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3870 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3861 ]
  lea  rdx , [ __literal466 ]
  lea  r8 , [ tmp3870 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3869 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal465 ]
  lea  rdx , [ tmp3870 ]
  lea  r8 , [ tmp3869 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3869 ]
  call  __MOLD_PrintVariantLn
  jmp l3873
l3872:
  lea  rcx , [ __literal467 ]
  call  __MOLD_PrintVariantLn
l3873:
  lea  rcx , [ __literal468 ]
  call  __MOLD_PrintVariantLn
  ret
l3860:
  lea  rcx , [ symbolsIndex ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l3859 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 
  lea  rcx , [ __literal469 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsIndex ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3858 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3861 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3862 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore symbols
  restore symbolsIndex
  restore tmp3858
  restore tmp3861
  restore tmp3862
  restore tmp3863
  restore tmp3866
  restore tmp3869
  restore tmp3870
  restore tmp3871
  restore symbolInfo
  restore value
; -----------------------------------------------
; function __ASTPrinterHtml__printNode$2
; -----------------------------------------------
__ASTPrinterHtml__printNode$2:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp3923 EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  tmp3912 EQU rbp - 72 ; 16 bytes
  tmp3911 EQU rbp - 88 ; 16 bytes
  tmp3910 EQU rbp - 104 ; 16 bytes
  tmp3905 EQU rbp - 108 ; 4 bytes
  tmp3903 EQU rbp - 112 ; 4 bytes
  tmp3901 EQU rbp - 116 ; 4 bytes
  tmp3899 EQU rbp - 120 ; 4 bytes
  childNode EQU rbp - 136 ; 16 bytes
  tmp3885 EQU rbp - 140 ; 4 bytes
  tmp3884 EQU rbp - 144 ; 4 bytes
  tmp3878 EQU rbp - 148 ; 4 bytes
  tmp3877 EQU rbp - 164 ; 16 bytes
  tmp3876 EQU rbp - 180 ; 16 bytes
  tmp3875 EQU rbp - 196 ; 16 bytes
  tmp3874 EQU rbp - 212 ; 16 bytes
  children EQU rbp - 228 ; 16 bytes
  opcode EQU rbp - 244 ; 16 bytes
  node EQU rbp - 260 ; 16 bytes
  this EQU rbp - 276 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3874 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3875 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3876 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3877 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp3910 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3911 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3912 + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3923 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ __literal470 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3877 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3877 ]
  lea  rdi , [ tmp3876 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3875 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal471 ]
  lea  rdx , [ tmp3876 ]
  lea  r8 , [ tmp3875 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp3876 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsText
  pop rdi
  lea  rcx , [ 4 ]
  lea  rdx , [ tmp3875 ]
  lea  r8 , [ __literal472 ]
  lea  r9 , [ tmp3876 ]
  lea  rax , [ __literal473 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp3877 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3877 ]
  lea  rdi , [ tmp3876 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3876 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3878 ], eax
  cmp dword [ tmp3878 ], 0
  jz l3879
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp3876 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal474 ]
  lea  r8 , [ tmp3876 ]
  lea  r9 , [ __literal475 ]
  call  __MOLD_PrintArrayOfVariantsLn
l3879:
l3880:
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal353 ]
  lea  r8 , [ tmp3876 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3878 ], 1
  mov eax, dword [ tmp3878 ]
  mov [ tmp3877 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ tmp3876 ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3878 ], eax
  cmp dword [ tmp3878 ], 0
  jz l3881
  lea  rcx , [ __literal476 ]
  call  __MOLD_PrintVariantLn
l3881:
l3882:
  mov dword [ tmp3878 ], 1
  mov dword [ tmp3884 ], 102
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3885 ], eax
  cmp dword [ tmp3885 ], 0
  jnz l3883
  mov dword [ tmp3884 ], 104
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3878 ], eax
l3883:
  cmp dword [ tmp3878 ], 0
  jz l3886
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3877 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal477 ]
  lea  r8 , [ tmp3877 ]
  lea  r9 , [ __literal478 ]
  call  __MOLD_PrintArrayOfVariantsLn
l3886:
l3887:
  mov dword [ tmp3878 ], 1
  mov dword [ tmp3884 ], 101
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3885 ], eax
  cmp dword [ tmp3885 ], 0
  jnz l3888
  mov dword [ tmp3884 ], 100
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3878 ], eax
l3888:
  cmp dword [ tmp3878 ], 0
  jz l3889
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3876 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3876 ]
  lea  rdi , [ tmp3877 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3877 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3885 ], eax
  cmp dword [ tmp3885 ], 0
  jz l3891
  lea  rcx , [ __literal477 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3877 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3877 ]
  lea  rdi , [ tmp3874 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterHtml__printSymbolTable$2
  pop rdi
  lea  rcx , [ __literal478 ]
  call  __MOLD_PrintVariantLn
l3891:
l3892:
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3894
l3893:
  lea  rcx , [ __literal477 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  rdi , [ tmp3874 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterHtml__printNode$2
  pop rdi
  lea  rcx , [ __literal478 ]
  call  __MOLD_PrintVariantLn
  ret
l3894:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3893 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l3890
l3889:
  mov dword [ tmp3884 ], 103
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3885 ], eax
  cmp dword [ tmp3885 ], 0
  jz l3895
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3898
l3897:
  lea  rcx , [ __literal477 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  rdi , [ tmp3874 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterHtml__printNode$2
  pop rdi
  lea  rcx , [ __literal478 ]
  call  __MOLD_PrintVariantLn
  ret
l3898:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3897 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  jmp l3896
l3895:
  mov dword [ tmp3899 ], 1
  mov dword [ tmp3884 ], 100
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3901 ], eax
  cmp dword [ tmp3901 ], 0
  jnz l3900
  mov dword [ tmp3901 ], 1
  mov dword [ tmp3884 ], 152
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3903 ], eax
  cmp dword [ tmp3903 ], 0
  jnz l3902
  mov dword [ tmp3903 ], 1
  mov dword [ tmp3884 ], 106
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3905 ], eax
  cmp dword [ tmp3905 ], 0
  jnz l3904
  mov dword [ tmp3884 ], 201
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3903 ], eax
l3904:
  mov eax, dword [ tmp3903 ]
  mov dword [ tmp3901 ], eax
l3902:
  mov eax, dword [ tmp3901 ]
  mov dword [ tmp3899 ], eax
l3900:
  cmp dword [ tmp3899 ], 0
  jz l3906
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp3877 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3877 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3901 ], eax
  cmp dword [ tmp3901 ], 0
  jz l3908
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp3877 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3877 ]
  lea  rdi , [ tmp3874 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp3912 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3874 ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp3912 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal479 ]
  lea  rdx , [ tmp3912 ]
  lea  r8 , [ tmp3911 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ tmp3911 ]
  lea  r8 , [ tmp3910 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal52 ]
  lea  rdx , [ tmp3910 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin
l3908:
l3909:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal477 ]
  lea  r8 , [ value ]
  lea  r9 , [ __literal478 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l3907
l3906:
  mov dword [ tmp3884 ], 600
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3901 ], eax
  cmp dword [ tmp3901 ], 0
  jz l3913
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp3876 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3876 ]
  lea  rdi , [ tmp3877 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp3910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3877 ]
  lea  rdx , [ __literal482 ]
  lea  r8 , [ tmp3910 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3875 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal481 ]
  lea  rdx , [ tmp3910 ]
  lea  r8 , [ tmp3875 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3875 ]
  call  __MOLD_PrintVariantLn
l3913:
l3914:
l3907:
  lea  rcx , [ __literal464 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values childNode
; 
  jmp l3916
l3915:
  lea  rcx , [ __literal465 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  rdi , [ tmp3874 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterHtml__printNode$2
  pop rdi
  lea  rcx , [ __literal466 ]
  call  __MOLD_PrintVariantLn
  ret
l3916:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3915 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values childNode
; -----------------------------
; 
  lea  rcx , [ __literal468 ]
  call  __MOLD_PrintVariantLn
l3896:
l3890:
  mov dword [ tmp3884 ], 201
  mov [ tmp3877 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3884 ]
  mov [ tmp3877 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3878 ], eax
  cmp dword [ tmp3878 ], 0
  jz l3917
  lea  rcx , [ __literal483 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp3876 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3876 ]
  lea  rdi , [ tmp3877 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3877 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3885 ], eax
  cmp dword [ tmp3885 ], 0
  jz l3919
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l3922
l3921:
  lea  rcx, [ tmp3923 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3923 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3923 ]
  lea  rdi , [ tmp3876 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3875 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp3876 ]
  lea  r8 , [ tmp3875 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp3875 ]
  lea  r8 , [ __literal484 ]
  call  __MOLD_PrintArrayOfVariantsLn
  ret
l3922:
  lea  rcx , [ tmp3874 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3921 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  jmp l3920
l3919:
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp3876 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3876 ]
  lea  rdi , [ tmp3877 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3877 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3899 ], eax
  cmp dword [ tmp3899 ], 0
  jz l3924
  lea  rcx , [ __literal485 ]
  call  __MOLD_PrintVariantLn
  jmp l3925
l3924:
  lea  rcx, [ tmp3923 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp3923 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3923 ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp3876 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3876 ]
  lea  rdi , [ tmp3877 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3875 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal153 ]
  lea  rdx , [ tmp3877 ]
  lea  r8 , [ tmp3875 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3875 ]
  call  __MOLD_PrintVariantLn
l3925:
l3920:
  lea  rcx , [ __literal478 ]
  call  __MOLD_PrintVariantLn
l3917:
l3918:
  lea  rcx , [ __literal469 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3876 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3877 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3923 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore tmp3874
  restore tmp3875
  restore tmp3876
  restore tmp3877
  restore tmp3878
  restore tmp3884
  restore tmp3885
  restore childNode
  restore tmp3899
  restore tmp3901
  restore tmp3903
  restore tmp3905
  restore tmp3910
  restore tmp3911
  restore tmp3912
  restore value
  restore tmp3923
  restore item
; -----------------------------------------------
; function __ASTPrinterHtml_printNode$2
; -----------------------------------------------
__ASTPrinterHtml_printNode$2:
  ; init frame
  ; ----------
  tmp3926 EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3926 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ __literal486 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3926 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp3926 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterHtml__printNode$2
  pop rdi
  lea  rcx , [ __literal487 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3926 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3926
; -----------------------------------------------
; function __ASTTranslator_constructor$2
; -----------------------------------------------
__ASTTranslator_constructor$2:
  ; init frame
  ; ----------
  tmp3928 EQU rbp - 24 ; 16 bytes
  tmp3927 EQU rbp - 28 ; 4 bytes
  app EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp3928 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3927 ], 0
  mov eax, dword [ tmp3927 ]
  mov [ tmp3928 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3928 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal488 ]
  lea  r8 , [ tmp3928 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3927 ], 0
  mov eax, dword [ tmp3927 ]
  mov [ tmp3928 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3928 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ tmp3928 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3927 ], 0
  mov eax, dword [ tmp3927 ]
  mov [ tmp3928 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3928 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp3928 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3928 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp3927
  restore tmp3928
; -----------------------------------------------
; function __ASTTranslator__debug$2
; -----------------------------------------------
__ASTTranslator__debug$2:
  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
; -----------------------------------------------
; function __ASTTranslator__error$2
; -----------------------------------------------
__ASTTranslator__error$2:
  ; init frame
  ; ----------
  tmp3930 EQU rbp - 24 ; 16 bytes
  tmp3929 EQU rbp - 40 ; 16 bytes
  msg EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3929 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3930 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3930 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp3930 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3929 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3930 ]
  lea  rdx , [ msg ]
  lea  rdi, [ tmp3929 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*11]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3929 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3930 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3929
  restore tmp3930
; -----------------------------------------------
; function __ASTTranslator__loadArgsVector$2
; -----------------------------------------------
__ASTTranslator__loadArgsVector$2:
  ; init frame
  ; ----------
  tmp3931 EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp3931 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3931 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal492 ]
  lea  rdi , [ tmp3931 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3931 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3931
; -----------------------------------------------
; function __ASTTranslator__loadArgsCount$2
; -----------------------------------------------
__ASTTranslator__loadArgsCount$2:
  ; init frame
  ; ----------
  tmp3932 EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp3932 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3932 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal493 ]
  lea  rdi , [ tmp3932 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3932 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3932
; -----------------------------------------------
; function __ASTTranslator__syscall$5
; -----------------------------------------------
__ASTTranslator__syscall$5:
  ; init frame
  ; ----------
  tmp3933 EQU rbp - 24 ; 16 bytes
  paramsCnt EQU rbp - 40 ; 16 bytes
  params EQU rbp - 56 ; 16 bytes
  id EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ id ]
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]
  mov [tmp3933 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3933 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal494 ]
  lea  rdi , [ tmp3933 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3933 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore id
  restore params
  restore paramsCnt
  restore tmp3933
; -----------------------------------------------
; function __ASTTranslator__loadArray$2
; -----------------------------------------------
__ASTTranslator__loadArray$2:
  ; init frame
  ; ----------
  tmp3934 EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp3934 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3934 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal495 ]
  lea  rdi , [ tmp3934 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3934 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3934
; -----------------------------------------------
; function __ASTTranslator__loadMap$2
; -----------------------------------------------
__ASTTranslator__loadMap$2:
  ; init frame
  ; ----------
  tmp3935 EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp3935 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3935 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal496 ]
  lea  rdi , [ tmp3935 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3935 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3935
; -----------------------------------------------
; function __ASTTranslator__loadImm$3
; -----------------------------------------------
__ASTTranslator__loadImm$3:
  ; init frame
  ; ----------
  tmp3936 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]
  mov [tmp3936 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3936 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal497 ]
  lea  rdi , [ tmp3936 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3936 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp3936
; -----------------------------------------------
; function __ASTTranslator__loadImmAsVariant$3
; -----------------------------------------------
__ASTTranslator__loadImmAsVariant$3:
  ; init frame
  ; ----------
  tmp3937 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]
  mov [tmp3937 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3937 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal498 ]
  lea  rdi , [ tmp3937 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3937 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp3937
; -----------------------------------------------
; function __ASTTranslator__loadVariable$2
; -----------------------------------------------
__ASTTranslator__loadVariable$2:
  ; init frame
  ; ----------
  tmp3938 EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ name ]
  mov [tmp3938 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3938 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal499 ]
  lea  rdi , [ tmp3938 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3938 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp3938
; -----------------------------------------------
; function __ASTTranslator__call$5
; -----------------------------------------------
__ASTTranslator__call$5:
  ; init frame
  ; ----------
  tmp3939 EQU rbp - 24 ; 16 bytes
  paramsCnt EQU rbp - 40 ; 16 bytes
  params EQU rbp - 56 ; 16 bytes
  funcProto EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ funcProto ]
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]
  mov [tmp3939 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3939 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal500 ]
  lea  rdi , [ tmp3939 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3939 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore funcProto
  restore params
  restore paramsCnt
  restore tmp3939
; -----------------------------------------------
; function __ASTTranslator__invokeMethod$4
; -----------------------------------------------
__ASTTranslator__invokeMethod$4:
  ; init frame
  ; ----------
  tmp3940 EQU rbp - 24 ; 16 bytes
  paramsCnt EQU rbp - 40 ; 16 bytes
  params EQU rbp - 56 ; 16 bytes
  methodName EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ methodName ]
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]
  mov [tmp3940 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3940 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal501 ]
  lea  rdi , [ tmp3940 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3940 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore methodName
  restore params
  restore paramsCnt
  restore tmp3940
; -----------------------------------------------
; function __ASTTranslator__callPrint$3
; -----------------------------------------------
__ASTTranslator__callPrint$3:
  ; init frame
  ; ----------
  tmp3941 EQU rbp - 24 ; 16 bytes
  paramsCnt EQU rbp - 40 ; 16 bytes
  params EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]
  mov [tmp3941 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3941 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal502 ]
  lea  rdi , [ tmp3941 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3941 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore params
  restore paramsCnt
  restore tmp3941
; -----------------------------------------------
; function __ASTTranslator__neg$3
; -----------------------------------------------
__ASTTranslator__neg$3:
  ; init frame
  ; ----------
  tmp3942 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]
  mov [tmp3942 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3942 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal503 ]
  lea  rdi , [ tmp3942 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3942 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp3942
; -----------------------------------------------
; function __ASTTranslator__add$4
; -----------------------------------------------
__ASTTranslator__add$4:
  ; init frame
  ; ----------
  tmp3943 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3943 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3943 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal504 ]
  lea  rdi , [ tmp3943 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3943 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3943
; -----------------------------------------------
; function __ASTTranslator__stringJoin$4
; -----------------------------------------------
__ASTTranslator__stringJoin$4:
  ; init frame
  ; ----------
  tmp3944 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3944 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3944 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal505 ]
  lea  rdi , [ tmp3944 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3944 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3944
; -----------------------------------------------
; function __ASTTranslator__sub$4
; -----------------------------------------------
__ASTTranslator__sub$4:
  ; init frame
  ; ----------
  tmp3945 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3945 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3945 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal506 ]
  lea  rdi , [ tmp3945 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3945 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3945
; -----------------------------------------------
; function __ASTTranslator__mul$4
; -----------------------------------------------
__ASTTranslator__mul$4:
  ; init frame
  ; ----------
  tmp3946 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3946 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3946 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal507 ]
  lea  rdi , [ tmp3946 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3946 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3946
; -----------------------------------------------
; function __ASTTranslator__div$4
; -----------------------------------------------
__ASTTranslator__div$4:
  ; init frame
  ; ----------
  tmp3947 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3947 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3947 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal508 ]
  lea  rdi , [ tmp3947 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3947 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3947
; -----------------------------------------------
; function __ASTTranslator__idiv$4
; -----------------------------------------------
__ASTTranslator__idiv$4:
  ; init frame
  ; ----------
  tmp3948 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3948 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3948 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal509 ]
  lea  rdi , [ tmp3948 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3948 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3948
; -----------------------------------------------
; function __ASTTranslator__compareEQ$4
; -----------------------------------------------
__ASTTranslator__compareEQ$4:
  ; init frame
  ; ----------
  tmp3949 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3949 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3949 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal510 ]
  lea  rdi , [ tmp3949 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3949 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3949
; -----------------------------------------------
; function __ASTTranslator__compareNEQ$4
; -----------------------------------------------
__ASTTranslator__compareNEQ$4:
  ; init frame
  ; ----------
  tmp3950 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3950 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3950 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal511 ]
  lea  rdi , [ tmp3950 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3950 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3950
; -----------------------------------------------
; function __ASTTranslator__compareLT$4
; -----------------------------------------------
__ASTTranslator__compareLT$4:
  ; init frame
  ; ----------
  tmp3951 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3951 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3951 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal512 ]
  lea  rdi , [ tmp3951 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3951 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3951
; -----------------------------------------------
; function __ASTTranslator__compareLE$4
; -----------------------------------------------
__ASTTranslator__compareLE$4:
  ; init frame
  ; ----------
  tmp3952 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3952 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3952 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal513 ]
  lea  rdi , [ tmp3952 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3952 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3952
; -----------------------------------------------
; function __ASTTranslator__compareGT$4
; -----------------------------------------------
__ASTTranslator__compareGT$4:
  ; init frame
  ; ----------
  tmp3953 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3953 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3953 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal514 ]
  lea  rdi , [ tmp3953 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3953 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3953
; -----------------------------------------------
; function __ASTTranslator__compareGE$4
; -----------------------------------------------
__ASTTranslator__compareGE$4:
  ; init frame
  ; ----------
  tmp3954 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3954 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal515 ]
  lea  rdi , [ tmp3954 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3954
; -----------------------------------------------
; function __ASTTranslator__boolAnd$4
; -----------------------------------------------
__ASTTranslator__boolAnd$4:
  ; init frame
  ; ----------
  tmp3955 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3955 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3955 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal516 ]
  lea  rdi , [ tmp3955 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3955 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3955
; -----------------------------------------------
; function __ASTTranslator__boolOr$4
; -----------------------------------------------
__ASTTranslator__boolOr$4:
  ; init frame
  ; ----------
  tmp3956 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp3956 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3956 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal517 ]
  lea  rdi , [ tmp3956 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3956 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp3956
; -----------------------------------------------
; function __ASTTranslator__loadFromIndex$4
; -----------------------------------------------
__ASTTranslator__loadFromIndex$4:
  ; init frame
  ; ----------
  tmp3957 EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 40 ; 16 bytes
  box EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ box ]
  ; skipped unused param [ idx ]
  mov [tmp3957 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3957 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal518 ]
  lea  rdi , [ tmp3957 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3957 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore box
  restore idx
  restore tmp3957
; -----------------------------------------------
; function __ASTTranslator__loadFromKey$4
; -----------------------------------------------
__ASTTranslator__loadFromKey$4:
  ; init frame
  ; ----------
  tmp3958 EQU rbp - 24 ; 16 bytes
  key EQU rbp - 40 ; 16 bytes
  box EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ box ]
  ; skipped unused param [ key ]
  mov [tmp3958 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3958 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal519 ]
  lea  rdi , [ tmp3958 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3958 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore box
  restore key
  restore tmp3958
; -----------------------------------------------
; function __ASTTranslator__storeAtIndex$4
; -----------------------------------------------
__ASTTranslator__storeAtIndex$4:
  ; init frame
  ; ----------
  tmp3959 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  idx EQU rbp - 56 ; 16 bytes
  box EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ box ]
  ; skipped unused param [ idx ]
  ; skipped unused param [ value ]
  mov [tmp3959 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3959 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal520 ]
  lea  rdi , [ tmp3959 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3959 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore box
  restore idx
  restore value
  restore tmp3959
; -----------------------------------------------
; function __ASTTranslator__storeAtKey$4
; -----------------------------------------------
__ASTTranslator__storeAtKey$4:
  ; init frame
  ; ----------
  tmp3960 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  key EQU rbp - 56 ; 16 bytes
  box EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ box ]
  ; skipped unused param [ key ]
  ; skipped unused param [ value ]
  mov [tmp3960 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3960 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal521 ]
  lea  rdi , [ tmp3960 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3960 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore box
  restore key
  restore value
  restore tmp3960
; -----------------------------------------------
; function __ASTTranslator__storeAtIndexAndDrop$4
; -----------------------------------------------
__ASTTranslator__storeAtIndexAndDrop$4:
  ; init frame
  ; ----------
  tmp3961 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  idx EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ idx ]
  ; skipped unused param [ value ]
  mov [tmp3961 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3961 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal522 ]
  lea  rdi , [ tmp3961 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3961 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore idx
  restore value
  restore tmp3961
; -----------------------------------------------
; function __ASTTranslator__storeAtKeyAndDrop$4
; -----------------------------------------------
__ASTTranslator__storeAtKeyAndDrop$4:
  ; init frame
  ; ----------
  tmp3962 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  key EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ key ]
  ; skipped unused param [ value ]
  mov [tmp3962 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3962 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal523 ]
  lea  rdi , [ tmp3962 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3962 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore key
  restore value
  restore tmp3962
; -----------------------------------------------
; function __ASTTranslator__createObject$3
; -----------------------------------------------
__ASTTranslator__createObject$3:
  ; init frame
  ; ----------
  tmp3963 EQU rbp - 24 ; 16 bytes
  classProto EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ classProto ]
  mov [tmp3963 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3963 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal524 ]
  lea  rdi , [ tmp3963 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3963 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore classProto
  restore tmp3963
; -----------------------------------------------
; function __ASTTranslator__convert$5
; -----------------------------------------------
__ASTTranslator__convert$5:
  ; init frame
  ; ----------
  tmp3964 EQU rbp - 24 ; 16 bytes
  dstType EQU rbp - 40 ; 16 bytes
  srcType EQU rbp - 56 ; 16 bytes
  src EQU rbp - 72 ; 16 bytes
  dst EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ dst ]
  ; skipped unused param [ src ]
  ; skipped unused param [ srcType ]
  ; skipped unused param [ dstType ]
  mov [tmp3964 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3964 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal525 ]
  lea  rdi , [ tmp3964 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3964 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore srcType
  restore dstType
  restore tmp3964
; -----------------------------------------------
; function __ASTTranslator__dropRetVal$1
; -----------------------------------------------
__ASTTranslator__dropRetVal$1:
  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret

  restore this
; -----------------------------------------------
; function __ASTTranslator__declareFunction$3
; -----------------------------------------------
__ASTTranslator__declareFunction$3:
  ; init frame
  ; ----------
  funcProto EQU rbp - 24 ; 16 bytes
  funcName EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ funcName ]
  ; skipped unused param [ funcProto ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
; -----------------------------------------------
; function __ASTTranslator__declareClass$3
; -----------------------------------------------
__ASTTranslator__declareClass$3:
  ; init frame
  ; ----------
  classProto EQU rbp - 24 ; 16 bytes
  className EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ className ]
  ; skipped unused param [ classProto ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore className
  restore classProto
; -----------------------------------------------
; function __ASTTranslator__emitFunctionBody$3
; -----------------------------------------------
__ASTTranslator__emitFunctionBody$3:
  ; init frame
  ; ----------
  funcProto EQU rbp - 24 ; 16 bytes
  funcName EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ funcName ]
  ; skipped unused param [ funcProto ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
; -----------------------------------------------
; function __ASTTranslator__declareExternalFunction$3
; -----------------------------------------------
__ASTTranslator__declareExternalFunction$3:
  ; init frame
  ; ----------
  tmp3966 EQU rbp - 24 ; 16 bytes
  tmp3965 EQU rbp - 40 ; 16 bytes
  funcProto EQU rbp - 56 ; 16 bytes
  funcName EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [tmp3965 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3966 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3966 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3966 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3965 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3966 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp3965 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*34]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3965 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3966 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore tmp3965
  restore tmp3966
; -----------------------------------------------
; function __ASTTranslator__getTempVar$2
; -----------------------------------------------
__ASTTranslator__getTempVar$2:
  ; init frame
  ; ----------
  tmp3968 EQU rbp - 24 ; 16 bytes
  tmp3967 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  wantedType EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [tmp3967 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3968 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3968 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp3968 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3967 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3968 ]
  lea  rdx , [ wantedType ]
  lea  rdi, [ tmp3967 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*55]
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp3967 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3967 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3968 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore tmp3967
  restore tmp3968
; -----------------------------------------------
; function __ASTTranslator__releaseTempVar$2
; -----------------------------------------------
__ASTTranslator__releaseTempVar$2:
  ; init frame
  ; ----------
  tmp3970 EQU rbp - 24 ; 16 bytes
  tmp3969 EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp3969 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3970 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp3970 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3969 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3970 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp3969 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*56]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3969 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3970 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore tmp3969
  restore tmp3970
; -----------------------------------------------
; function __ASTTranslator__enterScope$2
; -----------------------------------------------
__ASTTranslator__enterScope$2:
  ; init frame
  ; ----------
  tmp3971 EQU rbp - 24 ; 16 bytes
  ast EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [tmp3971 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3971 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3971 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3971 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3971 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore ast
  restore tmp3971
; -----------------------------------------------
; function __ASTTranslator__leaveScope$1
; -----------------------------------------------
__ASTTranslator__leaveScope$1:
  ; init frame
  ; ----------
  id EQU rbp - 24 ; 16 bytes
  item EQU rbp - 40 ; 16 bytes
  tmp3984 EQU rbp - 56 ; 16 bytes
  tmp3983 EQU rbp - 72 ; 16 bytes
  tmp3980 EQU rbp - 76 ; 4 bytes
  tmp3977 EQU rbp - 80 ; 4 bytes
  tmp3976 EQU rbp - 96 ; 16 bytes
  tmp3973 EQU rbp - 112 ; 16 bytes
  tmp3972 EQU rbp - 128 ; 16 bytes
  symbolsChild EQU rbp - 144 ; 16 bytes
  symbolsCurrent EQU rbp - 160 ; 16 bytes
  childTable EQU rbp - 176 ; 16 bytes
  this EQU rbp - 192 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [childTable + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsCurrent + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsChild + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3972 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3973 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3976 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3983 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3984 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [id + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ childTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ childTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3972 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childTable ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3972 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3972 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3973 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3973 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolsCurrent ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3973 ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ symbolsCurrent ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolsChild ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childTable ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ symbolsChild ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l3975
l3974:
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp3976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3973 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3976 ]
  lea  rdi , [ tmp3973 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3973 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3972 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp3972 + Variant_t.value]
  mov dword [ tmp3977 ], eax
  cmp dword [ tmp3977 ], 0
  jz l3978
  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtKey
  jmp l3979
l3978:
  lea  rcx, [ tmp3976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp3976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3973 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3976 ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp3973 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp3976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3973 ]
  lea  rdx , [ tmp3976 ]
  lea  r8 , [ tmp3972 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3972 + Variant_t.value]
  mov dword [ tmp3980 ], eax
  cmp dword [ tmp3980 ], 0
  jz l3981
  lea  rcx, [ tmp3976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3976 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3984 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3976 ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp3984 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3983 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal526 ]
  lea  rdx , [ tmp3984 ]
  lea  r8 , [ tmp3983 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3972 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3983 ]
  lea  rdi , [ tmp3972 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l3981:
l3982:
l3979:
  ret
l3975:
  lea  rcx , [ symbolsChild ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3974 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ childTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsCurrent ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsChild ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3972 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3973 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3976 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore childTable
  restore symbolsCurrent
  restore symbolsChild
  restore tmp3972
  restore tmp3973
  restore tmp3976
  restore tmp3977
  restore tmp3980
  restore tmp3983
  restore tmp3984
  restore item
  restore id
; -----------------------------------------------
; function __ASTTranslator__verifyNumberOfParameters$4
; -----------------------------------------------
__ASTTranslator__verifyNumberOfParameters$4:
  ; init frame
  ; ----------
  tmp3996 EQU rbp - 24 ; 16 bytes
  tmp3995 EQU rbp - 40 ; 16 bytes
  tmp3994 EQU rbp - 56 ; 16 bytes
  tmp3993 EQU rbp - 72 ; 16 bytes
  tmp3992 EQU rbp - 88 ; 16 bytes
  tmp3991 EQU rbp - 104 ; 16 bytes
  tmp3990 EQU rbp - 120 ; 16 bytes
  tmp3989 EQU rbp - 136 ; 16 bytes
  tmp3986 EQU rbp - 140 ; 4 bytes
  tmp3985 EQU rbp - 156 ; 16 bytes
  paramsPassedCnt EQU rbp - 172 ; 16 bytes
  paramsExpectedCnt EQU rbp - 188 ; 16 bytes
  name EQU rbp - 204 ; 16 bytes
  this EQU rbp - 220 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsExpectedCnt ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramsPassedCnt ], xmm0
  mov [tmp3985 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3989 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3990 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3991 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3992 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3993 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3994 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3995 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3996 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ paramsPassedCnt ]
  lea  rdx , [ paramsExpectedCnt ]
  lea  r8 , [ tmp3985 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3985 + Variant_t.value]
  mov dword [ tmp3986 ], eax
  cmp dword [ tmp3986 ], 0
  jz l3987
  lea  rcx, [ tmp3993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramsExpectedCnt ]
  lea  rdi , [ tmp3993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3996 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramsPassedCnt ]
  lea  rdi , [ tmp3996 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3995 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3996 ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp3995 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3994 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal312 ]
  lea  rdx , [ tmp3995 ]
  lea  r8 , [ tmp3994 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3992 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3993 ]
  lea  rdx , [ tmp3994 ]
  lea  r8 , [ tmp3992 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3991 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal311 ]
  lea  rdx , [ tmp3992 ]
  lea  r8 , [ tmp3991 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3990 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp3991 ]
  lea  r8 , [ tmp3990 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3989 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal527 ]
  lea  rdx , [ tmp3990 ]
  lea  r8 , [ tmp3989 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3985 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3989 ]
  lea  rdi , [ tmp3985 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l3987:
l3988:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3985 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3993 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3996 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore name
  restore paramsExpectedCnt
  restore paramsPassedCnt
  restore tmp3985
  restore tmp3986
  restore tmp3989
  restore tmp3990
  restore tmp3991
  restore tmp3992
  restore tmp3993
  restore tmp3994
  restore tmp3995
  restore tmp3996
; -----------------------------------------------
; function __ASTTranslator__emitFunction$2
; -----------------------------------------------
__ASTTranslator__emitFunction$2:
  ; init frame
  ; ----------
  oldSymbolTable EQU rbp - 24 ; 16 bytes
  tmp4006 EQU rbp - 28 ; 4 bytes
  tmp4005 EQU rbp - 32 ; 4 bytes
  tmp4004 EQU rbp - 48 ; 16 bytes
  tmp4003 EQU rbp - 64 ; 16 bytes
  tmp4002 EQU rbp - 80 ; 16 bytes
  tmp3999 EQU rbp - 84 ; 4 bytes
  tmp3998 EQU rbp - 100 ; 16 bytes
  tmp3997 EQU rbp - 116 ; 16 bytes
  children EQU rbp - 132 ; 16 bytes
  funcName EQU rbp - 148 ; 16 bytes
  funcProto EQU rbp - 164 ; 16 bytes
  ast EQU rbp - 180 ; 16 bytes
  this EQU rbp - 196 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3997 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3998 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4002 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4003 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4004 + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ ast ]
  call __MOLD_VariantMove
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp3998 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3998 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3997 + Variant_t.value]
  mov dword [ tmp3999 ], eax
  cmp dword [ tmp3999 ], 0
  jz l4000
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp3998 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal529 ]
  lea  r8 , [ tmp4003 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal528 ]
  lea  rdx , [ tmp4003 ]
  lea  r8 , [ tmp4002 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3998 ]
  lea  rdx , [ tmp4002 ]
  lea  rdi, [ tmp3997 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*58]
  pop rdi
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4004 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4004 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4005 ], 0
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4004 ]
  lea  rdx , [ tmp4005 ]
  lea  r8 , [ tmp3998 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3998 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4004 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal246 ]
  lea  r8 , [ tmp4004 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4004 ]
  lea  rdi , [ tmp3998 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3998 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp3997 + Variant_t.value]
  mov dword [ tmp4006 ], eax
  cmp dword [ tmp4006 ], 0
  jz l4007
  lea  rcx, [ tmp4004 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal246 ]
  lea  r8 , [ tmp4004 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ oldSymbolTable ]
  lea  rdx , [ tmp4004 ]
  lea  rdi, [ tmp3998 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*38]
  pop rdi
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3998 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal488 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantStoreAtKey
l4007:
l4008:
  lea  rcx , [ this ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp3997 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*205]
  pop rdi
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp3997 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*207]
  pop rdi
  mov dword [ tmp4006 ], 0
  mov eax, dword [ tmp4006 ]
  mov [ tmp3997 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3997 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4006 ], 0
  mov eax, dword [ tmp4006 ]
  mov [ tmp3997 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3997 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal488 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4006 ], 0
  mov eax, dword [ tmp4006 ]
  mov [ tmp3997 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3997 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp3998 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal530 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4002 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp3998 ]
  lea  rdx , [ tmp4002 ]
  lea  rdi, [ tmp3997 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*58]
  pop rdi
l4000:
l4001:

  ; clean frame
  ; -----------
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4004 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore ast
  restore funcProto
  restore funcName
  restore children
  restore tmp3997
  restore tmp3998
  restore tmp3999
  restore tmp4002
  restore tmp4003
  restore tmp4004
  restore tmp4005
  restore tmp4006
  restore oldSymbolTable
; -----------------------------------------------
; function __ASTTranslator__emitGlobals$1
; -----------------------------------------------
__ASTTranslator__emitGlobals$1:
  ; init frame
  ; ----------
  symbolKind EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  tmp4022 EQU rbp - 56 ; 16 bytes
  tmp4019 EQU rbp - 60 ; 4 bytes
  tmp4016 EQU rbp - 64 ; 4 bytes
  tmp4015 EQU rbp - 68 ; 4 bytes
  oneSymbol EQU rbp - 84 ; 16 bytes
  tmp4010 EQU rbp - 100 ; 16 bytes
  tmp4009 EQU rbp - 116 ; 16 bytes
  arrayOfSymbols EQU rbp - 132 ; 16 bytes
  symbols EQU rbp - 148 ; 16 bytes
  this EQU rbp - 164 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  mov [arrayOfSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4009 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4010 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp4022 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbolKind + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4009 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal531 ]
  lea  rdi , [ tmp4009 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__debug$2
  pop rdi
  lea  rcx, [ tmp4010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4010 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4009 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4010 ]
  lea  rdi, [ tmp4009 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*13]
  pop rdi
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ tmp4009 ]
  call __MOLD_VariantMove
  lea  rcx, [ arrayOfSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfSymbols ]
  call  __MOLD_VariantArrayCreate
; 
; -----------------------------
; BEGIN: for keys -1 values oneSymbol
; 
  jmp l4012
l4011:
  lea  rcx, [ tmp4009 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arrayOfSymbols ]
  lea  rdx , [ oneSymbol ]
  lea  rdi , [ tmp4009 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  ret
l4012:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneSymbol ]
  lea  r9 , [ l4011 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneSymbol
; -----------------------------
; 
; 
; -----------------------------
; BEGIN: for keys -1 values symbolInfo
; 
  jmp l4014
l4013:
  lea  rcx, [ symbolKind ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ symbolKind ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4015 ], 7
  mov [ tmp4010 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4015 ]
  mov [ tmp4010 + Variant_t.value], rax
  lea  rcx , [ symbolKind ]
  lea  rdx , [ tmp4010 ]
  lea  r8 , [ tmp4009 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4009 + Variant_t.value]
  mov dword [ tmp4016 ], eax
  cmp dword [ tmp4016 ], 0
  jz l4017
  lea  rcx, [ tmp4010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp4010 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4009 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4010 ]
  lea  rdi , [ tmp4009 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__emitFunction$2
  pop rdi
  jmp l4018
l4017:
  mov dword [ tmp4015 ], 8
  mov [ tmp4010 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4015 ]
  mov [ tmp4010 + Variant_t.value], rax
  lea  rcx , [ symbolKind ]
  lea  rdx , [ tmp4010 ]
  lea  r8 , [ tmp4009 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4009 + Variant_t.value]
  mov dword [ tmp4019 ], eax
  cmp dword [ tmp4019 ], 0
  jz l4020
  lea  rcx, [ tmp4010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4010 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4022 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ tmp4022 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4009 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4010 ]
  lea  r8 , [ tmp4022 ]
  lea  rdi, [ tmp4009 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*206]
  pop rdi
l4020:
l4021:
l4018:
  ret
l4014:
  lea  rcx , [ arrayOfSymbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l4013 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 
  lea  rcx, [ tmp4009 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal532 ]
  lea  rdi , [ tmp4009 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__debug$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4009 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4010 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneSymbol
  lea  rcx, [ tmp4022 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo
  lea  rcx, [ symbolKind ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore symbols
  restore arrayOfSymbols
  restore tmp4009
  restore tmp4010
  restore oneSymbol
  restore tmp4015
  restore tmp4016
  restore tmp4019
  restore tmp4022
  restore symbolInfo
  restore symbolKind
; -----------------------------------------------
; function __ASTTranslator__callSuper$4
; -----------------------------------------------
__ASTTranslator__callSuper$4:
  ; init frame
  ; ----------
  oneParam EQU rbp - 24 ; 16 bytes
  paramIdx EQU rbp - 40 ; 16 bytes
  newParams EQU rbp - 56 ; 16 bytes
  tmp4053 EQU rbp - 60 ; 4 bytes
  tmp4052 EQU rbp - 64 ; 4 bytes
  tmp4049 EQU rbp - 80 ; 16 bytes
  tmp4048 EQU rbp - 96 ; 16 bytes
  tmp4047 EQU rbp - 112 ; 16 bytes
  tmp4044 EQU rbp - 116 ; 4 bytes
  tmp4041 EQU rbp - 120 ; 4 bytes
  tmp4040 EQU rbp - 136 ; 16 bytes
  tmp4039 EQU rbp - 152 ; 16 bytes
  tmp4036 EQU rbp - 156 ; 4 bytes
  tmp4033 EQU rbp - 160 ; 4 bytes
  tmp4028 EQU rbp - 176 ; 16 bytes
  tmp4027 EQU rbp - 192 ; 16 bytes
  tmp4026 EQU rbp - 196 ; 4 bytes
  tmp4024 EQU rbp - 200 ; 4 bytes
  tmp4023 EQU rbp - 216 ; 16 bytes
  classProto EQU rbp - 232 ; 16 bytes
  methodProto EQU rbp - 248 ; 16 bytes
  unusedParamsCnt EQU rbp - 264 ; 16 bytes
  params EQU rbp - 280 ; 16 bytes
  rv EQU rbp - 296 ; 16 bytes
  this EQU rbp - 312 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 352

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ params ], xmm0
  ; skipped unused param [ unusedParamsCnt ]
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4023 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4027 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4028 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4039 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4040 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4047 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4048 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4049 + Variant_t.type], VARIANT_UNDEFINED
  mov [newParams + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal488 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4024 ], 1
  mov dword [ tmp4026 ], 0
  mov eax, dword [ tmp4026 ]
  mov [ tmp4027 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4027 + Variant_t.value], rax
  lea  rcx , [ methodProto ]
  lea  rdx , [ tmp4027 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4026 ], eax
  cmp dword [ tmp4026 ], 0
  jnz l4025
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ tmp4028 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4028 ]
  lea  rdi , [ tmp4027 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4024 ], eax
l4025:
  cmp dword [ tmp4024 ], 0
  jz l4029
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal533 ]
  lea  rdi , [ tmp4023 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4030
l4029:
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4027 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal534 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4026 ], eax
  cmp dword [ tmp4026 ], 0
  jz l4031
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal535 ]
  lea  rdi , [ tmp4023 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4032
l4031:
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4027 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal534 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4033 ], eax
  cmp dword [ tmp4033 ], 0
  jz l4034
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal535 ]
  lea  rdi , [ tmp4023 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4035
l4034:
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ tmp4028 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4028 ]
  lea  rdi , [ tmp4027 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4036 ], eax
  cmp dword [ tmp4036 ], 0
  jz l4037
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4027 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal536 ]
  lea  r8 , [ tmp4040 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4039 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal424 ]
  lea  rdx , [ tmp4040 ]
  lea  r8 , [ tmp4039 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4039 ]
  lea  rdi , [ tmp4023 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4038
l4037:
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal247 ]
  lea  r8 , [ tmp4028 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4028 ]
  lea  rdi , [ tmp4027 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4041 ], eax
  cmp dword [ tmp4041 ], 0
  jz l4042
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ tmp4027 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal537 ]
  lea  r8 , [ tmp4040 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4039 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal424 ]
  lea  rdx , [ tmp4040 ]
  lea  r8 , [ tmp4039 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4039 ]
  lea  rdi , [ tmp4023 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4043
l4042:
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp4028 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4028 ]
  lea  rdi , [ tmp4027 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4028 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ tmp4028 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4044 ], eax
  cmp dword [ tmp4044 ], 0
  jz l4045
  lea  rcx, [ tmp4047 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp4047 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4047 ]
  lea  rdi , [ tmp4027 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4027 ]
  lea  rdi , [ tmp4028 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4047 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4047 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4047 ]
  lea  rdi , [ tmp4027 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4027 ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp4049 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4048 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal205 ]
  lea  rdx , [ tmp4049 ]
  lea  r8 , [ tmp4048 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4028 ]
  lea  rdx , [ tmp4048 ]
  lea  r8 , [ tmp4040 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4039 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal538 ]
  lea  rdx , [ tmp4040 ]
  lea  r8 , [ tmp4039 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4039 ]
  lea  rdi , [ tmp4023 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4046
l4045:
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4023 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4028 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4028 + Variant_t.value], 0
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4027 ]
  lea rdx, [ __literal539 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4023 ]
  lea  rdx , [ tmp4028 ]
  lea  r8 , [ tmp4027 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ newParams ]
  lea rdx, [ tmp4023 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys paramIdx values oneParam
; 
  jmp l4051
l4050:
  mov dword [ tmp4052 ], 1
  mov [ tmp4027 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4052 ]
  mov [ tmp4027 + Variant_t.value], rax
  lea  rcx , [ paramIdx ]
  lea  rdx , [ tmp4027 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantAdd
  mov eax, dword [ tmp4023 + Variant_t.value]
  mov dword [ tmp4052 ], eax
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp4052 ]
  lea  r8 , [ oneParam ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l4051:
  lea  rcx , [ params ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4050 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys paramIdx values oneParam
; -----------------------------
; 
  mov dword [ tmp4053 ], 1
  mov eax, dword [ tmp4053 ]
  mov [ tmp4023 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4023 + Variant_t.value], rax
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal540 ]
  lea  r8 , [ tmp4023 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal247 ]
  lea  r8 , [ tmp4027 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newParams ]
  lea  rdi , [ tmp4028 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4027 ]
  lea  r9 , [ newParams ]
  lea  rax , [ tmp4028 ]
  push rax
  lea  rdi, [ tmp4023 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*178]
  add rsp, 8
  pop rdi
l4046:
l4043:
l4038:
l4035:
l4032:
l4030:

  ; clean frame
  ; -----------
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4023 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4027 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4028 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4047 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramIdx
  ; Skipped loop iterator oneParam

  add  rsp, 352
  pop  rbp
  ret

  restore this
  restore rv
  restore params
  restore unusedParamsCnt
  restore methodProto
  restore classProto
  restore tmp4023
  restore tmp4024
  restore tmp4026
  restore tmp4027
  restore tmp4028
  restore tmp4033
  restore tmp4036
  restore tmp4039
  restore tmp4040
  restore tmp4041
  restore tmp4044
  restore tmp4047
  restore tmp4048
  restore tmp4049
  restore tmp4052
  restore tmp4053
  restore newParams
  restore paramIdx
  restore oneParam
; -----------------------------------------------
; function __ASTTranslator__getClassProto$2
; -----------------------------------------------
__ASTTranslator__getClassProto$2:
  ; init frame
  ; ----------
  tmp4056 EQU rbp - 24 ; 16 bytes
  tmp4055 EQU rbp - 40 ; 16 bytes
  tmp4054 EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  className EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ className ], xmm0
  mov [tmp4054 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4055 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4056 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4056 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4055 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4056 ]
  lea  rdx , [ className ]
  lea  rdi, [ tmp4055 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*38]
  pop rdi
  lea  rcx , [ tmp4055 ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4054 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4055 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4056 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore className
  restore rv
  restore tmp4054
  restore tmp4055
  restore tmp4056
; -----------------------------------------------
; function __ASTTranslator__getMethodProto$4
; -----------------------------------------------
__ASTTranslator__getMethodProto$4:
  ; init frame
  ; ----------
  tmp4058 EQU rbp - 24 ; 16 bytes
  tmp4057 EQU rbp - 28 ; 4 bytes
  rv EQU rdi
  paramsCnt EQU rbp - 44 ; 16 bytes
  methodName EQU rbp - 60 ; 16 bytes
  className EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  ; skipped unused param [ this ]
  ; skipped unused param [ className ]
  ; skipped unused param [ methodName ]
  ; skipped unused param [ paramsCnt ]
  mov [tmp4058 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp4057 ], 0
  mov eax, dword [ tmp4057 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  lea  rcx, [ tmp4058 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal541 ]
  lea  rdi , [ tmp4058 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4058 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore className
  restore methodName
  restore paramsCnt
  restore rv
  restore tmp4057
  restore tmp4058
; -----------------------------------------------
; function __ASTTranslator__isset$2
; -----------------------------------------------
__ASTTranslator__isset$2:
  ; init frame
  ; ----------
  tmp4060 EQU rbp - 24 ; 16 bytes
  tmp4059 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4059 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4060 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4060 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4060 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4059 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4060 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4059 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*29]
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp4059 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4059 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4060 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp4059
  restore tmp4060
; -----------------------------------------------
; function __ASTTranslator__importGlobal$2
; -----------------------------------------------
__ASTTranslator__importGlobal$2:
  ; init frame
  ; ----------
  tmp4062 EQU rbp - 24 ; 16 bytes
  tmp4061 EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4061 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4062 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4062 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4062 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4061 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4062 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4061 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*40]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4061 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4062 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore tmp4061
  restore tmp4062
; -----------------------------------------------
; function __ASTTranslator__declareVariableIfNotSet$2
; -----------------------------------------------
__ASTTranslator__declareVariableIfNotSet$2:
  ; init frame
  ; ----------
  tmp4066 EQU rbp - 24 ; 16 bytes
  tmp4065 EQU rbp - 28 ; 4 bytes
  tmp4064 EQU rbp - 44 ; 16 bytes
  tmp4063 EQU rbp - 60 ; 16 bytes
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4063 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4064 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4066 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4064 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4064 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__isset$2
  pop rdi
  mov dword [ tmp4065 ], 0
  mov eax, dword [ tmp4065 ]
  mov [ tmp4066 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4066 + Variant_t.value], rax
  lea  rcx , [ tmp4064 ]
  lea  rdx , [ tmp4066 ]
  lea  r8 , [ tmp4063 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4063 + Variant_t.value]
  mov dword [ tmp4065 ], eax
  cmp dword [ tmp4065 ], 0
  jz l4067
  lea  rcx, [ tmp4063 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4063 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__declareVariable$2
  pop rdi
l4067:
l4068:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4063 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4064 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4066 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore tmp4063
  restore tmp4064
  restore tmp4065
  restore tmp4066
; -----------------------------------------------
; function __ASTTranslator__declareAndAssign$3
; -----------------------------------------------
__ASTTranslator__declareAndAssign$3:
  ; init frame
  ; ----------
  tmp4069 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [tmp4069 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4069 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  rdi, [ tmp4069 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*223]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4069 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore tmp4069
; -----------------------------------------------
; function __ASTTranslator__declareVariable$2
; -----------------------------------------------
__ASTTranslator__declareVariable$2:
  ; init frame
  ; ----------
  tmp4070 EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ name ]
  mov [tmp4070 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4070 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal542 ]
  lea  rdi , [ tmp4070 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4070 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp4070
; -----------------------------------------------
; function __ASTTranslator__assign$3
; -----------------------------------------------
__ASTTranslator__assign$3:
  ; init frame
  ; ----------
  tmp4071 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ name ]
  ; skipped unused param [ value ]
  mov [tmp4071 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal543 ]
  lea  rdi , [ tmp4071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore tmp4071
; -----------------------------------------------
; function __ASTTranslator__evaluateNode$2
; -----------------------------------------------
__ASTTranslator__evaluateNode$2:
  ; init frame
  ; ----------
  right EQU rbp - 24 ; 16 bytes
  left EQU rbp - 40 ; 16 bytes
  unusedRv EQU rbp - 56 ; 16 bytes
  paramsCnt EQU rbp - 72 ; 16 bytes
  params EQU rbp - 88 ; 16 bytes
  methodProto EQU rbp - 104 ; 16 bytes
  classProto EQU rbp - 120 ; 16 bytes
  x EQU rbp - 136 ; 16 bytes
  __cse27 EQU rbp - 152 ; 16 bytes
  idx EQU rbp - 156 ; 4 bytes
  childNode EQU rbp - 172 ; 16 bytes
  childIdx EQU rbp - 188 ; 16 bytes
  valueAsVariant EQU rbp - 204 ; 16 bytes
  key EQU rbp - 220 ; 16 bytes
  mirDataType EQU rbp - 236 ; 16 bytes
  astDataType EQU rbp - 252 ; 16 bytes
  tmp4187 EQU rbp - 256 ; 4 bytes
  tmp4184 EQU rbp - 260 ; 4 bytes
  tmp4181 EQU rbp - 264 ; 4 bytes
  tmp4178 EQU rbp - 268 ; 4 bytes
  tmp4175 EQU rbp - 272 ; 4 bytes
  tmp4172 EQU rbp - 276 ; 4 bytes
  tmp4169 EQU rbp - 280 ; 4 bytes
  tmp4166 EQU rbp - 284 ; 4 bytes
  tmp4163 EQU rbp - 288 ; 4 bytes
  tmp4160 EQU rbp - 292 ; 4 bytes
  tmp4157 EQU rbp - 296 ; 4 bytes
  tmp4154 EQU rbp - 300 ; 4 bytes
  tmp4151 EQU rbp - 304 ; 4 bytes
  tmp4146 EQU rbp - 308 ; 4 bytes
  tmp4141 EQU rbp - 312 ; 4 bytes
  tmp4138 EQU rbp - 316 ; 4 bytes
  tmp4135 EQU rbp - 320 ; 4 bytes
  tmp4132 EQU rbp - 324 ; 4 bytes
  tmp4129 EQU rbp - 328 ; 4 bytes
  tmp4126 EQU rbp - 332 ; 4 bytes
  tmp4123 EQU rbp - 336 ; 4 bytes
  tmp4120 EQU rbp - 340 ; 4 bytes
  tmp4119 EQU rbp - 344 ; 4 bytes
  tmp4116 EQU rbp - 348 ; 4 bytes
  tmp4115 EQU rbp - 352 ; 4 bytes
  tmp4106 EQU rbp - 356 ; 4 bytes
  srcTypeMir EQU rbp - 372 ; 16 bytes
  dstTypeMir EQU rbp - 388 ; 16 bytes
  src EQU rbp - 404 ; 16 bytes
  dstType EQU rbp - 420 ; 16 bytes
  srcType EQU rbp - 436 ; 16 bytes
  srcNode EQU rbp - 452 ; 16 bytes
  tmp4093 EQU rbp - 456 ; 4 bytes
  tmp4088 EQU rbp - 460 ; 4 bytes
  tmp4083 EQU rbp - 464 ; 4 bytes
  tmp4080 EQU rbp - 468 ; 4 bytes
  tmp4078 EQU rbp - 472 ; 4 bytes
  tmp4077 EQU rbp - 488 ; 16 bytes
  tmp4076 EQU rbp - 504 ; 16 bytes
  tmp4075 EQU rbp - 520 ; 16 bytes
  tmp4074 EQU rbp - 536 ; 16 bytes
  tmp4073 EQU rbp - 552 ; 16 bytes
  tmp4072 EQU rbp - 568 ; 16 bytes
  rv EQU rdi
  childrenCnt EQU rbp - 584 ; 16 bytes
  children EQU rbp - 600 ; 16 bytes
  value EQU rbp - 616 ; 16 bytes
  opcode EQU rbp - 632 ; 16 bytes
  ast EQU rbp - 648 ; 16 bytes
  this EQU rbp - 664 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 704

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4072 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4073 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4074 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4075 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4076 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4077 + Variant_t.type], VARIANT_UNDEFINED
  mov [srcNode + Variant_t.type], VARIANT_UNDEFINED
  mov [srcType + Variant_t.type], VARIANT_UNDEFINED
  mov [dstType + Variant_t.type], VARIANT_UNDEFINED
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [dstTypeMir + Variant_t.type], VARIANT_UNDEFINED
  mov [srcTypeMir + Variant_t.type], VARIANT_UNDEFINED
  mov [astDataType + Variant_t.type], VARIANT_UNDEFINED
  mov [mirDataType + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [valueAsVariant + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [__cse27 + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [unusedRv + Variant_t.type], VARIANT_UNDEFINED
  mov [left + Variant_t.type], VARIANT_UNDEFINED
  mov [right + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp4075 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4077 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal419 ]
  lea  rdx , [ tmp4077 ]
  lea  r8 , [ tmp4076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4074 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ tmp4076 ]
  lea  r8 , [ tmp4074 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal544 ]
  lea  rdx , [ tmp4074 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4073 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__debug$2
  pop rdi
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*63]
  pop rdi
  mov dword [ tmp4078 ], 0
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal545 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4080 ], 1
  mov eax, dword [ tmp4080 ]
  mov [ tmp4077 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4077 + Variant_t.value], rax
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ tmp4077 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4080 ], eax
  cmp dword [ tmp4080 ], 0
  jz l4079
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ ast ]
  lea  rdi , [ tmp4077 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmOrVar
  pop rdi
  mov dword [ tmp4080 ], 0
  mov eax, dword [ tmp4080 ]
  mov [ tmp4075 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ tmp4077 ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4078 ], eax
l4079:
  cmp dword [ tmp4078 ], 0
  jz l4081
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4077 ]
  lea  rdi , [ tmp4075 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4074 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ __literal547 ]
  lea  r8 , [ tmp4074 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal546 ]
  lea  rdx , [ tmp4074 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4073 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4081:
l4082:
  mov dword [ tmp4078 ], 1
  mov eax, dword [ tmp4078 ]
  mov [ tmp4072 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4072 + Variant_t.value], rax
  lea  rcx , [ ast ]
  lea  rdx , [ __literal545 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4083 ], 201
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4078 ], eax
  cmp dword [ tmp4078 ], 0
  jz l4084
  lea rcx, [ rv ]
  lea rdx, [ value ]
  call __MOLD_VariantMove
  lea  rcx , [ value ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4080 ], eax
  cmp dword [ tmp4080 ], 0
  jz l4086
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*170]
  pop rdi
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4077 ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4083 ], 0
  mov [ tmp4077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4077 + Variant_t.value], rax
  lea  rcx , [ tmp4077 ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4088 ], eax
  cmp dword [ tmp4088 ], 0
  jz l4089
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4077 ]
  lea  rdx , [ __literal253 ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*40]
  pop rdi
l4089:
l4090:
  jmp l4087
l4086:
  lea  rcx , [ value ]
  lea  rdx , [ __literal254 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4088 ], eax
  cmp dword [ tmp4088 ], 0
  jz l4091
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*171]
  pop rdi
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4083 ], 0
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ tmp4077 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4093 ], eax
  cmp dword [ tmp4093 ], 0
  jz l4094
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ __literal254 ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*40]
  pop rdi
l4094:
l4095:
  jmp l4092
l4091:
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*177]
  pop rdi
l4092:
l4087:
  jmp l4085
l4084:
  mov dword [ tmp4083 ], 600
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4080 ], eax
  cmp dword [ tmp4080 ], 0
  jz l4096
  mov dword [ tmp4083 ], 0
  lea  rcx, [ srcNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4083 ]
  lea  r8 , [ srcNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ srcNode ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ srcType ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcType ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ ast ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ dstType ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstType ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ srcNode ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea rcx, [ src ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx , [ srcType ]
  lea  rdx , [ dstType ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4088 ], eax
  cmp dword [ tmp4088 ], 0
  jz l4098
  lea rcx, [ rv ]
  lea rdx, [ src ]
  call __MOLD_VariantMove
  jmp l4099
l4098:
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ dstType ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ dstTypeMir ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstTypeMir ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ srcType ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ srcTypeMir ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcTypeMir ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx , [ dstTypeMir ]
  lea  rdx , [ srcTypeMir ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4093 ], eax
  cmp dword [ tmp4093 ], 0
  jz l4100
  lea rcx, [ rv ]
  lea rdx, [ src ]
  call __MOLD_VariantMove
  jmp l4101
l4100:
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dstTypeMir ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ rv ]
  lea  r8 , [ dstTypeMir ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*49]
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ src ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ src ]
  lea  r9 , [ srcType ]
  lea  rax , [ dstType ]
  push rax
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*203]
  add rsp, 8
  pop rdi
l4101:
l4099:
  jmp l4097
l4096:
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ ast ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ astDataType ]
  call __MOLD_VariantDestroy
  lea rcx, [ astDataType ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astDataType ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirDataType ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ mirDataType ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ rv ]
  lea  r8 , [ mirDataType ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*49]
  pop rdi
  lea  rcx , [ ast ]
  lea  rdx , [ __literal548 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4083 ], 9
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4088 ], eax
  cmp dword [ tmp4088 ], 0
  jz l4102
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4075 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4093 ], eax
  cmp dword [ tmp4093 ], 0
  jz l4104
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*175]
  pop rdi
  jmp l4105
l4104:
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*173]
  pop rdi
  mov dword [ tmp4083 ], 0
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ childrenCnt ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4106 ], eax
  cmp dword [ tmp4106 ], 0
  jz l4107
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal158 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal158 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea  rcx, [ valueAsVariant ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsVariant ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys childIdx values childNode
; 
  jmp l4110
l4109:
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ key ]
  lea  r8 , [ childIdx ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*176]
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ childNode ]
  lea  rdi , [ tmp4075 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov dword [ tmp4083 ], -1
  mov [ tmp4077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4077 + Variant_t.value], rax
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  lea  r8 , [ value ]
  lea  r9 , [ tmp4075 ]
  lea  rax , [ tmp4077 ]
  push rax
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*203]
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ key ]
  lea  r9 , [ valueAsVariant ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*198]
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  ret
l4110:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l4109 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys childIdx values childNode
; -----------------------------
; 
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ key ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
l4107:
l4108:
l4105:
  jmp l4103
l4102:
  mov dword [ tmp4083 ], 10
  mov [ tmp4077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4077 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4077 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4093 ], eax
  cmp dword [ tmp4093 ], 0
  jz l4111
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*174]
  pop rdi
  mov dword [ tmp4083 ], 0
  mov [ tmp4077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4077 + Variant_t.value], rax
  lea  rcx , [ tmp4077 ]
  lea  rdx , [ childrenCnt ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4106 ], eax
  cmp dword [ tmp4106 ], 0
  jz l4113
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal158 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea  rcx, [ valueAsVariant ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsVariant ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  mov dword [ tmp4083 ], 2
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4115 ], eax
  mov dword [ idx ], 0
l4117:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4115 ]
  jge l4118
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4077 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  mov dword [ tmp4120 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp4120 ]
  mov dword [ tmp4119 ], eax
  lea  rcx, [ __cse27 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4119 ]
  lea  r8 , [ __cse27 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __cse27 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse27 ]
  lea  rdi , [ tmp4077 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov dword [ tmp4119 ], -1
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4119 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  lea  r8 , [ value ]
  lea  r9 , [ tmp4077 ]
  lea  rax , [ tmp4075 ]
  push rax
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*203]
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ key ]
  lea  r9 , [ valueAsVariant ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*199]
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ key ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  mov eax, dword [ idx ]
  add eax, dword [ tmp4083 ]
  mov dword [ idx ], eax
  jmp l4117
l4118:
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
l4113:
l4114:
  jmp l4112
l4111:
  mov dword [ tmp4116 ], 100
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4106 ], eax
  cmp dword [ tmp4106 ], 0
  jz l4121
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*175]
  pop rdi
  jmp l4122
l4121:
  mov dword [ tmp4116 ], 152
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4123 ], eax
  cmp dword [ tmp4123 ], 0
  jz l4124
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ ast ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNodeCall$3
  pop rdi
  jmp l4125
l4124:
  mov dword [ tmp4116 ], 106
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4126 ], eax
  cmp dword [ tmp4126 ], 0
  jz l4127
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ ast ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNodeInvokeMethod$3
  pop rdi
  jmp l4128
l4127:
  mov dword [ tmp4116 ], 301
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4129 ], eax
  cmp dword [ tmp4129 ], 0
  jz l4130
  mov dword [ tmp4116 ], 0
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4116 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4075 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ x ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*181]
  pop rdi
  jmp l4131
l4130:
  mov dword [ tmp4116 ], 500
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4132 ], eax
  cmp dword [ tmp4132 ], 0
  jz l4133
  mov dword [ tmp4116 ], 0
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4116 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4116 ], 1
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4116 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4075 ]
  lea  r9 , [ tmp4077 ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*226]
  pop rdi
  jmp l4134
l4133:
  mov dword [ tmp4116 ], 501
  mov [ tmp4077 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4077 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4077 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4135 ], eax
  cmp dword [ tmp4135 ], 0
  jz l4136
  mov dword [ tmp4116 ], 0
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4116 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4116 ], 1
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4116 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4077 ]
  lea  r9 , [ tmp4075 ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*227]
  pop rdi
  jmp l4137
l4136:
  mov dword [ tmp4116 ], 107
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4138 ], eax
  cmp dword [ tmp4138 ], 0
  jz l4139
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getClassProto$2
  pop rdi
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ classProto ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ classProto ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*202]
  pop rdi
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ __literal534 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp4075 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4141 ], eax
  cmp dword [ tmp4141 ], 0
  jz l4142
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4072 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4075 + Variant_t.value], 0
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4077 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4072 ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4077 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4075 ]
  lea  rdi , [ tmp4077 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4116 ], 1
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4116 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ tmp4077 ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal534 ]
  lea  r8 , [ paramsCnt ]
  lea  r9 , [ childrenCnt ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__verifyNumberOfParameters$4
  pop rdi
  mov dword [ tmp4116 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4115 ], eax
  mov dword [ idx ], 1
l4144:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4115 ]
  jge l4145
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4075 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4116 ]
  mov dword [ idx ], eax
  jmp l4144
l4145:
  mov dword [ tmp4146 ], 1
  mov eax, dword [ tmp4146 ]
  mov [ tmp4072 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4072 + Variant_t.value], rax
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal540 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal158 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea rcx, [ unusedRv ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  r8 , [ methodProto ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*178]
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
l4142:
l4143:
  jmp l4140
l4139:
  mov dword [ tmp4083 ], 2
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ childrenCnt ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4141 ], eax
  cmp dword [ tmp4141 ], 0
  jz l4147
  mov dword [ tmp4083 ], 0
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4083 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4075 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ left ]
  call __MOLD_VariantDestroy
  lea rcx, [ left ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  mov dword [ tmp4083 ], 1
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4083 ]
  lea  r8 , [ tmp4075 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4075 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ right ]
  call __MOLD_VariantDestroy
  lea rcx, [ right ]
  lea rdx, [ tmp4072 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ left ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ right ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  mov dword [ tmp4083 ], 203
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4146 ], eax
  cmp dword [ tmp4146 ], 0
  jz l4149
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*196]
  pop rdi
  jmp l4150
l4149:
  mov dword [ tmp4083 ], 204
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4151 ], eax
  cmp dword [ tmp4151 ], 0
  jz l4152
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*197]
  pop rdi
  jmp l4153
l4152:
  mov dword [ tmp4083 ], 400
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4154 ], eax
  cmp dword [ tmp4154 ], 0
  jz l4155
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*188]
  pop rdi
  jmp l4156
l4155:
  mov dword [ tmp4083 ], 401
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4157 ], eax
  cmp dword [ tmp4157 ], 0
  jz l4158
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*189]
  pop rdi
  jmp l4159
l4158:
  mov dword [ tmp4083 ], 402
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4160 ], eax
  cmp dword [ tmp4160 ], 0
  jz l4161
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*192]
  pop rdi
  jmp l4162
l4161:
  mov dword [ tmp4083 ], 403
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4163 ], eax
  cmp dword [ tmp4163 ], 0
  jz l4164
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*193]
  pop rdi
  jmp l4165
l4164:
  mov dword [ tmp4083 ], 404
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4166 ], eax
  cmp dword [ tmp4166 ], 0
  jz l4167
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*190]
  pop rdi
  jmp l4168
l4167:
  mov dword [ tmp4083 ], 405
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4169 ], eax
  cmp dword [ tmp4169 ], 0
  jz l4170
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*191]
  pop rdi
  jmp l4171
l4170:
  mov dword [ tmp4083 ], 302
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4172 ], eax
  cmp dword [ tmp4172 ], 0
  jz l4173
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*182]
  pop rdi
  jmp l4174
l4173:
  mov dword [ tmp4083 ], 303
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4175 ], eax
  cmp dword [ tmp4175 ], 0
  jz l4176
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*184]
  pop rdi
  jmp l4177
l4176:
  mov dword [ tmp4083 ], 304
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4178 ], eax
  cmp dword [ tmp4178 ], 0
  jz l4179
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*185]
  pop rdi
  jmp l4180
l4179:
  mov dword [ tmp4083 ], 305
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4181 ], eax
  cmp dword [ tmp4181 ], 0
  jz l4182
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*186]
  pop rdi
  jmp l4183
l4182:
  mov dword [ tmp4083 ], 308
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4184 ], eax
  cmp dword [ tmp4184 ], 0
  jz l4185
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*187]
  pop rdi
  jmp l4186
l4185:
  mov dword [ tmp4083 ], 350
  mov [ tmp4075 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4083 ]
  mov [ tmp4075 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4075 ]
  lea  r8 , [ tmp4072 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4072 + Variant_t.value]
  mov dword [ tmp4187 ], eax
  cmp dword [ tmp4187 ], 0
  jz l4188
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4072 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*183]
  pop rdi
l4188:
l4189:
l4186:
l4183:
l4180:
l4177:
l4174:
l4171:
l4168:
l4165:
l4162:
l4159:
l4156:
l4153:
l4150:
  jmp l4148
l4147:
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp4075 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4077 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4076 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal326 ]
  lea  rdx , [ tmp4077 ]
  lea  r8 , [ tmp4076 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4074 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4075 ]
  lea  rdx , [ tmp4076 ]
  lea  r8 , [ tmp4074 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal549 ]
  lea  rdx , [ tmp4074 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4073 ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4148:
l4140:
l4137:
l4134:
l4131:
l4128:
l4125:
l4122:
l4112:
l4103:
l4097:
l4085:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4072 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4075 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4077 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dstType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dstTypeMir ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcTypeMir ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueAsVariant ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childIdx
  ; Skipped loop iterator childNode
  lea  rcx, [ __cse27 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ left ]
  call __MOLD_VariantDestroy
  lea  rcx, [ right ]
  call __MOLD_VariantDestroy

  add  rsp, 704
  pop  rbp
  ret

  restore this
  restore ast
  restore opcode
  restore value
  restore children
  restore childrenCnt
  restore rv
  restore tmp4072
  restore tmp4073
  restore tmp4074
  restore tmp4075
  restore tmp4076
  restore tmp4077
  restore tmp4078
  restore tmp4080
  restore tmp4083
  restore tmp4088
  restore tmp4093
  restore srcNode
  restore srcType
  restore dstType
  restore src
  restore dstTypeMir
  restore srcTypeMir
  restore tmp4106
  restore tmp4115
  restore tmp4116
  restore tmp4119
  restore tmp4120
  restore tmp4123
  restore tmp4126
  restore tmp4129
  restore tmp4132
  restore tmp4135
  restore tmp4138
  restore tmp4141
  restore tmp4146
  restore tmp4151
  restore tmp4154
  restore tmp4157
  restore tmp4160
  restore tmp4163
  restore tmp4166
  restore tmp4169
  restore tmp4172
  restore tmp4175
  restore tmp4178
  restore tmp4181
  restore tmp4184
  restore tmp4187
  restore astDataType
  restore mirDataType
  restore key
  restore valueAsVariant
  restore childIdx
  restore childNode
  restore idx
  restore __cse27
  restore x
  restore classProto
  restore methodProto
  restore params
  restore paramsCnt
  restore unusedRv
  restore left
  restore right
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeCall$3
; -----------------------------------------------
__ASTTranslator__evaluateNodeCall$3:
  ; init frame
  ; ----------
  funcProto EQU rbp - 24 ; 16 bytes
  funcEntry EQU rbp - 40 ; 16 bytes
  tmp4207 EQU rbp - 44 ; 4 bytes
  tmp4204 EQU rbp - 48 ; 4 bytes
  oneParam EQU rbp - 64 ; 16 bytes
  idx EQU rbp - 68 ; 4 bytes
  tmp4199 EQU rbp - 84 ; 16 bytes
  tmp4196 EQU rbp - 88 ; 4 bytes
  tmp4195 EQU rbp - 92 ; 4 bytes
  tmp4194 EQU rbp - 96 ; 4 bytes
  tmp4191 EQU rbp - 100 ; 4 bytes
  tmp4190 EQU rbp - 116 ; 16 bytes
  paramsCnt EQU rbp - 132 ; 16 bytes
  params EQU rbp - 148 ; 16 bytes
  childrenCnt EQU rbp - 164 ; 16 bytes
  children EQU rbp - 180 ; 16 bytes
  funcName EQU rbp - 196 ; 16 bytes
  ast EQU rbp - 212 ; 16 bytes
  rv EQU rbp - 228 ; 16 bytes
  this EQU rbp - 244 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ ast ], xmm0
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4190 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4199 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [funcEntry + Variant_t.type], VARIANT_UNDEFINED
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal259 ]
  lea  r8 , [ tmp4190 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4190 + Variant_t.value]
  mov dword [ tmp4191 ], eax
  cmp dword [ tmp4191 ], 0
  jz l4192
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal17 ]
  lea  rdi, [ tmp4190 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*177]
  pop rdi
l4192:
l4193:
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramsCnt ]
  lea rdx, [ childrenCnt ]
  call __MOLD_VariantMove
  mov dword [ tmp4194 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4195 ], eax
  mov dword [ idx ], 0
l4197:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4195 ]
  jge l4198
  lea  rcx, [ tmp4199 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4199 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4199 ]
  lea  rdi , [ tmp4190 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4190 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4194 ]
  mov dword [ idx ], eax
  jmp l4197
l4198:
; 
; -----------------------------
; BEGIN: for keys -1 values oneParam
; 
  jmp l4201
l4200:
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneParam ]
  lea  rdi , [ tmp4190 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  ret
l4201:
  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4200 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal45 ]
  lea  r8 , [ tmp4190 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4190 + Variant_t.value]
  mov dword [ tmp4191 ], eax
  cmp dword [ tmp4191 ], 0
  jz l4202
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  lea  r8 , [ paramsCnt ]
  lea  rdi, [ tmp4190 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*180]
  pop rdi
  jmp l4203
l4202:
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal259 ]
  lea  r8 , [ tmp4190 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4190 + Variant_t.value]
  mov dword [ tmp4204 ], eax
  cmp dword [ tmp4204 ], 0
  jz l4205
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ params ]
  lea  r9 , [ paramsCnt ]
  lea  rdi , [ tmp4190 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__callSuper$4
  pop rdi
  jmp l4206
l4205:
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp4190 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4190 + Variant_t.value]
  mov dword [ tmp4207 ], eax
  cmp dword [ tmp4207 ], 0
  jz l4208
  lea  rcx, [ tmp4199 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp4199 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4199 ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4190 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*172]
  add rsp, 8
  pop rdi
  jmp l4209
l4208:
  lea  rcx, [ tmp4199 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4199 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4199 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ childrenCnt ]
  lea  rdi, [ tmp4190 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*35]
  pop rdi
  lea  rcx, [ funcEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcEntry ]
  lea rdx, [ tmp4190 ]
  call __MOLD_VariantMove
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcEntry ]
  lea  rdx , [ __literal200 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ funcProto ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4190 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*178]
  add rsp, 8
  pop rdi
l4209:
l4206:
l4203:

  ; clean frame
  ; -----------
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4190 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4199 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam
  lea  rcx, [ funcEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore rv
  restore ast
  restore funcName
  restore children
  restore childrenCnt
  restore params
  restore paramsCnt
  restore tmp4190
  restore tmp4191
  restore tmp4194
  restore tmp4195
  restore tmp4196
  restore tmp4199
  restore idx
  restore oneParam
  restore tmp4204
  restore tmp4207
  restore funcEntry
  restore funcProto
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeInvokeMethod$3
; -----------------------------------------------
__ASTTranslator__evaluateNodeInvokeMethod$3:
  ; init frame
  ; ----------
  oneParam EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 28 ; 4 bytes
  tmp4214 EQU rbp - 32 ; 4 bytes
  tmp4213 EQU rbp - 36 ; 4 bytes
  tmp4212 EQU rbp - 40 ; 4 bytes
  tmp4211 EQU rbp - 56 ; 16 bytes
  tmp4210 EQU rbp - 72 ; 16 bytes
  paramsCnt EQU rbp - 88 ; 16 bytes
  params EQU rbp - 104 ; 16 bytes
  thiz EQU rbp - 120 ; 16 bytes
  childrenCnt EQU rbp - 136 ; 16 bytes
  children EQU rbp - 152 ; 16 bytes
  methodName EQU rbp - 168 ; 16 bytes
  ast EQU rbp - 184 ; 16 bytes
  rv EQU rbp - 200 ; 16 bytes
  this EQU rbp - 216 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ ast ], xmm0
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [thiz + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4210 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4211 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4212 ], 0
  lea  rcx, [ tmp4211 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4212 ]
  lea  r8 , [ tmp4211 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4210 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4211 ]
  lea  rdi , [ tmp4210 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea rcx, [ thiz ]
  lea rdx, [ tmp4210 ]
  call __MOLD_VariantMove
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp4212 ], 0
  lea  rcx , [ params ]
  lea  rdx , [ tmp4212 ]
  lea  r8 , [ thiz ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramsCnt ]
  lea rdx, [ childrenCnt ]
  call __MOLD_VariantMove
  mov dword [ tmp4212 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4213 ], eax
  mov dword [ idx ], 1
l4215:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4213 ]
  jge l4216
  lea  rcx, [ tmp4211 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4211 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4210 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4211 ]
  lea  rdi , [ tmp4210 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4210 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4212 ]
  mov dword [ idx ], eax
  jmp l4215
l4216:
  lea  rcx, [ tmp4210 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ methodName ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4210 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*179]
  add rsp, 8
  pop rdi
; 
; -----------------------------
; BEGIN: for keys -1 values oneParam
; 
  jmp l4218
l4217:
  lea  rcx, [ tmp4210 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneParam ]
  lea  rdi , [ tmp4210 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  ret
l4218:
  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4217 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneParam
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4210 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4211 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore rv
  restore ast
  restore methodName
  restore children
  restore childrenCnt
  restore thiz
  restore params
  restore paramsCnt
  restore tmp4210
  restore tmp4211
  restore tmp4212
  restore tmp4213
  restore tmp4214
  restore idx
  restore oneParam
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeLazyBoolAnd$4
; -----------------------------------------------
__ASTTranslator__evaluateNodeLazyBoolAnd$4:
  ; init frame
  ; ----------
  tmp4219 EQU rbp - 24 ; 16 bytes
  rightAst EQU rbp - 40 ; 16 bytes
  leftAst EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ leftAst ]
  ; skipped unused param [ rightAst ]
  mov [tmp4219 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4219 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal550 ]
  lea  rdi , [ tmp4219 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4219 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore tmp4219
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeLazyBoolOr$4
; -----------------------------------------------
__ASTTranslator__evaluateNodeLazyBoolOr$4:
  ; init frame
  ; ----------
  tmp4220 EQU rbp - 24 ; 16 bytes
  rightAst EQU rbp - 40 ; 16 bytes
  leftAst EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ leftAst ]
  ; skipped unused param [ rightAst ]
  mov [tmp4220 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4220 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal551 ]
  lea  rdi , [ tmp4220 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4220 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore tmp4220
; -----------------------------------------------
; function __ASTTranslator__executeNodeFor$6
; -----------------------------------------------
__ASTTranslator__executeNodeFor$6:
  ; init frame
  ; ----------
  tmp4221 EQU rbp - 24 ; 16 bytes
  bodyAst EQU rbp - 40 ; 16 bytes
  valueStep EQU rbp - 56 ; 16 bytes
  valueEnd EQU rbp - 72 ; 16 bytes
  valueStart EQU rbp - 88 ; 16 bytes
  iteratorName EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ iteratorName ]
  ; skipped unused param [ valueStart ]
  ; skipped unused param [ valueEnd ]
  ; skipped unused param [ valueStep ]
  ; skipped unused param [ bodyAst ]
  mov [tmp4221 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4221 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal552 ]
  lea  rdi , [ tmp4221 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4221 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore iteratorName
  restore valueStart
  restore valueEnd
  restore valueStep
  restore bodyAst
  restore tmp4221
; -----------------------------------------------
; function __ASTTranslator__executeNodeWhile$3
; -----------------------------------------------
__ASTTranslator__executeNodeWhile$3:
  ; init frame
  ; ----------
  tmp4222 EQU rbp - 24 ; 16 bytes
  bodyAst EQU rbp - 40 ; 16 bytes
  condAst EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ condAst ]
  ; skipped unused param [ bodyAst ]
  mov [tmp4222 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal553 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore condAst
  restore bodyAst
  restore tmp4222
; -----------------------------------------------
; function __ASTTranslator__executeNodeIf$4
; -----------------------------------------------
__ASTTranslator__executeNodeIf$4:
  ; init frame
  ; ----------
  tmp4223 EQU rbp - 24 ; 16 bytes
  codeIfFalse EQU rbp - 40 ; 16 bytes
  codeIfTrue EQU rbp - 56 ; 16 bytes
  cond EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ cond ]
  ; skipped unused param [ codeIfTrue ]
  ; skipped unused param [ codeIfFalse ]
  mov [tmp4223 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal554 ]
  lea  rdi , [ tmp4223 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore tmp4223
; -----------------------------------------------
; function __ASTTranslator__executeNodeSwitch$2
; -----------------------------------------------
__ASTTranslator__executeNodeSwitch$2:
  ; init frame
  ; ----------
  tmp4224 EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ node ]
  mov [tmp4224 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4224 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal555 ]
  lea  rdi , [ tmp4224 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4224 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore tmp4224
; -----------------------------------------------
; function __ASTTranslator__executeNode$2
; -----------------------------------------------
__ASTTranslator__executeNode$2:
  ; init frame
  ; ----------
  tmp4300 EQU rbp - 12 ; 4 bytes
  tmp4297 EQU rbp - 16 ; 4 bytes
  unusedRv EQU rbp - 32 ; 16 bytes
  paramName EQU rbp - 48 ; 16 bytes
  tmp4290 EQU rbp - 52 ; 4 bytes
  tmp4285 EQU rbp - 56 ; 4 bytes
  tmp4282 EQU rbp - 60 ; 4 bytes
  tmp4279 EQU rbp - 64 ; 4 bytes
  codeIfFalse EQU rbp - 80 ; 16 bytes
  codeIfTrue EQU rbp - 96 ; 16 bytes
  cond EQU rbp - 112 ; 16 bytes
  tmp4276 EQU rbp - 116 ; 4 bytes
  condAst EQU rbp - 132 ; 16 bytes
  tmp4271 EQU rbp - 136 ; 4 bytes
  iteratorKey EQU rbp - 152 ; 16 bytes
  tmp4267 EQU rbp - 156 ; 4 bytes
  loopBodyNode EQU rbp - 172 ; 16 bytes
  iteratorValue EQU rbp - 188 ; 16 bytes
  __cse29 EQU rbp - 204 ; 16 bytes
  mirDataType EQU rbp - 220 ; 16 bytes
  astDataType EQU rbp - 236 ; 16 bytes
  bodyAst EQU rbp - 252 ; 16 bytes
  valueStart EQU rbp - 268 ; 16 bytes
  valueEnd EQU rbp - 284 ; 16 bytes
  valueStep EQU rbp - 300 ; 16 bytes
  iteratorName EQU rbp - 316 ; 16 bytes
  __cse28 EQU rbp - 332 ; 16 bytes
  idxOrKey EQU rbp - 348 ; 16 bytes
  box EQU rbp - 364 ; 16 bytes
  valueNode EQU rbp - 380 ; 16 bytes
  indexNode EQU rbp - 396 ; 16 bytes
  boxNode EQU rbp - 412 ; 16 bytes
  symbolInfo EQU rbp - 428 ; 16 bytes
  rval EQU rbp - 444 ; 16 bytes
  lval EQU rbp - 460 ; 16 bytes
  tmp4254 EQU rbp - 476 ; 16 bytes
  tmp4253 EQU rbp - 492 ; 16 bytes
  tmp4252 EQU rbp - 496 ; 4 bytes
  tmp4250 EQU rbp - 500 ; 4 bytes
  tmp4247 EQU rbp - 504 ; 4 bytes
  tmp4244 EQU rbp - 508 ; 4 bytes
  idx EQU rbp - 512 ; 4 bytes
  oldSymbolTable EQU rbp - 528 ; 16 bytes
  tmp4241 EQU rbp - 532 ; 4 bytes
  tmp4240 EQU rbp - 536 ; 4 bytes
  funcProto EQU rbp - 552 ; 16 bytes
  tmp4237 EQU rbp - 556 ; 4 bytes
  tmp4234 EQU rbp - 560 ; 4 bytes
  tmp4231 EQU rbp - 564 ; 4 bytes
  tmp4230 EQU rbp - 580 ; 16 bytes
  tmp4229 EQU rbp - 596 ; 16 bytes
  tmp4228 EQU rbp - 612 ; 16 bytes
  tmp4227 EQU rbp - 628 ; 16 bytes
  tmp4226 EQU rbp - 644 ; 16 bytes
  tmp4225 EQU rbp - 660 ; 16 bytes
  childrenCnt EQU rbp - 676 ; 16 bytes
  children EQU rbp - 692 ; 16 bytes
  value EQU rbp - 708 ; 16 bytes
  opcode EQU rbp - 724 ; 16 bytes
  ast EQU rbp - 740 ; 16 bytes
  this EQU rbp - 756 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 784

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4225 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4226 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4227 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4228 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4229 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4230 + Variant_t.type], VARIANT_UNDEFINED
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4253 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4254 + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [boxNode + Variant_t.type], VARIANT_UNDEFINED
  mov [indexNode + Variant_t.type], VARIANT_UNDEFINED
  mov [valueNode + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [idxOrKey + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse28 + Variant_t.type], VARIANT_UNDEFINED
  mov [iteratorName + Variant_t.type], VARIANT_UNDEFINED
  mov [valueStep + Variant_t.type], VARIANT_UNDEFINED
  mov [valueEnd + Variant_t.type], VARIANT_UNDEFINED
  mov [valueStart + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyAst + Variant_t.type], VARIANT_UNDEFINED
  mov [astDataType + Variant_t.type], VARIANT_UNDEFINED
  mov [mirDataType + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse29 + Variant_t.type], VARIANT_UNDEFINED
  mov [iteratorValue + Variant_t.type], VARIANT_UNDEFINED
  mov [loopBodyNode + Variant_t.type], VARIANT_UNDEFINED
  mov [iteratorKey + Variant_t.type], VARIANT_UNDEFINED
  mov [condAst + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  mov [codeIfTrue + Variant_t.type], VARIANT_UNDEFINED
  mov [codeIfFalse + Variant_t.type], VARIANT_UNDEFINED
  mov [paramName + Variant_t.type], VARIANT_UNDEFINED
  mov [unusedRv + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*63]
  pop rdi
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp4226 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4230 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4229 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal419 ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4229 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ tmp4229 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4227 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal556 ]
  lea  rdx , [ tmp4228 ]
  lea  r8 , [ tmp4227 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4227 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__debug$2
  pop rdi
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal545 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4231 ], 1
  mov eax, dword [ tmp4231 ]
  mov [ tmp4230 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4230 + Variant_t.value], rax
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4231 ], eax
  cmp dword [ tmp4231 ], 0
  jz l4232
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4226 ]
  lea  rdi , [ tmp4230 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ __literal557 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4227 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal546 ]
  lea  rdx , [ tmp4228 ]
  lea  r8 , [ tmp4227 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4227 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4232:
l4233:
  mov dword [ tmp4231 ], 1
  mov eax, dword [ tmp4231 ]
  mov [ tmp4225 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4225 + Variant_t.value], rax
  lea  rcx , [ ast ]
  lea  rdx , [ __literal545 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4234 ], 100
  mov [ tmp4230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4234 ]
  mov [ tmp4230 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4231 ], eax
  cmp dword [ tmp4231 ], 0
  jz l4235
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4225 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4230 ]
  lea rdx, [ __literal558 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4225 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp4225 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4225 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4234 ], 0
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ tmp4234 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal490 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal558 ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*207]
  pop rdi
  mov dword [ tmp4237 ], 0
  mov eax, dword [ tmp4237 ]
  mov [ tmp4225 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4225 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal489 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4236
l4235:
  mov dword [ tmp4234 ], 101
  mov [ tmp4230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4234 ]
  mov [ tmp4230 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4237 ], eax
  cmp dword [ tmp4237 ], 0
  jz l4238
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__enterScope$2
  pop rdi
  mov dword [ tmp4234 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4240 ], eax
  mov dword [ idx ], 0
l4242:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4240 ]
  jge l4243
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4230 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  mov eax, dword [ idx ]
  add eax, dword [ tmp4234 ]
  mov dword [ idx ], eax
  jmp l4242
l4243:
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__leaveScope$1
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey
  jmp l4239
l4238:
  mov dword [ tmp4241 ], 205
  mov [ tmp4230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4230 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4244 ], eax
  cmp dword [ tmp4244 ], 0
  jz l4245
  mov dword [ tmp4241 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 201
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4247 ], eax
  cmp dword [ tmp4247 ], 0
  jz l4248
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 1
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea rcx, [ rval ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ lval ]
  lea  r8 , [ rval ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*223]
  pop rdi
  mov dword [ tmp4250 ], 0
  mov dword [ tmp4241 ], 1
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 350
  mov [ tmp4230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4230 + Variant_t.value], rax
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4252 ], eax
  cmp dword [ tmp4252 ], 0
  jz l4251
  mov dword [ tmp4241 ], 1
  lea  rcx, [ tmp4254 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4254 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4253 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4254 ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4253 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 0
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4253 ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ lval ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4250 ], eax
l4251:
  cmp dword [ tmp4250 ], 0
  jz l4255
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ lval ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4252 ], 1
  mov eax, dword [ tmp4252 ]
  mov [ tmp4225 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4225 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantStoreAtKey
l4255:
l4256:
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rval ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4249
l4248:
  mov dword [ tmp4250 ], 1
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 203
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4252 ], eax
  cmp dword [ tmp4252 ], 0
  jnz l4257
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 204
  mov [ tmp4230 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4230 + Variant_t.value], rax
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4250 ], eax
l4257:
  cmp dword [ tmp4250 ], 0
  jz l4258
  lea  rcx, [ __cse28 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ __cse28 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 0
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse28 ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ boxNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4241 ], 1
  lea  rcx, [ indexNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse28 ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ indexNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4241 ], 1
  lea  rcx, [ valueNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ valueNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ boxNode ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ indexNode ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ idxOrKey ]
  call __MOLD_VariantDestroy
  lea rcx, [ idxOrKey ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueNode ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea rcx, [ rval ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 203
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4252 ], eax
  cmp dword [ tmp4252 ], 0
  jz l4260
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  r8 , [ idxOrKey ]
  lea  r9 , [ rval ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*200]
  pop rdi
  jmp l4261
l4260:
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  r8 , [ idxOrKey ]
  lea  r9 , [ rval ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*201]
  pop rdi
l4261:
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ idxOrKey ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rval ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4259
l4258:
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4230 ]
  lea  rdi , [ tmp4226 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4253 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp4253 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4253 ]
  lea  rdi , [ tmp4230 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4229 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal326 ]
  lea  rdx , [ tmp4230 ]
  lea  r8 , [ tmp4229 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ tmp4229 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4227 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal560 ]
  lea  rdx , [ tmp4228 ]
  lea  r8 , [ tmp4227 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4227 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4259:
l4249:
  jmp l4246
l4245:
  mov dword [ tmp4241 ], 160
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4247 ], eax
  cmp dword [ tmp4247 ], 0
  jz l4262
  mov dword [ tmp4241 ], 0
  lea  rcx, [ __cse29 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ __cse29 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse29 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ iteratorName ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 3
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ valueStep ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueStep ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4241 ], 2
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ valueEnd ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueEnd ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4241 ], 1
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ valueStart ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueStart ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4241 ], 4
  lea  rcx, [ bodyAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ bodyAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__enterScope$2
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse29 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  lea  rcx, [ astDataType ]
  call __MOLD_VariantDestroy
  lea rcx, [ astDataType ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astDataType ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirDataType ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ iteratorName ]
  lea  r8 , [ mirDataType ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*49]
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ iteratorName ]
  lea  r8 , [ valueStart ]
  lea  r9 , [ valueEnd ]
  lea  rax , [ valueStep ]
  push rax
  lea  rax , [ bodyAst ]
  push rax
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*230]
  add rsp, 16
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__leaveScope$1
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueStep ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueEnd ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueStart ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4263
l4262:
  mov dword [ tmp4241 ], 161
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4250 ], eax
  cmp dword [ tmp4250 ], 0
  jz l4264
  mov dword [ tmp4241 ], 0
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ iteratorValue ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 1
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4241 ], 2
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ loopBodyNode ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__enterScope$2
  pop rdi
  mov dword [ tmp4241 ], -1
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ iteratorValue ]
  lea  r9 , [ box ]
  lea  rax , [ loopBodyNode ]
  push rax
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*235]
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__leaveScope$1
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4265
l4264:
  mov dword [ tmp4252 ], 1
  mov dword [ tmp4241 ], 162
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4267 ], eax
  cmp dword [ tmp4267 ], 0
  jnz l4266
  mov dword [ tmp4241 ], 164
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4252 ], eax
l4266:
  cmp dword [ tmp4252 ], 0
  jz l4268
  mov dword [ tmp4241 ], 0
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorKey ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ iteratorKey ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 1
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4241 ], 2
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ loopBodyNode ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__enterScope$2
  pop rdi
  mov dword [ tmp4241 ], -1
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ iteratorKey ]
  lea  r8 , [ tmp4226 ]
  lea  r9 , [ box ]
  lea  rax , [ loopBodyNode ]
  push rax
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*235]
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__leaveScope$1
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4269
l4268:
  mov dword [ tmp4267 ], 1
  mov dword [ tmp4241 ], 163
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4271 ], eax
  cmp dword [ tmp4271 ], 0
  jnz l4270
  mov dword [ tmp4241 ], 165
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4267 ], eax
l4270:
  cmp dword [ tmp4267 ], 0
  jz l4272
  mov dword [ tmp4241 ], 0
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorKey ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ iteratorKey ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 1
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ iteratorValue ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4241 ], 2
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4241 ], 3
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ loopBodyNode ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__enterScope$2
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ iteratorKey ]
  lea  r8 , [ iteratorValue ]
  lea  r9 , [ box ]
  lea  rax , [ loopBodyNode ]
  push rax
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*235]
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__leaveScope$1
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4273
l4272:
  mov dword [ tmp4241 ], 153
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4271 ], eax
  cmp dword [ tmp4271 ], 0
  jz l4274
  mov dword [ tmp4241 ], 0
  lea  rcx, [ condAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ condAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4241 ], 1
  lea  rcx, [ bodyAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ bodyAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyAst ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ condAst ]
  lea  r8 , [ bodyAst ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*231]
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey
  jmp l4275
l4274:
  mov dword [ tmp4241 ], 150
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4276 ], eax
  cmp dword [ tmp4276 ], 0
  jz l4277
  mov dword [ tmp4241 ], 0
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4226 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea rcx, [ cond ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  mov dword [ tmp4241 ], 1
  lea  rcx, [ codeIfTrue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ codeIfTrue ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4241 ], 2
  lea  rcx, [ codeIfFalse ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4241 ]
  lea  r8 , [ codeIfFalse ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ cond ]
  lea  r8 , [ codeIfTrue ]
  lea  r9 , [ codeIfFalse ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*232]
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ cond ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4278
l4277:
  mov dword [ tmp4241 ], 102
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4279 ], eax
  cmp dword [ tmp4279 ], 0
  jz l4280
  mov dword [ tmp4241 ], 152
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4241 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4282 ], eax
  cmp dword [ tmp4282 ], 0
  jz l4283
  lea  rcx , [ value ]
  lea  rdx , [ __literal46 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4285 ], eax
  cmp dword [ tmp4285 ], 0
  jz l4286
  mov dword [ tmp4241 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4240 ], eax
  mov dword [ idx ], 0
l4288:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4240 ]
  jge l4289
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4226 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ paramName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ paramName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramName ]
  lea  rdi , [ tmp4226 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4290 ], eax
  cmp dword [ tmp4290 ], 0
  jz l4291
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramName ]
  lea  rdi , [ tmp4226 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4226 ]
  lea  rdx , [ __literal562 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4227 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal561 ]
  lea  rdx , [ tmp4228 ]
  lea  r8 , [ tmp4227 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4227 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4292
l4291:
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramName ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__importGlobal$2
  pop rdi
l4292:
  mov eax, dword [ idx ]
  add eax, dword [ tmp4241 ]
  mov dword [ idx ], eax
  jmp l4288
l4289:
  jmp l4287
l4286:
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal158 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea rcx, [ unusedRv ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  r8 , [ ast ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNodeCall$3
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*204]
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
l4287:
  jmp l4284
l4283:
  mov dword [ tmp4234 ], 170
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4234 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4285 ], eax
  cmp dword [ tmp4285 ], 0
  jz l4293
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*233]
  pop rdi
  jmp l4294
l4293:
  mov dword [ tmp4234 ], 103
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4234 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4290 ], eax
  cmp dword [ tmp4290 ], 0
  jz l4295
  mov dword [ tmp4234 ], 106
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4234 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4297 ], eax
  cmp dword [ tmp4297 ], 0
  jz l4298
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal158 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$2
  pop rdi
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea rcx, [ unusedRv ]
  lea rdx, [ tmp4225 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  r8 , [ ast ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNodeInvokeMethod$3
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4225 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*204]
  pop rdi
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  jmp l4299
l4298:
  mov dword [ tmp4234 ], 999
  mov [ tmp4226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4234 ]
  mov [ tmp4226 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4225 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4225 + Variant_t.value]
  mov dword [ tmp4300 ], eax
  cmp dword [ tmp4300 ], 0
  jz l4301
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp4226 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4227 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal563 ]
  lea  rdx , [ tmp4226 ]
  lea  r8 , [ tmp4227 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4227 ]
  lea  rdi , [ tmp4225 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
l4301:
l4302:
l4299:
l4295:
l4296:
l4294:
l4284:
l4280:
l4281:
l4278:
l4275:
l4273:
l4269:
l4265:
l4263:
l4246:
l4239:
l4236:

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4225 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4226 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4253 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4254 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ indexNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxOrKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse28 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueStep ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueStart ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse29 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ condAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeIfTrue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeIfFalse ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy

  add  rsp, 784
  pop  rbp
  ret

  restore this
  restore ast
  restore opcode
  restore value
  restore children
  restore childrenCnt
  restore tmp4225
  restore tmp4226
  restore tmp4227
  restore tmp4228
  restore tmp4229
  restore tmp4230
  restore tmp4231
  restore tmp4234
  restore tmp4237
  restore funcProto
  restore tmp4240
  restore tmp4241
  restore oldSymbolTable
  restore idx
  restore tmp4244
  restore tmp4247
  restore tmp4250
  restore tmp4252
  restore tmp4253
  restore tmp4254
  restore lval
  restore rval
  restore symbolInfo
  restore boxNode
  restore indexNode
  restore valueNode
  restore box
  restore idxOrKey
  restore __cse28
  restore iteratorName
  restore valueStep
  restore valueEnd
  restore valueStart
  restore bodyAst
  restore astDataType
  restore mirDataType
  restore __cse29
  restore iteratorValue
  restore loopBodyNode
  restore tmp4267
  restore iteratorKey
  restore tmp4271
  restore condAst
  restore tmp4276
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore tmp4279
  restore tmp4282
  restore tmp4285
  restore tmp4290
  restore paramName
  restore unusedRv
  restore tmp4297
  restore tmp4300
; -----------------------------------------------
; function __ASTTranslator_run$2
; -----------------------------------------------
__ASTTranslator_run$2:
  ; init frame
  ; ----------
  tmp4303 EQU rbp - 24 ; 16 bytes
  ast EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [tmp4303 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4303 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  lea  rdi , [ tmp4303 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4303 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore ast
  restore tmp4303
; -----------------------------------------------
; function __ASTTranslatorMIR0_constructor$2
; -----------------------------------------------
__ASTTranslatorMIR0_constructor$2:
  ; init frame
  ; ----------
  tmp4305 EQU rbp - 24 ; 16 bytes
  tmp4304 EQU rbp - 40 ; 16 bytes
  app EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp4304 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4305 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4304 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ app ]
  lea  rdi , [ tmp4304 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator_constructor$2
  pop rdi
  lea  rcx, [ tmp4304 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4304 ]
  lea  rdx, [vtable_MIRCode]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp4305 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4304 ]
  lea  rdi , [ tmp4305 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_constructor$1
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4304 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4304 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4305 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore app
  restore tmp4304
  restore tmp4305
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArgsVector$1
; -----------------------------------------------
__ASTTranslatorMIR0__loadArgsVector$1:
  ; init frame
  ; ----------
  tmp4307 EQU rbp - 24 ; 16 bytes
  tmp4306 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4306 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4307 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4307 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4307 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4306 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4307 ]
  lea  rdi, [ tmp4306 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*132]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4306 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4307 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4306
  restore tmp4307
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArgsCount$1
; -----------------------------------------------
__ASTTranslatorMIR0__loadArgsCount$1:
  ; init frame
  ; ----------
  tmp4309 EQU rbp - 24 ; 16 bytes
  tmp4308 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4308 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4309 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4309 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4309 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4308 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4309 ]
  lea  rdi, [ tmp4308 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*131]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4308 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4309 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4308
  restore tmp4309
; -----------------------------------------------
; function __ASTTranslatorMIR0__neg$3
; -----------------------------------------------
__ASTTranslatorMIR0__neg$3:
  ; init frame
  ; ----------
  tmp4311 EQU rbp - 24 ; 16 bytes
  tmp4310 EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]
  mov [tmp4310 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4311 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4311 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4311 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4310 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4311 ]
  lea  rdi, [ tmp4310 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*97]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4310 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4311 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp4310
  restore tmp4311
; -----------------------------------------------
; function __ASTTranslatorMIR0__add$4
; -----------------------------------------------
__ASTTranslatorMIR0__add$4:
  ; init frame
  ; ----------
  tmp4313 EQU rbp - 24 ; 16 bytes
  tmp4312 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4312 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4313 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4313 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4312 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4313 ]
  lea  rdi, [ tmp4312 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*98]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4312 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4313 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4312
  restore tmp4313
; -----------------------------------------------
; function __ASTTranslatorMIR0__stringJoin$4
; -----------------------------------------------
__ASTTranslatorMIR0__stringJoin$4:
  ; init frame
  ; ----------
  tmp4315 EQU rbp - 24 ; 16 bytes
  tmp4314 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4314 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4315 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4315 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4314 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4315 ]
  lea  rdi, [ tmp4314 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*103]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4314 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4315 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4314
  restore tmp4315
; -----------------------------------------------
; function __ASTTranslatorMIR0__sub$4
; -----------------------------------------------
__ASTTranslatorMIR0__sub$4:
  ; init frame
  ; ----------
  tmp4317 EQU rbp - 24 ; 16 bytes
  tmp4316 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4316 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4317 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4317 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4317 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4316 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4317 ]
  lea  rdi, [ tmp4316 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*99]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4316 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4317 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4316
  restore tmp4317
; -----------------------------------------------
; function __ASTTranslatorMIR0__mul$4
; -----------------------------------------------
__ASTTranslatorMIR0__mul$4:
  ; init frame
  ; ----------
  tmp4319 EQU rbp - 24 ; 16 bytes
  tmp4318 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4318 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4319 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4319 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4319 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4318 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4319 ]
  lea  rdi, [ tmp4318 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*100]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4318 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4319 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4318
  restore tmp4319
; -----------------------------------------------
; function __ASTTranslatorMIR0__div$4
; -----------------------------------------------
__ASTTranslatorMIR0__div$4:
  ; init frame
  ; ----------
  tmp4321 EQU rbp - 24 ; 16 bytes
  tmp4320 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4320 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4321 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4321 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4321 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4320 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4321 ]
  lea  rdi, [ tmp4320 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*101]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4320 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4321 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4320
  restore tmp4321
; -----------------------------------------------
; function __ASTTranslatorMIR0__idiv$4
; -----------------------------------------------
__ASTTranslatorMIR0__idiv$4:
  ; init frame
  ; ----------
  tmp4323 EQU rbp - 24 ; 16 bytes
  tmp4322 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4322 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4323 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4323 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4322 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4323 ]
  lea  rdi, [ tmp4322 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*102]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4322 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4323 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4322
  restore tmp4323
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArray$2
; -----------------------------------------------
__ASTTranslatorMIR0__loadArray$2:
  ; init frame
  ; ----------
  tmp4325 EQU rbp - 24 ; 16 bytes
  tmp4324 EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp4324 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4325 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4325 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4325 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4324 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4325 ]
  lea  rdi, [ tmp4324 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*104]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4324 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4325 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4324
  restore tmp4325
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadMap$2
; -----------------------------------------------
__ASTTranslatorMIR0__loadMap$2:
  ; init frame
  ; ----------
  tmp4327 EQU rbp - 24 ; 16 bytes
  tmp4326 EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp4326 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4327 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4327 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4327 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4326 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4327 ]
  lea  rdi, [ tmp4326 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*105]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4326 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4327 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4326
  restore tmp4327
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadImm$3
; -----------------------------------------------
__ASTTranslatorMIR0__loadImm$3:
  ; init frame
  ; ----------
  tmp4329 EQU rbp - 24 ; 16 bytes
  tmp4328 EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [tmp4328 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4329 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4328 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4329 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4328 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*106]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4328 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp4328
  restore tmp4329
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadImmAsVariant$3
; -----------------------------------------------
__ASTTranslatorMIR0__loadImmAsVariant$3:
  ; init frame
  ; ----------
  tmp4330 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [tmp4330 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4330 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  lea  rdi , [ tmp4330 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR0__loadImm$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4330 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp4330
; -----------------------------------------------
; function __ASTTranslatorMIR0__convert$5
; -----------------------------------------------
__ASTTranslatorMIR0__convert$5:
  ; init frame
  ; ----------
  dstType EQU rbp - 24 ; 16 bytes
  srcType EQU rbp - 40 ; 16 bytes
  src EQU rbp - 56 ; 16 bytes
  dst EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  ; skipped unused param [ this ]
  ; skipped unused param [ dst ]
  ; skipped unused param [ src ]
  ; skipped unused param [ srcType ]
  ; skipped unused param [ dstType ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore srcType
  restore dstType
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareEQ$4
; -----------------------------------------------
__ASTTranslatorMIR0__compareEQ$4:
  ; init frame
  ; ----------
  tmp4332 EQU rbp - 24 ; 16 bytes
  tmp4331 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4331 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4332 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4332 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4332 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4331 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4332 ]
  lea  rdi, [ tmp4331 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*107]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4331 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4332 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4331
  restore tmp4332
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareNEQ$4
; -----------------------------------------------
__ASTTranslatorMIR0__compareNEQ$4:
  ; init frame
  ; ----------
  tmp4334 EQU rbp - 24 ; 16 bytes
  tmp4333 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4333 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4334 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4334 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4334 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4333 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4334 ]
  lea  rdi, [ tmp4333 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*108]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4333 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4334 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4333
  restore tmp4334
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareLT$4
; -----------------------------------------------
__ASTTranslatorMIR0__compareLT$4:
  ; init frame
  ; ----------
  tmp4336 EQU rbp - 24 ; 16 bytes
  tmp4335 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4335 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4336 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4336 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4336 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4336 ]
  lea  rdi, [ tmp4335 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*111]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4336 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4335
  restore tmp4336
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareLE$4
; -----------------------------------------------
__ASTTranslatorMIR0__compareLE$4:
  ; init frame
  ; ----------
  tmp4338 EQU rbp - 24 ; 16 bytes
  tmp4337 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4337 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4338 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4338 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4338 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4337 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4338 ]
  lea  rdi, [ tmp4337 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*112]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4337 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4338 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4337
  restore tmp4338
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareGT$4
; -----------------------------------------------
__ASTTranslatorMIR0__compareGT$4:
  ; init frame
  ; ----------
  tmp4340 EQU rbp - 24 ; 16 bytes
  tmp4339 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4339 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4340 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4340 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4340 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4340 ]
  lea  rdi, [ tmp4339 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*109]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4340 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4339
  restore tmp4340
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareGE$4
; -----------------------------------------------
__ASTTranslatorMIR0__compareGE$4:
  ; init frame
  ; ----------
  tmp4342 EQU rbp - 24 ; 16 bytes
  tmp4341 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4341 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4342 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4342 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4342 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4341 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4342 ]
  lea  rdi, [ tmp4341 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*110]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4341 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4342 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4341
  restore tmp4342
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadVariable$2
; -----------------------------------------------
__ASTTranslatorMIR0__loadVariable$2:
  ; init frame
  ; ----------
  tmp4365 EQU rbp - 24 ; 16 bytes
  tmp4364 EQU rbp - 40 ; 16 bytes
  tmp4363 EQU rbp - 56 ; 16 bytes
  tmp4362 EQU rbp - 72 ; 16 bytes
  tmp4361 EQU rbp - 88 ; 16 bytes
  tmp4358 EQU rbp - 92 ; 4 bytes
  tmp4355 EQU rbp - 96 ; 4 bytes
  tmp4352 EQU rbp - 100 ; 4 bytes
  tmp4349 EQU rbp - 104 ; 4 bytes
  tmp4346 EQU rbp - 108 ; 4 bytes
  tmp4345 EQU rbp - 112 ; 4 bytes
  tmp4344 EQU rbp - 128 ; 16 bytes
  tmp4343 EQU rbp - 144 ; 16 bytes
  id EQU rbp - 160 ; 16 bytes
  kind EQU rbp - 176 ; 16 bytes
  symbolInfo EQU rbp - 192 ; 16 bytes
  name EQU rbp - 208 ; 16 bytes
  this EQU rbp - 224 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [kind + Variant_t.type], VARIANT_UNDEFINED
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4343 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4344 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4361 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4362 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4363 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4364 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4365 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4344 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4344 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4343 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4343 ]
  call __MOLD_VariantMove
  lea  rcx, [ kind ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ kind ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4345 ], 1
  mov [ tmp4344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4345 ]
  mov [ tmp4344 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4344 ]
  lea  r8 , [ tmp4343 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4343 + Variant_t.value]
  mov dword [ tmp4346 ], eax
  cmp dword [ tmp4346 ], 0
  jz l4347
  lea  rcx, [ tmp4344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4344 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4344 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4343 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*113]
  pop rdi
  jmp l4348
l4347:
  mov dword [ tmp4345 ], 2
  mov [ tmp4344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4345 ]
  mov [ tmp4344 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4344 ]
  lea  r8 , [ tmp4343 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4343 + Variant_t.value]
  mov dword [ tmp4349 ], eax
  cmp dword [ tmp4349 ], 0
  jz l4350
  lea  rcx, [ tmp4344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4344 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4344 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4343 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*115]
  pop rdi
  jmp l4351
l4350:
  mov dword [ tmp4345 ], 3
  mov [ tmp4344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4345 ]
  mov [ tmp4344 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4344 ]
  lea  r8 , [ tmp4343 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4343 + Variant_t.value]
  mov dword [ tmp4352 ], eax
  cmp dword [ tmp4352 ], 0
  jz l4353
  lea  rcx, [ tmp4344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4344 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4344 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4343 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*114]
  pop rdi
  jmp l4354
l4353:
  mov dword [ tmp4345 ], 4
  mov [ tmp4344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4345 ]
  mov [ tmp4344 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4344 ]
  lea  r8 , [ tmp4343 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4343 + Variant_t.value]
  mov dword [ tmp4355 ], eax
  cmp dword [ tmp4355 ], 0
  jz l4356
  lea  rcx, [ tmp4344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4344 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4344 ]
  lea  rdi, [ tmp4343 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*116]
  pop rdi
  jmp l4357
l4356:
  mov dword [ tmp4345 ], 5
  mov [ tmp4344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4345 ]
  mov [ tmp4344 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4344 ]
  lea  r8 , [ tmp4343 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4343 + Variant_t.value]
  mov dword [ tmp4358 ], eax
  cmp dword [ tmp4358 ], 0
  jz l4359
  lea  rcx, [ tmp4344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4344 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4361 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp4361 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4344 ]
  lea  rdx , [ tmp4361 ]
  lea  rdi, [ tmp4343 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*106]
  pop rdi
  jmp l4360
l4359:
  lea  rcx, [ tmp4361 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ kind ]
  lea  rdi , [ tmp4361 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4365 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4361 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp4365 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4364 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal565 ]
  lea  rdx , [ tmp4365 ]
  lea  r8 , [ tmp4364 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4363 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp4364 ]
  lea  r8 , [ tmp4363 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal564 ]
  lea  rdx , [ tmp4363 ]
  lea  r8 , [ tmp4362 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4362 ]
  lea  rdi , [ tmp4343 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
l4360:
l4357:
l4354:
l4351:
l4348:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ kind ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4343 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4344 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4361 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore kind
  restore id
  restore tmp4343
  restore tmp4344
  restore tmp4345
  restore tmp4346
  restore tmp4349
  restore tmp4352
  restore tmp4355
  restore tmp4358
  restore tmp4361
  restore tmp4362
  restore tmp4363
  restore tmp4364
  restore tmp4365
; -----------------------------------------------
; function __ASTTranslatorMIR0__assign$3
; -----------------------------------------------
__ASTTranslatorMIR0__assign$3:
  ; init frame
  ; ----------
  tmp4384 EQU rbp - 24 ; 16 bytes
  tmp4383 EQU rbp - 40 ; 16 bytes
  tmp4382 EQU rbp - 56 ; 16 bytes
  tmp4381 EQU rbp - 72 ; 16 bytes
  tmp4378 EQU rbp - 76 ; 4 bytes
  tmp4375 EQU rbp - 80 ; 4 bytes
  tmp4372 EQU rbp - 84 ; 4 bytes
  tmp4369 EQU rbp - 88 ; 4 bytes
  tmp4368 EQU rbp - 92 ; 4 bytes
  tmp4367 EQU rbp - 108 ; 16 bytes
  tmp4366 EQU rbp - 124 ; 16 bytes
  id EQU rbp - 140 ; 16 bytes
  kind EQU rbp - 156 ; 16 bytes
  symbolInfo EQU rbp - 172 ; 16 bytes
  unusedValue EQU rbp - 188 ; 16 bytes
  name EQU rbp - 204 ; 16 bytes
  this EQU rbp - 220 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  ; skipped unused param [ unusedValue ]
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [kind + Variant_t.type], VARIANT_UNDEFINED
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4366 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4367 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4381 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4382 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4383 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4384 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4367 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4367 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4366 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4367 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4366 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4366 ]
  call __MOLD_VariantMove
  lea  rcx, [ kind ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ kind ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4368 ], 1
  mov [ tmp4367 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4368 ]
  mov [ tmp4367 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4367 ]
  lea  r8 , [ tmp4366 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4366 + Variant_t.value]
  mov dword [ tmp4369 ], eax
  cmp dword [ tmp4369 ], 0
  jz l4370
  lea  rcx, [ tmp4367 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4367 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4366 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4367 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4366 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*120]
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp4366 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4371
l4370:
  mov dword [ tmp4368 ], 2
  mov [ tmp4367 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4368 ]
  mov [ tmp4367 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4367 ]
  lea  r8 , [ tmp4366 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4366 + Variant_t.value]
  mov dword [ tmp4372 ], eax
  cmp dword [ tmp4372 ], 0
  jz l4373
  lea  rcx, [ tmp4367 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4367 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4366 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4367 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4366 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*122]
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp4366 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4374
l4373:
  mov dword [ tmp4368 ], 3
  mov [ tmp4367 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4368 ]
  mov [ tmp4367 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4367 ]
  lea  r8 , [ tmp4366 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4366 + Variant_t.value]
  mov dword [ tmp4375 ], eax
  cmp dword [ tmp4375 ], 0
  jz l4376
  lea  rcx, [ tmp4367 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4367 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4366 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4367 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4366 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*121]
  pop rdi
  jmp l4377
l4376:
  mov dword [ tmp4368 ], 4
  mov [ tmp4367 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4368 ]
  mov [ tmp4367 + Variant_t.value], rax
  lea  rcx , [ kind ]
  lea  rdx , [ tmp4367 ]
  lea  r8 , [ tmp4366 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4366 + Variant_t.value]
  mov dword [ tmp4378 ], eax
  cmp dword [ tmp4378 ], 0
  jz l4379
  lea  rcx, [ tmp4367 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4367 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4366 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4367 ]
  lea  rdi, [ tmp4366 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*123]
  pop rdi
  jmp l4380
l4379:
  lea  rcx, [ tmp4367 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ kind ]
  lea  rdi , [ tmp4367 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4384 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4367 ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ tmp4384 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4383 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal565 ]
  lea  rdx , [ tmp4384 ]
  lea  r8 , [ tmp4383 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4382 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp4383 ]
  lea  r8 , [ tmp4382 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4381 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal564 ]
  lea  rdx , [ tmp4382 ]
  lea  r8 , [ tmp4381 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4366 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4381 ]
  lea  rdi , [ tmp4366 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
l4380:
l4377:
l4374:
l4371:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ kind ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4366 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4367 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore name
  restore unusedValue
  restore symbolInfo
  restore kind
  restore id
  restore tmp4366
  restore tmp4367
  restore tmp4368
  restore tmp4369
  restore tmp4372
  restore tmp4375
  restore tmp4378
  restore tmp4381
  restore tmp4382
  restore tmp4383
  restore tmp4384
; -----------------------------------------------
; function __ASTTranslatorMIR0__syscall$5
; -----------------------------------------------
__ASTTranslatorMIR0__syscall$5:
  ; init frame
  ; ----------
  tmp4386 EQU rbp - 24 ; 16 bytes
  tmp4385 EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  params EQU rbp - 72 ; 16 bytes
  id EQU rbp - 88 ; 16 bytes
  rv EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  ; skipped unused param [ params ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4385 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4386 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4386 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4386 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4385 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4386 ]
  lea  rdx , [ id ]
  lea  r8 , [ paramsCnt ]
  lea  rdi, [ tmp4385 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*151]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4385 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4386 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore id
  restore params
  restore paramsCnt
  restore tmp4385
  restore tmp4386
; -----------------------------------------------
; function __ASTTranslatorMIR0__call$5
; -----------------------------------------------
__ASTTranslatorMIR0__call$5:
  ; init frame
  ; ----------
  tmp4388 EQU rbp - 24 ; 16 bytes
  tmp4387 EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  params EQU rbp - 72 ; 16 bytes
  proto EQU rbp - 88 ; 16 bytes
  rv EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]
  mov [tmp4387 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4388 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4388 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4388 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4387 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4388 ]
  lea  rdx , [ proto ]
  lea  rdi, [ tmp4387 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*140]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4387 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4388 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore proto
  restore params
  restore paramsCnt
  restore tmp4387
  restore tmp4388
; -----------------------------------------------
; function __ASTTranslatorMIR0__callPrint$3
; -----------------------------------------------
__ASTTranslatorMIR0__callPrint$3:
  ; init frame
  ; ----------
  tmp4390 EQU rbp - 24 ; 16 bytes
  tmp4389 EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  params EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ params ]
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4389 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4390 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4390 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4390 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4389 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4390 ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp4389 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*142]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4389 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4390 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore params
  restore paramsCnt
  restore tmp4389
  restore tmp4390
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadFromIndex$4
; -----------------------------------------------
__ASTTranslatorMIR0__loadFromIndex$4:
  ; init frame
  ; ----------
  tmp4392 EQU rbp - 24 ; 16 bytes
  tmp4391 EQU rbp - 40 ; 16 bytes
  unusedIdx EQU rbp - 56 ; 16 bytes
  unusedBox EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  mov [tmp4391 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4392 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4392 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4392 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4391 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4392 ]
  lea  rdi, [ tmp4391 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*117]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4391 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4392 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedIdx
  restore tmp4391
  restore tmp4392
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadFromKey$4
; -----------------------------------------------
__ASTTranslatorMIR0__loadFromKey$4:
  ; init frame
  ; ----------
  tmp4394 EQU rbp - 24 ; 16 bytes
  tmp4393 EQU rbp - 40 ; 16 bytes
  unusedKey EQU rbp - 56 ; 16 bytes
  unusedBox EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  mov [tmp4393 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4394 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4394 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4394 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4393 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4394 ]
  lea  rdi, [ tmp4393 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*118]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4393 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4394 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedKey
  restore tmp4393
  restore tmp4394
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtIndex$4
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtIndex$4:
  ; init frame
  ; ----------
  tmp4396 EQU rbp - 24 ; 16 bytes
  tmp4395 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedIdx EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [tmp4395 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4396 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4396 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4396 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4395 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4396 ]
  lea  rdi, [ tmp4395 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*124]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4395 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4396 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore tmp4395
  restore tmp4396
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtKey$4
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtKey$4:
  ; init frame
  ; ----------
  tmp4398 EQU rbp - 24 ; 16 bytes
  tmp4397 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedKey EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [tmp4397 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4398 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4398 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4398 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4397 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4398 ]
  lea  rdi, [ tmp4397 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*125]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4397 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4398 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore tmp4397
  restore tmp4398
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtIndexAndDrop$4
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtIndexAndDrop$4:
  ; init frame
  ; ----------
  tmp4399 EQU rbp - 24 ; 16 bytes
  __cse30 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedIdx EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [__cse30 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4399 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse30 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ __cse30 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4399 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse30 ]
  lea  rdi, [ tmp4399 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*124]
  pop rdi
  lea  rcx, [ tmp4399 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse30 ]
  lea  rdi, [ tmp4399 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*127]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ __cse30 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4399 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore __cse30
  restore tmp4399
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtKeyAndDrop$4
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtKeyAndDrop$4:
  ; init frame
  ; ----------
  tmp4400 EQU rbp - 24 ; 16 bytes
  __cse31 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedKey EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [__cse31 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4400 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse31 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ __cse31 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4400 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse31 ]
  lea  rdi, [ tmp4400 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*125]
  pop rdi
  lea  rcx, [ tmp4400 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse31 ]
  lea  rdi, [ tmp4400 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*127]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ __cse31 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4400 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore __cse31
  restore tmp4400
; -----------------------------------------------
; function __ASTTranslatorMIR0__createObject$3
; -----------------------------------------------
__ASTTranslatorMIR0__createObject$3:
  ; init frame
  ; ----------
  tmp4402 EQU rbp - 24 ; 16 bytes
  tmp4401 EQU rbp - 40 ; 16 bytes
  classProto EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4401 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4402 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4402 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4401 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4402 ]
  lea  rdx , [ classProto ]
  lea  rdi, [ tmp4401 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*133]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4401 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4402 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore classProto
  restore tmp4401
  restore tmp4402
; -----------------------------------------------
; function __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$4
; -----------------------------------------------
__ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$4:
  ; init frame
  ; ----------
  tmp4405 EQU rbp - 24 ; 16 bytes
  tmp4404 EQU rbp - 28 ; 4 bytes
  tmp4403 EQU rbp - 44 ; 16 bytes
  __cse33 EQU rbp - 60 ; 16 bytes
  __cse32 EQU rbp - 76 ; 16 bytes
  endLabelId EQU rbp - 92 ; 16 bytes
  rightAst EQU rbp - 108 ; 16 bytes
  leftAst EQU rbp - 124 ; 16 bytes
  rv EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse32 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse33 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4403 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4405 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse32 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ __cse32 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse32 ]
  lea  rdi, [ tmp4403 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4403 ]
  call __MOLD_VariantMove
  mov dword [ tmp4404 ], 0
  mov eax, dword [ tmp4404 ]
  mov [ tmp4405 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4405 + Variant_t.value], rax
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse32 ]
  lea  rdx , [ tmp4405 ]
  lea  rdi, [ tmp4403 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*106]
  pop rdi
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4403 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ tmp4405 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4405 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4405 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4403 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*137]
  pop rdi
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4403 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ __cse33 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ __cse33 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse33 ]
  lea  rdi, [ tmp4403 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*126]
  pop rdi
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse33 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4403 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse32 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse33 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4405 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabelId
  restore __cse32
  restore __cse33
  restore tmp4403
  restore tmp4404
  restore tmp4405
; -----------------------------------------------
; function __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$4
; -----------------------------------------------
__ASTTranslatorMIR0__evaluateNodeLazyBoolOr$4:
  ; init frame
  ; ----------
  tmp4408 EQU rbp - 24 ; 16 bytes
  tmp4407 EQU rbp - 28 ; 4 bytes
  tmp4406 EQU rbp - 44 ; 16 bytes
  __cse35 EQU rbp - 60 ; 16 bytes
  __cse34 EQU rbp - 76 ; 16 bytes
  endLabelId EQU rbp - 92 ; 16 bytes
  rightAst EQU rbp - 108 ; 16 bytes
  leftAst EQU rbp - 124 ; 16 bytes
  rv EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse34 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse35 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4406 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4408 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse34 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ __cse34 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse34 ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4406 ]
  call __MOLD_VariantMove
  mov dword [ tmp4407 ], 1
  mov eax, dword [ tmp4407 ]
  mov [ tmp4408 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4408 + Variant_t.value], rax
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse34 ]
  lea  rdx , [ tmp4408 ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*106]
  pop rdi
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4406 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ tmp4408 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4408 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4408 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*136]
  pop rdi
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4406 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ __cse35 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ __cse35 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse35 ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*126]
  pop rdi
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse35 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse34 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse35 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4408 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabelId
  restore __cse34
  restore __cse35
  restore tmp4406
  restore tmp4407
  restore tmp4408
; -----------------------------------------------
; function __ASTTranslatorMIR0__invokeMethod$5
; -----------------------------------------------
__ASTTranslatorMIR0__invokeMethod$5:
  ; init frame
  ; ----------
  tmp4410 EQU rbp - 24 ; 16 bytes
  tmp4409 EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  params EQU rbp - 72 ; 16 bytes
  methodName EQU rbp - 88 ; 16 bytes
  rv EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ methodName ], xmm0
  ; skipped unused param [ params ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4409 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4410 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4410 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4410 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4409 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4410 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ paramsCnt ]
  lea  rdi, [ tmp4409 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*141]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4409 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4410 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore methodName
  restore params
  restore paramsCnt
  restore tmp4409
  restore tmp4410
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeFor$6
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeFor$6:
  ; init frame
  ; ----------
  tmp4413 EQU rbp - 12 ; 4 bytes
  tmp4412 EQU rbp - 28 ; 16 bytes
  tmp4411 EQU rbp - 44 ; 16 bytes
  iterId EQU rbp - 60 ; 16 bytes
  iterSymbolInfo EQU rbp - 76 ; 16 bytes
  endLabelId EQU rbp - 92 ; 16 bytes
  loopLabelId EQU rbp - 108 ; 16 bytes
  code EQU rbp - 124 ; 16 bytes
  symbolTable EQU rbp - 140 ; 16 bytes
  bodyAst EQU rbp - 156 ; 16 bytes
  valueStep EQU rbp - 172 ; 16 bytes
  valueEnd EQU rbp - 188 ; 16 bytes
  valueStart EQU rbp - 204 ; 16 bytes
  iterName EQU rbp - 220 ; 16 bytes
  this EQU rbp - 236 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iterName ], xmm0
  ; skipped unused param [ valueStart ]
  ; skipped unused param [ valueEnd ]
  ; skipped unused param [ valueStep ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ bodyAst ], xmm0
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [iterSymbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [iterId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4411 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4412 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabelId ]
  lea rdx, [ tmp4411 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4411 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ iterName ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ iterSymbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ iterSymbolInfo ]
  lea rdx, [ tmp4411 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4412 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterSymbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ tmp4412 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4412 ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*120]
  pop rdi
  lea  rcx, [ iterId ]
  call __MOLD_VariantDestroy
  lea rcx, [ iterId ]
  lea rdx, [ tmp4411 ]
  call __MOLD_VariantMove
  lea  rcx , [ iterSymbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ iterId ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*129]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ iterId ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*113]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*112]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*136]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  lea  rdi , [ tmp4411 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*130]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ iterId ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*113]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*98]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ iterId ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*120]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*135]
  pop rdi
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi
  mov dword [ tmp4413 ], 2
  mov [ tmp4412 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4413 ]
  mov [ tmp4412 + Variant_t.value], rax
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4412 ]
  lea  rdi, [ tmp4411 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*128]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterSymbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4412 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore iterName
  restore valueStart
  restore valueEnd
  restore valueStep
  restore bodyAst
  restore symbolTable
  restore code
  restore loopLabelId
  restore endLabelId
  restore iterSymbolInfo
  restore iterId
  restore tmp4411
  restore tmp4412
  restore tmp4413
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeForEach$5
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeForEach$5:
  ; init frame
  ; ----------
  valueSymbolInfo EQU rbp - 24 ; 16 bytes
  keySymbolInfo EQU rbp - 40 ; 16 bytes
  tmp4417 EQU rbp - 44 ; 4 bytes
  tmp4416 EQU rbp - 60 ; 16 bytes
  tmp4415 EQU rbp - 64 ; 4 bytes
  tmp4414 EQU rbp - 80 ; 16 bytes
  valueId EQU rbp - 96 ; 16 bytes
  keyId EQU rbp - 112 ; 16 bytes
  endLabelId EQU rbp - 128 ; 16 bytes
  loopLabelId EQU rbp - 144 ; 16 bytes
  code EQU rbp - 160 ; 16 bytes
  symbolTable EQU rbp - 176 ; 16 bytes
  bodyAst EQU rbp - 192 ; 16 bytes
  box EQU rbp - 208 ; 16 bytes
  iteratorValue EQU rbp - 224 ; 16 bytes
  iteratorKey EQU rbp - 240 ; 16 bytes
  this EQU rbp - 256 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iteratorKey ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ iteratorValue ], xmm0
  ; skipped unused param [ box ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ bodyAst ], xmm0
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [keyId + Variant_t.type], VARIANT_UNDEFINED
  mov [valueId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4414 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4416 + Variant_t.type], VARIANT_UNDEFINED
  mov [keySymbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [valueSymbolInfo + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabelId ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  mov dword [ tmp4415 ], -1
  mov [ keyId + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4415 ]
  mov [ keyId + Variant_t.value], rax
  mov dword [ tmp4415 ], -1
  mov [ valueId + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4415 ]
  mov [ valueId + Variant_t.value], rax
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*135]
  pop rdi
  mov dword [ tmp4415 ], -1
  mov [ tmp4416 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4415 ]
  mov [ tmp4416 + Variant_t.value], rax
  lea  rcx , [ iteratorKey ]
  lea  rdx , [ tmp4416 ]
  lea  r8 , [ tmp4414 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4414 + Variant_t.value]
  mov dword [ tmp4417 ], eax
  cmp dword [ tmp4417 ], 0
  jz l4418
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ iteratorKey ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ keySymbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ keySymbolInfo ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*119]
  pop rdi
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea rcx, [ keyId ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  lea  rcx , [ keySymbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ keyId ]
  call  __MOLD_VariantStoreAtKey
l4418:
l4419:
  mov dword [ tmp4415 ], -1
  mov [ tmp4416 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4415 ]
  mov [ tmp4416 + Variant_t.value], rax
  lea  rcx , [ iteratorValue ]
  lea  rdx , [ tmp4416 ]
  lea  r8 , [ tmp4414 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4414 + Variant_t.value]
  mov dword [ tmp4417 ], eax
  cmp dword [ tmp4417 ], 0
  jz l4420
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ iteratorValue ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ valueSymbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueSymbolInfo ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*119]
  pop rdi
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueId ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  lea  rcx , [ valueSymbolInfo ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantStoreAtKey
l4420:
l4421:
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  lea  rdi , [ tmp4414 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*139]
  pop rdi
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi
  lea  rcx, [ tmp4416 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4416 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*89]
  pop rdi
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ keyId ]
  lea  r8 , [ valueId ]
  lea  r9 , [ tmp4416 ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*150]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4416 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keySymbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueSymbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 288
  pop  rbp
  ret

  restore this
  restore iteratorKey
  restore iteratorValue
  restore box
  restore bodyAst
  restore symbolTable
  restore code
  restore loopLabelId
  restore endLabelId
  restore keyId
  restore valueId
  restore tmp4414
  restore tmp4415
  restore tmp4416
  restore tmp4417
  restore keySymbolInfo
  restore valueSymbolInfo
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeWhile$3
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeWhile$3:
  ; init frame
  ; ----------
  tmp4422 EQU rbp - 24 ; 16 bytes
  endLabelId EQU rbp - 40 ; 16 bytes
  loopLabelId EQU rbp - 56 ; 16 bytes
  code EQU rbp - 72 ; 16 bytes
  bodyAst EQU rbp - 88 ; 16 bytes
  condAst EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ condAst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ bodyAst ], xmm0
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4422 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4422 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabelId ]
  lea rdx, [ tmp4422 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4422 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4422 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4422 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ condAst ]
  lea  rdi , [ tmp4422 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4422 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*137]
  pop rdi
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  lea  rdi , [ tmp4422 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4422 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*135]
  pop rdi
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4422 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4422 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore condAst
  restore bodyAst
  restore code
  restore loopLabelId
  restore endLabelId
  restore tmp4422
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeIf$4
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeIf$4:
  ; init frame
  ; ----------
  tmp4425 EQU rbp - 12 ; 4 bytes
  tmp4424 EQU rbp - 28 ; 16 bytes
  tmp4423 EQU rbp - 44 ; 16 bytes
  endLabelId EQU rbp - 60 ; 16 bytes
  falseLabelId EQU rbp - 76 ; 16 bytes
  code EQU rbp - 92 ; 16 bytes
  codeIfFalse EQU rbp - 108 ; 16 bytes
  codeIfTrue EQU rbp - 124 ; 16 bytes
  cond EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ cond ]
  movdqu xmm0 , [ r8 ]
  movdqu [ codeIfTrue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ codeIfFalse ], xmm0
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [falseLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4423 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4424 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4423 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ falseLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ falseLabelId ]
  lea rdx, [ tmp4423 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4423 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4423 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ falseLabelId ]
  lea  rdi, [ tmp4423 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*137]
  pop rdi
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ codeIfTrue ]
  lea  rdi , [ tmp4423 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4424 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ codeIfFalse ]
  lea  rdi , [ tmp4424 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4424 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4423 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4423 + Variant_t.value]
  mov dword [ tmp4425 ], eax
  cmp dword [ tmp4425 ], 0
  jz l4426
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4423 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*135]
  pop rdi
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ falseLabelId ]
  lea  rdi, [ tmp4423 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ codeIfFalse ]
  lea  rdi , [ tmp4423 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  jmp l4427
l4426:
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ falseLabelId ]
  lea  rdi, [ tmp4423 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi
l4427:
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4423 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*144]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ falseLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4423 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4424 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore code
  restore falseLabelId
  restore endLabelId
  restore tmp4423
  restore tmp4424
  restore tmp4425
; -----------------------------------------------
; function __ASTTranslatorMIR0__declareFunction$3
; -----------------------------------------------
__ASTTranslatorMIR0__declareFunction$3:
  ; init frame
  ; ----------
  tmp4429 EQU rbp - 24 ; 16 bytes
  tmp4428 EQU rbp - 40 ; 16 bytes
  funcProto EQU rbp - 56 ; 16 bytes
  funcName EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ funcName ]
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [tmp4428 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4429 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4429 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4429 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4428 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4429 ]
  lea  rdi, [ tmp4428 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal566 ]
  lea  r8 , [ tmp4428 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4428 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4429 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore tmp4428
  restore tmp4429
; -----------------------------------------------
; function __ASTTranslatorMIR0__declareClass$3
; -----------------------------------------------
__ASTTranslatorMIR0__declareClass$3:
  ; init frame
  ; ----------
  tmp4431 EQU rbp - 24 ; 16 bytes
  tmp4430 EQU rbp - 40 ; 16 bytes
  classProto EQU rbp - 56 ; 16 bytes
  className EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ className ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4430 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4431 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4431 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4431 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4430 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4431 ]
  lea  rdx , [ classProto ]
  lea  rdi, [ tmp4430 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*147]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4430 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4431 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore className
  restore classProto
  restore tmp4430
  restore tmp4431
; -----------------------------------------------
; function __ASTTranslatorMIR0__emitFunctionBody$3
; -----------------------------------------------
__ASTTranslatorMIR0__emitFunctionBody$3:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp4438 EQU rbp - 28 ; 4 bytes
  tmp4437 EQU rbp - 44 ; 16 bytes
  tmp4436 EQU rbp - 48 ; 4 bytes
  tmp4435 EQU rbp - 64 ; 16 bytes
  tmp4434 EQU rbp - 80 ; 16 bytes
  tmp4433 EQU rbp - 96 ; 16 bytes
  tmp4432 EQU rbp - 112 ; 16 bytes
  labelId EQU rbp - 128 ; 16 bytes
  oldSymbolTable EQU rbp - 144 ; 16 bytes
  code EQU rbp - 160 ; 16 bytes
  rvName EQU rbp - 176 ; 16 bytes
  codeAst EQU rbp - 192 ; 16 bytes
  children EQU rbp - 208 ; 16 bytes
  paramsCnt EQU rbp - 224 ; 16 bytes
  params EQU rbp - 240 ; 16 bytes
  funcProto EQU rbp - 256 ; 16 bytes
  funcName EQU rbp - 272 ; 16 bytes
  this EQU rbp - 288 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [codeAst + Variant_t.type], VARIANT_UNDEFINED
  mov [rvName + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [labelId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4432 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4433 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4434 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4435 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4437 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp4435 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ funcName ]
  lea  rdi , [ tmp4435 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4434 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4435 ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp4434 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4433 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal567 ]
  lea  rdx , [ tmp4434 ]
  lea  r8 , [ tmp4433 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4433 ]
  lea  rdi , [ tmp4432 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__debug$2
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ paramsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4436 ], 0
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4436 ]
  lea  r8 , [ codeAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4432 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4432 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*145]
  pop rdi
  lea  rcx, [ labelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelId ]
  lea rdx, [ tmp4432 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ labelId ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*89]
  pop rdi
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal568 ]
  lea  r8 , [ tmp4432 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal569 ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*91]
  pop rdi
  lea  rcx, [ tmp4433 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal427 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4433 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4433 ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*91]
  pop rdi
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal569 ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*91]
  pop rdi
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ funcName ]
  lea  r8 , [ params ]
  lea  r9 , [ paramsCnt ]
  lea  rax , [ rvName ]
  push rax
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*87]
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4437 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal246 ]
  lea  r8 , [ tmp4437 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4435 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4437 ]
  lea  rdi , [ tmp4435 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4435 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4432 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4432 + Variant_t.value]
  mov dword [ tmp4438 ], eax
  cmp dword [ tmp4438 ], 0
  jz l4439
  mov dword [ tmp4436 ], 1
  mov [ tmp4435 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4436 ]
  mov [ tmp4435 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp4435 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantAdd
l4439:
l4440:
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*143]
  pop rdi
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4432 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l4442
l4441:
  lea  rcx, [ tmp4435 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp4435 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  ret
l4442:
  lea  rcx , [ tmp4432 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4441 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*138]
  pop rdi
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*88]
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  rdi , [ tmp4432 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__debug$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4435 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4437 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 320
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore params
  restore paramsCnt
  restore children
  restore codeAst
  restore rvName
  restore code
  restore oldSymbolTable
  restore labelId
  restore tmp4432
  restore tmp4433
  restore tmp4434
  restore tmp4435
  restore tmp4436
  restore tmp4437
  restore tmp4438
  restore item
; -----------------------------------------------
; function __ASTTranslatorMIR0__dropRetVal$1
; -----------------------------------------------
__ASTTranslatorMIR0__dropRetVal$1:
  ; init frame
  ; ----------
  tmp4444 EQU rbp - 24 ; 16 bytes
  tmp4443 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4443 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4444 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4444 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4444 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4443 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4444 ]
  lea  rdi, [ tmp4443 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*127]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4443 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4444 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4443
  restore tmp4444
; -----------------------------------------------
; function __ASTTranslatorMIR0_run$2
; -----------------------------------------------
__ASTTranslatorMIR0_run$2:
  ; init frame
  ; ----------
  tmp4445 EQU rbp - 24 ; 16 bytes
  ast EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [tmp4445 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  lea  rdi , [ tmp4445 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4445 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4445 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4445 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__emitGlobals$1
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore ast
  restore tmp4445
; -----------------------------------------------
; function __Stack_constructor$1
; -----------------------------------------------
__Stack_constructor$1:
  ; init frame
  ; ----------
  tmp4447 EQU rbp - 12 ; 4 bytes
  tmp4446 EQU rbp - 28 ; 16 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4446 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4446 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4446 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4446 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4447 ], 0
  mov [ tmp4446 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4447 ]
  mov [ tmp4446 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4446 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4446 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4446
  restore tmp4447
; -----------------------------------------------
; function __Stack_getItems$1
; -----------------------------------------------
__Stack_getItems$1:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  tmp4451 EQU rbp - 16 ; 4 bytes
  tmp4450 EQU rbp - 20 ; 4 bytes
  tmp4449 EQU rbp - 24 ; 4 bytes
  tmp4448 EQU rbp - 40 ; 16 bytes
  size EQU rbp - 56 ; 16 bytes
  data EQU rbp - 72 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [data + Variant_t.type], VARIANT_UNDEFINED
  mov [size + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4448 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ data ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ data ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ size ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ size ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4449 ], 1
  mov eax, dword [ size + Variant_t.value]
  mov dword [ tmp4450 ], eax
  mov dword [ idx ], 0
l4452:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4450 ]
  jge l4453
  lea  rcx, [ tmp4448 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ data ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4448 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ rv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4448 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4449 ]
  mov dword [ idx ], eax
  jmp l4452
l4453:

  ; clean frame
  ; -----------
  lea  rcx, [ data ]
  call __MOLD_VariantDestroy
  lea  rcx, [ size ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4448 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore data
  restore size
  restore tmp4448
  restore tmp4449
  restore tmp4450
  restore tmp4451
  restore idx
; -----------------------------------------------
; function __Stack_push$2
; -----------------------------------------------
__Stack_push$2:
  ; init frame
  ; ----------
  tmp4457 EQU rbp - 24 ; 16 bytes
  tmp4456 EQU rbp - 28 ; 4 bytes
  tmp4455 EQU rbp - 44 ; 16 bytes
  tmp4454 EQU rbp - 60 ; 16 bytes
  x EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [tmp4454 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4455 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4457 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4454 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4454 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4455 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4455 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp4455 + Variant_t.value]
  mov dword [ tmp4456 ], eax
  lea  rcx , [ tmp4454 ]
  lea  rdx , [ tmp4456 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp4455 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4455 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4456 ], 1
  mov [ tmp4457 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4456 ]
  mov [ tmp4457 + Variant_t.value], rax
  lea  rcx , [ tmp4455 ]
  lea  rdx , [ tmp4457 ]
  lea  r8 , [ tmp4454 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4454 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4454 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4455 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4457 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore x
  restore tmp4454
  restore tmp4455
  restore tmp4456
  restore tmp4457
; -----------------------------------------------
; function __Stack_pop$1
; -----------------------------------------------
__Stack_pop$1:
  ; init frame
  ; ----------
  tmp4462 EQU rbp - 12 ; 4 bytes
  tmp4461 EQU rbp - 28 ; 16 bytes
  tmp4460 EQU rbp - 32 ; 4 bytes
  tmp4459 EQU rbp - 48 ; 16 bytes
  tmp4458 EQU rbp - 64 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4458 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4459 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4461 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4459 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4459 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4460 ], 0
  mov [ tmp4461 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4460 ]
  mov [ tmp4461 + Variant_t.value], rax
  lea  rcx , [ tmp4459 ]
  lea  rdx , [ tmp4461 ]
  lea  r8 , [ tmp4458 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4458 + Variant_t.value]
  mov dword [ tmp4462 ], eax
  cmp dword [ tmp4462 ], 0
  jz l4463
  mov dword [ tmp4460 ], -1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4460 ]
  mov [ rv + Variant_t.value], rax
  lea  rcx, [ tmp4458 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal573 ]
  lea  rdi , [ tmp4458 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
  jmp l4464
l4463:
  lea  rcx, [ tmp4461 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4461 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4460 ], 1
  mov [ tmp4459 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4460 ]
  mov [ tmp4459 + Variant_t.value], rax
  lea  rcx , [ tmp4461 ]
  lea  rdx , [ tmp4459 ]
  lea  r8 , [ tmp4458 ]
  call  __MOLD_VariantSub
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4458 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4459 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4459 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4461 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4461 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp4461 + Variant_t.value]
  mov dword [ tmp4460 ], eax
  lea  rcx , [ tmp4459 ]
  lea  rdx , [ tmp4460 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
l4464:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4458 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4459 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4461 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4458
  restore tmp4459
  restore tmp4460
  restore tmp4461
  restore tmp4462
; -----------------------------------------------
; function __Stack_over$1
; -----------------------------------------------
__Stack_over$1:
  ; init frame
  ; ----------
  tmp4471 EQU rbp - 24 ; 16 bytes
  tmp4470 EQU rbp - 28 ; 4 bytes
  tmp4469 EQU rbp - 44 ; 16 bytes
  tmp4468 EQU rbp - 60 ; 16 bytes
  tmp4467 EQU rbp - 76 ; 16 bytes
  tmp4466 EQU rbp - 92 ; 16 bytes
  tmp4465 EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4465 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4466 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4467 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4468 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4469 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4471 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4467 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4467 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4469 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4469 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4470 ], 2
  mov [ tmp4471 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4470 ]
  mov [ tmp4471 + Variant_t.value], rax
  lea  rcx , [ tmp4469 ]
  lea  rdx , [ tmp4471 ]
  lea  r8 , [ tmp4468 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp4468 + Variant_t.value]
  mov dword [ tmp4470 ], eax
  lea  rcx, [ tmp4466 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4467 ]
  lea  rdx , [ tmp4470 ]
  lea  r8 , [ tmp4466 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4465 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4466 ]
  lea  rdi , [ tmp4465 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Stack_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4465 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4466 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4467 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4468 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4469 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4471 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore tmp4465
  restore tmp4466
  restore tmp4467
  restore tmp4468
  restore tmp4469
  restore tmp4470
  restore tmp4471
; -----------------------------------------------
; function __Stack_dup$1
; -----------------------------------------------
__Stack_dup$1:
  ; init frame
  ; ----------
  tmp4478 EQU rbp - 24 ; 16 bytes
  tmp4477 EQU rbp - 28 ; 4 bytes
  tmp4476 EQU rbp - 44 ; 16 bytes
  tmp4475 EQU rbp - 60 ; 16 bytes
  tmp4474 EQU rbp - 76 ; 16 bytes
  tmp4473 EQU rbp - 92 ; 16 bytes
  tmp4472 EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4472 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4473 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4474 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4475 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4476 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4478 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4474 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4474 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4476 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4476 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4477 ], 1
  mov [ tmp4478 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4477 ]
  mov [ tmp4478 + Variant_t.value], rax
  lea  rcx , [ tmp4476 ]
  lea  rdx , [ tmp4478 ]
  lea  r8 , [ tmp4475 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp4475 + Variant_t.value]
  mov dword [ tmp4477 ], eax
  lea  rcx, [ tmp4473 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4474 ]
  lea  rdx , [ tmp4477 ]
  lea  r8 , [ tmp4473 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4472 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4473 ]
  lea  rdi , [ tmp4472 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Stack_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4472 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4473 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4474 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4475 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4476 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4478 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore tmp4472
  restore tmp4473
  restore tmp4474
  restore tmp4475
  restore tmp4476
  restore tmp4477
  restore tmp4478
; -----------------------------------------------
; function __Stack_eat$1
; -----------------------------------------------
__Stack_eat$1:
  ; init frame
  ; ----------
  tmp4482 EQU rbp - 24 ; 16 bytes
  tmp4481 EQU rbp - 28 ; 4 bytes
  tmp4480 EQU rbp - 44 ; 16 bytes
  tmp4479 EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4479 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4480 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4482 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4480 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4480 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4481 ], 1
  mov [ tmp4482 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4481 ]
  mov [ tmp4482 + Variant_t.value], rax
  lea  rcx , [ tmp4480 ]
  lea  rdx , [ tmp4482 ]
  lea  r8 , [ tmp4479 ]
  call  __MOLD_VariantSub
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4479 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4479 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4480 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4482 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore tmp4479
  restore tmp4480
  restore tmp4481
  restore tmp4482
; -----------------------------------------------
; function __Stack_eatN$2
; -----------------------------------------------
__Stack_eatN$2:
  ; init frame
  ; ----------
  tmp4484 EQU rbp - 24 ; 16 bytes
  tmp4483 EQU rbp - 40 ; 16 bytes
  n EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ n ], xmm0
  mov [tmp4483 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4484 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4484 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4484 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4484 ]
  lea  rdx , [ n ]
  lea  r8 , [ tmp4483 ]
  call  __MOLD_VariantSub
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4483 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4483 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4484 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore n
  restore tmp4483
  restore tmp4484
; -----------------------------------------------
; function __Stack_setByAbsoluteIdx$3
; -----------------------------------------------
__Stack_setByAbsoluteIdx$3:
  ; init frame
  ; ----------
  tmp4486 EQU rbp - 12 ; 4 bytes
  tmp4485 EQU rbp - 28 ; 16 bytes
  val EQU rbp - 44 ; 16 bytes
  idx EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idx ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ val ], xmm0
  mov [tmp4485 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4485 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ idx + Variant_t.value]
  mov dword [ tmp4486 ], eax
  lea  rcx , [ tmp4485 ]
  lea  rdx , [ tmp4486 ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4485 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore idx
  restore val
  restore tmp4485
  restore tmp4486
; -----------------------------------------------
; function __Stack_getByAbsoluteIdx$2
; -----------------------------------------------
__Stack_getByAbsoluteIdx$2:
  ; init frame
  ; ----------
  tmp4489 EQU rbp - 12 ; 4 bytes
  tmp4488 EQU rbp - 28 ; 16 bytes
  tmp4487 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  idx EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idx ], xmm0
  mov [tmp4487 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4488 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4488 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4488 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ idx + Variant_t.value]
  mov dword [ tmp4489 ], eax
  lea  rcx , [ tmp4488 ]
  lea  rdx , [ tmp4489 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4487 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4488 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore idx
  restore rv
  restore tmp4487
  restore tmp4488
  restore tmp4489
; -----------------------------------------------
; function __Stack_peek$1
; -----------------------------------------------
__Stack_peek$1:
  ; init frame
  ; ----------
  tmp4499 EQU rbp - 12 ; 4 bytes
  tmp4498 EQU rbp - 28 ; 16 bytes
  tmp4497 EQU rbp - 44 ; 16 bytes
  tmp4494 EQU rbp - 48 ; 4 bytes
  tmp4493 EQU rbp - 64 ; 16 bytes
  tmp4492 EQU rbp - 68 ; 4 bytes
  tmp4491 EQU rbp - 84 ; 16 bytes
  tmp4490 EQU rbp - 100 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 116 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4490 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4491 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4493 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4497 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4498 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4491 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4491 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4492 ], 0
  mov [ tmp4493 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4492 ]
  mov [ tmp4493 + Variant_t.value], rax
  lea  rcx , [ tmp4493 ]
  lea  rdx , [ tmp4491 ]
  lea  r8 , [ tmp4490 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4490 + Variant_t.value]
  mov dword [ tmp4494 ], eax
  cmp dword [ tmp4494 ], 0
  jz l4495
  lea  rcx, [ tmp4493 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4493 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4497 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4497 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4492 ], 1
  mov [ tmp4498 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4492 ]
  mov [ tmp4498 + Variant_t.value], rax
  lea  rcx , [ tmp4497 ]
  lea  rdx , [ tmp4498 ]
  lea  r8 , [ tmp4491 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp4491 + Variant_t.value]
  mov dword [ tmp4492 ], eax
  lea  rcx , [ tmp4493 ]
  lea  rdx , [ tmp4492 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l4496
l4495:
  mov dword [ tmp4499 ], 0
  mov eax, dword [ tmp4499 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  lea  rcx, [ tmp4490 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal574 ]
  lea  rdi , [ tmp4490 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4496:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4490 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4491 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4493 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4497 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4498 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4490
  restore tmp4491
  restore tmp4492
  restore tmp4493
  restore tmp4494
  restore tmp4497
  restore tmp4498
  restore tmp4499
; -----------------------------------------------
; function __Stack_peekN$2
; -----------------------------------------------
__Stack_peekN$2:
  ; init frame
  ; ----------
  tmp4512 EQU rbp - 24 ; 16 bytes
  tmp4511 EQU rbp - 40 ; 16 bytes
  tmp4510 EQU rbp - 56 ; 16 bytes
  tmp4509 EQU rbp - 72 ; 16 bytes
  tmp4508 EQU rbp - 76 ; 4 bytes
  tmp4507 EQU rbp - 80 ; 4 bytes
  tmp4506 EQU rbp - 96 ; 16 bytes
  tmp4505 EQU rbp - 112 ; 16 bytes
  tmp4502 EQU rbp - 116 ; 4 bytes
  tmp4501 EQU rbp - 132 ; 16 bytes
  tmp4500 EQU rbp - 148 ; 16 bytes
  rv EQU rdi
  idx EQU rbp - 164 ; 16 bytes
  this EQU rbp - 180 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idx ], xmm0
  mov [tmp4500 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4501 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4505 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4506 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4509 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4510 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4511 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4512 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4501 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4501 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ idx ]
  lea  rdx , [ tmp4501 ]
  lea  r8 , [ tmp4500 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp4500 + Variant_t.value]
  mov dword [ tmp4502 ], eax
  cmp dword [ tmp4502 ], 0
  jz l4503
  lea  rcx, [ tmp4501 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4501 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4506 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4506 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4506 ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4505 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp4505 + Variant_t.value]
  mov dword [ tmp4507 ], eax
  lea  rcx , [ tmp4501 ]
  lea  rdx , [ tmp4507 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l4504
l4503:
  mov dword [ tmp4508 ], 0
  mov eax, dword [ tmp4508 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax
  lea  rcx, [ tmp4501 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ idx ]
  lea  rdi , [ tmp4501 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4506 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4506 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4505 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4506 ]
  lea  rdi , [ tmp4505 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4512 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4505 ]
  lea  rdx , [ __literal577 ]
  lea  r8 , [ tmp4512 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4511 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal576 ]
  lea  rdx , [ tmp4512 ]
  lea  r8 , [ tmp4511 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4510 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4501 ]
  lea  rdx , [ tmp4511 ]
  lea  r8 , [ tmp4510 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4509 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal575 ]
  lea  rdx , [ tmp4510 ]
  lea  r8 , [ tmp4509 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4500 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4509 ]
  lea  rdi , [ tmp4500 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4504:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4500 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4501 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4505 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4506 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore idx
  restore rv
  restore tmp4500
  restore tmp4501
  restore tmp4502
  restore tmp4505
  restore tmp4506
  restore tmp4507
  restore tmp4508
  restore tmp4509
  restore tmp4510
  restore tmp4511
  restore tmp4512
; -----------------------------------------------
; function __ASTTranslatorMIR1_constructor$2
; -----------------------------------------------
__ASTTranslatorMIR1_constructor$2:
  ; init frame
  ; ----------
  tmp4515 EQU rbp - 12 ; 4 bytes
  tmp4514 EQU rbp - 28 ; 16 bytes
  tmp4513 EQU rbp - 44 ; 16 bytes
  app EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp4513 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4514 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ app ]
  lea  rdi , [ tmp4513 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator_constructor$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp4513 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*153]
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4513 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4513 ]
  lea  rdx, [vtable_Stack]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp4514 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4513 ]
  lea  rdi , [ tmp4514 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Stack_constructor$1
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp4513 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4515 ], 0
  mov eax, dword [ tmp4515 ]
  mov [ tmp4513 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4513 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ tmp4513 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4513 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal580 ]
  lea  r8 , [ tmp4513 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4513 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal581 ]
  lea  r8 , [ tmp4513 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4513 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal582 ]
  lea  r8 , [ tmp4513 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4513 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4514 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore app
  restore tmp4513
  restore tmp4514
  restore tmp4515
; -----------------------------------------------
; function __ASTTranslatorMIR1__emitOneItem$2
; -----------------------------------------------
__ASTTranslatorMIR1__emitOneItem$2:
  ; init frame
  ; ----------
  tmp4517 EQU rbp - 24 ; 16 bytes
  tmp4516 EQU rbp - 40 ; 16 bytes
  item EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [tmp4516 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4517 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4517 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ tmp4517 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4516 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4517 ]
  lea  rdx , [ item ]
  lea  rdi, [ tmp4516 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*247]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4516 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4517 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore item
  restore tmp4516
  restore tmp4517
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitZeroArgsOpcode$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitZeroArgsOpcode$2:
  ; init frame
  ; ----------
  tmp4520 EQU rbp - 24 ; 16 bytes
  tmp4519 EQU rbp - 40 ; 16 bytes
  tmp4518 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  opcode EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4518 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4519 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4520 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4518 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4519 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4519 + Variant_t.value], 0
  lea  rcx, [ tmp4520 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4520 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4518 ]
  lea  rdx , [ tmp4519 ]
  lea  r8 , [ tmp4520 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4518 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  lea  rdi , [ tmp4518 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4519 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4520 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore opcode
  restore newQuad
  restore tmp4518
  restore tmp4519
  restore tmp4520
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
; -----------------------------------------------
__ASTTranslatorMIR1_emitTargetOnlyOpcode$3:
  ; init frame
  ; ----------
  tmp4523 EQU rbp - 24 ; 16 bytes
  tmp4522 EQU rbp - 40 ; 16 bytes
  tmp4521 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  opcode EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4521 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4522 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4523 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4521 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4521 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4522 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4522 + Variant_t.value], 0
  lea  rcx, [ tmp4523 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4523 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4521 ]
  lea  rdx , [ tmp4522 ]
  lea  r8 , [ tmp4523 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4522 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4522 + Variant_t.value], 1
  lea  rcx, [ tmp4523 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4523 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4521 ]
  lea  rdx , [ tmp4522 ]
  lea  r8 , [ tmp4523 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4521 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4521 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  lea  rdi , [ tmp4521 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4521 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4522 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4523 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore newQuad
  restore tmp4521
  restore tmp4522
  restore tmp4523
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitOneArgOpcode$4
; -----------------------------------------------
__ASTTranslatorMIR1_emitOneArgOpcode$4:
  ; init frame
  ; ----------
  tmp4526 EQU rbp - 24 ; 16 bytes
  tmp4525 EQU rbp - 40 ; 16 bytes
  tmp4524 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  x EQU rbp - 88 ; 16 bytes
  rv EQU rbp - 104 ; 16 bytes
  opcode EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ x ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4524 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4525 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4526 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4524 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4524 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4525 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4525 + Variant_t.value], 0
  lea  rcx, [ tmp4526 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4526 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4524 ]
  lea  rdx , [ tmp4525 ]
  lea  r8 , [ tmp4526 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4525 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4525 + Variant_t.value], 1
  lea  rcx, [ tmp4526 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4526 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4524 ]
  lea  rdx , [ tmp4525 ]
  lea  r8 , [ tmp4526 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4525 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4525 + Variant_t.value], 2
  lea  rcx, [ tmp4526 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4526 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4524 ]
  lea  rdx , [ tmp4525 ]
  lea  r8 , [ tmp4526 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4524 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4524 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  lea  rdi , [ tmp4524 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4524 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4525 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4526 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore x
  restore newQuad
  restore tmp4524
  restore tmp4525
  restore tmp4526
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitTwoArgsOpcode$5
; -----------------------------------------------
__ASTTranslatorMIR1_emitTwoArgsOpcode$5:
  ; init frame
  ; ----------
  tmp4529 EQU rbp - 24 ; 16 bytes
  tmp4528 EQU rbp - 40 ; 16 bytes
  tmp4527 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  y EQU rbp - 88 ; 16 bytes
  x EQU rbp - 104 ; 16 bytes
  rv EQU rbp - 120 ; 16 bytes
  opcode EQU rbp - 136 ; 16 bytes
  this EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ x ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ y ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4527 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4528 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4529 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4527 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4527 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4528 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4528 + Variant_t.value], 0
  lea  rcx, [ tmp4529 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4529 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4527 ]
  lea  rdx , [ tmp4528 ]
  lea  r8 , [ tmp4529 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4528 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4528 + Variant_t.value], 1
  lea  rcx, [ tmp4529 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4529 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4527 ]
  lea  rdx , [ tmp4528 ]
  lea  r8 , [ tmp4529 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4528 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4528 + Variant_t.value], 2
  lea  rcx, [ tmp4529 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4529 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4527 ]
  lea  rdx , [ tmp4528 ]
  lea  r8 , [ tmp4529 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4528 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4528 + Variant_t.value], 3
  lea  rcx, [ tmp4529 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4529 ]
  lea rdx, [ y ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4527 ]
  lea  rdx , [ tmp4528 ]
  lea  r8 , [ tmp4529 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4527 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4527 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  lea  rdi , [ tmp4527 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4527 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4528 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4529 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore x
  restore y
  restore newQuad
  restore tmp4527
  restore tmp4528
  restore tmp4529
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitComment$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitComment$2:
  ; init frame
  ; ----------
  tmp4530 EQU rbp - 24 ; 16 bytes
  comment EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ comment ], xmm0
  mov [tmp4530 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4530 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ comment ]
  lea  rdi , [ tmp4530 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4530 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore comment
  restore tmp4530
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitLabel$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitLabel$2:
  ; init frame
  ; ----------
  tmp4531 EQU rbp - 24 ; 16 bytes
  label EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ label ], xmm0
  mov [tmp4531 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4531 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal168 ]
  lea  r8 , [ label ]
  lea  rdi , [ tmp4531 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4531 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore label
  restore tmp4531
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitJmp$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitJmp$2:
  ; init frame
  ; ----------
  tmp4532 EQU rbp - 24 ; 16 bytes
  label EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ label ], xmm0
  mov [tmp4532 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4532 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ label ]
  lea  rdi , [ tmp4532 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4532 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore label
  restore tmp4532
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitJmpByTable$3
; -----------------------------------------------
__ASTTranslatorMIR1_emitJmpByTable$3:
  ; init frame
  ; ----------
  tmp4535 EQU rbp - 24 ; 16 bytes
  tmp4534 EQU rbp - 40 ; 16 bytes
  tmp4533 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  labelIdx EQU rbp - 88 ; 16 bytes
  jmpTable EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ jmpTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ labelIdx ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4533 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4534 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4535 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4533 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4534 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4534 + Variant_t.value], 0
  lea  rcx, [ tmp4535 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4535 ]
  lea rdx, [ __literal585 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4533 ]
  lea  rdx , [ tmp4534 ]
  lea  r8 , [ tmp4535 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4534 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4534 + Variant_t.value], 1
  lea  rcx, [ tmp4535 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4535 ]
  lea rdx, [ jmpTable ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4533 ]
  lea  rdx , [ tmp4534 ]
  lea  r8 , [ tmp4535 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4534 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4534 + Variant_t.value], 2
  lea  rcx, [ tmp4535 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4535 ]
  lea rdx, [ labelIdx ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4533 ]
  lea  rdx , [ tmp4534 ]
  lea  r8 , [ tmp4535 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4533 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  lea  rdi , [ tmp4533 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4534 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4535 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore jmpTable
  restore labelIdx
  restore newQuad
  restore tmp4533
  restore tmp4534
  restore tmp4535
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitMoveVariantOpcode$3
; -----------------------------------------------
__ASTTranslatorMIR1_emitMoveVariantOpcode$3:
  ; init frame
  ; ----------
  tmp4536 EQU rbp - 24 ; 16 bytes
  src EQU rbp - 40 ; 16 bytes
  dst EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  mov [tmp4536 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4536 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ dst ]
  lea  r9 , [ src ]
  lea  rdi , [ tmp4536 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4536 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore tmp4536
; -----------------------------------------------
; function __ASTTranslatorMIR1_popForRead$1
; -----------------------------------------------
__ASTTranslatorMIR1_popForRead$1:
  ; init frame
  ; ----------
  tmp4538 EQU rbp - 24 ; 16 bytes
  tmp4537 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4537 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4538 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4538 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp4538 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4537 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4538 ]
  lea  rdi, [ tmp4537 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp4537 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4537 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4538 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4537
  restore tmp4538
; -----------------------------------------------
; function __ASTTranslatorMIR1_popForWrite$1
; -----------------------------------------------
__ASTTranslatorMIR1_popForWrite$1:
  ; init frame
  ; ----------
  tmp4540 EQU rbp - 24 ; 16 bytes
  tmp4539 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4539 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4540 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4540 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp4540 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4539 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4540 ]
  lea  rdi, [ tmp4539 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea rcx, [ rv ]
  lea rdx, [ tmp4539 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4539 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4540 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4539
  restore tmp4540
; -----------------------------------------------
; function __ASTTranslatorMIR1_push$2
; -----------------------------------------------
__ASTTranslatorMIR1_push$2:
  ; init frame
  ; ----------
  tmp4542 EQU rbp - 24 ; 16 bytes
  tmp4541 EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [tmp4541 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4542 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4542 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp4542 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4541 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4542 ]
  lea  rdx , [ x ]
  lea  rdi, [ tmp4541 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4541 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4542 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore x
  restore tmp4541
  restore tmp4542
; -----------------------------------------------
; function __ASTTranslatorMIR1_popOneArgAndEmitOpcode$3
; -----------------------------------------------
__ASTTranslatorMIR1_popOneArgAndEmitOpcode$3:
  ; init frame
  ; ----------
  tmp4543 EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  opcode EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4543 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4543 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4543 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4543 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4543 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4543 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi
  lea  rcx, [ tmp4543 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ rv ]
  lea  r9 , [ x ]
  lea  rdi , [ tmp4543 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4543 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore x
  restore tmp4543
; -----------------------------------------------
; function __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
; -----------------------------------------------
__ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3:
  ; init frame
  ; ----------
  tmp4544 EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  opcode EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4544 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4544 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4544 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4544 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4544 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4544 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4544 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4544 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4544 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi
  lea  rcx, [ tmp4544 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ rv ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  lea  rdi , [ tmp4544 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4544 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore y
  restore x
  restore tmp4544
; -----------------------------------------------
; function __ASTTranslatorMIR1_popParametersBeforeCall$2
; -----------------------------------------------
__ASTTranslatorMIR1_popParametersBeforeCall$2:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 28 ; 4 bytes
  tmp4553 EQU rbp - 44 ; 16 bytes
  tmp4552 EQU rbp - 60 ; 16 bytes
  tmp4551 EQU rbp - 76 ; 16 bytes
  tmp4548 EQU rbp - 80 ; 4 bytes
  tmp4547 EQU rbp - 84 ; 4 bytes
  tmp4546 EQU rbp - 88 ; 4 bytes
  tmp4545 EQU rbp - 104 ; 16 bytes
  params EQU rdi
  paramsCnt EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4545 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4551 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4552 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4553 + Variant_t.type], VARIANT_UNDEFINED
  mov [item + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp4546 ], 1
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp4547 ], eax
  mov dword [ idx ], 0
l4549:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4547 ]
  jge l4550
  lea  rcx, [ tmp4551 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp4551 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp4553 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ idx ]
  mov [ tmp4553 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp4553 ]
  lea  r8 , [ tmp4552 ]
  call  __MOLD_VariantSub
  lea  rcx, [ tmp4545 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4551 ]
  lea  rdx , [ tmp4552 ]
  lea  rdi, [ tmp4545 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea rcx, [ item ]
  lea rdx, [ tmp4545 ]
  call __MOLD_VariantMove
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4546 ]
  mov dword [ idx ], eax
  jmp l4549
l4550:
  lea  rcx, [ tmp4552 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp4552 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4545 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4552 ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp4545 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*241]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4545 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4551 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4552 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4553 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore paramsCnt
  restore params
  restore tmp4545
  restore tmp4546
  restore tmp4547
  restore tmp4548
  restore tmp4551
  restore tmp4552
  restore tmp4553
  restore idx
  restore item
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitProcBegin$2
; -----------------------------------------------
__ASTTranslatorMIR1_emitProcBegin$2:
  ; init frame
  ; ----------
  tmp4554 EQU rbp - 24 ; 16 bytes
  procMeta EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ procMeta ], xmm0
  mov [tmp4554 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4554 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ procMeta ]
  lea  rdi , [ tmp4554 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi
  lea  rcx, [ tmp4554 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal588 ]
  lea  r8 , [ procMeta ]
  lea  rdi , [ tmp4554 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4554 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore procMeta
  restore tmp4554
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitProcEnd$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitProcEnd$1:
  ; init frame
  ; ----------
  tmp4555 EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4555 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4555 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal589 ]
  lea  rdi , [ tmp4555 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4555 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4555
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitRet$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitRet$1:
  ; init frame
  ; ----------
  tmp4556 EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4556 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4556 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal590 ]
  lea  rdi , [ tmp4556 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4556 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4556
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitMoveBackVariant$1
; -----------------------------------------------
__ASTTranslatorMIR1_emitMoveBackVariant$1:
  ; init frame
  ; ----------
  tmp4557 EQU rbp - 24 ; 16 bytes
  dst EQU rbp - 40 ; 16 bytes
  src EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4557 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4557 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4557 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea rcx, [ src ]
  lea rdx, [ tmp4557 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4557 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4557 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForWrite$1
  pop rdi
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea rcx, [ dst ]
  lea rdx, [ tmp4557 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4557 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ src ]
  lea  rdi , [ tmp4557 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$3
  pop rdi
  lea  rcx, [ tmp4557 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4557 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4557 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore src
  restore dst
  restore tmp4557
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArgsVector$1
; -----------------------------------------------
__ASTTranslatorMIR1__loadArgsVector$1:
  ; init frame
  ; ----------
  tmp4558 EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4558 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4558 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal253 ]
  lea  rdi , [ tmp4558 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4558 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4558
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArgsCount$1
; -----------------------------------------------
__ASTTranslatorMIR1__loadArgsCount$1:
  ; init frame
  ; ----------
  tmp4559 EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4559 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4559 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal254 ]
  lea  rdi , [ tmp4559 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4559 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4559
; -----------------------------------------------
; function __ASTTranslatorMIR1__neg$3
; -----------------------------------------------
__ASTTranslatorMIR1__neg$3:
  ; init frame
  ; ----------
  tmp4560 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ value ]
  mov [tmp4560 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4560 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal591 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4560 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4560 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp4560
; -----------------------------------------------
; function __ASTTranslatorMIR1__add$4
; -----------------------------------------------
__ASTTranslatorMIR1__add$4:
  ; init frame
  ; ----------
  tmp4561 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4561 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4561 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal592 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4561 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4561 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4561
; -----------------------------------------------
; function __ASTTranslatorMIR1__stringJoin$4
; -----------------------------------------------
__ASTTranslatorMIR1__stringJoin$4:
  ; init frame
  ; ----------
  tmp4562 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4562 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4562 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal593 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4562 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4562 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4562
; -----------------------------------------------
; function __ASTTranslatorMIR1__sub$4
; -----------------------------------------------
__ASTTranslatorMIR1__sub$4:
  ; init frame
  ; ----------
  tmp4563 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4563 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4563 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal594 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4563 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4563 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4563
; -----------------------------------------------
; function __ASTTranslatorMIR1__mul$4
; -----------------------------------------------
__ASTTranslatorMIR1__mul$4:
  ; init frame
  ; ----------
  tmp4564 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4564 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4564 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal595 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4564 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4564 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4564
; -----------------------------------------------
; function __ASTTranslatorMIR1__div$4
; -----------------------------------------------
__ASTTranslatorMIR1__div$4:
  ; init frame
  ; ----------
  tmp4565 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4565 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4565 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal596 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4565 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4565 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4565
; -----------------------------------------------
; function __ASTTranslatorMIR1__idiv$4
; -----------------------------------------------
__ASTTranslatorMIR1__idiv$4:
  ; init frame
  ; ----------
  tmp4566 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4566 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4566 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal597 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4566 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4566 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4566
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArray$2
; -----------------------------------------------
__ASTTranslatorMIR1__loadArray$2:
  ; init frame
  ; ----------
  tmp4567 EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  mov [tmp4567 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4567 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal598 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4567 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi
  lea  rcx, [ tmp4567 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4567 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4567 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4567
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadMap$2
; -----------------------------------------------
__ASTTranslatorMIR1__loadMap$2:
  ; init frame
  ; ----------
  tmp4568 EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  mov [tmp4568 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4568 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal599 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4568 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi
  lea  rcx, [ tmp4568 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4568 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4568 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4568
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadImm$3
; -----------------------------------------------
__ASTTranslatorMIR1__loadImm$3:
  ; init frame
  ; ----------
  tmp4589 EQU rbp - 24 ; 16 bytes
  newConst EQU rbp - 40 ; 16 bytes
  tmp4586 EQU rbp - 44 ; 4 bytes
  tmp4584 EQU rbp - 48 ; 4 bytes
  tmp4577 EQU rbp - 52 ; 4 bytes
  tmp4576 EQU rbp - 68 ; 16 bytes
  tmp4575 EQU rbp - 72 ; 4 bytes
  tmp4573 EQU rbp - 76 ; 4 bytes
  tmp4570 EQU rbp - 80 ; 4 bytes
  tmp4569 EQU rbp - 96 ; 16 bytes
  type EQU rbp - 112 ; 16 bytes
  value EQU rbp - 128 ; 16 bytes
  rv EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4569 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4576 + Variant_t.type], VARIANT_UNDEFINED
  mov [newConst + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4589 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ type ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4569 + Variant_t.value]
  mov dword [ tmp4570 ], eax
  cmp dword [ tmp4570 ], 0
  jz l4571
  mov dword [ tmp4573 ], 0
  mov dword [ tmp4575 ], -2147483648
  mov [ tmp4576 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4575 ]
  mov [ tmp4576 + Variant_t.value], rax
  lea  rcx , [ tmp4576 ]
  lea  rdx , [ value ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp4569 + Variant_t.value]
  mov dword [ tmp4577 ], eax
  cmp dword [ tmp4577 ], 0
  jz l4574
  mov dword [ tmp4575 ], 2147483647
  mov [ tmp4576 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4575 ]
  mov [ tmp4576 + Variant_t.value], rax
  lea  rcx , [ value ]
  lea  rdx , [ tmp4576 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp4569 + Variant_t.value]
  mov dword [ tmp4573 ], eax
l4574:
  cmp dword [ tmp4573 ], 0
  jz l4578
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal600 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  jmp l4579
l4578:
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal601 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
l4579:
  jmp l4572
l4571:
  lea  rcx , [ type ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4569 + Variant_t.value]
  mov dword [ tmp4573 ], eax
  cmp dword [ tmp4573 ], 0
  jz l4580
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal602 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  jmp l4581
l4580:
  lea  rcx , [ type ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4569 + Variant_t.value]
  mov dword [ tmp4577 ], eax
  cmp dword [ tmp4577 ], 0
  jz l4582
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal603 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  jmp l4583
l4582:
  mov dword [ tmp4584 ], 1
  lea  rcx , [ type ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4569 + Variant_t.value]
  mov dword [ tmp4586 ], eax
  cmp dword [ tmp4586 ], 0
  jnz l4585
  lea  rcx , [ type ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4569 + Variant_t.value]
  mov dword [ tmp4584 ], eax
l4585:
  cmp dword [ tmp4584 ], 0
  jz l4587
  lea  rcx, [ tmp4576 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4576 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4576 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4569 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*45]
  pop rdi
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy
  lea rcx, [ newConst ]
  lea rdx, [ tmp4569 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ newConst ]
  lea  rdi , [ tmp4569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$3
  pop rdi
  jmp l4588
l4587:
  lea  rcx, [ tmp4576 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ type ]
  lea  rdi , [ tmp4576 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4589 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal604 ]
  lea  rdx , [ tmp4576 ]
  lea  r8 , [ tmp4589 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4589 ]
  lea  rdi , [ tmp4569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4588:
l4583:
l4581:
l4572:
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4569 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4569 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4576 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore type
  restore tmp4569
  restore tmp4570
  restore tmp4573
  restore tmp4575
  restore tmp4576
  restore tmp4577
  restore tmp4584
  restore tmp4586
  restore newConst
  restore tmp4589
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadImmAsVariant$3
; -----------------------------------------------
__ASTTranslatorMIR1__loadImmAsVariant$3:
  ; init frame
  ; ----------
  tmp4610 EQU rbp - 24 ; 16 bytes
  newConst EQU rbp - 40 ; 16 bytes
  tmp4607 EQU rbp - 44 ; 4 bytes
  tmp4605 EQU rbp - 48 ; 4 bytes
  tmp4598 EQU rbp - 52 ; 4 bytes
  tmp4597 EQU rbp - 68 ; 16 bytes
  tmp4596 EQU rbp - 72 ; 4 bytes
  tmp4594 EQU rbp - 76 ; 4 bytes
  tmp4591 EQU rbp - 80 ; 4 bytes
  tmp4590 EQU rbp - 96 ; 16 bytes
  type EQU rbp - 112 ; 16 bytes
  value EQU rbp - 128 ; 16 bytes
  rv EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4590 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4597 + Variant_t.type], VARIANT_UNDEFINED
  mov [newConst + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4610 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ type ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4591 ], eax
  cmp dword [ tmp4591 ], 0
  jz l4592
  mov dword [ tmp4594 ], 0
  mov dword [ tmp4596 ], -2147483648
  mov [ tmp4597 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4596 ]
  mov [ tmp4597 + Variant_t.value], rax
  lea  rcx , [ tmp4597 ]
  lea  rdx , [ value ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4598 ], eax
  cmp dword [ tmp4598 ], 0
  jz l4595
  mov dword [ tmp4596 ], 2147483647
  mov [ tmp4597 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4596 ]
  mov [ tmp4597 + Variant_t.value], rax
  lea  rcx , [ value ]
  lea  rdx , [ tmp4597 ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4594 ], eax
l4595:
  cmp dword [ tmp4594 ], 0
  jz l4599
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal605 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  jmp l4600
l4599:
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal601 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
l4600:
  jmp l4593
l4592:
  lea  rcx , [ type ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4594 ], eax
  cmp dword [ tmp4594 ], 0
  jz l4601
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal606 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  jmp l4602
l4601:
  lea  rcx , [ type ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4598 ], eax
  cmp dword [ tmp4598 ], 0
  jz l4603
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal607 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  lea  rdi , [ tmp4590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  jmp l4604
l4603:
  mov dword [ tmp4605 ], 1
  lea  rcx , [ type ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4607 ], eax
  cmp dword [ tmp4607 ], 0
  jnz l4606
  lea  rcx , [ type ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4590 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4590 + Variant_t.value]
  mov dword [ tmp4605 ], eax
l4606:
  cmp dword [ tmp4605 ], 0
  jz l4608
  lea  rcx, [ tmp4597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4597 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4590 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*45]
  pop rdi
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy
  lea rcx, [ newConst ]
  lea rdx, [ tmp4590 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ newConst ]
  lea  rdi , [ tmp4590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$3
  pop rdi
  jmp l4609
l4608:
  lea  rcx, [ tmp4597 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ type ]
  lea  rdi , [ tmp4597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4610 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal604 ]
  lea  rdx , [ tmp4597 ]
  lea  r8 , [ tmp4610 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4610 ]
  lea  rdi , [ tmp4590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4609:
l4604:
l4602:
l4593:
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4590 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4590 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4597 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore type
  restore tmp4590
  restore tmp4591
  restore tmp4594
  restore tmp4596
  restore tmp4597
  restore tmp4598
  restore tmp4605
  restore tmp4607
  restore newConst
  restore tmp4610
; -----------------------------------------------
; function __ASTTranslatorMIR1__convert$5
; -----------------------------------------------
__ASTTranslatorMIR1__convert$5:
  ; init frame
  ; ----------
  opcode EQU rbp - 24 ; 16 bytes
  tmp4617 EQU rbp - 40 ; 16 bytes
  tmp4616 EQU rbp - 56 ; 16 bytes
  tmp4615 EQU rbp - 72 ; 16 bytes
  tmp4612 EQU rbp - 76 ; 4 bytes
  tmp4611 EQU rbp - 92 ; 16 bytes
  dstTypeMIR EQU rbp - 108 ; 16 bytes
  srcTypeMIR EQU rbp - 124 ; 16 bytes
  dstType EQU rbp - 140 ; 16 bytes
  srcType EQU rbp - 156 ; 16 bytes
  unusedSrc EQU rbp - 172 ; 16 bytes
  rv EQU rbp - 188 ; 16 bytes
  this EQU rbp - 204 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedSrc ]
  movdqu xmm0 , [ r9 ]
  movdqu [ srcType ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ dstType ], xmm0
  mov [srcTypeMIR + Variant_t.type], VARIANT_UNDEFINED
  mov [dstTypeMIR + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4611 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4615 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4616 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4617 + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ srcType ]
  lea  rdi , [ tmp4611 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ srcTypeMIR ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcTypeMIR ]
  lea rdx, [ tmp4611 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ dstType ]
  lea  rdi , [ tmp4611 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ dstTypeMIR ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstTypeMIR ]
  lea rdx, [ tmp4611 ]
  call __MOLD_VariantMove
  lea  rcx , [ srcTypeMIR ]
  lea  rdx , [ dstTypeMIR ]
  lea  r8 , [ tmp4611 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4611 + Variant_t.value]
  mov dword [ tmp4612 ], eax
  cmp dword [ tmp4612 ], 0
  jz l4613
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4611 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$3
  pop rdi
  jmp l4614
l4613:
  lea  rcx, [ tmp4617 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal441 ]
  lea  rdx , [ dstTypeMIR ]
  lea  r8 , [ tmp4617 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4616 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ srcTypeMIR ]
  lea  rdx , [ tmp4617 ]
  lea  r8 , [ tmp4616 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal440 ]
  lea  rdx , [ tmp4616 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4611 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$3
  pop rdi
l4614:

  ; clean frame
  ; -----------
  lea  rcx, [ srcTypeMIR ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dstTypeMIR ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedSrc
  restore srcType
  restore dstType
  restore srcTypeMIR
  restore dstTypeMIR
  restore tmp4611
  restore tmp4612
  restore tmp4615
  restore tmp4616
  restore tmp4617
  restore opcode
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareEQ$4
; -----------------------------------------------
__ASTTranslatorMIR1__compareEQ$4:
  ; init frame
  ; ----------
  tmp4618 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4618 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4618 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal608 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4618 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4618 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4618
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareNEQ$4
; -----------------------------------------------
__ASTTranslatorMIR1__compareNEQ$4:
  ; init frame
  ; ----------
  tmp4619 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4619 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4619 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal609 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4619 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4619 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4619
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareLT$4
; -----------------------------------------------
__ASTTranslatorMIR1__compareLT$4:
  ; init frame
  ; ----------
  tmp4620 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4620 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4620 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal610 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4620 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4620 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4620
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareLE$4
; -----------------------------------------------
__ASTTranslatorMIR1__compareLE$4:
  ; init frame
  ; ----------
  tmp4621 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4621 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4621 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal611 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4621 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4621 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4621
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareGT$4
; -----------------------------------------------
__ASTTranslatorMIR1__compareGT$4:
  ; init frame
  ; ----------
  tmp4622 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4622 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4622 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal612 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4622 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4622 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4622
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareGE$4
; -----------------------------------------------
__ASTTranslatorMIR1__compareGE$4:
  ; init frame
  ; ----------
  tmp4623 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4623 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4623 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal613 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4623 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4623 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4623
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadVariable$2
; -----------------------------------------------
__ASTTranslatorMIR1__loadVariable$2:
  ; init frame
  ; ----------
  tmp4624 EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4624 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4624 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4624 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4624 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp4624
; -----------------------------------------------
; function __ASTTranslatorMIR1__assign$3
; -----------------------------------------------
__ASTTranslatorMIR1__assign$3:
  ; init frame
  ; ----------
  tmp4626 EQU rbp - 24 ; 16 bytes
  tmp4625 EQU rbp - 40 ; 16 bytes
  symbolInfo EQU rbp - 56 ; 16 bytes
  unusedValue EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  ; skipped unused param [ unusedValue ]
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4625 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4626 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4626 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4626 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4625 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4626 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4625 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*20]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4625 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4626 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp4626 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4625 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4626 ]
  lea  rdi , [ tmp4625 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4625 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4626 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4626 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*256]
  pop rdi
  lea  rcx, [ tmp4625 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4626 ]
  lea  rdi , [ tmp4625 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4625 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4626 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore unusedValue
  restore symbolInfo
  restore tmp4625
  restore tmp4626
; -----------------------------------------------
; function __ASTTranslatorMIR1__call$5
; -----------------------------------------------
__ASTTranslatorMIR1__call$5:
  ; init frame
  ; ----------
  tmp4636 EQU rbp - 12 ; 4 bytes
  tmp4633 EQU rbp - 28 ; 16 bytes
  tmp4632 EQU rbp - 44 ; 16 bytes
  tmp4629 EQU rbp - 48 ; 4 bytes
  tmp4628 EQU rbp - 64 ; 16 bytes
  tmp4627 EQU rbp - 80 ; 16 bytes
  name EQU rbp - 96 ; 16 bytes
  params EQU rbp - 112 ; 16 bytes
  paramsCnt EQU rbp - 128 ; 16 bytes
  unusedParams EQU rbp - 144 ; 16 bytes
  proto EQU rbp - 160 ; 16 bytes
  rv EQU rbp - 176 ; 16 bytes
  this EQU rbp - 192 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  ; skipped unused param [ unusedParams ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ paramsCnt ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4627 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4628 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4632 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4633 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$2
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4627 ]
  call __MOLD_VariantMove
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4628 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ name ]
  lea  rdi , [ tmp4628 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4628 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4627 + Variant_t.value]
  mov dword [ tmp4629 ], eax
  cmp dword [ tmp4629 ], 0
  jz l4630
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
l4630:
l4631:
  lea  rcx, [ tmp4628 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4628 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4632 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4632 + Variant_t.value], 0
  lea  rcx, [ tmp4633 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4633 ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4628 ]
  lea  rdx , [ tmp4632 ]
  lea  r8 , [ tmp4633 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4632 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4632 + Variant_t.value], 1
  lea  rcx, [ tmp4633 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4633 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4628 ]
  lea  rdx , [ tmp4632 ]
  lea  r8 , [ tmp4633 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4632 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4632 + Variant_t.value], 2
  lea  rcx, [ tmp4633 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4633 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4628 ]
  lea  rdx , [ tmp4632 ]
  lea  r8 , [ tmp4633 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4632 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4632 + Variant_t.value], 3
  lea  rcx, [ tmp4633 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4633 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4628 ]
  lea  rdx , [ tmp4632 ]
  lea  r8 , [ tmp4633 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4628 ]
  lea  rdi , [ tmp4627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi
  lea  rcx, [ tmp4628 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal540 ]
  lea  r8 , [ tmp4628 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4629 ], 1
  mov eax, dword [ tmp4629 ]
  mov [ tmp4633 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4633 + Variant_t.value], rax
  lea  rcx , [ tmp4628 ]
  lea  rdx , [ tmp4633 ]
  lea  r8 , [ tmp4627 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4627 + Variant_t.value]
  mov dword [ tmp4629 ], eax
  cmp dword [ tmp4629 ], 0
  jz l4634
  mov dword [ tmp4636 ], 0
  lea  rcx, [ tmp4633 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ tmp4636 ]
  lea  r8 , [ tmp4633 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4633 ]
  lea  rdi , [ tmp4627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi
  jmp l4635
l4634:
  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi
l4635:

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4628 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4632 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4633 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore rv
  restore proto
  restore unusedParams
  restore paramsCnt
  restore params
  restore name
  restore tmp4627
  restore tmp4628
  restore tmp4629
  restore tmp4632
  restore tmp4633
  restore tmp4636
; -----------------------------------------------
; function __ASTTranslatorMIR1__syscall$5
; -----------------------------------------------
__ASTTranslatorMIR1__syscall$5:
  ; init frame
  ; ----------
  tmp4640 EQU rbp - 24 ; 16 bytes
  tmp4639 EQU rbp - 40 ; 16 bytes
  tmp4638 EQU rbp - 56 ; 16 bytes
  tmp4637 EQU rbp - 72 ; 16 bytes
  params EQU rbp - 88 ; 16 bytes
  paramsCnt EQU rbp - 104 ; 16 bytes
  unusedParams EQU rbp - 120 ; 16 bytes
  id EQU rbp - 136 ; 16 bytes
  rv EQU rbp - 152 ; 16 bytes
  this EQU rbp - 168 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  ; skipped unused param [ unusedParams ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ paramsCnt ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4637 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4638 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4639 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4640 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$2
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4637 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4638 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4639 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4639 + Variant_t.value], 0
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4640 ]
  lea rdx, [ __literal614 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4638 ]
  lea  rdx , [ tmp4639 ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4639 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4639 + Variant_t.value], 1
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4640 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4638 ]
  lea  rdx , [ tmp4639 ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4639 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4639 + Variant_t.value], 2
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4640 ]
  lea rdx, [ id ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4638 ]
  lea  rdx , [ tmp4639 ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4639 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4639 + Variant_t.value], 3
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4640 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4638 ]
  lea  rdx , [ tmp4639 ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp4637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4638 ]
  lea  rdi , [ tmp4637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi
  lea  rcx, [ tmp4637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4637 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4639 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore rv
  restore id
  restore unusedParams
  restore paramsCnt
  restore params
  restore tmp4637
  restore tmp4638
  restore tmp4639
  restore tmp4640
; -----------------------------------------------
; function __ASTTranslatorMIR1__callPrint$3
; -----------------------------------------------
__ASTTranslatorMIR1__callPrint$3:
  ; init frame
  ; ----------
  tmp4641 EQU rbp - 24 ; 16 bytes
  params EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  unusedParams EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedParams ]
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4641 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4641 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$2
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4641 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal615 ]
  lea  r8 , [ params ]
  lea  rdi , [ tmp4641 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal616 ]
  lea  rdi , [ tmp4641 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore unusedParams
  restore paramsCnt
  restore params
  restore tmp4641
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadFromIndex$4
; -----------------------------------------------
__ASTTranslatorMIR1__loadFromIndex$4:
  ; init frame
  ; ----------
  tmp4642 EQU rbp - 24 ; 16 bytes
  unusedIdx EQU rbp - 40 ; 16 bytes
  unusedBox EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  mov [tmp4642 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal617 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4642 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedIdx
  restore tmp4642
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadFromKey$4
; -----------------------------------------------
__ASTTranslatorMIR1__loadFromKey$4:
  ; init frame
  ; ----------
  tmp4643 EQU rbp - 24 ; 16 bytes
  unusedKey EQU rbp - 40 ; 16 bytes
  unusedBox EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  mov [tmp4643 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4643 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal618 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4643 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4643 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedKey
  restore tmp4643
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtIndex$4
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtIndex$4:
  ; init frame
  ; ----------
  tmp4644 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  idx EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedIdx EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [idx + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4644 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4644 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4644 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4644 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4644 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4644 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea rcx, [ idx ]
  lea rdx, [ tmp4644 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4644 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4644 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4644 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4644 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal619 ]
  lea  r8 , [ box ]
  lea  r9 , [ idx ]
  lea  rax , [ val ]
  push rax
  lea  rdi , [ tmp4644 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4644 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  rdi , [ tmp4644 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4644 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore val
  restore idx
  restore box
  restore tmp4644
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtKey$4
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtKey$4:
  ; init frame
  ; ----------
  tmp4645 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  key EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedKey EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4645 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4645 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4645 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4645 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4645 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4645 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4645 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4645 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4645 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4645 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4645 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal620 ]
  lea  r8 , [ box ]
  lea  r9 , [ key ]
  lea  rax , [ val ]
  push rax
  lea  rdi , [ tmp4645 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4645 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  rdi , [ tmp4645 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4645 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore val
  restore key
  restore box
  restore tmp4645
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtIndexAndDrop$4
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtIndexAndDrop$4:
  ; init frame
  ; ----------
  tmp4646 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  idx EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedIdx EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [idx + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4646 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4646 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4646 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4646 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4646 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4646 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea rcx, [ idx ]
  lea rdx, [ tmp4646 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4646 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4646 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4646 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4646 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal619 ]
  lea  r8 , [ box ]
  lea  r9 , [ idx ]
  lea  rax , [ val ]
  push rax
  lea  rdi , [ tmp4646 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4646 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore val
  restore idx
  restore box
  restore tmp4646
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtKeyAndDrop$4
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtKeyAndDrop$4:
  ; init frame
  ; ----------
  tmp4647 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  key EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedKey EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4647 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4647 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4647 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4647 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4647 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4647 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4647 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4647 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4647 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$1
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4647 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4647 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal620 ]
  lea  r8 , [ box ]
  lea  r9 , [ key ]
  lea  rax , [ val ]
  push rax
  lea  rdi , [ tmp4647 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4647 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore val
  restore key
  restore box
  restore tmp4647
; -----------------------------------------------
; function __ASTTranslatorMIR1__createObject$3
; -----------------------------------------------
__ASTTranslatorMIR1__createObject$3:
  ; init frame
  ; ----------
  tmp4650 EQU rbp - 24 ; 16 bytes
  tmp4649 EQU rbp - 28 ; 4 bytes
  tmp4648 EQU rbp - 44 ; 16 bytes
  classProto EQU rbp - 60 ; 16 bytes
  rv EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4648 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4650 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp4649 ], 0
  mov eax, dword [ tmp4649 ]
  mov [ tmp4650 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4650 + Variant_t.value], rax
  lea  rcx , [ classProto ]
  lea  rdx , [ tmp4650 ]
  lea  r8 , [ tmp4648 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4648 + Variant_t.value]
  mov dword [ tmp4649 ], eax
  cmp dword [ tmp4649 ], 0
  jz l4651
  lea  rcx, [ tmp4648 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal621 ]
  lea  rdi , [ tmp4648 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__error$2
  pop rdi
  jmp l4652
l4651:
  lea  rcx, [ tmp4650 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4650 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4648 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal622 ]
  lea  r8 , [ rv ]
  lea  r9 , [ tmp4650 ]
  lea  rdi , [ tmp4648 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  lea  rcx, [ tmp4648 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4648 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi
l4652:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4648 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4650 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore classProto
  restore tmp4648
  restore tmp4649
  restore tmp4650
; -----------------------------------------------
; function __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$4
; -----------------------------------------------
__ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$4:
  ; init frame
  ; ----------
  tmp4655 EQU rbp - 12 ; 4 bytes
  tmp4654 EQU rbp - 28 ; 16 bytes
  tmp4653 EQU rbp - 44 ; 16 bytes
  y EQU rbp - 60 ; 16 bytes
  x EQU rbp - 76 ; 16 bytes
  endLabel EQU rbp - 92 ; 16 bytes
  rightAst EQU rbp - 108 ; 16 bytes
  leftAst EQU rbp - 124 ; 16 bytes
  rv EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4653 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4654 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4654 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4654 ]
  lea  rdi, [ tmp4653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4653 ]
  call __MOLD_VariantMove
  mov dword [ tmp4655 ], 0
  mov eax, dword [ tmp4655 ]
  mov [ tmp4654 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4654 + Variant_t.value], rax
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4654 ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__loadImm$3
  pop rdi
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4653 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4654 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4654 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*256]
  pop rdi
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal623 ]
  lea  r8 , [ endLabel ]
  lea  r9 , [ tmp4654 ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4654 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4654 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4654 ]
  lea  rdx , [ rv ]
  lea  r8 , [ __literal185 ]
  lea  rdi, [ tmp4653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*49]
  pop rdi
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4653 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitMoveBackVariant$1
  pop rdi
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ y ]
  lea  rdi , [ tmp4653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4654 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabel
  restore x
  restore y
  restore tmp4653
  restore tmp4654
  restore tmp4655
; -----------------------------------------------
; function __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$4
; -----------------------------------------------
__ASTTranslatorMIR1__evaluateNodeLazyBoolOr$4:
  ; init frame
  ; ----------
  tmp4658 EQU rbp - 12 ; 4 bytes
  tmp4657 EQU rbp - 28 ; 16 bytes
  tmp4656 EQU rbp - 44 ; 16 bytes
  y EQU rbp - 60 ; 16 bytes
  x EQU rbp - 76 ; 16 bytes
  endLabel EQU rbp - 92 ; 16 bytes
  rightAst EQU rbp - 108 ; 16 bytes
  leftAst EQU rbp - 124 ; 16 bytes
  rv EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4656 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4657 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4657 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4657 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4657 ]
  lea  rdi, [ tmp4656 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4656 ]
  call __MOLD_VariantMove
  mov dword [ tmp4658 ], 1
  mov eax, dword [ tmp4658 ]
  mov [ tmp4657 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4657 + Variant_t.value], rax
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4657 ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__loadImm$3
  pop rdi
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4656 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4657 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4657 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*256]
  pop rdi
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal624 ]
  lea  r8 , [ endLabel ]
  lea  r9 , [ tmp4657 ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi
  lea  rcx, [ tmp4657 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4657 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4657 ]
  lea  rdx , [ rv ]
  lea  r8 , [ __literal185 ]
  lea  rdi, [ tmp4656 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*49]
  pop rdi
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4656 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitMoveBackVariant$1
  pop rdi
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ y ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__releaseTempVar$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4657 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabel
  restore x
  restore y
  restore tmp4656
  restore tmp4657
  restore tmp4658
; -----------------------------------------------
; function __ASTTranslatorMIR1__invokeMethod$5
; -----------------------------------------------
__ASTTranslatorMIR1__invokeMethod$5:
  ; init frame
  ; ----------
  tmp4665 EQU rbp - 24 ; 16 bytes
  tmp4662 EQU rbp - 28 ; 4 bytes
  tmp4661 EQU rbp - 44 ; 16 bytes
  tmp4660 EQU rbp - 60 ; 16 bytes
  tmp4659 EQU rbp - 76 ; 16 bytes
  params EQU rbp - 92 ; 16 bytes
  methodId EQU rbp - 108 ; 16 bytes
  paramsCnt EQU rbp - 124 ; 16 bytes
  unusedParams EQU rbp - 140 ; 16 bytes
  methodName EQU rbp - 156 ; 16 bytes
  rv EQU rbp - 172 ; 16 bytes
  this EQU rbp - 188 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ methodName ], xmm0
  ; skipped unused param [ unusedParams ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ paramsCnt ], xmm0
  mov [methodId + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4659 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4660 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4661 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4665 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4661 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4661 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4661 ]
  lea  rdx , [ __literal387 ]
  lea  r8 , [ tmp4660 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4660 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodId ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodId ]
  lea  rdi , [ tmp4660 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4660 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4659 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4659 + Variant_t.value]
  mov dword [ tmp4662 ], eax
  cmp dword [ tmp4662 ], 0
  jz l4663
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4660 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4659 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4660 ]
  lea  rdx , [ methodName ]
  lea  rdi, [ tmp4659 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*146]
  pop rdi
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea rcx, [ methodId ]
  lea rdx, [ tmp4659 ]
  call __MOLD_VariantMove
l4663:
l4664:
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal581 ]
  lea  r8 , [ tmp4665 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4661 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4665 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4661 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4661 ]
  lea  rdi , [ tmp4660 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4660 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4659 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4659 + Variant_t.value]
  mov dword [ tmp4662 ], eax
  cmp dword [ tmp4662 ], 0
  jz l4666
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal580 ]
  lea  r8 , [ tmp4660 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4659 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4660 ]
  lea  rdx , [ methodName ]
  lea  rdi , [ tmp4659 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
l4666:
l4667:
  lea  rcx, [ tmp4659 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal581 ]
  lea  r8 , [ tmp4659 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4662 ], 1
  mov eax, dword [ tmp4662 ]
  mov [ tmp4660 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4660 + Variant_t.value], rax
  lea  rcx , [ tmp4659 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4660 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4660 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$2
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4660 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4659 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4659 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4661 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4661 + Variant_t.value], 0
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4665 ]
  lea rdx, [ __literal132 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4659 ]
  lea  rdx , [ tmp4661 ]
  lea  r8 , [ tmp4665 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4661 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4661 + Variant_t.value], 1
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4665 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4659 ]
  lea  rdx , [ tmp4661 ]
  lea  r8 , [ tmp4665 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4661 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4661 + Variant_t.value], 2
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4665 ]
  lea rdx, [ methodId ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4659 ]
  lea  rdx , [ tmp4661 ]
  lea  r8 , [ tmp4665 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4661 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4661 + Variant_t.value], 3
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4665 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4659 ]
  lea  rdx , [ tmp4661 ]
  lea  r8 , [ tmp4665 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4659 ]
  lea  rdi , [ tmp4660 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4660 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_push$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4659 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4661 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore rv
  restore methodName
  restore unusedParams
  restore paramsCnt
  restore methodId
  restore params
  restore tmp4659
  restore tmp4660
  restore tmp4661
  restore tmp4662
  restore tmp4665
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeFor$6
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeFor$6:
  ; init frame
  ; ----------
  oneChild EQU rbp - 24 ; 16 bytes
  tmp4671 EQU rbp - 40 ; 16 bytes
  tmp4668 EQU rbp - 56 ; 16 bytes
  __cse36 EQU rbp - 72 ; 16 bytes
  labelForEnd EQU rbp - 88 ; 16 bytes
  labelForBegin EQU rbp - 104 ; 16 bytes
  bodyAst EQU rbp - 120 ; 16 bytes
  idxStep EQU rbp - 136 ; 16 bytes
  idxEnd EQU rbp - 152 ; 16 bytes
  idxStart EQU rbp - 168 ; 16 bytes
  iterName EQU rbp - 184 ; 16 bytes
  this EQU rbp - 200 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iterName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ idxStart ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ idxEnd ], xmm0
  mov    rax, [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [rax]
  movdqu [ idxStep ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ bodyAst ], xmm0
  mov [labelForBegin + Variant_t.type], VARIANT_UNDEFINED
  mov [labelForEnd + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse36 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4668 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4671 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ __cse36 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse36 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse36 ]
  lea  rdi, [ tmp4668 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForBegin ]
  lea rdx, [ tmp4668 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse36 ]
  lea  rdi, [ tmp4668 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForEnd ]
  lea rdx, [ tmp4668 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ iterName ]
  lea  r8 , [ idxStart ]
  lea  rdi , [ tmp4668 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$3
  pop rdi
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ labelForBegin ]
  lea  rdi , [ tmp4668 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal625 ]
  lea  r8 , [ labelForEnd ]
  lea  r9 , [ iterName ]
  lea  rax , [ idxEnd ]
  push rax
  lea  rdi , [ tmp4668 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyAst ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4668 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values oneChild
; 
  jmp l4670
l4669:
  lea  rcx, [ tmp4671 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp4671 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  ret
l4670:
  lea  rcx , [ tmp4668 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4669 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneChild
; -----------------------------
; 
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal592 ]
  lea  r8 , [ iterName ]
  lea  r9 , [ iterName ]
  lea  rax , [ idxStep ]
  push rax
  lea  rdi , [ tmp4668 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ labelForBegin ]
  lea  rdi , [ tmp4668 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ labelForEnd ]
  lea  rdi , [ tmp4668 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse36 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4668 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4671 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore iterName
  restore idxStart
  restore idxEnd
  restore idxStep
  restore bodyAst
  restore labelForBegin
  restore labelForEnd
  restore __cse36
  restore tmp4668
  restore tmp4671
  restore oneChild
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeForEach$5
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeForEach$5:
  ; init frame
  ; ----------
  tmp4684 EQU rbp - 24 ; 16 bytes
  tmp4679 EQU rbp - 28 ; 4 bytes
  tmp4678 EQU rbp - 32 ; 4 bytes
  tmp4677 EQU rbp - 48 ; 16 bytes
  tmp4676 EQU rbp - 64 ; 16 bytes
  tmp4675 EQU rbp - 80 ; 16 bytes
  tmp4674 EQU rbp - 96 ; 16 bytes
  tmp4673 EQU rbp - 112 ; 16 bytes
  tmp4672 EQU rbp - 128 ; 16 bytes
  __cse37 EQU rbp - 144 ; 16 bytes
  rv EQU rbp - 160 ; 16 bytes
  x EQU rbp - 176 ; 16 bytes
  params EQU rbp - 192 ; 16 bytes
  labelForEnd EQU rbp - 208 ; 16 bytes
  labelForBegin EQU rbp - 224 ; 16 bytes
  bodyAst EQU rbp - 240 ; 16 bytes
  box EQU rbp - 256 ; 16 bytes
  iteratorValue EQU rbp - 272 ; 16 bytes
  iteratorKey EQU rbp - 288 ; 16 bytes
  this EQU rbp - 304 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 336

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iteratorKey ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ iteratorValue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ box ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ bodyAst ], xmm0
  mov [labelForBegin + Variant_t.type], VARIANT_UNDEFINED
  mov [labelForEnd + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [rv + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse37 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4672 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4673 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4674 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4675 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4676 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4677 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4684 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse37 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse37 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse37 ]
  lea  rdi, [ tmp4672 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForBegin ]
  lea rdx, [ tmp4672 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse37 ]
  lea  rdi, [ tmp4672 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForEnd ]
  lea rdx, [ tmp4672 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal626 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4675 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ iteratorKey ]
  lea  rdi , [ tmp4675 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ iteratorValue ]
  lea  rdi , [ tmp4677 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4676 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal628 ]
  lea  rdx , [ tmp4677 ]
  lea  r8 , [ tmp4676 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4674 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4675 ]
  lea  rdx , [ tmp4676 ]
  lea  r8 , [ tmp4674 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4673 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal627 ]
  lea  rdx , [ tmp4674 ]
  lea  r8 , [ tmp4673 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4673 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ labelForEnd ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ labelForBegin ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal629 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ labelForEnd ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  mov dword [ tmp4678 ], -1
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4678 ]
  mov [ tmp4675 + Variant_t.value], rax
  lea  rcx , [ iteratorKey ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4672 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4672 + Variant_t.value]
  mov dword [ tmp4679 ], eax
  cmp dword [ tmp4679 ], 0
  jz l4680
  lea rcx, [ iteratorKey ]
  lea rdx, [ __literal630 ]
  call __MOLD_VariantMove
l4680:
l4681:
  mov dword [ tmp4678 ], -1
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4678 ]
  mov [ tmp4675 + Variant_t.value], rax
  lea  rcx , [ iteratorValue ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4672 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4672 + Variant_t.value]
  mov dword [ tmp4679 ], eax
  cmp dword [ tmp4679 ], 0
  jz l4682
  lea rcx, [ iteratorValue ]
  lea rdx, [ __literal630 ]
  call __MOLD_VariantMove
l4682:
l4683:
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4672 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 0
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4677 ]
  lea rdx, [ box ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4672 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4677 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 1
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4677 ]
  lea rdx, [ iteratorKey ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4672 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4677 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 2
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4677 ]
  lea rdx, [ iteratorValue ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4672 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4677 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 3
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4677 ]
  lea rdx, [ labelForBegin ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4672 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4677 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4672 ]
  call __MOLD_VariantMove
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp4678 ], 0
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ tmp4678 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4677 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 0
  lea  rcx, [ tmp4684 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4684 ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4677 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4684 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 1
  lea  rcx, [ tmp4684 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4684 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4677 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4684 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 2
  lea  rcx, [ tmp4684 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4684 ]
  lea rdx, [ __literal631 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4677 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4684 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4675 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4675 + Variant_t.value], 3
  lea  rcx, [ tmp4684 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4684 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4677 ]
  lea  rdx , [ tmp4675 ]
  lea  r8 , [ tmp4684 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4677 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1__emitOneItem$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ iteratorKey ]
  lea  rdi , [ tmp4677 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4684 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ iteratorValue ]
  lea  rdi , [ tmp4684 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4676 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal628 ]
  lea  rdx , [ tmp4684 ]
  lea  r8 , [ tmp4676 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4674 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4677 ]
  lea  rdx , [ tmp4676 ]
  lea  r8 , [ tmp4674 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4673 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal632 ]
  lea  rdx , [ tmp4674 ]
  lea  r8 , [ tmp4673 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4673 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal626 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal8 ]
  lea  rdi , [ tmp4672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse37 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4672 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4675 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4677 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4684 ]
  call __MOLD_VariantDestroy

  add  rsp, 336
  pop  rbp
  ret

  restore this
  restore iteratorKey
  restore iteratorValue
  restore box
  restore bodyAst
  restore labelForBegin
  restore labelForEnd
  restore params
  restore x
  restore rv
  restore __cse37
  restore tmp4672
  restore tmp4673
  restore tmp4674
  restore tmp4675
  restore tmp4676
  restore tmp4677
  restore tmp4678
  restore tmp4679
  restore tmp4684
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeWhile$3
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeWhile$3:
  ; init frame
  ; ----------
  tmp4686 EQU rbp - 24 ; 16 bytes
  tmp4685 EQU rbp - 40 ; 16 bytes
  __cse38 EQU rbp - 56 ; 16 bytes
  endLabel EQU rbp - 72 ; 16 bytes
  loopLabel EQU rbp - 88 ; 16 bytes
  bodyAst EQU rbp - 104 ; 16 bytes
  condAst EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ condAst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ bodyAst ], xmm0
  mov [loopLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse38 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4685 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4686 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse38 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse38 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse38 ]
  lea  rdi, [ tmp4685 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ loopLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabel ]
  lea rdx, [ tmp4685 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse38 ]
  lea  rdi, [ tmp4685 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4685 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ loopLabel ]
  lea  rdi , [ tmp4685 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ condAst ]
  lea  rdi , [ tmp4685 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ tmp4686 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4686 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*256]
  pop rdi
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal623 ]
  lea  r8 , [ endLabel ]
  lea  r9 , [ tmp4686 ]
  lea  rdi , [ tmp4685 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  lea  rdi , [ tmp4685 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ loopLabel ]
  lea  rdi , [ tmp4685 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitJmp$2
  pop rdi
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  lea  rdi , [ tmp4685 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ loopLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse38 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4685 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4686 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore condAst
  restore bodyAst
  restore loopLabel
  restore endLabel
  restore __cse38
  restore tmp4685
  restore tmp4686
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeIf$4
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeIf$4:
  ; init frame
  ; ----------
  tmp4689 EQU rbp - 12 ; 4 bytes
  tmp4688 EQU rbp - 28 ; 16 bytes
  tmp4687 EQU rbp - 44 ; 16 bytes
  __cse39 EQU rbp - 60 ; 16 bytes
  endLabel EQU rbp - 76 ; 16 bytes
  falseLabel EQU rbp - 92 ; 16 bytes
  codeIfFalse EQU rbp - 108 ; 16 bytes
  codeIfTrue EQU rbp - 124 ; 16 bytes
  cond EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ cond ]
  movdqu xmm0 , [ r8 ]
  movdqu [ codeIfTrue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ codeIfFalse ], xmm0
  mov [falseLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse39 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4687 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4688 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse39 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse39 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse39 ]
  lea  rdi, [ tmp4687 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ falseLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ falseLabel ]
  lea rdx, [ tmp4687 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse39 ]
  lea  rdi, [ tmp4687 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4687 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4688 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4688 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*256]
  pop rdi
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal623 ]
  lea  r8 , [ falseLabel ]
  lea  r9 , [ tmp4688 ]
  lea  rdi , [ tmp4687 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitOneArgOpcode$4
  pop rdi
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ codeIfTrue ]
  lea  rdi , [ tmp4687 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4688 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ codeIfFalse ]
  lea  rdi , [ tmp4688 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4688 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4687 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4687 + Variant_t.value]
  mov dword [ tmp4689 ], eax
  cmp dword [ tmp4689 ], 0
  jz l4690
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  lea  rdi , [ tmp4687 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitJmp$2
  pop rdi
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ falseLabel ]
  lea  rdi , [ tmp4687 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ codeIfFalse ]
  lea  rdi , [ tmp4687 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  jmp l4691
l4690:
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ falseLabel ]
  lea  rdi , [ tmp4687 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
l4691:
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  lea  rdi , [ tmp4687 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ falseLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse39 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4687 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4688 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore falseLabel
  restore endLabel
  restore __cse39
  restore tmp4687
  restore tmp4688
  restore tmp4689
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeSwitch$2
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeSwitch$2:
  ; init frame
  ; ----------
  oneValue EQU rbp - 24 ; 16 bytes
  caseLabel EQU rbp - 40 ; 16 bytes
  arrayOfValues EQU rbp - 56 ; 16 bytes
  idx EQU rbp - 60 ; 4 bytes
  tmp4708 EQU rbp - 64 ; 4 bytes
  tmp4703 EQU rbp - 68 ; 4 bytes
  tmp4702 EQU rbp - 84 ; 16 bytes
  tmp4699 EQU rbp - 88 ; 4 bytes
  tmp4696 EQU rbp - 92 ; 4 bytes
  tmp4695 EQU rbp - 96 ; 4 bytes
  tmp4694 EQU rbp - 100 ; 4 bytes
  tmp4693 EQU rbp - 116 ; 16 bytes
  tmp4692 EQU rbp - 132 ; 16 bytes
  __cse40 EQU rbp - 148 ; 16 bytes
  caseDefaultIdx EQU rbp - 152 ; 4 bytes
  symbolInfo EQU rbp - 168 ; 16 bytes
  jmpTable EQU rbp - 184 ; 16 bytes
  defaultLabel EQU rbp - 200 ; 16 bytes
  doneLabel EQU rbp - 216 ; 16 bytes
  varName EQU rbp - 232 ; 16 bytes
  childrenCnt EQU rbp - 248 ; 16 bytes
  children EQU rbp - 264 ; 16 bytes
  node EQU rbp - 280 ; 16 bytes
  this EQU rbp - 296 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 336

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [varName + Variant_t.type], VARIANT_UNDEFINED
  mov [doneLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [defaultLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [jmpTable + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse40 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4692 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4693 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4702 + Variant_t.type], VARIANT_UNDEFINED
  mov [arrayOfValues + Variant_t.type], VARIANT_UNDEFINED
  mov [caseLabel + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4694 ], 0
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4694 ]
  lea  r8 , [ tmp4693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4693 ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$2
  pop rdi
  lea  rcx, [ varName ]
  call __MOLD_VariantDestroy
  lea rcx, [ varName ]
  lea rdx, [ tmp4692 ]
  call __MOLD_VariantMove
  lea  rcx, [ __cse40 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ __cse40 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse40 ]
  lea  rdi, [ tmp4692 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ doneLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ doneLabel ]
  lea rdx, [ tmp4692 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse40 ]
  lea  rdi, [ tmp4692 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ defaultLabel ]
  lea rdx, [ tmp4692 ]
  call __MOLD_VariantMove
  lea  rcx, [ jmpTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ jmpTable ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __cse40 ]
  lea  rdx , [ jmpTable ]
  lea  rdi, [ tmp4692 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*52]
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4692 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal633 ]
  lea  r8 , [ defaultLabel ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal363 ]
  lea  r8 , [ tmp4693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal634 ]
  lea  r8 , [ defaultLabel ]
  lea  r9 , [ varName ]
  lea  rax , [ tmp4693 ]
  push rax
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal364 ]
  lea  r8 , [ tmp4693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ defaultLabel ]
  lea  r9 , [ varName ]
  lea  rax , [ tmp4693 ]
  push rax
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$5
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4693 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4693 ]
  lea  r8 , [ varName ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitJmpByTable$3
  pop rdi
  mov dword [ caseDefaultIdx ], -1
  mov dword [ tmp4694 ], 1
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4695 ], eax
  mov dword [ idx ], 1
l4697:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4695 ]
  jge l4698
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4693 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4693 ]
  lea  rdx , [ __literal362 ]
  lea  r8 , [ arrayOfValues ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arrayOfValues ]
  lea  rdi , [ tmp4693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4693 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4692 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4692 + Variant_t.value]
  mov dword [ tmp4699 ], eax
  cmp dword [ tmp4699 ], 0
  jz l4700
  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4702 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4702 ]
  lea  rdi , [ tmp4693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp4703 ], 1
  mov eax, dword [ tmp4703 ]
  mov [ tmp4702 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4702 + Variant_t.value], rax
  lea  rcx , [ tmp4693 ]
  lea  rdx , [ tmp4702 ]
  lea  r8 , [ tmp4692 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4692 + Variant_t.value]
  mov dword [ tmp4703 ], eax
  cmp dword [ tmp4703 ], 0
  jz l4704
  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseLabel ]
  lea rdx, [ doneLabel ]
  call __MOLD_VariantMove
  jmp l4705
l4704:
  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4702 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4702 ]
  lea  rdi, [ tmp4692 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*51]
  pop rdi
  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseLabel ]
  lea rdx, [ tmp4692 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ caseLabel ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4702 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4702 ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ doneLabel ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitJmp$2
  pop rdi
l4705:
; 
; -----------------------------
; BEGIN: for keys -1 values oneValue
; 
  jmp l4707
l4706:
  mov eax, dword [ oneValue + Variant_t.value]
  mov dword [ tmp4708 ], eax
  lea  rcx , [ jmpTable ]
  lea  rdx , [ tmp4708 ]
  lea  r8 , [ caseLabel ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l4707:
  lea  rcx , [ arrayOfValues ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneValue ]
  lea  r9 , [ l4706 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneValue
; -----------------------------
; 
  jmp l4701
l4700:
  mov eax, dword [ idx ]
  mov dword [ caseDefaultIdx ], eax
l4701:
  mov eax, dword [ idx ]
  add eax, dword [ tmp4694 ]
  mov dword [ idx ], eax
  jmp l4697
l4698:
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ defaultLabel ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi
  mov dword [ tmp4696 ], -1
  mov eax, dword [ caseDefaultIdx ]
  cmp eax, dword [ tmp4696 ]
  jz l4709
  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ caseDefaultIdx ]
  lea  r8 , [ tmp4702 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4702 ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
l4709:
l4710:
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ doneLabel ]
  lea  rdi , [ tmp4692 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitLabel$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ varName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ doneLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ jmpTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse40 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4692 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4693 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneValue

  add  rsp, 336
  pop  rbp
  ret

  restore this
  restore node
  restore children
  restore childrenCnt
  restore varName
  restore doneLabel
  restore defaultLabel
  restore jmpTable
  restore symbolInfo
  restore caseDefaultIdx
  restore __cse40
  restore tmp4692
  restore tmp4693
  restore tmp4694
  restore tmp4695
  restore tmp4696
  restore tmp4699
  restore tmp4702
  restore tmp4703
  restore tmp4708
  restore idx
  restore arrayOfValues
  restore caseLabel
  restore oneValue
; -----------------------------------------------
; function __ASTTranslatorMIR1__declareFunction$3
; -----------------------------------------------
__ASTTranslatorMIR1__declareFunction$3:
  ; init frame
  ; ----------
  tmp4714 EQU rbp - 12 ; 4 bytes
  tmp4713 EQU rbp - 28 ; 16 bytes
  tmp4712 EQU rbp - 44 ; 16 bytes
  tmp4711 EQU rbp - 60 ; 16 bytes
  funcProto EQU rbp - 76 ; 16 bytes
  funcName EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ funcName ]
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [tmp4711 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4712 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4713 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4712 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4712 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4713 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ tmp4713 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4712 ]
  lea  rdx , [ tmp4713 ]
  lea  r8 , [ tmp4711 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4711 + Variant_t.value]
  mov dword [ tmp4714 ], eax
  cmp dword [ tmp4714 ], 0
  jz l4715
  lea  rcx, [ tmp4713 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4713 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4712 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4712 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4711 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4713 ]
  lea  rdx , [ tmp4712 ]
  lea  rdi, [ tmp4711 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*146]
  pop rdi
l4715:
l4716:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4711 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4712 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4713 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore tmp4711
  restore tmp4712
  restore tmp4713
  restore tmp4714
; -----------------------------------------------
; function __ASTTranslatorMIR1__declareClass$3
; -----------------------------------------------
__ASTTranslatorMIR1__declareClass$3:
  ; init frame
  ; ----------
  tmp4718 EQU rbp - 24 ; 16 bytes
  tmp4717 EQU rbp - 40 ; 16 bytes
  classProto EQU rbp - 56 ; 16 bytes
  className EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ className ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4717 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4718 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4718 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4718 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4717 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4718 ]
  lea  rdx , [ classProto ]
  lea  rdi, [ tmp4717 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*147]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4717 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4718 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore className
  restore classProto
  restore tmp4717
  restore tmp4718
; -----------------------------------------------
; function __ASTTranslatorMIR1__emitFunctionBody$3
; -----------------------------------------------
__ASTTranslatorMIR1__emitFunctionBody$3:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp4726 EQU rbp - 40 ; 16 bytes
  tmp4725 EQU rbp - 56 ; 16 bytes
  tmp4724 EQU rbp - 72 ; 16 bytes
  tmp4723 EQU rbp - 88 ; 16 bytes
  tmp4722 EQU rbp - 92 ; 4 bytes
  tmp4721 EQU rbp - 108 ; 16 bytes
  tmp4720 EQU rbp - 112 ; 4 bytes
  tmp4719 EQU rbp - 128 ; 16 bytes
  oldSymbolTable EQU rbp - 144 ; 16 bytes
  rvName EQU rbp - 160 ; 16 bytes
  codeAst EQU rbp - 176 ; 16 bytes
  children EQU rbp - 192 ; 16 bytes
  params EQU rbp - 208 ; 16 bytes
  funcProto EQU rbp - 224 ; 16 bytes
  funcName EQU rbp - 240 ; 16 bytes
  this EQU rbp - 256 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [codeAst + Variant_t.type], VARIANT_UNDEFINED
  mov [rvName + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4719 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4721 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4723 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4724 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4725 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4726 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4720 ], 0
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4720 ]
  lea  r8 , [ codeAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal582 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4721 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4721 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4722 ], 1
  mov eax, dword [ tmp4722 ]
  mov [ tmp4723 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4723 + Variant_t.value], rax
  lea  rcx , [ tmp4719 ]
  lea  rdx , [ tmp4721 ]
  lea  r8 , [ tmp4723 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal569 ]
  lea  rdi , [ tmp4723 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4724 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal427 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4724 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4724 ]
  lea  rdi , [ tmp4723 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal569 ]
  lea  rdi , [ tmp4723 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4723 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4723 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4721 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4721 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4719 ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4721 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4726 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4726 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4725 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4726 ]
  lea  rdi, [ tmp4725 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*13]
  pop rdi
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4719 ]
  lea rdx, [ tmp4725 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4721 ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4721 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4719 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4721 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4719 ]
  lea rdx, [ rvName ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4721 ]
  lea  rdx , [ __literal15 ]
  lea  r8 , [ tmp4719 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4721 ]
  lea  rdi , [ tmp4723 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitProcBegin$2
  pop rdi
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal23 ]
  lea  r8 , [ tmp4723 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l4728
l4727:
  lea  rcx, [ tmp4721 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp4721 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  ret
l4728:
  lea  rcx , [ tmp4723 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4727 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4723 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitRet$1
  pop rdi
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4723 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitProcEnd$1
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4719 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4721 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4725 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4726 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 288
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore params
  restore children
  restore codeAst
  restore rvName
  restore oldSymbolTable
  restore tmp4719
  restore tmp4720
  restore tmp4721
  restore tmp4722
  restore tmp4723
  restore tmp4724
  restore tmp4725
  restore tmp4726
  restore item
; -----------------------------------------------
; function __ASTTranslatorMIR1__dropRetVal$1
; -----------------------------------------------
__ASTTranslatorMIR1__dropRetVal$1:
  ; init frame
  ; ----------
  tmp4730 EQU rbp - 24 ; 16 bytes
  tmp4729 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4729 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4730 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4730 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp4730 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4729 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4730 ]
  lea  rdi, [ tmp4729 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*240]
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4729 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4730 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4729
  restore tmp4730
; -----------------------------------------------
; function __ASTTranslatorMIR1_run$2
; -----------------------------------------------
__ASTTranslatorMIR1_run$2:
  ; init frame
  ; ----------
  methodName EQU rbp - 24 ; 16 bytes
  tmp4741 EQU rbp - 40 ; 16 bytes
  tmp4740 EQU rbp - 56 ; 16 bytes
  tmp4737 EQU rbp - 60 ; 4 bytes
  tmp4736 EQU rbp - 76 ; 16 bytes
  tmp4735 EQU rbp - 92 ; 16 bytes
  tmp4732 EQU rbp - 108 ; 16 bytes
  tmp4731 EQU rbp - 124 ; 16 bytes
  ast EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [tmp4731 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4732 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4735 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4736 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4740 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4741 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4731 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4731 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4731 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__emitGlobals$1
  pop rdi
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal569 ]
  lea  rdi , [ tmp4731 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal636 ]
  lea  rdi , [ tmp4731 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal569 ]
  lea  rdi , [ tmp4731 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_emitComment$2
  pop rdi
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  lea  rdi , [ tmp4731 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__executeNode$2
  pop rdi
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp4731 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4732 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4732 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4731 ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4732 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4732 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal580 ]
  lea  r8 , [ tmp4732 ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values methodName
; 
  jmp l4734
l4733:
  lea  rcx, [ tmp4736 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal582 ]
  lea  r8 , [ tmp4736 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4736 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4735 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4737 ], 1
  mov eax, dword [ tmp4737 ]
  mov [ tmp4736 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4736 + Variant_t.value], rax
  lea  rcx , [ tmp4735 ]
  lea  rdx , [ tmp4736 ]
  lea  r8 , [ tmp4731 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4731 + Variant_t.value]
  mov dword [ tmp4737 ], eax
  cmp dword [ tmp4737 ], 0
  jz l4738
  lea  rcx, [ tmp4741 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp4741 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4740 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal637 ]
  lea  rdx , [ tmp4741 ]
  lea  r8 , [ tmp4740 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4740 ]
  lea  rdi , [ tmp4731 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4738:
l4739:
  ret
l4734:
  lea  rcx , [ tmp4732 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ methodName ]
  lea  r9 , [ l4733 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values methodName
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4731 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4732 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4735 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4736 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator methodName

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore ast
  restore tmp4731
  restore tmp4732
  restore tmp4735
  restore tmp4736
  restore tmp4737
  restore tmp4740
  restore tmp4741
  restore methodName
; -----------------------------------------------
; function __ASTTranslatorMIR1_connectTo$2
; -----------------------------------------------
__ASTTranslatorMIR1_connectTo$2:
  ; init frame
  ; ----------
  rv EQU rdi
  obj EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ obj ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ obj ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ rv ]
  lea rdx, [ obj ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore obj
  restore rv
; -----------------------------------------------
; function __PipeAbstract_constructor$1
; -----------------------------------------------
__PipeAbstract_constructor$1:
  ; init frame
  ; ----------
  tmp4743 EQU rbp - 24 ; 16 bytes
  tmp4742 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4743 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp4742 ], 0
  mov eax, dword [ tmp4742 ]
  mov [ tmp4743 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4743 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ tmp4743 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4743 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4743 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ tmp4743 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4742 ], 0
  mov eax, dword [ tmp4742 ]
  mov [ tmp4743 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4743 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp4743 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4743 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4742
  restore tmp4743
; -----------------------------------------------
; function __PipeAbstract__emitOneItem$2
; -----------------------------------------------
__PipeAbstract__emitOneItem$2:
  ; init frame
  ; ----------
  outputObject EQU rbp - 24 ; 16 bytes
  cnt EQU rbp - 40 ; 16 bytes
  buffer EQU rbp - 56 ; 16 bytes
  tmp4750 EQU rbp - 60 ; 4 bytes
  tmp4747 EQU rbp - 76 ; 16 bytes
  tmp4746 EQU rbp - 80 ; 4 bytes
  tmp4745 EQU rbp - 96 ; 16 bytes
  tmp4744 EQU rbp - 112 ; 16 bytes
  item EQU rbp - 128 ; 16 bytes
  this EQU rbp - 144 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [tmp4744 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4745 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4747 + Variant_t.type], VARIANT_UNDEFINED
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED
  mov [cnt + Variant_t.type], VARIANT_UNDEFINED
  mov [outputObject + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4745 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp4745 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4746 ], 1
  mov eax, dword [ tmp4746 ]
  mov [ tmp4747 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4747 + Variant_t.value], rax
  lea  rcx , [ tmp4745 ]
  lea  rdx , [ tmp4747 ]
  lea  r8 , [ tmp4744 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4744 + Variant_t.value]
  mov dword [ tmp4746 ], eax
  cmp dword [ tmp4746 ], 0
  jz l4748
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ cnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ buffer ]
  lea  rdi , [ cnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov eax, dword [ cnt + Variant_t.value]
  mov dword [ tmp4750 ], eax
  lea  rcx , [ buffer ]
  lea  rdx , [ tmp4750 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l4749
l4748:
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4744 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ outputObject ]
  lea  rdx , [ item ]
  lea  rdi, [ tmp4744 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*247]
  pop rdi
l4749:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4744 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4745 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4747 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore item
  restore tmp4744
  restore tmp4745
  restore tmp4746
  restore tmp4747
  restore tmp4750
  restore buffer
  restore cnt
  restore outputObject
; -----------------------------------------------
; function __PipeAbstract__replaceLastItem$2
; -----------------------------------------------
__PipeAbstract__replaceLastItem$2:
  ; init frame
  ; ----------
  cnt EQU rbp - 24 ; 16 bytes
  buffer EQU rbp - 40 ; 16 bytes
  tmp4757 EQU rbp - 44 ; 4 bytes
  tmp4754 EQU rbp - 60 ; 16 bytes
  tmp4753 EQU rbp - 64 ; 4 bytes
  tmp4752 EQU rbp - 80 ; 16 bytes
  tmp4751 EQU rbp - 96 ; 16 bytes
  item EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [tmp4751 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4752 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4754 + Variant_t.type], VARIANT_UNDEFINED
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED
  mov [cnt + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4752 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp4752 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4753 ], 1
  mov eax, dword [ tmp4753 ]
  mov [ tmp4754 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4754 + Variant_t.value], rax
  lea  rcx , [ tmp4752 ]
  lea  rdx , [ tmp4754 ]
  lea  r8 , [ tmp4751 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4751 + Variant_t.value]
  mov dword [ tmp4753 ], eax
  cmp dword [ tmp4753 ], 0
  jz l4755
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ cnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ buffer ]
  lea  rdi , [ cnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4757 ], 1
  mov [ tmp4754 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4757 ]
  mov [ tmp4754 + Variant_t.value], rax
  lea  rcx , [ cnt ]
  lea  rdx , [ tmp4754 ]
  lea  r8 , [ tmp4751 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp4751 + Variant_t.value]
  mov dword [ tmp4757 ], eax
  lea  rcx , [ buffer ]
  lea  rdx , [ tmp4757 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l4756
l4755:
  lea  rcx, [ tmp4751 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal640 ]
  lea  rdi , [ tmp4751 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l4756:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4751 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4752 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4754 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cnt ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore item
  restore tmp4751
  restore tmp4752
  restore tmp4753
  restore tmp4754
  restore tmp4757
  restore buffer
  restore cnt
; -----------------------------------------------
; function __PipeAbstract_connectTo$2
; -----------------------------------------------
__PipeAbstract_connectTo$2:
  ; init frame
  ; ----------
  rv EQU rdi
  outputObject EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ outputObject ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantStoreAtKey
  lea rcx, [ rv ]
  lea rdx, [ outputObject ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore outputObject
  restore rv
; -----------------------------------------------
; function __PipeAbstract_processOneItem$2
; -----------------------------------------------
__PipeAbstract_processOneItem$2:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ item ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore item
; -----------------------------------------------
; function __PipeAbstract_processArrayOfItems$2
; -----------------------------------------------
__PipeAbstract_processArrayOfItems$2:
  ; init frame
  ; ----------
  oneItem EQU rbp - 24 ; 16 bytes
  tmp4760 EQU rbp - 40 ; 16 bytes
  arrayOfItems EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ arrayOfItems ], xmm0
  mov [tmp4760 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l4759
l4758:
  lea  rcx, [ tmp4760 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneItem ]
  lea  rdi, [ tmp4760 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*247]
  pop rdi
  ret
l4759:
  lea  rcx , [ arrayOfItems ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l4758 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4760 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore arrayOfItems
  restore tmp4760
  restore oneItem
; -----------------------------------------------
; function __PipeAbstract_flush$1
; -----------------------------------------------
__PipeAbstract_flush$1:
  ; init frame
  ; ----------
  oneItem EQU rbp - 24 ; 16 bytes
  tmp4761 EQU rbp - 40 ; 16 bytes
  outputObject EQU rbp - 56 ; 16 bytes
  buffer EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED
  mov [outputObject + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4761 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l4763
l4762:
  lea  rcx, [ tmp4761 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ outputObject ]
  lea  rdx , [ oneItem ]
  lea  rdi, [ tmp4761 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*247]
  pop rdi
  ret
l4763:
  lea  rcx , [ buffer ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l4762 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx, [ tmp4761 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4761 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ tmp4761 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4761 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore buffer
  restore outputObject
  restore tmp4761
  restore oneItem
; -----------------------------------------------
; function __MIRQuadCollector_constructor$1
; -----------------------------------------------
__MIRQuadCollector_constructor$1:
  ; init frame
  ; ----------
  tmp4766 EQU rbp - 24 ; 16 bytes
  tmp4765 EQU rbp - 40 ; 16 bytes
  tmp4764 EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4764 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4765 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4766 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4764 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4764 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ tmp4764 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4764 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4764 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp4765 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4765 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ tmp4764 ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp4765 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal642 ]
  lea  r8 , [ tmp4764 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4764 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4765 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4766 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore tmp4764
  restore tmp4765
  restore tmp4766
; -----------------------------------------------
; function __MIRQuadCollector__pad$3
; -----------------------------------------------
__MIRQuadCollector__pad$3:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  padCnt EQU rbp - 28 ; 16 bytes
  tmp4780 EQU rbp - 32 ; 4 bytes
  tmp4779 EQU rbp - 36 ; 4 bytes
  tmp4778 EQU rbp - 40 ; 4 bytes
  v EQU rbp - 56 ; 16 bytes
  sep EQU rbp - 72 ; 16 bytes
  tmp4777 EQU rbp - 88 ; 16 bytes
  tmp4776 EQU rbp - 104 ; 16 bytes
  tmp4769 EQU rbp - 108 ; 4 bytes
  tmp4768 EQU rbp - 124 ; 16 bytes
  tmp4767 EQU rbp - 140 ; 16 bytes
  rv EQU rdi
  desiredLen EQU rbp - 156 ; 16 bytes
  item EQU rbp - 172 ; 16 bytes
  this EQU rbp - 188 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ desiredLen ], xmm0
  mov [tmp4767 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4768 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4776 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4777 + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [padCnt + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4768 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ tmp4768 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4768 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4767 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4767 + Variant_t.value]
  mov dword [ tmp4769 ], eax
  cmp dword [ tmp4769 ], 0
  jz l4770
  lea rcx, [ item ]
  lea rdx, [ __literal117 ]
  call __MOLD_VariantMove
l4770:
l4771:
  lea  rcx, [ tmp4768 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ tmp4768 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4768 ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4767 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4767 + Variant_t.value]
  mov dword [ tmp4769 ], eax
  cmp dword [ tmp4769 ], 0
  jz l4772
  lea rcx, [ rv ]
  lea rdx, [ __literal420 ]
  call __MOLD_VariantMove
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values v
; 
  jmp l4775
l4774:
  lea  rcx, [ tmp4767 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ v ]
  lea  rdi , [ tmp4767 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4777 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ sep ]
  lea  rdx , [ tmp4767 ]
  lea  r8 , [ tmp4777 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp4777 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal419 ]
  call __MOLD_VariantMove
  ret
l4775:
  lea  rcx , [ item ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ v ]
  lea  r9 , [ l4774 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values v
; -----------------------------
; 
  lea  rcx , [ rv ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l4773
l4772:
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4768 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp4768 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ desiredLen ]
  lea  rdx , [ tmp4768 ]
  lea  r8 , [ padCnt ]
  call  __MOLD_VariantSub
  mov dword [ tmp4778 ], 1
  mov eax, dword [ padCnt + Variant_t.value]
  mov dword [ tmp4779 ], eax
  mov dword [ idx ], 0
l4781:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4779 ]
  jge l4782
  lea  rcx , [ rv ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ idx ]
  add eax, dword [ tmp4778 ]
  mov dword [ idx ], eax
  jmp l4781
l4782:
l4773:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4767 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4768 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator v
  lea  rcx, [ padCnt ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore item
  restore desiredLen
  restore rv
  restore tmp4767
  restore tmp4768
  restore tmp4769
  restore tmp4776
  restore tmp4777
  restore sep
  restore v
  restore tmp4778
  restore tmp4779
  restore tmp4780
  restore padCnt
  restore idx
; -----------------------------------------------
; function __MIRQuadCollector_processOneItem$2
; -----------------------------------------------
__MIRQuadCollector_processOneItem$2:
  ; init frame
  ; ----------
  tmp4785 EQU rbp - 12 ; 4 bytes
  tmp4784 EQU rbp - 28 ; 16 bytes
  tmp4783 EQU rbp - 44 ; 16 bytes
  cnt EQU rbp - 60 ; 16 bytes
  item EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [cnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4783 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4784 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4784 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ tmp4784 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ cnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4784 ]
  lea  rdi , [ cnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4783 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ tmp4783 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ cnt + Variant_t.value]
  mov dword [ tmp4785 ], eax
  lea  rcx , [ tmp4783 ]
  lea  rdx , [ tmp4785 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ cnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4783 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4784 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore item
  restore cnt
  restore tmp4783
  restore tmp4784
  restore tmp4785
; -----------------------------------------------
; function __MIRQuadCollector_getQuads$1
; -----------------------------------------------
__MIRQuadCollector_getQuads$1:
  ; init frame
  ; ----------
  tmp4786 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4786 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4786 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4786
; -----------------------------------------------
; function __MIRQuadCollector__printSymbolInfoRow$6
; -----------------------------------------------
__MIRQuadCollector__printSymbolInfoRow$6:
  ; init frame
  ; ----------
  tmp4789 EQU rbp - 24 ; 16 bytes
  tmp4788 EQU rbp - 28 ; 4 bytes
  tmp4787 EQU rbp - 44 ; 16 bytes
  kind EQU rbp - 60 ; 16 bytes
  type EQU rbp - 76 ; 16 bytes
  writeHits EQU rbp - 92 ; 16 bytes
  readHits EQU rbp - 108 ; 16 bytes
  name EQU rbp - 124 ; 16 bytes
  this EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ readHits ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ writeHits ], xmm0
  mov    rax, [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [rax]
  movdqu [ type ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ kind ], xmm0
  mov [tmp4787 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4789 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp4788 ], 10
  mov [ tmp4789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4788 ]
  mov [ tmp4789 + Variant_t.value], rax
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4789 ]
  lea  rdi , [ tmp4787 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea rcx, [ name ]
  lea rdx, [ tmp4787 ]
  call __MOLD_VariantMove
  mov dword [ tmp4788 ], 4
  mov [ tmp4789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4788 ]
  mov [ tmp4789 + Variant_t.value], rax
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ readHits ]
  lea  r8 , [ tmp4789 ]
  lea  rdi , [ tmp4787 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea rcx, [ readHits ]
  lea rdx, [ tmp4787 ]
  call __MOLD_VariantMove
  mov dword [ tmp4788 ], 4
  mov [ tmp4789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4788 ]
  mov [ tmp4789 + Variant_t.value], rax
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ writeHits ]
  lea  r8 , [ tmp4789 ]
  lea  rdi , [ tmp4787 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea rcx, [ writeHits ]
  lea rdx, [ tmp4787 ]
  call __MOLD_VariantMove
  mov dword [ tmp4788 ], 9
  mov [ tmp4789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4788 ]
  mov [ tmp4789 + Variant_t.value], rax
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ type ]
  lea  r8 , [ tmp4789 ]
  lea  rdi , [ tmp4787 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea rcx, [ type ]
  lea rdx, [ tmp4787 ]
  call __MOLD_VariantMove
  mov dword [ tmp4788 ], 8
  mov [ tmp4789 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4788 ]
  mov [ tmp4789 + Variant_t.value], rax
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ kind ]
  lea  r8 , [ tmp4789 ]
  lea  rdi , [ tmp4787 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea rcx, [ kind ]
  lea rdx, [ tmp4787 ]
  call __MOLD_VariantMove
  lea  rcx , [ 6 ]
  lea  rdx , [ __literal643 ]
  lea  r8 , [ name ]
  lea  r9 , [ readHits ]
  lea  rax , [ writeHits ]
  push rax
  lea  rax , [ type ]
  push rax
  lea  rax , [ kind ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 24

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4789 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore name
  restore readHits
  restore writeHits
  restore type
  restore kind
  restore tmp4787
  restore tmp4788
  restore tmp4789
; -----------------------------------------------
; function __MIRQuadCollector__dumpFrameInfo$2
; -----------------------------------------------
__MIRQuadCollector__dumpFrameInfo$2:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp4799 EQU rbp - 28 ; 4 bytes
  tmp4798 EQU rbp - 44 ; 16 bytes
  tmp4797 EQU rbp - 60 ; 16 bytes
  tmp4796 EQU rbp - 76 ; 16 bytes
  tmp4795 EQU rbp - 92 ; 16 bytes
  tmp4794 EQU rbp - 108 ; 16 bytes
  tmp4793 EQU rbp - 124 ; 16 bytes
  tmp4790 EQU rbp - 140 ; 16 bytes
  frameInfo EQU rbp - 156 ; 16 bytes
  this EQU rbp - 172 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ frameInfo ], xmm0
  mov [tmp4790 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4793 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4794 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4795 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4796 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4797 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4798 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp4790 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal644 ]
  lea  r8 , [ __literal645 ]
  lea  r9 , [ __literal646 ]
  lea  rax , [ __literal647 ]
  push rax
  lea  rax , [ __literal192 ]
  push rax
  lea  rdi , [ tmp4790 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__printSymbolInfoRow$6
  add rsp, 16
  pop rdi
  lea  rcx, [ tmp4790 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal648 ]
  lea  r8 , [ __literal649 ]
  lea  r9 , [ __literal649 ]
  lea  rax , [ __literal650 ]
  push rax
  lea  rax , [ __literal651 ]
  push rax
  lea  rdi , [ tmp4790 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__printSymbolInfoRow$6
  add rsp, 16
  pop rdi
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l4792
l4791:
  lea  rcx, [ tmp4793 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4793 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4794 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp4794 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4795 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp4795 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4796 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4796 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4798 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp4798 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ tmp4798 + Variant_t.value]
  mov dword [ tmp4799 ], eax
  lea  rcx, [ tmp4797 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ SYMBOL_KIND_AS_TEXT ]
  lea  rdx , [ tmp4799 ]
  lea  r8 , [ tmp4797 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4790 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4793 ]
  lea  r8 , [ tmp4794 ]
  lea  r9 , [ tmp4795 ]
  lea  rax , [ tmp4796 ]
  push rax
  lea  rax , [ tmp4797 ]
  push rax
  lea  rdi , [ tmp4790 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__printSymbolInfoRow$6
  add rsp, 16
  pop rdi
  ret
l4792:
  lea  rcx , [ frameInfo ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4791 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4790 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4793 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4794 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4795 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4796 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4797 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4798 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore frameInfo
  restore tmp4790
  restore tmp4793
  restore tmp4794
  restore tmp4795
  restore tmp4796
  restore tmp4797
  restore tmp4798
  restore tmp4799
  restore item
; -----------------------------------------------
; function __MIRQuadCollector_printQuads$1
; -----------------------------------------------
__MIRQuadCollector_printQuads$1:
  ; init frame
  ; ----------
  paddedY EQU rbp - 24 ; 16 bytes
  paddedX EQU rbp - 40 ; 16 bytes
  paddedDst EQU rbp - 56 ; 16 bytes
  paddedOpcode EQU rbp - 72 ; 16 bytes
  y EQU rbp - 88 ; 16 bytes
  x EQU rbp - 104 ; 16 bytes
  dst EQU rbp - 120 ; 16 bytes
  __cse41 EQU rbp - 136 ; 16 bytes
  opcode EQU rbp - 152 ; 16 bytes
  item EQU rbp - 168 ; 16 bytes
  tmp4830 EQU rbp - 184 ; 16 bytes
  tmp4829 EQU rbp - 200 ; 16 bytes
  tmp4828 EQU rbp - 216 ; 16 bytes
  tmp4825 EQU rbp - 220 ; 4 bytes
  tmp4824 EQU rbp - 236 ; 16 bytes
  tmp4821 EQU rbp - 240 ; 4 bytes
  tmp4820 EQU rbp - 256 ; 16 bytes
  tmp4817 EQU rbp - 260 ; 4 bytes
  tmp4814 EQU rbp - 264 ; 4 bytes
  tmp4811 EQU rbp - 268 ; 4 bytes
  tmp4808 EQU rbp - 272 ; 4 bytes
  tmp4807 EQU rbp - 288 ; 16 bytes
  tmp4804 EQU rbp - 292 ; 4 bytes
  tmp4803 EQU rbp - 296 ; 4 bytes
  tmp4800 EQU rbp - 312 ; 16 bytes
  code EQU rbp - 328 ; 16 bytes
  this EQU rbp - 344 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 384

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4800 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4807 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4820 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4824 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4828 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4829 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4830 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse41 + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedOpcode + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedDst + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedX + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedY + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l4802
l4801:
  mov dword [ tmp4803 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ tmp4800 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4800 + Variant_t.value]
  mov dword [ tmp4804 ], eax
  cmp dword [ tmp4804 ], 0
  jz l4805
  mov dword [ tmp4803 ], 1
  lea  rcx, [ __cse41 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ __cse41 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4807 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse41 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4807 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ tmp4807 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4807 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse41 ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp4807 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4800 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4807 ]
  lea  rdi , [ tmp4800 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__dumpFrameInfo$2
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal642 ]
  lea  r8 , [ __cse41 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4806
l4805:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal588 ]
  lea  r8 , [ tmp4800 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4800 + Variant_t.value]
  mov dword [ tmp4808 ], eax
  cmp dword [ tmp4808 ], 0
  jz l4809
  lea  rcx , [ __literal652 ]
  call  __MOLD_PrintVariantLn
  jmp l4810
l4809:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal589 ]
  lea  r8 , [ tmp4800 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4800 + Variant_t.value]
  mov dword [ tmp4811 ], eax
  cmp dword [ tmp4811 ], 0
  jz l4812
  lea  rcx , [ __literal589 ]
  call  __MOLD_PrintVariantLn
  jmp l4813
l4812:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4800 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4800 + Variant_t.value]
  mov dword [ tmp4814 ], eax
  cmp dword [ tmp4814 ], 0
  jz l4815
  mov dword [ tmp4803 ], 1
  lea  rcx, [ tmp4807 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ tmp4807 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal653 ]
  lea  r8 , [ tmp4807 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4816
l4815:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal168 ]
  lea  r8 , [ tmp4800 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4800 + Variant_t.value]
  mov dword [ tmp4817 ], eax
  cmp dword [ tmp4817 ], 0
  jz l4818
  mov dword [ tmp4803 ], 1
  lea  rcx, [ tmp4807 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ tmp4807 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4820 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4807 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4820 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp4820 ]
  call  __MOLD_PrintVariantLn
  jmp l4819
l4818:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal615 ]
  lea  r8 , [ tmp4800 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4800 + Variant_t.value]
  mov dword [ tmp4821 ], eax
  cmp dword [ tmp4821 ], 0
  jz l4822
  mov dword [ tmp4803 ], 28
  mov [ tmp4824 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4824 + Variant_t.value], rax
  lea  rcx, [ tmp4807 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp4824 ]
  lea  rdi , [ tmp4807 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  mov dword [ tmp4803 ], 1
  lea  rcx, [ tmp4824 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ tmp4824 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4807 ]
  lea  r9 , [ tmp4824 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4823
l4822:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp4800 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4800 + Variant_t.value]
  mov dword [ tmp4825 ], eax
  cmp dword [ tmp4825 ], 0
  jz l4826
  mov dword [ tmp4803 ], 28
  mov [ tmp4807 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4807 + Variant_t.value], rax
  lea  rcx, [ tmp4824 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp4807 ]
  lea  rdi , [ tmp4824 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  mov dword [ tmp4803 ], 1
  lea  rcx, [ tmp4828 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ tmp4828 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4803 ], 8
  mov [ tmp4829 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4829 + Variant_t.value], rax
  lea  rcx, [ tmp4807 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4828 ]
  lea  r8 , [ tmp4829 ]
  lea  rdi , [ tmp4807 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  mov dword [ tmp4803 ], 2
  lea  rcx, [ tmp4828 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ tmp4828 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4803 ], 8
  mov [ tmp4830 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4830 + Variant_t.value], rax
  lea  rcx, [ tmp4829 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4828 ]
  lea  r8 , [ tmp4830 ]
  lea  rdi , [ tmp4829 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  mov dword [ tmp4803 ], 3
  lea  rcx, [ tmp4830 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ tmp4830 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 5 ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4824 ]
  lea  r9 , [ tmp4807 ]
  lea  rax , [ tmp4829 ]
  push rax
  lea  rax , [ tmp4830 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
  jmp l4827
l4826:
  mov dword [ tmp4803 ], 1
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4803 ], 2
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4803 ], 3
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4803 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4803 ], 28
  mov [ tmp4830 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4830 + Variant_t.value], rax
  lea  rcx, [ tmp4800 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp4830 ]
  lea  rdi , [ tmp4800 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea  rcx, [ paddedOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedOpcode ]
  lea rdx, [ tmp4800 ]
  call __MOLD_VariantMove
  mov dword [ tmp4803 ], 8
  mov [ tmp4830 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4830 + Variant_t.value], rax
  lea  rcx, [ tmp4800 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ tmp4830 ]
  lea  rdi , [ tmp4800 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea  rcx, [ paddedDst ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedDst ]
  lea rdx, [ tmp4800 ]
  call __MOLD_VariantMove
  mov dword [ tmp4803 ], 8
  mov [ tmp4830 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4830 + Variant_t.value], rax
  lea  rcx, [ tmp4800 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  lea  r8 , [ tmp4830 ]
  lea  rdi , [ tmp4800 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea  rcx, [ paddedX ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedX ]
  lea rdx, [ tmp4800 ]
  call __MOLD_VariantMove
  mov dword [ tmp4803 ], 8
  mov [ tmp4830 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4803 ]
  mov [ tmp4830 + Variant_t.value], rax
  lea  rcx, [ tmp4800 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ y ]
  lea  r8 , [ tmp4830 ]
  lea  rdi , [ tmp4800 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$3
  pop rdi
  lea  rcx, [ paddedY ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedY ]
  lea rdx, [ tmp4800 ]
  call __MOLD_VariantMove
  lea  rcx , [ 5 ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ paddedOpcode ]
  lea  r9 , [ paddedDst ]
  lea  rax , [ paddedX ]
  push rax
  lea  rax , [ paddedY ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l4827:
l4823:
l4819:
l4816:
l4813:
l4810:
l4806:
  ret
l4802:
  lea  rcx , [ code ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4801 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 

  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4800 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4807 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4824 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4828 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4829 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4830 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse41 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedDst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedX ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedY ]
  call __MOLD_VariantDestroy

  add  rsp, 384
  pop  rbp
  ret

  restore this
  restore code
  restore tmp4800
  restore tmp4803
  restore tmp4804
  restore tmp4807
  restore tmp4808
  restore tmp4811
  restore tmp4814
  restore tmp4817
  restore tmp4820
  restore tmp4821
  restore tmp4824
  restore tmp4825
  restore tmp4828
  restore tmp4829
  restore tmp4830
  restore item
  restore opcode
  restore __cse41
  restore dst
  restore x
  restore y
  restore paddedOpcode
  restore paddedDst
  restore paddedX
  restore paddedY
; -----------------------------------------------
; function __CodeGeneratorX64_constructor$1
; -----------------------------------------------
__CodeGeneratorX64_constructor$1:
  ; init frame
  ; ----------
  tmp4832 EQU rbp - 12 ; 4 bytes
  tmp4831 EQU rbp - 28 ; 16 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4831 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4831 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4831 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp4831 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4832 ], 0
  mov eax, dword [ tmp4832 ]
  mov [ tmp4831 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4831 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp4831 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4831 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4831
  restore tmp4832
; -----------------------------------------------
; function __CodeGeneratorX64_lea$3
; -----------------------------------------------
__CodeGeneratorX64_lea$3:
  ; init frame
  ; ----------
  tmp4833 EQU rbp - 24 ; 16 bytes
  src EQU rbp - 40 ; 16 bytes
  dst EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  mov [tmp4833 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 5 ]
  lea  rdx , [ __literal656 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal657 ]
  lea  rax , [ src ]
  push rax
  lea  rax , [ __literal34 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4833 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore tmp4833
; -----------------------------------------------
; function __CodeGeneratorX64_push$2
; -----------------------------------------------
__CodeGeneratorX64_push$2:
  ; init frame
  ; ----------
  tmp4834 EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [tmp4834 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal658 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4834 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore x
  restore tmp4834
; -----------------------------------------------
; function __CodeGeneratorX64_pop$2
; -----------------------------------------------
__CodeGeneratorX64_pop$2:
  ; init frame
  ; ----------
  tmp4835 EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [tmp4835 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal659 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4835 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore x
  restore tmp4835
; -----------------------------------------------
; function __CodeGeneratorX64_mov$3
; -----------------------------------------------
__CodeGeneratorX64_mov$3:
  ; init frame
  ; ----------
  tmp4836 EQU rbp - 24 ; 16 bytes
  src EQU rbp - 40 ; 16 bytes
  dst EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  mov [tmp4836 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal660 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal155 ]
  lea  rax , [ src ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4836 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore tmp4836
; -----------------------------------------------
; function __CodeGeneratorX64_call$2
; -----------------------------------------------
__CodeGeneratorX64_call$2:
  ; init frame
  ; ----------
  tmp4837 EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4837 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal661 ]
  lea  r8 , [ name ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4837 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp4837
; -----------------------------------------------
; function __CodeGeneratorX64_call1$3
; -----------------------------------------------
__CodeGeneratorX64_call1$3:
  ; init frame
  ; ----------
  tmp4838 EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  mov [tmp4838 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4838 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal662 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp4838 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4838 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4838 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4838 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore x
  restore tmp4838
; -----------------------------------------------
; function __CodeGeneratorX64_call2$4
; -----------------------------------------------
__CodeGeneratorX64_call2$4:
  ; init frame
  ; ----------
  tmp4839 EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov [tmp4839 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal662 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp4839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal663 ]
  lea  r8 , [ y ]
  lea  rdi , [ tmp4839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4839 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore x
  restore y
  restore tmp4839
; -----------------------------------------------
; function __CodeGeneratorX64_call3$5
; -----------------------------------------------
__CodeGeneratorX64_call3$5:
  ; init frame
  ; ----------
  tmp4840 EQU rbp - 24 ; 16 bytes
  z EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ z ], xmm0
  mov [tmp4840 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal662 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp4840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal663 ]
  lea  r8 , [ y ]
  lea  rdi , [ tmp4840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal664 ]
  lea  r8 , [ z ]
  lea  rdi , [ tmp4840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4840 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4840 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4840 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore x
  restore y
  restore z
  restore tmp4840
; -----------------------------------------------
; function __CodeGeneratorX64_call3AndDestroy$5
; -----------------------------------------------
__CodeGeneratorX64_call3AndDestroy$5:
  ; init frame
  ; ----------
  tmp4844 EQU rbp - 12 ; 4 bytes
  tmp4843 EQU rbp - 28 ; 16 bytes
  tmp4841 EQU rbp - 32 ; 4 bytes
  dst EQU rbp - 48 ; 16 bytes
  y EQU rbp - 64 ; 16 bytes
  x EQU rbp - 80 ; 16 bytes
  name EQU rbp - 96 ; 16 bytes
  this EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ dst ], xmm0
  mov [tmp4843 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp4841 ], 1
  lea  rcx , [ x ]
  lea  rdx , [ dst ]
  lea  r8 , [ tmp4843 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4843 + Variant_t.value]
  mov dword [ tmp4844 ], eax
  cmp dword [ tmp4844 ], 0
  jnz l4842
  lea  rcx , [ y ]
  lea  rdx , [ dst ]
  lea  r8 , [ tmp4843 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4843 + Variant_t.value]
  mov dword [ tmp4841 ], eax
l4842:
  cmp dword [ tmp4841 ], 0
  jz l4845
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal662 ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp4843 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal663 ]
  lea  r8 , [ y ]
  lea  rdi , [ tmp4843 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal664 ]
  lea  r8 , [ dst ]
  lea  rdi , [ tmp4843 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4843 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi
  jmp l4846
l4845:
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4843 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4843 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
l4846:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4843 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore x
  restore y
  restore dst
  restore tmp4841
  restore tmp4843
  restore tmp4844
; -----------------------------------------------
; function __CodeGeneratorX64_variantMove$3
; -----------------------------------------------
__CodeGeneratorX64_variantMove$3:
  ; init frame
  ; ----------
  tmp4847 EQU rbp - 24 ; 16 bytes
  src EQU rbp - 40 ; 16 bytes
  dst EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  mov [tmp4847 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ src ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal667 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4847 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore tmp4847
; -----------------------------------------------
; function __CodeGeneratorX64_variantDestroy$2
; -----------------------------------------------
__CodeGeneratorX64_variantDestroy$2:
  ; init frame
  ; ----------
  tmp4856 EQU rbp - 12 ; 4 bytes
  tmp4855 EQU rbp - 28 ; 16 bytes
  tmp4854 EQU rbp - 32 ; 4 bytes
  tmp4852 EQU rbp - 36 ; 4 bytes
  tmp4850 EQU rbp - 40 ; 4 bytes
  tmp4849 EQU rbp - 56 ; 16 bytes
  tmp4848 EQU rbp - 72 ; 16 bytes
  xInfo EQU rbp - 88 ; 16 bytes
  x EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [xInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4848 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4849 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4855 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4849 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp4849 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ xInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4849 ]
  lea  rdx , [ x ]
  lea  r8 , [ xInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4850 ], 1
  lea  rcx, [ tmp4849 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xInfo ]
  lea  rdi , [ tmp4849 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4849 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4848 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4848 + Variant_t.value]
  mov dword [ tmp4852 ], eax
  cmp dword [ tmp4852 ], 0
  jnz l4851
  mov dword [ tmp4852 ], 1
  lea  rcx, [ tmp4849 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp4849 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4854 ], 1
  mov [ tmp4855 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4854 ]
  mov [ tmp4855 + Variant_t.value], rax
  lea  rcx , [ tmp4849 ]
  lea  rdx , [ tmp4855 ]
  lea  r8 , [ tmp4848 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4848 + Variant_t.value]
  mov dword [ tmp4856 ], eax
  cmp dword [ tmp4856 ], 0
  jnz l4853
  lea  rcx, [ tmp4855 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp4855 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4854 ], 2
  mov [ tmp4849 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4854 ]
  mov [ tmp4849 + Variant_t.value], rax
  lea  rcx , [ tmp4855 ]
  lea  rdx , [ tmp4849 ]
  lea  r8 , [ tmp4848 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4848 + Variant_t.value]
  mov dword [ tmp4852 ], eax
l4853:
  mov eax, dword [ tmp4852 ]
  mov dword [ tmp4850 ], eax
l4851:
  cmp dword [ tmp4850 ], 0
  jz l4857
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal668 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal669 ]
  call  __MOLD_PrintVariantLn
l4857:
l4858:

  ; clean frame
  ; -----------
  lea  rcx, [ xInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4848 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4849 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4855 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore x
  restore xInfo
  restore tmp4848
  restore tmp4849
  restore tmp4850
  restore tmp4852
  restore tmp4854
  restore tmp4855
  restore tmp4856
; -----------------------------------------------
; function __CodeGeneratorX64_pushParametersBeforeCall$2
; -----------------------------------------------
__CodeGeneratorX64_pushParametersBeforeCall$2:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  tmp4867 EQU rbp - 16 ; 4 bytes
  tmp4866 EQU rbp - 20 ; 4 bytes
  tmp4863 EQU rbp - 24 ; 4 bytes
  tmp4862 EQU rbp - 28 ; 4 bytes
  tmp4861 EQU rbp - 44 ; 16 bytes
  tmp4860 EQU rbp - 60 ; 16 bytes
  tmp4859 EQU rbp - 76 ; 16 bytes
  regParamsCnt EQU rbp - 92 ; 16 bytes
  regParams EQU rbp - 108 ; 16 bytes
  paramsCnt EQU rbp - 124 ; 16 bytes
  params EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ params ], xmm0
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [regParams + Variant_t.type], VARIANT_UNDEFINED
  mov [regParamsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4859 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4860 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4861 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ paramsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4859 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4859 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4860 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4860 + Variant_t.value], 0
  lea  rcx, [ tmp4861 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4861 ]
  lea rdx, [ __literal662 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4859 ]
  lea  rdx , [ tmp4860 ]
  lea  r8 , [ tmp4861 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4860 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4860 + Variant_t.value], 1
  lea  rcx, [ tmp4861 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4861 ]
  lea rdx, [ __literal663 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4859 ]
  lea  rdx , [ tmp4860 ]
  lea  r8 , [ tmp4861 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4860 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4860 + Variant_t.value], 2
  lea  rcx, [ tmp4861 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4861 ]
  lea rdx, [ __literal664 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4859 ]
  lea  rdx , [ tmp4860 ]
  lea  r8 , [ tmp4861 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4860 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4860 + Variant_t.value], 3
  lea  rcx, [ tmp4861 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4861 ]
  lea rdx, [ __literal670 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4859 ]
  lea  rdx , [ tmp4860 ]
  lea  r8 , [ tmp4861 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ regParams ]
  lea rdx, [ tmp4859 ]
  call __MOLD_VariantMove
  mov dword [ tmp4862 ], 4
  mov [ tmp4861 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4862 ]
  mov [ tmp4861 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp4861 ]
  lea  r8 , [ tmp4859 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp4859 + Variant_t.value]
  mov dword [ tmp4863 ], eax
  cmp dword [ tmp4863 ], 0
  jz l4864
  lea  rcx, [ regParamsCnt ]
  call __MOLD_VariantDestroy
  lea rcx, [ regParamsCnt ]
  lea rdx, [ paramsCnt ]
  call __MOLD_VariantMove
  jmp l4865
l4864:
  mov dword [ tmp4862 ], 4
  mov [ regParamsCnt + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4862 ]
  mov [ regParamsCnt + Variant_t.value], rax
l4865:
  mov dword [ tmp4862 ], 1
  mov eax, dword [ regParamsCnt + Variant_t.value]
  mov dword [ tmp4866 ], eax
  mov dword [ idx ], 0
l4868:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4866 ]
  jge l4869
  lea  rcx, [ tmp4861 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ regParams ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4861 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4860 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4860 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4859 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4861 ]
  lea  r8 , [ tmp4860 ]
  lea  rdi , [ tmp4859 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  mov eax, dword [ idx ]
  add eax, dword [ tmp4862 ]
  mov dword [ idx ], eax
  jmp l4868
l4869:
  mov dword [ tmp4867 ], 1
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp4866 ], eax
  mov dword [ idx ], 4
l4870:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4866 ]
  jge l4871
  lea  rcx, [ tmp4860 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4860 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4859 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal671 ]
  lea  r8 , [ tmp4860 ]
  lea  rdi , [ tmp4859 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4859 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal671 ]
  lea  rdi , [ tmp4859 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_push$2
  pop rdi
  mov eax, dword [ idx ]
  add eax, dword [ tmp4867 ]
  mov dword [ idx ], eax
  jmp l4870
l4871:

  ; clean frame
  ; -----------
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regParamsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4859 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4860 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4861 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore params
  restore paramsCnt
  restore regParams
  restore regParamsCnt
  restore tmp4859
  restore tmp4860
  restore tmp4861
  restore tmp4862
  restore tmp4863
  restore tmp4866
  restore tmp4867
  restore idx
; -----------------------------------------------
; function __CodeGeneratorX64_emitConstant$5
; -----------------------------------------------
__CodeGeneratorX64_emitConstant$5:
  ; init frame
  ; ----------
  tmp4899 EQU rbp - 24 ; 16 bytes
  tmp4898 EQU rbp - 28 ; 4 bytes
  valueAsInteger EQU rbp - 44 ; 16 bytes
  tmp4893 EQU rbp - 60 ; 16 bytes
  tmp4892 EQU rbp - 64 ; 4 bytes
  tmp4889 EQU rbp - 68 ; 4 bytes
  tmp4886 EQU rbp - 72 ; 4 bytes
  tmp4885 EQU rbp - 88 ; 16 bytes
  tmp4882 EQU rbp - 92 ; 4 bytes
  tmp4879 EQU rbp - 96 ; 4 bytes
  tmp4876 EQU rbp - 100 ; 4 bytes
  tmp4873 EQU rbp - 104 ; 4 bytes
  tmp4872 EQU rbp - 120 ; 16 bytes
  type EQU rbp - 136 ; 16 bytes
  deepIdx EQU rbp - 152 ; 16 bytes
  wantDeepIdx EQU rbp - 168 ; 16 bytes
  value EQU rbp - 184 ; 16 bytes
  name EQU rbp - 200 ; 16 bytes
  this EQU rbp - 216 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ deepIdx ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4872 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4885 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4893 + Variant_t.type], VARIANT_UNDEFINED
  mov [valueAsInteger + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4899 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ wantDeepIdx ]
  lea  rdx , [ deepIdx ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4873 ], eax
  cmp dword [ tmp4873 ], 0
  jz l4874
  lea  rcx , [ type ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4876 ], eax
  cmp dword [ tmp4876 ], 0
  jz l4877
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal672 ]
  lea  r9 , [ value ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4878
l4877:
  lea  rcx , [ type ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4879 ], eax
  cmp dword [ tmp4879 ], 0
  jz l4880
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal673 ]
  lea  r9 , [ value ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4881
l4880:
  lea  rcx , [ type ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4882 ], eax
  cmp dword [ tmp4882 ], 0
  jz l4883
  lea  rcx, [ tmp4885 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal675 ]
  lea  r8 , [ tmp4885 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal674 ]
  lea  r9 , [ tmp4885 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4884
l4883:
  lea  rcx , [ type ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4886 ], eax
  cmp dword [ tmp4886 ], 0
  jz l4887
  lea  rcx, [ tmp4885 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal675 ]
  lea  r8 , [ tmp4885 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal676 ]
  lea  r9 , [ tmp4885 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4888
l4887:
  lea  rcx , [ type ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4889 ], eax
  cmp dword [ tmp4889 ], 0
  jz l4890
  mov dword [ tmp4892 ], 1
  mov eax, dword [ tmp4892 ]
  mov [ tmp4893 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4893 + Variant_t.value], rax
  lea  rcx , [ value ]
  lea  rdx , [ tmp4893 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4892 ], eax
  cmp dword [ tmp4892 ], 0
  jz l4894
  lea  rcx, [ valueAsInteger ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsInteger ]
  lea rdx, [ __literal677 ]
  call __MOLD_VariantMove
  jmp l4895
l4894:
  lea  rcx, [ valueAsInteger ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsInteger ]
  lea rdx, [ __literal678 ]
  call __MOLD_VariantMove
l4895:
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal679 ]
  lea  r9 , [ valueAsInteger ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4891
l4890:
  lea  rcx , [ 2 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal680 ]
  call  __MOLD_PrintArrayOfVariantsLn
l4891:
l4888:
l4884:
l4881:
l4878:
l4874:
l4875:
  lea  rcx , [ type ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4873 ], eax
  cmp dword [ tmp4873 ], 0
  jz l4896
  mov dword [ tmp4898 ], 1
  mov [ tmp4899 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4898 ]
  mov [ tmp4899 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4899 ]
  lea  r8 , [ tmp4893 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp4872 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ tmp4893 ]
  push rax
  lea  rdi , [ tmp4872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_emitArrayBufferHead$5
  add rsp, 8
  pop rdi
  jmp l4897
l4896:
  lea  rcx , [ type ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4872 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4872 + Variant_t.value]
  mov dword [ tmp4876 ], eax
  cmp dword [ tmp4876 ], 0
  jz l4900
  mov dword [ tmp4898 ], 1
  mov [ tmp4899 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4898 ]
  mov [ tmp4899 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4899 ]
  lea  r8 , [ tmp4893 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp4872 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ tmp4893 ]
  push rax
  lea  rdi , [ tmp4872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_emitStringBufferHead$5
  add rsp, 8
  pop rdi
l4900:
l4901:
l4897:

  ; clean frame
  ; -----------
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4872 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4893 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4899 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore wantDeepIdx
  restore deepIdx
  restore type
  restore tmp4872
  restore tmp4873
  restore tmp4876
  restore tmp4879
  restore tmp4882
  restore tmp4885
  restore tmp4886
  restore tmp4889
  restore tmp4892
  restore tmp4893
  restore valueAsInteger
  restore tmp4898
  restore tmp4899
; -----------------------------------------------
; function __CodeGeneratorX64_emitStringBufferHead$5
; -----------------------------------------------
__CodeGeneratorX64_emitStringBufferHead$5:
  ; init frame
  ; ----------
  bufferNameBytes EQU rbp - 24 ; 16 bytes
  bufferName EQU rbp - 40 ; 16 bytes
  tmp4910 EQU rbp - 56 ; 16 bytes
  tmp4909 EQU rbp - 60 ; 4 bytes
  tmp4908 EQU rbp - 76 ; 16 bytes
  tmp4907 EQU rbp - 92 ; 16 bytes
  tmp4906 EQU rbp - 108 ; 16 bytes
  tmp4903 EQU rbp - 112 ; 4 bytes
  tmp4902 EQU rbp - 128 ; 16 bytes
  deepIdx EQU rbp - 144 ; 16 bytes
  wantDeep EQU rbp - 160 ; 16 bytes
  value EQU rbp - 176 ; 16 bytes
  name EQU rbp - 192 ; 16 bytes
  this EQU rbp - 208 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeep ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ deepIdx ], xmm0
  mov [tmp4902 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4906 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4907 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4908 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4910 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferName + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ wantDeep ]
  lea  rdx , [ deepIdx ]
  lea  r8 , [ tmp4902 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4902 + Variant_t.value]
  mov dword [ tmp4903 ], eax
  cmp dword [ tmp4903 ], 0
  jz l4904
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal675 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4908 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4908 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4909 ], 1
  mov [ tmp4910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4909 ]
  mov [ tmp4910 + Variant_t.value], rax
  lea  rcx , [ tmp4908 ]
  lea  rdx , [ tmp4910 ]
  lea  r8 , [ tmp4907 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ 5 ]
  lea  rdx , [ bufferName ]
  lea  r8 , [ __literal682 ]
  lea  r9 , [ tmp4907 ]
  lea  rax , [ __literal683 ]
  push rax
  lea  rax , [ bufferNameBytes ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l4904:
l4905:
  mov dword [ tmp4909 ], 1
  mov [ tmp4910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4909 ]
  mov [ tmp4910 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4910 ]
  lea  r8 , [ tmp4907 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp4902 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ wantDeep ]
  lea  rax , [ tmp4907 ]
  push rax
  lea  rdi , [ tmp4902 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_emitStringBufferContent$5
  add rsp, 8
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4902 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4907 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4908 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4910 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore wantDeep
  restore deepIdx
  restore tmp4902
  restore tmp4903
  restore tmp4906
  restore tmp4907
  restore tmp4908
  restore tmp4909
  restore tmp4910
  restore bufferName
  restore bufferNameBytes
; -----------------------------------------------
; function __CodeGeneratorX64_emitStringBufferContent$5
; -----------------------------------------------
__CodeGeneratorX64_emitStringBufferContent$5:
  ; init frame
  ; ----------
  character EQU rbp - 24 ; 16 bytes
  bufferData EQU rbp - 40 ; 16 bytes
  bufferNameBytes EQU rbp - 56 ; 16 bytes
  tmp4921 EQU rbp - 72 ; 16 bytes
  tmp4918 EQU rbp - 76 ; 4 bytes
  tmp4915 EQU rbp - 92 ; 16 bytes
  tmp4912 EQU rbp - 96 ; 4 bytes
  tmp4911 EQU rbp - 112 ; 16 bytes
  deepIdx EQU rbp - 128 ; 16 bytes
  wantDeep EQU rbp - 144 ; 16 bytes
  value EQU rbp - 160 ; 16 bytes
  name EQU rbp - 176 ; 16 bytes
  this EQU rbp - 192 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeep ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ deepIdx ], xmm0
  mov [tmp4911 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4915 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4921 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferData + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx , [ wantDeep ]
  lea  rdx , [ deepIdx ]
  lea  r8 , [ tmp4911 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4911 + Variant_t.value]
  mov dword [ tmp4912 ], eax
  cmp dword [ tmp4912 ], 0
  jz l4913
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ bufferData ]
  call __MOLD_VariantDestroy
  lea rcx, [ bufferData ]
  lea rdx, [ __literal463 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values character
; 
  jmp l4917
l4916:
  lea  rcx , [ character ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp4911 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4911 + Variant_t.value]
  mov dword [ tmp4918 ], eax
  cmp dword [ tmp4918 ], 0
  jz l4919
  lea  rcx , [ bufferData ]
  lea  rdx , [ __literal684 ]
  lea  r8 , [ bufferData ]
  call  __MOLD_VariantStringJoin
  jmp l4920
l4919:
  lea  rcx , [ bufferData ]
  lea  rdx , [ character ]
  lea  r8 , [ bufferData ]
  call  __MOLD_VariantStringJoin
l4920:
  ret
l4917:
  lea  rcx , [ value ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ character ]
  lea  r9 , [ l4916 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values character
; -----------------------------
; 
  lea  rcx , [ bufferData ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ bufferData ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4921 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4921 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ bufferNameBytes ]
  lea  r8 , [ __literal685 ]
  lea  r9 , [ tmp4921 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal686 ]
  lea  r8 , [ bufferData ]
  lea  r9 , [ __literal687 ]
  call  __MOLD_PrintArrayOfVariantsLn
l4913:
l4914:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4911 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4921 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator character

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore wantDeep
  restore deepIdx
  restore tmp4911
  restore tmp4912
  restore tmp4915
  restore tmp4918
  restore tmp4921
  restore bufferNameBytes
  restore bufferData
  restore character
; -----------------------------------------------
; function __CodeGeneratorX64_emitArrayBufferHead$5
; -----------------------------------------------
__CodeGeneratorX64_emitArrayBufferHead$5:
  ; init frame
  ; ----------
  bufferNameBytes EQU rbp - 24 ; 16 bytes
  bufferName EQU rbp - 40 ; 16 bytes
  tmp4929 EQU rbp - 56 ; 16 bytes
  tmp4928 EQU rbp - 60 ; 4 bytes
  tmp4927 EQU rbp - 76 ; 16 bytes
  tmp4926 EQU rbp - 92 ; 16 bytes
  tmp4923 EQU rbp - 96 ; 4 bytes
  tmp4922 EQU rbp - 112 ; 16 bytes
  itemsCnt EQU rbp - 128 ; 16 bytes
  deepIdx EQU rbp - 144 ; 16 bytes
  wantDeepIdx EQU rbp - 160 ; 16 bytes
  items EQU rbp - 176 ; 16 bytes
  name EQU rbp - 192 ; 16 bytes
  this EQU rbp - 208 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ items ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ deepIdx ], xmm0
  mov [itemsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4922 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4926 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4927 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4929 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferName + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ itemsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ items ]
  lea  rdi , [ itemsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ wantDeepIdx ]
  lea  rdx , [ deepIdx ]
  lea  r8 , [ tmp4922 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4922 + Variant_t.value]
  mov dword [ tmp4923 ], eax
  cmp dword [ tmp4923 ], 0
  jz l4924
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal675 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp4928 ], 16
  mov [ tmp4929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4928 ]
  mov [ tmp4929 + Variant_t.value], rax
  lea  rcx , [ itemsCnt ]
  lea  rdx , [ tmp4929 ]
  lea  r8 , [ tmp4927 ]
  call  __MOLD_VariantMul
  lea  rcx , [ 5 ]
  lea  rdx , [ bufferName ]
  lea  r8 , [ __literal682 ]
  lea  r9 , [ tmp4927 ]
  lea  rax , [ __literal683 ]
  push rax
  lea  rax , [ bufferNameBytes ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l4924:
l4925:
  mov dword [ tmp4928 ], 1
  mov [ tmp4929 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4928 ]
  mov [ tmp4929 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4929 ]
  lea  r8 , [ tmp4927 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp4922 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ items ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ tmp4927 ]
  push rax
  lea  rdi , [ tmp4922 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_emitArrayBufferContent$5
  add rsp, 8
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ itemsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4922 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4927 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4929 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore name
  restore items
  restore wantDeepIdx
  restore deepIdx
  restore itemsCnt
  restore tmp4922
  restore tmp4923
  restore tmp4926
  restore tmp4927
  restore tmp4928
  restore tmp4929
  restore bufferName
  restore bufferNameBytes
; -----------------------------------------------
; function __CodeGeneratorX64_emitArrayBufferContent$5
; -----------------------------------------------
__CodeGeneratorX64_emitArrayBufferContent$5:
  ; init frame
  ; ----------
  tmp4972 EQU rbp - 24 ; 16 bytes
  tmp4971 EQU rbp - 40 ; 16 bytes
  itemIdx EQU rbp - 44 ; 4 bytes
  sep EQU rbp - 60 ; 16 bytes
  bufferNameBytes EQU rbp - 76 ; 16 bytes
  tmp4966 EQU rbp - 80 ; 4 bytes
  tmp4963 EQU rbp - 96 ; 16 bytes
  itemType EQU rbp - 112 ; 16 bytes
  itemValue EQU rbp - 128 ; 16 bytes
  tmp4960 EQU rbp - 132 ; 4 bytes
  tmp4957 EQU rbp - 136 ; 4 bytes
  tmp4952 EQU rbp - 140 ; 4 bytes
  tmp4947 EQU rbp - 144 ; 4 bytes
  tmp4945 EQU rbp - 148 ; 4 bytes
  tmp4943 EQU rbp - 152 ; 4 bytes
  tmp4938 EQU rbp - 156 ; 4 bytes
  tmp4937 EQU rbp - 160 ; 4 bytes
  tmp4933 EQU rbp - 164 ; 4 bytes
  tmp4932 EQU rbp - 168 ; 4 bytes
  tmp4931 EQU rbp - 184 ; 16 bytes
  tmp4930 EQU rbp - 200 ; 16 bytes
  goOn EQU rbp - 204 ; 4 bytes
  innerItemIdx EQU rbp - 208 ; 4 bytes
  innerAsmType EQU rbp - 224 ; 16 bytes
  innerTypeForEmit EQU rbp - 240 ; 16 bytes
  innerSize EQU rbp - 244 ; 4 bytes
  innerType EQU rbp - 260 ; 16 bytes
  itemsCnt EQU rbp - 276 ; 16 bytes
  deepIdx EQU rbp - 292 ; 16 bytes
  wantDeepIdx EQU rbp - 308 ; 16 bytes
  items EQU rbp - 324 ; 16 bytes
  name EQU rbp - 340 ; 16 bytes
  this EQU rbp - 356 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 384

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ items ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ deepIdx ], xmm0
  mov [itemsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [innerType + Variant_t.type], VARIANT_UNDEFINED
  mov [innerTypeForEmit + Variant_t.type], VARIANT_UNDEFINED
  mov [innerAsmType + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4930 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4931 + Variant_t.type], VARIANT_UNDEFINED
  mov [itemValue + Variant_t.type], VARIANT_UNDEFINED
  mov [itemType + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4963 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4971 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4972 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ itemsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ items ]
  lea  rdi , [ itemsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4932 ], 0
  lea  rcx, [ tmp4931 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ tmp4932 ]
  lea  r8 , [ tmp4931 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ innerType ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4931 ]
  lea  rdi , [ innerType ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  mov dword [ innerSize ], 0
  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal678 ]
  call __MOLD_VariantMove
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal688 ]
  call __MOLD_VariantMove
  mov dword [ innerItemIdx ], 1
  mov dword [ goOn ], 1
l4934:
  mov dword [ tmp4933 ], 0
  mov dword [ tmp4938 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp4938 ], eax
  setz al
  xor  al, cl
  jnz l4936
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ innerItemIdx ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ tmp4931 ]
  lea  rdx , [ itemsCnt ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4933 ], eax
l4936:
  cmp dword [ tmp4933 ], 0
  jz l4935
  lea  rcx, [ itemValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ innerItemIdx ]
  lea  r8 , [ itemValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ itemType ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ itemValue ]
  lea  rdi , [ itemType ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ itemType ]
  lea  rdx , [ innerType ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4937 ], eax
  cmp dword [ tmp4937 ], 0
  jz l4939
  mov dword [ goOn ], 0
  jmp l4940
l4939:
  lea  rcx , [ itemType ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4938 ], eax
  cmp dword [ tmp4938 ], 0
  jz l4941
  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal689 ]
  call __MOLD_VariantMove
  mov dword [ tmp4943 ], 0
  mov dword [ tmp4932 ], 3
  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp4932 ]
  jge l4944
  mov dword [ tmp4945 ], 1
  mov dword [ tmp4932 ], -2147483648
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4932 ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ itemValue ]
  lea  rdx , [ tmp4931 ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4947 ], eax
  cmp dword [ tmp4947 ], 0
  jnz l4946
  mov dword [ tmp4932 ], 2147483647
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4932 ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ tmp4931 ]
  lea  rdx , [ itemValue ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4945 ], eax
l4946:
  mov eax, dword [ tmp4945 ]
  mov dword [ tmp4943 ], eax
l4944:
  cmp dword [ tmp4943 ], 0
  jz l4948
  mov dword [ innerSize ], 3
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal690 ]
  call __MOLD_VariantMove
  jmp l4949
l4948:
  mov dword [ tmp4945 ], 0
  mov dword [ tmp4932 ], 2
  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp4932 ]
  jge l4950
  mov dword [ tmp4947 ], 1
  mov dword [ tmp4932 ], -32768
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4932 ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ itemValue ]
  lea  rdx , [ tmp4931 ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4952 ], eax
  cmp dword [ tmp4952 ], 0
  jnz l4951
  mov dword [ tmp4932 ], 32767
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4932 ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ tmp4931 ]
  lea  rdx , [ itemValue ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4947 ], eax
l4951:
  mov eax, dword [ tmp4947 ]
  mov dword [ tmp4945 ], eax
l4950:
  cmp dword [ tmp4945 ], 0
  jz l4953
  mov dword [ innerSize ], 2
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal691 ]
  call __MOLD_VariantMove
  jmp l4954
l4953:
  mov dword [ tmp4947 ], 0
  mov dword [ tmp4932 ], 2
  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp4932 ]
  jge l4955
  mov dword [ tmp4952 ], 1
  mov dword [ tmp4932 ], -128
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4932 ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ itemValue ]
  lea  rdx , [ tmp4931 ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4957 ], eax
  cmp dword [ tmp4957 ], 0
  jnz l4956
  mov dword [ tmp4932 ], 127
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4932 ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ tmp4931 ]
  lea  rdx , [ itemValue ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4952 ], eax
l4956:
  mov eax, dword [ tmp4952 ]
  mov dword [ tmp4947 ], eax
l4955:
  cmp dword [ tmp4947 ], 0
  jz l4958
  mov dword [ innerSize ], 1
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal692 ]
  call __MOLD_VariantMove
l4958:
l4959:
l4954:
l4949:
l4941:
l4942:
l4940:
  mov dword [ tmp4960 ], 1
  mov eax, dword [ innerItemIdx ]
  add eax, dword [ tmp4960 ]
  mov dword [ innerItemIdx ], eax
  jmp l4934
l4935:
  lea  rcx , [ wantDeepIdx ]
  lea  rdx , [ deepIdx ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4937 ], eax
  cmp dword [ tmp4937 ], 0
  jz l4961
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ bufferNameBytes ]
  lea  r8 , [ __literal691 ]
  lea  r9 , [ innerTypeForEmit ]
  lea  rax , [ __literal693 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  mov [ tmp4931 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ innerSize ]
  mov [ tmp4931 + Variant_t.value], rax
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal688 ]
  lea  r8 , [ tmp4931 ]
  lea  r9 , [ __literal694 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal695 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal690 ]
  lea  r8 , [ itemsCnt ]
  lea  r9 , [ __literal696 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ innerTypeForEmit ]
  lea  rdx , [ __literal678 ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4930 + Variant_t.value]
  mov dword [ tmp4938 ], eax
  cmp dword [ tmp4938 ], 0
  jz l4964
  lea  rcx, [ tmp4930 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ innerAsmType ]
  lea  rdi , [ tmp4930 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal326 ]
  call __MOLD_VariantMove
  mov dword [ tmp4932 ], 1
  mov eax, dword [ itemsCnt + Variant_t.value]
  mov dword [ tmp4960 ], eax
  mov dword [ itemIdx ], 0
l4967:
  mov eax, dword [ itemIdx ]
  cmp eax, dword [ tmp4960 ]
  jge l4968
  lea  rcx, [ tmp4930 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sep ]
  lea  rdi , [ tmp4930 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4931 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ itemIdx ]
  lea  r8 , [ tmp4931 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4930 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4931 ]
  lea  rdi , [ tmp4930 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal419 ]
  call __MOLD_VariantMove
  mov eax, dword [ itemIdx ]
  add eax, dword [ tmp4932 ]
  mov dword [ itemIdx ], eax
  jmp l4967
l4968:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp4966 ], -1
  mov [ itemsCnt + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4966 ]
  mov [ itemsCnt + Variant_t.value], rax
l4964:
l4965:
l4961:
l4962:
  mov dword [ tmp4966 ], 1
  mov eax, dword [ itemsCnt + Variant_t.value]
  mov dword [ tmp4960 ], eax
  mov dword [ itemIdx ], 0
l4969:
  mov eax, dword [ itemIdx ]
  cmp eax, dword [ tmp4960 ]
  jge l4970
  mov [ tmp4972 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ itemIdx ]
  mov [ tmp4972 + Variant_t.value], rax
  lea  rcx, [ tmp4931 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4972 ]
  lea  rdi , [ tmp4931 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4971 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal244 ]
  lea  rdx , [ tmp4931 ]
  lea  r8 , [ tmp4971 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4963 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp4971 ]
  lea  r8 , [ tmp4963 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4931 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ itemIdx ]
  lea  r8 , [ tmp4931 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4930 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4963 ]
  lea  r8 , [ tmp4931 ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ deepIdx ]
  push rax
  lea  rdi , [ tmp4930 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_emitConstant$5
  add rsp, 8
  pop rdi
  mov eax, dword [ itemIdx ]
  add eax, dword [ tmp4966 ]
  mov dword [ itemIdx ], eax
  jmp l4969
l4970:

  ; clean frame
  ; -----------
  lea  rcx, [ itemsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ innerType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4930 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4931 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ itemValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ itemType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4972 ]
  call __MOLD_VariantDestroy

  add  rsp, 384
  pop  rbp
  ret

  restore this
  restore name
  restore items
  restore wantDeepIdx
  restore deepIdx
  restore itemsCnt
  restore innerType
  restore innerSize
  restore innerTypeForEmit
  restore innerAsmType
  restore innerItemIdx
  restore goOn
  restore tmp4930
  restore tmp4931
  restore tmp4932
  restore tmp4933
  restore tmp4937
  restore tmp4938
  restore tmp4943
  restore tmp4945
  restore tmp4947
  restore tmp4952
  restore tmp4957
  restore tmp4960
  restore itemValue
  restore itemType
  restore tmp4963
  restore tmp4966
  restore bufferNameBytes
  restore sep
  restore itemIdx
  restore tmp4971
  restore tmp4972
; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_int64$5
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_int64$5:
  ; init frame
  ; ----------
  tmp4974 EQU rbp - 24 ; 16 bytes
  tmp4973 EQU rbp - 40 ; 16 bytes
  cc EQU rbp - 56 ; 16 bytes
  y EQU rbp - 72 ; 16 bytes
  x EQU rbp - 88 ; 16 bytes
  dst EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ cc ], xmm0
  mov [tmp4973 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4974 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal699 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal700 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4974 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal701 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4974 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ tmp4974 ]
  lea  r8 , [ __literal702 ]
  lea  r9 , [ dst ]
  lea  rax , [ __literal34 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4973 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4973
  restore tmp4974
; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_int32$5
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_int32$5:
  ; init frame
  ; ----------
  tmp4976 EQU rbp - 24 ; 16 bytes
  tmp4975 EQU rbp - 40 ; 16 bytes
  cc EQU rbp - 56 ; 16 bytes
  y EQU rbp - 72 ; 16 bytes
  x EQU rbp - 88 ; 16 bytes
  dst EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ cc ], xmm0
  mov [tmp4975 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4976 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal703 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal704 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal701 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4976 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ tmp4976 ]
  lea  r8 , [ __literal702 ]
  lea  r9 , [ dst ]
  lea  rax , [ __literal34 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4975 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4975
  restore tmp4976
; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_float64$5
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_float64$5:
  ; init frame
  ; ----------
  tmp4978 EQU rbp - 24 ; 16 bytes
  tmp4977 EQU rbp - 40 ; 16 bytes
  cc EQU rbp - 56 ; 16 bytes
  y EQU rbp - 72 ; 16 bytes
  x EQU rbp - 88 ; 16 bytes
  dst EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ cc ], xmm0
  mov [tmp4977 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4978 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ __literal705 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4978 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal701 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4978 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp4978 ]
  lea  r8 , [ __literal708 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4977 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4977
  restore tmp4978
; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_int64$5
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_int64$5:
  ; init frame
  ; ----------
  tmp4980 EQU rbp - 24 ; 16 bytes
  tmp4979 EQU rbp - 40 ; 16 bytes
  cc EQU rbp - 56 ; 16 bytes
  y EQU rbp - 72 ; 16 bytes
  x EQU rbp - 88 ; 16 bytes
  dst EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ cc ], xmm0
  mov [tmp4979 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4980 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal711 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal712 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4980 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp4980 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4979 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4979
  restore tmp4980
; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_int32$5
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_int32$5:
  ; init frame
  ; ----------
  tmp4986 EQU rbp - 24 ; 16 bytes
  tmp4983 EQU rbp - 28 ; 4 bytes
  tmp4982 EQU rbp - 44 ; 16 bytes
  tmp4981 EQU rbp - 60 ; 16 bytes
  cc EQU rbp - 76 ; 16 bytes
  y EQU rbp - 92 ; 16 bytes
  x EQU rbp - 108 ; 16 bytes
  dst EQU rbp - 124 ; 16 bytes
  this EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [rax]
  movdqu [ cc ], xmm0
  mov [tmp4981 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4982 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4986 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4982 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp4982 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4982 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4981 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4981 + Variant_t.value]
  mov dword [ tmp4983 ], eax
  cmp dword [ tmp4983 ], 0
  jz l4984
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ y ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l4985
l4984:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal716 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
l4985:
  lea  rcx, [ tmp4986 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal712 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4986 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp4986 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4981 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4982 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4981
  restore tmp4982
  restore tmp4983
  restore tmp4986
; -----------------------------------------------
; function __CodeGeneratorX64_run$2
; -----------------------------------------------
__CodeGeneratorX64_run$2:
  ; init frame
  ; ----------
  tmp5581 EQU rbp - 24 ; 16 bytes
  procName EQU rbp - 40 ; 16 bytes
  methodPtr EQU rbp - 56 ; 16 bytes
  methodProto EQU rbp - 72 ; 16 bytes
  methodName EQU rbp - 88 ; 16 bytes
  methodIdx EQU rbp - 92 ; 4 bytes
  vtable EQU rbp - 108 ; 16 bytes
  className EQU rbp - 124 ; 16 bytes
  classProto EQU rbp - 140 ; 16 bytes
  classIdx EQU rbp - 144 ; 4 bytes
  tmp5572 EQU rbp - 148 ; 4 bytes
  nextLabel EQU rbp - 164 ; 16 bytes
  labelIdx EQU rbp - 180 ; 16 bytes
  defaultLabel EQU rbp - 196 ; 16 bytes
  labels EQU rbp - 212 ; 16 bytes
  value EQU rbp - 228 ; 16 bytes
  symbolInfo EQU rbp - 244 ; 16 bytes
  deepIdx EQU rbp - 248 ; 4 bytes
  varSize EQU rbp - 252 ; 4 bytes
  symbol EQU rbp - 268 ; 16 bytes
  symbolIdx EQU rbp - 272 ; 4 bytes
  v EQU rbp - 288 ; 16 bytes
  paramIdx EQU rbp - 292 ; 4 bytes
  symbolsIndex EQU rbp - 308 ; 16 bytes
  symbolsCnt EQU rbp - 324 ; 16 bytes
  paramsPassedCnt EQU rbp - 328 ; 4 bytes
  regParams EQU rbp - 344 ; 16 bytes
  currentFrame EQU rbp - 360 ; 16 bytes
  proto EQU rbp - 376 ; 16 bytes
  oneItem EQU rbp - 392 ; 16 bytes
  methodId EQU rbp - 408 ; 16 bytes
  name EQU rbp - 424 ; 16 bytes
  rv EQU rbp - 440 ; 16 bytes
  idx EQU rbp - 444 ; 4 bytes
  newParams EQU rbp - 460 ; 16 bytes
  paramsCnt EQU rbp - 476 ; 16 bytes
  params EQU rbp - 492 ; 16 bytes
  xInfo EQU rbp - 508 ; 16 bytes
  yInfo EQU rbp - 524 ; 16 bytes
  yType EQU rbp - 540 ; 16 bytes
  xType EQU rbp - 556 ; 16 bytes
  originalOpcode EQU rbp - 572 ; 16 bytes
  y EQU rbp - 588 ; 16 bytes
  x EQU rbp - 604 ; 16 bytes
  dst EQU rbp - 620 ; 16 bytes
  opcode EQU rbp - 636 ; 16 bytes
  itemCnt EQU rbp - 652 ; 16 bytes
  item EQU rbp - 668 ; 16 bytes
  tmp5537 EQU rbp - 672 ; 4 bytes
  tmp5534 EQU rbp - 676 ; 4 bytes
  tmp5531 EQU rbp - 680 ; 4 bytes
  tmp5528 EQU rbp - 684 ; 4 bytes
  tmp5478 EQU rbp - 688 ; 4 bytes
  tmp5471 EQU rbp - 692 ; 4 bytes
  tmp5469 EQU rbp - 696 ; 4 bytes
  tmp5456 EQU rbp - 700 ; 4 bytes
  tmp5443 EQU rbp - 704 ; 4 bytes
  tmp5428 EQU rbp - 708 ; 4 bytes
  tmp5426 EQU rbp - 712 ; 4 bytes
  tmp5424 EQU rbp - 716 ; 4 bytes
  tmp5419 EQU rbp - 720 ; 4 bytes
  tmp5416 EQU rbp - 724 ; 4 bytes
  tmp5413 EQU rbp - 728 ; 4 bytes
  tmp5410 EQU rbp - 732 ; 4 bytes
  tmp5405 EQU rbp - 736 ; 4 bytes
  tmp5403 EQU rbp - 740 ; 4 bytes
  tmp5396 EQU rbp - 744 ; 4 bytes
  tmp5393 EQU rbp - 748 ; 4 bytes
  tmp5388 EQU rbp - 752 ; 4 bytes
  tmp5383 EQU rbp - 756 ; 4 bytes
  tmp5378 EQU rbp - 760 ; 4 bytes
  tmp5373 EQU rbp - 764 ; 4 bytes
  tmp5368 EQU rbp - 768 ; 4 bytes
  tmp5365 EQU rbp - 772 ; 4 bytes
  tmp5362 EQU rbp - 776 ; 4 bytes
  tmp5343 EQU rbp - 780 ; 4 bytes
  tmp5340 EQU rbp - 784 ; 4 bytes
  tmp5335 EQU rbp - 788 ; 4 bytes
  tmp5333 EQU rbp - 792 ; 4 bytes
  tmp5330 EQU rbp - 796 ; 4 bytes
  tmp5327 EQU rbp - 800 ; 4 bytes
  tmp5322 EQU rbp - 816 ; 16 bytes
  tmp5319 EQU rbp - 820 ; 4 bytes
  tmp5318 EQU rbp - 824 ; 4 bytes
  tmp5317 EQU rbp - 828 ; 4 bytes
  tmp5314 EQU rbp - 832 ; 4 bytes
  tmp5313 EQU rbp - 836 ; 4 bytes
  tmp5310 EQU rbp - 840 ; 4 bytes
  tmp5307 EQU rbp - 844 ; 4 bytes
  tmp5304 EQU rbp - 848 ; 4 bytes
  tmp5301 EQU rbp - 852 ; 4 bytes
  tmp5298 EQU rbp - 856 ; 4 bytes
  tmp5295 EQU rbp - 860 ; 4 bytes
  tmp5292 EQU rbp - 864 ; 4 bytes
  tmp5289 EQU rbp - 868 ; 4 bytes
  tmp5286 EQU rbp - 872 ; 4 bytes
  tmp5283 EQU rbp - 876 ; 4 bytes
  tmp5280 EQU rbp - 880 ; 4 bytes
  tmp5277 EQU rbp - 884 ; 4 bytes
  tmp5274 EQU rbp - 888 ; 4 bytes
  tmp5271 EQU rbp - 892 ; 4 bytes
  tmp5268 EQU rbp - 896 ; 4 bytes
  tmp5265 EQU rbp - 900 ; 4 bytes
  tmp5262 EQU rbp - 904 ; 4 bytes
  tmp5259 EQU rbp - 908 ; 4 bytes
  tmp5256 EQU rbp - 912 ; 4 bytes
  tmp5253 EQU rbp - 916 ; 4 bytes
  tmp5250 EQU rbp - 920 ; 4 bytes
  tmp5247 EQU rbp - 924 ; 4 bytes
  tmp5244 EQU rbp - 928 ; 4 bytes
  tmp5241 EQU rbp - 932 ; 4 bytes
  tmp5238 EQU rbp - 936 ; 4 bytes
  tmp5235 EQU rbp - 940 ; 4 bytes
  tmp5228 EQU rbp - 944 ; 4 bytes
  tmp5225 EQU rbp - 948 ; 4 bytes
  tmp5222 EQU rbp - 952 ; 4 bytes
  tmp5219 EQU rbp - 956 ; 4 bytes
  tmp5216 EQU rbp - 960 ; 4 bytes
  tmp5213 EQU rbp - 964 ; 4 bytes
  tmp5210 EQU rbp - 968 ; 4 bytes
  tmp5207 EQU rbp - 972 ; 4 bytes
  tmp5204 EQU rbp - 976 ; 4 bytes
  tmp5201 EQU rbp - 980 ; 4 bytes
  tmp5198 EQU rbp - 984 ; 4 bytes
  tmp5195 EQU rbp - 988 ; 4 bytes
  tmp5192 EQU rbp - 992 ; 4 bytes
  tmp5189 EQU rbp - 996 ; 4 bytes
  tmp5186 EQU rbp - 1000 ; 4 bytes
  tmp5183 EQU rbp - 1004 ; 4 bytes
  tmp5178 EQU rbp - 1008 ; 4 bytes
  tmp5174 EQU rbp - 1012 ; 4 bytes
  tmp5172 EQU rbp - 1016 ; 4 bytes
  tmp5169 EQU rbp - 1020 ; 4 bytes
  tmp5166 EQU rbp - 1024 ; 4 bytes
  tmp5163 EQU rbp - 1028 ; 4 bytes
  tmp5158 EQU rbp - 1032 ; 4 bytes
  tmp5156 EQU rbp - 1036 ; 4 bytes
  tmp5153 EQU rbp - 1040 ; 4 bytes
  tmp5150 EQU rbp - 1044 ; 4 bytes
  tmp5147 EQU rbp - 1048 ; 4 bytes
  tmp5144 EQU rbp - 1052 ; 4 bytes
  tmp5141 EQU rbp - 1056 ; 4 bytes
  tmp5138 EQU rbp - 1060 ; 4 bytes
  tmp5135 EQU rbp - 1064 ; 4 bytes
  tmp5132 EQU rbp - 1068 ; 4 bytes
  tmp5129 EQU rbp - 1072 ; 4 bytes
  tmp5126 EQU rbp - 1076 ; 4 bytes
  tmp5123 EQU rbp - 1080 ; 4 bytes
  tmp5120 EQU rbp - 1084 ; 4 bytes
  tmp5117 EQU rbp - 1088 ; 4 bytes
  tmp5114 EQU rbp - 1092 ; 4 bytes
  tmp5111 EQU rbp - 1096 ; 4 bytes
  tmp5108 EQU rbp - 1100 ; 4 bytes
  tmp5105 EQU rbp - 1104 ; 4 bytes
  tmp5102 EQU rbp - 1108 ; 4 bytes
  tmp5099 EQU rbp - 1112 ; 4 bytes
  tmp5096 EQU rbp - 1116 ; 4 bytes
  tmp5093 EQU rbp - 1120 ; 4 bytes
  tmp5090 EQU rbp - 1124 ; 4 bytes
  tmp5087 EQU rbp - 1128 ; 4 bytes
  tmp5084 EQU rbp - 1132 ; 4 bytes
  tmp5081 EQU rbp - 1136 ; 4 bytes
  tmp5078 EQU rbp - 1140 ; 4 bytes
  tmp5075 EQU rbp - 1144 ; 4 bytes
  tmp5072 EQU rbp - 1148 ; 4 bytes
  tmp5069 EQU rbp - 1152 ; 4 bytes
  tmp5066 EQU rbp - 1156 ; 4 bytes
  tmp5063 EQU rbp - 1160 ; 4 bytes
  tmp5060 EQU rbp - 1164 ; 4 bytes
  tmp5057 EQU rbp - 1168 ; 4 bytes
  tmp5054 EQU rbp - 1172 ; 4 bytes
  tmp5051 EQU rbp - 1176 ; 4 bytes
  tmp5048 EQU rbp - 1180 ; 4 bytes
  tmp5045 EQU rbp - 1184 ; 4 bytes
  tmp5042 EQU rbp - 1188 ; 4 bytes
  tmp5037 EQU rbp - 1192 ; 4 bytes
  tmp5033 EQU rbp - 1196 ; 4 bytes
  tmp5015 EQU rbp - 1212 ; 16 bytes
  tmp5014 EQU rbp - 1228 ; 16 bytes
  tmp5011 EQU rbp - 1244 ; 16 bytes
  tmp5004 EQU rbp - 1248 ; 4 bytes
  tmp5002 EQU rbp - 1252 ; 4 bytes
  tmp5000 EQU rbp - 1256 ; 4 bytes
  tmp4998 EQU rbp - 1260 ; 4 bytes
  tmp4994 EQU rbp - 1264 ; 4 bytes
  tmp4993 EQU rbp - 1280 ; 16 bytes
  tmp4989 EQU rbp - 1284 ; 4 bytes
  tmp4988 EQU rbp - 1288 ; 4 bytes
  tmp4987 EQU rbp - 1304 ; 16 bytes
  methodsListCnt EQU rbp - 1320 ; 16 bytes
  methodsList EQU rbp - 1336 ; 16 bytes
  classList EQU rbp - 1352 ; 16 bytes
  classListCnt EQU rbp - 1368 ; 16 bytes
  globals EQU rbp - 1384 ; 16 bytes
  arrayOfProcedures EQU rbp - 1400 ; 16 bytes
  symbols EQU rbp - 1416 ; 16 bytes
  currentFrameSize EQU rbp - 1420 ; 4 bytes
  currentSymbols EQU rbp - 1436 ; 16 bytes
  currentProcName EQU rbp - 1452 ; 16 bytes
  quads EQU rbp - 1468 ; 16 bytes
  codeObj EQU rbp - 1484 ; 16 bytes
  this EQU rbp - 1500 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 1536

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ codeObj ], xmm0
  mov [quads + Variant_t.type], VARIANT_UNDEFINED
  mov [currentProcName + Variant_t.type], VARIANT_UNDEFINED
  mov [currentSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  mov [arrayOfProcedures + Variant_t.type], VARIANT_UNDEFINED
  mov [globals + Variant_t.type], VARIANT_UNDEFINED
  mov [classListCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [classList + Variant_t.type], VARIANT_UNDEFINED
  mov [methodsList + Variant_t.type], VARIANT_UNDEFINED
  mov [methodsListCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4987 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4993 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5011 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5014 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5015 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5322 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [itemCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [originalOpcode + Variant_t.type], VARIANT_UNDEFINED
  mov [xType + Variant_t.type], VARIANT_UNDEFINED
  mov [yType + Variant_t.type], VARIANT_UNDEFINED
  mov [yInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [xInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [newParams + Variant_t.type], VARIANT_UNDEFINED
  mov [rv + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [methodId + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [proto + Variant_t.type], VARIANT_UNDEFINED
  mov [currentFrame + Variant_t.type], VARIANT_UNDEFINED
  mov [regParams + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsIndex + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbol + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [labels + Variant_t.type], VARIANT_UNDEFINED
  mov [defaultLabel + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [className + Variant_t.type], VARIANT_UNDEFINED
  mov [vtable + Variant_t.type], VARIANT_UNDEFINED
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodPtr + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp5581 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ __literal717 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal718 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal719 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal721 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal722 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal723 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ quads ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ quads ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4988 ], 0
  mov eax, dword [ tmp4988 ]
  mov [ currentProcName + Variant_t.type], VARIANT_BOOLEAN
  mov [ currentProcName + Variant_t.value], rax
  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentSymbols ]
  call  __MOLD_VariantMapCreate
  mov dword [ currentFrameSize ], 0
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbols ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ arrayOfProcedures ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfProcedures ]
  call  __MOLD_VariantArrayCreate
; 
; -----------------------------
; BEGIN: for keys -1 values item
; 
  jmp l4991
l4990:
  lea  rcx, [ itemCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ itemCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4989 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4989 ], 1
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4989 ], 2
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4989 ], 3
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ originalOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ originalOpcode ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea rcx, [ xType ]
  lea rdx, [ __literal158 ]
  call __MOLD_VariantMove
  lea  rcx, [ yType ]
  call __MOLD_VariantDestroy
  lea rcx, [ yType ]
  lea rdx, [ __literal158 ]
  call __MOLD_VariantMove
  mov dword [ tmp4988 ], 0
  mov dword [ tmp4989 ], 2
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ itemCnt ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4994 ], eax
  cmp dword [ tmp4994 ], 0
  jz l4992
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4988 ], eax
l4992:
  cmp dword [ tmp4988 ], 0
  jz l4995
  mov dword [ tmp4994 ], 0
  mov dword [ tmp4998 ], 0
  mov dword [ tmp5000 ], 0
  mov dword [ tmp5002 ], 0
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5004 ], eax
  cmp dword [ tmp5004 ], 0
  jz l5003
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5002 ], eax
l5003:
  cmp dword [ tmp5002 ], 0
  jz l5001
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal614 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5000 ], eax
l5001:
  cmp dword [ tmp5000 ], 0
  jz l4999
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal622 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4998 ], eax
l4999:
  cmp dword [ tmp4998 ], 0
  jz l4997
  mov dword [ tmp4998 ], 1
  mov dword [ tmp4989 ], 0
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal725 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5000 ], eax
  cmp dword [ tmp5000 ], 0
  jnz l5005
  mov dword [ tmp4989 ], 1
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal114 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4998 ], eax
l5005:
  mov eax, dword [ tmp4998 ]
  mov dword [ tmp4994 ], eax
l4997:
  cmp dword [ tmp4994 ], 0
  jz l5006
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal617 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4998 ], eax
  cmp dword [ tmp4998 ], 0
  jz l5008
  lea  rcx, [ yInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentSymbols ]
  lea  rdx , [ y ]
  lea  r8 , [ yInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5000 ], 0
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ yInfo ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5002 ], eax
  cmp dword [ tmp5002 ], 0
  jz l5010
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ yInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5011 ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5000 ], eax
l5010:
  cmp dword [ tmp5000 ], 0
  jz l5012
  lea  rcx, [ yType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ yInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ yType ]
  call  __MOLD_VariantLoadFromKey
l5012:
l5013:
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal244 ]
  lea  rdx , [ yType ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin
  jmp l5009
l5008:
  lea  rcx, [ xInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentSymbols ]
  lea  rdx , [ x ]
  lea  r8 , [ xInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5000 ], 0
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ xInfo ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5002 ], eax
  cmp dword [ tmp5002 ], 0
  jz l5016
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5011 ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5000 ], eax
l5016:
  cmp dword [ tmp5000 ], 0
  jz l5017
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ xType ]
  call  __MOLD_VariantLoadFromKey
l5017:
l5018:
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal244 ]
  lea  rdx , [ xType ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin
l5009:
l5006:
l5007:
l4995:
l4996:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal144 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4988 ], eax
  cmp dword [ tmp4988 ], 0
  jz l5019
  lea  rcx , [ __literal726 ]
  call  __MOLD_PrintVariantLn
  jmp l5020
l5019:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4994 ], eax
  cmp dword [ tmp4994 ], 0
  jz l5021
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal653 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5022
l5021:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal168 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4998 ], eax
  cmp dword [ tmp4998 ], 0
  jz l5023
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
  jmp l5024
l5023:
  mov dword [ tmp5000 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal727 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5002 ], eax
  cmp dword [ tmp5002 ], 0
  jnz l5025
  mov dword [ tmp5002 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal728 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5004 ], eax
  cmp dword [ tmp5004 ], 0
  jnz l5026
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal729 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5002 ], eax
l5026:
  mov eax, dword [ tmp5002 ]
  mov dword [ tmp5000 ], eax
l5025:
  cmp dword [ tmp5000 ], 0
  jz l5027
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantMove$3
  pop rdi
  jmp l5028
l5027:
  mov dword [ tmp5002 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal730 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5004 ], eax
  cmp dword [ tmp5004 ], 0
  jnz l5029
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal731 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5002 ], eax
l5029:
  cmp dword [ tmp5002 ], 0
  jz l5030
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5031
l5030:
  mov dword [ tmp5004 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal732 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5033 ], eax
  cmp dword [ tmp5033 ], 0
  jnz l5032
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal733 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5004 ], eax
l5032:
  cmp dword [ tmp5004 ], 0
  jz l5034
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5035
l5034:
  mov dword [ tmp5033 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal736 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5037 ], eax
  cmp dword [ tmp5037 ], 0
  jnz l5036
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal737 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5033 ], eax
l5036:
  cmp dword [ tmp5033 ], 0
  jz l5038
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ __literal738 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5039
l5038:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal741 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5037 ], eax
  cmp dword [ tmp5037 ], 0
  jz l5040
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ __literal742 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5041
l5040:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal743 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5042 ], eax
  cmp dword [ tmp5042 ], 0
  jz l5043
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ __literal744 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5044
l5043:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal745 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5045 ], eax
  cmp dword [ tmp5045 ], 0
  jz l5046
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal746 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5047
l5046:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal747 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5048 ], eax
  cmp dword [ tmp5048 ], 0
  jz l5049
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal748 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5050
l5049:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal749 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5051 ], eax
  cmp dword [ tmp5051 ], 0
  jz l5052
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal750 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5053
l5052:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal751 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5054 ], eax
  cmp dword [ tmp5054 ], 0
  jz l5055
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal699 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal752 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal753 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5056
l5055:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal754 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5057 ], eax
  cmp dword [ tmp5057 ], 0
  jz l5058
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal755 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal756 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal757 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal758 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5059
l5058:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal759 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5060 ], eax
  cmp dword [ tmp5060 ], 0
  jz l5061
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal760 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal761 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal762 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal763 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal764 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5062
l5061:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal765 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5063 ], eax
  cmp dword [ tmp5063 ], 0
  jz l5064
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal766 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5065
l5064:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal767 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5066 ], eax
  cmp dword [ tmp5066 ], 0
  jz l5067
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal768 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5068
l5067:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal769 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5069 ], eax
  cmp dword [ tmp5069 ], 0
  jz l5070
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal223 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5071
l5070:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal770 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5072 ], eax
  cmp dword [ tmp5072 ], 0
  jz l5073
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal126 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5074
l5073:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal771 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5075 ], eax
  cmp dword [ tmp5075 ], 0
  jz l5076
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal772 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5077
l5076:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal773 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5078 ], eax
  cmp dword [ tmp5078 ], 0
  jz l5079
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal128 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5080
l5079:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal774 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5081 ], eax
  cmp dword [ tmp5081 ], 0
  jz l5082
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal775 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5083
l5082:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal776 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5084 ], eax
  cmp dword [ tmp5084 ], 0
  jz l5085
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal777 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5086
l5085:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal778 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5087 ], eax
  cmp dword [ tmp5087 ], 0
  jz l5088
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal779 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5089
l5088:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal780 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5090 ], eax
  cmp dword [ tmp5090 ], 0
  jz l5091
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal703 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal781 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal782 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5092
l5091:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal783 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5093 ], eax
  cmp dword [ tmp5093 ], 0
  jz l5094
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal784 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal785 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal757 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal758 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5095
l5094:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal786 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5096 ], eax
  cmp dword [ tmp5096 ], 0
  jz l5097
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal787 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal788 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal789 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal790 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal791 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5098
l5097:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal792 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5099 ], eax
  cmp dword [ tmp5099 ], 0
  jz l5100
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal766 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5101
l5100:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal793 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5102 ], eax
  cmp dword [ tmp5102 ], 0
  jz l5103
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal768 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5104
l5103:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal794 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5105 ], eax
  cmp dword [ tmp5105 ], 0
  jz l5106
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal223 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5107
l5106:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal795 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5108 ], eax
  cmp dword [ tmp5108 ], 0
  jz l5109
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal126 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5110
l5109:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal796 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5111 ], eax
  cmp dword [ tmp5111 ], 0
  jz l5112
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal772 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5113
l5112:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal797 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5114 ], eax
  cmp dword [ tmp5114 ], 0
  jz l5115
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal128 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5116
l5115:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal798 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5117 ], eax
  cmp dword [ tmp5117 ], 0
  jz l5118
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal799 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5119
l5118:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal800 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5120 ], eax
  cmp dword [ tmp5120 ], 0
  jz l5121
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal801 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal802 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal803 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5122
l5121:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal804 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5123 ], eax
  cmp dword [ tmp5123 ], 0
  jz l5124
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal801 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal805 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal803 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5125
l5124:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal806 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5126 ], eax
  cmp dword [ tmp5126 ], 0
  jz l5127
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal801 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal807 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal803 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5128
l5127:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal808 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5129 ], eax
  cmp dword [ tmp5129 ], 0
  jz l5130
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal801 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal809 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal803 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5131
l5130:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal810 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5132 ], eax
  cmp dword [ tmp5132 ], 0
  jz l5133
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal811 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal812 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal757 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal813 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal814 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5134
l5133:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal815 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5135 ], eax
  cmp dword [ tmp5135 ], 0
  jz l5136
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal766 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_float64$5
  add rsp, 8
  pop rdi
  jmp l5137
l5136:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal816 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5138 ], eax
  cmp dword [ tmp5138 ], 0
  jz l5139
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal768 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_float64$5
  add rsp, 8
  pop rdi
  jmp l5140
l5139:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal817 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5141 ], eax
  cmp dword [ tmp5141 ], 0
  jz l5142
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal112 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_float64$5
  add rsp, 8
  pop rdi
  jmp l5143
l5142:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal818 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5144 ], eax
  cmp dword [ tmp5144 ], 0
  jz l5145
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal819 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_float64$5
  add rsp, 8
  pop rdi
  jmp l5146
l5145:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal820 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5147 ], eax
  cmp dword [ tmp5147 ], 0
  jz l5148
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal113 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_float64$5
  add rsp, 8
  pop rdi
  jmp l5149
l5148:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal821 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5150 ], eax
  cmp dword [ tmp5150 ], 0
  jz l5151
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal128 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__cmp_cc_float64$5
  add rsp, 8
  pop rdi
  jmp l5152
l5151:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal822 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5153 ], eax
  cmp dword [ tmp5153 ], 0
  jz l5154
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal823 ]
  lea  r8 , [ x ]
  lea  r9 , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call2$4
  pop rdi
  jmp l5155
l5154:
  mov dword [ tmp5156 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal824 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5158 ], eax
  cmp dword [ tmp5158 ], 0
  jnz l5157
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal825 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5156 ], eax
l5157:
  cmp dword [ tmp5156 ], 0
  jz l5159
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal826 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5160
l5159:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal827 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5158 ], eax
  cmp dword [ tmp5158 ], 0
  jz l5161
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal828 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5162
l5161:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal829 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5163 ], eax
  cmp dword [ tmp5163 ], 0
  jz l5164
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal830 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5165
l5164:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal831 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5166 ], eax
  cmp dword [ tmp5166 ], 0
  jz l5167
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal832 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5168
l5167:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal833 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5169 ], eax
  cmp dword [ tmp5169 ], 0
  jz l5170
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal834 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5171
l5170:
  mov dword [ tmp5172 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal835 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5174 ], eax
  cmp dword [ tmp5174 ], 0
  jnz l5173
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal836 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5172 ], eax
l5173:
  cmp dword [ tmp5172 ], 0
  jz l5175
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal837 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5176
l5175:
  mov dword [ tmp5174 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal838 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5178 ], eax
  cmp dword [ tmp5178 ], 0
  jnz l5177
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal839 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5174 ], eax
l5177:
  cmp dword [ tmp5174 ], 0
  jz l5179
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal840 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5180
l5179:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal841 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5178 ], eax
  cmp dword [ tmp5178 ], 0
  jz l5181
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal842 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5182
l5181:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal843 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5183 ], eax
  cmp dword [ tmp5183 ], 0
  jz l5184
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal844 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5185
l5184:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal845 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5186 ], eax
  cmp dword [ tmp5186 ], 0
  jz l5187
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal842 ]
  lea  r8 , [ y ]
  lea  r9 , [ x ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5188
l5187:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal846 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5189 ], eax
  cmp dword [ tmp5189 ], 0
  jz l5190
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal844 ]
  lea  r8 , [ y ]
  lea  r9 , [ x ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5191
l5190:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal593 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5192 ], eax
  cmp dword [ tmp5192 ], 0
  jz l5193
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal847 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3AndDestroy$5
  add rsp, 8
  pop rdi
  jmp l5194
l5193:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal848 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5195 ], eax
  cmp dword [ tmp5195 ], 0
  jz l5196
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal849 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal850 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal851 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal852 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5197
l5196:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal853 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5198 ], eax
  cmp dword [ tmp5198 ], 0
  jz l5199
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal851 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal852 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5200
l5199:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal854 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5201 ], eax
  cmp dword [ tmp5201 ], 0
  jz l5202
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal855 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal856 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal857 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5203
l5202:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal859 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5204 ], eax
  cmp dword [ tmp5204 ], 0
  jz l5205
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal855 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal860 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal857 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5206
l5205:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal861 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5207 ], eax
  cmp dword [ tmp5207 ], 0
  jz l5208
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal855 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal862 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal857 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5209
l5208:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal863 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5210 ], eax
  cmp dword [ tmp5210 ], 0
  jz l5211
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal855 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal864 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal857 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5212
l5211:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal865 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5213 ], eax
  cmp dword [ tmp5213 ], 0
  jz l5214
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal855 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal862 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal857 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5215
l5214:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal866 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5216 ], eax
  cmp dword [ tmp5216 ], 0
  jz l5217
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal855 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal864 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal857 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5218
l5217:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal867 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5219 ], eax
  cmp dword [ tmp5219 ], 0
  jz l5220
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal868 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5221
l5220:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal600 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5222 ], eax
  cmp dword [ tmp5222 ], 0
  jz l5223
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ x ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l5224
l5223:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal603 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5225 ], eax
  cmp dword [ tmp5225 ], 0
  jz l5226
  mov dword [ tmp5228 ], 1
  mov eax, dword [ tmp5228 ]
  mov [ tmp4993 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5228 ], eax
  cmp dword [ tmp5228 ], 0
  jz l5229
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5014 ]
  lea rdx, [ __const5231 ]
  call __MOLD_VariantMove
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ tmp5014 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l5230
l5229:
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5014 ]
  lea rdx, [ __const5232 ]
  call __MOLD_VariantMove
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ tmp5014 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
l5230:
  jmp l5227
l5226:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal602 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5228 ], eax
  cmp dword [ tmp5228 ], 0
  jz l5233
  lea  rcx , [ __literal869 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal870 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5234
l5233:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal871 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5235 ], eax
  cmp dword [ tmp5235 ], 0
  jz l5236
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal766 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5237
l5236:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal872 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5238 ], eax
  cmp dword [ tmp5238 ], 0
  jz l5239
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal768 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5240
l5239:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal873 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5241 ], eax
  cmp dword [ tmp5241 ], 0
  jz l5242
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal223 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5243
l5242:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal874 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5244 ], eax
  cmp dword [ tmp5244 ], 0
  jz l5245
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal126 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5246
l5245:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal875 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5247 ], eax
  cmp dword [ tmp5247 ], 0
  jz l5248
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal772 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5249
l5248:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal876 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5250 ], eax
  cmp dword [ tmp5250 ], 0
  jz l5251
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal128 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int64$5
  add rsp, 8
  pop rdi
  jmp l5252
l5251:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal877 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5253 ], eax
  cmp dword [ tmp5253 ], 0
  jz l5254
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal766 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5255
l5254:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal878 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5256 ], eax
  cmp dword [ tmp5256 ], 0
  jz l5257
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal768 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5258
l5257:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal879 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5259 ], eax
  cmp dword [ tmp5259 ], 0
  jz l5260
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal223 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5261
l5260:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal880 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5262 ], eax
  cmp dword [ tmp5262 ], 0
  jz l5263
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal126 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5264
l5263:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal881 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5265 ], eax
  cmp dword [ tmp5265 ], 0
  jz l5266
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal772 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5267
l5266:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal882 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5268 ], eax
  cmp dword [ tmp5268 ], 0
  jz l5269
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal128 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__jmp_if_cc_int32$5
  add rsp, 8
  pop rdi
  jmp l5270
l5269:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal883 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5271 ], eax
  cmp dword [ tmp5271 ], 0
  jz l5272
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5273
l5272:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal884 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5274 ], eax
  cmp dword [ tmp5274 ], 0
  jz l5275
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal885 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5276
l5275:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal886 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5277 ], eax
  cmp dword [ tmp5277 ], 0
  jz l5278
  lea  rcx , [ __literal887 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal888 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal889 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal888 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal890 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal891 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5279
l5278:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal892 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5280 ], eax
  cmp dword [ tmp5280 ], 0
  jz l5281
  lea  rcx , [ __literal893 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal894 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal895 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal894 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal896 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal897 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5282
l5281:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal898 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5283 ], eax
  cmp dword [ tmp5283 ], 0
  jz l5284
  lea  rcx , [ __literal887 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal888 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal889 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal888 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal890 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal891 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal899 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5285
l5284:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal900 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5286 ], eax
  cmp dword [ tmp5286 ], 0
  jz l5287
  lea  rcx , [ __literal893 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal894 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal895 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal894 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal896 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal897 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal791 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5288
l5287:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal901 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5289 ], eax
  cmp dword [ tmp5289 ], 0
  jz l5290
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal885 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5291
l5290:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal902 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5292 ], eax
  cmp dword [ tmp5292 ], 0
  jz l5293
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal858 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5294
l5293:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal903 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5295 ], eax
  cmp dword [ tmp5295 ], 0
  jz l5296
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal904 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5297
l5296:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal905 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5298 ], eax
  cmp dword [ tmp5298 ], 0
  jz l5299
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal906 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5300
l5299:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal907 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5301 ], eax
  cmp dword [ tmp5301 ], 0
  jz l5302
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal908 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5303
l5302:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal909 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5304 ], eax
  cmp dword [ tmp5304 ], 0
  jz l5305
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal910 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5306
l5305:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal615 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5307 ], eax
  cmp dword [ tmp5307 ], 0
  jz l5308
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ paramsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4989 ], 1
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5310 ], eax
  cmp dword [ tmp5310 ], 0
  jz l5311
  mov dword [ tmp4989 ], 0
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal911 ]
  lea  r8 , [ tmp4993 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call1$3
  pop rdi
  jmp l5312
l5311:
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4987 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4993 + Variant_t.value], 0
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5011 ]
  lea rdx, [ paramsCnt ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4987 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ newParams ]
  lea rdx, [ tmp4987 ]
  call __MOLD_VariantMove
  mov dword [ tmp4989 ], 1
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp5313 ], eax
  mov dword [ idx ], 0
l5315:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp5313 ]
  jge l5316
  mov dword [ tmp5318 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp5318 ]
  mov dword [ tmp5317 ], eax
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp5317 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4989 ]
  mov dword [ idx ], eax
  jmp l5315
l5316:
  mov dword [ tmp5314 ], 1
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ newParams ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_pushParametersBeforeCall$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal912 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi
  mov dword [ tmp5314 ], 4
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ paramsCnt ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5319 ], eax
  cmp dword [ tmp5319 ], 0
  jz l5320
  mov dword [ tmp5314 ], 8
  mov [ tmp5322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantMul
  mov dword [ tmp5314 ], 32
  mov [ tmp5322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantSub
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal913 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5320:
l5321:
l5312:
  jmp l5309
l5308:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal914 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5310 ], eax
  cmp dword [ tmp5310 ], 0
  jz l5323
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal915 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal916 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal917 ]
  call  __MOLD_PrintVariantLn
  jmp l5324
l5323:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal918 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5319 ], eax
  cmp dword [ tmp5319 ], 0
  jz l5325
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal919 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal916 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal917 ]
  call  __MOLD_PrintVariantLn
  jmp l5326
l5325:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal920 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5327 ], eax
  cmp dword [ tmp5327 ], 0
  jz l5328
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal915 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal921 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal917 ]
  call  __MOLD_PrintVariantLn
  jmp l5329
l5328:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal922 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5330 ], eax
  cmp dword [ tmp5330 ], 0
  jz l5331
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal923 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal666 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal924 ]
  call  __MOLD_PrintVariantLn
  jmp l5332
l5331:
  mov dword [ tmp5333 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5335 ], eax
  cmp dword [ tmp5335 ], 0
  jnz l5334
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal614 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5333 ], eax
l5334:
  cmp dword [ tmp5333 ], 0
  jz l5336
  mov dword [ tmp5314 ], 1
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5314 ], 2
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5314 ], 3
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ paramsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5335 ], eax
  cmp dword [ tmp5335 ], 0
  jz l5338
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal925 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_push$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_pushParametersBeforeCall$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal925 ]
  lea  r8 , [ rv ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_lea$3
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal926 ]
  lea  r8 , [ __literal927 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_mov$3
  pop rdi
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal614 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5340 ], eax
  cmp dword [ tmp5340 ], 0
  jz l5341
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ name ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5343 ], eax
  cmp dword [ tmp5343 ], 0
  jz l5344
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal928 ]
  lea  r8 , [ name ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5345
l5344:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ name ]
  lea  r9 , [ __literal850 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5345:
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal929 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi
  jmp l5342
l5341:
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi
l5342:
  jmp l5339
l5338:
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_pushParametersBeforeCall$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call$2
  pop rdi
l5339:
  mov dword [ tmp5314 ], 4
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ paramsCnt ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5335 ], eax
  cmp dword [ tmp5335 ], 0
  jz l5346
  mov dword [ tmp5314 ], 8
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantMul
  mov dword [ tmp5314 ], 32
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantSub
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal913 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5346:
l5347:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5335 ], eax
  cmp dword [ tmp5335 ], 0
  jz l5348
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal925 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_pop$2
  pop rdi
l5348:
l5349:
  jmp l5337
l5336:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5335 ], eax
  cmp dword [ tmp5335 ], 0
  jz l5350
  mov dword [ tmp5314 ], 1
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5314 ], 2
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ methodId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5314 ], 3
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ paramsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5340 ], eax
  cmp dword [ tmp5340 ], 0
  jz l5352
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal925 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_push$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_pushParametersBeforeCall$2
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal930 ]
  lea  r8 , [ rv ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal931 ]
  call  __MOLD_PrintVariantLn
  jmp l5353
l5352:
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_pushParametersBeforeCall$2
  pop rdi
l5353:
  lea  rcx , [ __literal932 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal933 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal934 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodId ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal935 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp5314 ], 4
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ paramsCnt ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5340 ], eax
  cmp dword [ tmp5340 ], 0
  jz l5354
  mov dword [ tmp5314 ], 8
  mov [ tmp5322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantMul
  mov dword [ tmp5314 ], 32
  mov [ tmp5322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantSub
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal913 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5354:
l5355:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5340 ], eax
  cmp dword [ tmp5340 ], 0
  jz l5356
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal925 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_pop$2
  pop rdi
l5356:
l5357:
  jmp l5351
l5350:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal622 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5340 ], eax
  cmp dword [ tmp5340 ], 0
  jz l5358
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal668 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal34 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal936 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal937 ]
  call  __MOLD_PrintVariantLn
  jmp l5359
l5358:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal938 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5343 ], eax
  cmp dword [ tmp5343 ], 0
  jz l5360
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal939 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal940 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5361
l5360:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal941 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5362 ], eax
  cmp dword [ tmp5362 ], 0
  jz l5363
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal942 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal940 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5364
l5363:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal605 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5365 ], eax
  cmp dword [ tmp5365 ], 0
  jz l5366
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal944 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5368 ], eax
  cmp dword [ tmp5368 ], 0
  jz l5369
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal945 ]
  lea  rax , [ x ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l5370
l5369:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5370:
  jmp l5367
l5366:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal601 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5368 ], eax
  cmp dword [ tmp5368 ], 0
  jz l5371
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5373 ], eax
  cmp dword [ tmp5373 ], 0
  jz l5374
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal868 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5375
l5374:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5375:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal944 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5372
l5371:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal606 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5373 ], eax
  cmp dword [ tmp5373 ], 0
  jz l5376
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5378 ], eax
  cmp dword [ tmp5378 ], 0
  jz l5379
  lea  rcx , [ __literal869 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal870 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5380
l5379:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5380:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal948 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5377
l5376:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal949 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5378 ], eax
  cmp dword [ tmp5378 ], 0
  jz l5381
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5383 ], eax
  cmp dword [ tmp5383 ], 0
  jz l5384
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal950 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
  jmp l5385
l5384:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal951 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5385:
  jmp l5382
l5381:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal952 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5383 ], eax
  cmp dword [ tmp5383 ], 0
  jz l5386
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5388 ], eax
  cmp dword [ tmp5388 ], 0
  jz l5389
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal953 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
  jmp l5390
l5389:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal954 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5390:
  jmp l5387
l5386:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal607 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5388 ], eax
  cmp dword [ tmp5388 ], 0
  jz l5391
  mov dword [ tmp5393 ], 1
  mov eax, dword [ tmp5393 ]
  mov [ tmp5011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5393 ], eax
  cmp dword [ tmp5393 ], 0
  jz l5394
  lea  rcx , [ __literal955 ]
  call  __MOLD_PrintVariantLn
  jmp l5395
l5394:
  mov dword [ tmp5396 ], 0
  mov eax, dword [ tmp5396 ]
  mov [ tmp5011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5396 ], eax
  cmp dword [ tmp5396 ], 0
  jz l5397
  lea  rcx , [ __literal956 ]
  call  __MOLD_PrintVariantLn
  jmp l5398
l5397:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5398:
l5395:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal957 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5392
l5391:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal958 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5393 ], eax
  cmp dword [ tmp5393 ], 0
  jz l5399
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal850 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5400
l5399:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal959 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5396 ], eax
  cmp dword [ tmp5396 ], 0
  jz l5401
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal850 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5402
l5401:
  mov dword [ tmp5403 ], 1
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal960 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5405 ], eax
  cmp dword [ tmp5405 ], 0
  jnz l5404
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal961 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5403 ], eax
l5404:
  cmp dword [ tmp5403 ], 0
  jz l5406
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal850 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal735 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5407
l5406:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal962 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5405 ], eax
  cmp dword [ tmp5405 ], 0
  jz l5408
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal963 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal964 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal965 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5409
l5408:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal966 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5410 ], eax
  cmp dword [ tmp5410 ], 0
  jz l5411
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal963 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal964 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal967 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5412
l5411:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal968 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5413 ], eax
  cmp dword [ tmp5413 ], 0
  jz l5414
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal963 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal969 ]
  lea  rax , [ y ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal970 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5415
l5414:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal629 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5416 ], eax
  cmp dword [ tmp5416 ], 0
  jz l5417
  lea  rcx , [ __literal971 ]
  call  __MOLD_PrintVariantLn
  jmp l5418
l5417:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal590 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5419 ], eax
  cmp dword [ tmp5419 ], 0
  jz l5420
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal972 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal973 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ currentSymbols ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l5423
l5422:
  mov dword [ tmp5424 ], 0
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5314 ], 1
  mov [ tmp5322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5426 ], eax
  cmp dword [ tmp5426 ], 0
  jz l5425
  mov dword [ tmp5426 ], 1
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5428 ], eax
  cmp dword [ tmp5428 ], 0
  jnz l5427
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5011 ]
  lea  rdi , [ tmp5322 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5426 ], eax
l5427:
  mov eax, dword [ tmp5426 ]
  mov dword [ tmp5424 ], eax
l5425:
  cmp dword [ tmp5424 ], 0
  jz l5429
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5426 ], 1
  mov eax, dword [ tmp5426 ]
  mov [ tmp5011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5426 ], eax
  cmp dword [ tmp5426 ], 0
  jz l5431
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal974 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5432
l5431:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp5011 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
l5432:
l5429:
l5430:
  ret
l5423:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5422 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5424 ], 1
  mov eax, dword [ tmp5424 ]
  mov [ tmp5322 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5424 ], eax
  cmp dword [ tmp5424 ], 0
  jz l5433
  lea  rcx , [ __literal975 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal976 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal977 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal978 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal979 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal980 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal982 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal981 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal983 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal558 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5426 ], eax
  cmp dword [ tmp5426 ], 0
  jz l5435
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal984 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal985 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal986 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal987 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
l5435:
l5436:
l5433:
l5434:
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal558 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5424 ], eax
  cmp dword [ tmp5424 ], 0
  jz l5437
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l5440
l5439:
  mov dword [ tmp5426 ], 0
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5314 ], 2
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5428 ], eax
  cmp dword [ tmp5428 ], 0
  jz l5441
  mov dword [ tmp5428 ], 1
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
  cmp dword [ tmp5443 ], 0
  jnz l5442
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5322 ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5428 ], eax
l5442:
  mov eax, dword [ tmp5428 ]
  mov dword [ tmp5426 ], eax
l5441:
  cmp dword [ tmp5426 ], 0
  jz l5444
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp5011 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
l5444:
l5445:
  ret
l5440:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5439 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
l5437:
l5438:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentFrameSize ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal988 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal989 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal971 ]
  call  __MOLD_PrintVariantLn
  jmp l5421
l5420:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5424 ], eax
  cmp dword [ tmp5424 ], 0
  jz l5446
  mov dword [ tmp5314 ], 1
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentProcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ currentProcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ currentSymbols ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ currentProcName ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5426 ], 1
  mov eax, dword [ tmp5426 ]
  mov [ tmp5322 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5426 ], eax
  cmp dword [ tmp5426 ], 0
  jz l5448
  lea  rcx , [ __literal990 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal976 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal977 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal978 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal979 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal980 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal982 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal991 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal983 ]
  call  __MOLD_PrintVariantLn
l5448:
l5449:
  jmp l5447
l5446:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal589 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5426 ], eax
  cmp dword [ tmp5426 ], 0
  jz l5450
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l5453
l5452:
  mov dword [ tmp5428 ], 1
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5314 ], 1
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
  cmp dword [ tmp5443 ], 0
  jnz l5454
  mov dword [ tmp5443 ], 1
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5314 ], 3
  mov [ tmp5322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5456 ], eax
  cmp dword [ tmp5456 ], 0
  jnz l5455
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5314 ], 4
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
l5455:
  mov eax, dword [ tmp5443 ]
  mov dword [ tmp5428 ], eax
l5454:
  cmp dword [ tmp5428 ], 0
  jz l5457
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal992 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5457:
l5458:
  ret
l5453:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5452 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  jmp l5451
l5450:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal588 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5428 ], eax
  cmp dword [ tmp5428 ], 0
  jz l5459
  lea  rcx, [ currentFrame ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentFrame ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ symbols ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ symbols ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4987 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5011 + Variant_t.value], 0
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5322 ]
  lea rdx, [ __literal662 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4987 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5011 + Variant_t.value], 1
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5322 ]
  lea rdx, [ __literal663 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4987 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5011 + Variant_t.value], 2
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5322 ]
  lea rdx, [ __literal664 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4987 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5011 + Variant_t.value], 3
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5322 ]
  lea rdx, [ __literal670 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4987 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ regParams ]
  lea rdx, [ tmp4987 ]
  call __MOLD_VariantMove
  lea  rcx , [ __literal993 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal994 ]
  call  __MOLD_PrintVariantLn
  mov dword [ currentFrameSize ], 0
  mov dword [ paramsPassedCnt ], 0
  lea  rcx, [ symbolsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbols ]
  lea  rdi , [ symbolsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ symbolsIndex ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsIndex ]
  call  __MOLD_VariantArrayCreate
; 
; -----------------------------
; BEGIN: for keys -1 values v
; 
  jmp l5462
l5461:
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolsIndex ]
  lea  rdx , [ v ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  50
  call  __MOLD_SysCall
  pop rdi
  ret
l5462:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ v ]
  lea  r9 , [ l5461 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values v
; -----------------------------
; 
  lea  rcx, [ symbolsCnt ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ symbolsIndex ]
  lea  rdi , [ symbolsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5314 ], 1
  mov eax, dword [ symbolsCnt + Variant_t.value]
  mov dword [ tmp5313 ], eax
  mov dword [ symbolIdx ], 0
l5463:
  mov eax, dword [ symbolIdx ]
  cmp eax, dword [ tmp5313 ]
  jge l5464
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ symbolIdx ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ symbolsCnt ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantSub
  mov dword [ tmp5317 ], 1
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5317 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp5322 + Variant_t.value]
  mov dword [ tmp5317 ], eax
  lea  rcx, [ symbol ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsIndex ]
  lea  rdx , [ tmp5317 ]
  lea  r8 , [ symbol ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5443 ], 1
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5317 ], 1
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5317 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5456 ], eax
  cmp dword [ tmp5456 ], 0
  jnz l5465
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5317 ], 3
  mov [ tmp5322 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5317 ]
  mov [ tmp5322 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
l5465:
  cmp dword [ tmp5443 ], 0
  jz l5466
  mov dword [ tmp5456 ], 1
  mov dword [ tmp5469 ], 1
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
  cmp dword [ tmp5471 ], 0
  jnz l5470
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
l5470:
  cmp dword [ tmp5469 ], 0
  jnz l5468
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4993 ]
  lea  rdi , [ tmp5322 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5456 ], eax
l5468:
  cmp dword [ tmp5456 ], 0
  jz l5472
  mov dword [ varSize ], 16
  jmp l5473
l5472:
  mov dword [ tmp5469 ], 1
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal183 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
  cmp dword [ tmp5471 ], 0
  jnz l5474
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal184 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
l5474:
  cmp dword [ tmp5469 ], 0
  jz l5475
  mov dword [ varSize ], 8
  jmp l5476
l5475:
  mov dword [ tmp5471 ], 1
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal180 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5478 ], eax
  cmp dword [ tmp5478 ], 0
  jnz l5477
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5322 ]
  lea  rdx , [ __literal185 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
l5477:
  cmp dword [ tmp5471 ], 0
  jz l5479
  mov dword [ varSize ], 4
  jmp l5480
l5479:
  mov dword [ varSize ], -1
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4993 ]
  lea  rdi , [ tmp5322 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal995 ]
  lea  rdx , [ tmp5322 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5014 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5480:
l5476:
l5473:
  mov eax, dword [ currentFrameSize ]
  add eax, dword [ varSize ]
  mov dword [ currentFrameSize ], eax
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5322 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 8
  mov eax, dword [ tmp5318 ]
  add eax, dword [ currentFrameSize ]
  mov dword [ tmp5317 ], eax
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5317 ]
  mov [ tmp4993 + Variant_t.value], rax
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ varSize ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ 7 ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ tmp5322 ]
  lea  r9 , [ __literal996 ]
  lea  rax , [ tmp4993 ]
  push rax
  lea  rax , [ __literal653 ]
  push rax
  lea  rax , [ tmp5011 ]
  push rax
  lea  rax , [ __literal997 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 32
  jmp l5467
l5466:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5317 ], 4
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5317 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5456 ], eax
  cmp dword [ tmp5456 ], 0
  jz l5481
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ tmp4993 ]
  lea  r9 , [ __literal998 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5481:
l5482:
l5467:
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5317 ], 3
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5317 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
  cmp dword [ tmp5443 ], 0
  jz l5483
  mov dword [ tmp5318 ], 1
  mov eax, dword [ paramsPassedCnt ]
  add eax, dword [ tmp5318 ]
  mov dword [ paramsPassedCnt ], eax
l5483:
l5484:
  mov eax, dword [ symbolIdx ]
  add eax, dword [ tmp5314 ]
  mov dword [ symbolIdx ], eax
  jmp l5463
l5464:
  mov dword [ tmp4989 ], 0
  mov eax, dword [ currentFrameSize ]
  cmp eax, dword [ tmp4989 ]
  jle l5485
  mov dword [ tmp5318 ], 32
  mov eax, dword [ currentFrameSize ]
  add eax, dword [ tmp5318 ]
  mov dword [ tmp5317 ], eax
  mov dword [ tmp5318 ], 16
  mov  eax, dword [ tmp5317 ]
  mov  ecx, dword [ tmp5318 ]
  cdq
  idiv ecx
  mov  dword [ tmp5314 ], eax
  mov dword [ tmp5318 ], 1
  mov eax, dword [ tmp5314 ]
  add eax, dword [ tmp5318 ]
  mov dword [ tmp5313 ], eax
  mov dword [ tmp5318 ], 16
  mov ecx, dword [ tmp5313 ]
  imul ecx, dword [ tmp5318 ]
  mov dword [ currentFrameSize ], ecx
  jmp l5486
l5485:
  mov dword [ currentFrameSize ], 32
l5486:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal999 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1000 ]
  call  __MOLD_PrintVariantLn
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentFrameSize ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1001 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ paramIdx ], 0
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l5488
l5487:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 1
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
  cmp dword [ tmp5443 ], 0
  jz l5489
  mov dword [ tmp5456 ], 1
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
  cmp dword [ tmp5469 ], 0
  jnz l5491
  mov dword [ tmp5469 ], 1
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
  cmp dword [ tmp5471 ], 0
  jnz l5492
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5011 ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
l5492:
  mov eax, dword [ tmp5469 ]
  mov dword [ tmp5456 ], eax
l5491:
  cmp dword [ tmp5456 ], 0
  jz l5493
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5469 ], 1
  mov eax, dword [ tmp5469 ]
  mov [ tmp5011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
  cmp dword [ tmp5469 ], 0
  jz l5495
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal1002 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal974 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5496
l5495:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal1003 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal943 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
l5496:
l5493:
l5494:
  jmp l5490
l5489:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 3
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5456 ], eax
  cmp dword [ tmp5456 ], 0
  jz l5497
  mov dword [ tmp5469 ], 1
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 0
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
  cmp dword [ tmp5471 ], 0
  jnz l5499
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 0
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
l5499:
  cmp dword [ tmp5469 ], 0
  jz l5500
  mov dword [ tmp4989 ], 4
  mov eax, dword [ paramIdx ]
  cmp eax, dword [ tmp4989 ]
  jge l5502
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ regParams ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal1004 ]
  lea  r8 , [ __literal657 ]
  lea  r9 , [ tmp4993 ]
  lea  rax , [ __literal34 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l5503
l5502:
  mov eax, dword [ paramsPassedCnt ]
  sub eax, dword [ paramIdx ]
  mov dword [ tmp5318 ], eax
  mov dword [ tmp5313 ], 1
  mov eax, dword [ tmp5318 ]
  sub eax, dword [ tmp5313 ]
  mov dword [ tmp4989 ], eax
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal1005 ]
  lea  r8 , [ tmp4993 ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1004 ]
  lea  r8 , [ __literal1006 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5503:
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ tmp4993 ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal559 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5471 ], 1
  mov eax, dword [ tmp5471 ]
  mov [ tmp5011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
  cmp dword [ tmp5471 ], 0
  jz l5504
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal1007 ]
  lea  r8 , [ tmp5011 ]
  lea  r9 , [ __literal1008 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5504:
l5505:
  jmp l5501
l5500:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal1009 ]
  lea  r8 , [ tmp5011 ]
  lea  r9 , [ __literal34 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5501:
  mov dword [ tmp5313 ], 1
  mov eax, dword [ paramIdx ]
  add eax, dword [ tmp5313 ]
  mov dword [ paramIdx ], eax
l5497:
l5498:
l5490:
  ret
l5488:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5487 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal558 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
  cmp dword [ tmp5443 ], 0
  jz l5506
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l5509
l5508:
  mov dword [ tmp5456 ], 0
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal253 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
  cmp dword [ tmp5469 ], 0
  jz l5510
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal254 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5456 ], eax
l5510:
  cmp dword [ tmp5456 ], 0
  jz l5511
  mov dword [ tmp5469 ], 0
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 2
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
  cmp dword [ tmp5471 ], 0
  jz l5513
  mov dword [ tmp5471 ], 1
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5478 ], eax
  cmp dword [ tmp5478 ], 0
  jnz l5514
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5011 ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
l5514:
  mov eax, dword [ tmp5471 ]
  mov dword [ tmp5469 ], eax
l5513:
  cmp dword [ tmp5469 ], 0
  jz l5515
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal1003 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal943 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
l5515:
l5516:
l5511:
l5512:
  ret
l5509:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5508 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
l5506:
l5507:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1010 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1011 ]
  call  __MOLD_PrintVariantLn
  jmp l5460
l5459:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal598 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5443 ], eax
  cmp dword [ tmp5443 ], 0
  jz l5517
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1012 ]
  lea  r8 , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call1$3
  pop rdi
  jmp l5518
l5517:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal599 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5456 ], eax
  cmp dword [ tmp5456 ], 0
  jz l5519
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_variantDestroy$2
  pop rdi
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1013 ]
  lea  r8 , [ dst ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call1$3
  pop rdi
  jmp l5520
l5519:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1014 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5469 ], eax
  cmp dword [ tmp5469 ], 0
  jz l5521
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1015 ]
  lea  r8 , [ dst ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5522
l5521:
  mov dword [ tmp5471 ], 1
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1016 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5478 ], eax
  cmp dword [ tmp5478 ], 0
  jnz l5523
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1017 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5471 ], eax
l5523:
  cmp dword [ tmp5471 ], 0
  jz l5524
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1018 ]
  lea  r8 , [ dst ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5525
l5524:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1019 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5478 ], eax
  cmp dword [ tmp5478 ], 0
  jz l5526
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1020 ]
  lea  r8 , [ dst ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3$5
  add rsp, 8
  pop rdi
  jmp l5527
l5526:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1021 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5528 ], eax
  cmp dword [ tmp5528 ], 0
  jz l5529
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1022 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3AndDestroy$5
  add rsp, 8
  pop rdi
  jmp l5530
l5529:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1023 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5531 ], eax
  cmp dword [ tmp5531 ], 0
  jz l5532
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1024 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3AndDestroy$5
  add rsp, 8
  pop rdi
  jmp l5533
l5532:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1025 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5534 ], eax
  cmp dword [ tmp5534 ], 0
  jz l5535
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal1026 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_call3AndDestroy$5
  add rsp, 8
  pop rdi
  jmp l5536
l5535:
  lea  rcx , [ originalOpcode ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5537 ], eax
  cmp dword [ tmp5537 ], 0
  jz l5538
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1027 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5539
l5538:
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1028 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5014 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5539:
l5536:
l5533:
l5530:
l5527:
l5525:
l5522:
l5520:
l5518:
l5460:
l5451:
l5447:
l5421:
l5418:
l5415:
l5412:
l5409:
l5407:
l5402:
l5400:
l5392:
l5387:
l5382:
l5377:
l5372:
l5367:
l5364:
l5361:
l5359:
l5351:
l5337:
l5332:
l5329:
l5326:
l5324:
l5309:
l5306:
l5303:
l5300:
l5297:
l5294:
l5291:
l5288:
l5285:
l5282:
l5279:
l5276:
l5273:
l5270:
l5267:
l5264:
l5261:
l5258:
l5255:
l5252:
l5249:
l5246:
l5243:
l5240:
l5237:
l5234:
l5227:
l5224:
l5221:
l5218:
l5215:
l5212:
l5209:
l5206:
l5203:
l5200:
l5197:
l5194:
l5191:
l5188:
l5185:
l5182:
l5180:
l5176:
l5171:
l5168:
l5165:
l5162:
l5160:
l5155:
l5152:
l5149:
l5146:
l5143:
l5140:
l5137:
l5134:
l5131:
l5128:
l5125:
l5122:
l5119:
l5116:
l5113:
l5110:
l5107:
l5104:
l5101:
l5098:
l5095:
l5092:
l5089:
l5086:
l5083:
l5080:
l5077:
l5074:
l5071:
l5068:
l5065:
l5062:
l5059:
l5056:
l5053:
l5050:
l5047:
l5044:
l5041:
l5039:
l5035:
l5031:
l5028:
l5024:
l5022:
l5020:
  ret
l4991:
  lea  rcx , [ quads ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4990 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values item
; -----------------------------
; 
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1029 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1030 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1031 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1032 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1033 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1034 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4993 ]
  lea  rdi, [ tmp4987 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*13]
  pop rdi
  lea  rcx, [ globals ]
  call __MOLD_VariantDestroy
  lea rcx, [ globals ]
  lea rdx, [ tmp4987 ]
  call __MOLD_VariantMove
; 
; -----------------------------
; BEGIN: for keys -1 values oneItem
; 
  jmp l5541
l5540:
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 2
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4988 ], eax
  cmp dword [ tmp4988 ], 0
  jz l5542
  mov dword [ tmp4994 ], 1
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4998 ], eax
  cmp dword [ tmp4998 ], 0
  jnz l5544
  mov dword [ tmp4998 ], 1
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5000 ], eax
  cmp dword [ tmp5000 ], 0
  jnz l5545
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4993 ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4998 ], eax
l5545:
  mov eax, dword [ tmp4998 ]
  mov dword [ tmp4994 ], eax
l5544:
  cmp dword [ tmp4994 ], 0
  jz l5546
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ __literal1035 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5547
l5546:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal183 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4998 ], eax
  cmp dword [ tmp4998 ], 0
  jz l5548
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ __literal1036 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5549
l5548:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal180 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5000 ], eax
  cmp dword [ tmp5000 ], 0
  jz l5550
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ __literal1037 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5551
l5550:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal184 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5002 ], eax
  cmp dword [ tmp5002 ], 0
  jz l5552
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ __literal1036 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5553
l5552:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ __literal185 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp5004 ], eax
  cmp dword [ tmp5004 ], 0
  jz l5554
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ __literal1037 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5555
l5554:
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp4993 ]
  lea  rdi , [ tmp5011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1038 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5014 ]
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5555:
l5553:
l5551:
l5549:
l5547:
l5542:
l5543:
  ret
l5541:
  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5540 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values oneItem
; -----------------------------
; 
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1039 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1040 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1041 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1042 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1043 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp4989 ], 1
  mov dword [ tmp5313 ], 16
  mov dword [ deepIdx ], 0
l5556:
  mov eax, dword [ deepIdx ]
  cmp eax, dword [ tmp5313 ]
  jge l5557
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1044 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
; 
; -----------------------------
; BEGIN: for keys -1 values symbolInfo
; 
  jmp l5559
l5558:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5314 ], 5
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4988 ], eax
  cmp dword [ tmp4988 ], 0
  jz l5560
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp4993 + Variant_t.value], rax
  mov dword [ tmp5314 ], 0
  mov [ tmp5011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5314 ]
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ tmp4993 ]
  lea  rax , [ tmp5011 ]
  push rax
  lea  rdi , [ tmp4987 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_emitConstant$5
  add rsp, 8
  pop rdi
l5560:
l5561:
  ret
l5559:
  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l5558 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 
  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp4989 ]
  mov dword [ deepIdx ], eax
  jmp l5556
l5557:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1045 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1034 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values symbolInfo
; 
  jmp l5563
l5562:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal192 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 10
  mov [ tmp4993 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp4993 + Variant_t.value], rax
  lea  rcx , [ tmp5011 ]
  lea  rdx , [ tmp4993 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4988 ], eax
  cmp dword [ tmp4988 ], 0
  jz l5564
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal225 ]
  lea  r8 , [ labels ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal633 ]
  lea  r8 , [ defaultLabel ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys labelIdx values nextLabel
; 
  jmp l5567
l5566:
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ nextLabel ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4994 ], eax
  cmp dword [ tmp4994 ], 0
  jz l5568
  lea  rcx, [ nextLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ nextLabel ]
  lea rdx, [ defaultLabel ]
  call __MOLD_VariantMove
l5568:
l5569:
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal1046 ]
  lea  r8 , [ nextLabel ]
  lea  r9 , [ __literal653 ]
  lea  rax , [ labelIdx ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  ret
l5567:
  lea  rcx , [ labels ]
  lea  rdx , [ labelIdx ]
  lea  r8 , [ nextLabel ]
  lea  r9 , [ l5566 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys labelIdx values nextLabel
; -----------------------------
; 
l5564:
l5565:
  ret
l5563:
  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l5562 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values symbolInfo
; -----------------------------
; 
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1047 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1048 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ classListCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ classListCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal388 ]
  lea  r8 , [ methodsList ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodsListCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ methodsListCnt ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 1
  mov eax, dword [ classListCnt + Variant_t.value]
  mov dword [ tmp5313 ], eax
  mov dword [ classIdx ], 0
l5570:
  mov eax, dword [ classIdx ]
  cmp eax, dword [ tmp5313 ]
  jge l5571
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classList ]
  lea  rdx , [ classIdx ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ className ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1049 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5014 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp5314 ], 1
  mov eax, dword [ methodsListCnt + Variant_t.value]
  mov dword [ tmp5317 ], eax
  mov dword [ methodIdx ], 0
l5573:
  mov eax, dword [ methodIdx ]
  cmp eax, dword [ tmp5317 ]
  jge l5574
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodsList ]
  lea  rdx , [ methodIdx ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp4993 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4988 ], eax
  cmp dword [ tmp4988 ], 0
  jz l5575
  lea  rcx, [ methodPtr ]
  call __MOLD_VariantDestroy
  lea rcx, [ methodPtr ]
  lea rdx, [ __literal1050 ]
  call __MOLD_VariantMove
  jmp l5576
l5575:
  lea  rcx, [ methodPtr ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal242 ]
  lea  r8 , [ methodPtr ]
  call  __MOLD_VariantLoadFromKey
l5576:
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal870 ]
  lea  r8 , [ methodPtr ]
  lea  r9 , [ __literal653 ]
  lea  rax , [ methodName ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  mov eax, dword [ methodIdx ]
  add eax, dword [ tmp5314 ]
  mov dword [ methodIdx ], eax
  jmp l5573
l5574:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov eax, dword [ classIdx ]
  add eax, dword [ tmp5318 ]
  mov dword [ classIdx ], eax
  jmp l5570
l5571:
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1051 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1052 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1053 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1054 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1055 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1056 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1057 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1058 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values procName
; 
  jmp l5578
l5577:
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1060 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal1059 ]
  lea  r8 , [ procName ]
  lea  r9 , [ __literal155 ]
  lea  rax , [ tmp5014 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  ret
l5578:
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5577 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values procName
; -----------------------------
; 
  lea  rcx , [ __literal1061 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1062 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1057 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1063 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1064 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values procName
; 
  jmp l5580
l5579:
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1060 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5581 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ procName ]
  lea  rdx , [ __literal1065 ]
  lea  r8 , [ tmp5581 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal52 ]
  lea  rdx , [ tmp5581 ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 3 ]
  lea  rdx , [ tmp5014 ]
  lea  r8 , [ __literal688 ]
  lea  r9 , [ tmp5015 ]
  call  __MOLD_PrintArrayOfVariantsLn
  ret
l5580:
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5579 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values procName
; -----------------------------
; 
  lea  rcx , [ __literal1066 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp4993 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4988 ], 1
  mov eax, dword [ tmp4988 ]
  mov [ tmp5011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5011 + Variant_t.value], rax
  lea  rcx , [ tmp4993 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp4987 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp4987 + Variant_t.value]
  mov dword [ tmp4988 ], eax
  cmp dword [ tmp4988 ], 0
  jz l5582
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1067 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal720 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1068 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1069 ]
  call  __MOLD_PrintVariantLn
; 
; -----------------------------
; BEGIN: for keys -1 values procName
; 
  jmp l5585
l5584:
  lea  rcx, [ tmp5015 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1070 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5015 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5014 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1060 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5014 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 3 ]
  lea  rdx , [ tmp5015 ]
  lea  r8 , [ __literal1071 ]
  lea  r9 , [ tmp5014 ]
  call  __MOLD_PrintArrayOfVariantsLn
  ret
l5585:
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5584 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys __TrashBin values procName
; -----------------------------
; 
  lea  rcx , [ __literal1057 ]
  call  __MOLD_PrintVariantLn
l5582:
l5583:

  ; clean frame
  ; -----------
  lea  rcx, [ quads ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentProcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfProcedures ]
  call __MOLD_VariantDestroy
  lea  rcx, [ globals ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classListCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodsListCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4987 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4993 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5322 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ itemCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ originalOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ yType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ yInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentFrame ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsIndex ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator v
  lea  rcx, [ symbol ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator labelIdx
  ; Skipped loop iterator nextLabel
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator procName

  add  rsp, 1536
  pop  rbp
  ret

  restore this
  restore codeObj
  restore quads
  restore currentProcName
  restore currentSymbols
  restore currentFrameSize
  restore symbols
  restore arrayOfProcedures
  restore globals
  restore classListCnt
  restore classList
  restore methodsList
  restore methodsListCnt
  restore tmp4987
  restore tmp4988
  restore tmp4989
  restore tmp4993
  restore tmp4994
  restore tmp4998
  restore tmp5000
  restore tmp5002
  restore tmp5004
  restore tmp5011
  restore tmp5014
  restore tmp5015
  restore tmp5033
  restore tmp5037
  restore tmp5042
  restore tmp5045
  restore tmp5048
  restore tmp5051
  restore tmp5054
  restore tmp5057
  restore tmp5060
  restore tmp5063
  restore tmp5066
  restore tmp5069
  restore tmp5072
  restore tmp5075
  restore tmp5078
  restore tmp5081
  restore tmp5084
  restore tmp5087
  restore tmp5090
  restore tmp5093
  restore tmp5096
  restore tmp5099
  restore tmp5102
  restore tmp5105
  restore tmp5108
  restore tmp5111
  restore tmp5114
  restore tmp5117
  restore tmp5120
  restore tmp5123
  restore tmp5126
  restore tmp5129
  restore tmp5132
  restore tmp5135
  restore tmp5138
  restore tmp5141
  restore tmp5144
  restore tmp5147
  restore tmp5150
  restore tmp5153
  restore tmp5156
  restore tmp5158
  restore tmp5163
  restore tmp5166
  restore tmp5169
  restore tmp5172
  restore tmp5174
  restore tmp5178
  restore tmp5183
  restore tmp5186
  restore tmp5189
  restore tmp5192
  restore tmp5195
  restore tmp5198
  restore tmp5201
  restore tmp5204
  restore tmp5207
  restore tmp5210
  restore tmp5213
  restore tmp5216
  restore tmp5219
  restore tmp5222
  restore tmp5225
  restore tmp5228
  restore tmp5235
  restore tmp5238
  restore tmp5241
  restore tmp5244
  restore tmp5247
  restore tmp5250
  restore tmp5253
  restore tmp5256
  restore tmp5259
  restore tmp5262
  restore tmp5265
  restore tmp5268
  restore tmp5271
  restore tmp5274
  restore tmp5277
  restore tmp5280
  restore tmp5283
  restore tmp5286
  restore tmp5289
  restore tmp5292
  restore tmp5295
  restore tmp5298
  restore tmp5301
  restore tmp5304
  restore tmp5307
  restore tmp5310
  restore tmp5313
  restore tmp5314
  restore tmp5317
  restore tmp5318
  restore tmp5319
  restore tmp5322
  restore tmp5327
  restore tmp5330
  restore tmp5333
  restore tmp5335
  restore tmp5340
  restore tmp5343
  restore tmp5362
  restore tmp5365
  restore tmp5368
  restore tmp5373
  restore tmp5378
  restore tmp5383
  restore tmp5388
  restore tmp5393
  restore tmp5396
  restore tmp5403
  restore tmp5405
  restore tmp5410
  restore tmp5413
  restore tmp5416
  restore tmp5419
  restore tmp5424
  restore tmp5426
  restore tmp5428
  restore tmp5443
  restore tmp5456
  restore tmp5469
  restore tmp5471
  restore tmp5478
  restore tmp5528
  restore tmp5531
  restore tmp5534
  restore tmp5537
  restore item
  restore itemCnt
  restore opcode
  restore dst
  restore x
  restore y
  restore originalOpcode
  restore xType
  restore yType
  restore yInfo
  restore xInfo
  restore params
  restore paramsCnt
  restore newParams
  restore idx
  restore rv
  restore name
  restore methodId
  restore oneItem
  restore proto
  restore currentFrame
  restore regParams
  restore paramsPassedCnt
  restore symbolsCnt
  restore symbolsIndex
  restore paramIdx
  restore v
  restore symbolIdx
  restore symbol
  restore varSize
  restore deepIdx
  restore symbolInfo
  restore value
  restore labels
  restore defaultLabel
  restore labelIdx
  restore nextLabel
  restore tmp5572
  restore classIdx
  restore classProto
  restore className
  restore vtable
  restore methodIdx
  restore methodName
  restore methodProto
  restore methodPtr
  restore procName
  restore tmp5581
; -----------------------------------------------
; function __MIRQuadOptimizer_constructor$1
; -----------------------------------------------
__MIRQuadOptimizer_constructor$1:
  ; init frame
  ; ----------
  tmp5588 EQU rbp - 24 ; 16 bytes
  tmp5587 EQU rbp - 28 ; 4 bytes
  tmp5586 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp5586 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5588 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp5586 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp5586 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract_constructor$1
  pop rdi
  mov dword [ tmp5587 ], 1
  mov eax, dword [ tmp5587 ]
  mov [ tmp5586 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5586 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp5586 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ __literal144 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1073 ]
  lea  r8 , [ __literal164 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5586 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5586 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal642 ]
  lea  r8 , [ tmp5586 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5586 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5586 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal1075 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal608 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal1076 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal609 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal625 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal610 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal635 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal611 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal1077 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal612 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal634 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal613 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1074 ]
  lea  r8 , [ tmp5586 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5586 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5586 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal1076 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal608 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal1075 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal609 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal634 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal610 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal1077 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal611 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal635 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal612 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5588 ]
  lea rdx, [ __literal625 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5586 ]
  lea  rdx , [ __literal613 ]
  lea  r8 , [ tmp5588 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1078 ]
  lea  r8 , [ tmp5586 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5586 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5588 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp5586
  restore tmp5587
  restore tmp5588
; -----------------------------------------------
; function __MIRQuadOptimizer__decreaseReadAndWriteHits$2
; -----------------------------------------------
__MIRQuadOptimizer__decreaseReadAndWriteHits$2:
  ; init frame
  ; ----------
  tmp5592 EQU rbp - 12 ; 4 bytes
  tmp5591 EQU rbp - 28 ; 16 bytes
  tmp5590 EQU rbp - 44 ; 16 bytes
  tmp5589 EQU rbp - 60 ; 16 bytes
  srcInfo EQU rbp - 76 ; 16 bytes
  src EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ src ], xmm0
  mov [srcInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5589 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5590 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5591 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp5591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal642 ]
  lea  r8 , [ tmp5591 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5590 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5591 ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp5590 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ srcInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5590 ]
  lea  rdx , [ src ]
  lea  r8 , [ srcInfo ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5590 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp5590 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5592 ], 1
  mov [ tmp5591 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5592 ]
  mov [ tmp5591 + Variant_t.value], rax
  lea  rcx , [ tmp5590 ]
  lea  rdx , [ tmp5591 ]
  lea  r8 , [ tmp5589 ]
  call  __MOLD_VariantSub
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp5589 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp5591 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5592 ], 1
  mov [ tmp5590 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5592 ]
  mov [ tmp5590 + Variant_t.value], rax
  lea  rcx , [ tmp5591 ]
  lea  rdx , [ tmp5590 ]
  lea  r8 , [ tmp5589 ]
  call  __MOLD_VariantSub
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal191 ]
  lea  r8 , [ tmp5589 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ srcInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5589 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5590 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5591 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore src
  restore srcInfo
  restore tmp5589
  restore tmp5590
  restore tmp5591
  restore tmp5592
; -----------------------------------------------
; function __MIRQuadOptimizer_processOneItem$2
; -----------------------------------------------
__MIRQuadOptimizer_processOneItem$2:
  ; init frame
  ; ----------
  tmp5622 EQU rbp - 12 ; 4 bytes
  newOpcode EQU rbp - 28 ; 16 bytes
  tmp5619 EQU rbp - 44 ; 16 bytes
  lastItem EQU rbp - 60 ; 16 bytes
  buffer EQU rbp - 76 ; 16 bytes
  tmp5614 EQU rbp - 92 ; 16 bytes
  tmp5613 EQU rbp - 108 ; 16 bytes
  tmp5610 EQU rbp - 112 ; 4 bytes
  tmp5608 EQU rbp - 116 ; 4 bytes
  tmp5606 EQU rbp - 120 ; 4 bytes
  tmp5603 EQU rbp - 124 ; 4 bytes
  tmp5598 EQU rbp - 128 ; 4 bytes
  tmp5597 EQU rbp - 144 ; 16 bytes
  tmp5595 EQU rbp - 148 ; 4 bytes
  tmp5594 EQU rbp - 152 ; 4 bytes
  tmp5593 EQU rbp - 168 ; 16 bytes
  src EQU rbp - 184 ; 16 bytes
  dst EQU rbp - 200 ; 16 bytes
  opcode EQU rbp - 216 ; 16 bytes
  item EQU rbp - 232 ; 16 bytes
  this EQU rbp - 248 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5593 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5597 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5613 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5614 + Variant_t.type], VARIANT_UNDEFINED
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED
  mov [lastItem + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5619 + Variant_t.type], VARIANT_UNDEFINED
  mov [newOpcode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp5594 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5594 ], 1
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5594 ], 2
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ src ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5595 ], 1
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5597 ]
  lea  rdx , [ __literal619 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5598 ], eax
  cmp dword [ tmp5598 ], 0
  jnz l5596
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5597 ]
  lea  rdx , [ __literal620 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5595 ], eax
l5596:
  cmp dword [ tmp5595 ], 0
  jz l5599
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__emitOneItem$2
  pop rdi
  jmp l5600
l5599:
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5597 ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5598 ], eax
  cmp dword [ tmp5598 ], 0
  jz l5601
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__emitOneItem$2
  pop rdi
  jmp l5602
l5601:
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5597 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5603 ], eax
  cmp dword [ tmp5603 ], 0
  jz l5604
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__emitOneItem$2
  pop rdi
  jmp l5605
l5604:
  mov dword [ tmp5606 ], 0
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5608 ], eax
  cmp dword [ tmp5608 ], 0
  jz l5607
  mov dword [ tmp5608 ], 0
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5597 ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5610 ], eax
  cmp dword [ tmp5610 ], 0
  jz l5609
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1073 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5597 ]
  lea  rdx , [ src ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5608 ], eax
l5609:
  mov eax, dword [ tmp5608 ]
  mov dword [ tmp5606 ], eax
l5607:
  cmp dword [ tmp5606 ], 0
  jz l5611
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ buffer ]
  lea  rdi , [ tmp5613 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5594 ], 1
  mov [ tmp5614 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5594 ]
  mov [ tmp5614 + Variant_t.value], rax
  lea  rcx , [ tmp5613 ]
  lea  rdx , [ tmp5614 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantSub
  mov eax, dword [ tmp5597 + Variant_t.value]
  mov dword [ tmp5594 ], eax
  lea  rcx, [ lastItem ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buffer ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ lastItem ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5594 ], 1
  lea  rcx , [ lastItem ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5612
l5611:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal623 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5608 ], eax
  cmp dword [ tmp5608 ], 0
  jz l5615
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1074 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5614 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5597 ]
  lea  rdx , [ tmp5614 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newOpcode ]
  lea  rdi , [ tmp5614 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5610 ], eax
  cmp dword [ tmp5610 ], 0
  jz l5617
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5614 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp5597 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5597 + Variant_t.value], 0
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5613 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ tmp5597 ]
  lea  r8 , [ tmp5613 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5597 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5597 + Variant_t.value], 1
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5613 ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ tmp5597 ]
  lea  r8 , [ tmp5613 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5597 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5597 + Variant_t.value], 2
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1079 ]
  lea  r8 , [ tmp5613 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ tmp5597 ]
  lea  r8 , [ tmp5613 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5597 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5597 + Variant_t.value], 3
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1080 ]
  lea  r8 , [ tmp5613 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ tmp5597 ]
  lea  r8 , [ tmp5613 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp5614 ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__replaceLastItem$2
  pop rdi
  jmp l5618
l5617:
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__emitOneItem$2
  pop rdi
l5618:
  jmp l5616
l5615:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal624 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5610 ], eax
  cmp dword [ tmp5610 ], 0
  jz l5620
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1078 ]
  lea  r8 , [ tmp5614 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ tmp5613 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ tmp5613 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ newOpcode ]
  lea  rdi , [ tmp5613 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5613 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5622 ], eax
  cmp dword [ tmp5622 ], 0
  jz l5623
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5613 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp5614 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5614 + Variant_t.value], 0
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5597 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5613 ]
  lea  rdx , [ tmp5614 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5614 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5614 + Variant_t.value], 1
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5597 ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5613 ]
  lea  rdx , [ tmp5614 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5614 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5614 + Variant_t.value], 2
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1079 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5613 ]
  lea  rdx , [ tmp5614 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5614 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5614 + Variant_t.value], 3
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1080 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5613 ]
  lea  rdx , [ tmp5614 ]
  lea  r8 , [ tmp5597 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp5613 ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__replaceLastItem$2
  pop rdi
  jmp l5624
l5623:
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__emitOneItem$2
  pop rdi
l5624:
  jmp l5621
l5620:
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract__emitOneItem$2
  pop rdi
l5621:
l5616:
l5612:
l5605:
l5602:
l5600:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5595 ], eax
  cmp dword [ tmp5595 ], 0
  jz l5625
  mov dword [ tmp5594 ], 1
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal642 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantStoreAtKey
  jmp l5626
l5625:
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal589 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5593 + Variant_t.value]
  mov dword [ tmp5598 ], eax
  cmp dword [ tmp5598 ], 0
  jz l5627
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp5593 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __PipeAbstract_flush$1
  pop rdi
l5627:
l5628:
l5626:
  lea  rcx , [ this ]
  lea  rdx , [ __literal1072 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1073 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp5594 ], 2
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal1079 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp5594 ], 3
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5594 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal1080 ]
  lea  r8 , [ tmp5593 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5593 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5597 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5613 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastItem ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5619 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy

  add  rsp, 288
  pop  rbp
  ret

  restore this
  restore item
  restore opcode
  restore dst
  restore src
  restore tmp5593
  restore tmp5594
  restore tmp5595
  restore tmp5597
  restore tmp5598
  restore tmp5603
  restore tmp5606
  restore tmp5608
  restore tmp5610
  restore tmp5613
  restore tmp5614
  restore buffer
  restore lastItem
  restore tmp5619
  restore newOpcode
  restore tmp5622
; -----------------------------------------------
; function __VMachineStackObject_constructor$2
; -----------------------------------------------
__VMachineStackObject_constructor$2:
  ; init frame
  ; ----------
  classProto EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classProto ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal202 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore classProto
; -----------------------------------------------
; function __VMachineStack_constructor$1
; -----------------------------------------------
__VMachineStack_constructor$1:
  ; init frame
  ; ----------
  tmp5631 EQU rbp - 24 ; 16 bytes
  tmp5630 EQU rbp - 40 ; 16 bytes
  tmp5629 EQU rbp - 44 ; 4 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp5630 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5631 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp5629 ], 0
  mov eax, dword [ tmp5629 ]
  mov [ tmp5630 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5630 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal1081 ]
  lea  r8 , [ tmp5630 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5630 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5630 ]
  lea  rdx, [vtable_Stack]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp5631 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5630 ]
  lea  rdi , [ tmp5631 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Stack_constructor$1
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ tmp5630 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5630 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5631 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp5629
  restore tmp5630
  restore tmp5631
; -----------------------------------------------
; function __VMachineStack_loadCode$2
; -----------------------------------------------
__VMachineStack_loadCode$2:
  ; init frame
  ; ----------
  code EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ code ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore code
; -----------------------------------------------
; function __VMachineStack__call$2
; -----------------------------------------------
__VMachineStack__call$2:
  ; init frame
  ; ----------
  v EQU rbp - 24 ; 16 bytes
  k EQU rbp - 40 ; 16 bytes
  bodyIp EQU rbp - 56 ; 16 bytes
  valueId EQU rbp - 72 ; 16 bytes
  keyId EQU rbp - 88 ; 16 bytes
  arg3 EQU rbp - 104 ; 16 bytes
  arg2 EQU rbp - 120 ; 16 bytes
  arg1 EQU rbp - 136 ; 16 bytes
  rv EQU rbp - 152 ; 16 bytes
  id EQU rbp - 168 ; 16 bytes
  paramIdx EQU rbp - 172 ; 4 bytes
  sep EQU rbp - 188 ; 16 bytes
  methodProto EQU rbp - 204 ; 16 bytes
  vtable EQU rbp - 220 ; 16 bytes
  thiz EQU rbp - 236 ; 16 bytes
  paramsCnt EQU rbp - 252 ; 16 bytes
  methodName EQU rbp - 268 ; 16 bytes
  newObject EQU rbp - 284 ; 16 bytes
  classProto EQU rbp - 300 ; 16 bytes
  proto EQU rbp - 316 ; 16 bytes
  dst EQU rbp - 332 ; 16 bytes
  src EQU rbp - 348 ; 16 bytes
  val EQU rbp - 364 ; 16 bytes
  paramValue EQU rbp - 380 ; 16 bytes
  paramBase EQU rbp - 396 ; 16 bytes
  key EQU rbp - 412 ; 16 bytes
  box EQU rbp - 428 ; 16 bytes
  idx EQU rbp - 444 ; 16 bytes
  last EQU rbp - 460 ; 16 bytes
  newMap EQU rbp - 476 ; 16 bytes
  newArray EQU rbp - 492 ; 16 bytes
  opcode EQU rbp - 508 ; 16 bytes
  item EQU rbp - 524 ; 16 bytes
  tmp5804 EQU rbp - 528 ; 4 bytes
  tmp5801 EQU rbp - 532 ; 4 bytes
  tmp5798 EQU rbp - 536 ; 4 bytes
  tmp5795 EQU rbp - 540 ; 4 bytes
  tmp5792 EQU rbp - 544 ; 4 bytes
  tmp5789 EQU rbp - 548 ; 4 bytes
  tmp5786 EQU rbp - 564 ; 16 bytes
  tmp5785 EQU rbp - 580 ; 16 bytes
  tmp5784 EQU rbp - 596 ; 16 bytes
  tmp5783 EQU rbp - 612 ; 16 bytes
  tmp5780 EQU rbp - 628 ; 16 bytes
  tmp5777 EQU rbp - 632 ; 4 bytes
  tmp5774 EQU rbp - 636 ; 4 bytes
  tmp5771 EQU rbp - 640 ; 4 bytes
  tmp5768 EQU rbp - 644 ; 4 bytes
  tmp5765 EQU rbp - 648 ; 4 bytes
  tmp5762 EQU rbp - 652 ; 4 bytes
  tmp5759 EQU rbp - 656 ; 4 bytes
  tmp5756 EQU rbp - 672 ; 16 bytes
  tmp5753 EQU rbp - 676 ; 4 bytes
  tmp5752 EQU rbp - 680 ; 4 bytes
  tmp5749 EQU rbp - 684 ; 4 bytes
  tmp5744 EQU rbp - 688 ; 4 bytes
  tmp5739 EQU rbp - 692 ; 4 bytes
  tmp5736 EQU rbp - 696 ; 4 bytes
  tmp5733 EQU rbp - 700 ; 4 bytes
  tmp5730 EQU rbp - 704 ; 4 bytes
  tmp5727 EQU rbp - 708 ; 4 bytes
  tmp5724 EQU rbp - 712 ; 4 bytes
  tmp5721 EQU rbp - 716 ; 4 bytes
  tmp5718 EQU rbp - 720 ; 4 bytes
  tmp5715 EQU rbp - 724 ; 4 bytes
  tmp5712 EQU rbp - 728 ; 4 bytes
  tmp5709 EQU rbp - 732 ; 4 bytes
  tmp5706 EQU rbp - 736 ; 4 bytes
  tmp5703 EQU rbp - 740 ; 4 bytes
  tmp5700 EQU rbp - 744 ; 4 bytes
  tmp5697 EQU rbp - 748 ; 4 bytes
  tmp5694 EQU rbp - 752 ; 4 bytes
  tmp5691 EQU rbp - 756 ; 4 bytes
  tmp5688 EQU rbp - 760 ; 4 bytes
  tmp5685 EQU rbp - 764 ; 4 bytes
  tmp5682 EQU rbp - 768 ; 4 bytes
  tmp5679 EQU rbp - 772 ; 4 bytes
  tmp5676 EQU rbp - 776 ; 4 bytes
  tmp5673 EQU rbp - 780 ; 4 bytes
  tmp5670 EQU rbp - 784 ; 4 bytes
  tmp5667 EQU rbp - 788 ; 4 bytes
  tmp5664 EQU rbp - 792 ; 4 bytes
  tmp5661 EQU rbp - 796 ; 4 bytes
  tmp5660 EQU rbp - 812 ; 16 bytes
  tmp5657 EQU rbp - 816 ; 4 bytes
  tmp5654 EQU rbp - 820 ; 4 bytes
  tmp5653 EQU rbp - 836 ; 16 bytes
  tmp5650 EQU rbp - 840 ; 4 bytes
  tmp5647 EQU rbp - 844 ; 4 bytes
  tmp5644 EQU rbp - 848 ; 4 bytes
  tmp5641 EQU rbp - 852 ; 4 bytes
  tmp5638 EQU rbp - 856 ; 4 bytes
  tmp5637 EQU rbp - 872 ; 16 bytes
  tmp5636 EQU rbp - 876 ; 4 bytes
  tmp5635 EQU rbp - 880 ; 4 bytes
  tmp5632 EQU rbp - 896 ; 16 bytes
  stack EQU rbp - 912 ; 16 bytes
  codeCnt EQU rbp - 928 ; 16 bytes
  code EQU rbp - 944 ; 16 bytes
  codeObj EQU rbp - 960 ; 16 bytes
  ip EQU rbp - 976 ; 16 bytes
  this EQU rbp - 992 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 1024

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ip ], xmm0
  mov [codeObj + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [codeCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [stack + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5632 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5637 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5653 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5660 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5756 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5780 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5783 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5784 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5785 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5786 + Variant_t.type], VARIANT_UNDEFINED
  mov [item + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [newArray + Variant_t.type], VARIANT_UNDEFINED
  mov [newMap + Variant_t.type], VARIANT_UNDEFINED
  mov [last + Variant_t.type], VARIANT_UNDEFINED
  mov [idx + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [paramBase + Variant_t.type], VARIANT_UNDEFINED
  mov [paramValue + Variant_t.type], VARIANT_UNDEFINED
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [proto + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [newObject + Variant_t.type], VARIANT_UNDEFINED
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [thiz + Variant_t.type], VARIANT_UNDEFINED
  mov [vtable + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [rv + Variant_t.type], VARIANT_UNDEFINED
  mov [arg1 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg2 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg3 + Variant_t.type], VARIANT_UNDEFINED
  mov [keyId + Variant_t.type], VARIANT_UNDEFINED
  mov [valueId + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyIp + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ codeObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ codeCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ stack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ stack ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ codeCnt ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
l5633:
  lea  rcx , [ ip ]
  lea  rdx , [ codeCnt ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5635 ], eax
  cmp dword [ tmp5635 ], 0
  jz l5634
  mov eax, dword [ ip + Variant_t.value]
  mov dword [ tmp5636 ], eax
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 0
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5638 ], eax
  cmp dword [ tmp5638 ], 0
  jz l5639
  mov dword [ tmp5636 ], 7
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5641 ], eax
  cmp dword [ tmp5641 ], 0
  jz l5642
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5643
l5642:
  mov dword [ tmp5636 ], 8
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5644 ], eax
  cmp dword [ tmp5644 ], 0
  jz l5645
  lea  rcx, [ newArray ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newArray ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ newArray ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5646
l5645:
  mov dword [ tmp5636 ], 9
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5647 ], eax
  cmp dword [ tmp5647 ], 0
  jz l5648
  lea  rcx, [ newMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newMap ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ newMap ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5649
l5648:
  mov dword [ tmp5636 ], 1
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5650 ], eax
  cmp dword [ tmp5650 ], 0
  jz l5651
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ tmp5637 ]
  call  __MOLD_VariantNeg
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5652
l5651:
  mov dword [ tmp5636 ], 2
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5654 ], eax
  cmp dword [ tmp5654 ], 0
  jz l5655
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5656
l5655:
  mov dword [ tmp5636 ], 49
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5657 ], eax
  cmp dword [ tmp5657 ], 0
  jz l5658
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5637 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ tmp5660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5637 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5660 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5660 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5659
l5658:
  mov dword [ tmp5636 ], 4
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5661 ], eax
  cmp dword [ tmp5661 ], 0
  jz l5662
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantMul
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5663
l5662:
  mov dword [ tmp5636 ], 3
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5664 ], eax
  cmp dword [ tmp5664 ], 0
  jz l5665
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantSub
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5666
l5665:
  mov dword [ tmp5636 ], 5
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5667 ], eax
  cmp dword [ tmp5667 ], 0
  jz l5668
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantDiv
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5669
l5668:
  mov dword [ tmp5636 ], 6
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5670 ], eax
  cmp dword [ tmp5670 ], 0
  jz l5671
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantDivAsInteger
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5672
l5671:
  mov dword [ tmp5636 ], 10
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5673 ], eax
  cmp dword [ tmp5673 ], 0
  jz l5674
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantCompareEQ
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5675
l5674:
  mov dword [ tmp5636 ], 11
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5676 ], eax
  cmp dword [ tmp5676 ], 0
  jz l5677
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantCompareNE
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5678
l5677:
  mov dword [ tmp5636 ], 14
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5679 ], eax
  cmp dword [ tmp5679 ], 0
  jz l5680
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantCompareLT
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5681
l5680:
  mov dword [ tmp5636 ], 15
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5682 ], eax
  cmp dword [ tmp5682 ], 0
  jz l5683
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantCompareLE
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5684
l5683:
  mov dword [ tmp5636 ], 12
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5685 ], eax
  cmp dword [ tmp5685 ], 0
  jz l5686
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ last ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantCompareLT
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5687
l5686:
  mov dword [ tmp5636 ], 13
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5688 ], eax
  cmp dword [ tmp5688 ], 0
  jz l5689
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ last ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantCompareLE
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5690
l5689:
  mov dword [ tmp5636 ], 29
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5691 ], eax
  cmp dword [ tmp5691 ], 0
  jz l5692
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*240]
  pop rdi
  jmp l5693
l5692:
  mov dword [ tmp5636 ], 30
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5694 ], eax
  cmp dword [ tmp5694 ], 0
  jz l5695
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*241]
  pop rdi
  jmp l5696
l5695:
  mov dword [ tmp5636 ], 31
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5697 ], eax
  cmp dword [ tmp5697 ], 0
  jz l5698
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*129]
  pop rdi
  jmp l5699
l5698:
  mov dword [ tmp5636 ], 32
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5700 ], eax
  cmp dword [ tmp5700 ], 0
  jz l5701
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*130]
  pop rdi
  jmp l5702
l5701:
  mov dword [ tmp5636 ], 16
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5703 ], eax
  cmp dword [ tmp5703 ], 0
  jz l5704
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ tmp5653 + Variant_t.value]
  mov dword [ tmp5636 ], eax
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5705
l5704:
  mov dword [ tmp5636 ], 18
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5706 ], eax
  cmp dword [ tmp5706 ], 0
  jz l5707
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ tmp5653 + Variant_t.value]
  mov dword [ tmp5636 ], eax
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_heap ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5708
l5707:
  mov dword [ tmp5636 ], 20
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5709 ], eax
  cmp dword [ tmp5709 ], 0
  jz l5710
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea rcx, [ idx ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  mov eax, dword [ idx + Variant_t.value]
  mov dword [ tmp5636 ], eax
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ box ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5711
l5710:
  mov dword [ tmp5636 ], 21
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5712 ], eax
  cmp dword [ tmp5712 ], 0
  jz l5713
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ box ]
  lea  rdx , [ key ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5714
l5713:
  mov dword [ tmp5636 ], 17
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5715 ], eax
  cmp dword [ tmp5715 ], 0
  jz l5716
  lea  rcx, [ paramBase ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ paramBase ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 1
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ idx ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ paramBase ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*243]
  pop rdi
  lea  rcx, [ paramValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramValue ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ paramValue ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5717
l5716:
  mov dword [ tmp5636 ], 23
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5718 ], eax
  cmp dword [ tmp5718 ], 0
  jz l5719
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5636 ], eax
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5720
l5719:
  mov dword [ tmp5636 ], 25
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5721 ], eax
  cmp dword [ tmp5721 ], 0
  jz l5722
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5636 ], eax
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ _vm_heap ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5723
l5722:
  mov dword [ tmp5636 ], 24
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5724 ], eax
  cmp dword [ tmp5724 ], 0
  jz l5725
  lea  rcx, [ paramBase ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ paramBase ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 1
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ idx ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ paramBase ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*242]
  pop rdi
  jmp l5726
l5725:
  mov dword [ tmp5636 ], 27
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5727 ], eax
  cmp dword [ tmp5727 ], 0
  jz l5728
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea rcx, [ idx ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  mov eax, dword [ idx + Variant_t.value]
  mov dword [ tmp5636 ], eax
  lea  rcx , [ box ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ box ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5729
l5728:
  mov dword [ tmp5636 ], 28
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5730 ], eax
  cmp dword [ tmp5730 ], 0
  jz l5731
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx , [ box ]
  lea  rdx , [ key ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ box ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5732
l5731:
  mov dword [ tmp5636 ], 39
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5733 ], eax
  cmp dword [ tmp5733 ], 0
  jz l5734
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 1
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
  jmp l5735
l5734:
  mov dword [ tmp5636 ], 40
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5736 ], eax
  cmp dword [ tmp5736 ], 0
  jz l5737
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5637 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  mov dword [ tmp5739 ], 1
  mov eax, dword [ tmp5739 ]
  mov [ tmp5653 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ tmp5637 ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5739 ], eax
  cmp dword [ tmp5739 ], 0
  jz l5740
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 1
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
l5740:
l5741:
  jmp l5738
l5737:
  mov dword [ tmp5636 ], 41
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5739 ], eax
  cmp dword [ tmp5739 ], 0
  jz l5742
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5637 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  mov dword [ tmp5744 ], 0
  mov eax, dword [ tmp5744 ]
  mov [ tmp5653 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ tmp5637 ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5744 ], eax
  cmp dword [ tmp5744 ], 0
  jz l5745
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 1
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
l5745:
l5746:
  jmp l5743
l5742:
  mov dword [ tmp5636 ], 33
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5744 ], eax
  cmp dword [ tmp5744 ], 0
  jz l5747
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea rcx, [ src ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea rcx, [ dst ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ src ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5748
l5747:
  mov dword [ tmp5636 ], 42
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5749 ], eax
  cmp dword [ tmp5749 ], 0
  jz l5750
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ ip ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  mov dword [ tmp5636 ], 1
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal568 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5636 ], 1
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ tmp5637 ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
  mov dword [ tmp5752 ], 1
  mov eax, dword [ _vm_deepIdx ]
  add eax, dword [ tmp5752 ]
  mov dword [ _vm_deepIdx ], eax
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal540 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5753 ], 1
  mov eax, dword [ tmp5753 ]
  mov [ tmp5637 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5753 ], eax
  cmp dword [ tmp5753 ], 0
  jz l5754
  lea  rcx, [ tmp5756 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5756 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5756 ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5636 ], 2
  mov [ tmp5756 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5756 + Variant_t.value], rax
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ tmp5756 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantStoreAtIndex_int32
l5754:
l5755:
  jmp l5751
l5750:
  mov dword [ tmp5636 ], 46
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5753 ], eax
  cmp dword [ tmp5753 ], 0
  jz l5757
  lea  rcx, [ tmp5756 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stack ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp5756 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp5756 ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantSub
  mov dword [ tmp5636 ], 1
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ tmp5637 ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantSub
  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5758
l5757:
  mov dword [ tmp5636 ], 43
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5759 ], eax
  cmp dword [ tmp5759 ], 0
  jz l5760
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea rcx, [ ip ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  mov dword [ tmp5636 ], 1
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*241]
  pop rdi
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  mov dword [ tmp5752 ], 1
  mov eax, dword [ _vm_deepIdx ]
  sub eax, dword [ tmp5752 ]
  mov dword [ _vm_deepIdx ], eax
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l5761
l5760:
  mov dword [ tmp5636 ], 44
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5762 ], eax
  cmp dword [ tmp5762 ], 0
  jz l5763
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea rcx, [ ip ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  jmp l5764
l5763:
  mov dword [ tmp5636 ], 19
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5765 ], eax
  cmp dword [ tmp5765 ], 0
  jz l5766
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5767
l5766:
  mov dword [ tmp5636 ], 26
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5768 ], eax
  cmp dword [ tmp5768 ], 0
  jz l5769
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5770
l5769:
  mov dword [ tmp5636 ], 35
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5771 ], eax
  cmp dword [ tmp5771 ], 0
  jz l5772
  mov dword [ tmp5636 ], 1
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5632 ]
  lea  rdx, [vtable_VMachineStackObject]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5632 ]
  lea  rdx , [ classProto ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStackObject_constructor$2
  pop rdi
  lea  rcx, [ newObject ]
  call __MOLD_VariantDestroy
  lea rcx, [ newObject ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal241 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newObject ]
  lea  rdx , [ __literal1082 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ newObject ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5773
l5772:
  mov dword [ tmp5636 ], 36
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5774 ], eax
  cmp dword [ tmp5774 ], 0
  jz l5775
  mov dword [ tmp5636 ], 1
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5636 ], 2
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea rcx, [ thiz ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ thiz ]
  lea  rdx , [ __literal1082 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ __literal50 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5777 ], eax
  cmp dword [ tmp5777 ], 0
  jz l5778
  lea  rcx, [ tmp5780 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp5780 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal637 ]
  lea  rdx , [ tmp5780 ]
  lea  r8 , [ tmp5660 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5660 ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5778:
l5779:
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5637 ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5636 ], 1
  mov [ tmp5756 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5756 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5756 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantSub
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5777 ], eax
  cmp dword [ tmp5777 ], 0
  jz l5781
  lea  rcx, [ tmp5756 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5756 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5756 ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5653 ]
  lea  rdi , [ tmp5637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramsCnt ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5786 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ __literal206 ]
  lea  r8 , [ tmp5786 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5785 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal312 ]
  lea  rdx , [ tmp5786 ]
  lea  r8 , [ tmp5785 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5784 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5637 ]
  lea  rdx , [ tmp5785 ]
  lea  r8 , [ tmp5784 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5783 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal311 ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ tmp5783 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5780 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ tmp5783 ]
  lea  r8 , [ tmp5780 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal527 ]
  lea  rdx , [ tmp5780 ]
  lea  r8 , [ tmp5660 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5660 ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5781:
l5782:
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ ip ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal568 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5636 ], 1
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ tmp5637 ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
  mov dword [ tmp5752 ], 1
  mov eax, dword [ _vm_deepIdx ]
  add eax, dword [ tmp5752 ]
  mov dword [ _vm_deepIdx ], eax
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5776
l5775:
  mov dword [ tmp5636 ], 34
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5636 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5777 ], eax
  cmp dword [ tmp5777 ], 0
  jz l5787
  mov dword [ tmp5636 ], 1
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5636 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  mov dword [ tmp5636 ], 1
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp5752 ], eax
  mov dword [ paramIdx ], 0
l5790:
  mov eax, dword [ paramIdx ]
  cmp eax, dword [ tmp5752 ]
  jge l5791
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ sep ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp5756 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramIdx ]
  mov [ tmp5756 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5756 ]
  lea  r8 , [ tmp5637 ]
  call  __MOLD_VariantSub
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5637 ]
  lea  rdi, [ tmp5653 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5653 ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  45
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal326 ]
  call __MOLD_VariantMove
  mov eax, dword [ paramIdx ]
  add eax, dword [ tmp5636 ]
  mov dword [ paramIdx ], eax
  jmp l5790
l5791:
  lea  rcx , [ __literal8 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp5789 ], 1
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantSub
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*241]
  pop rdi
  jmp l5788
l5787:
  mov dword [ tmp5789 ], 48
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5792 ], eax
  cmp dword [ tmp5792 ], 0
  jz l5793
  mov dword [ tmp5789 ], 1
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5789 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5789 ], 2
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5789 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5789 ], 0
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5795 ], eax
  cmp dword [ tmp5795 ], 0
  jz l5796
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5797
l5796:
  mov dword [ tmp5789 ], 1
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5798 ], eax
  cmp dword [ tmp5798 ], 0
  jz l5799
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg1 ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5800
l5799:
  mov dword [ tmp5789 ], 2
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5801 ], eax
  cmp dword [ tmp5801 ], 0
  jz l5802
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg1 ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  mov dword [ tmp5789 ], 1
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantSub
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg2 ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdx , [ arg2 ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5803
l5802:
  mov dword [ tmp5789 ], 3
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5804 ], eax
  cmp dword [ tmp5804 ], 0
  jz l5805
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg1 ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  mov dword [ tmp5789 ], 1
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantSub
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg2 ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  mov dword [ tmp5789 ], 2
  mov [ tmp5637 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5637 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp5637 ]
  lea  r8 , [ tmp5653 ]
  call  __MOLD_VariantSub
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5653 ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*245]
  pop rdi
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg3 ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdx , [ arg2 ]
  lea  r8 , [ arg3 ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5806
l5805:
  mov dword [ tmp5789 ], -1
  mov [ rv + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ rv + Variant_t.value], rax
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ paramsCnt ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1083 ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5660 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5660 ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5806:
l5803:
l5800:
l5797:
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*241]
  pop rdi
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ rv ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ id ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  jmp l5794
l5793:
  mov dword [ tmp5789 ], 252
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5795 ], eax
  cmp dword [ tmp5795 ], 0
  jz l5807
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ argc ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5808
l5807:
  mov dword [ tmp5789 ], 253
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5798 ], eax
  cmp dword [ tmp5798 ], 0
  jz l5809
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ argv ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*238]
  pop rdi
  jmp l5810
l5809:
  mov dword [ tmp5789 ], 100
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5801 ], eax
  cmp dword [ tmp5801 ], 0
  jz l5811
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5632 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*239]
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5632 ]
  call __MOLD_VariantMove
  mov dword [ tmp5789 ], 1
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5789 ]
  lea  r8 , [ keyId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5789 ], 2
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5789 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5789 ], 3
  lea  rcx, [ bodyIp ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5789 ]
  lea  r8 , [ bodyIp ]
  call  __MOLD_VariantLoadFromIndex_int32
; 
; -----------------------------
; BEGIN: for keys k values v
; 
  jmp l5814
l5813:
  mov dword [ tmp5789 ], -1
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ keyId ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5804 ], eax
  cmp dword [ tmp5804 ], 0
  jz l5815
  mov eax, dword [ keyId + Variant_t.value]
  mov dword [ tmp5789 ], eax
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5789 ]
  lea  r8 , [ k ]
  call  __MOLD_VariantStoreAtIndex_int32
l5815:
l5816:
  mov dword [ tmp5789 ], -1
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ valueId ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ tmp5632 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5632 + Variant_t.value]
  mov dword [ tmp5804 ], eax
  cmp dword [ tmp5804 ], 0
  jz l5817
  mov eax, dword [ valueId + Variant_t.value]
  mov dword [ tmp5789 ], eax
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5789 ]
  lea  r8 , [ v ]
  call  __MOLD_VariantStoreAtIndex_int32
l5817:
l5818:
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyIp ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStack__call$2
  pop rdi
  ret
l5814:
  lea  rcx , [ box ]
  lea  rdx , [ k ]
  lea  r8 , [ v ]
  lea  r9 , [ l5813 ]
  call  __MOLD_ForDriver_Generic
; 
; END: for keys k values v
; -----------------------------
; 
  jmp l5812
l5811:
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp5653 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5780 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5653 ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp5780 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1084 ]
  lea  rdx , [ tmp5780 ]
  lea  r8 , [ tmp5660 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5660 ]
  lea  rdi , [ tmp5632 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5812:
l5810:
l5808:
l5794:
l5788:
l5776:
l5773:
l5770:
l5767:
l5764:
l5761:
l5758:
l5751:
l5748:
l5743:
l5738:
l5735:
l5732:
l5729:
l5726:
l5723:
l5720:
l5717:
l5714:
l5711:
l5708:
l5705:
l5702:
l5699:
l5696:
l5693:
l5690:
l5687:
l5684:
l5681:
l5678:
l5675:
l5672:
l5669:
l5666:
l5663:
l5659:
l5656:
l5652:
l5649:
l5646:
l5643:
l5639:
l5640:
  mov dword [ tmp5789 ], 1
  mov [ tmp5653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5789 ]
  mov [ tmp5653 + Variant_t.value], rax
  lea  rcx , [ ip ]
  lea  rdx , [ tmp5653 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantAdd
  jmp l5633
l5634:

  ; clean frame
  ; -----------
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5632 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5637 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5653 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5756 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newArray ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramBase ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyIp ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator k
  ; Skipped loop iterator v

  add  rsp, 1024
  pop  rbp
  ret

  restore this
  restore ip
  restore codeObj
  restore code
  restore codeCnt
  restore stack
  restore tmp5632
  restore tmp5635
  restore tmp5636
  restore tmp5637
  restore tmp5638
  restore tmp5641
  restore tmp5644
  restore tmp5647
  restore tmp5650
  restore tmp5653
  restore tmp5654
  restore tmp5657
  restore tmp5660
  restore tmp5661
  restore tmp5664
  restore tmp5667
  restore tmp5670
  restore tmp5673
  restore tmp5676
  restore tmp5679
  restore tmp5682
  restore tmp5685
  restore tmp5688
  restore tmp5691
  restore tmp5694
  restore tmp5697
  restore tmp5700
  restore tmp5703
  restore tmp5706
  restore tmp5709
  restore tmp5712
  restore tmp5715
  restore tmp5718
  restore tmp5721
  restore tmp5724
  restore tmp5727
  restore tmp5730
  restore tmp5733
  restore tmp5736
  restore tmp5739
  restore tmp5744
  restore tmp5749
  restore tmp5752
  restore tmp5753
  restore tmp5756
  restore tmp5759
  restore tmp5762
  restore tmp5765
  restore tmp5768
  restore tmp5771
  restore tmp5774
  restore tmp5777
  restore tmp5780
  restore tmp5783
  restore tmp5784
  restore tmp5785
  restore tmp5786
  restore tmp5789
  restore tmp5792
  restore tmp5795
  restore tmp5798
  restore tmp5801
  restore tmp5804
  restore item
  restore opcode
  restore newArray
  restore newMap
  restore last
  restore idx
  restore box
  restore key
  restore paramBase
  restore paramValue
  restore val
  restore src
  restore dst
  restore proto
  restore classProto
  restore newObject
  restore methodName
  restore paramsCnt
  restore thiz
  restore vtable
  restore methodProto
  restore sep
  restore paramIdx
  restore id
  restore rv
  restore arg1
  restore arg2
  restore arg3
  restore keyId
  restore valueId
  restore bodyIp
  restore k
  restore v
; -----------------------------------------------
; function __VMachineStack_run$1
; -----------------------------------------------
__VMachineStack_run$1:
  ; init frame
  ; ----------
  tmp5821 EQU rbp - 24 ; 16 bytes
  tmp5820 EQU rbp - 28 ; 4 bytes
  tmp5819 EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp5819 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5821 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp5820 ], 0
  mov [ tmp5821 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5820 ]
  mov [ tmp5821 + Variant_t.value], rax
  lea  rcx, [ tmp5819 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp5821 ]
  lea  rdi , [ tmp5819 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStack__call$2
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5819 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5821 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp5819
  restore tmp5820
  restore tmp5821
; -----------------------------------------------
; function __VMachineStack_dumpCode$1
; -----------------------------------------------
__VMachineStack_dumpCode$1:
  ; init frame
  ; ----------
  spaceIdx EQU rbp - 12 ; 4 bytes
  type EQU rbp - 28 ; 16 bytes
  spacesCnt EQU rbp - 44 ; 16 bytes
  labelPrefix EQU rbp - 60 ; 16 bytes
  arg EQU rbp - 76 ; 16 bytes
  arg3 EQU rbp - 92 ; 16 bytes
  arg2 EQU rbp - 108 ; 16 bytes
  arg1 EQU rbp - 124 ; 16 bytes
  opcode EQU rbp - 140 ; 16 bytes
  item EQU rbp - 156 ; 16 bytes
  ip EQU rbp - 160 ; 4 bytes
  tmp5995 EQU rbp - 164 ; 4 bytes
  tmp5994 EQU rbp - 180 ; 16 bytes
  tmp5993 EQU rbp - 196 ; 16 bytes
  tmp5990 EQU rbp - 200 ; 4 bytes
  tmp5989 EQU rbp - 216 ; 16 bytes
  tmp5986 EQU rbp - 220 ; 4 bytes
  tmp5983 EQU rbp - 224 ; 4 bytes
  tmp5980 EQU rbp - 228 ; 4 bytes
  tmp5977 EQU rbp - 232 ; 4 bytes
  tmp5974 EQU rbp - 236 ; 4 bytes
  tmp5971 EQU rbp - 240 ; 4 bytes
  tmp5968 EQU rbp - 244 ; 4 bytes
  tmp5965 EQU rbp - 248 ; 4 bytes
  tmp5962 EQU rbp - 252 ; 4 bytes
  tmp5959 EQU rbp - 256 ; 4 bytes
  tmp5956 EQU rbp - 260 ; 4 bytes
  tmp5953 EQU rbp - 264 ; 4 bytes
  tmp5950 EQU rbp - 268 ; 4 bytes
  tmp5947 EQU rbp - 272 ; 4 bytes
  tmp5944 EQU rbp - 276 ; 4 bytes
  tmp5941 EQU rbp - 280 ; 4 bytes
  tmp5938 EQU rbp - 284 ; 4 bytes
  tmp5935 EQU rbp - 288 ; 4 bytes
  tmp5932 EQU rbp - 292 ; 4 bytes
  tmp5929 EQU rbp - 296 ; 4 bytes
  tmp5926 EQU rbp - 300 ; 4 bytes
  tmp5923 EQU rbp - 304 ; 4 bytes
  tmp5920 EQU rbp - 308 ; 4 bytes
  tmp5917 EQU rbp - 312 ; 4 bytes
  tmp5914 EQU rbp - 316 ; 4 bytes
  tmp5911 EQU rbp - 320 ; 4 bytes
  tmp5908 EQU rbp - 324 ; 4 bytes
  tmp5905 EQU rbp - 328 ; 4 bytes
  tmp5902 EQU rbp - 332 ; 4 bytes
  tmp5899 EQU rbp - 336 ; 4 bytes
  tmp5896 EQU rbp - 340 ; 4 bytes
  tmp5893 EQU rbp - 344 ; 4 bytes
  tmp5890 EQU rbp - 348 ; 4 bytes
  tmp5887 EQU rbp - 352 ; 4 bytes
  tmp5884 EQU rbp - 356 ; 4 bytes
  tmp5881 EQU rbp - 360 ; 4 bytes
  tmp5878 EQU rbp - 364 ; 4 bytes
  tmp5875 EQU rbp - 368 ; 4 bytes
  tmp5872 EQU rbp - 372 ; 4 bytes
  tmp5869 EQU rbp - 376 ; 4 bytes
  tmp5866 EQU rbp - 380 ; 4 bytes
  tmp5855 EQU rbp - 384 ; 4 bytes
  tmp5852 EQU rbp - 388 ; 4 bytes
  tmp5849 EQU rbp - 404 ; 16 bytes
  tmp5848 EQU rbp - 420 ; 16 bytes
  tmp5845 EQU rbp - 424 ; 4 bytes
  tmp5842 EQU rbp - 428 ; 4 bytes
  tmp5839 EQU rbp - 432 ; 4 bytes
  tmp5836 EQU rbp - 436 ; 4 bytes
  tmp5835 EQU rbp - 452 ; 16 bytes
  tmp5834 EQU rbp - 456 ; 4 bytes
  tmp5832 EQU rbp - 460 ; 4 bytes
  tmp5829 EQU rbp - 476 ; 16 bytes
  tmp5828 EQU rbp - 480 ; 4 bytes
  tmp5825 EQU rbp - 484 ; 4 bytes
  tmp5824 EQU rbp - 488 ; 4 bytes
  tmp5823 EQU rbp - 492 ; 4 bytes
  tmp5822 EQU rbp - 508 ; 16 bytes
  txt EQU rbp - 524 ; 16 bytes
  commentIdx EQU rbp - 528 ; 4 bytes
  commentsCnt EQU rbp - 544 ; 16 bytes
  comments EQU rbp - 560 ; 16 bytes
  codeCnt EQU rbp - 576 ; 16 bytes
  code EQU rbp - 592 ; 16 bytes
  codeObj EQU rbp - 608 ; 16 bytes
  this EQU rbp - 624 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 656

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [codeObj + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [codeCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [comments + Variant_t.type], VARIANT_UNDEFINED
  mov [commentsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [txt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5822 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5829 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5835 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5848 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5849 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5989 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5993 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5994 + Variant_t.type], VARIANT_UNDEFINED
  mov [item + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [arg1 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg2 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg3 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg + Variant_t.type], VARIANT_UNDEFINED
  mov [labelPrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [spacesCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [type + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ codeObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ codeCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ comments ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal390 ]
  lea  r8 , [ comments ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ commentsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal391 ]
  lea  r8 , [ commentsCnt ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ commentIdx ], 0
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal164 ]
  call __MOLD_VariantMove
  mov dword [ tmp5823 ], 1
  mov eax, dword [ codeCnt + Variant_t.value]
  mov dword [ tmp5824 ], eax
  mov dword [ ip ], 0
l5826:
  mov eax, dword [ ip ]
  cmp eax, dword [ tmp5824 ]
  jge l5827
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ ip ]
  lea  r8 , [ item ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5828 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5828 ], 1
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5829 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5829 ]
  lea  rdi , [ arg1 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5828 ], 2
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5829 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5829 ]
  lea  rdi , [ arg2 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5828 ], 3
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5829 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5829 ]
  lea  rdi , [ arg3 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ arg ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove
l5830:
  mov dword [ tmp5832 ], 0
  mov [ tmp5829 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ commentIdx ]
  mov [ tmp5829 + Variant_t.value], rax
  lea  rcx , [ tmp5829 ]
  lea  rdx , [ commentsCnt ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5834 ], eax
  cmp dword [ tmp5834 ], 0
  jz l5833
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ comments ]
  lea  rdx , [ commentIdx ]
  lea  r8 , [ tmp5835 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5828 ], 0
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5835 ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5829 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ tmp5829 ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5832 ], eax
l5833:
  cmp dword [ tmp5832 ], 0
  jz l5831
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ comments ]
  lea  rdx , [ commentIdx ]
  lea  r8 , [ tmp5829 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5828 ], 1
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5829 ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5835 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal653 ]
  lea  r8 , [ tmp5835 ]
  call  __MOLD_PrintArrayOfVariantsLn
  mov dword [ tmp5836 ], 1
  mov eax, dword [ commentIdx ]
  add eax, dword [ tmp5836 ]
  mov dword [ commentIdx ], eax
  jmp l5830
l5831:
  mov dword [ tmp5828 ], 0
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5834 ], eax
  cmp dword [ tmp5834 ], 0
  jz l5837
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal144 ]
  call __MOLD_VariantMove
  jmp l5838
l5837:
  mov dword [ tmp5828 ], 7
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5839 ], eax
  cmp dword [ tmp5839 ], 0
  jz l5840
  mov dword [ tmp5828 ], 1
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5835 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5835 ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ type ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5842 ], eax
  cmp dword [ tmp5842 ], 0
  jz l5843
  mov dword [ tmp5828 ], 0
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arg ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5835 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp5835 ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5845 ], eax
  cmp dword [ tmp5845 ], 0
  jz l5846
  lea  rcx, [ tmp5849 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arg ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp5849 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1085 ]
  lea  rdx , [ tmp5849 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5847
l5846:
  lea  rcx, [ tmp5849 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arg ]
  lea  rdx , [ __literal463 ]
  lea  r8 , [ tmp5849 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1086 ]
  lea  rdx , [ tmp5849 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
l5847:
  jmp l5844
l5843:
  lea  rcx , [ type ]
  lea  rdx , [ __literal322 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5845 ], eax
  cmp dword [ tmp5845 ], 0
  jz l5850
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1087 ]
  lea  rdx , [ tmp5822 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5851
l5850:
  lea  rcx , [ type ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5852 ], eax
  cmp dword [ tmp5852 ], 0
  jz l5853
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1088 ]
  lea  rdx , [ tmp5822 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5854
l5853:
  lea  rcx , [ type ]
  lea  rdx , [ __literal323 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5855 ], eax
  cmp dword [ tmp5855 ], 0
  jz l5856
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1089 ]
  lea  rdx , [ tmp5822 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5857
l5856:
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ __literal1090 ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5857:
l5854:
l5851:
l5844:
  jmp l5841
l5840:
  mov dword [ tmp5828 ], 8
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5842 ], eax
  cmp dword [ tmp5842 ], 0
  jz l5858
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1091 ]
  call __MOLD_VariantMove
  jmp l5859
l5858:
  mov dword [ tmp5828 ], 9
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5845 ], eax
  cmp dword [ tmp5845 ], 0
  jz l5860
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1092 ]
  call __MOLD_VariantMove
  jmp l5861
l5860:
  mov dword [ tmp5828 ], 1
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5852 ], eax
  cmp dword [ tmp5852 ], 0
  jz l5862
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal591 ]
  call __MOLD_VariantMove
  jmp l5863
l5862:
  mov dword [ tmp5828 ], 2
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5855 ], eax
  cmp dword [ tmp5855 ], 0
  jz l5864
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal592 ]
  call __MOLD_VariantMove
  jmp l5865
l5864:
  mov dword [ tmp5828 ], 49
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5866 ], eax
  cmp dword [ tmp5866 ], 0
  jz l5867
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1093 ]
  call __MOLD_VariantMove
  jmp l5868
l5867:
  mov dword [ tmp5828 ], 4
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5869 ], eax
  cmp dword [ tmp5869 ], 0
  jz l5870
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal595 ]
  call __MOLD_VariantMove
  jmp l5871
l5870:
  mov dword [ tmp5828 ], 3
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5872 ], eax
  cmp dword [ tmp5872 ], 0
  jz l5873
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal594 ]
  call __MOLD_VariantMove
  jmp l5874
l5873:
  mov dword [ tmp5828 ], 5
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5875 ], eax
  cmp dword [ tmp5875 ], 0
  jz l5876
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal596 ]
  call __MOLD_VariantMove
  jmp l5877
l5876:
  mov dword [ tmp5828 ], 6
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5878 ], eax
  cmp dword [ tmp5878 ], 0
  jz l5879
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal597 ]
  call __MOLD_VariantMove
  jmp l5880
l5879:
  mov dword [ tmp5828 ], 10
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5881 ], eax
  cmp dword [ tmp5881 ], 0
  jz l5882
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1094 ]
  call __MOLD_VariantMove
  jmp l5883
l5882:
  mov dword [ tmp5828 ], 11
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5884 ], eax
  cmp dword [ tmp5884 ], 0
  jz l5885
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1095 ]
  call __MOLD_VariantMove
  jmp l5886
l5885:
  mov dword [ tmp5828 ], 14
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5887 ], eax
  cmp dword [ tmp5887 ], 0
  jz l5888
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1096 ]
  call __MOLD_VariantMove
  jmp l5889
l5888:
  mov dword [ tmp5828 ], 15
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5890 ], eax
  cmp dword [ tmp5890 ], 0
  jz l5891
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1097 ]
  call __MOLD_VariantMove
  jmp l5892
l5891:
  mov dword [ tmp5828 ], 12
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5893 ], eax
  cmp dword [ tmp5893 ], 0
  jz l5894
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1098 ]
  call __MOLD_VariantMove
  jmp l5895
l5894:
  mov dword [ tmp5828 ], 13
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5896 ], eax
  cmp dword [ tmp5896 ], 0
  jz l5897
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1099 ]
  call __MOLD_VariantMove
  jmp l5898
l5897:
  mov dword [ tmp5828 ], 34
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5899 ], eax
  cmp dword [ tmp5899 ], 0
  jz l5900
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1100 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5901
l5900:
  mov dword [ tmp5828 ], 16
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5902 ], eax
  cmp dword [ tmp5902 ], 0
  jz l5903
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1101 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5904
l5903:
  mov dword [ tmp5828 ], 20
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5905 ], eax
  cmp dword [ tmp5905 ], 0
  jz l5906
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1102 ]
  call __MOLD_VariantMove
  jmp l5907
l5906:
  mov dword [ tmp5828 ], 21
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5908 ], eax
  cmp dword [ tmp5908 ], 0
  jz l5909
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1103 ]
  call __MOLD_VariantMove
  jmp l5910
l5909:
  mov dword [ tmp5828 ], 17
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5911 ], eax
  cmp dword [ tmp5911 ], 0
  jz l5912
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1104 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5913
l5912:
  mov dword [ tmp5828 ], 18
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5914 ], eax
  cmp dword [ tmp5914 ], 0
  jz l5915
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1105 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5916
l5915:
  mov dword [ tmp5828 ], 19
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5917 ], eax
  cmp dword [ tmp5917 ], 0
  jz l5918
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1106 ]
  call __MOLD_VariantMove
  jmp l5919
l5918:
  mov dword [ tmp5828 ], 23
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5920 ], eax
  cmp dword [ tmp5920 ], 0
  jz l5921
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1107 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5922
l5921:
  mov dword [ tmp5828 ], 24
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5923 ], eax
  cmp dword [ tmp5923 ], 0
  jz l5924
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1108 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5925
l5924:
  mov dword [ tmp5828 ], 25
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5926 ], eax
  cmp dword [ tmp5926 ], 0
  jz l5927
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1109 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5928
l5927:
  mov dword [ tmp5828 ], 26
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5929 ], eax
  cmp dword [ tmp5929 ], 0
  jz l5930
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1110 ]
  call __MOLD_VariantMove
  jmp l5931
l5930:
  mov dword [ tmp5828 ], 27
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5932 ], eax
  cmp dword [ tmp5932 ], 0
  jz l5933
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1111 ]
  call __MOLD_VariantMove
  jmp l5934
l5933:
  mov dword [ tmp5828 ], 28
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5935 ], eax
  cmp dword [ tmp5935 ], 0
  jz l5936
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1112 ]
  call __MOLD_VariantMove
  jmp l5937
l5936:
  mov dword [ tmp5828 ], 39
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5938 ], eax
  cmp dword [ tmp5938 ], 0
  jz l5939
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1113 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5940
l5939:
  mov dword [ tmp5828 ], 40
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5941 ], eax
  cmp dword [ tmp5941 ], 0
  jz l5942
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1114 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5943
l5942:
  mov dword [ tmp5828 ], 41
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5944 ], eax
  cmp dword [ tmp5944 ], 0
  jz l5945
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1115 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5946
l5945:
  mov dword [ tmp5828 ], 42
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5947 ], eax
  cmp dword [ tmp5947 ], 0
  jz l5948
  mov dword [ tmp5828 ], 1
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5829 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5829 ]
  lea  rdx , [ __literal568 ]
  lea  r8 , [ tmp5835 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5835 ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1116 ]
  lea  rdx , [ tmp5822 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5949
l5948:
  mov dword [ tmp5828 ], 46
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5950 ], eax
  cmp dword [ tmp5950 ], 0
  jz l5951
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1117 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5952
l5951:
  mov dword [ tmp5828 ], 43
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5953 ], eax
  cmp dword [ tmp5953 ], 0
  jz l5954
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1118 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5955
l5954:
  mov dword [ tmp5828 ], 44
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5956 ], eax
  cmp dword [ tmp5956 ], 0
  jz l5957
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1119 ]
  call __MOLD_VariantMove
  jmp l5958
l5957:
  mov dword [ tmp5828 ], 29
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5959 ], eax
  cmp dword [ tmp5959 ], 0
  jz l5960
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1120 ]
  call __MOLD_VariantMove
  jmp l5961
l5960:
  mov dword [ tmp5828 ], 30
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5962 ], eax
  cmp dword [ tmp5962 ], 0
  jz l5963
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1121 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5964
l5963:
  mov dword [ tmp5828 ], 31
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5965 ], eax
  cmp dword [ tmp5965 ], 0
  jz l5966
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1122 ]
  call __MOLD_VariantMove
  jmp l5967
l5966:
  mov dword [ tmp5828 ], 32
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5968 ], eax
  cmp dword [ tmp5968 ], 0
  jz l5969
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1123 ]
  call __MOLD_VariantMove
  jmp l5970
l5969:
  mov dword [ tmp5828 ], 36
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5971 ], eax
  cmp dword [ tmp5971 ], 0
  jz l5972
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1124 ]
  lea  rdx , [ arg1 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5973
l5972:
  mov dword [ tmp5828 ], 35
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5974 ], eax
  cmp dword [ tmp5974 ], 0
  jz l5975
  mov dword [ tmp5828 ], 1
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5828 ]
  lea  r8 , [ tmp5835 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5835 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1125 ]
  lea  rdx , [ tmp5822 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5976
l5975:
  mov dword [ tmp5828 ], 33
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5977 ], eax
  cmp dword [ tmp5977 ], 0
  jz l5978
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1126 ]
  call __MOLD_VariantMove
  jmp l5979
l5978:
  mov dword [ tmp5828 ], 252
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5980 ], eax
  cmp dword [ tmp5980 ], 0
  jz l5981
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1127 ]
  call __MOLD_VariantMove
  jmp l5982
l5981:
  mov dword [ tmp5828 ], 253
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5983 ], eax
  cmp dword [ tmp5983 ], 0
  jz l5984
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1128 ]
  call __MOLD_VariantMove
  jmp l5985
l5984:
  mov dword [ tmp5828 ], 48
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5986 ], eax
  cmp dword [ tmp5986 ], 0
  jz l5987
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg2 ]
  lea  rdi , [ tmp5835 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5989 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal419 ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5989 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5849 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5822 ]
  lea  rdx , [ tmp5989 ]
  lea  r8 , [ tmp5849 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal614 ]
  lea  rdx , [ tmp5849 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5988
l5987:
  mov dword [ tmp5828 ], 100
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5835 ]
  lea  r8 , [ tmp5822 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5822 + Variant_t.value]
  mov dword [ tmp5990 ], eax
  cmp dword [ tmp5990 ], 0
  jz l5991
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg2 ]
  lea  rdi , [ tmp5835 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ arg3 ]
  lea  rdi , [ tmp5829 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5994 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal419 ]
  lea  rdx , [ tmp5829 ]
  lea  r8 , [ tmp5994 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5835 ]
  lea  rdx , [ tmp5994 ]
  lea  r8 , [ tmp5993 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5989 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal419 ]
  lea  rdx , [ tmp5993 ]
  lea  r8 , [ tmp5989 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5849 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5822 ]
  lea  rdx , [ tmp5989 ]
  lea  r8 , [ tmp5849 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1129 ]
  lea  rdx , [ tmp5849 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5992
l5991:
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal164 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp5835 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5849 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5835 ]
  lea  rdx , [ __literal52 ]
  lea  r8 , [ tmp5849 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5848 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1084 ]
  lea  rdx , [ tmp5849 ]
  lea  r8 , [ tmp5848 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5848 ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l5992:
l5988:
l5985:
l5982:
l5979:
l5976:
l5973:
l5970:
l5967:
l5964:
l5961:
l5958:
l5955:
l5952:
l5949:
l5946:
l5943:
l5940:
l5937:
l5934:
l5931:
l5928:
l5925:
l5922:
l5919:
l5916:
l5913:
l5910:
l5907:
l5904:
l5901:
l5898:
l5895:
l5892:
l5889:
l5886:
l5883:
l5880:
l5877:
l5874:
l5871:
l5868:
l5865:
l5863:
l5861:
l5859:
l5841:
l5838:
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp5835 ]
  lea  rdi , [ tmp5822 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ labelPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5822 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ labelPrefix ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp5828 ], 5
  mov [ tmp5835 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5828 ]
  mov [ tmp5835 + Variant_t.value], rax
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ labelPrefix ]
  lea  rdi , [ tmp5829 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5835 ]
  lea  rdx , [ tmp5829 ]
  lea  r8 , [ spacesCnt ]
  call  __MOLD_VariantSub
  mov dword [ tmp5828 ], 1
  mov eax, dword [ spacesCnt + Variant_t.value]
  mov dword [ tmp5836 ], eax
  mov dword [ spaceIdx ], 0
l5996:
  mov eax, dword [ spaceIdx ]
  cmp eax, dword [ tmp5836 ]
  jge l5997
  lea  rcx , [ labelPrefix ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ labelPrefix ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ spaceIdx ]
  add eax, dword [ tmp5828 ]
  mov dword [ spaceIdx ], eax
  jmp l5996
l5997:
  lea  rcx , [ 2 ]
  lea  rdx , [ labelPrefix ]
  lea  r8 , [ txt ]
  call  __MOLD_PrintArrayOfVariantsLn
  mov eax, dword [ ip ]
  add eax, dword [ tmp5823 ]
  mov dword [ ip ], eax
  jmp l5826
l5827:

  ; clean frame
  ; -----------
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ comments ]
  call __MOLD_VariantDestroy
  lea  rcx, [ commentsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5822 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5829 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5835 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg ]
  call __MOLD_VariantDestroy
  lea  rcx, [ spacesCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ type ]
  call __MOLD_VariantDestroy

  add  rsp, 656
  pop  rbp
  ret

  restore this
  restore codeObj
  restore code
  restore codeCnt
  restore comments
  restore commentsCnt
  restore commentIdx
  restore txt
  restore tmp5822
  restore tmp5823
  restore tmp5824
  restore tmp5825
  restore tmp5828
  restore tmp5829
  restore tmp5832
  restore tmp5834
  restore tmp5835
  restore tmp5836
  restore tmp5839
  restore tmp5842
  restore tmp5845
  restore tmp5848
  restore tmp5849
  restore tmp5852
  restore tmp5855
  restore tmp5866
  restore tmp5869
  restore tmp5872
  restore tmp5875
  restore tmp5878
  restore tmp5881
  restore tmp5884
  restore tmp5887
  restore tmp5890
  restore tmp5893
  restore tmp5896
  restore tmp5899
  restore tmp5902
  restore tmp5905
  restore tmp5908
  restore tmp5911
  restore tmp5914
  restore tmp5917
  restore tmp5920
  restore tmp5923
  restore tmp5926
  restore tmp5929
  restore tmp5932
  restore tmp5935
  restore tmp5938
  restore tmp5941
  restore tmp5944
  restore tmp5947
  restore tmp5950
  restore tmp5953
  restore tmp5956
  restore tmp5959
  restore tmp5962
  restore tmp5965
  restore tmp5968
  restore tmp5971
  restore tmp5974
  restore tmp5977
  restore tmp5980
  restore tmp5983
  restore tmp5986
  restore tmp5989
  restore tmp5990
  restore tmp5993
  restore tmp5994
  restore tmp5995
  restore ip
  restore item
  restore opcode
  restore arg1
  restore arg2
  restore arg3
  restore arg
  restore labelPrefix
  restore spacesCnt
  restore type
  restore spaceIdx
; -----------------------------------------------
; function BadUsageError
; -----------------------------------------------
BadUsageError:
  ; init frame
  ; ----------
  tmp5998 EQU rbp - 24 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  mov [tmp5998 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1131 ]
  lea  r8 , [ VERSION_STRING ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal1132 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1133 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp5998 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp5998 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  40
  call  __MOLD_SysCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5998 ]
  call __MOLD_VariantDestroy

  add  rsp, 64
  pop  rbp
  ret

  restore tmp5998
; -----------------------------------------------
; entry point
; -----------------------------------------------
; -----------------------------------------------
; function start
; -----------------------------------------------
start:
  ; init frame
  ; ----------
  codeGenerator EQU rbp - 24 ; 16 bytes
  astPrinterText EQU rbp - 40 ; 16 bytes
  mirQuadOptimizer EQU rbp - 56 ; 16 bytes
  mirQuadCollector EQU rbp - 72 ; 16 bytes
  vm EQU rbp - 88 ; 16 bytes
  code EQU rbp - 104 ; 16 bytes
  astTranslator EQU rbp - 120 ; 16 bytes
  astSymbolsCollector EQU rbp - 136 ; 16 bytes
  astModuleResolver EQU rbp - 152 ; 16 bytes
  tmp6069 EQU rbp - 168 ; 16 bytes
  tmp6068 EQU rbp - 184 ; 16 bytes
  idx EQU rbp - 188 ; 4 bytes
  tmp6052 EQU rbp - 192 ; 4 bytes
  tmp6049 EQU rbp - 196 ; 4 bytes
  tmp6046 EQU rbp - 200 ; 4 bytes
  tmp6043 EQU rbp - 204 ; 4 bytes
  tmp6040 EQU rbp - 208 ; 4 bytes
  tmp6039 EQU rbp - 212 ; 4 bytes
  tmp6036 EQU rbp - 216 ; 4 bytes
  tmp6033 EQU rbp - 220 ; 4 bytes
  tmp6030 EQU rbp - 224 ; 4 bytes
  tmp6027 EQU rbp - 228 ; 4 bytes
  tmp6024 EQU rbp - 232 ; 4 bytes
  tmp6019 EQU rbp - 236 ; 4 bytes
  tmp6017 EQU rbp - 240 ; 4 bytes
  tmp6014 EQU rbp - 244 ; 4 bytes
  tmp6011 EQU rbp - 248 ; 4 bytes
  tmp6006 EQU rbp - 252 ; 4 bytes
  tmp6005 EQU rbp - 268 ; 16 bytes
  tmp6004 EQU rbp - 272 ; 4 bytes
  tmp6003 EQU rbp - 288 ; 16 bytes
  tmp6002 EQU rbp - 304 ; 16 bytes
  tmp6001 EQU rbp - 320 ; 16 bytes
  tmp6000 EQU rbp - 324 ; 4 bytes
  tmp5999 EQU rbp - 328 ; 4 bytes
  ast EQU rbp - 344 ; 16 bytes
  parser EQU rbp - 360 ; 16 bytes
  app EQU rbp - 376 ; 16 bytes
  isProfilerEnabled EQU rbp - 380 ; 4 bytes
  optimizationLevel EQU rbp - 384 ; 4 bytes
  path EQU rbp - 400 ; 16 bytes
  mode EQU rbp - 416 ; 16 bytes
  MOLD_SYSCALL_TWO_ARGS EQU rbp - 420 ; 4 bytes
  MOLD_SYSCALL_ONE_ARG EQU rbp - 424 ; 4 bytes
  MOLD_SYSCALL_ZERO_ARGS EQU rbp - 428 ; 4 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 464

  mov [mode + Variant_t.type], VARIANT_UNDEFINED
  mov [path + Variant_t.type], VARIANT_UNDEFINED
  mov [app + Variant_t.type], VARIANT_UNDEFINED
  mov [parser + Variant_t.type], VARIANT_UNDEFINED
  mov [ast + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6001 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6002 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6003 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6005 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6068 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6069 + Variant_t.type], VARIANT_UNDEFINED
  mov [astModuleResolver + Variant_t.type], VARIANT_UNDEFINED
  mov [astSymbolsCollector + Variant_t.type], VARIANT_UNDEFINED
  mov [astTranslator + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [vm + Variant_t.type], VARIANT_UNDEFINED
  mov [mirQuadCollector + Variant_t.type], VARIANT_UNDEFINED
  mov [mirQuadOptimizer + Variant_t.type], VARIANT_UNDEFINED
  mov [astPrinterText + Variant_t.type], VARIANT_UNDEFINED
  mov [codeGenerator + Variant_t.type], VARIANT_UNDEFINED

  mov [SYMBOL_KIND_AS_TEXT + Variant_t.type], VARIANT_UNDEFINED
  mov [MOLD_SYSCALL_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_dataStack + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_locals + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_heap + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_paramBaseStack + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_retValStack + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ DEBUG_AST_OPTIMIZER ], 0
  mov dword [ AST_DATA_INTEGER ], 1
  mov dword [ AST_OPCODE_CALL ], 152
  mov dword [ AST_OPCODE_VARIABLE ], 201
  mov dword [ AST_OPCODE_DECLARE_OR_ASSIGN ], 205
  mov dword [ AST_OPCODE_SUB ], 303
  mov dword [ AST_OPCODE_TYPE_CAST ], 600
  mov dword [ UNICC_DEBUG ], 0
  mov dword [ NodeId ], 0
  mov dword [ SYMBOL_KIND_VAR_LOCAL ], 1
  mov dword [ SYMBOL_KIND_VAR_GLOBAL ], 2
  mov dword [ SYMBOL_KIND_VAR_PARAM ], 3
  mov dword [ SYMBOL_KIND_VAR_RETVAL ], 4
  mov dword [ SYMBOL_KIND_CONST ], 5
  mov dword [ SYMBOL_KIND_LABEL ], 6
  mov dword [ SYMBOL_KIND_FUNCTION ], 7
  mov dword [ SYMBOL_KIND_CLASS ], 8
  mov dword [ SYMBOL_KIND_JMP_TABLE ], 10
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6001 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 0
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal164 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 1
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal165 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 2
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 3
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal166 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 4
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal15 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 5
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal167 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 6
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal168 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 7
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal169 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 8
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal170 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6002 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6002 + Variant_t.value], 9
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6003 ]
  lea rdx, [ __literal171 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6002 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ SYMBOL_KIND_AS_TEXT ]
  call __MOLD_VariantDestroy
  lea rcx, [ SYMBOL_KIND_AS_TEXT ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  mov dword [ SymbolTable_NextId ], 0
  mov dword [ MOLD_SYSCALL_ZERO_ARGS ], 0
  mov dword [ MOLD_SYSCALL_ONE_ARG ], 4096
  mov dword [ MOLD_SYSCALL_TWO_ARGS ], 8192
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6001 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp6000 ], 4097
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal270 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 2
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal271 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 3
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal272 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 4
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal273 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 8
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal274 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 9
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal275 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 10
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal276 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 11
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal277 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 14
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal278 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 15
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal279 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 16
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal280 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 17
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal281 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 18
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal282 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 19
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal283 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 20
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal284 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 21
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal285 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 21
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal286 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 22
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal287 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 23
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal288 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 24
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal289 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 24
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal290 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 29
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal291 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 31
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal292 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 32
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal293 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 33
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal294 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 34
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal295 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 35
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal296 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 36
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal297 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 37
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal298 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 38
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal299 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 40
  mov eax, dword [ MOLD_SYSCALL_ZERO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal300 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 41
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal301 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 42
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal302 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 43
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal303 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 44
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal304 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 45
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal305 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 46
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal306 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 50
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal48 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6004 ], 51
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6004 ]
  mov dword [ tmp6000 ], eax
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6000 ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ __literal307 ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ MOLD_SYSCALL_MAP ]
  call __MOLD_VariantDestroy
  lea rcx, [ MOLD_SYSCALL_MAP ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  mov dword [ DEBUG_MOLD ], 0
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6001 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6003 + Variant_t.value], 0
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6002 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ tmp6003 ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ _vm_dataStack ]
  call __MOLD_VariantDestroy
  lea rcx, [ _vm_dataStack ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  mov dword [ tmp6000 ], 0
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ tmp6000 ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ _vm_heap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_heap ]
  call  __MOLD_VariantArrayCreate
  mov dword [ _vm_deepIdx ], 0
  lea  rcx, [ _vm_paramBaseStack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_paramBaseStack ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ _vm_retValStack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_retValStack ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ VERSION_STRING ]
  call __MOLD_VariantDestroy
  lea rcx, [ VERSION_STRING ]
  lea rdx, [ __literal1130 ]
  call __MOLD_VariantMove
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1134 ]
  call __MOLD_VariantMove
  lea  rcx, [ path ]
  call __MOLD_VariantDestroy
  lea rcx, [ path ]
  lea rdx, [ __literal8 ]
  call __MOLD_VariantMove
  mov dword [ optimizationLevel ], 0
  mov dword [ isProfilerEnabled ], 0
  mov dword [ tmp6000 ], 1
  mov eax, dword [ argc + Variant_t.value]
  mov dword [ tmp6004 ], eax
  mov dword [ idx ], 1
l6007:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp6004 ]
  jge l6008
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1135 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp5999 ], eax
  cmp dword [ tmp5999 ], 0
  jz l6009
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1136 ]
  call __MOLD_VariantMove
  lea  rcx , [ __literal1137 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1138 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  40
  call  __MOLD_SysCall
  pop rdi
  jmp l6010
l6009:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1139 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6011 ], eax
  cmp dword [ tmp6011 ], 0
  jz l6012
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1140 ]
  call __MOLD_VariantMove
  jmp l6013
l6012:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1141 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6014 ], eax
  cmp dword [ tmp6014 ], 0
  jz l6015
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1142 ]
  call __MOLD_VariantMove
  jmp l6016
l6015:
  mov dword [ tmp6017 ], 1
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1143 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6019 ], eax
  cmp dword [ tmp6019 ], 0
  jnz l6018
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1144 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6017 ], eax
l6018:
  cmp dword [ tmp6017 ], 0
  jz l6020
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1145 ]
  call __MOLD_VariantMove
  jmp l6021
l6020:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1146 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6019 ], eax
  cmp dword [ tmp6019 ], 0
  jz l6022
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1147 ]
  call __MOLD_VariantMove
  jmp l6023
l6022:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1148 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6024 ], eax
  cmp dword [ tmp6024 ], 0
  jz l6025
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1149 ]
  call __MOLD_VariantMove
  jmp l6026
l6025:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1150 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6027 ], eax
  cmp dword [ tmp6027 ], 0
  jz l6028
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1151 ]
  call __MOLD_VariantMove
  jmp l6029
l6028:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1152 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6030 ], eax
  cmp dword [ tmp6030 ], 0
  jz l6031
  mov dword [ UNICC_DEBUG ], 1
  jmp l6032
l6031:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1153 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6033 ], eax
  cmp dword [ tmp6033 ], 0
  jz l6034
  mov dword [ DEBUG_AST_OPTIMIZER ], 1
  mov dword [ DEBUG_MOLD ], 1
  jmp l6035
l6034:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1154 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6036 ], eax
  cmp dword [ tmp6036 ], 0
  jz l6037
  mov dword [ optimizationLevel ], 0
  jmp l6038
l6037:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1155 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6040 ], eax
  cmp dword [ tmp6040 ], 0
  jz l6041
  mov dword [ optimizationLevel ], 1
  jmp l6042
l6041:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1156 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6043 ], eax
  cmp dword [ tmp6043 ], 0
  jz l6044
  mov dword [ optimizationLevel ], 2
  jmp l6045
l6044:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1157 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6046 ], eax
  cmp dword [ tmp6046 ], 0
  jz l6047
  mov dword [ optimizationLevel ], 3
  jmp l6048
l6047:
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1158 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6049 ], eax
  cmp dword [ tmp6049 ], 0
  jz l6050
  mov dword [ isProfilerEnabled ], 1
  jmp l6051
l6050:
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6003 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp6039 ], 0
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6003 ]
  lea  rdx , [ tmp6039 ]
  lea  r8 , [ tmp6002 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal117 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6052 ], eax
  cmp dword [ tmp6052 ], 0
  jz l6053
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  BadUsageError
  pop rdi
  jmp l6054
l6053:
  lea  rcx, [ path ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ path ]
  call  __MOLD_VariantLoadFromIndex_int32
l6054:
l6051:
l6048:
l6045:
l6042:
l6038:
l6035:
l6032:
l6029:
l6026:
l6023:
l6021:
l6016:
l6013:
l6010:
  mov eax, dword [ idx ]
  add eax, dword [ tmp6000 ]
  mov dword [ idx ], eax
  jmp l6007
l6008:
  lea  rcx , [ path ]
  lea  rdx , [ __literal8 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp5999 ], eax
  cmp dword [ tmp5999 ], 0
  jz l6055
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  BadUsageError
  pop rdi
l6055:
l6056:
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_AppMold]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_constructor$1
  pop rdi
  lea  rcx, [ app ]
  call __MOLD_VariantDestroy
  lea rcx, [ app ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1159 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_Parser]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser_constructor$1
  pop rdi
  lea  rcx, [ parser ]
  call __MOLD_VariantDestroy
  lea rcx, [ parser ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1160 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ parser ]
  lea  rdx , [ path ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser_parseFile$2
  pop rdi
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea rcx, [ ast ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1147 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp5999 ], eax
  cmp dword [ tmp5999 ], 0
  jz l6057
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*2]
  pop rdi
  jmp l6058
l6057:
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1149 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6011 ], eax
  cmp dword [ tmp6011 ], 0
  jz l6059
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*4]
  pop rdi
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea rcx, [ ast ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx , [ ast ]
  call  __MOLD_PrintVariantLn
  jmp l6060
l6059:
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1161 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*4]
  pop rdi
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea rcx, [ ast ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1162 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_getAstModuleResolver$1
  pop rdi
  lea  rcx, [ astModuleResolver ]
  call __MOLD_VariantDestroy
  lea rcx, [ astModuleResolver ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astModuleResolver ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*57]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1163 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*155]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1164 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_getAstSymbolsCollector$1
  pop rdi
  lea  rcx, [ astSymbolsCollector ]
  call __MOLD_VariantDestroy
  lea rcx, [ astSymbolsCollector ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astSymbolsCollector ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*64]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1165 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  mov dword [ tmp6006 ], 0
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6006 ]
  jnz l6061
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1166 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*156]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  jmp l6062
l6061:
  mov dword [ tmp6006 ], 1
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6006 ]
  jnz l6063
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1167 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*159]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1168 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1166 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*156]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1169 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*154]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  mov dword [ tmp6019 ], 1
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1142 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6024 ], eax
  cmp dword [ tmp6024 ], 0
  jnz l6065
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1134 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6019 ], eax
l6065:
  cmp dword [ tmp6019 ], 0
  jz l6066
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1170 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  jmp l6067
l6066:
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1171 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*160]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
l6067:
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1172 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*158]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1173 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*157]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  jmp l6064
l6063:
  mov [ tmp6003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ optimizationLevel ]
  mov [ tmp6003 + Variant_t.value], rax
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6003 ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp6069 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ __literal1175 ]
  lea  r8 , [ tmp6069 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp6068 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1174 ]
  lea  rdx , [ tmp6069 ]
  lea  r8 , [ tmp6068 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6068 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  41
  call  __MOLD_SysCall
  pop rdi
l6064:
l6062:
  mov dword [ tmp6014 ], 1
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1142 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6017 ], eax
  cmp dword [ tmp6017 ], 0
  jnz l6070
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1134 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6014 ], eax
l6070:
  cmp dword [ tmp6014 ], 0
  jz l6071
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1176 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_ASTTranslatorMIR0]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ app ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR0_constructor$2
  pop rdi
  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea rcx, [ astTranslator ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*236]
  pop rdi
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ astTranslator ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1177 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_VMachineStack]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStack_constructor$1
  pop rdi
  lea  rcx, [ vm ]
  call __MOLD_VariantDestroy
  lea rcx, [ vm ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ vm ]
  lea  rdx , [ code ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStack_loadCode$2
  pop rdi
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1142 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6017 ], eax
  cmp dword [ tmp6017 ], 0
  jz l6073
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1178 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ vm ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStack_dumpCode$1
  pop rdi
  jmp l6074
l6073:
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1134 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6019 ], eax
  cmp dword [ tmp6019 ], 0
  jz l6075
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1179 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ vm ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStack_run$1
  pop rdi
l6075:
l6076:
l6074:
  jmp l6072
l6071:
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_ASTTranslatorMIR1]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdx , [ app ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_constructor$2
  pop rdi
  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea rcx, [ astTranslator ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_MIRQuadCollector]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector_constructor$1
  pop rdi
  lea  rcx, [ mirQuadCollector ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirQuadCollector ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_MIRQuadOptimizer]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadOptimizer_constructor$1
  pop rdi
  lea  rcx, [ mirQuadOptimizer ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirQuadOptimizer ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1151 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6017 ], eax
  cmp dword [ tmp6017 ], 0
  jz l6077
  lea  rcx, [ astPrinterText ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astPrinterText ]
  lea  rdx, [vtable_ASTPrinterText]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astPrinterText ]
  lea  rdx , [ ast ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPrinterText_printNode$2
  pop rdi
  jmp l6078
l6077:
  mov dword [ tmp6006 ], 0
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6006 ]
  jnz l6079
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ mirQuadCollector ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*265]
  pop rdi
  jmp l6080
l6079:
  mov dword [ tmp6006 ], 1
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6006 ]
  jnz l6081
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ mirQuadOptimizer ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*265]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ mirQuadCollector ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*265]
  pop rdi
l6081:
l6082:
l6080:
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1180 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6002 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*163]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6002 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*72]
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1181 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6001 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  rax, [rcx + Variant_t.value]
  mov  rax, [rax + Buffer_t.bytesPtr]
  mov  rax, [rax + Object_t.vtable]
  call qword [rax + 8*236]
  pop rdi
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1145 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6019 ], eax
  cmp dword [ tmp6019 ], 0
  jz l6083
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ mirQuadCollector ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector_printQuads$1
  pop rdi
  jmp l6084
l6083:
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1140 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp6001 + Variant_t.value]
  mov dword [ tmp6024 ], eax
  cmp dword [ tmp6024 ], 0
  jz l6085
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ astTranslator ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ mirQuadCollector ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector_getQuads$1
  pop rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_getSymbolTable$1
  pop rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1182 ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_logDebug$2
  pop rdi
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  lea  rdx, [vtable_CodeGeneratorX64]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ tmp6001 ]
  lea  rdi , [ tmp6002 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_constructor$1
  pop rdi
  lea  rcx, [ codeGenerator ]
  call __MOLD_VariantDestroy
  lea rcx, [ codeGenerator ]
  lea rdx, [ tmp6001 ]
  call __MOLD_VariantMove
  mov eax, dword [ isProfilerEnabled ]
  mov [ tmp6001 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp6001 + Variant_t.value], rax
  lea  rcx , [ codeGenerator ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ tmp6001 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ codeGenerator ]
  lea  rdx , [ code ]
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_run$2
  pop rdi
  jmp l6086
l6085:
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rdi , [ tmp6001 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  BadUsageError
  pop rdi
l6086:
l6084:
l6078:
l6072:
l6060:
l6058:

  ; clean frame
  ; -----------
  lea  rcx, [ path ]
  call __MOLD_VariantDestroy
  lea  rcx, [ app ]
  call __MOLD_VariantDestroy
  lea  rcx, [ parser ]
  call __MOLD_VariantDestroy
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6001 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6002 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6003 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6005 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astModuleResolver ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astSymbolsCollector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadCollector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadOptimizer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astPrinterText ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeGenerator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ argv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ argc ]
  call __MOLD_VariantDestroy
  lea  rcx, [ SYMBOL_KIND_AS_TEXT ]
  call __MOLD_VariantDestroy
  lea  rcx, [ MOLD_SYSCALL_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_dataStack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_heap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_paramBaseStack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_retValStack ]
  call __MOLD_VariantDestroy

  add  rsp, 464
  pop  rbp
  ret

  restore MOLD_SYSCALL_ZERO_ARGS
  restore MOLD_SYSCALL_ONE_ARG
  restore MOLD_SYSCALL_TWO_ARGS
  restore mode
  restore path
  restore optimizationLevel
  restore isProfilerEnabled
  restore app
  restore parser
  restore ast
  restore tmp5999
  restore tmp6000
  restore tmp6001
  restore tmp6002
  restore tmp6003
  restore tmp6004
  restore tmp6005
  restore tmp6006
  restore tmp6011
  restore tmp6014
  restore tmp6017
  restore tmp6019
  restore tmp6024
  restore tmp6027
  restore tmp6030
  restore tmp6033
  restore tmp6036
  restore tmp6039
  restore tmp6040
  restore tmp6043
  restore tmp6046
  restore tmp6049
  restore tmp6052
  restore idx
  restore tmp6068
  restore tmp6069
  restore astModuleResolver
  restore astSymbolsCollector
  restore astTranslator
  restore code
  restore vm
  restore mirQuadCollector
  restore mirQuadOptimizer
  restore astPrinterText
  restore codeGenerator

endOfCodeSection:
; ------------------------------------------------------------------------------
;                                 Data section
; ------------------------------------------------------------------------------
section '.data' data readable writeable
include 'CommonData.asm'


; Global vars
; -----------
UNICC_DEBUG  dd 0
null  Variant_t 0, 0, 0
NodeId  dd 0
AST_OPCODE_FUNCTION  Variant_t 0, 0, 0
AST_OPCODE_CLASS  Variant_t 0, 0, 0
AST_OPCODE_CLASS_METHOD  Variant_t 0, 0, 0
UNICC_ERROR  Variant_t 0, 0, 0
UNICC_REDUCE  Variant_t 0, 0, 0
UNICC_SHIFT  Variant_t 0, 0, 0
PRODUCTION_LHS_IDX  Variant_t 0, 0, 0
PRODUCTION_LENGTH_IDX  Variant_t 0, 0, 0
PRODUCTION_EMIT_IDX  Variant_t 0, 0, 0
UNICC_EOF  Variant_t 0, 0, 0
AST_OPCODE_VARIABLE  dd 0
AST_DATA_INTEGER  dd 0
AST_DATA_FLOAT  Variant_t 0, 0, 0
AST_DATA_DOUBLE  Variant_t 0, 0, 0
AST_DATA_STRING  Variant_t 0, 0, 0
AST_DATA_BOOL  Variant_t 0, 0, 0
AST_DATA_OBJECT  Variant_t 0, 0, 0
AST_DATA_NULL  Variant_t 0, 0, 0
AST_DATA_UNDEFINED  Variant_t 0, 0, 0
AST_DATA_ARRAY  Variant_t 0, 0, 0
AST_DATA_MAP  Variant_t 0, 0, 0
AST_OPCODE_PROGRAM  Variant_t 0, 0, 0
AST_OPCODE_NEG  Variant_t 0, 0, 0
AST_OPCODE_BOOL_AND  Variant_t 0, 0, 0
AST_OPCODE_BOOL_OR  Variant_t 0, 0, 0
AST_OPCODE_IDIV  Variant_t 0, 0, 0
AST_OPCODE_CALL  dd 0
AST_OPCODE_SUB  dd 0
AST_OPCODE_MUL  Variant_t 0, 0, 0
AST_OPCODE_DIV  Variant_t 0, 0, 0
AST_OPCODE_COMPARE_EQ  Variant_t 0, 0, 0
AST_OPCODE_COMPARE_NEQ  Variant_t 0, 0, 0
AST_OPCODE_COMPARE_GT  Variant_t 0, 0, 0
AST_OPCODE_COMPARE_GE  Variant_t 0, 0, 0
AST_OPCODE_COMPARE_LT  Variant_t 0, 0, 0
AST_OPCODE_COMPARE_LE  Variant_t 0, 0, 0
AST_OPCODE_CALL_NEW  Variant_t 0, 0, 0
AST_OPCODE_VCALL  Variant_t 0, 0, 0
AST_OPCODE_BLOCK  Variant_t 0, 0, 0
AST_OPCODE_IF  Variant_t 0, 0, 0
AST_OPCODE_WHILE  Variant_t 0, 0, 0
AST_OPCODE_FOR_VALUES_RANGE  Variant_t 0, 0, 0
AST_OPCODE_TYPE_CAST  dd 0
AST_OPCODE_ASSIGN  Variant_t 0, 0, 0
AST_OPCODE_DECLARE  Variant_t 0, 0, 0
AST_OPCODE_DECLARE_OR_ASSIGN  dd 0
AST_OPCODE_NOP  Variant_t 0, 0, 0
AST_OPCODE_REFERENCE_BY_INDEX  Variant_t 0, 0, 0
AST_OPCODE_REFERENCE_BY_KEY  Variant_t 0, 0, 0
AST_OPCODE_ADD  Variant_t 0, 0, 0
AST_OPCODE_STRING_JOIN  Variant_t 0, 0, 0
AST_OPCODE_FOR_VALUES  Variant_t 0, 0, 0
AST_OPCODE_FOR_KEYS  Variant_t 0, 0, 0
AST_OPCODE_FOR_KEYS_VALUES  Variant_t 0, 0, 0
AST_OPCODE_FOR_INDEXES  Variant_t 0, 0, 0
AST_OPCODE_FOR_INDEXES_VALUES  Variant_t 0, 0, 0
AST_OPCODE_BOOL_NOT  Variant_t 0, 0, 0
SYMBOL_KIND_CONST  dd 0
SymbolTable_NextId  dd 0
SYMBOL_KIND_VAR_GLOBAL  dd 0
SYMBOL_KIND_VAR_LOCAL  dd 0
SYMBOL_KIND_FUNCTION  dd 0
SYMBOL_KIND_CLASS  dd 0
SYMBOL_KIND_VAR_PARAM  dd 0
SYMBOL_KIND_VAR_RETVAL  dd 0
SYMBOL_KIND_LABEL  dd 0
SYMBOL_KIND_JMP_TABLE  dd 0
DEBUG_AST_OPTIMIZER  dd 0
MOLD_SYSCALL_MAP  Variant_t 0, 0, 0
AST_DATA_SELECTOR  Variant_t 0, 0, 0
AST_OPCODE_SWITCH  Variant_t 0, 0, 0
MIR_OPCODE_NOP  Variant_t 0, 0, 0
MIR_OPCODE_NEG  Variant_t 0, 0, 0
MIR_OPCODE_ADD  Variant_t 0, 0, 0
MIR_OPCODE_SUB  Variant_t 0, 0, 0
MIR_OPCODE_MUL  Variant_t 0, 0, 0
MIR_OPCODE_DIV  Variant_t 0, 0, 0
MIR_OPCODE_IDIV  Variant_t 0, 0, 0
MIR_OPCODE_STRING_JOIN  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_ARRAY  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_MAP  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_IMM  Variant_t 0, 0, 0
MIR_OPCODE_CMP_EQ  Variant_t 0, 0, 0
MIR_OPCODE_CMP_NEQ  Variant_t 0, 0, 0
MIR_OPCODE_CMP_GT  Variant_t 0, 0, 0
MIR_OPCODE_CMP_GE  Variant_t 0, 0, 0
MIR_OPCODE_CMP_LT  Variant_t 0, 0, 0
MIR_OPCODE_CMP_LE  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_LOCAL  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_PARAMN  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_GLOBAL  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_RETVAL  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_BY_INDEX  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_BY_KEY  Variant_t 0, 0, 0
MIR_OPCODE_STORE_LOCAL  Variant_t 0, 0, 0
MIR_OPCODE_STORE_PARAMN  Variant_t 0, 0, 0
MIR_OPCODE_STORE_GLOBAL  Variant_t 0, 0, 0
MIR_OPCODE_STORE_RETVAL  Variant_t 0, 0, 0
MIR_OPCODE_STORE_BY_INDEX  Variant_t 0, 0, 0
MIR_OPCODE_STORE_BY_KEY  Variant_t 0, 0, 0
MIR_OPCODE_MOVE_BACK  Variant_t 0, 0, 0
MIR_OPCODE_DROP  Variant_t 0, 0, 0
MIR_OPCODE_DROP_N  Variant_t 0, 0, 0
MIR_OPCODE_DUP  Variant_t 0, 0, 0
MIR_OPCODE_OVER  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_ARGC  Variant_t 0, 0, 0
MIR_OPCODE_LOAD_ARGV  Variant_t 0, 0, 0
MIR_OPCODE_CREATE_OBJECT  Variant_t 0, 0, 0
MIR_OPCODE_JMP  Variant_t 0, 0, 0
MIR_OPCODE_JMP_IF_TRUE  Variant_t 0, 0, 0
MIR_OPCODE_JMP_IF_FALSE  Variant_t 0, 0, 0
MIR_OPCODE_RET  Variant_t 0, 0, 0
MIR_OPCODE_INNER_RET  Variant_t 0, 0, 0
MIR_OPCODE_CALL  Variant_t 0, 0, 0
MIR_OPCODE_VCALL  Variant_t 0, 0, 0
MIR_OPCODE_PRINT  Variant_t 0, 0, 0
MIR_OPCODE_INIT_FRAME  Variant_t 0, 0, 0
MIR_OPCODE_RETVAL_GUARD  Variant_t 0, 0, 0
MIR_OPCODE_FOR_EACH  Variant_t 0, 0, 0
MIR_OPCODE_SYSCALL  Variant_t 0, 0, 0
DEBUG_MOLD  dd 0
SHOW_TYPE_CAST_NODES_ENABLED  Variant_t 0, 0, 0
SYMBOL_KIND_AS_TEXT  Variant_t 0, 0, 0
SYMBOL_KIND_METHOD  Variant_t 0, 0, 0
_vm_dataStack  Variant_t 0, 0, 0
_vm_locals  Variant_t 0, 0, 0
_vm_heap  Variant_t 0, 0, 0
_vm_deepIdx  dd 0
_vm_paramBaseStack  Variant_t 0, 0, 0
_vm_retValStack  Variant_t 0, 0, 0
VERSION_STRING  Variant_t 0, 0, 0
; ------------------------------------------------------------------------------
;                     Constant (read-only) data section
; ------------------------------------------------------------------------------
section '.rdata' data readable

; Constants
; ---------
db ?
; iter 0
__literal0 Variant_t VARIANT_STRING, 0, __literal0_buffer
_act Variant_t VARIANT_ARRAY, 0, _act_buffer
_go Variant_t VARIANT_ARRAY, 0, _go_buffer
_def_prod Variant_t VARIANT_ARRAY, 0, _def_prod_buffer
_dfa_select Variant_t VARIANT_ARRAY, 0, _dfa_select_buffer
_dfa_idx Variant_t VARIANT_ARRAY, 0, _dfa_idx_buffer
_dfa_chars Variant_t VARIANT_ARRAY, 0, _dfa_chars_buffer
_dfa_trans Variant_t VARIANT_ARRAY, 0, _dfa_trans_buffer
_dfa_accept Variant_t VARIANT_ARRAY, 0, _dfa_accept_buffer
_symbolsGreedy Variant_t VARIANT_ARRAY, 0, _symbolsGreedy_buffer
_productions Variant_t VARIANT_ARRAY, 0, _productions_buffer
__literal1 Variant_t VARIANT_STRING, 0, __literal1_buffer
__literal2 Variant_t VARIANT_STRING, 0, __literal2_buffer
__literal3 Variant_t VARIANT_STRING, 0, __literal3_buffer
__literal4 Variant_t VARIANT_STRING, 0, __literal4_buffer
__literal5 Variant_t VARIANT_STRING, 0, __literal5_buffer
__literal6 Variant_t VARIANT_STRING, 0, __literal6_buffer
__literal7 Variant_t VARIANT_STRING, 0, __literal7_buffer
__literal8 Variant_t VARIANT_STRING, 0, __literal8_buffer
__literal9 Variant_t VARIANT_STRING, 0, __literal9_buffer
__literal10 Variant_t VARIANT_STRING, 0, __literal10_buffer
__literal11 Variant_t VARIANT_STRING, 0, __literal11_buffer
__literal12 Variant_t VARIANT_STRING, 0, __literal12_buffer
__literal13 Variant_t VARIANT_STRING, 0, __literal13_buffer
__literal14 Variant_t VARIANT_STRING, 0, __literal14_buffer
__literal15 Variant_t VARIANT_STRING, 0, __literal15_buffer
__literal16 Variant_t VARIANT_STRING, 0, __literal16_buffer
__literal17 Variant_t VARIANT_STRING, 0, __literal17_buffer
__literal18 Variant_t VARIANT_STRING, 0, __literal18_buffer
__literal19 Variant_t VARIANT_STRING, 0, __literal19_buffer
__literal20 Variant_t VARIANT_STRING, 0, __literal20_buffer
__literal21 Variant_t VARIANT_STRING, 0, __literal21_buffer
__literal22 Variant_t VARIANT_STRING, 0, __literal22_buffer
__literal23 Variant_t VARIANT_STRING, 0, __literal23_buffer
__literal24 Variant_t VARIANT_STRING, 0, __literal24_buffer
__literal25 Variant_t VARIANT_STRING, 0, __literal25_buffer
__literal26 Variant_t VARIANT_STRING, 0, __literal26_buffer
__literal27 Variant_t VARIANT_STRING, 0, __literal27_buffer
__literal28 Variant_t VARIANT_STRING, 0, __literal28_buffer
__literal29 Variant_t VARIANT_STRING, 0, __literal29_buffer
__literal30 Variant_t VARIANT_STRING, 0, __literal30_buffer
__literal31 Variant_t VARIANT_STRING, 0, __literal31_buffer
__literal32 Variant_t VARIANT_STRING, 0, __literal32_buffer
__literal33 Variant_t VARIANT_STRING, 0, __literal33_buffer
__literal34 Variant_t VARIANT_STRING, 0, __literal34_buffer
__literal35 Variant_t VARIANT_STRING, 0, __literal35_buffer
__literal36 Variant_t VARIANT_STRING, 0, __literal36_buffer
__literal37 Variant_t VARIANT_STRING, 0, __literal37_buffer
__literal38 Variant_t VARIANT_STRING, 0, __literal38_buffer
__literal39 Variant_t VARIANT_STRING, 0, __literal39_buffer
__literal40 Variant_t VARIANT_STRING, 0, __literal40_buffer
__literal41 Variant_t VARIANT_STRING, 0, __literal41_buffer
__literal42 Variant_t VARIANT_STRING, 0, __literal42_buffer
__literal43 Variant_t VARIANT_STRING, 0, __literal43_buffer
__literal44 Variant_t VARIANT_STRING, 0, __literal44_buffer
__literal45 Variant_t VARIANT_STRING, 0, __literal45_buffer
__literal46 Variant_t VARIANT_STRING, 0, __literal46_buffer
__literal47 Variant_t VARIANT_STRING, 0, __literal47_buffer
__literal48 Variant_t VARIANT_STRING, 0, __literal48_buffer
__literal49 Variant_t VARIANT_STRING, 0, __literal49_buffer
__literal50 Variant_t VARIANT_STRING, 0, __literal50_buffer
__literal51 Variant_t VARIANT_STRING, 0, __literal51_buffer
__literal52 Variant_t VARIANT_STRING, 0, __literal52_buffer
__literal53 Variant_t VARIANT_STRING, 0, __literal53_buffer
__literal54 Variant_t VARIANT_STRING, 0, __literal54_buffer
__literal55 Variant_t VARIANT_STRING, 0, __literal55_buffer
__literal56 Variant_t VARIANT_STRING, 0, __literal56_buffer
__literal57 Variant_t VARIANT_STRING, 0, __literal57_buffer
__literal58 Variant_t VARIANT_STRING, 0, __literal58_buffer
__literal59 Variant_t VARIANT_STRING, 0, __literal59_buffer
__literal60 Variant_t VARIANT_STRING, 0, __literal60_buffer
__literal61 Variant_t VARIANT_STRING, 0, __literal61_buffer
__literal62 Variant_t VARIANT_STRING, 0, __literal62_buffer
__literal63 Variant_t VARIANT_STRING, 0, __literal63_buffer
__literal64 Variant_t VARIANT_STRING, 0, __literal64_buffer
__literal65 Variant_t VARIANT_STRING, 0, __literal65_buffer
AST_DataTypeNames Variant_t VARIANT_ARRAY, 0, AST_DataTypeNames_buffer
AST_DataTypeForMIR Variant_t VARIANT_ARRAY, 0, AST_DataTypeForMIR_buffer
__literal66 Variant_t VARIANT_STRING, 0, __literal66_buffer
__literal67 Variant_t VARIANT_STRING, 0, __literal67_buffer
__literal68 Variant_t VARIANT_STRING, 0, __literal68_buffer
__literal69 Variant_t VARIANT_STRING, 0, __literal69_buffer
__literal70 Variant_t VARIANT_STRING, 0, __literal70_buffer
__literal71 Variant_t VARIANT_STRING, 0, __literal71_buffer
__literal72 Variant_t VARIANT_STRING, 0, __literal72_buffer
__literal73 Variant_t VARIANT_STRING, 0, __literal73_buffer
__literal74 Variant_t VARIANT_STRING, 0, __literal74_buffer
__literal75 Variant_t VARIANT_STRING, 0, __literal75_buffer
__literal76 Variant_t VARIANT_STRING, 0, __literal76_buffer
__literal77 Variant_t VARIANT_STRING, 0, __literal77_buffer
__literal78 Variant_t VARIANT_STRING, 0, __literal78_buffer
__literal79 Variant_t VARIANT_STRING, 0, __literal79_buffer
__literal80 Variant_t VARIANT_STRING, 0, __literal80_buffer
__literal81 Variant_t VARIANT_STRING, 0, __literal81_buffer
__literal82 Variant_t VARIANT_STRING, 0, __literal82_buffer
__literal83 Variant_t VARIANT_STRING, 0, __literal83_buffer
__literal84 Variant_t VARIANT_STRING, 0, __literal84_buffer
__literal85 Variant_t VARIANT_STRING, 0, __literal85_buffer
__literal86 Variant_t VARIANT_STRING, 0, __literal86_buffer
__literal87 Variant_t VARIANT_STRING, 0, __literal87_buffer
__literal88 Variant_t VARIANT_STRING, 0, __literal88_buffer
__literal89 Variant_t VARIANT_STRING, 0, __literal89_buffer
__literal90 Variant_t VARIANT_STRING, 0, __literal90_buffer
__literal91 Variant_t VARIANT_STRING, 0, __literal91_buffer
__literal92 Variant_t VARIANT_STRING, 0, __literal92_buffer
__literal93 Variant_t VARIANT_STRING, 0, __literal93_buffer
__literal94 Variant_t VARIANT_STRING, 0, __literal94_buffer
__literal95 Variant_t VARIANT_STRING, 0, __literal95_buffer
__literal96 Variant_t VARIANT_STRING, 0, __literal96_buffer
__literal97 Variant_t VARIANT_STRING, 0, __literal97_buffer
__literal98 Variant_t VARIANT_STRING, 0, __literal98_buffer
__literal99 Variant_t VARIANT_STRING, 0, __literal99_buffer
__literal100 Variant_t VARIANT_STRING, 0, __literal100_buffer
__literal101 Variant_t VARIANT_STRING, 0, __literal101_buffer
__literal102 Variant_t VARIANT_STRING, 0, __literal102_buffer
__literal103 Variant_t VARIANT_STRING, 0, __literal103_buffer
__literal104 Variant_t VARIANT_STRING, 0, __literal104_buffer
__literal105 Variant_t VARIANT_STRING, 0, __literal105_buffer
__literal106 Variant_t VARIANT_STRING, 0, __literal106_buffer
__literal107 Variant_t VARIANT_STRING, 0, __literal107_buffer
__literal108 Variant_t VARIANT_STRING, 0, __literal108_buffer
__literal109 Variant_t VARIANT_STRING, 0, __literal109_buffer
__literal110 Variant_t VARIANT_STRING, 0, __literal110_buffer
__literal111 Variant_t VARIANT_STRING, 0, __literal111_buffer
__literal112 Variant_t VARIANT_STRING, 0, __literal112_buffer
__literal113 Variant_t VARIANT_STRING, 0, __literal113_buffer
__literal114 Variant_t VARIANT_STRING, 0, __literal114_buffer
__literal115 Variant_t VARIANT_STRING, 0, __literal115_buffer
__literal116 Variant_t VARIANT_STRING, 0, __literal116_buffer
__literal117 Variant_t VARIANT_STRING, 0, __literal117_buffer
__literal118 Variant_t VARIANT_STRING, 0, __literal118_buffer
__literal119 Variant_t VARIANT_STRING, 0, __literal119_buffer
__literal120 Variant_t VARIANT_STRING, 0, __literal120_buffer
__literal121 Variant_t VARIANT_STRING, 0, __literal121_buffer
__literal122 Variant_t VARIANT_STRING, 0, __literal122_buffer
__literal123 Variant_t VARIANT_STRING, 0, __literal123_buffer
__literal124 Variant_t VARIANT_STRING, 0, __literal124_buffer
__literal125 Variant_t VARIANT_STRING, 0, __literal125_buffer
__literal126 Variant_t VARIANT_STRING, 0, __literal126_buffer
__literal127 Variant_t VARIANT_STRING, 0, __literal127_buffer
__literal128 Variant_t VARIANT_STRING, 0, __literal128_buffer
__literal129 Variant_t VARIANT_STRING, 0, __literal129_buffer
__literal130 Variant_t VARIANT_STRING, 0, __literal130_buffer
__literal131 Variant_t VARIANT_STRING, 0, __literal131_buffer
__literal132 Variant_t VARIANT_STRING, 0, __literal132_buffer
__literal133 Variant_t VARIANT_STRING, 0, __literal133_buffer
__literal134 Variant_t VARIANT_STRING, 0, __literal134_buffer
__literal135 Variant_t VARIANT_STRING, 0, __literal135_buffer
__literal136 Variant_t VARIANT_STRING, 0, __literal136_buffer
__literal137 Variant_t VARIANT_STRING, 0, __literal137_buffer
__literal138 Variant_t VARIANT_STRING, 0, __literal138_buffer
__literal139 Variant_t VARIANT_STRING, 0, __literal139_buffer
__literal140 Variant_t VARIANT_STRING, 0, __literal140_buffer
__literal141 Variant_t VARIANT_STRING, 0, __literal141_buffer
__literal142 Variant_t VARIANT_STRING, 0, __literal142_buffer
__literal143 Variant_t VARIANT_STRING, 0, __literal143_buffer
__literal144 Variant_t VARIANT_STRING, 0, __literal144_buffer
__literal145 Variant_t VARIANT_STRING, 0, __literal145_buffer
__literal146 Variant_t VARIANT_STRING, 0, __literal146_buffer
__literal147 Variant_t VARIANT_STRING, 0, __literal147_buffer
__literal148 Variant_t VARIANT_STRING, 0, __literal148_buffer
__literal149 Variant_t VARIANT_STRING, 0, __literal149_buffer
__literal150 Variant_t VARIANT_STRING, 0, __literal150_buffer
__literal151 Variant_t VARIANT_STRING, 0, __literal151_buffer
__literal152 Variant_t VARIANT_STRING, 0, __literal152_buffer
__literal153 Variant_t VARIANT_STRING, 0, __literal153_buffer
__literal154 Variant_t VARIANT_STRING, 0, __literal154_buffer
__literal155 Variant_t VARIANT_STRING, 0, __literal155_buffer
__literal156 Variant_t VARIANT_STRING, 0, __literal156_buffer
__literal157 Variant_t VARIANT_STRING, 0, __literal157_buffer
__literal158 Variant_t VARIANT_STRING, 0, __literal158_buffer
__literal159 Variant_t VARIANT_STRING, 0, __literal159_buffer
__literal160 Variant_t VARIANT_STRING, 0, __literal160_buffer
__literal161 Variant_t VARIANT_STRING, 0, __literal161_buffer
__literal162 Variant_t VARIANT_STRING, 0, __literal162_buffer
__literal163 Variant_t VARIANT_STRING, 0, __literal163_buffer
__literal164 Variant_t VARIANT_STRING, 0, __literal164_buffer
__literal165 Variant_t VARIANT_STRING, 0, __literal165_buffer
__literal166 Variant_t VARIANT_STRING, 0, __literal166_buffer
__literal167 Variant_t VARIANT_STRING, 0, __literal167_buffer
__literal168 Variant_t VARIANT_STRING, 0, __literal168_buffer
__literal169 Variant_t VARIANT_STRING, 0, __literal169_buffer
__literal170 Variant_t VARIANT_STRING, 0, __literal170_buffer
__literal171 Variant_t VARIANT_STRING, 0, __literal171_buffer
__literal172 Variant_t VARIANT_STRING, 0, __literal172_buffer
__literal173 Variant_t VARIANT_STRING, 0, __literal173_buffer
__literal174 Variant_t VARIANT_STRING, 0, __literal174_buffer
__literal175 Variant_t VARIANT_STRING, 0, __literal175_buffer
__literal176 Variant_t VARIANT_STRING, 0, __literal176_buffer
__literal177 Variant_t VARIANT_STRING, 0, __literal177_buffer
__literal178 Variant_t VARIANT_STRING, 0, __literal178_buffer
__literal179 Variant_t VARIANT_STRING, 0, __literal179_buffer
__literal180 Variant_t VARIANT_STRING, 0, __literal180_buffer
__literal181 Variant_t VARIANT_STRING, 0, __literal181_buffer
__literal182 Variant_t VARIANT_STRING, 0, __literal182_buffer
__literal183 Variant_t VARIANT_STRING, 0, __literal183_buffer
__literal184 Variant_t VARIANT_STRING, 0, __literal184_buffer
__literal185 Variant_t VARIANT_STRING, 0, __literal185_buffer
__literal186 Variant_t VARIANT_STRING, 0, __literal186_buffer
__literal187 Variant_t VARIANT_STRING, 0, __literal187_buffer
__literal188 Variant_t VARIANT_STRING, 0, __literal188_buffer
__literal189 Variant_t VARIANT_STRING, 0, __literal189_buffer
__literal190 Variant_t VARIANT_STRING, 0, __literal190_buffer
__literal191 Variant_t VARIANT_STRING, 0, __literal191_buffer
__literal192 Variant_t VARIANT_STRING, 0, __literal192_buffer
__literal193 Variant_t VARIANT_STRING, 0, __literal193_buffer
__literal194 Variant_t VARIANT_STRING, 0, __literal194_buffer
__literal195 Variant_t VARIANT_STRING, 0, __literal195_buffer
__literal196 Variant_t VARIANT_STRING, 0, __literal196_buffer
__literal197 Variant_t VARIANT_STRING, 0, __literal197_buffer
__literal198 Variant_t VARIANT_STRING, 0, __literal198_buffer
__literal199 Variant_t VARIANT_STRING, 0, __literal199_buffer
__literal200 Variant_t VARIANT_STRING, 0, __literal200_buffer
__literal201 Variant_t VARIANT_STRING, 0, __literal201_buffer
__literal202 Variant_t VARIANT_STRING, 0, __literal202_buffer
__literal203 Variant_t VARIANT_STRING, 0, __literal203_buffer
__literal204 Variant_t VARIANT_STRING, 0, __literal204_buffer
__literal205 Variant_t VARIANT_STRING, 0, __literal205_buffer
__literal206 Variant_t VARIANT_STRING, 0, __literal206_buffer
__literal207 Variant_t VARIANT_STRING, 0, __literal207_buffer
__literal208 Variant_t VARIANT_STRING, 0, __literal208_buffer
__literal209 Variant_t VARIANT_STRING, 0, __literal209_buffer
__literal210 Variant_t VARIANT_STRING, 0, __literal210_buffer
__literal211 Variant_t VARIANT_STRING, 0, __literal211_buffer
__literal212 Variant_t VARIANT_STRING, 0, __literal212_buffer
__literal213 Variant_t VARIANT_STRING, 0, __literal213_buffer
__literal214 Variant_t VARIANT_STRING, 0, __literal214_buffer
__literal215 Variant_t VARIANT_STRING, 0, __literal215_buffer
__literal216 Variant_t VARIANT_STRING, 0, __literal216_buffer
__literal217 Variant_t VARIANT_STRING, 0, __literal217_buffer
__literal218 Variant_t VARIANT_STRING, 0, __literal218_buffer
__literal219 Variant_t VARIANT_STRING, 0, __literal219_buffer
__literal220 Variant_t VARIANT_STRING, 0, __literal220_buffer
__literal221 Variant_t VARIANT_STRING, 0, __literal221_buffer
__literal222 Variant_t VARIANT_STRING, 0, __literal222_buffer
__literal223 Variant_t VARIANT_STRING, 0, __literal223_buffer
__literal224 Variant_t VARIANT_STRING, 0, __literal224_buffer
__literal225 Variant_t VARIANT_STRING, 0, __literal225_buffer
__literal226 Variant_t VARIANT_STRING, 0, __literal226_buffer
__literal227 Variant_t VARIANT_STRING, 0, __literal227_buffer
__literal228 Variant_t VARIANT_STRING, 0, __literal228_buffer
__literal229 Variant_t VARIANT_STRING, 0, __literal229_buffer
__literal230 Variant_t VARIANT_STRING, 0, __literal230_buffer
__literal231 Variant_t VARIANT_STRING, 0, __literal231_buffer
__literal232 Variant_t VARIANT_STRING, 0, __literal232_buffer
__literal233 Variant_t VARIANT_STRING, 0, __literal233_buffer
__literal234 Variant_t VARIANT_STRING, 0, __literal234_buffer
__literal235 Variant_t VARIANT_STRING, 0, __literal235_buffer
__literal236 Variant_t VARIANT_STRING, 0, __literal236_buffer
__literal237 Variant_t VARIANT_STRING, 0, __literal237_buffer
__literal238 Variant_t VARIANT_STRING, 0, __literal238_buffer
__literal239 Variant_t VARIANT_STRING, 0, __literal239_buffer
__literal240 Variant_t VARIANT_STRING, 0, __literal240_buffer
__literal241 Variant_t VARIANT_STRING, 0, __literal241_buffer
__literal242 Variant_t VARIANT_STRING, 0, __literal242_buffer
__literal243 Variant_t VARIANT_STRING, 0, __literal243_buffer
__literal244 Variant_t VARIANT_STRING, 0, __literal244_buffer
__literal245 Variant_t VARIANT_STRING, 0, __literal245_buffer
__literal246 Variant_t VARIANT_STRING, 0, __literal246_buffer
__literal247 Variant_t VARIANT_STRING, 0, __literal247_buffer
__literal248 Variant_t VARIANT_STRING, 0, __literal248_buffer
__literal249 Variant_t VARIANT_STRING, 0, __literal249_buffer
__literal250 Variant_t VARIANT_STRING, 0, __literal250_buffer
__literal251 Variant_t VARIANT_STRING, 0, __literal251_buffer
__literal252 Variant_t VARIANT_STRING, 0, __literal252_buffer
__literal253 Variant_t VARIANT_STRING, 0, __literal253_buffer
__literal254 Variant_t VARIANT_STRING, 0, __literal254_buffer
__literal255 Variant_t VARIANT_STRING, 0, __literal255_buffer
__literal256 Variant_t VARIANT_STRING, 0, __literal256_buffer
__literal257 Variant_t VARIANT_STRING, 0, __literal257_buffer
__literal258 Variant_t VARIANT_STRING, 0, __literal258_buffer
__literal259 Variant_t VARIANT_STRING, 0, __literal259_buffer
__literal260 Variant_t VARIANT_STRING, 0, __literal260_buffer
__literal261 Variant_t VARIANT_STRING, 0, __literal261_buffer
__literal262 Variant_t VARIANT_STRING, 0, __literal262_buffer
__literal263 Variant_t VARIANT_STRING, 0, __literal263_buffer
__literal264 Variant_t VARIANT_STRING, 0, __literal264_buffer
__literal265 Variant_t VARIANT_STRING, 0, __literal265_buffer
__literal266 Variant_t VARIANT_STRING, 0, __literal266_buffer
__literal267 Variant_t VARIANT_STRING, 0, __literal267_buffer
__literal268 Variant_t VARIANT_STRING, 0, __literal268_buffer
__literal269 Variant_t VARIANT_STRING, 0, __literal269_buffer
__literal270 Variant_t VARIANT_STRING, 0, __literal270_buffer
__literal271 Variant_t VARIANT_STRING, 0, __literal271_buffer
__literal272 Variant_t VARIANT_STRING, 0, __literal272_buffer
__literal273 Variant_t VARIANT_STRING, 0, __literal273_buffer
__literal274 Variant_t VARIANT_STRING, 0, __literal274_buffer
__literal275 Variant_t VARIANT_STRING, 0, __literal275_buffer
__literal276 Variant_t VARIANT_STRING, 0, __literal276_buffer
__literal277 Variant_t VARIANT_STRING, 0, __literal277_buffer
__literal278 Variant_t VARIANT_STRING, 0, __literal278_buffer
__literal279 Variant_t VARIANT_STRING, 0, __literal279_buffer
__literal280 Variant_t VARIANT_STRING, 0, __literal280_buffer
__literal281 Variant_t VARIANT_STRING, 0, __literal281_buffer
__literal282 Variant_t VARIANT_STRING, 0, __literal282_buffer
__literal283 Variant_t VARIANT_STRING, 0, __literal283_buffer
__literal284 Variant_t VARIANT_STRING, 0, __literal284_buffer
__literal285 Variant_t VARIANT_STRING, 0, __literal285_buffer
__literal286 Variant_t VARIANT_STRING, 0, __literal286_buffer
__literal287 Variant_t VARIANT_STRING, 0, __literal287_buffer
__literal288 Variant_t VARIANT_STRING, 0, __literal288_buffer
__literal289 Variant_t VARIANT_STRING, 0, __literal289_buffer
__literal290 Variant_t VARIANT_STRING, 0, __literal290_buffer
__literal291 Variant_t VARIANT_STRING, 0, __literal291_buffer
__literal292 Variant_t VARIANT_STRING, 0, __literal292_buffer
__literal293 Variant_t VARIANT_STRING, 0, __literal293_buffer
__literal294 Variant_t VARIANT_STRING, 0, __literal294_buffer
__literal295 Variant_t VARIANT_STRING, 0, __literal295_buffer
__literal296 Variant_t VARIANT_STRING, 0, __literal296_buffer
__literal297 Variant_t VARIANT_STRING, 0, __literal297_buffer
__literal298 Variant_t VARIANT_STRING, 0, __literal298_buffer
__literal299 Variant_t VARIANT_STRING, 0, __literal299_buffer
__literal300 Variant_t VARIANT_STRING, 0, __literal300_buffer
__literal301 Variant_t VARIANT_STRING, 0, __literal301_buffer
__literal302 Variant_t VARIANT_STRING, 0, __literal302_buffer
__literal303 Variant_t VARIANT_STRING, 0, __literal303_buffer
__literal304 Variant_t VARIANT_STRING, 0, __literal304_buffer
__literal305 Variant_t VARIANT_STRING, 0, __literal305_buffer
__literal306 Variant_t VARIANT_STRING, 0, __literal306_buffer
__literal307 Variant_t VARIANT_STRING, 0, __literal307_buffer
__literal308 Variant_t VARIANT_STRING, 0, __literal308_buffer
__literal309 Variant_t VARIANT_STRING, 0, __literal309_buffer
__literal310 Variant_t VARIANT_STRING, 0, __literal310_buffer
__literal311 Variant_t VARIANT_STRING, 0, __literal311_buffer
__literal312 Variant_t VARIANT_STRING, 0, __literal312_buffer
__literal313 Variant_t VARIANT_STRING, 0, __literal313_buffer
__literal314 Variant_t VARIANT_STRING, 0, __literal314_buffer
__literal315 Variant_t VARIANT_STRING, 0, __literal315_buffer
__literal316 Variant_t VARIANT_STRING, 0, __literal316_buffer
__literal317 Variant_t VARIANT_STRING, 0, __literal317_buffer
__literal318 Variant_t VARIANT_STRING, 0, __literal318_buffer
__literal319 Variant_t VARIANT_STRING, 0, __literal319_buffer
__literal320 Variant_t VARIANT_STRING, 0, __literal320_buffer
__literal321 Variant_t VARIANT_STRING, 0, __literal321_buffer
__literal322 Variant_t VARIANT_STRING, 0, __literal322_buffer
__literal323 Variant_t VARIANT_STRING, 0, __literal323_buffer
__literal324 Variant_t VARIANT_STRING, 0, __literal324_buffer
__literal325 Variant_t VARIANT_STRING, 0, __literal325_buffer
__literal326 Variant_t VARIANT_STRING, 0, __literal326_buffer
__literal327 Variant_t VARIANT_STRING, 0, __literal327_buffer
__literal328 Variant_t VARIANT_STRING, 0, __literal328_buffer
__literal329 Variant_t VARIANT_STRING, 0, __literal329_buffer
__literal330 Variant_t VARIANT_STRING, 0, __literal330_buffer
__literal331 Variant_t VARIANT_STRING, 0, __literal331_buffer
__literal332 Variant_t VARIANT_STRING, 0, __literal332_buffer
__literal333 Variant_t VARIANT_STRING, 0, __literal333_buffer
__literal334 Variant_t VARIANT_STRING, 0, __literal334_buffer
__literal335 Variant_t VARIANT_STRING, 0, __literal335_buffer
__literal336 Variant_t VARIANT_STRING, 0, __literal336_buffer
__literal337 Variant_t VARIANT_STRING, 0, __literal337_buffer
__literal338 Variant_t VARIANT_STRING, 0, __literal338_buffer
__literal339 Variant_t VARIANT_STRING, 0, __literal339_buffer
__literal340 Variant_t VARIANT_STRING, 0, __literal340_buffer
__literal341 Variant_t VARIANT_STRING, 0, __literal341_buffer
__literal342 Variant_t VARIANT_STRING, 0, __literal342_buffer
__literal343 Variant_t VARIANT_STRING, 0, __literal343_buffer
__literal344 Variant_t VARIANT_STRING, 0, __literal344_buffer
__literal345 Variant_t VARIANT_STRING, 0, __literal345_buffer
__literal346 Variant_t VARIANT_STRING, 0, __literal346_buffer
__literal347 Variant_t VARIANT_STRING, 0, __literal347_buffer
__literal348 Variant_t VARIANT_STRING, 0, __literal348_buffer
__literal349 Variant_t VARIANT_STRING, 0, __literal349_buffer
__literal350 Variant_t VARIANT_STRING, 0, __literal350_buffer
__literal351 Variant_t VARIANT_STRING, 0, __literal351_buffer
__literal352 Variant_t VARIANT_STRING, 0, __literal352_buffer
__literal353 Variant_t VARIANT_STRING, 0, __literal353_buffer
__literal354 Variant_t VARIANT_STRING, 0, __literal354_buffer
__literal355 Variant_t VARIANT_STRING, 0, __literal355_buffer
__literal356 Variant_t VARIANT_STRING, 0, __literal356_buffer
__literal357 Variant_t VARIANT_STRING, 0, __literal357_buffer
__literal358 Variant_t VARIANT_STRING, 0, __literal358_buffer
__literal359 Variant_t VARIANT_STRING, 0, __literal359_buffer
__literal360 Variant_t VARIANT_STRING, 0, __literal360_buffer
__literal361 Variant_t VARIANT_STRING, 0, __literal361_buffer
__literal362 Variant_t VARIANT_STRING, 0, __literal362_buffer
__literal363 Variant_t VARIANT_STRING, 0, __literal363_buffer
__literal364 Variant_t VARIANT_STRING, 0, __literal364_buffer
__literal365 Variant_t VARIANT_STRING, 0, __literal365_buffer
__literal366 Variant_t VARIANT_STRING, 0, __literal366_buffer
__literal367 Variant_t VARIANT_STRING, 0, __literal367_buffer
__literal368 Variant_t VARIANT_STRING, 0, __literal368_buffer
__literal369 Variant_t VARIANT_STRING, 0, __literal369_buffer
__literal370 Variant_t VARIANT_STRING, 0, __literal370_buffer
__literal371 Variant_t VARIANT_STRING, 0, __literal371_buffer
__literal372 Variant_t VARIANT_STRING, 0, __literal372_buffer
__literal373 Variant_t VARIANT_STRING, 0, __literal373_buffer
__literal374 Variant_t VARIANT_STRING, 0, __literal374_buffer
__literal375 Variant_t VARIANT_STRING, 0, __literal375_buffer
__literal376 Variant_t VARIANT_STRING, 0, __literal376_buffer
__literal377 Variant_t VARIANT_STRING, 0, __literal377_buffer
__literal378 Variant_t VARIANT_STRING, 0, __literal378_buffer
__literal379 Variant_t VARIANT_STRING, 0, __literal379_buffer
__literal380 Variant_t VARIANT_STRING, 0, __literal380_buffer
__literal381 Variant_t VARIANT_STRING, 0, __literal381_buffer
__literal382 Variant_t VARIANT_STRING, 0, __literal382_buffer
__literal383 Variant_t VARIANT_STRING, 0, __literal383_buffer
__literal384 Variant_t VARIANT_STRING, 0, __literal384_buffer
__literal385 Variant_t VARIANT_STRING, 0, __literal385_buffer
__literal386 Variant_t VARIANT_STRING, 0, __literal386_buffer
__literal387 Variant_t VARIANT_STRING, 0, __literal387_buffer
__literal388 Variant_t VARIANT_STRING, 0, __literal388_buffer
__literal389 Variant_t VARIANT_STRING, 0, __literal389_buffer
__literal390 Variant_t VARIANT_STRING, 0, __literal390_buffer
__literal391 Variant_t VARIANT_STRING, 0, __literal391_buffer
__literal392 Variant_t VARIANT_STRING, 0, __literal392_buffer
__literal393 Variant_t VARIANT_STRING, 0, __literal393_buffer
__literal394 Variant_t VARIANT_STRING, 0, __literal394_buffer
__literal395 Variant_t VARIANT_STRING, 0, __literal395_buffer
__literal396 Variant_t VARIANT_STRING, 0, __literal396_buffer
__literal397 Variant_t VARIANT_STRING, 0, __literal397_buffer
__literal398 Variant_t VARIANT_STRING, 0, __literal398_buffer
__literal399 Variant_t VARIANT_STRING, 0, __literal399_buffer
__literal400 Variant_t VARIANT_STRING, 0, __literal400_buffer
__literal401 Variant_t VARIANT_STRING, 0, __literal401_buffer
__literal402 Variant_t VARIANT_STRING, 0, __literal402_buffer
__literal403 Variant_t VARIANT_STRING, 0, __literal403_buffer
__literal404 Variant_t VARIANT_STRING, 0, __literal404_buffer
__literal405 Variant_t VARIANT_STRING, 0, __literal405_buffer
__literal406 Variant_t VARIANT_STRING, 0, __literal406_buffer
__literal407 Variant_t VARIANT_STRING, 0, __literal407_buffer
__literal408 Variant_t VARIANT_STRING, 0, __literal408_buffer
__literal409 Variant_t VARIANT_STRING, 0, __literal409_buffer
__literal410 Variant_t VARIANT_STRING, 0, __literal410_buffer
__literal411 Variant_t VARIANT_STRING, 0, __literal411_buffer
__literal412 Variant_t VARIANT_STRING, 0, __literal412_buffer
__literal413 Variant_t VARIANT_STRING, 0, __literal413_buffer
__literal414 Variant_t VARIANT_STRING, 0, __literal414_buffer
__literal415 Variant_t VARIANT_STRING, 0, __literal415_buffer
__literal416 Variant_t VARIANT_STRING, 0, __literal416_buffer
__literal417 Variant_t VARIANT_STRING, 0, __literal417_buffer
__literal418 Variant_t VARIANT_STRING, 0, __literal418_buffer
__literal419 Variant_t VARIANT_STRING, 0, __literal419_buffer
__literal420 Variant_t VARIANT_STRING, 0, __literal420_buffer
__literal421 Variant_t VARIANT_STRING, 0, __literal421_buffer
__literal422 Variant_t VARIANT_STRING, 0, __literal422_buffer
__literal423 Variant_t VARIANT_STRING, 0, __literal423_buffer
__literal424 Variant_t VARIANT_STRING, 0, __literal424_buffer
__literal425 Variant_t VARIANT_STRING, 0, __literal425_buffer
__literal426 Variant_t VARIANT_STRING, 0, __literal426_buffer
__literal427 Variant_t VARIANT_STRING, 0, __literal427_buffer
__literal428 Variant_t VARIANT_STRING, 0, __literal428_buffer
__literal429 Variant_t VARIANT_STRING, 0, __literal429_buffer
__literal430 Variant_t VARIANT_STRING, 0, __literal430_buffer
__literal431 Variant_t VARIANT_STRING, 0, __literal431_buffer
__literal432 Variant_t VARIANT_STRING, 0, __literal432_buffer
__literal433 Variant_t VARIANT_STRING, 0, __literal433_buffer
__literal434 Variant_t VARIANT_STRING, 0, __literal434_buffer
__literal435 Variant_t VARIANT_STRING, 0, __literal435_buffer
__literal436 Variant_t VARIANT_STRING, 0, __literal436_buffer
__literal437 Variant_t VARIANT_STRING, 0, __literal437_buffer
__literal438 Variant_t VARIANT_STRING, 0, __literal438_buffer
__literal439 Variant_t VARIANT_STRING, 0, __literal439_buffer
__literal440 Variant_t VARIANT_STRING, 0, __literal440_buffer
__literal441 Variant_t VARIANT_STRING, 0, __literal441_buffer
__literal442 Variant_t VARIANT_STRING, 0, __literal442_buffer
__literal443 Variant_t VARIANT_STRING, 0, __literal443_buffer
__literal444 Variant_t VARIANT_STRING, 0, __literal444_buffer
__literal445 Variant_t VARIANT_STRING, 0, __literal445_buffer
__literal446 Variant_t VARIANT_STRING, 0, __literal446_buffer
__literal447 Variant_t VARIANT_STRING, 0, __literal447_buffer
__literal448 Variant_t VARIANT_STRING, 0, __literal448_buffer
__literal449 Variant_t VARIANT_STRING, 0, __literal449_buffer
__literal450 Variant_t VARIANT_STRING, 0, __literal450_buffer
__literal451 Variant_t VARIANT_STRING, 0, __literal451_buffer
__literal452 Variant_t VARIANT_STRING, 0, __literal452_buffer
__literal453 Variant_t VARIANT_STRING, 0, __literal453_buffer
__literal454 Variant_t VARIANT_STRING, 0, __literal454_buffer
__literal455 Variant_t VARIANT_STRING, 0, __literal455_buffer
__literal456 Variant_t VARIANT_STRING, 0, __literal456_buffer
__literal457 Variant_t VARIANT_STRING, 0, __literal457_buffer
__literal458 Variant_t VARIANT_STRING, 0, __literal458_buffer
__literal459 Variant_t VARIANT_STRING, 0, __literal459_buffer
__literal460 Variant_t VARIANT_STRING, 0, __literal460_buffer
__literal461 Variant_t VARIANT_STRING, 0, __literal461_buffer
__literal462 Variant_t VARIANT_STRING, 0, __literal462_buffer
__literal463 Variant_t VARIANT_STRING, 0, __literal463_buffer
__literal464 Variant_t VARIANT_STRING, 0, __literal464_buffer
__literal465 Variant_t VARIANT_STRING, 0, __literal465_buffer
__literal466 Variant_t VARIANT_STRING, 0, __literal466_buffer
__literal467 Variant_t VARIANT_STRING, 0, __literal467_buffer
__literal468 Variant_t VARIANT_STRING, 0, __literal468_buffer
__literal469 Variant_t VARIANT_STRING, 0, __literal469_buffer
__literal470 Variant_t VARIANT_STRING, 0, __literal470_buffer
__literal471 Variant_t VARIANT_STRING, 0, __literal471_buffer
__literal472 Variant_t VARIANT_STRING, 0, __literal472_buffer
__literal473 Variant_t VARIANT_STRING, 0, __literal473_buffer
__literal474 Variant_t VARIANT_STRING, 0, __literal474_buffer
__literal475 Variant_t VARIANT_STRING, 0, __literal475_buffer
__literal476 Variant_t VARIANT_STRING, 0, __literal476_buffer
__literal477 Variant_t VARIANT_STRING, 0, __literal477_buffer
__literal478 Variant_t VARIANT_STRING, 0, __literal478_buffer
__literal479 Variant_t VARIANT_STRING, 0, __literal479_buffer
__literal480 Variant_t VARIANT_STRING, 0, __literal480_buffer
__literal481 Variant_t VARIANT_STRING, 0, __literal481_buffer
__literal482 Variant_t VARIANT_STRING, 0, __literal482_buffer
__literal483 Variant_t VARIANT_STRING, 0, __literal483_buffer
__literal484 Variant_t VARIANT_STRING, 0, __literal484_buffer
__literal485 Variant_t VARIANT_STRING, 0, __literal485_buffer
__literal486 Variant_t VARIANT_STRING, 0, __literal486_buffer
__literal487 Variant_t VARIANT_STRING, 0, __literal487_buffer
__literal488 Variant_t VARIANT_STRING, 0, __literal488_buffer
__literal489 Variant_t VARIANT_STRING, 0, __literal489_buffer
__literal490 Variant_t VARIANT_STRING, 0, __literal490_buffer
__literal491 Variant_t VARIANT_STRING, 0, __literal491_buffer
__literal492 Variant_t VARIANT_STRING, 0, __literal492_buffer
__literal493 Variant_t VARIANT_STRING, 0, __literal493_buffer
__literal494 Variant_t VARIANT_STRING, 0, __literal494_buffer
__literal495 Variant_t VARIANT_STRING, 0, __literal495_buffer
__literal496 Variant_t VARIANT_STRING, 0, __literal496_buffer
__literal497 Variant_t VARIANT_STRING, 0, __literal497_buffer
__literal498 Variant_t VARIANT_STRING, 0, __literal498_buffer
__literal499 Variant_t VARIANT_STRING, 0, __literal499_buffer
__literal500 Variant_t VARIANT_STRING, 0, __literal500_buffer
__literal501 Variant_t VARIANT_STRING, 0, __literal501_buffer
__literal502 Variant_t VARIANT_STRING, 0, __literal502_buffer
__literal503 Variant_t VARIANT_STRING, 0, __literal503_buffer
__literal504 Variant_t VARIANT_STRING, 0, __literal504_buffer
__literal505 Variant_t VARIANT_STRING, 0, __literal505_buffer
__literal506 Variant_t VARIANT_STRING, 0, __literal506_buffer
__literal507 Variant_t VARIANT_STRING, 0, __literal507_buffer
__literal508 Variant_t VARIANT_STRING, 0, __literal508_buffer
__literal509 Variant_t VARIANT_STRING, 0, __literal509_buffer
__literal510 Variant_t VARIANT_STRING, 0, __literal510_buffer
__literal511 Variant_t VARIANT_STRING, 0, __literal511_buffer
__literal512 Variant_t VARIANT_STRING, 0, __literal512_buffer
__literal513 Variant_t VARIANT_STRING, 0, __literal513_buffer
__literal514 Variant_t VARIANT_STRING, 0, __literal514_buffer
__literal515 Variant_t VARIANT_STRING, 0, __literal515_buffer
__literal516 Variant_t VARIANT_STRING, 0, __literal516_buffer
__literal517 Variant_t VARIANT_STRING, 0, __literal517_buffer
__literal518 Variant_t VARIANT_STRING, 0, __literal518_buffer
__literal519 Variant_t VARIANT_STRING, 0, __literal519_buffer
__literal520 Variant_t VARIANT_STRING, 0, __literal520_buffer
__literal521 Variant_t VARIANT_STRING, 0, __literal521_buffer
__literal522 Variant_t VARIANT_STRING, 0, __literal522_buffer
__literal523 Variant_t VARIANT_STRING, 0, __literal523_buffer
__literal524 Variant_t VARIANT_STRING, 0, __literal524_buffer
__literal525 Variant_t VARIANT_STRING, 0, __literal525_buffer
__literal526 Variant_t VARIANT_STRING, 0, __literal526_buffer
__literal527 Variant_t VARIANT_STRING, 0, __literal527_buffer
__literal528 Variant_t VARIANT_STRING, 0, __literal528_buffer
__literal529 Variant_t VARIANT_STRING, 0, __literal529_buffer
__literal530 Variant_t VARIANT_STRING, 0, __literal530_buffer
__literal531 Variant_t VARIANT_STRING, 0, __literal531_buffer
__literal532 Variant_t VARIANT_STRING, 0, __literal532_buffer
__literal533 Variant_t VARIANT_STRING, 0, __literal533_buffer
__literal534 Variant_t VARIANT_STRING, 0, __literal534_buffer
__literal535 Variant_t VARIANT_STRING, 0, __literal535_buffer
__literal536 Variant_t VARIANT_STRING, 0, __literal536_buffer
__literal537 Variant_t VARIANT_STRING, 0, __literal537_buffer
__literal538 Variant_t VARIANT_STRING, 0, __literal538_buffer
__literal539 Variant_t VARIANT_STRING, 0, __literal539_buffer
__literal540 Variant_t VARIANT_STRING, 0, __literal540_buffer
__literal541 Variant_t VARIANT_STRING, 0, __literal541_buffer
__literal542 Variant_t VARIANT_STRING, 0, __literal542_buffer
__literal543 Variant_t VARIANT_STRING, 0, __literal543_buffer
__literal544 Variant_t VARIANT_STRING, 0, __literal544_buffer
__literal545 Variant_t VARIANT_STRING, 0, __literal545_buffer
__literal546 Variant_t VARIANT_STRING, 0, __literal546_buffer
__literal547 Variant_t VARIANT_STRING, 0, __literal547_buffer
__literal548 Variant_t VARIANT_STRING, 0, __literal548_buffer
__literal549 Variant_t VARIANT_STRING, 0, __literal549_buffer
__literal550 Variant_t VARIANT_STRING, 0, __literal550_buffer
__literal551 Variant_t VARIANT_STRING, 0, __literal551_buffer
__literal552 Variant_t VARIANT_STRING, 0, __literal552_buffer
__literal553 Variant_t VARIANT_STRING, 0, __literal553_buffer
__literal554 Variant_t VARIANT_STRING, 0, __literal554_buffer
__literal555 Variant_t VARIANT_STRING, 0, __literal555_buffer
__literal556 Variant_t VARIANT_STRING, 0, __literal556_buffer
__literal557 Variant_t VARIANT_STRING, 0, __literal557_buffer
__literal558 Variant_t VARIANT_STRING, 0, __literal558_buffer
__literal559 Variant_t VARIANT_STRING, 0, __literal559_buffer
__literal560 Variant_t VARIANT_STRING, 0, __literal560_buffer
__literal561 Variant_t VARIANT_STRING, 0, __literal561_buffer
__literal562 Variant_t VARIANT_STRING, 0, __literal562_buffer
__literal563 Variant_t VARIANT_STRING, 0, __literal563_buffer
__literal564 Variant_t VARIANT_STRING, 0, __literal564_buffer
__literal565 Variant_t VARIANT_STRING, 0, __literal565_buffer
__literal566 Variant_t VARIANT_STRING, 0, __literal566_buffer
__literal567 Variant_t VARIANT_STRING, 0, __literal567_buffer
__literal568 Variant_t VARIANT_STRING, 0, __literal568_buffer
__literal569 Variant_t VARIANT_STRING, 0, __literal569_buffer
__literal570 Variant_t VARIANT_STRING, 0, __literal570_buffer
__literal571 Variant_t VARIANT_STRING, 0, __literal571_buffer
__literal572 Variant_t VARIANT_STRING, 0, __literal572_buffer
__literal573 Variant_t VARIANT_STRING, 0, __literal573_buffer
__literal574 Variant_t VARIANT_STRING, 0, __literal574_buffer
__literal575 Variant_t VARIANT_STRING, 0, __literal575_buffer
__literal576 Variant_t VARIANT_STRING, 0, __literal576_buffer
__literal577 Variant_t VARIANT_STRING, 0, __literal577_buffer
__literal578 Variant_t VARIANT_STRING, 0, __literal578_buffer
__literal579 Variant_t VARIANT_STRING, 0, __literal579_buffer
__literal580 Variant_t VARIANT_STRING, 0, __literal580_buffer
__literal581 Variant_t VARIANT_STRING, 0, __literal581_buffer
__literal582 Variant_t VARIANT_STRING, 0, __literal582_buffer
__literal583 Variant_t VARIANT_STRING, 0, __literal583_buffer
__literal584 Variant_t VARIANT_STRING, 0, __literal584_buffer
__literal585 Variant_t VARIANT_STRING, 0, __literal585_buffer
__literal586 Variant_t VARIANT_STRING, 0, __literal586_buffer
__literal587 Variant_t VARIANT_STRING, 0, __literal587_buffer
__literal588 Variant_t VARIANT_STRING, 0, __literal588_buffer
__literal589 Variant_t VARIANT_STRING, 0, __literal589_buffer
__literal590 Variant_t VARIANT_STRING, 0, __literal590_buffer
__literal591 Variant_t VARIANT_STRING, 0, __literal591_buffer
__literal592 Variant_t VARIANT_STRING, 0, __literal592_buffer
__literal593 Variant_t VARIANT_STRING, 0, __literal593_buffer
__literal594 Variant_t VARIANT_STRING, 0, __literal594_buffer
__literal595 Variant_t VARIANT_STRING, 0, __literal595_buffer
__literal596 Variant_t VARIANT_STRING, 0, __literal596_buffer
__literal597 Variant_t VARIANT_STRING, 0, __literal597_buffer
__literal598 Variant_t VARIANT_STRING, 0, __literal598_buffer
__literal599 Variant_t VARIANT_STRING, 0, __literal599_buffer
__literal600 Variant_t VARIANT_STRING, 0, __literal600_buffer
__literal601 Variant_t VARIANT_STRING, 0, __literal601_buffer
__literal602 Variant_t VARIANT_STRING, 0, __literal602_buffer
__literal603 Variant_t VARIANT_STRING, 0, __literal603_buffer
__literal604 Variant_t VARIANT_STRING, 0, __literal604_buffer
__literal605 Variant_t VARIANT_STRING, 0, __literal605_buffer
__literal606 Variant_t VARIANT_STRING, 0, __literal606_buffer
__literal607 Variant_t VARIANT_STRING, 0, __literal607_buffer
__literal608 Variant_t VARIANT_STRING, 0, __literal608_buffer
__literal609 Variant_t VARIANT_STRING, 0, __literal609_buffer
__literal610 Variant_t VARIANT_STRING, 0, __literal610_buffer
__literal611 Variant_t VARIANT_STRING, 0, __literal611_buffer
__literal612 Variant_t VARIANT_STRING, 0, __literal612_buffer
__literal613 Variant_t VARIANT_STRING, 0, __literal613_buffer
__literal614 Variant_t VARIANT_STRING, 0, __literal614_buffer
__literal615 Variant_t VARIANT_STRING, 0, __literal615_buffer
__literal616 Variant_t VARIANT_STRING, 0, __literal616_buffer
__literal617 Variant_t VARIANT_STRING, 0, __literal617_buffer
__literal618 Variant_t VARIANT_STRING, 0, __literal618_buffer
__literal619 Variant_t VARIANT_STRING, 0, __literal619_buffer
__literal620 Variant_t VARIANT_STRING, 0, __literal620_buffer
__literal621 Variant_t VARIANT_STRING, 0, __literal621_buffer
__literal622 Variant_t VARIANT_STRING, 0, __literal622_buffer
__literal623 Variant_t VARIANT_STRING, 0, __literal623_buffer
__literal624 Variant_t VARIANT_STRING, 0, __literal624_buffer
__literal625 Variant_t VARIANT_STRING, 0, __literal625_buffer
__literal626 Variant_t VARIANT_STRING, 0, __literal626_buffer
__literal627 Variant_t VARIANT_STRING, 0, __literal627_buffer
__literal628 Variant_t VARIANT_STRING, 0, __literal628_buffer
__literal629 Variant_t VARIANT_STRING, 0, __literal629_buffer
__literal630 Variant_t VARIANT_STRING, 0, __literal630_buffer
__literal631 Variant_t VARIANT_STRING, 0, __literal631_buffer
__literal632 Variant_t VARIANT_STRING, 0, __literal632_buffer
__literal633 Variant_t VARIANT_STRING, 0, __literal633_buffer
__literal634 Variant_t VARIANT_STRING, 0, __literal634_buffer
__literal635 Variant_t VARIANT_STRING, 0, __literal635_buffer
__literal636 Variant_t VARIANT_STRING, 0, __literal636_buffer
__literal637 Variant_t VARIANT_STRING, 0, __literal637_buffer
__literal638 Variant_t VARIANT_STRING, 0, __literal638_buffer
__literal639 Variant_t VARIANT_STRING, 0, __literal639_buffer
__literal640 Variant_t VARIANT_STRING, 0, __literal640_buffer
__literal641 Variant_t VARIANT_STRING, 0, __literal641_buffer
__literal642 Variant_t VARIANT_STRING, 0, __literal642_buffer
__literal643 Variant_t VARIANT_STRING, 0, __literal643_buffer
__literal644 Variant_t VARIANT_STRING, 0, __literal644_buffer
__literal645 Variant_t VARIANT_STRING, 0, __literal645_buffer
__literal646 Variant_t VARIANT_STRING, 0, __literal646_buffer
__literal647 Variant_t VARIANT_STRING, 0, __literal647_buffer
__literal648 Variant_t VARIANT_STRING, 0, __literal648_buffer
__literal649 Variant_t VARIANT_STRING, 0, __literal649_buffer
__literal650 Variant_t VARIANT_STRING, 0, __literal650_buffer
__literal651 Variant_t VARIANT_STRING, 0, __literal651_buffer
__literal652 Variant_t VARIANT_STRING, 0, __literal652_buffer
__literal653 Variant_t VARIANT_STRING, 0, __literal653_buffer
__literal654 Variant_t VARIANT_STRING, 0, __literal654_buffer
__literal655 Variant_t VARIANT_STRING, 0, __literal655_buffer
__literal656 Variant_t VARIANT_STRING, 0, __literal656_buffer
__literal657 Variant_t VARIANT_STRING, 0, __literal657_buffer
__literal658 Variant_t VARIANT_STRING, 0, __literal658_buffer
__literal659 Variant_t VARIANT_STRING, 0, __literal659_buffer
__literal660 Variant_t VARIANT_STRING, 0, __literal660_buffer
__literal661 Variant_t VARIANT_STRING, 0, __literal661_buffer
__literal662 Variant_t VARIANT_STRING, 0, __literal662_buffer
__literal663 Variant_t VARIANT_STRING, 0, __literal663_buffer
__literal664 Variant_t VARIANT_STRING, 0, __literal664_buffer
__literal665 Variant_t VARIANT_STRING, 0, __literal665_buffer
__literal666 Variant_t VARIANT_STRING, 0, __literal666_buffer
__literal667 Variant_t VARIANT_STRING, 0, __literal667_buffer
__literal668 Variant_t VARIANT_STRING, 0, __literal668_buffer
__literal669 Variant_t VARIANT_STRING, 0, __literal669_buffer
__literal670 Variant_t VARIANT_STRING, 0, __literal670_buffer
__literal671 Variant_t VARIANT_STRING, 0, __literal671_buffer
__literal672 Variant_t VARIANT_STRING, 0, __literal672_buffer
__literal673 Variant_t VARIANT_STRING, 0, __literal673_buffer
__literal674 Variant_t VARIANT_STRING, 0, __literal674_buffer
__literal675 Variant_t VARIANT_STRING, 0, __literal675_buffer
__literal676 Variant_t VARIANT_STRING, 0, __literal676_buffer
__literal677 Variant_t VARIANT_STRING, 0, __literal677_buffer
__literal678 Variant_t VARIANT_STRING, 0, __literal678_buffer
__literal679 Variant_t VARIANT_STRING, 0, __literal679_buffer
__literal680 Variant_t VARIANT_STRING, 0, __literal680_buffer
__literal681 Variant_t VARIANT_STRING, 0, __literal681_buffer
__literal682 Variant_t VARIANT_STRING, 0, __literal682_buffer
__literal683 Variant_t VARIANT_STRING, 0, __literal683_buffer
__literal684 Variant_t VARIANT_STRING, 0, __literal684_buffer
__literal685 Variant_t VARIANT_STRING, 0, __literal685_buffer
__literal686 Variant_t VARIANT_STRING, 0, __literal686_buffer
__literal687 Variant_t VARIANT_STRING, 0, __literal687_buffer
__literal688 Variant_t VARIANT_STRING, 0, __literal688_buffer
__literal689 Variant_t VARIANT_STRING, 0, __literal689_buffer
__literal690 Variant_t VARIANT_STRING, 0, __literal690_buffer
__literal691 Variant_t VARIANT_STRING, 0, __literal691_buffer
__literal692 Variant_t VARIANT_STRING, 0, __literal692_buffer
__literal693 Variant_t VARIANT_STRING, 0, __literal693_buffer
__literal694 Variant_t VARIANT_STRING, 0, __literal694_buffer
__literal695 Variant_t VARIANT_STRING, 0, __literal695_buffer
__literal696 Variant_t VARIANT_STRING, 0, __literal696_buffer
__literal697 Variant_t VARIANT_STRING, 0, __literal697_buffer
__literal698 Variant_t VARIANT_STRING, 0, __literal698_buffer
__literal699 Variant_t VARIANT_STRING, 0, __literal699_buffer
__literal700 Variant_t VARIANT_STRING, 0, __literal700_buffer
__literal701 Variant_t VARIANT_STRING, 0, __literal701_buffer
__literal702 Variant_t VARIANT_STRING, 0, __literal702_buffer
__literal703 Variant_t VARIANT_STRING, 0, __literal703_buffer
__literal704 Variant_t VARIANT_STRING, 0, __literal704_buffer
__literal705 Variant_t VARIANT_STRING, 0, __literal705_buffer
__literal706 Variant_t VARIANT_STRING, 0, __literal706_buffer
__literal707 Variant_t VARIANT_STRING, 0, __literal707_buffer
__literal708 Variant_t VARIANT_STRING, 0, __literal708_buffer
__literal709 Variant_t VARIANT_STRING, 0, __literal709_buffer
__literal710 Variant_t VARIANT_STRING, 0, __literal710_buffer
__literal711 Variant_t VARIANT_STRING, 0, __literal711_buffer
__literal712 Variant_t VARIANT_STRING, 0, __literal712_buffer
__literal713 Variant_t VARIANT_STRING, 0, __literal713_buffer
__literal714 Variant_t VARIANT_STRING, 0, __literal714_buffer
__literal715 Variant_t VARIANT_STRING, 0, __literal715_buffer
__literal716 Variant_t VARIANT_STRING, 0, __literal716_buffer
__literal717 Variant_t VARIANT_STRING, 0, __literal717_buffer
__literal718 Variant_t VARIANT_STRING, 0, __literal718_buffer
__literal719 Variant_t VARIANT_STRING, 0, __literal719_buffer
__literal720 Variant_t VARIANT_STRING, 0, __literal720_buffer
__literal721 Variant_t VARIANT_STRING, 0, __literal721_buffer
__literal722 Variant_t VARIANT_STRING, 0, __literal722_buffer
__literal723 Variant_t VARIANT_STRING, 0, __literal723_buffer
__literal724 Variant_t VARIANT_STRING, 0, __literal724_buffer
__literal725 Variant_t VARIANT_STRING, 0, __literal725_buffer
__literal726 Variant_t VARIANT_STRING, 0, __literal726_buffer
__literal727 Variant_t VARIANT_STRING, 0, __literal727_buffer
__literal728 Variant_t VARIANT_STRING, 0, __literal728_buffer
__literal729 Variant_t VARIANT_STRING, 0, __literal729_buffer
__literal730 Variant_t VARIANT_STRING, 0, __literal730_buffer
__literal731 Variant_t VARIANT_STRING, 0, __literal731_buffer
__literal732 Variant_t VARIANT_STRING, 0, __literal732_buffer
__literal733 Variant_t VARIANT_STRING, 0, __literal733_buffer
__literal734 Variant_t VARIANT_STRING, 0, __literal734_buffer
__literal735 Variant_t VARIANT_STRING, 0, __literal735_buffer
__literal736 Variant_t VARIANT_STRING, 0, __literal736_buffer
__literal737 Variant_t VARIANT_STRING, 0, __literal737_buffer
__literal738 Variant_t VARIANT_STRING, 0, __literal738_buffer
__literal739 Variant_t VARIANT_STRING, 0, __literal739_buffer
__literal740 Variant_t VARIANT_STRING, 0, __literal740_buffer
__literal741 Variant_t VARIANT_STRING, 0, __literal741_buffer
__literal742 Variant_t VARIANT_STRING, 0, __literal742_buffer
__literal743 Variant_t VARIANT_STRING, 0, __literal743_buffer
__literal744 Variant_t VARIANT_STRING, 0, __literal744_buffer
__literal745 Variant_t VARIANT_STRING, 0, __literal745_buffer
__literal746 Variant_t VARIANT_STRING, 0, __literal746_buffer
__literal747 Variant_t VARIANT_STRING, 0, __literal747_buffer
__literal748 Variant_t VARIANT_STRING, 0, __literal748_buffer
__literal749 Variant_t VARIANT_STRING, 0, __literal749_buffer
__literal750 Variant_t VARIANT_STRING, 0, __literal750_buffer
__literal751 Variant_t VARIANT_STRING, 0, __literal751_buffer
__literal752 Variant_t VARIANT_STRING, 0, __literal752_buffer
__literal753 Variant_t VARIANT_STRING, 0, __literal753_buffer
__literal754 Variant_t VARIANT_STRING, 0, __literal754_buffer
__literal755 Variant_t VARIANT_STRING, 0, __literal755_buffer
__literal756 Variant_t VARIANT_STRING, 0, __literal756_buffer
__literal757 Variant_t VARIANT_STRING, 0, __literal757_buffer
__literal758 Variant_t VARIANT_STRING, 0, __literal758_buffer
__literal759 Variant_t VARIANT_STRING, 0, __literal759_buffer
__literal760 Variant_t VARIANT_STRING, 0, __literal760_buffer
__literal761 Variant_t VARIANT_STRING, 0, __literal761_buffer
__literal762 Variant_t VARIANT_STRING, 0, __literal762_buffer
__literal763 Variant_t VARIANT_STRING, 0, __literal763_buffer
__literal764 Variant_t VARIANT_STRING, 0, __literal764_buffer
__literal765 Variant_t VARIANT_STRING, 0, __literal765_buffer
__literal766 Variant_t VARIANT_STRING, 0, __literal766_buffer
__literal767 Variant_t VARIANT_STRING, 0, __literal767_buffer
__literal768 Variant_t VARIANT_STRING, 0, __literal768_buffer
__literal769 Variant_t VARIANT_STRING, 0, __literal769_buffer
__literal770 Variant_t VARIANT_STRING, 0, __literal770_buffer
__literal771 Variant_t VARIANT_STRING, 0, __literal771_buffer
__literal772 Variant_t VARIANT_STRING, 0, __literal772_buffer
__literal773 Variant_t VARIANT_STRING, 0, __literal773_buffer
__literal774 Variant_t VARIANT_STRING, 0, __literal774_buffer
__literal775 Variant_t VARIANT_STRING, 0, __literal775_buffer
__literal776 Variant_t VARIANT_STRING, 0, __literal776_buffer
__literal777 Variant_t VARIANT_STRING, 0, __literal777_buffer
__literal778 Variant_t VARIANT_STRING, 0, __literal778_buffer
__literal779 Variant_t VARIANT_STRING, 0, __literal779_buffer
__literal780 Variant_t VARIANT_STRING, 0, __literal780_buffer
__literal781 Variant_t VARIANT_STRING, 0, __literal781_buffer
__literal782 Variant_t VARIANT_STRING, 0, __literal782_buffer
__literal783 Variant_t VARIANT_STRING, 0, __literal783_buffer
__literal784 Variant_t VARIANT_STRING, 0, __literal784_buffer
__literal785 Variant_t VARIANT_STRING, 0, __literal785_buffer
__literal786 Variant_t VARIANT_STRING, 0, __literal786_buffer
__literal787 Variant_t VARIANT_STRING, 0, __literal787_buffer
__literal788 Variant_t VARIANT_STRING, 0, __literal788_buffer
__literal789 Variant_t VARIANT_STRING, 0, __literal789_buffer
__literal790 Variant_t VARIANT_STRING, 0, __literal790_buffer
__literal791 Variant_t VARIANT_STRING, 0, __literal791_buffer
__literal792 Variant_t VARIANT_STRING, 0, __literal792_buffer
__literal793 Variant_t VARIANT_STRING, 0, __literal793_buffer
__literal794 Variant_t VARIANT_STRING, 0, __literal794_buffer
__literal795 Variant_t VARIANT_STRING, 0, __literal795_buffer
__literal796 Variant_t VARIANT_STRING, 0, __literal796_buffer
__literal797 Variant_t VARIANT_STRING, 0, __literal797_buffer
__literal798 Variant_t VARIANT_STRING, 0, __literal798_buffer
__literal799 Variant_t VARIANT_STRING, 0, __literal799_buffer
__literal800 Variant_t VARIANT_STRING, 0, __literal800_buffer
__literal801 Variant_t VARIANT_STRING, 0, __literal801_buffer
__literal802 Variant_t VARIANT_STRING, 0, __literal802_buffer
__literal803 Variant_t VARIANT_STRING, 0, __literal803_buffer
__literal804 Variant_t VARIANT_STRING, 0, __literal804_buffer
__literal805 Variant_t VARIANT_STRING, 0, __literal805_buffer
__literal806 Variant_t VARIANT_STRING, 0, __literal806_buffer
__literal807 Variant_t VARIANT_STRING, 0, __literal807_buffer
__literal808 Variant_t VARIANT_STRING, 0, __literal808_buffer
__literal809 Variant_t VARIANT_STRING, 0, __literal809_buffer
__literal810 Variant_t VARIANT_STRING, 0, __literal810_buffer
__literal811 Variant_t VARIANT_STRING, 0, __literal811_buffer
__literal812 Variant_t VARIANT_STRING, 0, __literal812_buffer
__literal813 Variant_t VARIANT_STRING, 0, __literal813_buffer
__literal814 Variant_t VARIANT_STRING, 0, __literal814_buffer
__literal815 Variant_t VARIANT_STRING, 0, __literal815_buffer
__literal816 Variant_t VARIANT_STRING, 0, __literal816_buffer
__literal817 Variant_t VARIANT_STRING, 0, __literal817_buffer
__literal818 Variant_t VARIANT_STRING, 0, __literal818_buffer
__literal819 Variant_t VARIANT_STRING, 0, __literal819_buffer
__literal820 Variant_t VARIANT_STRING, 0, __literal820_buffer
__literal821 Variant_t VARIANT_STRING, 0, __literal821_buffer
__literal822 Variant_t VARIANT_STRING, 0, __literal822_buffer
__literal823 Variant_t VARIANT_STRING, 0, __literal823_buffer
__literal824 Variant_t VARIANT_STRING, 0, __literal824_buffer
__literal825 Variant_t VARIANT_STRING, 0, __literal825_buffer
__literal826 Variant_t VARIANT_STRING, 0, __literal826_buffer
__literal827 Variant_t VARIANT_STRING, 0, __literal827_buffer
__literal828 Variant_t VARIANT_STRING, 0, __literal828_buffer
__literal829 Variant_t VARIANT_STRING, 0, __literal829_buffer
__literal830 Variant_t VARIANT_STRING, 0, __literal830_buffer
__literal831 Variant_t VARIANT_STRING, 0, __literal831_buffer
__literal832 Variant_t VARIANT_STRING, 0, __literal832_buffer
__literal833 Variant_t VARIANT_STRING, 0, __literal833_buffer
__literal834 Variant_t VARIANT_STRING, 0, __literal834_buffer
__literal835 Variant_t VARIANT_STRING, 0, __literal835_buffer
__literal836 Variant_t VARIANT_STRING, 0, __literal836_buffer
__literal837 Variant_t VARIANT_STRING, 0, __literal837_buffer
__literal838 Variant_t VARIANT_STRING, 0, __literal838_buffer
__literal839 Variant_t VARIANT_STRING, 0, __literal839_buffer
__literal840 Variant_t VARIANT_STRING, 0, __literal840_buffer
__literal841 Variant_t VARIANT_STRING, 0, __literal841_buffer
__literal842 Variant_t VARIANT_STRING, 0, __literal842_buffer
__literal843 Variant_t VARIANT_STRING, 0, __literal843_buffer
__literal844 Variant_t VARIANT_STRING, 0, __literal844_buffer
__literal845 Variant_t VARIANT_STRING, 0, __literal845_buffer
__literal846 Variant_t VARIANT_STRING, 0, __literal846_buffer
__literal847 Variant_t VARIANT_STRING, 0, __literal847_buffer
__literal848 Variant_t VARIANT_STRING, 0, __literal848_buffer
__literal849 Variant_t VARIANT_STRING, 0, __literal849_buffer
__literal850 Variant_t VARIANT_STRING, 0, __literal850_buffer
__literal851 Variant_t VARIANT_STRING, 0, __literal851_buffer
__literal852 Variant_t VARIANT_STRING, 0, __literal852_buffer
__literal853 Variant_t VARIANT_STRING, 0, __literal853_buffer
__literal854 Variant_t VARIANT_STRING, 0, __literal854_buffer
__literal855 Variant_t VARIANT_STRING, 0, __literal855_buffer
__literal856 Variant_t VARIANT_STRING, 0, __literal856_buffer
__literal857 Variant_t VARIANT_STRING, 0, __literal857_buffer
__literal858 Variant_t VARIANT_STRING, 0, __literal858_buffer
__literal859 Variant_t VARIANT_STRING, 0, __literal859_buffer
__literal860 Variant_t VARIANT_STRING, 0, __literal860_buffer
__literal861 Variant_t VARIANT_STRING, 0, __literal861_buffer
__literal862 Variant_t VARIANT_STRING, 0, __literal862_buffer
__literal863 Variant_t VARIANT_STRING, 0, __literal863_buffer
__literal864 Variant_t VARIANT_STRING, 0, __literal864_buffer
__literal865 Variant_t VARIANT_STRING, 0, __literal865_buffer
__literal866 Variant_t VARIANT_STRING, 0, __literal866_buffer
__literal867 Variant_t VARIANT_STRING, 0, __literal867_buffer
__literal868 Variant_t VARIANT_STRING, 0, __literal868_buffer
__literal869 Variant_t VARIANT_STRING, 0, __literal869_buffer
__literal870 Variant_t VARIANT_STRING, 0, __literal870_buffer
__literal871 Variant_t VARIANT_STRING, 0, __literal871_buffer
__literal872 Variant_t VARIANT_STRING, 0, __literal872_buffer
__literal873 Variant_t VARIANT_STRING, 0, __literal873_buffer
__literal874 Variant_t VARIANT_STRING, 0, __literal874_buffer
__literal875 Variant_t VARIANT_STRING, 0, __literal875_buffer
__literal876 Variant_t VARIANT_STRING, 0, __literal876_buffer
__literal877 Variant_t VARIANT_STRING, 0, __literal877_buffer
__literal878 Variant_t VARIANT_STRING, 0, __literal878_buffer
__literal879 Variant_t VARIANT_STRING, 0, __literal879_buffer
__literal880 Variant_t VARIANT_STRING, 0, __literal880_buffer
__literal881 Variant_t VARIANT_STRING, 0, __literal881_buffer
__literal882 Variant_t VARIANT_STRING, 0, __literal882_buffer
__literal883 Variant_t VARIANT_STRING, 0, __literal883_buffer
__literal884 Variant_t VARIANT_STRING, 0, __literal884_buffer
__literal885 Variant_t VARIANT_STRING, 0, __literal885_buffer
__literal886 Variant_t VARIANT_STRING, 0, __literal886_buffer
__literal887 Variant_t VARIANT_STRING, 0, __literal887_buffer
__literal888 Variant_t VARIANT_STRING, 0, __literal888_buffer
__literal889 Variant_t VARIANT_STRING, 0, __literal889_buffer
__literal890 Variant_t VARIANT_STRING, 0, __literal890_buffer
__literal891 Variant_t VARIANT_STRING, 0, __literal891_buffer
__literal892 Variant_t VARIANT_STRING, 0, __literal892_buffer
__literal893 Variant_t VARIANT_STRING, 0, __literal893_buffer
__literal894 Variant_t VARIANT_STRING, 0, __literal894_buffer
__literal895 Variant_t VARIANT_STRING, 0, __literal895_buffer
__literal896 Variant_t VARIANT_STRING, 0, __literal896_buffer
__literal897 Variant_t VARIANT_STRING, 0, __literal897_buffer
__literal898 Variant_t VARIANT_STRING, 0, __literal898_buffer
__literal899 Variant_t VARIANT_STRING, 0, __literal899_buffer
__literal900 Variant_t VARIANT_STRING, 0, __literal900_buffer
__literal901 Variant_t VARIANT_STRING, 0, __literal901_buffer
__literal902 Variant_t VARIANT_STRING, 0, __literal902_buffer
__literal903 Variant_t VARIANT_STRING, 0, __literal903_buffer
__literal904 Variant_t VARIANT_STRING, 0, __literal904_buffer
__literal905 Variant_t VARIANT_STRING, 0, __literal905_buffer
__literal906 Variant_t VARIANT_STRING, 0, __literal906_buffer
__literal907 Variant_t VARIANT_STRING, 0, __literal907_buffer
__literal908 Variant_t VARIANT_STRING, 0, __literal908_buffer
__literal909 Variant_t VARIANT_STRING, 0, __literal909_buffer
__literal910 Variant_t VARIANT_STRING, 0, __literal910_buffer
__literal911 Variant_t VARIANT_STRING, 0, __literal911_buffer
__literal912 Variant_t VARIANT_STRING, 0, __literal912_buffer
__literal913 Variant_t VARIANT_STRING, 0, __literal913_buffer
__literal914 Variant_t VARIANT_STRING, 0, __literal914_buffer
__literal915 Variant_t VARIANT_STRING, 0, __literal915_buffer
__literal916 Variant_t VARIANT_STRING, 0, __literal916_buffer
__literal917 Variant_t VARIANT_STRING, 0, __literal917_buffer
__literal918 Variant_t VARIANT_STRING, 0, __literal918_buffer
__literal919 Variant_t VARIANT_STRING, 0, __literal919_buffer
__literal920 Variant_t VARIANT_STRING, 0, __literal920_buffer
__literal921 Variant_t VARIANT_STRING, 0, __literal921_buffer
__literal922 Variant_t VARIANT_STRING, 0, __literal922_buffer
__literal923 Variant_t VARIANT_STRING, 0, __literal923_buffer
__literal924 Variant_t VARIANT_STRING, 0, __literal924_buffer
__literal925 Variant_t VARIANT_STRING, 0, __literal925_buffer
__literal926 Variant_t VARIANT_STRING, 0, __literal926_buffer
__literal927 Variant_t VARIANT_STRING, 0, __literal927_buffer
__literal928 Variant_t VARIANT_STRING, 0, __literal928_buffer
__literal929 Variant_t VARIANT_STRING, 0, __literal929_buffer
__literal930 Variant_t VARIANT_STRING, 0, __literal930_buffer
__literal931 Variant_t VARIANT_STRING, 0, __literal931_buffer
__literal932 Variant_t VARIANT_STRING, 0, __literal932_buffer
__literal933 Variant_t VARIANT_STRING, 0, __literal933_buffer
__literal934 Variant_t VARIANT_STRING, 0, __literal934_buffer
__literal935 Variant_t VARIANT_STRING, 0, __literal935_buffer
__literal936 Variant_t VARIANT_STRING, 0, __literal936_buffer
__literal937 Variant_t VARIANT_STRING, 0, __literal937_buffer
__literal938 Variant_t VARIANT_STRING, 0, __literal938_buffer
__literal939 Variant_t VARIANT_STRING, 0, __literal939_buffer
__literal940 Variant_t VARIANT_STRING, 0, __literal940_buffer
__literal941 Variant_t VARIANT_STRING, 0, __literal941_buffer
__literal942 Variant_t VARIANT_STRING, 0, __literal942_buffer
__literal943 Variant_t VARIANT_STRING, 0, __literal943_buffer
__literal944 Variant_t VARIANT_STRING, 0, __literal944_buffer
__literal945 Variant_t VARIANT_STRING, 0, __literal945_buffer
__literal946 Variant_t VARIANT_STRING, 0, __literal946_buffer
__literal947 Variant_t VARIANT_STRING, 0, __literal947_buffer
__literal948 Variant_t VARIANT_STRING, 0, __literal948_buffer
__literal949 Variant_t VARIANT_STRING, 0, __literal949_buffer
__literal950 Variant_t VARIANT_STRING, 0, __literal950_buffer
__literal951 Variant_t VARIANT_STRING, 0, __literal951_buffer
__literal952 Variant_t VARIANT_STRING, 0, __literal952_buffer
__literal953 Variant_t VARIANT_STRING, 0, __literal953_buffer
__literal954 Variant_t VARIANT_STRING, 0, __literal954_buffer
__literal955 Variant_t VARIANT_STRING, 0, __literal955_buffer
__literal956 Variant_t VARIANT_STRING, 0, __literal956_buffer
__literal957 Variant_t VARIANT_STRING, 0, __literal957_buffer
__literal958 Variant_t VARIANT_STRING, 0, __literal958_buffer
__literal959 Variant_t VARIANT_STRING, 0, __literal959_buffer
__literal960 Variant_t VARIANT_STRING, 0, __literal960_buffer
__literal961 Variant_t VARIANT_STRING, 0, __literal961_buffer
__literal962 Variant_t VARIANT_STRING, 0, __literal962_buffer
__literal963 Variant_t VARIANT_STRING, 0, __literal963_buffer
__literal964 Variant_t VARIANT_STRING, 0, __literal964_buffer
__literal965 Variant_t VARIANT_STRING, 0, __literal965_buffer
__literal966 Variant_t VARIANT_STRING, 0, __literal966_buffer
__literal967 Variant_t VARIANT_STRING, 0, __literal967_buffer
__literal968 Variant_t VARIANT_STRING, 0, __literal968_buffer
__literal969 Variant_t VARIANT_STRING, 0, __literal969_buffer
__literal970 Variant_t VARIANT_STRING, 0, __literal970_buffer
__literal971 Variant_t VARIANT_STRING, 0, __literal971_buffer
__literal972 Variant_t VARIANT_STRING, 0, __literal972_buffer
__literal973 Variant_t VARIANT_STRING, 0, __literal973_buffer
__literal974 Variant_t VARIANT_STRING, 0, __literal974_buffer
__literal975 Variant_t VARIANT_STRING, 0, __literal975_buffer
__literal976 Variant_t VARIANT_STRING, 0, __literal976_buffer
__literal977 Variant_t VARIANT_STRING, 0, __literal977_buffer
__literal978 Variant_t VARIANT_STRING, 0, __literal978_buffer
__literal979 Variant_t VARIANT_STRING, 0, __literal979_buffer
__literal980 Variant_t VARIANT_STRING, 0, __literal980_buffer
__literal981 Variant_t VARIANT_STRING, 0, __literal981_buffer
__literal982 Variant_t VARIANT_STRING, 0, __literal982_buffer
__literal983 Variant_t VARIANT_STRING, 0, __literal983_buffer
__literal984 Variant_t VARIANT_STRING, 0, __literal984_buffer
__literal985 Variant_t VARIANT_STRING, 0, __literal985_buffer
__literal986 Variant_t VARIANT_STRING, 0, __literal986_buffer
__literal987 Variant_t VARIANT_STRING, 0, __literal987_buffer
__literal988 Variant_t VARIANT_STRING, 0, __literal988_buffer
__literal989 Variant_t VARIANT_STRING, 0, __literal989_buffer
__literal990 Variant_t VARIANT_STRING, 0, __literal990_buffer
__literal991 Variant_t VARIANT_STRING, 0, __literal991_buffer
__literal992 Variant_t VARIANT_STRING, 0, __literal992_buffer
__literal993 Variant_t VARIANT_STRING, 0, __literal993_buffer
__literal994 Variant_t VARIANT_STRING, 0, __literal994_buffer
__literal995 Variant_t VARIANT_STRING, 0, __literal995_buffer
__literal996 Variant_t VARIANT_STRING, 0, __literal996_buffer
__literal997 Variant_t VARIANT_STRING, 0, __literal997_buffer
__literal998 Variant_t VARIANT_STRING, 0, __literal998_buffer
__literal999 Variant_t VARIANT_STRING, 0, __literal999_buffer
__literal1000 Variant_t VARIANT_STRING, 0, __literal1000_buffer
__literal1001 Variant_t VARIANT_STRING, 0, __literal1001_buffer
__literal1002 Variant_t VARIANT_STRING, 0, __literal1002_buffer
__literal1003 Variant_t VARIANT_STRING, 0, __literal1003_buffer
__literal1004 Variant_t VARIANT_STRING, 0, __literal1004_buffer
__literal1005 Variant_t VARIANT_STRING, 0, __literal1005_buffer
__literal1006 Variant_t VARIANT_STRING, 0, __literal1006_buffer
__literal1007 Variant_t VARIANT_STRING, 0, __literal1007_buffer
__literal1008 Variant_t VARIANT_STRING, 0, __literal1008_buffer
__literal1009 Variant_t VARIANT_STRING, 0, __literal1009_buffer
__literal1010 Variant_t VARIANT_STRING, 0, __literal1010_buffer
__literal1011 Variant_t VARIANT_STRING, 0, __literal1011_buffer
__literal1012 Variant_t VARIANT_STRING, 0, __literal1012_buffer
__literal1013 Variant_t VARIANT_STRING, 0, __literal1013_buffer
__literal1014 Variant_t VARIANT_STRING, 0, __literal1014_buffer
__literal1015 Variant_t VARIANT_STRING, 0, __literal1015_buffer
__literal1016 Variant_t VARIANT_STRING, 0, __literal1016_buffer
__literal1017 Variant_t VARIANT_STRING, 0, __literal1017_buffer
__literal1018 Variant_t VARIANT_STRING, 0, __literal1018_buffer
__literal1019 Variant_t VARIANT_STRING, 0, __literal1019_buffer
__literal1020 Variant_t VARIANT_STRING, 0, __literal1020_buffer
__literal1021 Variant_t VARIANT_STRING, 0, __literal1021_buffer
__literal1022 Variant_t VARIANT_STRING, 0, __literal1022_buffer
__literal1023 Variant_t VARIANT_STRING, 0, __literal1023_buffer
__literal1024 Variant_t VARIANT_STRING, 0, __literal1024_buffer
__literal1025 Variant_t VARIANT_STRING, 0, __literal1025_buffer
__literal1026 Variant_t VARIANT_STRING, 0, __literal1026_buffer
__literal1027 Variant_t VARIANT_STRING, 0, __literal1027_buffer
__literal1028 Variant_t VARIANT_STRING, 0, __literal1028_buffer
__literal1029 Variant_t VARIANT_STRING, 0, __literal1029_buffer
__literal1030 Variant_t VARIANT_STRING, 0, __literal1030_buffer
__literal1031 Variant_t VARIANT_STRING, 0, __literal1031_buffer
__literal1032 Variant_t VARIANT_STRING, 0, __literal1032_buffer
__literal1033 Variant_t VARIANT_STRING, 0, __literal1033_buffer
__literal1034 Variant_t VARIANT_STRING, 0, __literal1034_buffer
__literal1035 Variant_t VARIANT_STRING, 0, __literal1035_buffer
__literal1036 Variant_t VARIANT_STRING, 0, __literal1036_buffer
__literal1037 Variant_t VARIANT_STRING, 0, __literal1037_buffer
__literal1038 Variant_t VARIANT_STRING, 0, __literal1038_buffer
__literal1039 Variant_t VARIANT_STRING, 0, __literal1039_buffer
__literal1040 Variant_t VARIANT_STRING, 0, __literal1040_buffer
__literal1041 Variant_t VARIANT_STRING, 0, __literal1041_buffer
__literal1042 Variant_t VARIANT_STRING, 0, __literal1042_buffer
__literal1043 Variant_t VARIANT_STRING, 0, __literal1043_buffer
__literal1044 Variant_t VARIANT_STRING, 0, __literal1044_buffer
__literal1045 Variant_t VARIANT_STRING, 0, __literal1045_buffer
__literal1046 Variant_t VARIANT_STRING, 0, __literal1046_buffer
__literal1047 Variant_t VARIANT_STRING, 0, __literal1047_buffer
__literal1048 Variant_t VARIANT_STRING, 0, __literal1048_buffer
__literal1049 Variant_t VARIANT_STRING, 0, __literal1049_buffer
__literal1050 Variant_t VARIANT_STRING, 0, __literal1050_buffer
__literal1051 Variant_t VARIANT_STRING, 0, __literal1051_buffer
__literal1052 Variant_t VARIANT_STRING, 0, __literal1052_buffer
__literal1053 Variant_t VARIANT_STRING, 0, __literal1053_buffer
__literal1054 Variant_t VARIANT_STRING, 0, __literal1054_buffer
__literal1055 Variant_t VARIANT_STRING, 0, __literal1055_buffer
__literal1056 Variant_t VARIANT_STRING, 0, __literal1056_buffer
__literal1057 Variant_t VARIANT_STRING, 0, __literal1057_buffer
__literal1058 Variant_t VARIANT_STRING, 0, __literal1058_buffer
__literal1059 Variant_t VARIANT_STRING, 0, __literal1059_buffer
__literal1060 Variant_t VARIANT_STRING, 0, __literal1060_buffer
__literal1061 Variant_t VARIANT_STRING, 0, __literal1061_buffer
__literal1062 Variant_t VARIANT_STRING, 0, __literal1062_buffer
__literal1063 Variant_t VARIANT_STRING, 0, __literal1063_buffer
__literal1064 Variant_t VARIANT_STRING, 0, __literal1064_buffer
__literal1065 Variant_t VARIANT_STRING, 0, __literal1065_buffer
__literal1066 Variant_t VARIANT_STRING, 0, __literal1066_buffer
__literal1067 Variant_t VARIANT_STRING, 0, __literal1067_buffer
__literal1068 Variant_t VARIANT_STRING, 0, __literal1068_buffer
__literal1069 Variant_t VARIANT_STRING, 0, __literal1069_buffer
__literal1070 Variant_t VARIANT_STRING, 0, __literal1070_buffer
__literal1071 Variant_t VARIANT_STRING, 0, __literal1071_buffer
__literal1072 Variant_t VARIANT_STRING, 0, __literal1072_buffer
__literal1073 Variant_t VARIANT_STRING, 0, __literal1073_buffer
__literal1074 Variant_t VARIANT_STRING, 0, __literal1074_buffer
__literal1075 Variant_t VARIANT_STRING, 0, __literal1075_buffer
__literal1076 Variant_t VARIANT_STRING, 0, __literal1076_buffer
__literal1077 Variant_t VARIANT_STRING, 0, __literal1077_buffer
__literal1078 Variant_t VARIANT_STRING, 0, __literal1078_buffer
__literal1079 Variant_t VARIANT_STRING, 0, __literal1079_buffer
__literal1080 Variant_t VARIANT_STRING, 0, __literal1080_buffer
__literal1081 Variant_t VARIANT_STRING, 0, __literal1081_buffer
__literal1082 Variant_t VARIANT_STRING, 0, __literal1082_buffer
__literal1083 Variant_t VARIANT_STRING, 0, __literal1083_buffer
__literal1084 Variant_t VARIANT_STRING, 0, __literal1084_buffer
__literal1085 Variant_t VARIANT_STRING, 0, __literal1085_buffer
__literal1086 Variant_t VARIANT_STRING, 0, __literal1086_buffer
__literal1087 Variant_t VARIANT_STRING, 0, __literal1087_buffer
__literal1088 Variant_t VARIANT_STRING, 0, __literal1088_buffer
__literal1089 Variant_t VARIANT_STRING, 0, __literal1089_buffer
__literal1090 Variant_t VARIANT_STRING, 0, __literal1090_buffer
__literal1091 Variant_t VARIANT_STRING, 0, __literal1091_buffer
__literal1092 Variant_t VARIANT_STRING, 0, __literal1092_buffer
__literal1093 Variant_t VARIANT_STRING, 0, __literal1093_buffer
__literal1094 Variant_t VARIANT_STRING, 0, __literal1094_buffer
__literal1095 Variant_t VARIANT_STRING, 0, __literal1095_buffer
__literal1096 Variant_t VARIANT_STRING, 0, __literal1096_buffer
__literal1097 Variant_t VARIANT_STRING, 0, __literal1097_buffer
__literal1098 Variant_t VARIANT_STRING, 0, __literal1098_buffer
__literal1099 Variant_t VARIANT_STRING, 0, __literal1099_buffer
__literal1100 Variant_t VARIANT_STRING, 0, __literal1100_buffer
__literal1101 Variant_t VARIANT_STRING, 0, __literal1101_buffer
__literal1102 Variant_t VARIANT_STRING, 0, __literal1102_buffer
__literal1103 Variant_t VARIANT_STRING, 0, __literal1103_buffer
__literal1104 Variant_t VARIANT_STRING, 0, __literal1104_buffer
__literal1105 Variant_t VARIANT_STRING, 0, __literal1105_buffer
__literal1106 Variant_t VARIANT_STRING, 0, __literal1106_buffer
__literal1107 Variant_t VARIANT_STRING, 0, __literal1107_buffer
__literal1108 Variant_t VARIANT_STRING, 0, __literal1108_buffer
__literal1109 Variant_t VARIANT_STRING, 0, __literal1109_buffer
__literal1110 Variant_t VARIANT_STRING, 0, __literal1110_buffer
__literal1111 Variant_t VARIANT_STRING, 0, __literal1111_buffer
__literal1112 Variant_t VARIANT_STRING, 0, __literal1112_buffer
__literal1113 Variant_t VARIANT_STRING, 0, __literal1113_buffer
__literal1114 Variant_t VARIANT_STRING, 0, __literal1114_buffer
__literal1115 Variant_t VARIANT_STRING, 0, __literal1115_buffer
__literal1116 Variant_t VARIANT_STRING, 0, __literal1116_buffer
__literal1117 Variant_t VARIANT_STRING, 0, __literal1117_buffer
__literal1118 Variant_t VARIANT_STRING, 0, __literal1118_buffer
__literal1119 Variant_t VARIANT_STRING, 0, __literal1119_buffer
__literal1120 Variant_t VARIANT_STRING, 0, __literal1120_buffer
__literal1121 Variant_t VARIANT_STRING, 0, __literal1121_buffer
__literal1122 Variant_t VARIANT_STRING, 0, __literal1122_buffer
__literal1123 Variant_t VARIANT_STRING, 0, __literal1123_buffer
__literal1124 Variant_t VARIANT_STRING, 0, __literal1124_buffer
__literal1125 Variant_t VARIANT_STRING, 0, __literal1125_buffer
__literal1126 Variant_t VARIANT_STRING, 0, __literal1126_buffer
__literal1127 Variant_t VARIANT_STRING, 0, __literal1127_buffer
__literal1128 Variant_t VARIANT_STRING, 0, __literal1128_buffer
__literal1129 Variant_t VARIANT_STRING, 0, __literal1129_buffer
__literal1130 Variant_t VARIANT_STRING, 0, __literal1130_buffer
__literal1131 Variant_t VARIANT_STRING, 0, __literal1131_buffer
__literal1132 Variant_t VARIANT_STRING, 0, __literal1132_buffer
__literal1133 Variant_t VARIANT_STRING, 0, __literal1133_buffer
__literal1134 Variant_t VARIANT_STRING, 0, __literal1134_buffer
__literal1135 Variant_t VARIANT_STRING, 0, __literal1135_buffer
__literal1136 Variant_t VARIANT_STRING, 0, __literal1136_buffer
__literal1137 Variant_t VARIANT_STRING, 0, __literal1137_buffer
__literal1138 Variant_t VARIANT_STRING, 0, __literal1138_buffer
__literal1139 Variant_t VARIANT_STRING, 0, __literal1139_buffer
__literal1140 Variant_t VARIANT_STRING, 0, __literal1140_buffer
__literal1141 Variant_t VARIANT_STRING, 0, __literal1141_buffer
__literal1142 Variant_t VARIANT_STRING, 0, __literal1142_buffer
__literal1143 Variant_t VARIANT_STRING, 0, __literal1143_buffer
__literal1144 Variant_t VARIANT_STRING, 0, __literal1144_buffer
__literal1145 Variant_t VARIANT_STRING, 0, __literal1145_buffer
__literal1146 Variant_t VARIANT_STRING, 0, __literal1146_buffer
__literal1147 Variant_t VARIANT_STRING, 0, __literal1147_buffer
__literal1148 Variant_t VARIANT_STRING, 0, __literal1148_buffer
__literal1149 Variant_t VARIANT_STRING, 0, __literal1149_buffer
__literal1150 Variant_t VARIANT_STRING, 0, __literal1150_buffer
__literal1151 Variant_t VARIANT_STRING, 0, __literal1151_buffer
__literal1152 Variant_t VARIANT_STRING, 0, __literal1152_buffer
__literal1153 Variant_t VARIANT_STRING, 0, __literal1153_buffer
__literal1154 Variant_t VARIANT_STRING, 0, __literal1154_buffer
__literal1155 Variant_t VARIANT_STRING, 0, __literal1155_buffer
__literal1156 Variant_t VARIANT_STRING, 0, __literal1156_buffer
__literal1157 Variant_t VARIANT_STRING, 0, __literal1157_buffer
__literal1158 Variant_t VARIANT_STRING, 0, __literal1158_buffer
__literal1159 Variant_t VARIANT_STRING, 0, __literal1159_buffer
__literal1160 Variant_t VARIANT_STRING, 0, __literal1160_buffer
__literal1161 Variant_t VARIANT_STRING, 0, __literal1161_buffer
__literal1162 Variant_t VARIANT_STRING, 0, __literal1162_buffer
__literal1163 Variant_t VARIANT_STRING, 0, __literal1163_buffer
__literal1164 Variant_t VARIANT_STRING, 0, __literal1164_buffer
__literal1165 Variant_t VARIANT_STRING, 0, __literal1165_buffer
__literal1166 Variant_t VARIANT_STRING, 0, __literal1166_buffer
__literal1167 Variant_t VARIANT_STRING, 0, __literal1167_buffer
__literal1168 Variant_t VARIANT_STRING, 0, __literal1168_buffer
__literal1169 Variant_t VARIANT_STRING, 0, __literal1169_buffer
__literal1170 Variant_t VARIANT_STRING, 0, __literal1170_buffer
__literal1171 Variant_t VARIANT_STRING, 0, __literal1171_buffer
__literal1172 Variant_t VARIANT_STRING, 0, __literal1172_buffer
__literal1173 Variant_t VARIANT_STRING, 0, __literal1173_buffer
__literal1174 Variant_t VARIANT_STRING, 0, __literal1174_buffer
__literal1175 Variant_t VARIANT_STRING, 0, __literal1175_buffer
__literal1176 Variant_t VARIANT_STRING, 0, __literal1176_buffer
__literal1177 Variant_t VARIANT_STRING, 0, __literal1177_buffer
__literal1178 Variant_t VARIANT_STRING, 0, __literal1178_buffer
__literal1179 Variant_t VARIANT_STRING, 0, __literal1179_buffer
__literal1180 Variant_t VARIANT_STRING, 0, __literal1180_buffer
__literal1181 Variant_t VARIANT_STRING, 0, __literal1181_buffer
__literal1182 Variant_t VARIANT_STRING, 0, __literal1182_buffer
__const1398 Variant_t VARIANT_STRING, 0, __const1398_buffer
__const1421 Variant_t VARIANT_STRING, 0, __const1421_buffer
__const5231 Variant_t VARIANT_STRING, 0, __const5231_buffer
__const5232 Variant_t VARIANT_STRING, 0, __const5232_buffer
; iter 1
__literal0_buffer Buffer_t 7 , -1, 0, __literal0_bufferBytes
_act_buffer Buffer_t 4720 , -1, 0, _act_bufferBytes
_go_buffer Buffer_t 4720 , -1, 0, _go_bufferBytes
_def_prod_buffer Buffer_t 4720 , -1, 0, _def_prod_bufferBytes
_dfa_select_buffer Buffer_t 4720 , -1, 0, _dfa_select_bufferBytes
_dfa_idx_buffer Buffer_t 1568 , -1, 0, _dfa_idx_bufferBytes
_dfa_chars_buffer Buffer_t 598848 , -1, 0, _dfa_chars_bufferBytes
_dfa_trans_buffer Buffer_t 299424 , -1, 0, _dfa_trans_bufferBytes
_dfa_accept_buffer Buffer_t 1568 , -1, 0, _dfa_accept_bufferBytes
_symbolsGreedy_buffer Buffer_t 3264 , -1, 0, _symbolsGreedy_bufferBytes
_productions_buffer Buffer_t 12000 , -1, 0, _productions_bufferBytes
__literal1_buffer Buffer_t 7 , -1, 0, __literal1_bufferBytes
__literal2_buffer Buffer_t 6 , -1, 0, __literal2_bufferBytes
__literal3_buffer Buffer_t 5 , -1, 0, __literal3_bufferBytes
__literal4_buffer Buffer_t 5 , -1, 0, __literal4_bufferBytes
__literal5_buffer Buffer_t 5 , -1, 0, __literal5_bufferBytes
__literal6_buffer Buffer_t 6 , -1, 0, __literal6_bufferBytes
__literal7_buffer Buffer_t 3 , -1, 0, __literal7_bufferBytes
__literal8_buffer Buffer_t 1 , -1, 0, __literal8_bufferBytes
__literal9_buffer Buffer_t 3 , -1, 0, __literal9_bufferBytes
__literal10_buffer Buffer_t 35 , -1, 0, __literal10_bufferBytes
__literal11_buffer Buffer_t 22 , -1, 0, __literal11_bufferBytes
__literal12_buffer Buffer_t 5 , -1, 0, __literal12_bufferBytes
__literal13_buffer Buffer_t 7 , -1, 0, __literal13_bufferBytes
__literal14_buffer Buffer_t 11 , -1, 0, __literal14_bufferBytes
__literal15_buffer Buffer_t 3 , -1, 0, __literal15_bufferBytes
__literal16_buffer Buffer_t 9 , -1, 0, __literal16_bufferBytes
__literal17_buffer Buffer_t 5 , -1, 0, __literal17_bufferBytes
__literal18_buffer Buffer_t 7 , -1, 0, __literal18_bufferBytes
__literal19_buffer Buffer_t 6 , -1, 0, __literal19_bufferBytes
__literal20_buffer Buffer_t 5 , -1, 0, __literal20_bufferBytes
__literal21_buffer Buffer_t 7 , -1, 0, __literal21_bufferBytes
__literal22_buffer Buffer_t 9 , -1, 0, __literal22_bufferBytes
__literal23_buffer Buffer_t 9 , -1, 0, __literal23_bufferBytes
__literal24_buffer Buffer_t 13 , -1, 0, __literal24_bufferBytes
__literal25_buffer Buffer_t 2 , -1, 0, __literal25_bufferBytes
__literal26_buffer Buffer_t 10 , -1, 0, __literal26_bufferBytes
__literal27_buffer Buffer_t 17 , -1, 0, __literal27_bufferBytes
__literal28_buffer Buffer_t 8 , -1, 0, __literal28_bufferBytes
__literal29_buffer Buffer_t 30 , -1, 0, __literal29_bufferBytes
__literal30_buffer Buffer_t 31 , -1, 0, __literal30_bufferBytes
__literal31_buffer Buffer_t 14 , -1, 0, __literal31_bufferBytes
__literal32_buffer Buffer_t 16 , -1, 0, __literal32_bufferBytes
__literal33_buffer Buffer_t 16 , -1, 0, __literal33_bufferBytes
__literal34_buffer Buffer_t 2 , -1, 0, __literal34_bufferBytes
__literal35_buffer Buffer_t 18 , -1, 0, __literal35_bufferBytes
__literal36_buffer Buffer_t 8 , -1, 0, __literal36_bufferBytes
__literal37_buffer Buffer_t 17 , -1, 0, __literal37_bufferBytes
__literal38_buffer Buffer_t 9 , -1, 0, __literal38_bufferBytes
__literal39_buffer Buffer_t 9 , -1, 0, __literal39_bufferBytes
__literal40_buffer Buffer_t 13 , -1, 0, __literal40_bufferBytes
__literal41_buffer Buffer_t 18 , -1, 0, __literal41_bufferBytes
__literal42_buffer Buffer_t 8 , -1, 0, __literal42_bufferBytes
__literal43_buffer Buffer_t 14 , -1, 0, __literal43_bufferBytes
__literal44_buffer Buffer_t 2 , -1, 0, __literal44_bufferBytes
__literal45_buffer Buffer_t 6 , -1, 0, __literal45_bufferBytes
__literal46_buffer Buffer_t 7 , -1, 0, __literal46_bufferBytes
__literal47_buffer Buffer_t 7 , -1, 0, __literal47_bufferBytes
__literal48_buffer Buffer_t 28 , -1, 0, __literal48_bufferBytes
__literal49_buffer Buffer_t 29 , -1, 0, __literal49_bufferBytes
__literal50_buffer Buffer_t 10 , -1, 0, __literal50_bufferBytes
__literal51_buffer Buffer_t 30 , -1, 0, __literal51_bufferBytes
__literal52_buffer Buffer_t 2 , -1, 0, __literal52_bufferBytes
__literal53_buffer Buffer_t 5 , -1, 0, __literal53_bufferBytes
__literal54_buffer Buffer_t 6 , -1, 0, __literal54_bufferBytes
__literal55_buffer Buffer_t 21 , -1, 0, __literal55_bufferBytes
__literal56_buffer Buffer_t 57 , -1, 0, __literal56_bufferBytes
__literal57_buffer Buffer_t 20 , -1, 0, __literal57_bufferBytes
__literal58_buffer Buffer_t 20 , -1, 0, __literal58_bufferBytes
__literal59_buffer Buffer_t 10 , -1, 0, __literal59_bufferBytes
__literal60_buffer Buffer_t 14 , -1, 0, __literal60_bufferBytes
__literal61_buffer Buffer_t 3 , -1, 0, __literal61_bufferBytes
__literal62_buffer Buffer_t 8 , -1, 0, __literal62_bufferBytes
__literal63_buffer Buffer_t 24 , -1, 0, __literal63_bufferBytes
__literal64_buffer Buffer_t 13 , -1, 0, __literal64_bufferBytes
__literal65_buffer Buffer_t 19 , -1, 0, __literal65_bufferBytes
AST_DataTypeNames_buffer Buffer_t 176 , -1, 0, AST_DataTypeNames_bufferBytes
AST_DataTypeForMIR_buffer Buffer_t 176 , -1, 0, AST_DataTypeForMIR_bufferBytes
__literal66_buffer Buffer_t 8 , -1, 0, __literal66_bufferBytes
__literal67_buffer Buffer_t 6 , -1, 0, __literal67_bufferBytes
__literal68_buffer Buffer_t 9 , -1, 0, __literal68_bufferBytes
__literal69_buffer Buffer_t 6 , -1, 0, __literal69_bufferBytes
__literal70_buffer Buffer_t 7 , -1, 0, __literal70_bufferBytes
__literal71_buffer Buffer_t 3 , -1, 0, __literal71_bufferBytes
__literal72_buffer Buffer_t 4 , -1, 0, __literal72_bufferBytes
__literal73_buffer Buffer_t 6 , -1, 0, __literal73_bufferBytes
__literal74_buffer Buffer_t 5 , -1, 0, __literal74_bufferBytes
__literal75_buffer Buffer_t 19 , -1, 0, __literal75_bufferBytes
__literal76_buffer Buffer_t 17 , -1, 0, __literal76_bufferBytes
__literal77_buffer Buffer_t 8 , -1, 0, __literal77_bufferBytes
__literal78_buffer Buffer_t 7 , -1, 0, __literal78_bufferBytes
__literal79_buffer Buffer_t 6 , -1, 0, __literal79_bufferBytes
__literal80_buffer Buffer_t 7 , -1, 0, __literal80_bufferBytes
__literal81_buffer Buffer_t 5 , -1, 0, __literal81_bufferBytes
__literal82_buffer Buffer_t 6 , -1, 0, __literal82_bufferBytes
__literal83_buffer Buffer_t 4 , -1, 0, __literal83_bufferBytes
__literal84_buffer Buffer_t 10 , -1, 0, __literal84_bufferBytes
__literal85_buffer Buffer_t 9 , -1, 0, __literal85_bufferBytes
__literal86_buffer Buffer_t 8 , -1, 0, __literal86_bufferBytes
__literal87_buffer Buffer_t 4 , -1, 0, __literal87_bufferBytes
__literal88_buffer Buffer_t 4 , -1, 0, __literal88_bufferBytes
__literal89_buffer Buffer_t 12 , -1, 0, __literal89_bufferBytes
__literal90_buffer Buffer_t 4 , -1, 0, __literal90_bufferBytes
__literal91_buffer Buffer_t 4 , -1, 0, __literal91_bufferBytes
__literal92_buffer Buffer_t 4 , -1, 0, __literal92_bufferBytes
__literal93_buffer Buffer_t 5 , -1, 0, __literal93_bufferBytes
__literal94_buffer Buffer_t 7 , -1, 0, __literal94_bufferBytes
__literal95_buffer Buffer_t 7 , -1, 0, __literal95_bufferBytes
__literal96_buffer Buffer_t 7 , -1, 0, __literal96_bufferBytes
__literal97_buffer Buffer_t 7 , -1, 0, __literal97_bufferBytes
__literal98_buffer Buffer_t 7 , -1, 0, __literal98_bufferBytes
__literal99_buffer Buffer_t 7 , -1, 0, __literal99_bufferBytes
__literal100_buffer Buffer_t 18 , -1, 0, __literal100_bufferBytes
__literal101_buffer Buffer_t 9 , -1, 0, __literal101_bufferBytes
__literal102_buffer Buffer_t 4 , -1, 0, __literal102_bufferBytes
__literal103_buffer Buffer_t 10 , -1, 0, __literal103_bufferBytes
__literal104_buffer Buffer_t 9 , -1, 0, __literal104_bufferBytes
__literal105_buffer Buffer_t 6 , -1, 0, __literal105_bufferBytes
__literal106_buffer Buffer_t 11 , -1, 0, __literal106_bufferBytes
__literal107_buffer Buffer_t 3 , -1, 0, __literal107_bufferBytes
__literal108_buffer Buffer_t 3 , -1, 0, __literal108_bufferBytes
__literal109_buffer Buffer_t 2 , -1, 0, __literal109_bufferBytes
__literal110_buffer Buffer_t 2 , -1, 0, __literal110_bufferBytes
__literal111_buffer Buffer_t 2 , -1, 0, __literal111_bufferBytes
__literal112_buffer Buffer_t 2 , -1, 0, __literal112_bufferBytes
__literal113_buffer Buffer_t 2 , -1, 0, __literal113_bufferBytes
__literal114_buffer Buffer_t 2 , -1, 0, __literal114_bufferBytes
__literal115_buffer Buffer_t 4 , -1, 0, __literal115_bufferBytes
__literal116_buffer Buffer_t 3 , -1, 0, __literal116_bufferBytes
__literal117_buffer Buffer_t 2 , -1, 0, __literal117_bufferBytes
__literal118_buffer Buffer_t 2 , -1, 0, __literal118_bufferBytes
__literal119_buffer Buffer_t 2 , -1, 0, __literal119_bufferBytes
__literal120_buffer Buffer_t 2 , -1, 0, __literal120_bufferBytes
__literal121_buffer Buffer_t 2 , -1, 0, __literal121_bufferBytes
__literal122_buffer Buffer_t 3 , -1, 0, __literal122_bufferBytes
__literal123_buffer Buffer_t 3 , -1, 0, __literal123_bufferBytes
__literal124_buffer Buffer_t 3 , -1, 0, __literal124_bufferBytes
__literal125_buffer Buffer_t 3 , -1, 0, __literal125_bufferBytes
__literal126_buffer Buffer_t 3 , -1, 0, __literal126_bufferBytes
__literal127_buffer Buffer_t 3 , -1, 0, __literal127_bufferBytes
__literal128_buffer Buffer_t 3 , -1, 0, __literal128_bufferBytes
__literal129_buffer Buffer_t 2 , -1, 0, __literal129_bufferBytes
__literal130_buffer Buffer_t 5 , -1, 0, __literal130_bufferBytes
__literal131_buffer Buffer_t 4 , -1, 0, __literal131_bufferBytes
__literal132_buffer Buffer_t 6 , -1, 0, __literal132_bufferBytes
__literal133_buffer Buffer_t 6 , -1, 0, __literal133_bufferBytes
__literal134_buffer Buffer_t 2 , -1, 0, __literal134_bufferBytes
__literal135_buffer Buffer_t 4 , -1, 0, __literal135_bufferBytes
__literal136_buffer Buffer_t 6 , -1, 0, __literal136_bufferBytes
__literal137_buffer Buffer_t 3 , -1, 0, __literal137_bufferBytes
__literal138_buffer Buffer_t 6 , -1, 0, __literal138_bufferBytes
__literal139_buffer Buffer_t 6 , -1, 0, __literal139_bufferBytes
__literal140_buffer Buffer_t 6 , -1, 0, __literal140_bufferBytes
__literal141_buffer Buffer_t 7 , -1, 0, __literal141_bufferBytes
__literal142_buffer Buffer_t 7 , -1, 0, __literal142_bufferBytes
__literal143_buffer Buffer_t 5 , -1, 0, __literal143_bufferBytes
__literal144_buffer Buffer_t 4 , -1, 0, __literal144_bufferBytes
__literal145_buffer Buffer_t 6 , -1, 0, __literal145_bufferBytes
__literal146_buffer Buffer_t 26 , -1, 0, __literal146_bufferBytes
__literal147_buffer Buffer_t 47 , -1, 0, __literal147_bufferBytes
__literal148_buffer Buffer_t 6 , -1, 0, __literal148_bufferBytes
__literal149_buffer Buffer_t 4 , -1, 0, __literal149_bufferBytes
__literal150_buffer Buffer_t 15 , -1, 0, __literal150_bufferBytes
__literal151_buffer Buffer_t 10 , -1, 0, __literal151_bufferBytes
__literal152_buffer Buffer_t 5 , -1, 0, __literal152_bufferBytes
__literal153_buffer Buffer_t 2 , -1, 0, __literal153_bufferBytes
__literal154_buffer Buffer_t 12 , -1, 0, __literal154_bufferBytes
__literal155_buffer Buffer_t 2 , -1, 0, __literal155_bufferBytes
__literal156_buffer Buffer_t 6 , -1, 0, __literal156_bufferBytes
__literal157_buffer Buffer_t 12 , -1, 0, __literal157_bufferBytes
__literal158_buffer Buffer_t 8 , -1, 0, __literal158_bufferBytes
__literal159_buffer Buffer_t 19 , -1, 0, __literal159_bufferBytes
__literal160_buffer Buffer_t 8 , -1, 0, __literal160_bufferBytes
__literal161_buffer Buffer_t 11 , -1, 0, __literal161_bufferBytes
__literal162_buffer Buffer_t 8 , -1, 0, __literal162_bufferBytes
__literal163_buffer Buffer_t 58 , -1, 0, __literal163_bufferBytes
__literal164_buffer Buffer_t 8 , -1, 0, __literal164_bufferBytes
__literal165_buffer Buffer_t 6 , -1, 0, __literal165_bufferBytes
__literal166_buffer Buffer_t 6 , -1, 0, __literal166_bufferBytes
__literal167_buffer Buffer_t 6 , -1, 0, __literal167_bufferBytes
__literal168_buffer Buffer_t 6 , -1, 0, __literal168_bufferBytes
__literal169_buffer Buffer_t 9 , -1, 0, __literal169_bufferBytes
__literal170_buffer Buffer_t 6 , -1, 0, __literal170_bufferBytes
__literal171_buffer Buffer_t 7 , -1, 0, __literal171_bufferBytes
__literal172_buffer Buffer_t 19 , -1, 0, __literal172_bufferBytes
__literal173_buffer Buffer_t 4 , -1, 0, __literal173_bufferBytes
__literal174_buffer Buffer_t 8 , -1, 0, __literal174_bufferBytes
__literal175_buffer Buffer_t 8 , -1, 0, __literal175_bufferBytes
__literal176_buffer Buffer_t 10 , -1, 0, __literal176_bufferBytes
__literal177_buffer Buffer_t 10 , -1, 0, __literal177_bufferBytes
__literal178_buffer Buffer_t 9 , -1, 0, __literal178_bufferBytes
__literal179_buffer Buffer_t 15 , -1, 0, __literal179_bufferBytes
__literal180_buffer Buffer_t 6 , -1, 0, __literal180_bufferBytes
__literal181_buffer Buffer_t 4 , -1, 0, __literal181_bufferBytes
__literal182_buffer Buffer_t 5 , -1, 0, __literal182_bufferBytes
__literal183_buffer Buffer_t 6 , -1, 0, __literal183_bufferBytes
__literal184_buffer Buffer_t 8 , -1, 0, __literal184_bufferBytes
__literal185_buffer Buffer_t 7 , -1, 0, __literal185_bufferBytes
__literal186_buffer Buffer_t 7 , -1, 0, __literal186_bufferBytes
__literal187_buffer Buffer_t 8 , -1, 0, __literal187_bufferBytes
__literal188_buffer Buffer_t 16 , -1, 0, __literal188_bufferBytes
__literal189_buffer Buffer_t 19 , -1, 0, __literal189_bufferBytes
__literal190_buffer Buffer_t 10 , -1, 0, __literal190_bufferBytes
__literal191_buffer Buffer_t 9 , -1, 0, __literal191_bufferBytes
__literal192_buffer Buffer_t 5 , -1, 0, __literal192_bufferBytes
__literal193_buffer Buffer_t 33 , -1, 0, __literal193_bufferBytes
__literal194_buffer Buffer_t 12 , -1, 0, __literal194_bufferBytes
__literal195_buffer Buffer_t 11 , -1, 0, __literal195_bufferBytes
__literal196_buffer Buffer_t 2 , -1, 0, __literal196_bufferBytes
__literal197_buffer Buffer_t 13 , -1, 0, __literal197_bufferBytes
__literal198_buffer Buffer_t 12 , -1, 0, __literal198_bufferBytes
__literal199_buffer Buffer_t 22 , -1, 0, __literal199_bufferBytes
__literal200_buffer Buffer_t 6 , -1, 0, __literal200_bufferBytes
__literal201_buffer Buffer_t 20 , -1, 0, __literal201_bufferBytes
__literal202_buffer Buffer_t 11 , -1, 0, __literal202_bufferBytes
__literal203_buffer Buffer_t 11 , -1, 0, __literal203_bufferBytes
__literal204_buffer Buffer_t 20 , -1, 0, __literal204_bufferBytes
__literal205_buffer Buffer_t 18 , -1, 0, __literal205_bufferBytes
__literal206_buffer Buffer_t 13 , -1, 0, __literal206_bufferBytes
__literal207_buffer Buffer_t 17 , -1, 0, __literal207_bufferBytes
__literal208_buffer Buffer_t 44 , -1, 0, __literal208_bufferBytes
__literal209_buffer Buffer_t 38 , -1, 0, __literal209_bufferBytes
__literal210_buffer Buffer_t 33 , -1, 0, __literal210_bufferBytes
__literal211_buffer Buffer_t 10 , -1, 0, __literal211_bufferBytes
__literal212_buffer Buffer_t 8 , -1, 0, __literal212_bufferBytes
__literal213_buffer Buffer_t 5 , -1, 0, __literal213_bufferBytes
__literal214_buffer Buffer_t 18 , -1, 0, __literal214_bufferBytes
__literal215_buffer Buffer_t 5 , -1, 0, __literal215_bufferBytes
__literal216_buffer Buffer_t 18 , -1, 0, __literal216_bufferBytes
__literal217_buffer Buffer_t 16 , -1, 0, __literal217_bufferBytes
__literal218_buffer Buffer_t 43 , -1, 0, __literal218_bufferBytes
__literal219_buffer Buffer_t 7 , -1, 0, __literal219_bufferBytes
__literal220_buffer Buffer_t 17 , -1, 0, __literal220_bufferBytes
__literal221_buffer Buffer_t 5 , -1, 0, __literal221_bufferBytes
__literal222_buffer Buffer_t 24 , -1, 0, __literal222_bufferBytes
__literal223_buffer Buffer_t 2 , -1, 0, __literal223_bufferBytes
__literal224_buffer Buffer_t 11 , -1, 0, __literal224_bufferBytes
__literal225_buffer Buffer_t 7 , -1, 0, __literal225_bufferBytes
__literal226_buffer Buffer_t 15 , -1, 0, __literal226_bufferBytes
__literal227_buffer Buffer_t 14 , -1, 0, __literal227_bufferBytes
__literal228_buffer Buffer_t 4 , -1, 0, __literal228_bufferBytes
__literal229_buffer Buffer_t 7 , -1, 0, __literal229_bufferBytes
__literal230_buffer Buffer_t 25 , -1, 0, __literal230_bufferBytes
__literal231_buffer Buffer_t 4 , -1, 0, __literal231_bufferBytes
__literal232_buffer Buffer_t 19 , -1, 0, __literal232_bufferBytes
__literal233_buffer Buffer_t 12 , -1, 0, __literal233_bufferBytes
__literal234_buffer Buffer_t 16 , -1, 0, __literal234_bufferBytes
__literal235_buffer Buffer_t 7 , -1, 0, __literal235_bufferBytes
__literal236_buffer Buffer_t 19 , -1, 0, __literal236_bufferBytes
__literal237_buffer Buffer_t 5 , -1, 0, __literal237_bufferBytes
__literal238_buffer Buffer_t 24 , -1, 0, __literal238_bufferBytes
__literal239_buffer Buffer_t 12 , -1, 0, __literal239_bufferBytes
__literal240_buffer Buffer_t 38 , -1, 0, __literal240_bufferBytes
__literal241_buffer Buffer_t 7 , -1, 0, __literal241_bufferBytes
__literal242_buffer Buffer_t 9 , -1, 0, __literal242_bufferBytes
__literal243_buffer Buffer_t 3 , -1, 0, __literal243_bufferBytes
__literal244_buffer Buffer_t 2 , -1, 0, __literal244_bufferBytes
__literal245_buffer Buffer_t 2 , -1, 0, __literal245_bufferBytes
__literal246_buffer Buffer_t 10 , -1, 0, __literal246_bufferBytes
__literal247_buffer Buffer_t 11 , -1, 0, __literal247_bufferBytes
__literal248_buffer Buffer_t 13 , -1, 0, __literal248_bufferBytes
__literal249_buffer Buffer_t 19 , -1, 0, __literal249_bufferBytes
__literal250_buffer Buffer_t 31 , -1, 0, __literal250_bufferBytes
__literal251_buffer Buffer_t 7 , -1, 0, __literal251_bufferBytes
__literal252_buffer Buffer_t 11 , -1, 0, __literal252_bufferBytes
__literal253_buffer Buffer_t 5 , -1, 0, __literal253_bufferBytes
__literal254_buffer Buffer_t 5 , -1, 0, __literal254_bufferBytes
__literal255_buffer Buffer_t 52 , -1, 0, __literal255_bufferBytes
__literal256_buffer Buffer_t 9 , -1, 0, __literal256_bufferBytes
__literal257_buffer Buffer_t 40 , -1, 0, __literal257_bufferBytes
__literal258_buffer Buffer_t 15 , -1, 0, __literal258_bufferBytes
__literal259_buffer Buffer_t 6 , -1, 0, __literal259_bufferBytes
__literal260_buffer Buffer_t 8 , -1, 0, __literal260_bufferBytes
__literal261_buffer Buffer_t 12 , -1, 0, __literal261_bufferBytes
__literal262_buffer Buffer_t 34 , -1, 0, __literal262_bufferBytes
__literal263_buffer Buffer_t 3 , -1, 0, __literal263_bufferBytes
__literal264_buffer Buffer_t 56 , -1, 0, __literal264_bufferBytes
__literal265_buffer Buffer_t 17 , -1, 0, __literal265_bufferBytes
__literal266_buffer Buffer_t 9 , -1, 0, __literal266_bufferBytes
__literal267_buffer Buffer_t 16 , -1, 0, __literal267_bufferBytes
__literal268_buffer Buffer_t 22 , -1, 0, __literal268_bufferBytes
__literal269_buffer Buffer_t 29 , -1, 0, __literal269_bufferBytes
__literal270_buffer Buffer_t 16 , -1, 0, __literal270_bufferBytes
__literal271_buffer Buffer_t 17 , -1, 0, __literal271_bufferBytes
__literal272_buffer Buffer_t 18 , -1, 0, __literal272_bufferBytes
__literal273_buffer Buffer_t 10 , -1, 0, __literal273_bufferBytes
__literal274_buffer Buffer_t 13 , -1, 0, __literal274_bufferBytes
__literal275_buffer Buffer_t 14 , -1, 0, __literal275_bufferBytes
__literal276_buffer Buffer_t 14 , -1, 0, __literal276_bufferBytes
__literal277_buffer Buffer_t 14 , -1, 0, __literal277_bufferBytes
__literal278_buffer Buffer_t 16 , -1, 0, __literal278_bufferBytes
__literal279_buffer Buffer_t 16 , -1, 0, __literal279_bufferBytes
__literal280_buffer Buffer_t 14 , -1, 0, __literal280_bufferBytes
__literal281_buffer Buffer_t 15 , -1, 0, __literal281_bufferBytes
__literal282_buffer Buffer_t 15 , -1, 0, __literal282_bufferBytes
__literal283_buffer Buffer_t 15 , -1, 0, __literal283_bufferBytes
__literal284_buffer Buffer_t 13 , -1, 0, __literal284_bufferBytes
__literal285_buffer Buffer_t 14 , -1, 0, __literal285_bufferBytes
__literal286_buffer Buffer_t 14 , -1, 0, __literal286_bufferBytes
__literal287_buffer Buffer_t 15 , -1, 0, __literal287_bufferBytes
__literal288_buffer Buffer_t 15 , -1, 0, __literal288_bufferBytes
__literal289_buffer Buffer_t 15 , -1, 0, __literal289_bufferBytes
__literal290_buffer Buffer_t 17 , -1, 0, __literal290_bufferBytes
__literal291_buffer Buffer_t 9 , -1, 0, __literal291_bufferBytes
__literal292_buffer Buffer_t 4 , -1, 0, __literal292_bufferBytes
__literal293_buffer Buffer_t 4 , -1, 0, __literal293_bufferBytes
__literal294_buffer Buffer_t 13 , -1, 0, __literal294_bufferBytes
__literal295_buffer Buffer_t 11 , -1, 0, __literal295_bufferBytes
__literal296_buffer Buffer_t 7 , -1, 0, __literal296_bufferBytes
__literal297_buffer Buffer_t 6 , -1, 0, __literal297_bufferBytes
__literal298_buffer Buffer_t 7 , -1, 0, __literal298_bufferBytes
__literal299_buffer Buffer_t 7 , -1, 0, __literal299_bufferBytes
__literal300_buffer Buffer_t 5 , -1, 0, __literal300_bufferBytes
__literal301_buffer Buffer_t 4 , -1, 0, __literal301_bufferBytes
__literal302_buffer Buffer_t 4 , -1, 0, __literal302_bufferBytes
__literal303_buffer Buffer_t 4 , -1, 0, __literal303_bufferBytes
__literal304_buffer Buffer_t 7 , -1, 0, __literal304_bufferBytes
__literal305_buffer Buffer_t 24 , -1, 0, __literal305_bufferBytes
__literal306_buffer Buffer_t 15 , -1, 0, __literal306_bufferBytes
__literal307_buffer Buffer_t 30 , -1, 0, __literal307_bufferBytes
__literal308_buffer Buffer_t 20 , -1, 0, __literal308_bufferBytes
__literal309_buffer Buffer_t 8 , -1, 0, __literal309_bufferBytes
__literal310_buffer Buffer_t 10 , -1, 0, __literal310_bufferBytes
__literal311_buffer Buffer_t 28 , -1, 0, __literal311_bufferBytes
__literal312_buffer Buffer_t 20 , -1, 0, __literal312_bufferBytes
__literal313_buffer Buffer_t 6 , -1, 0, __literal313_bufferBytes
__literal314_buffer Buffer_t 9 , -1, 0, __literal314_bufferBytes
__literal315_buffer Buffer_t 11 , -1, 0, __literal315_bufferBytes
__literal316_buffer Buffer_t 18 , -1, 0, __literal316_bufferBytes
__literal317_buffer Buffer_t 8 , -1, 0, __literal317_bufferBytes
__literal318_buffer Buffer_t 23 , -1, 0, __literal318_bufferBytes
__literal319_buffer Buffer_t 11 , -1, 0, __literal319_bufferBytes
__literal320_buffer Buffer_t 10 , -1, 0, __literal320_bufferBytes
__literal321_buffer Buffer_t 4 , -1, 0, __literal321_bufferBytes
__literal322_buffer Buffer_t 8 , -1, 0, __literal322_bufferBytes
__literal323_buffer Buffer_t 6 , -1, 0, __literal323_bufferBytes
__literal324_buffer Buffer_t 46 , -1, 0, __literal324_bufferBytes
__literal325_buffer Buffer_t 12 , -1, 0, __literal325_bufferBytes
__literal326_buffer Buffer_t 2 , -1, 0, __literal326_bufferBytes
__literal327_buffer Buffer_t 7 , -1, 0, __literal327_bufferBytes
__literal328_buffer Buffer_t 6 , -1, 0, __literal328_bufferBytes
__literal329_buffer Buffer_t 20 , -1, 0, __literal329_bufferBytes
__literal330_buffer Buffer_t 30 , -1, 0, __literal330_bufferBytes
__literal331_buffer Buffer_t 27 , -1, 0, __literal331_bufferBytes
__literal332_buffer Buffer_t 4 , -1, 0, __literal332_bufferBytes
__literal333_buffer Buffer_t 33 , -1, 0, __literal333_bufferBytes
__literal334_buffer Buffer_t 4 , -1, 0, __literal334_bufferBytes
__literal335_buffer Buffer_t 4 , -1, 0, __literal335_bufferBytes
__literal336_buffer Buffer_t 33 , -1, 0, __literal336_bufferBytes
__literal337_buffer Buffer_t 31 , -1, 0, __literal337_bufferBytes
__literal338_buffer Buffer_t 14 , -1, 0, __literal338_bufferBytes
__literal339_buffer Buffer_t 17 , -1, 0, __literal339_bufferBytes
__literal340_buffer Buffer_t 6 , -1, 0, __literal340_bufferBytes
__literal341_buffer Buffer_t 72 , -1, 0, __literal341_bufferBytes
__literal342_buffer Buffer_t 64 , -1, 0, __literal342_bufferBytes
__literal343_buffer Buffer_t 25 , -1, 0, __literal343_bufferBytes
__literal344_buffer Buffer_t 27 , -1, 0, __literal344_bufferBytes
__literal345_buffer Buffer_t 25 , -1, 0, __literal345_bufferBytes
__literal346_buffer Buffer_t 25 , -1, 0, __literal346_bufferBytes
__literal347_buffer Buffer_t 28 , -1, 0, __literal347_bufferBytes
__literal348_buffer Buffer_t 30 , -1, 0, __literal348_bufferBytes
__literal349_buffer Buffer_t 19 , -1, 0, __literal349_bufferBytes
__literal350_buffer Buffer_t 24 , -1, 0, __literal350_bufferBytes
__literal351_buffer Buffer_t 36 , -1, 0, __literal351_bufferBytes
__literal352_buffer Buffer_t 25 , -1, 0, __literal352_bufferBytes
__literal353_buffer Buffer_t 15 , -1, 0, __literal353_bufferBytes
__literal354_buffer Buffer_t 25 , -1, 0, __literal354_bufferBytes
__literal355_buffer Buffer_t 35 , -1, 0, __literal355_bufferBytes
__literal356_buffer Buffer_t 22 , -1, 0, __literal356_bufferBytes
__literal357_buffer Buffer_t 16 , -1, 0, __literal357_bufferBytes
__literal358_buffer Buffer_t 12 , -1, 0, __literal358_bufferBytes
__literal359_buffer Buffer_t 16 , -1, 0, __literal359_bufferBytes
__literal360_buffer Buffer_t 29 , -1, 0, __literal360_bufferBytes
__literal361_buffer Buffer_t 19 , -1, 0, __literal361_bufferBytes
__literal362_buffer Buffer_t 14 , -1, 0, __literal362_bufferBytes
__literal363_buffer Buffer_t 9 , -1, 0, __literal363_bufferBytes
__literal364_buffer Buffer_t 9 , -1, 0, __literal364_bufferBytes
__literal365_buffer Buffer_t 17 , -1, 0, __literal365_bufferBytes
__literal366_buffer Buffer_t 23 , -1, 0, __literal366_bufferBytes
__literal367_buffer Buffer_t 33 , -1, 0, __literal367_bufferBytes
__literal368_buffer Buffer_t 9 , -1, 0, __literal368_bufferBytes
__literal369_buffer Buffer_t 23 , -1, 0, __literal369_bufferBytes
__literal370_buffer Buffer_t 12 , -1, 0, __literal370_bufferBytes
__literal371_buffer Buffer_t 16 , -1, 0, __literal371_bufferBytes
__literal372_buffer Buffer_t 46 , -1, 0, __literal372_bufferBytes
__literal373_buffer Buffer_t 5 , -1, 0, __literal373_bufferBytes
__literal374_buffer Buffer_t 5 , -1, 0, __literal374_bufferBytes
__literal375_buffer Buffer_t 8 , -1, 0, __literal375_bufferBytes
__literal376_buffer Buffer_t 10 , -1, 0, __literal376_bufferBytes
__literal377_buffer Buffer_t 10 , -1, 0, __literal377_bufferBytes
__literal378_buffer Buffer_t 13 , -1, 0, __literal378_bufferBytes
__literal379_buffer Buffer_t 11 , -1, 0, __literal379_bufferBytes
__literal380_buffer Buffer_t 14 , -1, 0, __literal380_bufferBytes
__literal381_buffer Buffer_t 7 , -1, 0, __literal381_bufferBytes
__literal382_buffer Buffer_t 9 , -1, 0, __literal382_bufferBytes
__literal383_buffer Buffer_t 10 , -1, 0, __literal383_bufferBytes
__literal384_buffer Buffer_t 9 , -1, 0, __literal384_bufferBytes
__literal385_buffer Buffer_t 10 , -1, 0, __literal385_bufferBytes
__literal386_buffer Buffer_t 13 , -1, 0, __literal386_bufferBytes
__literal387_buffer Buffer_t 11 , -1, 0, __literal387_bufferBytes
__literal388_buffer Buffer_t 12 , -1, 0, __literal388_bufferBytes
__literal389_buffer Buffer_t 15 , -1, 0, __literal389_bufferBytes
__literal390_buffer Buffer_t 9 , -1, 0, __literal390_bufferBytes
__literal391_buffer Buffer_t 12 , -1, 0, __literal391_bufferBytes
__literal392_buffer Buffer_t 15 , -1, 0, __literal392_bufferBytes
__literal393_buffer Buffer_t 18 , -1, 0, __literal393_bufferBytes
__literal394_buffer Buffer_t 10 , -1, 0, __literal394_bufferBytes
__literal395_buffer Buffer_t 10 , -1, 0, __literal395_bufferBytes
__literal396_buffer Buffer_t 8 , -1, 0, __literal396_bufferBytes
__literal397_buffer Buffer_t 10 , -1, 0, __literal397_bufferBytes
__literal398_buffer Buffer_t 9 , -1, 0, __literal398_bufferBytes
__literal399_buffer Buffer_t 30 , -1, 0, __literal399_bufferBytes
__literal400_buffer Buffer_t 26 , -1, 0, __literal400_bufferBytes
__literal401_buffer Buffer_t 18 , -1, 0, __literal401_bufferBytes
__literal402_buffer Buffer_t 20 , -1, 0, __literal402_bufferBytes
__literal403_buffer Buffer_t 28 , -1, 0, __literal403_bufferBytes
__literal404_buffer Buffer_t 20 , -1, 0, __literal404_bufferBytes
__literal405_buffer Buffer_t 13 , -1, 0, __literal405_bufferBytes
__literal406_buffer Buffer_t 16 , -1, 0, __literal406_bufferBytes
__literal407_buffer Buffer_t 16 , -1, 0, __literal407_bufferBytes
__literal408_buffer Buffer_t 27 , -1, 0, __literal408_bufferBytes
__literal409_buffer Buffer_t 18 , -1, 0, __literal409_bufferBytes
__literal410_buffer Buffer_t 15 , -1, 0, __literal410_bufferBytes
__literal411_buffer Buffer_t 19 , -1, 0, __literal411_bufferBytes
__literal412_buffer Buffer_t 12 , -1, 0, __literal412_bufferBytes
__literal413_buffer Buffer_t 18 , -1, 0, __literal413_bufferBytes
__literal414_buffer Buffer_t 14 , -1, 0, __literal414_bufferBytes
__literal415_buffer Buffer_t 7 , -1, 0, __literal415_bufferBytes
__literal416_buffer Buffer_t 12 , -1, 0, __literal416_bufferBytes
__literal417_buffer Buffer_t 2 , -1, 0, __literal417_bufferBytes
__literal418_buffer Buffer_t 3 , -1, 0, __literal418_bufferBytes
__literal419_buffer Buffer_t 3 , -1, 0, __literal419_bufferBytes
__literal420_buffer Buffer_t 2 , -1, 0, __literal420_bufferBytes
__literal421_buffer Buffer_t 3 , -1, 0, __literal421_bufferBytes
__literal422_buffer Buffer_t 6 , -1, 0, __literal422_bufferBytes
__literal423_buffer Buffer_t 7 , -1, 0, __literal423_bufferBytes
__literal424_buffer Buffer_t 7 , -1, 0, __literal424_bufferBytes
__literal425_buffer Buffer_t 9 , -1, 0, __literal425_bufferBytes
__literal426_buffer Buffer_t 8 , -1, 0, __literal426_bufferBytes
__literal427_buffer Buffer_t 10 , -1, 0, __literal427_bufferBytes
__literal428_buffer Buffer_t 4 , -1, 0, __literal428_bufferBytes
__literal429_buffer Buffer_t 10 , -1, 0, __literal429_bufferBytes
__literal430_buffer Buffer_t 12 , -1, 0, __literal430_bufferBytes
__literal431_buffer Buffer_t 5 , -1, 0, __literal431_bufferBytes
__literal432_buffer Buffer_t 4 , -1, 0, __literal432_bufferBytes
__literal433_buffer Buffer_t 5 , -1, 0, __literal433_bufferBytes
__literal434_buffer Buffer_t 6 , -1, 0, __literal434_bufferBytes
__literal435_buffer Buffer_t 8 , -1, 0, __literal435_bufferBytes
__literal436_buffer Buffer_t 8 , -1, 0, __literal436_bufferBytes
__literal437_buffer Buffer_t 12 , -1, 0, __literal437_bufferBytes
__literal438_buffer Buffer_t 5 , -1, 0, __literal438_bufferBytes
__literal439_buffer Buffer_t 10 , -1, 0, __literal439_bufferBytes
__literal440_buffer Buffer_t 6 , -1, 0, __literal440_bufferBytes
__literal441_buffer Buffer_t 5 , -1, 0, __literal441_bufferBytes
__literal442_buffer Buffer_t 7 , -1, 0, __literal442_bufferBytes
__literal443_buffer Buffer_t 9 , -1, 0, __literal443_bufferBytes
__literal444_buffer Buffer_t 5 , -1, 0, __literal444_bufferBytes
__literal445_buffer Buffer_t 5 , -1, 0, __literal445_bufferBytes
__literal446_buffer Buffer_t 5 , -1, 0, __literal446_bufferBytes
__literal447_buffer Buffer_t 5 , -1, 0, __literal447_bufferBytes
__literal448_buffer Buffer_t 7 , -1, 0, __literal448_bufferBytes
__literal449_buffer Buffer_t 12 , -1, 0, __literal449_bufferBytes
__literal450_buffer Buffer_t 2 , -1, 0, __literal450_bufferBytes
__literal451_buffer Buffer_t 2 , -1, 0, __literal451_bufferBytes
__literal452_buffer Buffer_t 4 , -1, 0, __literal452_bufferBytes
__literal453_buffer Buffer_t 3 , -1, 0, __literal453_bufferBytes
__literal454_buffer Buffer_t 3 , -1, 0, __literal454_bufferBytes
__literal455_buffer Buffer_t 5 , -1, 0, __literal455_bufferBytes
__literal456_buffer Buffer_t 2 , -1, 0, __literal456_bufferBytes
__literal457_buffer Buffer_t 3 , -1, 0, __literal457_bufferBytes
__literal458_buffer Buffer_t 2 , -1, 0, __literal458_bufferBytes
__literal459_buffer Buffer_t 3 , -1, 0, __literal459_bufferBytes
__literal460_buffer Buffer_t 7 , -1, 0, __literal460_bufferBytes
__literal461_buffer Buffer_t 19 , -1, 0, __literal461_bufferBytes
__literal462_buffer Buffer_t 137 , -1, 0, __literal462_bufferBytes
__literal463_buffer Buffer_t 2 , -1, 0, __literal463_bufferBytes
__literal464_buffer Buffer_t 5 , -1, 0, __literal464_bufferBytes
__literal465_buffer Buffer_t 5 , -1, 0, __literal465_bufferBytes
__literal466_buffer Buffer_t 6 , -1, 0, __literal466_bufferBytes
__literal467_buffer Buffer_t 11 , -1, 0, __literal467_bufferBytes
__literal468_buffer Buffer_t 6 , -1, 0, __literal468_bufferBytes
__literal469_buffer Buffer_t 9 , -1, 0, __literal469_bufferBytes
__literal470_buffer Buffer_t 34 , -1, 0, __literal470_bufferBytes
__literal471_buffer Buffer_t 10 , -1, 0, __literal471_bufferBytes
__literal472_buffer Buffer_t 4 , -1, 0, __literal472_bufferBytes
__literal473_buffer Buffer_t 15 , -1, 0, __literal473_bufferBytes
__literal474_buffer Buffer_t 19 , -1, 0, __literal474_bufferBytes
__literal475_buffer Buffer_t 23 , -1, 0, __literal475_bufferBytes
__literal476_buffer Buffer_t 50 , -1, 0, __literal476_bufferBytes
__literal477_buffer Buffer_t 9 , -1, 0, __literal477_bufferBytes
__literal478_buffer Buffer_t 11 , -1, 0, __literal478_bufferBytes
__literal479_buffer Buffer_t 7 , -1, 0, __literal479_bufferBytes
__literal480_buffer Buffer_t 6 , -1, 0, __literal480_bufferBytes
__literal481_buffer Buffer_t 13 , -1, 0, __literal481_bufferBytes
__literal482_buffer Buffer_t 16 , -1, 0, __literal482_bufferBytes
__literal483_buffer Buffer_t 13 , -1, 0, __literal483_bufferBytes
__literal484_buffer Buffer_t 5 , -1, 0, __literal484_bufferBytes
__literal485_buffer Buffer_t 2 , -1, 0, __literal485_bufferBytes
__literal486_buffer Buffer_t 13 , -1, 0, __literal486_bufferBytes
__literal487_buffer Buffer_t 15 , -1, 0, __literal487_bufferBytes
__literal488_buffer Buffer_t 18 , -1, 0, __literal488_bufferBytes
__literal489_buffer Buffer_t 21 , -1, 0, __literal489_bufferBytes
__literal490_buffer Buffer_t 20 , -1, 0, __literal490_bufferBytes
__literal491_buffer Buffer_t 18 , -1, 0, __literal491_bufferBytes
__literal492_buffer Buffer_t 32 , -1, 0, __literal492_bufferBytes
__literal493_buffer Buffer_t 35 , -1, 0, __literal493_bufferBytes
__literal494_buffer Buffer_t 27 , -1, 0, __literal494_bufferBytes
__literal495_buffer Buffer_t 29 , -1, 0, __literal495_bufferBytes
__literal496_buffer Buffer_t 27 , -1, 0, __literal496_bufferBytes
__literal497_buffer Buffer_t 27 , -1, 0, __literal497_bufferBytes
__literal498_buffer Buffer_t 36 , -1, 0, __literal498_bufferBytes
__literal499_buffer Buffer_t 32 , -1, 0, __literal499_bufferBytes
__literal500_buffer Buffer_t 24 , -1, 0, __literal500_bufferBytes
__literal501_buffer Buffer_t 32 , -1, 0, __literal501_bufferBytes
__literal502_buffer Buffer_t 29 , -1, 0, __literal502_bufferBytes
__literal503_buffer Buffer_t 23 , -1, 0, __literal503_bufferBytes
__literal504_buffer Buffer_t 23 , -1, 0, __literal504_bufferBytes
__literal505_buffer Buffer_t 30 , -1, 0, __literal505_bufferBytes
__literal506_buffer Buffer_t 23 , -1, 0, __literal506_bufferBytes
__literal507_buffer Buffer_t 23 , -1, 0, __literal507_bufferBytes
__literal508_buffer Buffer_t 23 , -1, 0, __literal508_bufferBytes
__literal509_buffer Buffer_t 24 , -1, 0, __literal509_bufferBytes
__literal510_buffer Buffer_t 29 , -1, 0, __literal510_bufferBytes
__literal511_buffer Buffer_t 30 , -1, 0, __literal511_bufferBytes
__literal512_buffer Buffer_t 29 , -1, 0, __literal512_bufferBytes
__literal513_buffer Buffer_t 29 , -1, 0, __literal513_bufferBytes
__literal514_buffer Buffer_t 29 , -1, 0, __literal514_bufferBytes
__literal515_buffer Buffer_t 29 , -1, 0, __literal515_bufferBytes
__literal516_buffer Buffer_t 27 , -1, 0, __literal516_bufferBytes
__literal517_buffer Buffer_t 26 , -1, 0, __literal517_bufferBytes
__literal518_buffer Buffer_t 33 , -1, 0, __literal518_bufferBytes
__literal519_buffer Buffer_t 31 , -1, 0, __literal519_bufferBytes
__literal520_buffer Buffer_t 32 , -1, 0, __literal520_bufferBytes
__literal521_buffer Buffer_t 30 , -1, 0, __literal521_bufferBytes
__literal522_buffer Buffer_t 39 , -1, 0, __literal522_bufferBytes
__literal523_buffer Buffer_t 37 , -1, 0, __literal523_bufferBytes
__literal524_buffer Buffer_t 32 , -1, 0, __literal524_bufferBytes
__literal525_buffer Buffer_t 30 , -1, 0, __literal525_bufferBytes
__literal526_buffer Buffer_t 36 , -1, 0, __literal526_bufferBytes
__literal527_buffer Buffer_t 8 , -1, 0, __literal527_bufferBytes
__literal528_buffer Buffer_t 19 , -1, 0, __literal528_bufferBytes
__literal529_buffer Buffer_t 4 , -1, 0, __literal529_bufferBytes
__literal530_buffer Buffer_t 18 , -1, 0, __literal530_bufferBytes
__literal531_buffer Buffer_t 22 , -1, 0, __literal531_bufferBytes
__literal532_buffer Buffer_t 16 , -1, 0, __literal532_bufferBytes
__literal533_buffer Buffer_t 30 , -1, 0, __literal533_bufferBytes
__literal534_buffer Buffer_t 12 , -1, 0, __literal534_bufferBytes
__literal535_buffer Buffer_t 36 , -1, 0, __literal535_bufferBytes
__literal536_buffer Buffer_t 19 , -1, 0, __literal536_bufferBytes
__literal537_buffer Buffer_t 29 , -1, 0, __literal537_bufferBytes
__literal538_buffer Buffer_t 35 , -1, 0, __literal538_bufferBytes
__literal539_buffer Buffer_t 12 , -1, 0, __literal539_bufferBytes
__literal540_buffer Buffer_t 14 , -1, 0, __literal540_bufferBytes
__literal541_buffer Buffer_t 49 , -1, 0, __literal541_bufferBytes
__literal542_buffer Buffer_t 50 , -1, 0, __literal542_bufferBytes
__literal543_buffer Buffer_t 26 , -1, 0, __literal543_bufferBytes
__literal544_buffer Buffer_t 16 , -1, 0, __literal544_bufferBytes
__literal545_buffer Buffer_t 13 , -1, 0, __literal545_bufferBytes
__literal546_buffer Buffer_t 14 , -1, 0, __literal546_bufferBytes
__literal547_buffer Buffer_t 30 , -1, 0, __literal547_bufferBytes
__literal548_buffer Buffer_t 8 , -1, 0, __literal548_bufferBytes
__literal549_buffer Buffer_t 31 , -1, 0, __literal549_bufferBytes
__literal550_buffer Buffer_t 39 , -1, 0, __literal550_bufferBytes
__literal551_buffer Buffer_t 38 , -1, 0, __literal551_bufferBytes
__literal552_buffer Buffer_t 34 , -1, 0, __literal552_bufferBytes
__literal553_buffer Buffer_t 36 , -1, 0, __literal553_bufferBytes
__literal554_buffer Buffer_t 33 , -1, 0, __literal554_bufferBytes
__literal555_buffer Buffer_t 23 , -1, 0, __literal555_bufferBytes
__literal556_buffer Buffer_t 15 , -1, 0, __literal556_bufferBytes
__literal557_buffer Buffer_t 23 , -1, 0, __literal557_bufferBytes
__literal558_buffer Buffer_t 6 , -1, 0, __literal558_bufferBytes
__literal559_buffer Buffer_t 22 , -1, 0, __literal559_bufferBytes
__literal560_buffer Buffer_t 31 , -1, 0, __literal560_bufferBytes
__literal561_buffer Buffer_t 38 , -1, 0, __literal561_bufferBytes
__literal562_buffer Buffer_t 8 , -1, 0, __literal562_bufferBytes
__literal563_buffer Buffer_t 16 , -1, 0, __literal563_bufferBytes
__literal564_buffer Buffer_t 25 , -1, 0, __literal564_bufferBytes
__literal565_buffer Buffer_t 4 , -1, 0, __literal565_bufferBytes
__literal566_buffer Buffer_t 8 , -1, 0, __literal566_bufferBytes
__literal567_buffer Buffer_t 30 , -1, 0, __literal567_bufferBytes
__literal568_buffer Buffer_t 4 , -1, 0, __literal568_bufferBytes
__literal569_buffer Buffer_t 48 , -1, 0, __literal569_bufferBytes
__literal570_buffer Buffer_t 22 , -1, 0, __literal570_bufferBytes
__literal571_buffer Buffer_t 5 , -1, 0, __literal571_bufferBytes
__literal572_buffer Buffer_t 5 , -1, 0, __literal572_bufferBytes
__literal573_buffer Buffer_t 22 , -1, 0, __literal573_bufferBytes
__literal574_buffer Buffer_t 29 , -1, 0, __literal574_bufferBytes
__literal575_buffer Buffer_t 13 , -1, 0, __literal575_bufferBytes
__literal576_buffer Buffer_t 17 , -1, 0, __literal576_bufferBytes
__literal577_buffer Buffer_t 11 , -1, 0, __literal577_bufferBytes
__literal578_buffer Buffer_t 6 , -1, 0, __literal578_bufferBytes
__literal579_buffer Buffer_t 13 , -1, 0, __literal579_bufferBytes
__literal580_buffer Buffer_t 21 , -1, 0, __literal580_bufferBytes
__literal581_buffer Buffer_t 19 , -1, 0, __literal581_bufferBytes
__literal582_buffer Buffer_t 14 , -1, 0, __literal582_bufferBytes
__literal583_buffer Buffer_t 8 , -1, 0, __literal583_bufferBytes
__literal584_buffer Buffer_t 4 , -1, 0, __literal584_bufferBytes
__literal585_buffer Buffer_t 13 , -1, 0, __literal585_bufferBytes
__literal586_buffer Buffer_t 5 , -1, 0, __literal586_bufferBytes
__literal587_buffer Buffer_t 5 , -1, 0, __literal587_bufferBytes
__literal588_buffer Buffer_t 11 , -1, 0, __literal588_bufferBytes
__literal589_buffer Buffer_t 5 , -1, 0, __literal589_bufferBytes
__literal590_buffer Buffer_t 4 , -1, 0, __literal590_bufferBytes
__literal591_buffer Buffer_t 4 , -1, 0, __literal591_bufferBytes
__literal592_buffer Buffer_t 4 , -1, 0, __literal592_bufferBytes
__literal593_buffer Buffer_t 12 , -1, 0, __literal593_bufferBytes
__literal594_buffer Buffer_t 4 , -1, 0, __literal594_bufferBytes
__literal595_buffer Buffer_t 4 , -1, 0, __literal595_bufferBytes
__literal596_buffer Buffer_t 4 , -1, 0, __literal596_bufferBytes
__literal597_buffer Buffer_t 5 , -1, 0, __literal597_bufferBytes
__literal598_buffer Buffer_t 13 , -1, 0, __literal598_bufferBytes
__literal599_buffer Buffer_t 11 , -1, 0, __literal599_bufferBytes
__literal600_buffer Buffer_t 11 , -1, 0, __literal600_bufferBytes
__literal601_buffer Buffer_t 22 , -1, 0, __literal601_bufferBytes
__literal602_buffer Buffer_t 13 , -1, 0, __literal602_bufferBytes
__literal603_buffer Buffer_t 12 , -1, 0, __literal603_bufferBytes
__literal604_buffer Buffer_t 28 , -1, 0, __literal604_bufferBytes
__literal605_buffer Buffer_t 22 , -1, 0, __literal605_bufferBytes
__literal606_buffer Buffer_t 24 , -1, 0, __literal606_bufferBytes
__literal607_buffer Buffer_t 23 , -1, 0, __literal607_bufferBytes
__literal608_buffer Buffer_t 7 , -1, 0, __literal608_bufferBytes
__literal609_buffer Buffer_t 7 , -1, 0, __literal609_bufferBytes
__literal610_buffer Buffer_t 7 , -1, 0, __literal610_bufferBytes
__literal611_buffer Buffer_t 7 , -1, 0, __literal611_bufferBytes
__literal612_buffer Buffer_t 7 , -1, 0, __literal612_bufferBytes
__literal613_buffer Buffer_t 7 , -1, 0, __literal613_bufferBytes
__literal614_buffer Buffer_t 8 , -1, 0, __literal614_bufferBytes
__literal615_buffer Buffer_t 27 , -1, 0, __literal615_bufferBytes
__literal616_buffer Buffer_t 18 , -1, 0, __literal616_bufferBytes
__literal617_buffer Buffer_t 11 , -1, 0, __literal617_bufferBytes
__literal618_buffer Buffer_t 9 , -1, 0, __literal618_bufferBytes
__literal619_buffer Buffer_t 12 , -1, 0, __literal619_bufferBytes
__literal620_buffer Buffer_t 10 , -1, 0, __literal620_bufferBytes
__literal621_buffer Buffer_t 54 , -1, 0, __literal621_bufferBytes
__literal622_buffer Buffer_t 14 , -1, 0, __literal622_bufferBytes
__literal623_buffer Buffer_t 13 , -1, 0, __literal623_bufferBytes
__literal624_buffer Buffer_t 12 , -1, 0, __literal624_bufferBytes
__literal625_buffer Buffer_t 10 , -1, 0, __literal625_bufferBytes
__literal626_buffer Buffer_t 30 , -1, 0, __literal626_bufferBytes
__literal627_buffer Buffer_t 17 , -1, 0, __literal627_bufferBytes
__literal628_buffer Buffer_t 9 , -1, 0, __literal628_bufferBytes
__literal629_buffer Buffer_t 10 , -1, 0, __literal629_bufferBytes
__literal630_buffer Buffer_t 11 , -1, 0, __literal630_bufferBytes
__literal631_buffer Buffer_t 25 , -1, 0, __literal631_bufferBytes
__literal632_buffer Buffer_t 15 , -1, 0, __literal632_bufferBytes
__literal633_buffer Buffer_t 13 , -1, 0, __literal633_bufferBytes
__literal634_buffer Buffer_t 10 , -1, 0, __literal634_bufferBytes
__literal635_buffer Buffer_t 10 , -1, 0, __literal635_bufferBytes
__literal636_buffer Buffer_t 12 , -1, 0, __literal636_bufferBytes
__literal637_buffer Buffer_t 30 , -1, 0, __literal637_bufferBytes
__literal638_buffer Buffer_t 7 , -1, 0, __literal638_bufferBytes
__literal639_buffer Buffer_t 17 , -1, 0, __literal639_bufferBytes
__literal640_buffer Buffer_t 51 , -1, 0, __literal640_bufferBytes
__literal641_buffer Buffer_t 6 , -1, 0, __literal641_bufferBytes
__literal642_buffer Buffer_t 13 , -1, 0, __literal642_bufferBytes
__literal643_buffer Buffer_t 6 , -1, 0, __literal643_bufferBytes
__literal644_buffer Buffer_t 4 , -1, 0, __literal644_bufferBytes
__literal645_buffer Buffer_t 2 , -1, 0, __literal645_bufferBytes
__literal646_buffer Buffer_t 2 , -1, 0, __literal646_bufferBytes
__literal647_buffer Buffer_t 10 , -1, 0, __literal647_bufferBytes
__literal648_buffer Buffer_t 11 , -1, 0, __literal648_bufferBytes
__literal649_buffer Buffer_t 5 , -1, 0, __literal649_bufferBytes
__literal650_buffer Buffer_t 10 , -1, 0, __literal650_bufferBytes
__literal651_buffer Buffer_t 9 , -1, 0, __literal651_bufferBytes
__literal652_buffer Buffer_t 15 , -1, 0, __literal652_bufferBytes
__literal653_buffer Buffer_t 2 , -1, 0, __literal653_bufferBytes
__literal654_buffer Buffer_t 4 , -1, 0, __literal654_bufferBytes
__literal655_buffer Buffer_t 18 , -1, 0, __literal655_bufferBytes
__literal656_buffer Buffer_t 7 , -1, 0, __literal656_bufferBytes
__literal657_buffer Buffer_t 4 , -1, 0, __literal657_bufferBytes
__literal658_buffer Buffer_t 7 , -1, 0, __literal658_bufferBytes
__literal659_buffer Buffer_t 6 , -1, 0, __literal659_bufferBytes
__literal660_buffer Buffer_t 7 , -1, 0, __literal660_bufferBytes
__literal661_buffer Buffer_t 8 , -1, 0, __literal661_bufferBytes
__literal662_buffer Buffer_t 4 , -1, 0, __literal662_bufferBytes
__literal663_buffer Buffer_t 4 , -1, 0, __literal663_bufferBytes
__literal664_buffer Buffer_t 3 , -1, 0, __literal664_bufferBytes
__literal665_buffer Buffer_t 13 , -1, 0, __literal665_bufferBytes
__literal666_buffer Buffer_t 13 , -1, 0, __literal666_bufferBytes
__literal667_buffer Buffer_t 26 , -1, 0, __literal667_bufferBytes
__literal668_buffer Buffer_t 14 , -1, 0, __literal668_bufferBytes
__literal669_buffer Buffer_t 29 , -1, 0, __literal669_bufferBytes
__literal670_buffer Buffer_t 3 , -1, 0, __literal670_bufferBytes
__literal671_buffer Buffer_t 4 , -1, 0, __literal671_bufferBytes
__literal672_buffer Buffer_t 30 , -1, 0, __literal672_bufferBytes
__literal673_buffer Buffer_t 29 , -1, 0, __literal673_bufferBytes
__literal674_buffer Buffer_t 29 , -1, 0, __literal674_bufferBytes
__literal675_buffer Buffer_t 8 , -1, 0, __literal675_bufferBytes
__literal676_buffer Buffer_t 28 , -1, 0, __literal676_bufferBytes
__literal677_buffer Buffer_t 2 , -1, 0, __literal677_bufferBytes
__literal678_buffer Buffer_t 2 , -1, 0, __literal678_bufferBytes
__literal679_buffer Buffer_t 30 , -1, 0, __literal679_bufferBytes
__literal680_buffer Buffer_t 39 , -1, 0, __literal680_bufferBytes
__literal681_buffer Buffer_t 13 , -1, 0, __literal681_bufferBytes
__literal682_buffer Buffer_t 9 , -1, 0, __literal682_bufferBytes
__literal683_buffer Buffer_t 9 , -1, 0, __literal683_bufferBytes
__literal684_buffer Buffer_t 9 , -1, 0, __literal684_bufferBytes
__literal685_buffer Buffer_t 13 , -1, 0, __literal685_bufferBytes
__literal686_buffer Buffer_t 5 , -1, 0, __literal686_bufferBytes
__literal687_buffer Buffer_t 4 , -1, 0, __literal687_bufferBytes
__literal688_buffer Buffer_t 3 , -1, 0, __literal688_bufferBytes
__literal689_buffer Buffer_t 16 , -1, 0, __literal689_bufferBytes
__literal690_buffer Buffer_t 3 , -1, 0, __literal690_bufferBytes
__literal691_buffer Buffer_t 3 , -1, 0, __literal691_bufferBytes
__literal692_buffer Buffer_t 3 , -1, 0, __literal692_bufferBytes
__literal693_buffer Buffer_t 13 , -1, 0, __literal693_bufferBytes
__literal694_buffer Buffer_t 14 , -1, 0, __literal694_bufferBytes
__literal695_buffer Buffer_t 22 , -1, 0, __literal695_bufferBytes
__literal696_buffer Buffer_t 11 , -1, 0, __literal696_bufferBytes
__literal697_buffer Buffer_t 14 , -1, 0, __literal697_bufferBytes
__literal698_buffer Buffer_t 5 , -1, 0, __literal698_bufferBytes
__literal699_buffer Buffer_t 19 , -1, 0, __literal699_bufferBytes
__literal700_buffer Buffer_t 19 , -1, 0, __literal700_bufferBytes
__literal701_buffer Buffer_t 6 , -1, 0, __literal701_bufferBytes
__literal702_buffer Buffer_t 7 , -1, 0, __literal702_bufferBytes
__literal703_buffer Buffer_t 19 , -1, 0, __literal703_bufferBytes
__literal704_buffer Buffer_t 19 , -1, 0, __literal704_bufferBytes
__literal705_buffer Buffer_t 15 , -1, 0, __literal705_bufferBytes
__literal706_buffer Buffer_t 17 , -1, 0, __literal706_bufferBytes
__literal707_buffer Buffer_t 17 , -1, 0, __literal707_bufferBytes
__literal708_buffer Buffer_t 3 , -1, 0, __literal708_bufferBytes
__literal709_buffer Buffer_t 7 , -1, 0, __literal709_bufferBytes
__literal710_buffer Buffer_t 19 , -1, 0, __literal710_bufferBytes
__literal711_buffer Buffer_t 19 , -1, 0, __literal711_bufferBytes
__literal712_buffer Buffer_t 4 , -1, 0, __literal712_bufferBytes
__literal713_buffer Buffer_t 14 , -1, 0, __literal713_bufferBytes
__literal714_buffer Buffer_t 3 , -1, 0, __literal714_bufferBytes
__literal715_buffer Buffer_t 19 , -1, 0, __literal715_bufferBytes
__literal716_buffer Buffer_t 19 , -1, 0, __literal716_bufferBytes
__literal717_buffer Buffer_t 24 , -1, 0, __literal717_bufferBytes
__literal718_buffer Buffer_t 18 , -1, 0, __literal718_bufferBytes
__literal719_buffer Buffer_t 21 , -1, 0, __literal719_bufferBytes
__literal720_buffer Buffer_t 81 , -1, 0, __literal720_bufferBytes
__literal721_buffer Buffer_t 47 , -1, 0, __literal721_bufferBytes
__literal722_buffer Buffer_t 41 , -1, 0, __literal722_bufferBytes
__literal723_buffer Buffer_t 31 , -1, 0, __literal723_bufferBytes
__literal724_buffer Buffer_t 22 , -1, 0, __literal724_bufferBytes
__literal725_buffer Buffer_t 2 , -1, 0, __literal725_bufferBytes
__literal726_buffer Buffer_t 6 , -1, 0, __literal726_bufferBytes
__literal727_buffer Buffer_t 13 , -1, 0, __literal727_bufferBytes
__literal728_buffer Buffer_t 12 , -1, 0, __literal728_bufferBytes
__literal729_buffer Buffer_t 23 , -1, 0, __literal729_bufferBytes
__literal730_buffer Buffer_t 11 , -1, 0, __literal730_bufferBytes
__literal731_buffer Buffer_t 12 , -1, 0, __literal731_bufferBytes
__literal732_buffer Buffer_t 11 , -1, 0, __literal732_bufferBytes
__literal733_buffer Buffer_t 13 , -1, 0, __literal733_bufferBytes
__literal734_buffer Buffer_t 14 , -1, 0, __literal734_bufferBytes
__literal735_buffer Buffer_t 7 , -1, 0, __literal735_bufferBytes
__literal736_buffer Buffer_t 13 , -1, 0, __literal736_bufferBytes
__literal737_buffer Buffer_t 13 , -1, 0, __literal737_bufferBytes
__literal738_buffer Buffer_t 31 , -1, 0, __literal738_bufferBytes
__literal739_buffer Buffer_t 11 , -1, 0, __literal739_bufferBytes
__literal740_buffer Buffer_t 8 , -1, 0, __literal740_bufferBytes
__literal741_buffer Buffer_t 15 , -1, 0, __literal741_bufferBytes
__literal742_buffer Buffer_t 29 , -1, 0, __literal742_bufferBytes
__literal743_buffer Buffer_t 14 , -1, 0, __literal743_bufferBytes
__literal744_buffer Buffer_t 31 , -1, 0, __literal744_bufferBytes
__literal745_buffer Buffer_t 10 , -1, 0, __literal745_bufferBytes
__literal746_buffer Buffer_t 10 , -1, 0, __literal746_bufferBytes
__literal747_buffer Buffer_t 10 , -1, 0, __literal747_bufferBytes
__literal748_buffer Buffer_t 19 , -1, 0, __literal748_bufferBytes
__literal749_buffer Buffer_t 10 , -1, 0, __literal749_bufferBytes
__literal750_buffer Buffer_t 19 , -1, 0, __literal750_bufferBytes
__literal751_buffer Buffer_t 10 , -1, 0, __literal751_bufferBytes
__literal752_buffer Buffer_t 20 , -1, 0, __literal752_bufferBytes
__literal753_buffer Buffer_t 7 , -1, 0, __literal753_bufferBytes
__literal754_buffer Buffer_t 10 , -1, 0, __literal754_bufferBytes
__literal755_buffer Buffer_t 26 , -1, 0, __literal755_bufferBytes
__literal756_buffer Buffer_t 26 , -1, 0, __literal756_bufferBytes
__literal757_buffer Buffer_t 23 , -1, 0, __literal757_bufferBytes
__literal758_buffer Buffer_t 20 , -1, 0, __literal758_bufferBytes
__literal759_buffer Buffer_t 11 , -1, 0, __literal759_bufferBytes
__literal760_buffer Buffer_t 20 , -1, 0, __literal760_bufferBytes
__literal761_buffer Buffer_t 20 , -1, 0, __literal761_bufferBytes
__literal762_buffer Buffer_t 6 , -1, 0, __literal762_bufferBytes
__literal763_buffer Buffer_t 11 , -1, 0, __literal763_bufferBytes
__literal764_buffer Buffer_t 15 , -1, 0, __literal764_bufferBytes
__literal765_buffer Buffer_t 13 , -1, 0, __literal765_bufferBytes
__literal766_buffer Buffer_t 2 , -1, 0, __literal766_bufferBytes
__literal767_buffer Buffer_t 13 , -1, 0, __literal767_bufferBytes
__literal768_buffer Buffer_t 3 , -1, 0, __literal768_bufferBytes
__literal769_buffer Buffer_t 13 , -1, 0, __literal769_bufferBytes
__literal770_buffer Buffer_t 13 , -1, 0, __literal770_bufferBytes
__literal771_buffer Buffer_t 13 , -1, 0, __literal771_bufferBytes
__literal772_buffer Buffer_t 2 , -1, 0, __literal772_bufferBytes
__literal773_buffer Buffer_t 13 , -1, 0, __literal773_bufferBytes
__literal774_buffer Buffer_t 10 , -1, 0, __literal774_bufferBytes
__literal775_buffer Buffer_t 10 , -1, 0, __literal775_bufferBytes
__literal776_buffer Buffer_t 10 , -1, 0, __literal776_bufferBytes
__literal777_buffer Buffer_t 19 , -1, 0, __literal777_bufferBytes
__literal778_buffer Buffer_t 10 , -1, 0, __literal778_bufferBytes
__literal779_buffer Buffer_t 19 , -1, 0, __literal779_bufferBytes
__literal780_buffer Buffer_t 10 , -1, 0, __literal780_bufferBytes
__literal781_buffer Buffer_t 20 , -1, 0, __literal781_bufferBytes
__literal782_buffer Buffer_t 7 , -1, 0, __literal782_bufferBytes
__literal783_buffer Buffer_t 10 , -1, 0, __literal783_bufferBytes
__literal784_buffer Buffer_t 26 , -1, 0, __literal784_bufferBytes
__literal785_buffer Buffer_t 26 , -1, 0, __literal785_bufferBytes
__literal786_buffer Buffer_t 11 , -1, 0, __literal786_bufferBytes
__literal787_buffer Buffer_t 20 , -1, 0, __literal787_bufferBytes
__literal788_buffer Buffer_t 20 , -1, 0, __literal788_bufferBytes
__literal789_buffer Buffer_t 6 , -1, 0, __literal789_bufferBytes
__literal790_buffer Buffer_t 11 , -1, 0, __literal790_bufferBytes
__literal791_buffer Buffer_t 15 , -1, 0, __literal791_bufferBytes
__literal792_buffer Buffer_t 13 , -1, 0, __literal792_bufferBytes
__literal793_buffer Buffer_t 13 , -1, 0, __literal793_bufferBytes
__literal794_buffer Buffer_t 13 , -1, 0, __literal794_bufferBytes
__literal795_buffer Buffer_t 13 , -1, 0, __literal795_bufferBytes
__literal796_buffer Buffer_t 13 , -1, 0, __literal796_bufferBytes
__literal797_buffer Buffer_t 13 , -1, 0, __literal797_bufferBytes
__literal798_buffer Buffer_t 12 , -1, 0, __literal798_bufferBytes
__literal799_buffer Buffer_t 30 , -1, 0, __literal799_bufferBytes
__literal800_buffer Buffer_t 12 , -1, 0, __literal800_bufferBytes
__literal801_buffer Buffer_t 16 , -1, 0, __literal801_bufferBytes
__literal802_buffer Buffer_t 22 , -1, 0, __literal802_bufferBytes
__literal803_buffer Buffer_t 16 , -1, 0, __literal803_bufferBytes
__literal804_buffer Buffer_t 12 , -1, 0, __literal804_bufferBytes
__literal805_buffer Buffer_t 22 , -1, 0, __literal805_bufferBytes
__literal806_buffer Buffer_t 12 , -1, 0, __literal806_bufferBytes
__literal807_buffer Buffer_t 22 , -1, 0, __literal807_bufferBytes
__literal808_buffer Buffer_t 12 , -1, 0, __literal808_bufferBytes
__literal809_buffer Buffer_t 22 , -1, 0, __literal809_bufferBytes
__literal810_buffer Buffer_t 13 , -1, 0, __literal810_bufferBytes
__literal811_buffer Buffer_t 26 , -1, 0, __literal811_bufferBytes
__literal812_buffer Buffer_t 26 , -1, 0, __literal812_bufferBytes
__literal813_buffer Buffer_t 22 , -1, 0, __literal813_bufferBytes
__literal814_buffer Buffer_t 20 , -1, 0, __literal814_bufferBytes
__literal815_buffer Buffer_t 15 , -1, 0, __literal815_bufferBytes
__literal816_buffer Buffer_t 15 , -1, 0, __literal816_bufferBytes
__literal817_buffer Buffer_t 15 , -1, 0, __literal817_bufferBytes
__literal818_buffer Buffer_t 15 , -1, 0, __literal818_bufferBytes
__literal819_buffer Buffer_t 3 , -1, 0, __literal819_bufferBytes
__literal820_buffer Buffer_t 15 , -1, 0, __literal820_bufferBytes
__literal821_buffer Buffer_t 15 , -1, 0, __literal821_bufferBytes
__literal822_buffer Buffer_t 12 , -1, 0, __literal822_bufferBytes
__literal823_buffer Buffer_t 18 , -1, 0, __literal823_bufferBytes
__literal824_buffer Buffer_t 12 , -1, 0, __literal824_bufferBytes
__literal825_buffer Buffer_t 11 , -1, 0, __literal825_bufferBytes
__literal826_buffer Buffer_t 18 , -1, 0, __literal826_bufferBytes
__literal827_buffer Buffer_t 12 , -1, 0, __literal827_bufferBytes
__literal828_buffer Buffer_t 18 , -1, 0, __literal828_bufferBytes
__literal829_buffer Buffer_t 12 , -1, 0, __literal829_bufferBytes
__literal830_buffer Buffer_t 18 , -1, 0, __literal830_bufferBytes
__literal831_buffer Buffer_t 12 , -1, 0, __literal831_bufferBytes
__literal832_buffer Buffer_t 18 , -1, 0, __literal832_bufferBytes
__literal833_buffer Buffer_t 13 , -1, 0, __literal833_bufferBytes
__literal834_buffer Buffer_t 27 , -1, 0, __literal834_bufferBytes
__literal835_buffer Buffer_t 15 , -1, 0, __literal835_bufferBytes
__literal836_buffer Buffer_t 14 , -1, 0, __literal836_bufferBytes
__literal837_buffer Buffer_t 24 , -1, 0, __literal837_bufferBytes
__literal838_buffer Buffer_t 15 , -1, 0, __literal838_bufferBytes
__literal839_buffer Buffer_t 14 , -1, 0, __literal839_bufferBytes
__literal840_buffer Buffer_t 24 , -1, 0, __literal840_bufferBytes
__literal841_buffer Buffer_t 15 , -1, 0, __literal841_bufferBytes
__literal842_buffer Buffer_t 24 , -1, 0, __literal842_bufferBytes
__literal843_buffer Buffer_t 15 , -1, 0, __literal843_bufferBytes
__literal844_buffer Buffer_t 24 , -1, 0, __literal844_bufferBytes
__literal845_buffer Buffer_t 15 , -1, 0, __literal845_bufferBytes
__literal846_buffer Buffer_t 15 , -1, 0, __literal846_bufferBytes
__literal847_buffer Buffer_t 25 , -1, 0, __literal847_bufferBytes
__literal848_buffer Buffer_t 21 , -1, 0, __literal848_bufferBytes
__literal849_buffer Buffer_t 13 , -1, 0, __literal849_bufferBytes
__literal850_buffer Buffer_t 19 , -1, 0, __literal850_bufferBytes
__literal851_buffer Buffer_t 14 , -1, 0, __literal851_bufferBytes
__literal852_buffer Buffer_t 11 , -1, 0, __literal852_bufferBytes
__literal853_buffer Buffer_t 19 , -1, 0, __literal853_bufferBytes
__literal854_buffer Buffer_t 18 , -1, 0, __literal854_bufferBytes
__literal855_buffer Buffer_t 21 , -1, 0, __literal855_bufferBytes
__literal856_buffer Buffer_t 31 , -1, 0, __literal856_bufferBytes
__literal857_buffer Buffer_t 44 , -1, 0, __literal857_bufferBytes
__literal858_buffer Buffer_t 6 , -1, 0, __literal858_bufferBytes
__literal859_buffer Buffer_t 18 , -1, 0, __literal859_bufferBytes
__literal860_buffer Buffer_t 31 , -1, 0, __literal860_bufferBytes
__literal861_buffer Buffer_t 18 , -1, 0, __literal861_bufferBytes
__literal862_buffer Buffer_t 31 , -1, 0, __literal862_bufferBytes
__literal863_buffer Buffer_t 18 , -1, 0, __literal863_bufferBytes
__literal864_buffer Buffer_t 31 , -1, 0, __literal864_bufferBytes
__literal865_buffer Buffer_t 18 , -1, 0, __literal865_bufferBytes
__literal866_buffer Buffer_t 18 , -1, 0, __literal866_bufferBytes
__literal867_buffer Buffer_t 11 , -1, 0, __literal867_bufferBytes
__literal868_buffer Buffer_t 11 , -1, 0, __literal868_bufferBytes
__literal869_buffer Buffer_t 16 , -1, 0, __literal869_bufferBytes
__literal870_buffer Buffer_t 5 , -1, 0, __literal870_bufferBytes
__literal871_buffer Buffer_t 16 , -1, 0, __literal871_bufferBytes
__literal872_buffer Buffer_t 16 , -1, 0, __literal872_bufferBytes
__literal873_buffer Buffer_t 16 , -1, 0, __literal873_bufferBytes
__literal874_buffer Buffer_t 16 , -1, 0, __literal874_bufferBytes
__literal875_buffer Buffer_t 16 , -1, 0, __literal875_bufferBytes
__literal876_buffer Buffer_t 16 , -1, 0, __literal876_bufferBytes
__literal877_buffer Buffer_t 16 , -1, 0, __literal877_bufferBytes
__literal878_buffer Buffer_t 16 , -1, 0, __literal878_bufferBytes
__literal879_buffer Buffer_t 16 , -1, 0, __literal879_bufferBytes
__literal880_buffer Buffer_t 16 , -1, 0, __literal880_bufferBytes
__literal881_buffer Buffer_t 16 , -1, 0, __literal881_bufferBytes
__literal882_buffer Buffer_t 16 , -1, 0, __literal882_bufferBytes
__literal883_buffer Buffer_t 19 , -1, 0, __literal883_bufferBytes
__literal884_buffer Buffer_t 20 , -1, 0, __literal884_bufferBytes
__literal885_buffer Buffer_t 5 , -1, 0, __literal885_bufferBytes
__literal886_buffer Buffer_t 17 , -1, 0, __literal886_bufferBytes
__literal887_buffer Buffer_t 17 , -1, 0, __literal887_bufferBytes
__literal888_buffer Buffer_t 16 , -1, 0, __literal888_bufferBytes
__literal889_buffer Buffer_t 11 , -1, 0, __literal889_bufferBytes
__literal890_buffer Buffer_t 11 , -1, 0, __literal890_bufferBytes
__literal891_buffer Buffer_t 15 , -1, 0, __literal891_bufferBytes
__literal892_buffer Buffer_t 17 , -1, 0, __literal892_bufferBytes
__literal893_buffer Buffer_t 16 , -1, 0, __literal893_bufferBytes
__literal894_buffer Buffer_t 15 , -1, 0, __literal894_bufferBytes
__literal895_buffer Buffer_t 10 , -1, 0, __literal895_bufferBytes
__literal896_buffer Buffer_t 10 , -1, 0, __literal896_bufferBytes
__literal897_buffer Buffer_t 14 , -1, 0, __literal897_bufferBytes
__literal898_buffer Buffer_t 14 , -1, 0, __literal898_bufferBytes
__literal899_buffer Buffer_t 16 , -1, 0, __literal899_bufferBytes
__literal900_buffer Buffer_t 14 , -1, 0, __literal900_bufferBytes
__literal901_buffer Buffer_t 18 , -1, 0, __literal901_bufferBytes
__literal902_buffer Buffer_t 18 , -1, 0, __literal902_bufferBytes
__literal903_buffer Buffer_t 18 , -1, 0, __literal903_bufferBytes
__literal904_buffer Buffer_t 5 , -1, 0, __literal904_bufferBytes
__literal905_buffer Buffer_t 18 , -1, 0, __literal905_bufferBytes
__literal906_buffer Buffer_t 6 , -1, 0, __literal906_bufferBytes
__literal907_buffer Buffer_t 18 , -1, 0, __literal907_bufferBytes
__literal908_buffer Buffer_t 5 , -1, 0, __literal908_bufferBytes
__literal909_buffer Buffer_t 18 , -1, 0, __literal909_bufferBytes
__literal910_buffer Buffer_t 6 , -1, 0, __literal910_bufferBytes
__literal911_buffer Buffer_t 22 , -1, 0, __literal911_bufferBytes
__literal912_buffer Buffer_t 30 , -1, 0, __literal912_bufferBytes
__literal913_buffer Buffer_t 11 , -1, 0, __literal913_bufferBytes
__literal914_buffer Buffer_t 10 , -1, 0, __literal914_bufferBytes
__literal915_buffer Buffer_t 12 , -1, 0, __literal915_bufferBytes
__literal916_buffer Buffer_t 28 , -1, 0, __literal916_bufferBytes
__literal917_buffer Buffer_t 46 , -1, 0, __literal917_bufferBytes
__literal918_buffer Buffer_t 10 , -1, 0, __literal918_bufferBytes
__literal919_buffer Buffer_t 13 , -1, 0, __literal919_bufferBytes
__literal920_buffer Buffer_t 12 , -1, 0, __literal920_bufferBytes
__literal921_buffer Buffer_t 27 , -1, 0, __literal921_bufferBytes
__literal922_buffer Buffer_t 11 , -1, 0, __literal922_bufferBytes
__literal923_buffer Buffer_t 19 , -1, 0, __literal923_bufferBytes
__literal924_buffer Buffer_t 43 , -1, 0, __literal924_bufferBytes
__literal925_buffer Buffer_t 4 , -1, 0, __literal925_bufferBytes
__literal926_buffer Buffer_t 23 , -1, 0, __literal926_bufferBytes
__literal927_buffer Buffer_t 18 , -1, 0, __literal927_bufferBytes
__literal928_buffer Buffer_t 12 , -1, 0, __literal928_bufferBytes
__literal929_buffer Buffer_t 15 , -1, 0, __literal929_bufferBytes
__literal930_buffer Buffer_t 14 , -1, 0, __literal930_bufferBytes
__literal931_buffer Buffer_t 48 , -1, 0, __literal931_bufferBytes
__literal932_buffer Buffer_t 36 , -1, 0, __literal932_bufferBytes
__literal933_buffer Buffer_t 38 , -1, 0, __literal933_bufferBytes
__literal934_buffer Buffer_t 36 , -1, 0, __literal934_bufferBytes
__literal935_buffer Buffer_t 23 , -1, 0, __literal935_bufferBytes
__literal936_buffer Buffer_t 21 , -1, 0, __literal936_bufferBytes
__literal937_buffer Buffer_t 34 , -1, 0, __literal937_bufferBytes
__literal938_buffer Buffer_t 22 , -1, 0, __literal938_bufferBytes
__literal939_buffer Buffer_t 25 , -1, 0, __literal939_bufferBytes
__literal940_buffer Buffer_t 9 , -1, 0, __literal940_bufferBytes
__literal941_buffer Buffer_t 22 , -1, 0, __literal941_bufferBytes
__literal942_buffer Buffer_t 25 , -1, 0, __literal942_bufferBytes
__literal943_buffer Buffer_t 8 , -1, 0, __literal943_bufferBytes
__literal944_buffer Buffer_t 35 , -1, 0, __literal944_bufferBytes
__literal945_buffer Buffer_t 20 , -1, 0, __literal945_bufferBytes
__literal946_buffer Buffer_t 22 , -1, 0, __literal946_bufferBytes
__literal947_buffer Buffer_t 24 , -1, 0, __literal947_bufferBytes
__literal948_buffer Buffer_t 34 , -1, 0, __literal948_bufferBytes
__literal949_buffer Buffer_t 22 , -1, 0, __literal949_bufferBytes
__literal950_buffer Buffer_t 50 , -1, 0, __literal950_bufferBytes
__literal951_buffer Buffer_t 19 , -1, 0, __literal951_bufferBytes
__literal952_buffer Buffer_t 22 , -1, 0, __literal952_bufferBytes
__literal953_buffer Buffer_t 50 , -1, 0, __literal953_bufferBytes
__literal954_buffer Buffer_t 19 , -1, 0, __literal954_bufferBytes
__literal955_buffer Buffer_t 13 , -1, 0, __literal955_bufferBytes
__literal956_buffer Buffer_t 13 , -1, 0, __literal956_bufferBytes
__literal957_buffer Buffer_t 35 , -1, 0, __literal957_bufferBytes
__literal958_buffer Buffer_t 23 , -1, 0, __literal958_bufferBytes
__literal959_buffer Buffer_t 22 , -1, 0, __literal959_bufferBytes
__literal960_buffer Buffer_t 22 , -1, 0, __literal960_bufferBytes
__literal961_buffer Buffer_t 24 , -1, 0, __literal961_bufferBytes
__literal962_buffer Buffer_t 20 , -1, 0, __literal962_bufferBytes
__literal963_buffer Buffer_t 9 , -1, 0, __literal963_bufferBytes
__literal964_buffer Buffer_t 23 , -1, 0, __literal964_bufferBytes
__literal965_buffer Buffer_t 7 , -1, 0, __literal965_bufferBytes
__literal966_buffer Buffer_t 21 , -1, 0, __literal966_bufferBytes
__literal967_buffer Buffer_t 7 , -1, 0, __literal967_bufferBytes
__literal968_buffer Buffer_t 24 , -1, 0, __literal968_bufferBytes
__literal969_buffer Buffer_t 21 , -1, 0, __literal969_bufferBytes
__literal970_buffer Buffer_t 7 , -1, 0, __literal970_bufferBytes
__literal971_buffer Buffer_t 6 , -1, 0, __literal971_bufferBytes
__literal972_buffer Buffer_t 16 , -1, 0, __literal972_bufferBytes
__literal973_buffer Buffer_t 16 , -1, 0, __literal973_bufferBytes
__literal974_buffer Buffer_t 26 , -1, 0, __literal974_bufferBytes
__literal975_buffer Buffer_t 24 , -1, 0, __literal975_bufferBytes
__literal976_buffer Buffer_t 24 , -1, 0, __literal976_bufferBytes
__literal977_buffer Buffer_t 13 , -1, 0, __literal977_bufferBytes
__literal978_buffer Buffer_t 8 , -1, 0, __literal978_bufferBytes
__literal979_buffer Buffer_t 17 , -1, 0, __literal979_bufferBytes
__literal980_buffer Buffer_t 18 , -1, 0, __literal980_bufferBytes
__literal981_buffer Buffer_t 40 , -1, 0, __literal981_bufferBytes
__literal982_buffer Buffer_t 7 , -1, 0, __literal982_bufferBytes
__literal983_buffer Buffer_t 13 , -1, 0, __literal983_bufferBytes
__literal984_buffer Buffer_t 26 , -1, 0, __literal984_bufferBytes
__literal985_buffer Buffer_t 26 , -1, 0, __literal985_bufferBytes
__literal986_buffer Buffer_t 36 , -1, 0, __literal986_bufferBytes
__literal987_buffer Buffer_t 32 , -1, 0, __literal987_bufferBytes
__literal988_buffer Buffer_t 12 , -1, 0, __literal988_bufferBytes
__literal989_buffer Buffer_t 11 , -1, 0, __literal989_bufferBytes
__literal990_buffer Buffer_t 24 , -1, 0, __literal990_bufferBytes
__literal991_buffer Buffer_t 40 , -1, 0, __literal991_bufferBytes
__literal992_buffer Buffer_t 10 , -1, 0, __literal992_bufferBytes
__literal993_buffer Buffer_t 15 , -1, 0, __literal993_bufferBytes
__literal994_buffer Buffer_t 15 , -1, 0, __literal994_bufferBytes
__literal995_buffer Buffer_t 55 , -1, 0, __literal995_bufferBytes
__literal996_buffer Buffer_t 10 , -1, 0, __literal996_bufferBytes
__literal997_buffer Buffer_t 6 , -1, 0, __literal997_bufferBytes
__literal998_buffer Buffer_t 8 , -1, 0, __literal998_bufferBytes
__literal999_buffer Buffer_t 11 , -1, 0, __literal999_bufferBytes
__literal1000_buffer Buffer_t 16 , -1, 0, __literal1000_bufferBytes
__literal1001_buffer Buffer_t 12 , -1, 0, __literal1001_bufferBytes
__literal1002_buffer Buffer_t 5 , -1, 0, __literal1002_bufferBytes
__literal1003_buffer Buffer_t 38 , -1, 0, __literal1003_bufferBytes
__literal1004_buffer Buffer_t 14 , -1, 0, __literal1004_bufferBytes
__literal1005_buffer Buffer_t 30 , -1, 0, __literal1005_bufferBytes
__literal1006_buffer Buffer_t 8 , -1, 0, __literal1006_bufferBytes
__literal1007_buffer Buffer_t 7 , -1, 0, __literal1007_bufferBytes
__literal1008_buffer Buffer_t 60 , -1, 0, __literal1008_bufferBytes
__literal1009_buffer Buffer_t 27 , -1, 0, __literal1009_bufferBytes
__literal1010_buffer Buffer_t 9 , -1, 0, __literal1010_bufferBytes
__literal1011_buffer Buffer_t 9 , -1, 0, __literal1011_bufferBytes
__literal1012_buffer Buffer_t 26 , -1, 0, __literal1012_bufferBytes
__literal1013_buffer Buffer_t 24 , -1, 0, __literal1013_bufferBytes
__literal1014_buffer Buffer_t 20 , -1, 0, __literal1014_bufferBytes
__literal1015_buffer Buffer_t 27 , -1, 0, __literal1015_bufferBytes
__literal1016_buffer Buffer_t 17 , -1, 0, __literal1016_bufferBytes
__literal1017_buffer Buffer_t 18 , -1, 0, __literal1017_bufferBytes
__literal1018_buffer Buffer_t 25 , -1, 0, __literal1018_bufferBytes
__literal1019_buffer Buffer_t 18 , -1, 0, __literal1019_bufferBytes
__literal1020_buffer Buffer_t 33 , -1, 0, __literal1020_bufferBytes
__literal1021_buffer Buffer_t 19 , -1, 0, __literal1021_bufferBytes
__literal1022_buffer Buffer_t 28 , -1, 0, __literal1022_bufferBytes
__literal1023_buffer Buffer_t 17 , -1, 0, __literal1023_bufferBytes
__literal1024_buffer Buffer_t 34 , -1, 0, __literal1024_bufferBytes
__literal1025_buffer Buffer_t 17 , -1, 0, __literal1025_bufferBytes
__literal1026_buffer Buffer_t 26 , -1, 0, __literal1026_bufferBytes
__literal1027_buffer Buffer_t 6 , -1, 0, __literal1027_bufferBytes
__literal1028_buffer Buffer_t 26 , -1, 0, __literal1028_bufferBytes
__literal1029_buffer Buffer_t 18 , -1, 0, __literal1029_bufferBytes
__literal1030_buffer Buffer_t 47 , -1, 0, __literal1030_bufferBytes
__literal1031_buffer Buffer_t 40 , -1, 0, __literal1031_bufferBytes
__literal1032_buffer Buffer_t 25 , -1, 0, __literal1032_bufferBytes
__literal1033_buffer Buffer_t 14 , -1, 0, __literal1033_bufferBytes
__literal1034_buffer Buffer_t 14 , -1, 0, __literal1034_bufferBytes
__literal1035_buffer Buffer_t 19 , -1, 0, __literal1035_bufferBytes
__literal1036_buffer Buffer_t 6 , -1, 0, __literal1036_bufferBytes
__literal1037_buffer Buffer_t 6 , -1, 0, __literal1037_bufferBytes
__literal1038_buffer Buffer_t 31 , -1, 0, __literal1038_bufferBytes
__literal1039_buffer Buffer_t 56 , -1, 0, __literal1039_bufferBytes
__literal1040_buffer Buffer_t 31 , -1, 0, __literal1040_bufferBytes
__literal1041_buffer Buffer_t 12 , -1, 0, __literal1041_bufferBytes
__literal1042_buffer Buffer_t 12 , -1, 0, __literal1042_bufferBytes
__literal1043_buffer Buffer_t 5 , -1, 0, __literal1043_bufferBytes
__literal1044_buffer Buffer_t 7 , -1, 0, __literal1044_bufferBytes
__literal1045_buffer Buffer_t 14 , -1, 0, __literal1045_bufferBytes
__literal1046_buffer Buffer_t 6 , -1, 0, __literal1046_bufferBytes
__literal1047_buffer Buffer_t 10 , -1, 0, __literal1047_bufferBytes
__literal1048_buffer Buffer_t 10 , -1, 0, __literal1048_bufferBytes
__literal1049_buffer Buffer_t 8 , -1, 0, __literal1049_bufferBytes
__literal1050_buffer Buffer_t 24 , -1, 0, __literal1050_bufferBytes
__literal1051_buffer Buffer_t 48 , -1, 0, __literal1051_bufferBytes
__literal1052_buffer Buffer_t 48 , -1, 0, __literal1052_bufferBytes
__literal1053_buffer Buffer_t 30 , -1, 0, __literal1053_bufferBytes
__literal1054_buffer Buffer_t 47 , -1, 0, __literal1054_bufferBytes
__literal1055_buffer Buffer_t 31 , -1, 0, __literal1055_bufferBytes
__literal1056_buffer Buffer_t 13 , -1, 0, __literal1056_bufferBytes
__literal1057_buffer Buffer_t 8 , -1, 0, __literal1057_bufferBytes
__literal1058_buffer Buffer_t 32 , -1, 0, __literal1058_bufferBytes
__literal1059_buffer Buffer_t 4 , -1, 0, __literal1059_bufferBytes
__literal1060_buffer Buffer_t 6 , -1, 0, __literal1060_bufferBytes
__literal1061_buffer Buffer_t 43 , -1, 0, __literal1061_bufferBytes
__literal1062_buffer Buffer_t 16 , -1, 0, __literal1062_bufferBytes
__literal1063_buffer Buffer_t 18 , -1, 0, __literal1063_bufferBytes
__literal1064_buffer Buffer_t 37 , -1, 0, __literal1064_bufferBytes
__literal1065_buffer Buffer_t 5 , -1, 0, __literal1065_bufferBytes
__literal1066_buffer Buffer_t 50 , -1, 0, __literal1066_bufferBytes
__literal1067_buffer Buffer_t 47 , -1, 0, __literal1067_bufferBytes
__literal1068_buffer Buffer_t 43 , -1, 0, __literal1068_bufferBytes
__literal1069_buffer Buffer_t 23 , -1, 0, __literal1069_bufferBytes
__literal1070_buffer Buffer_t 24 , -1, 0, __literal1070_bufferBytes
__literal1071_buffer Buffer_t 7 , -1, 0, __literal1071_bufferBytes
__literal1072_buffer Buffer_t 11 , -1, 0, __literal1072_bufferBytes
__literal1073_buffer Buffer_t 8 , -1, 0, __literal1073_bufferBytes
__literal1074_buffer Buffer_t 19 , -1, 0, __literal1074_bufferBytes
__literal1075_buffer Buffer_t 10 , -1, 0, __literal1075_bufferBytes
__literal1076_buffer Buffer_t 10 , -1, 0, __literal1076_bufferBytes
__literal1077_buffer Buffer_t 10 , -1, 0, __literal1077_bufferBytes
__literal1078_buffer Buffer_t 18 , -1, 0, __literal1078_bufferBytes
__literal1079_buffer Buffer_t 9 , -1, 0, __literal1079_bufferBytes
__literal1080_buffer Buffer_t 9 , -1, 0, __literal1080_bufferBytes
__literal1081_buffer Buffer_t 8 , -1, 0, __literal1081_bufferBytes
__literal1082_buffer Buffer_t 14 , -1, 0, __literal1082_bufferBytes
__literal1083_buffer Buffer_t 45 , -1, 0, __literal1083_bufferBytes
__literal1084_buffer Buffer_t 17 , -1, 0, __literal1084_bufferBytes
__literal1085_buffer Buffer_t 14 , -1, 0, __literal1085_bufferBytes
__literal1086_buffer Buffer_t 14 , -1, 0, __literal1086_bufferBytes
__literal1087_buffer Buffer_t 14 , -1, 0, __literal1087_bufferBytes
__literal1088_buffer Buffer_t 14 , -1, 0, __literal1088_bufferBytes
__literal1089_buffer Buffer_t 12 , -1, 0, __literal1089_bufferBytes
__literal1090_buffer Buffer_t 26 , -1, 0, __literal1090_bufferBytes
__literal1091_buffer Buffer_t 11 , -1, 0, __literal1091_bufferBytes
__literal1092_buffer Buffer_t 9 , -1, 0, __literal1092_bufferBytes
__literal1093_buffer Buffer_t 12 , -1, 0, __literal1093_bufferBytes
__literal1094_buffer Buffer_t 7 , -1, 0, __literal1094_bufferBytes
__literal1095_buffer Buffer_t 8 , -1, 0, __literal1095_bufferBytes
__literal1096_buffer Buffer_t 7 , -1, 0, __literal1096_bufferBytes
__literal1097_buffer Buffer_t 7 , -1, 0, __literal1097_bufferBytes
__literal1098_buffer Buffer_t 7 , -1, 0, __literal1098_bufferBytes
__literal1099_buffer Buffer_t 7 , -1, 0, __literal1099_bufferBytes
__literal1100_buffer Buffer_t 7 , -1, 0, __literal1100_bufferBytes
__literal1101_buffer Buffer_t 12 , -1, 0, __literal1101_bufferBytes
__literal1102_buffer Buffer_t 14 , -1, 0, __literal1102_bufferBytes
__literal1103_buffer Buffer_t 12 , -1, 0, __literal1103_bufferBytes
__literal1104_buffer Buffer_t 12 , -1, 0, __literal1104_bufferBytes
__literal1105_buffer Buffer_t 13 , -1, 0, __literal1105_bufferBytes
__literal1106_buffer Buffer_t 12 , -1, 0, __literal1106_bufferBytes
__literal1107_buffer Buffer_t 13 , -1, 0, __literal1107_bufferBytes
__literal1108_buffer Buffer_t 13 , -1, 0, __literal1108_bufferBytes
__literal1109_buffer Buffer_t 14 , -1, 0, __literal1109_bufferBytes
__literal1110_buffer Buffer_t 13 , -1, 0, __literal1110_bufferBytes
__literal1111_buffer Buffer_t 15 , -1, 0, __literal1111_bufferBytes
__literal1112_buffer Buffer_t 13 , -1, 0, __literal1112_bufferBytes
__literal1113_buffer Buffer_t 5 , -1, 0, __literal1113_bufferBytes
__literal1114_buffer Buffer_t 13 , -1, 0, __literal1114_bufferBytes
__literal1115_buffer Buffer_t 14 , -1, 0, __literal1115_bufferBytes
__literal1116_buffer Buffer_t 6 , -1, 0, __literal1116_bufferBytes
__literal1117_buffer Buffer_t 12 , -1, 0, __literal1117_bufferBytes
__literal1118_buffer Buffer_t 5 , -1, 0, __literal1118_bufferBytes
__literal1119_buffer Buffer_t 10 , -1, 0, __literal1119_bufferBytes
__literal1120_buffer Buffer_t 5 , -1, 0, __literal1120_bufferBytes
__literal1121_buffer Buffer_t 7 , -1, 0, __literal1121_bufferBytes
__literal1122_buffer Buffer_t 4 , -1, 0, __literal1122_bufferBytes
__literal1123_buffer Buffer_t 5 , -1, 0, __literal1123_bufferBytes
__literal1124_buffer Buffer_t 7 , -1, 0, __literal1124_bufferBytes
__literal1125_buffer Buffer_t 15 , -1, 0, __literal1125_bufferBytes
__literal1126_buffer Buffer_t 10 , -1, 0, __literal1126_bufferBytes
__literal1127_buffer Buffer_t 10 , -1, 0, __literal1127_bufferBytes
__literal1128_buffer Buffer_t 10 , -1, 0, __literal1128_bufferBytes
__literal1129_buffer Buffer_t 10 , -1, 0, __literal1129_bufferBytes
__literal1130_buffer Buffer_t 11 , -1, 0, __literal1130_bufferBytes
__literal1131_buffer Buffer_t 13 , -1, 0, __literal1131_bufferBytes
__literal1132_buffer Buffer_t 7 , -1, 0, __literal1132_bufferBytes
__literal1133_buffer Buffer_t 63 , -1, 0, __literal1133_bufferBytes
__literal1134_buffer Buffer_t 12 , -1, 0, __literal1134_bufferBytes
__literal1135_buffer Buffer_t 3 , -1, 0, __literal1135_bufferBytes
__literal1136_buffer Buffer_t 9 , -1, 0, __literal1136_bufferBytes
__literal1137_buffer Buffer_t 42 , -1, 0, __literal1137_bufferBytes
__literal1138_buffer Buffer_t 48 , -1, 0, __literal1138_bufferBytes
__literal1139_buffer Buffer_t 6 , -1, 0, __literal1139_bufferBytes
__literal1140_buffer Buffer_t 4 , -1, 0, __literal1140_bufferBytes
__literal1141_buffer Buffer_t 7 , -1, 0, __literal1141_bufferBytes
__literal1142_buffer Buffer_t 5 , -1, 0, __literal1142_bufferBytes
__literal1143_buffer Buffer_t 6 , -1, 0, __literal1143_bufferBytes
__literal1144_buffer Buffer_t 7 , -1, 0, __literal1144_bufferBytes
__literal1145_buffer Buffer_t 5 , -1, 0, __literal1145_bufferBytes
__literal1146_buffer Buffer_t 6 , -1, 0, __literal1146_bufferBytes
__literal1147_buffer Buffer_t 4 , -1, 0, __literal1147_bufferBytes
__literal1148_buffer Buffer_t 10 , -1, 0, __literal1148_bufferBytes
__literal1149_buffer Buffer_t 8 , -1, 0, __literal1149_bufferBytes
__literal1150_buffer Buffer_t 16 , -1, 0, __literal1150_bufferBytes
__literal1151_buffer Buffer_t 14 , -1, 0, __literal1151_bufferBytes
__literal1152_buffer Buffer_t 15 , -1, 0, __literal1152_bufferBytes
__literal1153_buffer Buffer_t 8 , -1, 0, __literal1153_bufferBytes
__literal1154_buffer Buffer_t 4 , -1, 0, __literal1154_bufferBytes
__literal1155_buffer Buffer_t 4 , -1, 0, __literal1155_bufferBytes
__literal1156_buffer Buffer_t 4 , -1, 0, __literal1156_bufferBytes
__literal1157_buffer Buffer_t 4 , -1, 0, __literal1157_bufferBytes
__literal1158_buffer Buffer_t 11 , -1, 0, __literal1158_bufferBytes
__literal1159_buffer Buffer_t 26 , -1, 0, __literal1159_bufferBytes
__literal1160_buffer Buffer_t 18 , -1, 0, __literal1160_bufferBytes
__literal1161_buffer Buffer_t 18 , -1, 0, __literal1161_bufferBytes
__literal1162_buffer Buffer_t 21 , -1, 0, __literal1162_bufferBytes
__literal1163_buffer Buffer_t 21 , -1, 0, __literal1163_bufferBytes
__literal1164_buffer Buffer_t 25 , -1, 0, __literal1164_bufferBytes
__literal1165_buffer Buffer_t 18 , -1, 0, __literal1165_bufferBytes
__literal1166_buffer Buffer_t 24 , -1, 0, __literal1166_bufferBytes
__literal1167_buffer Buffer_t 22 , -1, 0, __literal1167_bufferBytes
__literal1168_buffer Buffer_t 45 , -1, 0, __literal1168_bufferBytes
__literal1169_buffer Buffer_t 20 , -1, 0, __literal1169_bufferBytes
__literal1170_buffer Buffer_t 50 , -1, 0, __literal1170_bufferBytes
__literal1171_buffer Buffer_t 19 , -1, 0, __literal1171_bufferBytes
__literal1172_buffer Buffer_t 25 , -1, 0, __literal1172_bufferBytes
__literal1173_buffer Buffer_t 42 , -1, 0, __literal1173_bufferBytes
__literal1174_buffer Buffer_t 28 , -1, 0, __literal1174_bufferBytes
__literal1175_buffer Buffer_t 24 , -1, 0, __literal1175_bufferBytes
__literal1176_buffer Buffer_t 27 , -1, 0, __literal1176_bufferBytes
__literal1177_buffer Buffer_t 24 , -1, 0, __literal1177_bufferBytes
__literal1178_buffer Buffer_t 16 , -1, 0, __literal1178_bufferBytes
__literal1179_buffer Buffer_t 14 , -1, 0, __literal1179_bufferBytes
__literal1180_buffer Buffer_t 13 , -1, 0, __literal1180_bufferBytes
__literal1181_buffer Buffer_t 19 , -1, 0, __literal1181_bufferBytes
__literal1182_buffer Buffer_t 23 , -1, 0, __literal1182_bufferBytes
__const1398_buffer Buffer_t 3 , -1, 0, __const1398_bufferBytes
__const1421_buffer Buffer_t 4 , -1, 0, __const1421_bufferBytes
__const5231_buffer Buffer_t 2 , -1, 0, __const5231_bufferBytes
__const5232_buffer Buffer_t 2 , -1, 0, __const5232_bufferBytes
; iter 2
__literal0_bufferBytes StringHead_t 6
 db  "debug:" , 0
_act_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 295 ; itemsCnt
_act_0 Variant_t VARIANT_ARRAY, 0, _act_0_buffer
_act_1 Variant_t VARIANT_ARRAY, 0, _act_1_buffer
_act_2 Variant_t VARIANT_ARRAY, 0, _act_2_buffer
_act_3 Variant_t VARIANT_ARRAY, 0, _act_3_buffer
_act_4 Variant_t VARIANT_ARRAY, 0, _act_4_buffer
_act_5 Variant_t VARIANT_ARRAY, 0, _act_5_buffer
_act_6 Variant_t VARIANT_ARRAY, 0, _act_6_buffer
_act_7 Variant_t VARIANT_ARRAY, 0, _act_7_buffer
_act_8 Variant_t VARIANT_ARRAY, 0, _act_8_buffer
_act_9 Variant_t VARIANT_ARRAY, 0, _act_9_buffer
_act_10 Variant_t VARIANT_ARRAY, 0, _act_10_buffer
_act_11 Variant_t VARIANT_ARRAY, 0, _act_11_buffer
_act_12 Variant_t VARIANT_ARRAY, 0, _act_12_buffer
_act_13 Variant_t VARIANT_ARRAY, 0, _act_13_buffer
_act_14 Variant_t VARIANT_ARRAY, 0, _act_14_buffer
_act_15 Variant_t VARIANT_ARRAY, 0, _act_15_buffer
_act_16 Variant_t VARIANT_ARRAY, 0, _act_16_buffer
_act_17 Variant_t VARIANT_ARRAY, 0, _act_17_buffer
_act_18 Variant_t VARIANT_ARRAY, 0, _act_18_buffer
_act_19 Variant_t VARIANT_ARRAY, 0, _act_19_buffer
_act_20 Variant_t VARIANT_ARRAY, 0, _act_20_buffer
_act_21 Variant_t VARIANT_ARRAY, 0, _act_21_buffer
_act_22 Variant_t VARIANT_ARRAY, 0, _act_22_buffer
_act_23 Variant_t VARIANT_ARRAY, 0, _act_23_buffer
_act_24 Variant_t VARIANT_ARRAY, 0, _act_24_buffer
_act_25 Variant_t VARIANT_ARRAY, 0, _act_25_buffer
_act_26 Variant_t VARIANT_ARRAY, 0, _act_26_buffer
_act_27 Variant_t VARIANT_ARRAY, 0, _act_27_buffer
_act_28 Variant_t VARIANT_ARRAY, 0, _act_28_buffer
_act_29 Variant_t VARIANT_ARRAY, 0, _act_29_buffer
_act_30 Variant_t VARIANT_ARRAY, 0, _act_30_buffer
_act_31 Variant_t VARIANT_ARRAY, 0, _act_31_buffer
_act_32 Variant_t VARIANT_ARRAY, 0, _act_32_buffer
_act_33 Variant_t VARIANT_ARRAY, 0, _act_33_buffer
_act_34 Variant_t VARIANT_ARRAY, 0, _act_34_buffer
_act_35 Variant_t VARIANT_ARRAY, 0, _act_35_buffer
_act_36 Variant_t VARIANT_ARRAY, 0, _act_36_buffer
_act_37 Variant_t VARIANT_ARRAY, 0, _act_37_buffer
_act_38 Variant_t VARIANT_ARRAY, 0, _act_38_buffer
_act_39 Variant_t VARIANT_ARRAY, 0, _act_39_buffer
_act_40 Variant_t VARIANT_ARRAY, 0, _act_40_buffer
_act_41 Variant_t VARIANT_ARRAY, 0, _act_41_buffer
_act_42 Variant_t VARIANT_ARRAY, 0, _act_42_buffer
_act_43 Variant_t VARIANT_ARRAY, 0, _act_43_buffer
_act_44 Variant_t VARIANT_ARRAY, 0, _act_44_buffer
_act_45 Variant_t VARIANT_ARRAY, 0, _act_45_buffer
_act_46 Variant_t VARIANT_ARRAY, 0, _act_46_buffer
_act_47 Variant_t VARIANT_ARRAY, 0, _act_47_buffer
_act_48 Variant_t VARIANT_ARRAY, 0, _act_48_buffer
_act_49 Variant_t VARIANT_ARRAY, 0, _act_49_buffer
_act_50 Variant_t VARIANT_ARRAY, 0, _act_50_buffer
_act_51 Variant_t VARIANT_ARRAY, 0, _act_51_buffer
_act_52 Variant_t VARIANT_ARRAY, 0, _act_52_buffer
_act_53 Variant_t VARIANT_ARRAY, 0, _act_53_buffer
_act_54 Variant_t VARIANT_ARRAY, 0, _act_54_buffer
_act_55 Variant_t VARIANT_ARRAY, 0, _act_55_buffer
_act_56 Variant_t VARIANT_ARRAY, 0, _act_56_buffer
_act_57 Variant_t VARIANT_ARRAY, 0, _act_57_buffer
_act_58 Variant_t VARIANT_ARRAY, 0, _act_58_buffer
_act_59 Variant_t VARIANT_ARRAY, 0, _act_59_buffer
_act_60 Variant_t VARIANT_ARRAY, 0, _act_60_buffer
_act_61 Variant_t VARIANT_ARRAY, 0, _act_61_buffer
_act_62 Variant_t VARIANT_ARRAY, 0, _act_62_buffer
_act_63 Variant_t VARIANT_ARRAY, 0, _act_63_buffer
_act_64 Variant_t VARIANT_ARRAY, 0, _act_64_buffer
_act_65 Variant_t VARIANT_ARRAY, 0, _act_65_buffer
_act_66 Variant_t VARIANT_ARRAY, 0, _act_66_buffer
_act_67 Variant_t VARIANT_ARRAY, 0, _act_67_buffer
_act_68 Variant_t VARIANT_ARRAY, 0, _act_68_buffer
_act_69 Variant_t VARIANT_ARRAY, 0, _act_69_buffer
_act_70 Variant_t VARIANT_ARRAY, 0, _act_70_buffer
_act_71 Variant_t VARIANT_ARRAY, 0, _act_71_buffer
_act_72 Variant_t VARIANT_ARRAY, 0, _act_72_buffer
_act_73 Variant_t VARIANT_ARRAY, 0, _act_73_buffer
_act_74 Variant_t VARIANT_ARRAY, 0, _act_74_buffer
_act_75 Variant_t VARIANT_ARRAY, 0, _act_75_buffer
_act_76 Variant_t VARIANT_ARRAY, 0, _act_76_buffer
_act_77 Variant_t VARIANT_ARRAY, 0, _act_77_buffer
_act_78 Variant_t VARIANT_ARRAY, 0, _act_78_buffer
_act_79 Variant_t VARIANT_ARRAY, 0, _act_79_buffer
_act_80 Variant_t VARIANT_ARRAY, 0, _act_80_buffer
_act_81 Variant_t VARIANT_ARRAY, 0, _act_81_buffer
_act_82 Variant_t VARIANT_ARRAY, 0, _act_82_buffer
_act_83 Variant_t VARIANT_ARRAY, 0, _act_83_buffer
_act_84 Variant_t VARIANT_ARRAY, 0, _act_84_buffer
_act_85 Variant_t VARIANT_ARRAY, 0, _act_85_buffer
_act_86 Variant_t VARIANT_ARRAY, 0, _act_86_buffer
_act_87 Variant_t VARIANT_ARRAY, 0, _act_87_buffer
_act_88 Variant_t VARIANT_ARRAY, 0, _act_88_buffer
_act_89 Variant_t VARIANT_ARRAY, 0, _act_89_buffer
_act_90 Variant_t VARIANT_ARRAY, 0, _act_90_buffer
_act_91 Variant_t VARIANT_ARRAY, 0, _act_91_buffer
_act_92 Variant_t VARIANT_ARRAY, 0, _act_92_buffer
_act_93 Variant_t VARIANT_ARRAY, 0, _act_93_buffer
_act_94 Variant_t VARIANT_ARRAY, 0, _act_94_buffer
_act_95 Variant_t VARIANT_ARRAY, 0, _act_95_buffer
_act_96 Variant_t VARIANT_ARRAY, 0, _act_96_buffer
_act_97 Variant_t VARIANT_ARRAY, 0, _act_97_buffer
_act_98 Variant_t VARIANT_ARRAY, 0, _act_98_buffer
_act_99 Variant_t VARIANT_ARRAY, 0, _act_99_buffer
_act_100 Variant_t VARIANT_ARRAY, 0, _act_100_buffer
_act_101 Variant_t VARIANT_ARRAY, 0, _act_101_buffer
_act_102 Variant_t VARIANT_ARRAY, 0, _act_102_buffer
_act_103 Variant_t VARIANT_ARRAY, 0, _act_103_buffer
_act_104 Variant_t VARIANT_ARRAY, 0, _act_104_buffer
_act_105 Variant_t VARIANT_ARRAY, 0, _act_105_buffer
_act_106 Variant_t VARIANT_ARRAY, 0, _act_106_buffer
_act_107 Variant_t VARIANT_ARRAY, 0, _act_107_buffer
_act_108 Variant_t VARIANT_ARRAY, 0, _act_108_buffer
_act_109 Variant_t VARIANT_ARRAY, 0, _act_109_buffer
_act_110 Variant_t VARIANT_ARRAY, 0, _act_110_buffer
_act_111 Variant_t VARIANT_ARRAY, 0, _act_111_buffer
_act_112 Variant_t VARIANT_ARRAY, 0, _act_112_buffer
_act_113 Variant_t VARIANT_ARRAY, 0, _act_113_buffer
_act_114 Variant_t VARIANT_ARRAY, 0, _act_114_buffer
_act_115 Variant_t VARIANT_ARRAY, 0, _act_115_buffer
_act_116 Variant_t VARIANT_ARRAY, 0, _act_116_buffer
_act_117 Variant_t VARIANT_ARRAY, 0, _act_117_buffer
_act_118 Variant_t VARIANT_ARRAY, 0, _act_118_buffer
_act_119 Variant_t VARIANT_ARRAY, 0, _act_119_buffer
_act_120 Variant_t VARIANT_ARRAY, 0, _act_120_buffer
_act_121 Variant_t VARIANT_ARRAY, 0, _act_121_buffer
_act_122 Variant_t VARIANT_ARRAY, 0, _act_122_buffer
_act_123 Variant_t VARIANT_ARRAY, 0, _act_123_buffer
_act_124 Variant_t VARIANT_ARRAY, 0, _act_124_buffer
_act_125 Variant_t VARIANT_ARRAY, 0, _act_125_buffer
_act_126 Variant_t VARIANT_ARRAY, 0, _act_126_buffer
_act_127 Variant_t VARIANT_ARRAY, 0, _act_127_buffer
_act_128 Variant_t VARIANT_ARRAY, 0, _act_128_buffer
_act_129 Variant_t VARIANT_ARRAY, 0, _act_129_buffer
_act_130 Variant_t VARIANT_ARRAY, 0, _act_130_buffer
_act_131 Variant_t VARIANT_ARRAY, 0, _act_131_buffer
_act_132 Variant_t VARIANT_ARRAY, 0, _act_132_buffer
_act_133 Variant_t VARIANT_ARRAY, 0, _act_133_buffer
_act_134 Variant_t VARIANT_ARRAY, 0, _act_134_buffer
_act_135 Variant_t VARIANT_ARRAY, 0, _act_135_buffer
_act_136 Variant_t VARIANT_ARRAY, 0, _act_136_buffer
_act_137 Variant_t VARIANT_ARRAY, 0, _act_137_buffer
_act_138 Variant_t VARIANT_ARRAY, 0, _act_138_buffer
_act_139 Variant_t VARIANT_ARRAY, 0, _act_139_buffer
_act_140 Variant_t VARIANT_ARRAY, 0, _act_140_buffer
_act_141 Variant_t VARIANT_ARRAY, 0, _act_141_buffer
_act_142 Variant_t VARIANT_ARRAY, 0, _act_142_buffer
_act_143 Variant_t VARIANT_ARRAY, 0, _act_143_buffer
_act_144 Variant_t VARIANT_ARRAY, 0, _act_144_buffer
_act_145 Variant_t VARIANT_ARRAY, 0, _act_145_buffer
_act_146 Variant_t VARIANT_ARRAY, 0, _act_146_buffer
_act_147 Variant_t VARIANT_ARRAY, 0, _act_147_buffer
_act_148 Variant_t VARIANT_ARRAY, 0, _act_148_buffer
_act_149 Variant_t VARIANT_ARRAY, 0, _act_149_buffer
_act_150 Variant_t VARIANT_ARRAY, 0, _act_150_buffer
_act_151 Variant_t VARIANT_ARRAY, 0, _act_151_buffer
_act_152 Variant_t VARIANT_ARRAY, 0, _act_152_buffer
_act_153 Variant_t VARIANT_ARRAY, 0, _act_153_buffer
_act_154 Variant_t VARIANT_ARRAY, 0, _act_154_buffer
_act_155 Variant_t VARIANT_ARRAY, 0, _act_155_buffer
_act_156 Variant_t VARIANT_ARRAY, 0, _act_156_buffer
_act_157 Variant_t VARIANT_ARRAY, 0, _act_157_buffer
_act_158 Variant_t VARIANT_ARRAY, 0, _act_158_buffer
_act_159 Variant_t VARIANT_ARRAY, 0, _act_159_buffer
_act_160 Variant_t VARIANT_ARRAY, 0, _act_160_buffer
_act_161 Variant_t VARIANT_ARRAY, 0, _act_161_buffer
_act_162 Variant_t VARIANT_ARRAY, 0, _act_162_buffer
_act_163 Variant_t VARIANT_ARRAY, 0, _act_163_buffer
_act_164 Variant_t VARIANT_ARRAY, 0, _act_164_buffer
_act_165 Variant_t VARIANT_ARRAY, 0, _act_165_buffer
_act_166 Variant_t VARIANT_ARRAY, 0, _act_166_buffer
_act_167 Variant_t VARIANT_ARRAY, 0, _act_167_buffer
_act_168 Variant_t VARIANT_ARRAY, 0, _act_168_buffer
_act_169 Variant_t VARIANT_ARRAY, 0, _act_169_buffer
_act_170 Variant_t VARIANT_ARRAY, 0, _act_170_buffer
_act_171 Variant_t VARIANT_ARRAY, 0, _act_171_buffer
_act_172 Variant_t VARIANT_ARRAY, 0, _act_172_buffer
_act_173 Variant_t VARIANT_ARRAY, 0, _act_173_buffer
_act_174 Variant_t VARIANT_ARRAY, 0, _act_174_buffer
_act_175 Variant_t VARIANT_ARRAY, 0, _act_175_buffer
_act_176 Variant_t VARIANT_ARRAY, 0, _act_176_buffer
_act_177 Variant_t VARIANT_ARRAY, 0, _act_177_buffer
_act_178 Variant_t VARIANT_ARRAY, 0, _act_178_buffer
_act_179 Variant_t VARIANT_ARRAY, 0, _act_179_buffer
_act_180 Variant_t VARIANT_ARRAY, 0, _act_180_buffer
_act_181 Variant_t VARIANT_ARRAY, 0, _act_181_buffer
_act_182 Variant_t VARIANT_ARRAY, 0, _act_182_buffer
_act_183 Variant_t VARIANT_ARRAY, 0, _act_183_buffer
_act_184 Variant_t VARIANT_ARRAY, 0, _act_184_buffer
_act_185 Variant_t VARIANT_ARRAY, 0, _act_185_buffer
_act_186 Variant_t VARIANT_ARRAY, 0, _act_186_buffer
_act_187 Variant_t VARIANT_ARRAY, 0, _act_187_buffer
_act_188 Variant_t VARIANT_ARRAY, 0, _act_188_buffer
_act_189 Variant_t VARIANT_ARRAY, 0, _act_189_buffer
_act_190 Variant_t VARIANT_ARRAY, 0, _act_190_buffer
_act_191 Variant_t VARIANT_ARRAY, 0, _act_191_buffer
_act_192 Variant_t VARIANT_ARRAY, 0, _act_192_buffer
_act_193 Variant_t VARIANT_ARRAY, 0, _act_193_buffer
_act_194 Variant_t VARIANT_ARRAY, 0, _act_194_buffer
_act_195 Variant_t VARIANT_ARRAY, 0, _act_195_buffer
_act_196 Variant_t VARIANT_ARRAY, 0, _act_196_buffer
_act_197 Variant_t VARIANT_ARRAY, 0, _act_197_buffer
_act_198 Variant_t VARIANT_ARRAY, 0, _act_198_buffer
_act_199 Variant_t VARIANT_ARRAY, 0, _act_199_buffer
_act_200 Variant_t VARIANT_ARRAY, 0, _act_200_buffer
_act_201 Variant_t VARIANT_ARRAY, 0, _act_201_buffer
_act_202 Variant_t VARIANT_ARRAY, 0, _act_202_buffer
_act_203 Variant_t VARIANT_ARRAY, 0, _act_203_buffer
_act_204 Variant_t VARIANT_ARRAY, 0, _act_204_buffer
_act_205 Variant_t VARIANT_ARRAY, 0, _act_205_buffer
_act_206 Variant_t VARIANT_ARRAY, 0, _act_206_buffer
_act_207 Variant_t VARIANT_ARRAY, 0, _act_207_buffer
_act_208 Variant_t VARIANT_ARRAY, 0, _act_208_buffer
_act_209 Variant_t VARIANT_ARRAY, 0, _act_209_buffer
_act_210 Variant_t VARIANT_ARRAY, 0, _act_210_buffer
_act_211 Variant_t VARIANT_ARRAY, 0, _act_211_buffer
_act_212 Variant_t VARIANT_ARRAY, 0, _act_212_buffer
_act_213 Variant_t VARIANT_ARRAY, 0, _act_213_buffer
_act_214 Variant_t VARIANT_ARRAY, 0, _act_214_buffer
_act_215 Variant_t VARIANT_ARRAY, 0, _act_215_buffer
_act_216 Variant_t VARIANT_ARRAY, 0, _act_216_buffer
_act_217 Variant_t VARIANT_ARRAY, 0, _act_217_buffer
_act_218 Variant_t VARIANT_ARRAY, 0, _act_218_buffer
_act_219 Variant_t VARIANT_ARRAY, 0, _act_219_buffer
_act_220 Variant_t VARIANT_ARRAY, 0, _act_220_buffer
_act_221 Variant_t VARIANT_ARRAY, 0, _act_221_buffer
_act_222 Variant_t VARIANT_ARRAY, 0, _act_222_buffer
_act_223 Variant_t VARIANT_ARRAY, 0, _act_223_buffer
_act_224 Variant_t VARIANT_ARRAY, 0, _act_224_buffer
_act_225 Variant_t VARIANT_ARRAY, 0, _act_225_buffer
_act_226 Variant_t VARIANT_ARRAY, 0, _act_226_buffer
_act_227 Variant_t VARIANT_ARRAY, 0, _act_227_buffer
_act_228 Variant_t VARIANT_ARRAY, 0, _act_228_buffer
_act_229 Variant_t VARIANT_ARRAY, 0, _act_229_buffer
_act_230 Variant_t VARIANT_ARRAY, 0, _act_230_buffer
_act_231 Variant_t VARIANT_ARRAY, 0, _act_231_buffer
_act_232 Variant_t VARIANT_ARRAY, 0, _act_232_buffer
_act_233 Variant_t VARIANT_ARRAY, 0, _act_233_buffer
_act_234 Variant_t VARIANT_ARRAY, 0, _act_234_buffer
_act_235 Variant_t VARIANT_ARRAY, 0, _act_235_buffer
_act_236 Variant_t VARIANT_ARRAY, 0, _act_236_buffer
_act_237 Variant_t VARIANT_ARRAY, 0, _act_237_buffer
_act_238 Variant_t VARIANT_ARRAY, 0, _act_238_buffer
_act_239 Variant_t VARIANT_ARRAY, 0, _act_239_buffer
_act_240 Variant_t VARIANT_ARRAY, 0, _act_240_buffer
_act_241 Variant_t VARIANT_ARRAY, 0, _act_241_buffer
_act_242 Variant_t VARIANT_ARRAY, 0, _act_242_buffer
_act_243 Variant_t VARIANT_ARRAY, 0, _act_243_buffer
_act_244 Variant_t VARIANT_ARRAY, 0, _act_244_buffer
_act_245 Variant_t VARIANT_ARRAY, 0, _act_245_buffer
_act_246 Variant_t VARIANT_ARRAY, 0, _act_246_buffer
_act_247 Variant_t VARIANT_ARRAY, 0, _act_247_buffer
_act_248 Variant_t VARIANT_ARRAY, 0, _act_248_buffer
_act_249 Variant_t VARIANT_ARRAY, 0, _act_249_buffer
_act_250 Variant_t VARIANT_ARRAY, 0, _act_250_buffer
_act_251 Variant_t VARIANT_ARRAY, 0, _act_251_buffer
_act_252 Variant_t VARIANT_ARRAY, 0, _act_252_buffer
_act_253 Variant_t VARIANT_ARRAY, 0, _act_253_buffer
_act_254 Variant_t VARIANT_ARRAY, 0, _act_254_buffer
_act_255 Variant_t VARIANT_ARRAY, 0, _act_255_buffer
_act_256 Variant_t VARIANT_ARRAY, 0, _act_256_buffer
_act_257 Variant_t VARIANT_ARRAY, 0, _act_257_buffer
_act_258 Variant_t VARIANT_ARRAY, 0, _act_258_buffer
_act_259 Variant_t VARIANT_ARRAY, 0, _act_259_buffer
_act_260 Variant_t VARIANT_ARRAY, 0, _act_260_buffer
_act_261 Variant_t VARIANT_ARRAY, 0, _act_261_buffer
_act_262 Variant_t VARIANT_ARRAY, 0, _act_262_buffer
_act_263 Variant_t VARIANT_ARRAY, 0, _act_263_buffer
_act_264 Variant_t VARIANT_ARRAY, 0, _act_264_buffer
_act_265 Variant_t VARIANT_ARRAY, 0, _act_265_buffer
_act_266 Variant_t VARIANT_ARRAY, 0, _act_266_buffer
_act_267 Variant_t VARIANT_ARRAY, 0, _act_267_buffer
_act_268 Variant_t VARIANT_ARRAY, 0, _act_268_buffer
_act_269 Variant_t VARIANT_ARRAY, 0, _act_269_buffer
_act_270 Variant_t VARIANT_ARRAY, 0, _act_270_buffer
_act_271 Variant_t VARIANT_ARRAY, 0, _act_271_buffer
_act_272 Variant_t VARIANT_ARRAY, 0, _act_272_buffer
_act_273 Variant_t VARIANT_ARRAY, 0, _act_273_buffer
_act_274 Variant_t VARIANT_ARRAY, 0, _act_274_buffer
_act_275 Variant_t VARIANT_ARRAY, 0, _act_275_buffer
_act_276 Variant_t VARIANT_ARRAY, 0, _act_276_buffer
_act_277 Variant_t VARIANT_ARRAY, 0, _act_277_buffer
_act_278 Variant_t VARIANT_ARRAY, 0, _act_278_buffer
_act_279 Variant_t VARIANT_ARRAY, 0, _act_279_buffer
_act_280 Variant_t VARIANT_ARRAY, 0, _act_280_buffer
_act_281 Variant_t VARIANT_ARRAY, 0, _act_281_buffer
_act_282 Variant_t VARIANT_ARRAY, 0, _act_282_buffer
_act_283 Variant_t VARIANT_ARRAY, 0, _act_283_buffer
_act_284 Variant_t VARIANT_ARRAY, 0, _act_284_buffer
_act_285 Variant_t VARIANT_ARRAY, 0, _act_285_buffer
_act_286 Variant_t VARIANT_ARRAY, 0, _act_286_buffer
_act_287 Variant_t VARIANT_ARRAY, 0, _act_287_buffer
_act_288 Variant_t VARIANT_ARRAY, 0, _act_288_buffer
_act_289 Variant_t VARIANT_ARRAY, 0, _act_289_buffer
_act_290 Variant_t VARIANT_ARRAY, 0, _act_290_buffer
_act_291 Variant_t VARIANT_ARRAY, 0, _act_291_buffer
_act_292 Variant_t VARIANT_ARRAY, 0, _act_292_buffer
_act_293 Variant_t VARIANT_ARRAY, 0, _act_293_buffer
_act_294 Variant_t VARIANT_ARRAY, 0, _act_294_buffer
_go_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 295 ; itemsCnt
_go_0 Variant_t VARIANT_ARRAY, 0, _go_0_buffer
_go_1 Variant_t VARIANT_ARRAY, 0, _go_1_buffer
_go_2 Variant_t VARIANT_ARRAY, 0, _go_2_buffer
_go_3 Variant_t VARIANT_ARRAY, 0, _go_3_buffer
_go_4 Variant_t VARIANT_ARRAY, 0, _go_4_buffer
_go_5 Variant_t VARIANT_ARRAY, 0, _go_5_buffer
_go_6 Variant_t VARIANT_ARRAY, 0, _go_6_buffer
_go_7 Variant_t VARIANT_ARRAY, 0, _go_7_buffer
_go_8 Variant_t VARIANT_ARRAY, 0, _go_8_buffer
_go_9 Variant_t VARIANT_ARRAY, 0, _go_9_buffer
_go_10 Variant_t VARIANT_ARRAY, 0, _go_10_buffer
_go_11 Variant_t VARIANT_ARRAY, 0, _go_11_buffer
_go_12 Variant_t VARIANT_ARRAY, 0, _go_12_buffer
_go_13 Variant_t VARIANT_ARRAY, 0, _go_13_buffer
_go_14 Variant_t VARIANT_ARRAY, 0, _go_14_buffer
_go_15 Variant_t VARIANT_ARRAY, 0, _go_15_buffer
_go_16 Variant_t VARIANT_ARRAY, 0, _go_16_buffer
_go_17 Variant_t VARIANT_ARRAY, 0, _go_17_buffer
_go_18 Variant_t VARIANT_ARRAY, 0, _go_18_buffer
_go_19 Variant_t VARIANT_ARRAY, 0, _go_19_buffer
_go_20 Variant_t VARIANT_ARRAY, 0, _go_20_buffer
_go_21 Variant_t VARIANT_ARRAY, 0, _go_21_buffer
_go_22 Variant_t VARIANT_ARRAY, 0, _go_22_buffer
_go_23 Variant_t VARIANT_ARRAY, 0, _go_23_buffer
_go_24 Variant_t VARIANT_ARRAY, 0, _go_24_buffer
_go_25 Variant_t VARIANT_ARRAY, 0, _go_25_buffer
_go_26 Variant_t VARIANT_ARRAY, 0, _go_26_buffer
_go_27 Variant_t VARIANT_ARRAY, 0, _go_27_buffer
_go_28 Variant_t VARIANT_ARRAY, 0, _go_28_buffer
_go_29 Variant_t VARIANT_ARRAY, 0, _go_29_buffer
_go_30 Variant_t VARIANT_ARRAY, 0, _go_30_buffer
_go_31 Variant_t VARIANT_ARRAY, 0, _go_31_buffer
_go_32 Variant_t VARIANT_ARRAY, 0, _go_32_buffer
_go_33 Variant_t VARIANT_ARRAY, 0, _go_33_buffer
_go_34 Variant_t VARIANT_ARRAY, 0, _go_34_buffer
_go_35 Variant_t VARIANT_ARRAY, 0, _go_35_buffer
_go_36 Variant_t VARIANT_ARRAY, 0, _go_36_buffer
_go_37 Variant_t VARIANT_ARRAY, 0, _go_37_buffer
_go_38 Variant_t VARIANT_ARRAY, 0, _go_38_buffer
_go_39 Variant_t VARIANT_ARRAY, 0, _go_39_buffer
_go_40 Variant_t VARIANT_ARRAY, 0, _go_40_buffer
_go_41 Variant_t VARIANT_ARRAY, 0, _go_41_buffer
_go_42 Variant_t VARIANT_ARRAY, 0, _go_42_buffer
_go_43 Variant_t VARIANT_ARRAY, 0, _go_43_buffer
_go_44 Variant_t VARIANT_ARRAY, 0, _go_44_buffer
_go_45 Variant_t VARIANT_ARRAY, 0, _go_45_buffer
_go_46 Variant_t VARIANT_ARRAY, 0, _go_46_buffer
_go_47 Variant_t VARIANT_ARRAY, 0, _go_47_buffer
_go_48 Variant_t VARIANT_ARRAY, 0, _go_48_buffer
_go_49 Variant_t VARIANT_ARRAY, 0, _go_49_buffer
_go_50 Variant_t VARIANT_ARRAY, 0, _go_50_buffer
_go_51 Variant_t VARIANT_ARRAY, 0, _go_51_buffer
_go_52 Variant_t VARIANT_ARRAY, 0, _go_52_buffer
_go_53 Variant_t VARIANT_ARRAY, 0, _go_53_buffer
_go_54 Variant_t VARIANT_ARRAY, 0, _go_54_buffer
_go_55 Variant_t VARIANT_ARRAY, 0, _go_55_buffer
_go_56 Variant_t VARIANT_ARRAY, 0, _go_56_buffer
_go_57 Variant_t VARIANT_ARRAY, 0, _go_57_buffer
_go_58 Variant_t VARIANT_ARRAY, 0, _go_58_buffer
_go_59 Variant_t VARIANT_ARRAY, 0, _go_59_buffer
_go_60 Variant_t VARIANT_ARRAY, 0, _go_60_buffer
_go_61 Variant_t VARIANT_ARRAY, 0, _go_61_buffer
_go_62 Variant_t VARIANT_ARRAY, 0, _go_62_buffer
_go_63 Variant_t VARIANT_ARRAY, 0, _go_63_buffer
_go_64 Variant_t VARIANT_ARRAY, 0, _go_64_buffer
_go_65 Variant_t VARIANT_ARRAY, 0, _go_65_buffer
_go_66 Variant_t VARIANT_ARRAY, 0, _go_66_buffer
_go_67 Variant_t VARIANT_ARRAY, 0, _go_67_buffer
_go_68 Variant_t VARIANT_ARRAY, 0, _go_68_buffer
_go_69 Variant_t VARIANT_ARRAY, 0, _go_69_buffer
_go_70 Variant_t VARIANT_ARRAY, 0, _go_70_buffer
_go_71 Variant_t VARIANT_ARRAY, 0, _go_71_buffer
_go_72 Variant_t VARIANT_ARRAY, 0, _go_72_buffer
_go_73 Variant_t VARIANT_ARRAY, 0, _go_73_buffer
_go_74 Variant_t VARIANT_ARRAY, 0, _go_74_buffer
_go_75 Variant_t VARIANT_ARRAY, 0, _go_75_buffer
_go_76 Variant_t VARIANT_ARRAY, 0, _go_76_buffer
_go_77 Variant_t VARIANT_ARRAY, 0, _go_77_buffer
_go_78 Variant_t VARIANT_ARRAY, 0, _go_78_buffer
_go_79 Variant_t VARIANT_ARRAY, 0, _go_79_buffer
_go_80 Variant_t VARIANT_ARRAY, 0, _go_80_buffer
_go_81 Variant_t VARIANT_ARRAY, 0, _go_81_buffer
_go_82 Variant_t VARIANT_ARRAY, 0, _go_82_buffer
_go_83 Variant_t VARIANT_ARRAY, 0, _go_83_buffer
_go_84 Variant_t VARIANT_ARRAY, 0, _go_84_buffer
_go_85 Variant_t VARIANT_ARRAY, 0, _go_85_buffer
_go_86 Variant_t VARIANT_ARRAY, 0, _go_86_buffer
_go_87 Variant_t VARIANT_ARRAY, 0, _go_87_buffer
_go_88 Variant_t VARIANT_ARRAY, 0, _go_88_buffer
_go_89 Variant_t VARIANT_ARRAY, 0, _go_89_buffer
_go_90 Variant_t VARIANT_ARRAY, 0, _go_90_buffer
_go_91 Variant_t VARIANT_ARRAY, 0, _go_91_buffer
_go_92 Variant_t VARIANT_ARRAY, 0, _go_92_buffer
_go_93 Variant_t VARIANT_ARRAY, 0, _go_93_buffer
_go_94 Variant_t VARIANT_ARRAY, 0, _go_94_buffer
_go_95 Variant_t VARIANT_ARRAY, 0, _go_95_buffer
_go_96 Variant_t VARIANT_ARRAY, 0, _go_96_buffer
_go_97 Variant_t VARIANT_ARRAY, 0, _go_97_buffer
_go_98 Variant_t VARIANT_ARRAY, 0, _go_98_buffer
_go_99 Variant_t VARIANT_ARRAY, 0, _go_99_buffer
_go_100 Variant_t VARIANT_ARRAY, 0, _go_100_buffer
_go_101 Variant_t VARIANT_ARRAY, 0, _go_101_buffer
_go_102 Variant_t VARIANT_ARRAY, 0, _go_102_buffer
_go_103 Variant_t VARIANT_ARRAY, 0, _go_103_buffer
_go_104 Variant_t VARIANT_ARRAY, 0, _go_104_buffer
_go_105 Variant_t VARIANT_ARRAY, 0, _go_105_buffer
_go_106 Variant_t VARIANT_ARRAY, 0, _go_106_buffer
_go_107 Variant_t VARIANT_ARRAY, 0, _go_107_buffer
_go_108 Variant_t VARIANT_ARRAY, 0, _go_108_buffer
_go_109 Variant_t VARIANT_ARRAY, 0, _go_109_buffer
_go_110 Variant_t VARIANT_ARRAY, 0, _go_110_buffer
_go_111 Variant_t VARIANT_ARRAY, 0, _go_111_buffer
_go_112 Variant_t VARIANT_ARRAY, 0, _go_112_buffer
_go_113 Variant_t VARIANT_ARRAY, 0, _go_113_buffer
_go_114 Variant_t VARIANT_ARRAY, 0, _go_114_buffer
_go_115 Variant_t VARIANT_ARRAY, 0, _go_115_buffer
_go_116 Variant_t VARIANT_ARRAY, 0, _go_116_buffer
_go_117 Variant_t VARIANT_ARRAY, 0, _go_117_buffer
_go_118 Variant_t VARIANT_ARRAY, 0, _go_118_buffer
_go_119 Variant_t VARIANT_ARRAY, 0, _go_119_buffer
_go_120 Variant_t VARIANT_ARRAY, 0, _go_120_buffer
_go_121 Variant_t VARIANT_ARRAY, 0, _go_121_buffer
_go_122 Variant_t VARIANT_ARRAY, 0, _go_122_buffer
_go_123 Variant_t VARIANT_ARRAY, 0, _go_123_buffer
_go_124 Variant_t VARIANT_ARRAY, 0, _go_124_buffer
_go_125 Variant_t VARIANT_ARRAY, 0, _go_125_buffer
_go_126 Variant_t VARIANT_ARRAY, 0, _go_126_buffer
_go_127 Variant_t VARIANT_ARRAY, 0, _go_127_buffer
_go_128 Variant_t VARIANT_ARRAY, 0, _go_128_buffer
_go_129 Variant_t VARIANT_ARRAY, 0, _go_129_buffer
_go_130 Variant_t VARIANT_ARRAY, 0, _go_130_buffer
_go_131 Variant_t VARIANT_ARRAY, 0, _go_131_buffer
_go_132 Variant_t VARIANT_ARRAY, 0, _go_132_buffer
_go_133 Variant_t VARIANT_ARRAY, 0, _go_133_buffer
_go_134 Variant_t VARIANT_ARRAY, 0, _go_134_buffer
_go_135 Variant_t VARIANT_ARRAY, 0, _go_135_buffer
_go_136 Variant_t VARIANT_ARRAY, 0, _go_136_buffer
_go_137 Variant_t VARIANT_ARRAY, 0, _go_137_buffer
_go_138 Variant_t VARIANT_ARRAY, 0, _go_138_buffer
_go_139 Variant_t VARIANT_ARRAY, 0, _go_139_buffer
_go_140 Variant_t VARIANT_ARRAY, 0, _go_140_buffer
_go_141 Variant_t VARIANT_ARRAY, 0, _go_141_buffer
_go_142 Variant_t VARIANT_ARRAY, 0, _go_142_buffer
_go_143 Variant_t VARIANT_ARRAY, 0, _go_143_buffer
_go_144 Variant_t VARIANT_ARRAY, 0, _go_144_buffer
_go_145 Variant_t VARIANT_ARRAY, 0, _go_145_buffer
_go_146 Variant_t VARIANT_ARRAY, 0, _go_146_buffer
_go_147 Variant_t VARIANT_ARRAY, 0, _go_147_buffer
_go_148 Variant_t VARIANT_ARRAY, 0, _go_148_buffer
_go_149 Variant_t VARIANT_ARRAY, 0, _go_149_buffer
_go_150 Variant_t VARIANT_ARRAY, 0, _go_150_buffer
_go_151 Variant_t VARIANT_ARRAY, 0, _go_151_buffer
_go_152 Variant_t VARIANT_ARRAY, 0, _go_152_buffer
_go_153 Variant_t VARIANT_ARRAY, 0, _go_153_buffer
_go_154 Variant_t VARIANT_ARRAY, 0, _go_154_buffer
_go_155 Variant_t VARIANT_ARRAY, 0, _go_155_buffer
_go_156 Variant_t VARIANT_ARRAY, 0, _go_156_buffer
_go_157 Variant_t VARIANT_ARRAY, 0, _go_157_buffer
_go_158 Variant_t VARIANT_ARRAY, 0, _go_158_buffer
_go_159 Variant_t VARIANT_ARRAY, 0, _go_159_buffer
_go_160 Variant_t VARIANT_ARRAY, 0, _go_160_buffer
_go_161 Variant_t VARIANT_ARRAY, 0, _go_161_buffer
_go_162 Variant_t VARIANT_ARRAY, 0, _go_162_buffer
_go_163 Variant_t VARIANT_ARRAY, 0, _go_163_buffer
_go_164 Variant_t VARIANT_ARRAY, 0, _go_164_buffer
_go_165 Variant_t VARIANT_ARRAY, 0, _go_165_buffer
_go_166 Variant_t VARIANT_ARRAY, 0, _go_166_buffer
_go_167 Variant_t VARIANT_ARRAY, 0, _go_167_buffer
_go_168 Variant_t VARIANT_ARRAY, 0, _go_168_buffer
_go_169 Variant_t VARIANT_ARRAY, 0, _go_169_buffer
_go_170 Variant_t VARIANT_ARRAY, 0, _go_170_buffer
_go_171 Variant_t VARIANT_ARRAY, 0, _go_171_buffer
_go_172 Variant_t VARIANT_ARRAY, 0, _go_172_buffer
_go_173 Variant_t VARIANT_ARRAY, 0, _go_173_buffer
_go_174 Variant_t VARIANT_ARRAY, 0, _go_174_buffer
_go_175 Variant_t VARIANT_ARRAY, 0, _go_175_buffer
_go_176 Variant_t VARIANT_ARRAY, 0, _go_176_buffer
_go_177 Variant_t VARIANT_ARRAY, 0, _go_177_buffer
_go_178 Variant_t VARIANT_ARRAY, 0, _go_178_buffer
_go_179 Variant_t VARIANT_ARRAY, 0, _go_179_buffer
_go_180 Variant_t VARIANT_ARRAY, 0, _go_180_buffer
_go_181 Variant_t VARIANT_ARRAY, 0, _go_181_buffer
_go_182 Variant_t VARIANT_ARRAY, 0, _go_182_buffer
_go_183 Variant_t VARIANT_ARRAY, 0, _go_183_buffer
_go_184 Variant_t VARIANT_ARRAY, 0, _go_184_buffer
_go_185 Variant_t VARIANT_ARRAY, 0, _go_185_buffer
_go_186 Variant_t VARIANT_ARRAY, 0, _go_186_buffer
_go_187 Variant_t VARIANT_ARRAY, 0, _go_187_buffer
_go_188 Variant_t VARIANT_ARRAY, 0, _go_188_buffer
_go_189 Variant_t VARIANT_ARRAY, 0, _go_189_buffer
_go_190 Variant_t VARIANT_ARRAY, 0, _go_190_buffer
_go_191 Variant_t VARIANT_ARRAY, 0, _go_191_buffer
_go_192 Variant_t VARIANT_ARRAY, 0, _go_192_buffer
_go_193 Variant_t VARIANT_ARRAY, 0, _go_193_buffer
_go_194 Variant_t VARIANT_ARRAY, 0, _go_194_buffer
_go_195 Variant_t VARIANT_ARRAY, 0, _go_195_buffer
_go_196 Variant_t VARIANT_ARRAY, 0, _go_196_buffer
_go_197 Variant_t VARIANT_ARRAY, 0, _go_197_buffer
_go_198 Variant_t VARIANT_ARRAY, 0, _go_198_buffer
_go_199 Variant_t VARIANT_ARRAY, 0, _go_199_buffer
_go_200 Variant_t VARIANT_ARRAY, 0, _go_200_buffer
_go_201 Variant_t VARIANT_ARRAY, 0, _go_201_buffer
_go_202 Variant_t VARIANT_ARRAY, 0, _go_202_buffer
_go_203 Variant_t VARIANT_ARRAY, 0, _go_203_buffer
_go_204 Variant_t VARIANT_ARRAY, 0, _go_204_buffer
_go_205 Variant_t VARIANT_ARRAY, 0, _go_205_buffer
_go_206 Variant_t VARIANT_ARRAY, 0, _go_206_buffer
_go_207 Variant_t VARIANT_ARRAY, 0, _go_207_buffer
_go_208 Variant_t VARIANT_ARRAY, 0, _go_208_buffer
_go_209 Variant_t VARIANT_ARRAY, 0, _go_209_buffer
_go_210 Variant_t VARIANT_ARRAY, 0, _go_210_buffer
_go_211 Variant_t VARIANT_ARRAY, 0, _go_211_buffer
_go_212 Variant_t VARIANT_ARRAY, 0, _go_212_buffer
_go_213 Variant_t VARIANT_ARRAY, 0, _go_213_buffer
_go_214 Variant_t VARIANT_ARRAY, 0, _go_214_buffer
_go_215 Variant_t VARIANT_ARRAY, 0, _go_215_buffer
_go_216 Variant_t VARIANT_ARRAY, 0, _go_216_buffer
_go_217 Variant_t VARIANT_ARRAY, 0, _go_217_buffer
_go_218 Variant_t VARIANT_ARRAY, 0, _go_218_buffer
_go_219 Variant_t VARIANT_ARRAY, 0, _go_219_buffer
_go_220 Variant_t VARIANT_ARRAY, 0, _go_220_buffer
_go_221 Variant_t VARIANT_ARRAY, 0, _go_221_buffer
_go_222 Variant_t VARIANT_ARRAY, 0, _go_222_buffer
_go_223 Variant_t VARIANT_ARRAY, 0, _go_223_buffer
_go_224 Variant_t VARIANT_ARRAY, 0, _go_224_buffer
_go_225 Variant_t VARIANT_ARRAY, 0, _go_225_buffer
_go_226 Variant_t VARIANT_ARRAY, 0, _go_226_buffer
_go_227 Variant_t VARIANT_ARRAY, 0, _go_227_buffer
_go_228 Variant_t VARIANT_ARRAY, 0, _go_228_buffer
_go_229 Variant_t VARIANT_ARRAY, 0, _go_229_buffer
_go_230 Variant_t VARIANT_ARRAY, 0, _go_230_buffer
_go_231 Variant_t VARIANT_ARRAY, 0, _go_231_buffer
_go_232 Variant_t VARIANT_ARRAY, 0, _go_232_buffer
_go_233 Variant_t VARIANT_ARRAY, 0, _go_233_buffer
_go_234 Variant_t VARIANT_ARRAY, 0, _go_234_buffer
_go_235 Variant_t VARIANT_ARRAY, 0, _go_235_buffer
_go_236 Variant_t VARIANT_ARRAY, 0, _go_236_buffer
_go_237 Variant_t VARIANT_ARRAY, 0, _go_237_buffer
_go_238 Variant_t VARIANT_ARRAY, 0, _go_238_buffer
_go_239 Variant_t VARIANT_ARRAY, 0, _go_239_buffer
_go_240 Variant_t VARIANT_ARRAY, 0, _go_240_buffer
_go_241 Variant_t VARIANT_ARRAY, 0, _go_241_buffer
_go_242 Variant_t VARIANT_ARRAY, 0, _go_242_buffer
_go_243 Variant_t VARIANT_ARRAY, 0, _go_243_buffer
_go_244 Variant_t VARIANT_ARRAY, 0, _go_244_buffer
_go_245 Variant_t VARIANT_ARRAY, 0, _go_245_buffer
_go_246 Variant_t VARIANT_ARRAY, 0, _go_246_buffer
_go_247 Variant_t VARIANT_ARRAY, 0, _go_247_buffer
_go_248 Variant_t VARIANT_ARRAY, 0, _go_248_buffer
_go_249 Variant_t VARIANT_ARRAY, 0, _go_249_buffer
_go_250 Variant_t VARIANT_ARRAY, 0, _go_250_buffer
_go_251 Variant_t VARIANT_ARRAY, 0, _go_251_buffer
_go_252 Variant_t VARIANT_ARRAY, 0, _go_252_buffer
_go_253 Variant_t VARIANT_ARRAY, 0, _go_253_buffer
_go_254 Variant_t VARIANT_ARRAY, 0, _go_254_buffer
_go_255 Variant_t VARIANT_ARRAY, 0, _go_255_buffer
_go_256 Variant_t VARIANT_ARRAY, 0, _go_256_buffer
_go_257 Variant_t VARIANT_ARRAY, 0, _go_257_buffer
_go_258 Variant_t VARIANT_ARRAY, 0, _go_258_buffer
_go_259 Variant_t VARIANT_ARRAY, 0, _go_259_buffer
_go_260 Variant_t VARIANT_ARRAY, 0, _go_260_buffer
_go_261 Variant_t VARIANT_ARRAY, 0, _go_261_buffer
_go_262 Variant_t VARIANT_ARRAY, 0, _go_262_buffer
_go_263 Variant_t VARIANT_ARRAY, 0, _go_263_buffer
_go_264 Variant_t VARIANT_ARRAY, 0, _go_264_buffer
_go_265 Variant_t VARIANT_ARRAY, 0, _go_265_buffer
_go_266 Variant_t VARIANT_ARRAY, 0, _go_266_buffer
_go_267 Variant_t VARIANT_ARRAY, 0, _go_267_buffer
_go_268 Variant_t VARIANT_ARRAY, 0, _go_268_buffer
_go_269 Variant_t VARIANT_ARRAY, 0, _go_269_buffer
_go_270 Variant_t VARIANT_ARRAY, 0, _go_270_buffer
_go_271 Variant_t VARIANT_ARRAY, 0, _go_271_buffer
_go_272 Variant_t VARIANT_ARRAY, 0, _go_272_buffer
_go_273 Variant_t VARIANT_ARRAY, 0, _go_273_buffer
_go_274 Variant_t VARIANT_ARRAY, 0, _go_274_buffer
_go_275 Variant_t VARIANT_ARRAY, 0, _go_275_buffer
_go_276 Variant_t VARIANT_ARRAY, 0, _go_276_buffer
_go_277 Variant_t VARIANT_ARRAY, 0, _go_277_buffer
_go_278 Variant_t VARIANT_ARRAY, 0, _go_278_buffer
_go_279 Variant_t VARIANT_ARRAY, 0, _go_279_buffer
_go_280 Variant_t VARIANT_ARRAY, 0, _go_280_buffer
_go_281 Variant_t VARIANT_ARRAY, 0, _go_281_buffer
_go_282 Variant_t VARIANT_ARRAY, 0, _go_282_buffer
_go_283 Variant_t VARIANT_ARRAY, 0, _go_283_buffer
_go_284 Variant_t VARIANT_ARRAY, 0, _go_284_buffer
_go_285 Variant_t VARIANT_ARRAY, 0, _go_285_buffer
_go_286 Variant_t VARIANT_ARRAY, 0, _go_286_buffer
_go_287 Variant_t VARIANT_ARRAY, 0, _go_287_buffer
_go_288 Variant_t VARIANT_ARRAY, 0, _go_288_buffer
_go_289 Variant_t VARIANT_ARRAY, 0, _go_289_buffer
_go_290 Variant_t VARIANT_ARRAY, 0, _go_290_buffer
_go_291 Variant_t VARIANT_ARRAY, 0, _go_291_buffer
_go_292 Variant_t VARIANT_ARRAY, 0, _go_292_buffer
_go_293 Variant_t VARIANT_ARRAY, 0, _go_293_buffer
_go_294 Variant_t VARIANT_ARRAY, 0, _go_294_buffer
_def_prod_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 295 ; itemsCnt
dw 185, 4, 184, 185, 185, 185, 185, 185, 185, 185, 3, -1, -1, 83, 185, 185, 185, 81, 185, 84, -1, 80, 185, 140, 185, -1, 185, 185, 185, -1, 82, 185, -1, 85, 185, 86, 185, 185, 185, 95, 185, -1, 152, 36, -1, 185, -1, -1, 156, -1, -1, -1, -1, -1, -1, -1, -1, 185, -1, 185, 185, 185, 185, 185, 185, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185, 185, 185, 185, 185, 185, -1, -1, -1, -1, -1, -1, -1, 75, 185, 185, -1, -1, 83, 81, 84, 140, 82, 96, -1, 151, -1, 57, 35, 50, -1, 51, -1, 185, 185, 185, -1, -1, -1, 93, 67, 36, 140, 85, 86, 85, 86, -1, -1, -1, -1, 22, 45, -1, 23, 24, -1, 27, 140, 185, 185, 140, 185, -1, -1, -1, 89, 90, 157, 87, 91, 92, 88, 99, 102, 100, 101, 98, 97, 36, 74, 185, -1, -1, 106, -1, 107, -1, 185, -1, 185, -1, 185, 55, -1, 185, 48, 185, -1, -1, -1, -1, 185, -1, -1, 185, 4, 86, -1, 4, -1, -1, 4, -1, -1, -1, 36, -1, 185, -1, 56, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 30, 44, -1, -1, -1, -1, -1, 4, -1, -1, 47, 185, -1, 4, -1, 4, 4, -1, 185, 185, 185, 4, -1, -1, -1, 185, 40, 32, 41, 185, -1, 185, -1, 63, 64, -1, -1, 25, 26, -1, 52, -1, 124, -1, -1, -1, -1, -1, -1, 109, 112, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 164, -1, 185, 53, 4, 185, -1, 185, 4, 4, 59, -1, 159, 160, 162, 161, 163, 158, -1, 126, -1, -1, 60
_dfa_select_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 295 ; itemsCnt
db 0, 1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, -1, 10, 7, 11, 12, 13, 7, 10, 14, 15, 7, 16, 7, 17, 18, 11, 11, 19, 13, 11, 9, 15, 20, 21, 7, 7, 22, 21, 23, 24, 25, 26, 27, 23, 24, 19, 28, 24, 24, 19, 24, 24, 24, 24, 19, 7, 24, 7, 7, 7, 7, 11, 7, 24, 29, 24, 24, 19, 24, 24, 24, 24, 7, 7, 7, 7, 7, 7, 24, 24, 24, 24, 24, 24, 30, 31, 32, 32, 33, 33, 15, 15, 15, 15, 15, 15, 34, 35, 36, 37, 38, 39, 40, 41, 42, 11, 11, 11, 19, 19, 19, 15, 43, 44, 45, 45, 46, 10, 47, 9, 24, 9, 30, 48, 49, 9, 48, 48, 14, 50, 51, 52, 52, 53, 52, 40, 40, 40, 15, 15, 28, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 44, 31, 11, 54, 19, 21, 24, 21, 55, 7, 24, 56, 57, 58, 35, 59, 58, 38, 7, 24, 60, 42, 60, 11, 19, 61, 62, 63, 46, 61, 64, 65, 24, 66, 67, 14, 14, 44, 61, 68, 9, 69, 34, 70, 39, 24, 71, 24, 19, 24, 24, 19, 72, 73, 73, 74, 75, 76, 77, 49, 78, 79, 24, 24, 61, 80, 24, 34, 39, 7, 24, 81, 42, 81, 81, 42, 68, 82, 7, 83, 24, 33, 33, 68, 84, 77, 75, 11, 19, 68, 85, 86, 87, 88, 88, 50, 50, 89, 69, 24, 90, 91, 24, 91, 91, 24, 92, 93, 93, 19, 19, 79, 88, 88, 88, 88, 88, 88, 85, 94, 95, 96, 69, 97, 7, 24, 68, 81, 81, 86, 88, 94, 94, 94, 94, 94, 94, 91, 81, 91, 91, 86
_dfa_idx_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 98 ; itemsCnt
_dfa_idx_0 Variant_t VARIANT_ARRAY, 0, _dfa_idx_0_buffer
_dfa_idx_1 Variant_t VARIANT_ARRAY, 0, _dfa_idx_1_buffer
_dfa_idx_2 Variant_t VARIANT_ARRAY, 0, _dfa_idx_2_buffer
_dfa_idx_3 Variant_t VARIANT_ARRAY, 0, _dfa_idx_3_buffer
_dfa_idx_4 Variant_t VARIANT_ARRAY, 0, _dfa_idx_4_buffer
_dfa_idx_5 Variant_t VARIANT_ARRAY, 0, _dfa_idx_5_buffer
_dfa_idx_6 Variant_t VARIANT_ARRAY, 0, _dfa_idx_6_buffer
_dfa_idx_7 Variant_t VARIANT_ARRAY, 0, _dfa_idx_7_buffer
_dfa_idx_8 Variant_t VARIANT_ARRAY, 0, _dfa_idx_8_buffer
_dfa_idx_9 Variant_t VARIANT_ARRAY, 0, _dfa_idx_9_buffer
_dfa_idx_10 Variant_t VARIANT_ARRAY, 0, _dfa_idx_10_buffer
_dfa_idx_11 Variant_t VARIANT_ARRAY, 0, _dfa_idx_11_buffer
_dfa_idx_12 Variant_t VARIANT_ARRAY, 0, _dfa_idx_12_buffer
_dfa_idx_13 Variant_t VARIANT_ARRAY, 0, _dfa_idx_13_buffer
_dfa_idx_14 Variant_t VARIANT_ARRAY, 0, _dfa_idx_14_buffer
_dfa_idx_15 Variant_t VARIANT_ARRAY, 0, _dfa_idx_15_buffer
_dfa_idx_16 Variant_t VARIANT_ARRAY, 0, _dfa_idx_16_buffer
_dfa_idx_17 Variant_t VARIANT_ARRAY, 0, _dfa_idx_17_buffer
_dfa_idx_18 Variant_t VARIANT_ARRAY, 0, _dfa_idx_18_buffer
_dfa_idx_19 Variant_t VARIANT_ARRAY, 0, _dfa_idx_19_buffer
_dfa_idx_20 Variant_t VARIANT_ARRAY, 0, _dfa_idx_20_buffer
_dfa_idx_21 Variant_t VARIANT_ARRAY, 0, _dfa_idx_21_buffer
_dfa_idx_22 Variant_t VARIANT_ARRAY, 0, _dfa_idx_22_buffer
_dfa_idx_23 Variant_t VARIANT_ARRAY, 0, _dfa_idx_23_buffer
_dfa_idx_24 Variant_t VARIANT_ARRAY, 0, _dfa_idx_24_buffer
_dfa_idx_25 Variant_t VARIANT_ARRAY, 0, _dfa_idx_25_buffer
_dfa_idx_26 Variant_t VARIANT_ARRAY, 0, _dfa_idx_26_buffer
_dfa_idx_27 Variant_t VARIANT_ARRAY, 0, _dfa_idx_27_buffer
_dfa_idx_28 Variant_t VARIANT_ARRAY, 0, _dfa_idx_28_buffer
_dfa_idx_29 Variant_t VARIANT_ARRAY, 0, _dfa_idx_29_buffer
_dfa_idx_30 Variant_t VARIANT_ARRAY, 0, _dfa_idx_30_buffer
_dfa_idx_31 Variant_t VARIANT_ARRAY, 0, _dfa_idx_31_buffer
_dfa_idx_32 Variant_t VARIANT_ARRAY, 0, _dfa_idx_32_buffer
_dfa_idx_33 Variant_t VARIANT_ARRAY, 0, _dfa_idx_33_buffer
_dfa_idx_34 Variant_t VARIANT_ARRAY, 0, _dfa_idx_34_buffer
_dfa_idx_35 Variant_t VARIANT_ARRAY, 0, _dfa_idx_35_buffer
_dfa_idx_36 Variant_t VARIANT_ARRAY, 0, _dfa_idx_36_buffer
_dfa_idx_37 Variant_t VARIANT_ARRAY, 0, _dfa_idx_37_buffer
_dfa_idx_38 Variant_t VARIANT_ARRAY, 0, _dfa_idx_38_buffer
_dfa_idx_39 Variant_t VARIANT_ARRAY, 0, _dfa_idx_39_buffer
_dfa_idx_40 Variant_t VARIANT_ARRAY, 0, _dfa_idx_40_buffer
_dfa_idx_41 Variant_t VARIANT_ARRAY, 0, _dfa_idx_41_buffer
_dfa_idx_42 Variant_t VARIANT_ARRAY, 0, _dfa_idx_42_buffer
_dfa_idx_43 Variant_t VARIANT_ARRAY, 0, _dfa_idx_43_buffer
_dfa_idx_44 Variant_t VARIANT_ARRAY, 0, _dfa_idx_44_buffer
_dfa_idx_45 Variant_t VARIANT_ARRAY, 0, _dfa_idx_45_buffer
_dfa_idx_46 Variant_t VARIANT_ARRAY, 0, _dfa_idx_46_buffer
_dfa_idx_47 Variant_t VARIANT_ARRAY, 0, _dfa_idx_47_buffer
_dfa_idx_48 Variant_t VARIANT_ARRAY, 0, _dfa_idx_48_buffer
_dfa_idx_49 Variant_t VARIANT_ARRAY, 0, _dfa_idx_49_buffer
_dfa_idx_50 Variant_t VARIANT_ARRAY, 0, _dfa_idx_50_buffer
_dfa_idx_51 Variant_t VARIANT_ARRAY, 0, _dfa_idx_51_buffer
_dfa_idx_52 Variant_t VARIANT_ARRAY, 0, _dfa_idx_52_buffer
_dfa_idx_53 Variant_t VARIANT_ARRAY, 0, _dfa_idx_53_buffer
_dfa_idx_54 Variant_t VARIANT_ARRAY, 0, _dfa_idx_54_buffer
_dfa_idx_55 Variant_t VARIANT_ARRAY, 0, _dfa_idx_55_buffer
_dfa_idx_56 Variant_t VARIANT_ARRAY, 0, _dfa_idx_56_buffer
_dfa_idx_57 Variant_t VARIANT_ARRAY, 0, _dfa_idx_57_buffer
_dfa_idx_58 Variant_t VARIANT_ARRAY, 0, _dfa_idx_58_buffer
_dfa_idx_59 Variant_t VARIANT_ARRAY, 0, _dfa_idx_59_buffer
_dfa_idx_60 Variant_t VARIANT_ARRAY, 0, _dfa_idx_60_buffer
_dfa_idx_61 Variant_t VARIANT_ARRAY, 0, _dfa_idx_61_buffer
_dfa_idx_62 Variant_t VARIANT_ARRAY, 0, _dfa_idx_62_buffer
_dfa_idx_63 Variant_t VARIANT_ARRAY, 0, _dfa_idx_63_buffer
_dfa_idx_64 Variant_t VARIANT_ARRAY, 0, _dfa_idx_64_buffer
_dfa_idx_65 Variant_t VARIANT_ARRAY, 0, _dfa_idx_65_buffer
_dfa_idx_66 Variant_t VARIANT_ARRAY, 0, _dfa_idx_66_buffer
_dfa_idx_67 Variant_t VARIANT_ARRAY, 0, _dfa_idx_67_buffer
_dfa_idx_68 Variant_t VARIANT_ARRAY, 0, _dfa_idx_68_buffer
_dfa_idx_69 Variant_t VARIANT_ARRAY, 0, _dfa_idx_69_buffer
_dfa_idx_70 Variant_t VARIANT_ARRAY, 0, _dfa_idx_70_buffer
_dfa_idx_71 Variant_t VARIANT_ARRAY, 0, _dfa_idx_71_buffer
_dfa_idx_72 Variant_t VARIANT_ARRAY, 0, _dfa_idx_72_buffer
_dfa_idx_73 Variant_t VARIANT_ARRAY, 0, _dfa_idx_73_buffer
_dfa_idx_74 Variant_t VARIANT_ARRAY, 0, _dfa_idx_74_buffer
_dfa_idx_75 Variant_t VARIANT_ARRAY, 0, _dfa_idx_75_buffer
_dfa_idx_76 Variant_t VARIANT_ARRAY, 0, _dfa_idx_76_buffer
_dfa_idx_77 Variant_t VARIANT_ARRAY, 0, _dfa_idx_77_buffer
_dfa_idx_78 Variant_t VARIANT_ARRAY, 0, _dfa_idx_78_buffer
_dfa_idx_79 Variant_t VARIANT_ARRAY, 0, _dfa_idx_79_buffer
_dfa_idx_80 Variant_t VARIANT_ARRAY, 0, _dfa_idx_80_buffer
_dfa_idx_81 Variant_t VARIANT_ARRAY, 0, _dfa_idx_81_buffer
_dfa_idx_82 Variant_t VARIANT_ARRAY, 0, _dfa_idx_82_buffer
_dfa_idx_83 Variant_t VARIANT_ARRAY, 0, _dfa_idx_83_buffer
_dfa_idx_84 Variant_t VARIANT_ARRAY, 0, _dfa_idx_84_buffer
_dfa_idx_85 Variant_t VARIANT_ARRAY, 0, _dfa_idx_85_buffer
_dfa_idx_86 Variant_t VARIANT_ARRAY, 0, _dfa_idx_86_buffer
_dfa_idx_87 Variant_t VARIANT_ARRAY, 0, _dfa_idx_87_buffer
_dfa_idx_88 Variant_t VARIANT_ARRAY, 0, _dfa_idx_88_buffer
_dfa_idx_89 Variant_t VARIANT_ARRAY, 0, _dfa_idx_89_buffer
_dfa_idx_90 Variant_t VARIANT_ARRAY, 0, _dfa_idx_90_buffer
_dfa_idx_91 Variant_t VARIANT_ARRAY, 0, _dfa_idx_91_buffer
_dfa_idx_92 Variant_t VARIANT_ARRAY, 0, _dfa_idx_92_buffer
_dfa_idx_93 Variant_t VARIANT_ARRAY, 0, _dfa_idx_93_buffer
_dfa_idx_94 Variant_t VARIANT_ARRAY, 0, _dfa_idx_94_buffer
_dfa_idx_95 Variant_t VARIANT_ARRAY, 0, _dfa_idx_95_buffer
_dfa_idx_96 Variant_t VARIANT_ARRAY, 0, _dfa_idx_96_buffer
_dfa_idx_97 Variant_t VARIANT_ARRAY, 0, _dfa_idx_97_buffer
_dfa_chars_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 37428 ; itemsCnt
dd 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 45, 45, 47, 47, 48, 48, 49, 57, 91, 91, 99, 99, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 101, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 42, 42, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 101, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 58, 58, 60, 60, 61, 61, 62, 62, 64, 64, 91, 91, 93, 93, 97, 97, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 107, 107, 109, 109, 110, 110, 111, 111, 112, 112, 115, 115, 116, 116, 118, 118, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 98, 98, 100, 100, 104, 104, 106, 106, 108, 108, 113, 114, 117, 117, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, 97, 97, 98, 98, 65, 90, 99, 122, -1, -1, -1, -1, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 108, 108, 110, 110, 120, 120, 48, 57, 65, 90, 95, 95, 97, 107, 109, 109, 111, 119, 121, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 65, 90, 97, 122, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 102, 102, 109, 109, 110, 110, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 111, 114, 116, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 111, 111, 65, 90, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 108, 108, 65, 90, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 65, 90, 98, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 105, 105, 65, 90, 97, 104, 106, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 105, 105, 115, 115, 48, 57, 65, 90, 95, 95, 97, 104, 106, 114, 116, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 121, 121, 48, 57, 65, 90, 95, 95, 97, 120, 122, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 99, 99, 102, 102, 105, 105, 109, 109, 119, 119, 48, 57, 65, 90, 95, 95, 97, 98, 100, 101, 103, 104, 106, 108, 110, 118, 120, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 97, 110, 112, 116, 118, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 120, 120, 48, 57, 65, 90, 95, 95, 97, 119, 121, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 44, 44, 45, 45, 47, 47, 48, 48, 49, 57, 91, 91, 93, 93, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 109, 109, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 125, 125, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 108, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 108, 108, 110, 110, 48, 57, 65, 90, 95, 95, 97, 107, 109, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 105, 105, 115, 115, 48, 57, 65, 90, 95, 95, 97, 104, 106, 114, 116, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 99, 99, 102, 102, 105, 105, 109, 109, 119, 119, 48, 57, 65, 90, 95, 95, 97, 98, 100, 101, 103, 104, 106, 108, 110, 118, 120, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 97, 110, 112, 116, 118, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 61, 61, 62, 62, 91, 91, 93, 93, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 115, 115, 116, 116, 118, 118, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 114, 117, 117, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 120, 120, 48, 57, 65, 90, 95, 95, 97, 109, 111, 119, 121, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 102, 102, 109, 109, 110, 110, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 111, 114, 116, 122, -1, -1, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 58, 58, 60, 60, 62, 62, 91, 91, 93, 93, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 62, 62, 91, 91, 93, 93, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 45, 45, 47, 47, 48, 48, 49, 57, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 42, 42, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 48, 57, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 108, 108, 110, 110, 48, 57, 65, 90, 95, 95, 97, 107, 109, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 105, 105, 115, 115, 48, 57, 65, 90, 95, 95, 97, 104, 106, 114, 116, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 102, 102, 105, 105, 109, 109, 119, 119, 48, 57, 65, 90, 95, 95, 97, 101, 103, 104, 106, 108, 110, 118, 120, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 97, 110, 112, 116, 118, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, -1, -1, 10, 10, 13, 13, -1, -1, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 62, 62, 91, 91, 105, 105, 123, 123, 126, 126, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 32, 32, 35, 35, 47, 47, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 45, 45, 47, 47, 48, 48, 49, 57, 64, 64, 91, 91, 93, 93, 102, 102, 110, 110, 116, 116, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 97, 97, 98, 98, 65, 90, 99, 122, -1, -1, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 65, 90, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 42, 42, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 48, 57, -1, -1, 111, 111, 65, 90, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 65, 90, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 97, 97, 65, 90, 98, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 105, 105, 65, 90, 97, 104, 106, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 61, 61, 62, 62, 91, 91, 105, 105, 123, 123, 126, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 61, 61, -1, -1, -1, -1, 34, 34, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 62, 62, 91, 91, 93, 93, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 62, 62, 91, 91, 105, 105, 123, 123, 126, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 60, 60, 62, 62, 105, 105, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 45, 45, 47, 47, 48, 48, 49, 57, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 42, 42, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 48, 57, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 32, 32, 35, 35, 47, 47, 105, 105, 107, 107, 118, 118, 65, 90, 95, 95, 97, 104, 106, 106, 108, 117, 119, 122, -1, -1, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 42, 42, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 121, 121, 48, 57, 65, 90, 95, 95, 97, 120, 122, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 120, 120, 48, 57, 65, 90, 95, 95, 97, 119, 121, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 34, 34, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 62, 62, 91, 91, 93, 93, 97, 97, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 111, 111, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 98, 98, 100, 100, 104, 104, 106, 109, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 45, 45, 47, 47, 48, 48, 49, 57, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 125, 125, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 42, 42, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 48, 57, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 62, 62, 91, 91, 93, 93, 97, 97, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 111, 111, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 98, 98, 100, 100, 104, 104, 106, 109, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 34, 34, 39, 39, 125, 125, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 93, 93, 102, 102, 110, 110, 116, 116, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 107, 107, 118, 118, 65, 90, 95, 95, 97, 104, 106, 106, 108, 117, 119, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 121, 121, 48, 57, 65, 90, 95, 95, 97, 120, 122, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 120, 120, 48, 57, 65, 90, 95, 95, 97, 119, 121, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 34, 34, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 61, 61, 62, 62, 91, 91, 93, 93, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 64, 64, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 97, 97, 98, 98, 65, 90, 99, 122, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 65, 90, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 111, 111, 65, 90, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 65, 90, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 97, 97, 65, 90, 98, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 105, 105, 65, 90, 97, 104, 106, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 40, 40, -1, -1, -1, -1, 101, 101, 109, 109, 10, 10, 13, 13, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, 101, 101, -1, -1, 100, 100, -1, -1, 116, 116, -1, -1, 99, 99, -1, -1, 104, 104, -1, -1, 108, 108, -1, -1, 111, 111, -1, -1, 97, 97, -1, -1, 115, 115, -1, -1, 115, 115, -1, -1, 100, 100, -1, -1, 32, 32, 35, 35, 40, 40, 47, 47, 102, 102, 116, 116, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 97, 97, -1, -1, 114, 114, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 108, 108, -1, -1, 117, 117, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 115, 115, -1, -1, 101, 101, -1, -1, 101, 101, -1, -1, 40, 40, 102, 102, 116, 116, -1, -1, -1, -1, -1, -1, -1, -1, 97, 97, -1, -1, 114, 114, -1, -1, 108, 108, -1, -1, 117, 117, -1, -1, 115, 115, -1, -1, 101, 101, -1, -1, 101, 101, -1, -1, 58, 58, -1, -1, -1, -1, 44, 44, 125, 125, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 125, 125, -1, -1, -1, -1, 34, 34, 39, 39, 44, 44, 125, 125, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 41, 41, 44, 44, 93, 93, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 41, 41, 44, 44, 60, 60, 62, 62, 93, 93, 105, 105, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 93, 93, -1, -1, -1, -1, 34, 34, 39, 39, 40, 40, 41, 41, 44, 44, 45, 45, 48, 48, 49, 57, 91, 91, 93, 93, 102, 102, 110, 110, 116, 116, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, -1, -1, -1, -1, 110, 110, -1, -1, 101, 101, 10, 10, 13, 13, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 120, 120, -1, -1, 116, 116, -1, -1, 101, 101, -1, -1, 110, 110, -1, -1, 100, 100, -1, -1, 115, 115, -1, -1, 34, 34, 39, 39, 40, 40, 41, 41, 45, 45, 48, 48, 49, 57, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 41, 41, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 62, 62, 91, 91, 105, 105, 123, 123, 126, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 41, 41, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 62, 62, 91, 91, 97, 97, 105, 105, 111, 111, 123, 123, 126, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, 115, 115, -1, -1, 114, 114, -1, -1, 100, 100, -1, -1, 116, 116, -1, -1, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 62, 62, 91, 91, 97, 97, 105, 105, 111, 111, 123, 123, 126, 126, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, 115, 115, -1, -1, 114, 114, -1, -1, 100, 100, -1, -1, 116, 116, -1, -1, 44, 44, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 44, 44, 60, 60, 62, 62, 105, 105, 10, 10, 13, 13, -1, -1, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 60, 60, 62, 62, 105, 105, 10, 10, 13, 13, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 62, 62, 91, 91, 105, 105, 123, 123, 125, 125, 126, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 32, 32, 35, 35, 47, 47, 93, 93, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 42, 42, 43, 43, 45, 45, 46, 46, 47, 47, 60, 60, 62, 62, 91, 91, 93, 93, 105, 105, 123, 123, 126, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 101, 101, -1, -1, -1, -1, 110, 110, -1, -1, 100, 100, -1, -1, 99, 99, -1, -1, 108, 108, -1, -1, 97, 97, -1, -1, 115, 115, -1, -1, 115, 115, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 64, 64, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 65, 90, 97, 122, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 45, 45, 47, 47, 48, 48, 49, 57, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 42, 42, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 48, 57, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 34, 34, 39, 39, 10, 10, 13, 13, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 61, 61, 62, 62, 91, 91, 93, 93, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 102, 102, 110, 110, 116, 116, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 101, 103, 109, 111, 115, 117, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 118, 118, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, 97, 97, -1, -1, 108, 108, -1, -1, 117, 117, -1, -1, 101, 101, -1, -1, 115, 115, -1, -1, 41, 41, -1, -1, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 60, 60, 62, 62, 91, 91, 93, 93, 97, 97, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 111, 111, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 98, 98, 100, 100, 104, 104, 106, 109, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 48, 57, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 108, 108, 110, 110, 48, 57, 65, 90, 95, 95, 97, 107, 109, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 105, 105, 115, 115, 48, 57, 65, 90, 95, 95, 97, 104, 106, 114, 116, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 41, 41, 10, 10, 13, 13, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 34, 34, 39, 39, 48, 48, 49, 57, 91, 91, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 48, 57, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 32, 32, 35, 35, 47, 47, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 44, 44, 60, 60, 62, 62, 105, 105, 125, 125, 10, 10, 13, 13, -1, -1, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 34, 34, 39, 39, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 46, 46, 60, 60, 62, 62, 105, 105, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, -1, -1, 46, 46, -1, -1, 115, 115, -1, -1, 116, 116, -1, -1, 101, 101, -1, -1, -1, -1, -1, -1, -1, -1, 108, 108, 110, 110, -1, -1, 105, 105, 115, 115, -1, -1, 100, 100, -1, -1, 102, 102, -1, -1, 105, 105, -1, -1, 102, 102, -1, -1, 101, 101, -1, -1, 40, 40, 102, 102, 116, 116, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 97, 97, -1, -1, 114, 114, -1, -1, 108, 108, -1, -1, 117, 117, -1, -1, 115, 115, -1, -1, 101, 101, -1, -1, 101, 101, -1, -1, 101, 101, -1, -1, -1, -1, 110, 110, -1, -1, 100, 100, -1, -1, 102, 102, -1, -1, 117, 117, -1, -1, 99, 99, -1, -1, 116, 116, -1, -1, 105, 105, -1, -1, 111, 111, -1, -1, 110, 110, -1, -1, 110, 110, -1, -1, 41, 41, 44, 44, -1, -1, -1, -1, -1, -1, 41, 41, 44, 44, 10, 10, 13, 13, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 45, 45, 10, 10, 13, 13, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 62, 62, -1, -1, 101, 101, -1, -1, -1, -1, 110, 110, -1, -1, 100, 100, -1, -1, 119, 119, -1, -1, 104, 104, -1, -1, 105, 105, -1, -1, 108, 108, -1, -1, 101, 101, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 10, 10, 13, 13, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 48, 57, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 109, 109, 48, 57, 65, 90, 95, 95, 97, 108, 110, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 60, 60, 62, 62, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 45, 45, 47, 47, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 42, 42, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 48, 57, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 65, 90, 95, 95, 97, 122, -1, -1, 10, 10, 13, 13, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 44, 44, 93, 93, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 42, 42, 43, 43, 44, 44, 45, 45, 47, 47, 93, 93, 126, 126, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 34, 34, 39, 39, 40, 40, 44, 44, 45, 45, 48, 48, 49, 57, 91, 91, 93, 93, 10, 10, 13, 13, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 48, 57, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 48, 57, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 101, 101, -1, -1, -1, -1, 110, 110, -1, -1, 100, 100, -1, -1, 109, 109, -1, -1, 116, 116, -1, -1, 104, 104, -1, -1, 111, 111, -1, -1, 101, 101, -1, -1, 100, 100, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 60, 60, 62, 62, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 115, 115, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 114, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, 61, 61, -1, -1, 61, 61, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 114, 116, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 101, 101, -1, -1, -1, -1, 110, 110, -1, -1, 100, 100, -1, -1, 102, 102, -1, -1, 111, 111, -1, -1, 114, 114, -1, -1, 101, 101, -1, -1, -1, -1, 110, 110, -1, -1, 100, 100, -1, -1, 105, 105, -1, -1, 102, 102, -1, -1, 41, 41, 97, 97, 111, 111, -1, -1, -1, -1, -1, -1, -1, -1, 110, 110, -1, -1, 114, 114, -1, -1, 100, 100, -1, -1, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 47, 47, 93, 93, 126, 126, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 41, 41, 42, 42, 43, 43, 45, 45, 47, 47, 126, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, -1, 32, 32, 35, 35, 47, 47, 101, 101, 109, 109, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 65535, -1, -1, 42, 42, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 110, 110, -1, -1, 101, 101, -1, -1, 42, 42, 0, 41, 43, 65535, -1, -1, 100, 100, -1, -1, 116, 116, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 65535, -1, -1, 99, 99, -1, -1, 104, 104, -1, -1, 108, 108, -1, -1, 111, 111, -1, -1, 97, 97, -1, -1, 115, 115, -1, -1, 115, 115, -1, -1, 100, 100, -1, -1, 34, 34, 39, 39, 40, 40, 45, 45, 48, 48, 49, 57, 91, 91, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 110, 110, 112, 112, 116, 116, 119, 119, 123, 123, 10, 10, 13, 13, 65, 90, 95, 95, 97, 98, 100, 100, 104, 104, 106, 109, 111, 111, 113, 115, 117, 118, 120, 122, -1, -1, -1, -1, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 46, 46, 48, 57, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 97, 97, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 116, 118, 122, -1, -1, 48, 57, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 102, 102, 109, 109, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 110, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 65535, -1, -1, 101, 101, 111, 111, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 65535, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1
_dfa_trans_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 18714 ; itemsCnt
dw 1, 25, 30, 34, 2, 3, 36, 4, 27, 5, 6, 28, 33, 35, 37, 39, 69, 41, 7, 8, 8, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, -1, -1, -1, -1, 40, 27, 42, -1, -1, 45, 47, 43, 43, 43, 43, 43, 43, -1, -1, 8, 8, -1, -1, 10, 10, 44, 44, 44, 44, -1, 43, 43, 43, 43, -1, 12, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 9, 10, 10, 25, 25, 25, 25, -1, 26, 26, 30, 30, 30, -1, 40, 27, -1, 68, 49, 71, 43, 43, 43, 43, 43, 43, -1, 29, 29, 46, 46, 46, 46, -1, 26, 26, 30, 30, 30, -1, 48, 38, 38, -1, 32, 32, 32, -1, 50, 43, 43, 43, 43, 43, -1, 9, 29, 29, 34, 34, 34, 34, -1, 11, 51, 43, 43, 43, 43, 43, 43, -1, 38, -1, 52, 53, 43, 43, 43, 43, 43, 43, -1, 48, 38, 38, -1, 54, 43, 43, 43, 43, 43, -1, 12, -1, 56, 43, 43, 43, 43, 43, -1, 32, 32, 32, -1, 43, 43, 43, 43, -1, 10, 10, 44, 44, 44, 44, -1, 57, 43, 43, 43, 43, -1, 29, 29, 46, 46, 46, 46, -1, 73, 43, 43, 43, 43, 43, -1, 48, 31, 38, 38, 38, -1, 13, 43, 43, 43, 43, 43, -1, 59, 43, 43, 43, 43, 43, -1, 72, 43, 43, 43, 43, 43, -1, 14, 43, 43, 43, 43, 43, -1, 15, 43, 43, 43, 43, 43, -1, 77, 43, 43, 43, 43, 43, -1, 60, 43, 43, 43, 43, 43, -1, 75, 43, 43, 43, 43, 43, -1, 61, 43, 43, 43, 43, 43, -1, 64, 43, 43, 43, 43, 43, -1, 70, 43, 43, 43, 43, 43, -1, 16, 43, 43, 43, 43, 43, -1, 17, 43, 43, 43, 43, 43, -1, 18, 43, 43, 43, 43, 43, -1, 19, 43, 43, 43, 43, 43, -1, 67, 43, 43, 43, 43, 43, -1, 20, 43, 43, 43, 43, 43, -1, 21, 43, 43, 43, 43, 43, -1, 78, 43, 43, 43, 43, 43, -1, 79, 43, 43, 43, 43, 43, -1, 55, 43, 43, 43, 43, 43, -1, 80, 43, 43, 43, 43, -1, 58, 43, 43, 43, 43, 43, -1, 76, 43, 43, 43, 43, 43, -1, 62, 43, 43, 43, 43, 43, -1, 23, 43, 43, 43, 43, 43, -1, 66, 43, 43, 43, 43, 43, -1, 74, 43, 43, 43, 43, 43, -1, 65, 43, 43, 43, 43, 43, -1, 81, 43, 43, 43, 43, 43, -1, 63, 43, 43, 43, 43, 43, -1, 22, 43, 43, 43, 43, 43, -1, 24, 43, 43, 43, 43, 43, -1, 24, 28, 1, 2, 3, 25, 4, 5, 26, 30, 32, 34, 36, 62, 38, 6, 7, 7, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, -1, -1, -1, 31, 25, 33, -1, -1, 40, 41, 39, 39, 39, 39, 39, 39, -1, -1, 7, 7, -1, -1, 9, 9, 35, 35, 35, 35, -1, 39, 39, 39, 39, -1, 11, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 8, 9, 9, 24, 24, 24, 24, -1, 31, 25, -1, 61, 42, 64, 39, 39, 39, 39, 39, 39, -1, 27, 27, 37, 37, 37, 37, -1, 8, 27, 27, 28, 28, 28, 28, -1, 29, 29, 29, -1, 43, 39, 39, 39, 39, 39, -1, 11, -1, 10, 44, 39, 39, 39, 39, 39, 39, -1, 29, 29, 29, -1, 45, 46, 39, 39, 39, 39, 39, 39, -1, 9, 9, 35, 35, 35, 35, -1, 47, 39, 39, 39, 39, 39, -1, 27, 27, 37, 37, 37, 37, -1, 49, 39, 39, 39, 39, 39, -1, 39, 39, 39, 39, -1, 50, 39, 39, 39, 39, -1, 66, 39, 39, 39, 39, 39, -1, 12, 39, 39, 39, 39, 39, -1, 52, 39, 39, 39, 39, 39, -1, 65, 39, 39, 39, 39, 39, -1, 13, 39, 39, 39, 39, 39, -1, 14, 39, 39, 39, 39, 39, -1, 70, 39, 39, 39, 39, 39, -1, 53, 39, 39, 39, 39, 39, -1, 68, 39, 39, 39, 39, 39, -1, 54, 39, 39, 39, 39, 39, -1, 57, 39, 39, 39, 39, 39, -1, 63, 39, 39, 39, 39, 39, -1, 15, 39, 39, 39, 39, 39, -1, 16, 39, 39, 39, 39, 39, -1, 17, 39, 39, 39, 39, 39, -1, 18, 39, 39, 39, 39, 39, -1, 60, 39, 39, 39, 39, 39, -1, 19, 39, 39, 39, 39, 39, -1, 20, 39, 39, 39, 39, 39, -1, 71, 39, 39, 39, 39, 39, -1, 72, 39, 39, 39, 39, 39, -1, 48, 39, 39, 39, 39, 39, -1, 73, 39, 39, 39, 39, -1, 51, 39, 39, 39, 39, 39, -1, 69, 39, 39, 39, 39, 39, -1, 55, 39, 39, 39, 39, 39, -1, 22, 39, 39, 39, 39, 39, -1, 59, 39, 39, 39, 39, 39, -1, 67, 39, 39, 39, 39, 39, -1, 58, 39, 39, 39, 39, 39, -1, 74, 39, 39, 39, 39, 39, -1, 56, 39, 39, 39, 39, 39, -1, 21, 39, 39, 39, 39, 39, -1, 23, 39, 39, 39, 39, 39, -1, 1, 65, 71, 76, 2, 3, 4, 5, 6, 7, 8, 9, 10, 67, 11, 12, 13, 14, 15, 16, 17, 18, 69, 75, 78, 81, 84, 87, 139, 90, 93, 96, 98, 141, 100, 102, 19, 20, 21, 22, 22, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, -1, -1, -1, -1, -1, -1, -1, 25, -1, 26, -1, 79, 27, -1, 82, 67, 85, -1, -1, 28, -1, -1, 29, -1, 68, 74, 77, 77, -1, -1, -1, 104, 103, 103, 103, 103, 103, -1, -1, -1, -1, 22, 22, -1, -1, 24, 24, 88, 88, 88, 88, -1, -1, -1, -1, -1, -1, 103, 103, 103, 103, -1, 170, 103, 103, 103, 103, 103, -1, 124, 103, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 34, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 77, 77, -1, 103, 103, 103, 103, -1, 77, 77, -1, 23, 24, 24, 65, 65, 65, 65, -1, 66, 66, 71, 71, 71, -1, 82, 67, -1, 80, 77, 77, 77, -1, 105, 135, 103, 103, 103, 103, 103, 103, -1, 70, 70, 91, 91, 91, 91, -1, 66, 66, 71, 71, 71, -1, 94, 79, 79, -1, 73, 73, 73, -1, 136, 77, 77, 77, -1, 106, 107, 181, 103, 103, 103, 103, 103, 103, 103, -1, 23, 70, 70, 76, 76, 76, 76, -1, 77, 77, -1, 138, 108, 147, 103, 103, 103, 103, 103, 103, -1, 94, 79, 79, -1, 83, 77, 77, 77, -1, 109, 103, 103, 103, 103, 103, -1, 34, -1, 89, 77, 77, 77, -1, 30, 110, 31, 32, 103, 103, 103, 103, 103, 103, 103, -1, 73, 73, 73, -1, 92, 77, 77, 77, -1, 111, 103, 103, 103, 103, 103, -1, 24, 24, 88, 88, 88, 88, -1, 95, 77, 77, 77, -1, 113, 114, 103, 103, 103, 103, 103, 103, -1, 70, 70, 91, 91, 91, 91, -1, 180, 77, 77, 77, -1, 33, 103, 103, 103, 103, 103, -1, 94, 72, 79, 79, 79, -1, 97, 77, 77, 77, -1, 115, 103, 103, 103, 103, 103, -1, 99, 77, 77, -1, 151, 103, 103, 103, 103, 103, -1, 137, 77, 77, 77, -1, 150, 103, 103, 103, 103, -1, 140, 77, 77, 77, -1, 117, 103, 103, 103, 103, 103, -1, 103, 103, 103, 103, -1, 35, 103, 103, 103, 103, 103, -1, 118, 103, 103, 103, 103, -1, 119, 158, 103, 103, 103, 103, 103, 103, -1, 120, 103, 103, 103, 103, 103, -1, 36, 103, 103, 103, 103, 103, -1, 123, 103, 103, 103, 103, 103, -1, 144, 103, 103, 103, 103, 103, -1, 125, 103, 103, 103, 103, 103, -1, 142, 103, 103, 103, 103, 103, -1, 37, 103, 103, 103, 103, 103, -1, 38, 103, 103, 103, 103, 103, -1, 156, 103, 103, 103, 103, 103, -1, 173, 103, 103, 103, 103, 103, -1, 157, 103, 103, 103, 103, 103, -1, 127, 103, 103, 103, 103, 103, -1, 39, 103, 103, 103, 103, 103, -1, 164, 129, 130, 192, 193, 103, 103, 103, 103, 103, 103, 103, 103, 103, -1, 175, 103, 103, 103, 103, 103, -1, 131, 103, 103, 103, 103, 103, -1, 183, 103, 103, 103, 103, 103, -1, 41, 103, 103, 103, 103, 103, -1, 42, 103, 103, 103, 103, 103, -1, 43, 103, 103, 103, 103, 103, -1, 45, 103, 103, 103, 103, 103, -1, 46, 103, 103, 103, 103, 103, -1, 159, 196, 103, 103, 103, 103, 103, 103, -1, 47, 103, 103, 103, 103, 103, -1, 134, 103, 103, 103, 103, 103, -1, 178, 103, 103, 103, 103, 103, -1, 49, 103, 103, 103, 103, 103, -1, 161, 103, 103, 103, 103, 103, -1, 145, 103, 103, 103, 103, 103, -1, 86, 77, 77, 77, -1, 62, 77, 77, 77, -1, 121, 103, 103, 103, 103, 103, -1, 112, 103, 103, 103, 103, 103, -1, 182, 77, 77, 77, -1, 116, 103, 103, 103, 103, 103, -1, 154, 103, 103, 103, 103, 103, -1, 167, 103, 103, 103, 103, 103, -1, 152, 103, 103, 103, 103, 103, -1, 128, 103, 103, 103, 103, 103, -1, 53, 103, 103, 103, 103, 103, -1, 122, 103, 103, 103, 103, 103, -1, 101, 77, 77, 77, -1, 64, 77, 77, 77, -1, 185, 103, 103, 103, 103, 103, -1, 126, 103, 103, 103, 103, 103, -1, 146, 103, 103, 103, 103, 103, -1, 54, 103, 103, 103, 103, 103, -1, 153, 103, 103, 103, 103, 103, -1, 55, 103, 103, 103, 103, 103, -1, 133, 103, 103, 103, 103, 103, -1, 177, 103, 103, 103, 103, 103, -1, 40, 103, 103, 103, 103, 103, -1, 51, 103, 103, 103, 103, 103, -1, 61, 103, 103, 103, 103, 103, -1, 168, 103, 103, 103, 103, 103, -1, 174, 103, 103, 103, 103, 103, -1, 143, 103, 103, 103, 103, 103, -1, 184, 103, 103, 103, 103, 103, -1, 163, 103, 103, 103, 103, 103, -1, 160, 103, 103, 103, 103, 103, -1, 56, 103, 103, 103, 103, 103, -1, 60, 103, 103, 103, 103, 103, -1, 52, 103, 103, 103, 103, 103, -1, 132, 103, 103, 103, 103, 103, -1, 57, 103, 103, 103, 103, 103, -1, 63, 103, 103, 103, 103, 103, -1, 44, 103, 103, 103, 103, 103, -1, 58, 103, 103, 103, 103, 103, -1, 48, 103, 103, 103, 103, 103, -1, 155, 103, 103, 103, 103, 103, -1, 50, 103, 103, 103, 103, 103, -1, 171, 103, 103, 103, 103, 103, -1, 59, 103, 103, 103, 103, 103, -1, 148, 77, 77, 77, -1, 165, 103, 103, 103, 103, 103, -1, 149, 77, 77, 77, -1, 169, 103, 103, 103, 103, -1, 162, 103, 103, 103, 103, -1, 176, 103, 103, 103, 103, 103, -1, 166, 103, 103, 103, 103, 103, -1, 179, 103, 103, 103, 103, 103, -1, 172, 103, 103, 103, 103, 103, -1, 186, 103, 103, 103, 103, 103, -1, 187, 103, 103, 103, 103, 103, -1, 188, 103, 103, 103, 103, 103, -1, 189, 103, 103, 103, 103, 103, -1, 190, 103, 103, 103, 103, 103, -1, 191, 103, 103, 103, 103, 103, -1, 194, 103, 103, 103, 103, 103, -1, 195, 103, 103, 103, 103, 103, -1, 1, 38, 43, 47, 2, 3, 4, 5, 49, 6, 40, 7, 8, 9, 41, 46, 48, 50, 52, 54, 56, 90, 58, 10, 11, 12, 12, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, 53, 40, 55, -1, -1, -1, 62, 63, 60, 60, 60, 60, 60, 60, -1, -1, -1, 12, 12, -1, -1, 14, 14, 57, 57, 57, 57, -1, 60, 60, 60, 60, -1, 16, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 13, 14, 14, 38, 38, 38, 38, -1, 39, 39, 43, 43, 43, -1, 53, 40, -1, 64, 65, 60, 60, 60, 60, 60, 60, -1, 42, 42, 59, 59, 59, 59, -1, 39, 39, 43, 43, 43, -1, 61, 51, 51, -1, 45, 45, 45, -1, 88, 66, 93, 60, 60, 60, 60, 60, 60, -1, 13, 42, 42, 47, 47, 47, 47, -1, 67, 60, 60, 60, 60, 60, -1, 51, -1, 15, 68, 60, 60, 60, 60, 60, 60, -1, 61, 51, 51, -1, 69, 60, 60, 60, 60, 60, -1, 16, -1, 70, 71, 60, 60, 60, 60, 60, 60, -1, 45, 45, 45, -1, 72, 60, 60, 60, 60, 60, -1, 14, 14, 57, 57, 57, 57, -1, 74, 60, 60, 60, 60, 60, -1, 42, 42, 59, 59, 59, 59, -1, 60, 60, 60, 60, -1, 61, 44, 51, 51, 51, -1, 75, 60, 60, 60, 60, -1, 96, 60, 60, 60, 60, 60, -1, 76, 89, 60, 60, 60, 60, 60, 60, -1, 77, 60, 60, 60, 60, 60, -1, 17, 60, 60, 60, 60, 60, -1, 80, 60, 60, 60, 60, 60, -1, 95, 60, 60, 60, 60, 60, -1, 91, 60, 60, 60, 60, 60, -1, 18, 60, 60, 60, 60, 60, -1, 19, 60, 60, 60, 60, 60, -1, 101, 60, 60, 60, 60, 60, -1, 99, 60, 60, 60, 60, 60, -1, 98, 60, 60, 60, 60, 60, -1, 81, 60, 60, 60, 60, 60, -1, 20, 60, 60, 60, 60, 60, -1, 105, 83, 84, 124, 125, 60, 60, 60, 60, 60, 60, 60, 60, 60, -1, 106, 60, 60, 60, 60, 60, -1, 85, 60, 60, 60, 60, 60, -1, 92, 60, 60, 60, 60, 60, -1, 23, 60, 60, 60, 60, 60, -1, 24, 60, 60, 60, 60, 60, -1, 107, 127, 60, 60, 60, 60, 60, 60, -1, 25, 60, 60, 60, 60, 60, -1, 87, 60, 60, 60, 60, 60, -1, 27, 60, 60, 60, 60, 60, -1, 109, 60, 60, 60, 60, 60, -1, 78, 60, 60, 60, 60, 60, -1, 21, 60, 60, 60, 60, 60, -1, 73, 60, 60, 60, 60, 60, -1, 103, 60, 60, 60, 60, 60, -1, 111, 60, 60, 60, 60, -1, 79, 60, 60, 60, 60, 60, -1, 32, 60, 60, 60, 60, 60, -1, 100, 60, 60, 60, 60, 60, -1, 82, 60, 60, 60, 60, 60, -1, 31, 60, 60, 60, 60, 60, -1, 112, 60, 60, 60, 60, 60, -1, 22, 60, 60, 60, 60, 60, -1, 97, 60, 60, 60, 60, 60, -1, 86, 60, 60, 60, 60, 60, -1, 36, 60, 60, 60, 60, 60, -1, 94, 60, 60, 60, 60, 60, -1, 110, 60, 60, 60, 60, 60, -1, 117, 60, 60, 60, 60, 60, -1, 26, 60, 60, 60, 60, 60, -1, 29, 60, 60, 60, 60, 60, -1, 35, 60, 60, 60, 60, 60, -1, 108, 60, 60, 60, 60, 60, -1, 33, 60, 60, 60, 60, 60, -1, 30, 60, 60, 60, 60, 60, -1, 28, 60, 60, 60, 60, 60, -1, 37, 60, 60, 60, 60, 60, -1, 102, 60, 60, 60, 60, 60, -1, 34, 60, 60, 60, 60, 60, -1, 113, 60, 60, 60, 60, 60, -1, 104, 60, 60, 60, 60, -1, 116, 60, 60, 60, 60, 60, -1, 114, 60, 60, 60, 60, 60, -1, 115, 60, 60, 60, 60, 60, -1, 119, 60, 60, 60, 60, 60, -1, 120, 60, 60, 60, 60, 60, -1, 118, 60, 60, 60, 60, 60, -1, 121, 60, 60, 60, 60, 60, -1, 122, 60, 60, 60, 60, 60, -1, 123, 60, 60, 60, 60, 60, -1, 126, 60, 60, 60, 60, 60, -1, 1, 48, 53, 57, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50, 11, 12, 13, 14, 15, 16, 51, 56, 58, 60, 62, 64, 66, 95, 68, 70, 17, 18, 19, 20, 20, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, 59, 24, -1, 61, 50, 63, -1, 25, -1, -1, 26, -1, -1, -1, 72, 73, 71, 71, 71, 71, 71, 71, -1, -1, -1, -1, 20, 20, -1, -1, 22, 22, 65, 65, 65, 65, -1, -1, -1, -1, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 104, 71, 71, 71, 71, 71, -1, 30, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 21, 22, 22, 48, 48, 48, 48, -1, 49, 49, 53, 53, 53, -1, 61, 50, -1, 74, 96, 71, 71, 71, 71, 71, 71, -1, 52, 52, 67, 67, 67, 67, -1, 49, 49, 53, 53, 53, -1, 69, 59, 59, -1, 55, 55, 55, -1, 94, 75, 97, 71, 71, 71, 71, 71, 71, -1, 21, 52, 52, 57, 57, 57, 57, -1, 76, 71, 71, 71, 71, 71, -1, 69, 59, 59, -1, 27, 77, 28, 29, 71, 71, 71, 71, 71, 71, 71, -1, 30, -1, 78, 79, 71, 71, 71, 71, 71, 71, -1, 55, 55, 55, -1, 80, 71, 71, 71, 71, 71, -1, 22, 22, 65, 65, 65, 65, -1, 81, 71, 71, 71, 71, 71, -1, 52, 52, 67, 67, 67, 67, -1, 102, 71, 71, 71, 71, -1, 69, 54, 59, 59, 59, -1, 83, 71, 71, 71, 71, 71, -1, 71, 71, 71, 71, -1, 84, 71, 71, 71, 71, -1, 85, 71, 71, 71, 71, 71, -1, 86, 71, 71, 71, 71, 71, -1, 31, 71, 71, 71, 71, 71, -1, 90, 71, 71, 71, 71, 71, -1, 99, 71, 71, 71, 71, 71, -1, 32, 71, 71, 71, 71, 71, -1, 33, 71, 71, 71, 71, 71, -1, 105, 71, 71, 71, 71, 71, -1, 91, 71, 71, 71, 71, 71, -1, 100, 71, 71, 71, 71, 71, -1, 109, 71, 71, 71, 71, 71, -1, 92, 71, 71, 71, 71, 71, -1, 111, 71, 71, 71, 71, 71, -1, 122, 71, 71, 71, 71, 71, -1, 112, 71, 71, 71, 71, 71, -1, 107, 71, 71, 71, 71, 71, -1, 115, 71, 71, 71, 71, 71, -1, 120, 71, 71, 71, 71, 71, -1, 35, 71, 71, 71, 71, 71, -1, 37, 71, 71, 71, 71, 71, -1, 106, 71, 71, 71, 71, 71, -1, 88, 71, 71, 71, 71, 71, -1, 82, 71, 71, 71, 71, 71, -1, 87, 71, 71, 71, 71, 71, -1, 89, 71, 71, 71, 71, 71, -1, 108, 71, 71, 71, 71, 71, -1, 103, 71, 71, 71, 71, 71, -1, 36, 71, 71, 71, 71, 71, -1, 45, 71, 71, 71, 71, 71, -1, 121, 71, 71, 71, 71, 71, -1, 119, 71, 71, 71, 71, 71, -1, 34, 71, 71, 71, 71, 71, -1, 118, 71, 71, 71, 71, 71, -1, 116, 71, 71, 71, 71, 71, -1, 39, 71, 71, 71, 71, 71, -1, 46, 71, 71, 71, 71, 71, -1, 117, 71, 71, 71, 71, 71, -1, 42, 71, 71, 71, 71, 71, -1, 38, 71, 71, 71, 71, 71, -1, 98, 71, 71, 71, 71, 71, -1, 101, 71, 71, 71, 71, 71, -1, 43, 71, 71, 71, 71, 71, -1, 93, 71, 71, 71, 71, 71, -1, 47, 71, 71, 71, 71, 71, -1, 41, 71, 71, 71, 71, 71, -1, 40, 71, 71, 71, 71, 71, -1, 44, 71, 71, 71, 71, 71, -1, 114, 71, 71, 71, 71, -1, 113, 71, 71, 71, 71, 71, -1, 110, 71, 71, 71, 71, 71, -1, 1, 45, 50, 54, 2, 3, 4, 5, 6, 7, 8, 9, 10, 47, 11, 12, 13, 14, 15, 16, 48, 53, 55, 57, 59, 61, 63, 90, 65, 17, 18, 19, 20, 20, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, 56, 24, -1, 58, 47, 60, -1, -1, 25, -1, 26, -1, -1, -1, 68, 88, 67, 67, 67, 67, 67, 67, -1, -1, -1, -1, 20, 20, -1, -1, 22, 22, 62, 62, 62, 62, -1, -1, -1, -1, -1, 67, 67, 67, 67, -1, 91, 67, 67, 67, 67, 67, -1, 29, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 21, 22, 22, 45, 45, 45, 45, -1, 46, 46, 50, 50, 50, -1, 58, 47, -1, 69, 67, 67, 67, 67, 67, -1, 49, 49, 64, 64, 64, 64, -1, 46, 46, 50, 50, 50, -1, 66, 56, 56, -1, 52, 52, 52, -1, 89, 70, 95, 67, 67, 67, 67, 67, 67, -1, 21, 49, 49, 54, 54, 54, 54, -1, 71, 67, 67, 67, 67, 67, -1, 66, 56, 56, -1, 27, 72, 28, 67, 67, 67, 67, 67, 67, 67, -1, 29, -1, 73, 74, 67, 67, 67, 67, 67, 67, -1, 52, 52, 52, -1, 75, 67, 67, 67, 67, 67, -1, 22, 22, 62, 62, 62, 62, -1, 76, 67, 67, 67, 67, 67, -1, 49, 49, 64, 64, 64, 64, -1, 78, 67, 67, 67, 67, 67, -1, 66, 51, 56, 56, 56, -1, 67, 67, 67, 67, -1, 79, 67, 67, 67, 67, -1, 81, 67, 67, 67, 67, 67, -1, 30, 67, 67, 67, 67, 67, -1, 84, 67, 67, 67, 67, 67, -1, 93, 67, 67, 67, 67, 67, -1, 31, 67, 67, 67, 67, 67, -1, 32, 67, 67, 67, 67, 67, -1, 101, 67, 67, 67, 67, 67, -1, 85, 67, 67, 67, 67, 67, -1, 94, 67, 67, 67, 67, 67, -1, 96, 67, 67, 67, 67, 67, -1, 86, 67, 67, 67, 67, 67, -1, 98, 67, 67, 67, 67, 67, -1, 109, 67, 67, 67, 67, 67, -1, 100, 67, 67, 67, 67, 67, -1, 104, 67, 67, 67, 67, 67, -1, 92, 67, 67, 67, 67, 67, -1, 34, 67, 67, 67, 67, 67, -1, 36, 67, 67, 67, 67, 67, -1, 99, 67, 67, 67, 67, 67, -1, 80, 67, 67, 67, 67, 67, -1, 82, 67, 67, 67, 67, 67, -1, 77, 67, 67, 67, 67, 67, -1, 33, 67, 67, 67, 67, 67, -1, 102, 67, 67, 67, 67, -1, 97, 67, 67, 67, 67, 67, -1, 35, 67, 67, 67, 67, 67, -1, 83, 67, 67, 67, 67, 67, -1, 105, 67, 67, 67, 67, 67, -1, 108, 67, 67, 67, 67, 67, -1, 37, 67, 67, 67, 67, 67, -1, 106, 67, 67, 67, 67, 67, -1, 38, 67, 67, 67, 67, 67, -1, 107, 67, 67, 67, 67, 67, -1, 42, 67, 67, 67, 67, 67, -1, 41, 67, 67, 67, 67, 67, -1, 87, 67, 67, 67, 67, 67, -1, 40, 67, 67, 67, 67, 67, -1, 44, 67, 67, 67, 67, 67, -1, 39, 67, 67, 67, 67, 67, -1, 43, 67, 67, 67, 67, 67, -1, 103, 67, 67, 67, 67, 67, -1, 1, 44, 49, 53, 2, 3, 4, 5, 6, 7, 8, 9, 10, 46, 11, 12, 13, 14, 15, 47, 52, 54, 56, 58, 60, 62, 89, 64, 16, 17, 18, 19, 19, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, 55, 23, -1, 57, 46, 59, -1, 24, -1, 25, -1, -1, -1, 67, 87, 66, 66, 66, 66, 66, 66, -1, -1, -1, -1, 19, 19, -1, -1, 21, 21, 61, 61, 61, 61, -1, -1, -1, -1, -1, 66, 66, 66, 66, -1, 90, 66, 66, 66, 66, 66, -1, 28, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 66, 66, 66, 66, -1, 20, 21, 21, 44, 44, 44, 44, -1, 45, 45, 49, 49, 49, -1, 57, 46, -1, 68, 66, 66, 66, 66, 66, -1, 48, 48, 63, 63, 63, 63, -1, 45, 45, 49, 49, 49, -1, 65, 55, 55, -1, 51, 51, 51, -1, 88, 69, 94, 66, 66, 66, 66, 66, 66, -1, 20, 48, 48, 53, 53, 53, 53, -1, 70, 66, 66, 66, 66, 66, -1, 65, 55, 55, -1, 26, 71, 27, 66, 66, 66, 66, 66, 66, 66, -1, 28, -1, 72, 73, 66, 66, 66, 66, 66, 66, -1, 51, 51, 51, -1, 74, 66, 66, 66, 66, 66, -1, 21, 21, 61, 61, 61, 61, -1, 75, 66, 66, 66, 66, 66, -1, 48, 48, 63, 63, 63, 63, -1, 77, 66, 66, 66, 66, 66, -1, 65, 50, 55, 55, 55, -1, 66, 66, 66, 66, -1, 78, 66, 66, 66, 66, -1, 80, 66, 66, 66, 66, 66, -1, 29, 66, 66, 66, 66, 66, -1, 83, 66, 66, 66, 66, 66, -1, 92, 66, 66, 66, 66, 66, -1, 30, 66, 66, 66, 66, 66, -1, 31, 66, 66, 66, 66, 66, -1, 100, 66, 66, 66, 66, 66, -1, 84, 66, 66, 66, 66, 66, -1, 93, 66, 66, 66, 66, 66, -1, 95, 66, 66, 66, 66, 66, -1, 85, 66, 66, 66, 66, 66, -1, 97, 66, 66, 66, 66, 66, -1, 108, 66, 66, 66, 66, 66, -1, 99, 66, 66, 66, 66, 66, -1, 103, 66, 66, 66, 66, 66, -1, 91, 66, 66, 66, 66, 66, -1, 33, 66, 66, 66, 66, 66, -1, 35, 66, 66, 66, 66, 66, -1, 98, 66, 66, 66, 66, 66, -1, 79, 66, 66, 66, 66, 66, -1, 81, 66, 66, 66, 66, 66, -1, 76, 66, 66, 66, 66, 66, -1, 32, 66, 66, 66, 66, 66, -1, 101, 66, 66, 66, 66, -1, 96, 66, 66, 66, 66, 66, -1, 34, 66, 66, 66, 66, 66, -1, 82, 66, 66, 66, 66, 66, -1, 104, 66, 66, 66, 66, 66, -1, 107, 66, 66, 66, 66, 66, -1, 36, 66, 66, 66, 66, 66, -1, 105, 66, 66, 66, 66, 66, -1, 37, 66, 66, 66, 66, 66, -1, 106, 66, 66, 66, 66, 66, -1, 41, 66, 66, 66, 66, 66, -1, 40, 66, 66, 66, 66, 66, -1, 86, 66, 66, 66, 66, 66, -1, 39, 66, 66, 66, 66, 66, -1, 43, 66, 66, 66, 66, 66, -1, 38, 66, 66, 66, 66, 66, -1, 42, 66, 66, 66, 66, 66, -1, 102, 66, 66, 66, 66, 66, -1, 1, 15, 20, 24, 2, 3, 26, 4, 17, 5, 6, 18, 23, 7, 25, 25, 25, 25, 25, 25, -1, -1, -1, -1, 30, 17, 32, -1, -1, 27, 25, 25, 25, 25, -1, -1, -1, 9, 9, 34, 34, 34, 34, -1, 10, -1, 25, 25, 25, 25, -1, 25, 25, 25, 25, -1, 25, 25, 25, 25, -1, 25, 25, 25, 25, -1, 8, 9, 9, 15, 15, 15, 15, -1, 16, 16, 20, 20, 20, -1, 30, 17, -1, 29, 31, 25, 25, 25, 25, 25, 25, -1, 19, 19, 36, 36, 36, 36, -1, 16, 16, 20, 20, 20, -1, 38, 28, 28, -1, 22, 22, 22, -1, 33, 25, 25, 25, 25, 25, -1, 8, 19, 19, 24, 24, 24, 24, -1, 25, 25, 25, 25, -1, 28, -1, 35, 25, 25, 25, 25, 25, -1, 38, 28, 28, -1, 11, 25, 25, 25, 25, 25, -1, 10, -1, 12, 25, 25, 25, 25, 25, -1, 22, 22, 22, -1, 37, 25, 25, 25, 25, 25, -1, 9, 9, 34, 34, 34, 34, -1, 39, 25, 25, 25, 25, 25, -1, 19, 19, 36, 36, 36, 36, -1, 13, 25, 25, 25, 25, 25, -1, 38, 21, 28, 28, 28, -1, 14, 25, 25, 25, 25, 25, -1, 31, 35, 1, 2, 3, 32, 4, 5, 33, 37, 39, 41, 43, 45, 79, 46, 6, 7, 7, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, -1, -1, -1, 38, 32, 40, -1, -1, 48, 49, 47, 47, 47, 47, 47, 47, -1, -1, 7, 7, -1, -1, 9, 9, 42, 42, 42, 42, -1, 47, 47, 47, 47, -1, 11, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 8, 9, 9, 31, 31, 31, 31, -1, 38, 32, -1, 50, 51, 47, 47, 47, 47, 47, 47, -1, 34, 34, 44, 44, 44, 44, -1, 8, 34, 34, 35, 35, 35, 35, -1, 36, 36, 36, -1, 78, 52, 82, 47, 47, 47, 47, 47, 47, -1, 11, -1, 53, 47, 47, 47, 47, 47, -1, 36, 36, 36, -1, 10, 54, 47, 47, 47, 47, 47, 47, -1, 9, 9, 42, 42, 42, 42, -1, 55, 56, 47, 47, 47, 47, 47, 47, -1, 34, 34, 44, 44, 44, 44, -1, 57, 47, 47, 47, 47, 47, -1, 59, 47, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 60, 47, 47, 47, 47, -1, 85, 47, 47, 47, 47, 47, -1, 61, 62, 47, 47, 47, 47, 47, 47, -1, 63, 47, 47, 47, 47, 47, -1, 12, 47, 47, 47, 47, 47, -1, 65, 47, 47, 47, 47, 47, -1, 84, 47, 47, 47, 47, 47, -1, 13, 47, 47, 47, 47, 47, -1, 14, 47, 47, 47, 47, 47, -1, 90, 47, 47, 47, 47, 47, -1, 66, 47, 47, 47, 47, 47, -1, 88, 47, 47, 47, 47, 47, -1, 67, 47, 47, 47, 47, 47, -1, 15, 47, 47, 47, 47, 47, -1, 16, 47, 47, 47, 47, 47, -1, 69, 70, 71, 101, 47, 47, 47, 47, 47, 47, 47, 47, -1, 73, 47, 47, 47, 47, 47, -1, 81, 47, 47, 47, 47, 47, -1, 17, 47, 47, 47, 47, 47, -1, 18, 47, 47, 47, 47, 47, -1, 19, 47, 47, 47, 47, 47, -1, 94, 105, 47, 47, 47, 47, 47, 47, -1, 20, 47, 47, 47, 47, 47, -1, 76, 47, 47, 47, 47, 47, -1, 21, 47, 47, 47, 47, 47, -1, 77, 47, 47, 47, 47, 47, -1, 22, 47, 47, 47, 47, 47, -1, 23, 47, 47, 47, 47, 47, -1, 80, 47, 47, 47, 47, 47, -1, 91, 47, 47, 47, 47, 47, -1, 92, 47, 47, 47, 47, 47, -1, 58, 47, 47, 47, 47, 47, -1, 96, 47, 47, 47, 47, 47, -1, 93, 47, 47, 47, 47, -1, 64, 47, 47, 47, 47, 47, -1, 29, 47, 47, 47, 47, 47, -1, 89, 47, 47, 47, 47, 47, -1, 68, 47, 47, 47, 47, 47, -1, 27, 47, 47, 47, 47, 47, -1, 26, 47, 47, 47, 47, 47, -1, 75, 47, 47, 47, 47, 47, -1, 87, 47, 47, 47, 47, 47, -1, 74, 47, 47, 47, 47, 47, -1, 95, 47, 47, 47, 47, 47, -1, 72, 47, 47, 47, 47, 47, -1, 25, 47, 47, 47, 47, 47, -1, 24, 47, 47, 47, 47, 47, -1, 28, 47, 47, 47, 47, 47, -1, 83, 47, 47, 47, 47, 47, -1, 86, 47, 47, 47, 47, 47, -1, 30, 47, 47, 47, 47, 47, -1, 97, 47, 47, 47, 47, 47, -1, 98, 47, 47, 47, 47, 47, -1, 99, 47, 47, 47, 47, 47, -1, 100, 47, 47, 47, 47, 47, -1, 102, 47, 47, 47, 47, 47, -1, 103, 47, 47, 47, 47, 47, -1, 104, 47, 47, 47, 47, 47, -1, 1, 1, -1, 1, 1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 11, -1, -1, -1, -1, -1, 12, -1, 13, -1, 14, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, 18, -1, -1, 15, -1, 16, -1, 1, 3, 5, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, 4, 4, 3, 3, 3, -1, 4, 4, 3, 3, 3, -1, 7, -1, 8, 7, 7, -1, 8, 7, 7, -1, 8, 6, 7, 7, 7, -1, 1, 20, 26, 31, 2, 3, 34, 4, 22, 5, 6, 7, 8, 24, 30, 9, 10, 10, 33, 33, 33, 33, 33, 33, -1, -1, -1, -1, 40, 22, 43, -1, 23, 29, 32, 32, -1, -1, -1, 36, 33, 33, 33, 33, -1, -1, 10, 10, -1, -1, 12, 12, 46, 46, 46, 46, -1, 13, -1, 33, 33, 33, 33, -1, 33, 33, 33, 33, -1, 33, 33, 33, 33, -1, 33, 33, 33, 33, -1, 32, 32, -1, 32, 32, -1, 11, 12, 12, 20, 20, 20, 20, -1, 21, 21, 26, 26, 26, -1, 40, 22, -1, 35, 32, 32, 32, -1, 39, 42, 33, 33, 33, 33, 33, 33, -1, 25, 25, 49, 49, 49, 49, -1, 21, 21, 26, 26, 26, -1, 52, 37, 37, -1, 28, 28, 28, -1, 57, 32, 32, 32, -1, 45, 33, 33, 33, 33, 33, -1, 11, 25, 25, 31, 31, 31, 31, -1, 32, 32, -1, 33, 33, 33, 33, -1, 37, -1, 38, 32, 32, 32, -1, 48, 33, 33, 33, 33, 33, -1, 52, 37, 37, -1, 44, 32, 32, 32, -1, 14, 33, 33, 33, 33, 33, -1, 13, -1, 47, 32, 32, 32, -1, 15, 33, 33, 33, 33, 33, -1, 28, 28, 28, -1, 50, 32, 32, 32, -1, 51, 33, 33, 33, 33, 33, -1, 12, 12, 46, 46, 46, 46, -1, 62, 32, 32, 32, -1, 54, 33, 33, 33, 33, 33, -1, 25, 25, 49, 49, 49, 49, -1, 53, 32, 32, 32, -1, 16, 33, 33, 33, 33, 33, -1, 52, 27, 37, 37, 37, -1, 55, 32, 32, -1, 17, 33, 33, 33, 33, 33, -1, 58, 32, 32, 32, -1, 59, 32, 32, 32, -1, 41, 32, 32, 32, -1, 18, 32, 32, 32, -1, 63, 32, 32, 32, -1, 56, 32, 32, 32, -1, 19, 32, 32, 32, -1, 60, 32, 32, 32, -1, 61, 32, 32, 32, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, -1, -1, -1, -1, -1, 12, -1, 13, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, 15, -1, 16, -1, 1, -1, -1, 43, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, 10, 11, 12, 13, 14, 45, 49, 51, 53, 55, 57, 58, 83, 59, 15, 16, 17, 18, 18, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, 21, -1, 22, -1, 50, 44, 52, -1, 23, -1, 24, -1, -1, -1, 61, 81, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, 18, 18, -1, -1, 20, 20, 54, 54, 54, 54, -1, -1, -1, -1, -1, 60, 60, 60, 60, -1, 84, 60, 60, 60, 60, 60, -1, 27, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 19, 20, 20, 43, 43, 43, 43, -1, 50, 44, -1, 62, 60, 60, 60, 60, 60, -1, 46, 46, 56, 56, 56, 56, -1, 19, 46, 46, 47, 47, 47, 47, -1, 48, 48, 48, -1, 82, 63, 88, 60, 60, 60, 60, 60, 60, -1, 27, -1, 64, 60, 60, 60, 60, 60, -1, 48, 48, 48, -1, 25, 65, 26, 60, 60, 60, 60, 60, 60, 60, -1, 20, 20, 54, 54, 54, 54, -1, 66, 67, 60, 60, 60, 60, 60, 60, -1, 46, 46, 56, 56, 56, 56, -1, 68, 60, 60, 60, 60, 60, -1, 69, 60, 60, 60, 60, 60, -1, 71, 60, 60, 60, 60, 60, -1, 60, 60, 60, 60, -1, 72, 60, 60, 60, 60, -1, 74, 60, 60, 60, 60, 60, -1, 28, 60, 60, 60, 60, 60, -1, 77, 60, 60, 60, 60, 60, -1, 86, 60, 60, 60, 60, 60, -1, 29, 60, 60, 60, 60, 60, -1, 30, 60, 60, 60, 60, 60, -1, 94, 60, 60, 60, 60, 60, -1, 78, 60, 60, 60, 60, 60, -1, 87, 60, 60, 60, 60, 60, -1, 89, 60, 60, 60, 60, 60, -1, 79, 60, 60, 60, 60, 60, -1, 91, 60, 60, 60, 60, 60, -1, 102, 60, 60, 60, 60, 60, -1, 93, 60, 60, 60, 60, 60, -1, 97, 60, 60, 60, 60, 60, -1, 85, 60, 60, 60, 60, 60, -1, 32, 60, 60, 60, 60, 60, -1, 34, 60, 60, 60, 60, 60, -1, 92, 60, 60, 60, 60, 60, -1, 73, 60, 60, 60, 60, 60, -1, 75, 60, 60, 60, 60, 60, -1, 70, 60, 60, 60, 60, 60, -1, 31, 60, 60, 60, 60, 60, -1, 95, 60, 60, 60, 60, -1, 90, 60, 60, 60, 60, 60, -1, 33, 60, 60, 60, 60, 60, -1, 76, 60, 60, 60, 60, 60, -1, 98, 60, 60, 60, 60, 60, -1, 101, 60, 60, 60, 60, 60, -1, 35, 60, 60, 60, 60, 60, -1, 99, 60, 60, 60, 60, 60, -1, 36, 60, 60, 60, 60, 60, -1, 100, 60, 60, 60, 60, 60, -1, 40, 60, 60, 60, 60, 60, -1, 39, 60, 60, 60, 60, 60, -1, 80, 60, 60, 60, 60, 60, -1, 38, 60, 60, 60, 60, 60, -1, 42, 60, 60, 60, 60, 60, -1, 37, 60, 60, 60, 60, 60, -1, 41, 60, 60, 60, 60, 60, -1, 96, 60, 60, 60, 60, 60, -1, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, -1, -1, -1, -1, -1, 11, -1, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 14, -1, 15, -1, 1, 2, 7, -1, 3, -1, 4, -1, -1, -1, 8, -1, -1, 5, -1, 6, -1, 1, 17, 22, 26, 2, 3, 4, 28, 5, 19, 6, 7, 20, 25, 8, 9, 9, 27, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, 32, 19, 34, -1, -1, 29, 27, 27, 27, 27, -1, -1, 9, 9, -1, -1, 11, 11, 36, 36, 36, 36, -1, 12, -1, 27, 27, 27, 27, -1, 27, 27, 27, 27, -1, 27, 27, 27, 27, -1, 27, 27, 27, 27, -1, 10, 11, 11, 17, 17, 17, 17, -1, 18, 18, 22, 22, 22, -1, 32, 19, -1, 31, 33, 27, 27, 27, 27, 27, 27, -1, 21, 21, 38, 38, 38, 38, -1, 18, 18, 22, 22, 22, -1, 40, 30, 30, -1, 24, 24, 24, -1, 35, 27, 27, 27, 27, 27, -1, 10, 21, 21, 26, 26, 26, 26, -1, 27, 27, 27, 27, -1, 30, -1, 37, 27, 27, 27, 27, 27, -1, 40, 30, 30, -1, 13, 27, 27, 27, 27, 27, -1, 12, -1, 14, 27, 27, 27, 27, 27, -1, 24, 24, 24, -1, 39, 27, 27, 27, 27, 27, -1, 11, 11, 36, 36, 36, 36, -1, 41, 27, 27, 27, 27, 27, -1, 21, 21, 38, 38, 38, 38, -1, 15, 27, 27, 27, 27, 27, -1, 40, 23, 30, 30, 30, -1, 16, 27, 27, 27, 27, 27, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 6, 9, 2, 8, 11, 13, 13, 13, 13, 13, 13, -1, -1, 15, 13, 13, 13, 13, 13, -1, 13, 13, 13, 13, -1, 13, 13, 13, 13, -1, 13, 13, 13, 13, -1, 7, 7, 6, 6, 6, -1, 7, 7, 6, 6, 6, -1, 16, 13, 13, 13, 13, 13, -1, 12, -1, 14, 12, 12, -1, 17, 13, 13, 13, 13, -1, 14, 12, 12, -1, 13, 13, 13, 13, -1, 14, 10, 12, 12, 12, -1, 23, 13, 13, 13, 13, 13, -1, 18, 13, 13, 13, 13, 13, -1, 19, 13, 13, 13, 13, 13, -1, 3, 13, 13, 13, 13, 13, -1, 24, 13, 13, 13, 13, 13, -1, 25, 13, 13, 13, 13, 13, -1, 4, 13, 13, 13, 13, 13, -1, 5, 13, 13, 13, 13, 13, -1, 20, 13, 13, 13, 13, 13, -1, 21, 13, 13, 13, 13, 13, -1, 22, 13, 13, 13, 13, 13, -1, 45, 49, 1, 2, 3, 4, 5, 6, 7, 8, 9, 46, 10, 11, 12, 13, 14, 47, 85, 51, 53, 55, 57, 59, 60, 61, 87, 62, 15, 16, 17, 18, 18, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, 21, -1, 22, -1, 52, 46, 54, -1, 23, -1, 24, -1, -1, -1, 64, 63, 63, 63, 63, 63, -1, -1, -1, -1, 18, 18, -1, -1, 20, 20, 56, 56, 56, 56, -1, -1, -1, -1, -1, 63, 63, 63, 63, -1, 88, 63, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 28, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 19, 20, 20, 45, 45, 45, 45, -1, 52, 46, -1, 65, 92, 63, 63, 63, 63, 63, 63, -1, 48, 48, 58, 58, 58, 58, -1, 19, 48, 48, 49, 49, 49, 49, -1, 50, 50, 50, -1, 86, 67, 98, 63, 63, 63, 63, 63, 63, -1, 28, -1, 68, 63, 63, 63, 63, 63, -1, 50, 50, 50, -1, 25, 69, 26, 63, 63, 63, 63, 63, 63, 63, -1, 20, 20, 56, 56, 56, 56, -1, 70, 71, 63, 63, 63, 63, 63, 63, -1, 48, 48, 58, 58, 58, 58, -1, 27, 63, 63, 63, 63, 63, -1, 72, 63, 63, 63, 63, 63, -1, 73, 63, 63, 63, 63, 63, -1, 75, 63, 63, 63, 63, 63, -1, 63, 63, 63, 63, -1, 29, 63, 63, 63, 63, 63, -1, 76, 63, 63, 63, 63, -1, 78, 63, 63, 63, 63, 63, -1, 30, 63, 63, 63, 63, 63, -1, 81, 63, 63, 63, 63, 63, -1, 90, 63, 63, 63, 63, 63, -1, 31, 63, 63, 63, 63, 63, -1, 32, 63, 63, 63, 63, 63, -1, 103, 63, 63, 63, 63, 63, -1, 82, 63, 63, 63, 63, 63, -1, 91, 63, 63, 63, 63, 63, -1, 93, 63, 63, 63, 63, 63, -1, 83, 63, 63, 63, 63, 63, -1, 95, 63, 63, 63, 63, 63, -1, 107, 63, 63, 63, 63, 63, -1, 97, 63, 63, 63, 63, 63, -1, 101, 63, 63, 63, 63, 63, -1, 89, 63, 63, 63, 63, 63, -1, 34, 63, 63, 63, 63, 63, -1, 36, 63, 63, 63, 63, 63, -1, 96, 63, 63, 63, 63, 63, -1, 66, 63, 63, 63, 63, 63, -1, 79, 63, 63, 63, 63, 63, -1, 74, 63, 63, 63, 63, 63, -1, 33, 63, 63, 63, 63, 63, -1, 99, 63, 63, 63, 63, -1, 94, 63, 63, 63, 63, 63, -1, 35, 63, 63, 63, 63, 63, -1, 77, 63, 63, 63, 63, 63, -1, 102, 63, 63, 63, 63, 63, -1, 106, 63, 63, 63, 63, 63, -1, 37, 63, 63, 63, 63, 63, -1, 105, 63, 63, 63, 63, 63, -1, 38, 63, 63, 63, 63, 63, -1, 80, 63, 63, 63, 63, 63, -1, 42, 63, 63, 63, 63, 63, -1, 41, 63, 63, 63, 63, 63, -1, 84, 63, 63, 63, 63, 63, -1, 40, 63, 63, 63, 63, 63, -1, 104, 63, 63, 63, 63, 63, -1, 39, 63, 63, 63, 63, 63, -1, 44, 63, 63, 63, 63, 63, -1, 43, 63, 63, 63, 63, 63, -1, 100, 63, 63, 63, 63, 63, -1, 1, 17, 22, 26, 2, 3, 28, 4, 19, 5, 6, 20, 25, 7, 8, 9, 9, 27, 27, 27, 27, 27, 27, -1, -1, -1, -1, 32, 19, 34, -1, -1, 29, 27, 27, 27, 27, -1, -1, -1, 9, 9, -1, -1, 11, 11, 36, 36, 36, 36, -1, 12, -1, 27, 27, 27, 27, -1, 27, 27, 27, 27, -1, 27, 27, 27, 27, -1, 27, 27, 27, 27, -1, 10, 11, 11, 17, 17, 17, 17, -1, 18, 18, 22, 22, 22, -1, 32, 19, -1, 31, 33, 27, 27, 27, 27, 27, 27, -1, 21, 21, 38, 38, 38, 38, -1, 18, 18, 22, 22, 22, -1, 40, 30, 30, -1, 24, 24, 24, -1, 35, 27, 27, 27, 27, 27, -1, 10, 21, 21, 26, 26, 26, 26, -1, 27, 27, 27, 27, -1, 30, -1, 37, 27, 27, 27, 27, 27, -1, 40, 30, 30, -1, 13, 27, 27, 27, 27, 27, -1, 12, -1, 14, 27, 27, 27, 27, 27, -1, 24, 24, 24, -1, 39, 27, 27, 27, 27, 27, -1, 11, 11, 36, 36, 36, 36, -1, 41, 27, 27, 27, 27, 27, -1, 21, 21, 38, 38, 38, 38, -1, 15, 27, 27, 27, 27, 27, -1, 40, 23, 30, 30, 30, -1, 16, 27, 27, 27, 27, 27, -1, 1, 46, 51, 55, 2, 3, 4, 5, 6, 7, 8, 9, 10, 48, 11, 12, 13, 14, 15, 49, 91, 54, 56, 58, 60, 62, 64, 66, 93, 68, 16, 17, 18, 19, 19, 69, 69, 69, 69, 69, 69, 69, 69, 69, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, 57, 23, -1, 59, 48, 61, -1, 24, -1, 25, -1, -1, -1, 70, 69, 69, 69, 69, 69, -1, -1, -1, -1, 19, 19, -1, -1, 21, 21, 63, 63, 63, 63, -1, -1, -1, -1, -1, 69, 69, 69, 69, -1, 94, 69, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 29, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 20, 21, 21, 46, 46, 46, 46, -1, 47, 47, 51, 51, 51, -1, 59, 48, -1, 71, 98, 69, 69, 69, 69, 69, 69, -1, 50, 50, 65, 65, 65, 65, -1, 47, 47, 51, 51, 51, -1, 67, 57, 57, -1, 53, 53, 53, -1, 92, 73, 104, 69, 69, 69, 69, 69, 69, -1, 20, 50, 50, 55, 55, 55, 55, -1, 74, 69, 69, 69, 69, 69, -1, 67, 57, 57, -1, 26, 75, 27, 69, 69, 69, 69, 69, 69, 69, -1, 29, -1, 76, 77, 69, 69, 69, 69, 69, 69, -1, 53, 53, 53, -1, 28, 69, 69, 69, 69, 69, -1, 21, 21, 63, 63, 63, 63, -1, 78, 69, 69, 69, 69, 69, -1, 50, 50, 65, 65, 65, 65, -1, 79, 69, 69, 69, 69, 69, -1, 67, 52, 57, 57, 57, -1, 81, 69, 69, 69, 69, 69, -1, 69, 69, 69, 69, -1, 30, 69, 69, 69, 69, 69, -1, 82, 69, 69, 69, 69, -1, 84, 69, 69, 69, 69, 69, -1, 31, 69, 69, 69, 69, 69, -1, 87, 69, 69, 69, 69, 69, -1, 96, 69, 69, 69, 69, 69, -1, 32, 69, 69, 69, 69, 69, -1, 33, 69, 69, 69, 69, 69, -1, 109, 69, 69, 69, 69, 69, -1, 88, 69, 69, 69, 69, 69, -1, 97, 69, 69, 69, 69, 69, -1, 99, 69, 69, 69, 69, 69, -1, 89, 69, 69, 69, 69, 69, -1, 101, 69, 69, 69, 69, 69, -1, 113, 69, 69, 69, 69, 69, -1, 103, 69, 69, 69, 69, 69, -1, 107, 69, 69, 69, 69, 69, -1, 95, 69, 69, 69, 69, 69, -1, 35, 69, 69, 69, 69, 69, -1, 37, 69, 69, 69, 69, 69, -1, 102, 69, 69, 69, 69, 69, -1, 72, 69, 69, 69, 69, 69, -1, 85, 69, 69, 69, 69, 69, -1, 80, 69, 69, 69, 69, 69, -1, 34, 69, 69, 69, 69, 69, -1, 105, 69, 69, 69, 69, -1, 100, 69, 69, 69, 69, 69, -1, 36, 69, 69, 69, 69, 69, -1, 83, 69, 69, 69, 69, 69, -1, 108, 69, 69, 69, 69, 69, -1, 112, 69, 69, 69, 69, 69, -1, 38, 69, 69, 69, 69, 69, -1, 111, 69, 69, 69, 69, 69, -1, 39, 69, 69, 69, 69, 69, -1, 86, 69, 69, 69, 69, 69, -1, 43, 69, 69, 69, 69, 69, -1, 42, 69, 69, 69, 69, 69, -1, 90, 69, 69, 69, 69, 69, -1, 41, 69, 69, 69, 69, 69, -1, 110, 69, 69, 69, 69, 69, -1, 40, 69, 69, 69, 69, 69, -1, 45, 69, 69, 69, 69, 69, -1, 44, 69, 69, 69, 69, 69, -1, 106, 69, 69, 69, 69, 69, -1, 14, 18, 1, 2, 3, 15, 4, 5, 16, 20, 6, 22, 22, 22, 22, 22, 22, -1, -1, -1, 21, 15, 23, -1, -1, 24, 22, 22, 22, 22, -1, -1, -1, 8, 8, 25, 25, 25, 25, -1, 9, -1, 22, 22, 22, 22, -1, 22, 22, 22, 22, -1, 22, 22, 22, 22, -1, 22, 22, 22, 22, -1, 7, 8, 8, 14, 14, 14, 14, -1, 21, 15, -1, 26, 28, 22, 22, 22, 22, 22, 22, -1, 17, 17, 27, 27, 27, 27, -1, 7, 17, 17, 18, 18, 18, 18, -1, 19, 19, 19, -1, 29, 22, 22, 22, 22, 22, -1, 9, -1, 22, 22, 22, 22, -1, 19, 19, 19, -1, 30, 22, 22, 22, 22, 22, -1, 8, 8, 25, 25, 25, 25, -1, 10, 22, 22, 22, 22, 22, -1, 17, 17, 27, 27, 27, 27, -1, 11, 22, 22, 22, 22, 22, -1, 31, 22, 22, 22, 22, 22, -1, 32, 22, 22, 22, 22, 22, -1, 12, 22, 22, 22, 22, 22, -1, 13, 22, 22, 22, 22, 22, -1, 5, 7, 1, 2, 2, -1, -1, 2, 2, -1, -1, 4, 4, 8, 8, 8, 8, -1, 3, 4, 4, 5, 5, 5, 5, -1, 6, 6, 9, 9, 9, 9, -1, 3, 6, 6, 7, 7, 7, 7, -1, 4, 4, 8, 8, 8, 8, -1, 6, 6, 9, 9, 9, 9, -1, 16, 20, 1, 2, 3, 17, 4, 5, 6, 18, 22, 7, 8, 8, 24, 24, 24, 24, 24, 24, -1, -1, -1, 23, 17, 25, -1, -1, -1, 26, 24, 24, 24, 24, -1, -1, 8, 8, -1, -1, 10, 10, 27, 27, 27, 27, -1, 11, -1, 24, 24, 24, 24, -1, 24, 24, 24, 24, -1, 24, 24, 24, 24, -1, 24, 24, 24, 24, -1, 9, 10, 10, 16, 16, 16, 16, -1, 23, 17, -1, 28, 30, 24, 24, 24, 24, 24, 24, -1, 19, 19, 29, 29, 29, 29, -1, 9, 19, 19, 20, 20, 20, 20, -1, 21, 21, 21, -1, 31, 24, 24, 24, 24, 24, -1, 11, -1, 24, 24, 24, 24, -1, 21, 21, 21, -1, 32, 24, 24, 24, 24, 24, -1, 10, 10, 27, 27, 27, 27, -1, 12, 24, 24, 24, 24, 24, -1, 19, 19, 29, 29, 29, 29, -1, 13, 24, 24, 24, 24, 24, -1, 33, 24, 24, 24, 24, 24, -1, 34, 24, 24, 24, 24, 24, -1, 14, 24, 24, 24, 24, 24, -1, 15, 24, 24, 24, 24, 24, -1, 1, 5, 6, 7, 7, 7, 7, 7, 7, -1, 8, 7, 7, 7, 7, 7, -1, 7, 7, 7, 7, -1, 7, 7, 7, 7, -1, 7, 7, 7, 7, -1, 9, 7, 7, 7, 7, 7, -1, 10, 7, 7, 7, 7, -1, 7, 7, 7, 7, -1, 16, 7, 7, 7, 7, 7, -1, 11, 7, 7, 7, 7, 7, -1, 12, 7, 7, 7, 7, 7, -1, 2, 7, 7, 7, 7, 7, -1, 17, 7, 7, 7, 7, 7, -1, 18, 7, 7, 7, 7, 7, -1, 3, 7, 7, 7, 7, 7, -1, 4, 7, 7, 7, 7, 7, -1, 13, 7, 7, 7, 7, 7, -1, 14, 7, 7, 7, 7, 7, -1, 15, 7, 7, 7, 7, 7, -1, 44, 48, 1, 2, 3, 4, 5, 6, 7, 8, 9, 45, 10, 11, 12, 13, 14, 15, 46, 50, 52, 54, 56, 58, 59, 84, 60, 16, 17, 18, 19, 19, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, -1, 22, -1, 23, -1, 51, 45, 53, -1, 24, -1, -1, 25, -1, -1, -1, 62, 82, 61, 61, 61, 61, 61, 61, -1, -1, -1, -1, 19, 19, -1, -1, 21, 21, 55, 55, 55, 55, -1, -1, -1, -1, -1, 61, 61, 61, 61, -1, 85, 61, 61, 61, 61, 61, -1, 28, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 20, 21, 21, 44, 44, 44, 44, -1, 51, 45, -1, 63, 61, 61, 61, 61, 61, -1, 47, 47, 57, 57, 57, 57, -1, 20, 47, 47, 48, 48, 48, 48, -1, 49, 49, 49, -1, 83, 64, 89, 61, 61, 61, 61, 61, 61, -1, 28, -1, 65, 61, 61, 61, 61, 61, -1, 49, 49, 49, -1, 26, 66, 27, 61, 61, 61, 61, 61, 61, 61, -1, 21, 21, 55, 55, 55, 55, -1, 67, 68, 61, 61, 61, 61, 61, 61, -1, 47, 47, 57, 57, 57, 57, -1, 69, 61, 61, 61, 61, 61, -1, 70, 61, 61, 61, 61, 61, -1, 72, 61, 61, 61, 61, 61, -1, 61, 61, 61, 61, -1, 73, 61, 61, 61, 61, -1, 75, 61, 61, 61, 61, 61, -1, 29, 61, 61, 61, 61, 61, -1, 78, 61, 61, 61, 61, 61, -1, 87, 61, 61, 61, 61, 61, -1, 30, 61, 61, 61, 61, 61, -1, 31, 61, 61, 61, 61, 61, -1, 95, 61, 61, 61, 61, 61, -1, 79, 61, 61, 61, 61, 61, -1, 88, 61, 61, 61, 61, 61, -1, 90, 61, 61, 61, 61, 61, -1, 80, 61, 61, 61, 61, 61, -1, 92, 61, 61, 61, 61, 61, -1, 103, 61, 61, 61, 61, 61, -1, 94, 61, 61, 61, 61, 61, -1, 98, 61, 61, 61, 61, 61, -1, 86, 61, 61, 61, 61, 61, -1, 33, 61, 61, 61, 61, 61, -1, 35, 61, 61, 61, 61, 61, -1, 93, 61, 61, 61, 61, 61, -1, 74, 61, 61, 61, 61, 61, -1, 76, 61, 61, 61, 61, 61, -1, 71, 61, 61, 61, 61, 61, -1, 32, 61, 61, 61, 61, 61, -1, 96, 61, 61, 61, 61, -1, 91, 61, 61, 61, 61, 61, -1, 34, 61, 61, 61, 61, 61, -1, 77, 61, 61, 61, 61, 61, -1, 99, 61, 61, 61, 61, 61, -1, 102, 61, 61, 61, 61, 61, -1, 36, 61, 61, 61, 61, 61, -1, 100, 61, 61, 61, 61, 61, -1, 37, 61, 61, 61, 61, 61, -1, 101, 61, 61, 61, 61, 61, -1, 41, 61, 61, 61, 61, 61, -1, 40, 61, 61, 61, 61, 61, -1, 81, 61, 61, 61, 61, 61, -1, 39, 61, 61, 61, 61, 61, -1, 43, 61, 61, 61, 61, 61, -1, 38, 61, 61, 61, 61, 61, -1, 42, 61, 61, 61, 61, 61, -1, 97, 61, 61, 61, 61, 61, -1, 17, 22, 1, 2, 3, 18, 4, 5, 6, 20, 25, 7, 28, 28, 28, 28, 28, 28, -1, -1, -1, 26, 18, 29, -1, 19, 24, 27, 27, -1, -1, 31, 28, 28, 28, 28, -1, -1, -1, 9, 9, 32, 32, 32, 32, -1, 10, -1, 28, 28, 28, 28, -1, 28, 28, 28, 28, -1, 28, 28, 28, 28, -1, 28, 28, 28, 28, -1, 27, 27, -1, 27, 27, -1, 8, 9, 9, 17, 17, 17, 17, -1, 26, 18, -1, 30, 27, 27, 27, -1, 34, 37, 28, 28, 28, 28, 28, 28, -1, 21, 21, 35, 35, 35, 35, -1, 8, 21, 21, 22, 22, 22, 22, -1, 23, 23, 23, -1, 48, 27, 27, 27, -1, 39, 28, 28, 28, 28, 28, -1, 10, -1, 27, 27, -1, 28, 28, 28, 28, -1, 23, 23, 23, -1, 33, 27, 27, 27, -1, 41, 28, 28, 28, 28, 28, -1, 9, 9, 32, 32, 32, 32, -1, 38, 27, 27, 27, -1, 11, 28, 28, 28, 28, 28, -1, 21, 21, 35, 35, 35, 35, -1, 40, 27, 27, 27, -1, 12, 28, 28, 28, 28, 28, -1, 42, 27, 27, 27, -1, 43, 28, 28, 28, 28, 28, -1, 53, 27, 27, 27, -1, 45, 28, 28, 28, 28, 28, -1, 44, 27, 27, 27, -1, 13, 28, 28, 28, 28, 28, -1, 46, 27, 27, -1, 14, 28, 28, 28, 28, 28, -1, 49, 27, 27, 27, -1, 50, 27, 27, 27, -1, 36, 27, 27, 27, -1, 15, 27, 27, 27, -1, 54, 27, 27, 27, -1, 47, 27, 27, 27, -1, 16, 27, 27, 27, -1, 51, 27, 27, 27, -1, 52, 27, 27, 27, -1, 1, -1, -1, 4, 5, 1, 1, -1, 1, 1, -1, -1, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, 11, -1, 12, -1, 15, -1, 13, -1, 14, -1, 3, -1, 2, -1, 1, 6, 2, 8, 10, 11, 3, 3, -1, -1, -1, 3, 3, -1, -1, -1, 7, 7, 6, 6, 6, -1, 7, 7, 6, 6, 6, -1, 12, -1, 15, 12, 12, -1, 13, -1, 14, -1, 15, 12, 12, -1, 16, -1, 17, -1, 15, 9, 12, 12, 12, -1, 18, -1, 4, -1, 5, -1, 1, 4, 5, -1, -1, -1, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10, -1, 2, -1, 3, -1, 1, -1, -1, 1, 2, 3, 3, -1, -1, -1, 3, 3, -1, 1, -1, -1, 6, 8, 1, 2, 3, 3, -1, -1, -1, 3, 3, -1, -1, 5, 5, 9, 9, 9, 9, -1, 4, 5, 5, 6, 6, 6, 6, -1, 7, 7, 10, 10, 10, 10, -1, 4, 7, 7, 8, 8, 8, 8, -1, 5, 5, 9, 9, 9, 9, -1, 7, 7, 10, 10, 10, 10, -1, 1, 2, 3, 4, 4, -1, -1, -1, -1, 4, 4, -1, 1, 2, 3, 4, 5, 11, 6, 6, -1, -1, -1, 7, -1, 8, -1, -1, 6, 6, -1, -1, -1, 12, -1, -1, 9, -1, 10, -1, 1, -1, -1, 18, 22, 1, 2, 3, 4, 5, 19, 6, 7, 8, 20, 24, 9, 10, 10, 26, 26, 26, 26, 26, 26, -1, -1, -1, -1, -1, 25, 19, 27, -1, -1, -1, 28, 26, 26, 26, 26, -1, -1, 10, 10, -1, -1, 12, 12, 29, 29, 29, 29, -1, 13, -1, 26, 26, 26, 26, -1, 26, 26, 26, 26, -1, 26, 26, 26, 26, -1, 26, 26, 26, 26, -1, 11, 12, 12, 18, 18, 18, 18, -1, 25, 19, -1, 30, 32, 26, 26, 26, 26, 26, 26, -1, 21, 21, 31, 31, 31, 31, -1, 11, 21, 21, 22, 22, 22, 22, -1, 23, 23, 23, -1, 33, 26, 26, 26, 26, 26, -1, 13, -1, 26, 26, 26, 26, -1, 23, 23, 23, -1, 34, 26, 26, 26, 26, 26, -1, 12, 12, 29, 29, 29, 29, -1, 14, 26, 26, 26, 26, 26, -1, 21, 21, 31, 31, 31, 31, -1, 15, 26, 26, 26, 26, 26, -1, 35, 26, 26, 26, 26, 26, -1, 36, 26, 26, 26, 26, 26, -1, 16, 26, 26, 26, 26, 26, -1, 17, 26, 26, 26, 26, 26, -1, 2, -1, -1, 1, -1, 3, 1, 1, -1, 1, 1, -1, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 2, -1, 16, 20, 1, 2, 3, 4, 17, 5, 6, 18, 22, 7, 8, 8, 24, 24, 24, 24, 24, 24, -1, -1, -1, -1, 23, 17, 25, -1, -1, 26, 24, 24, 24, 24, -1, -1, 8, 8, -1, -1, 10, 10, 27, 27, 27, 27, -1, 11, -1, 24, 24, 24, 24, -1, 24, 24, 24, 24, -1, 24, 24, 24, 24, -1, 24, 24, 24, 24, -1, 9, 10, 10, 16, 16, 16, 16, -1, 23, 17, -1, 28, 30, 24, 24, 24, 24, 24, 24, -1, 19, 19, 29, 29, 29, 29, -1, 9, 19, 19, 20, 20, 20, 20, -1, 21, 21, 21, -1, 31, 24, 24, 24, 24, 24, -1, 11, -1, 24, 24, 24, 24, -1, 21, 21, 21, -1, 32, 24, 24, 24, 24, 24, -1, 10, 10, 27, 27, 27, 27, -1, 12, 24, 24, 24, 24, 24, -1, 19, 19, 29, 29, 29, 29, -1, 13, 24, 24, 24, 24, 24, -1, 33, 24, 24, 24, 24, 24, -1, 34, 24, 24, 24, 24, 24, -1, 14, 24, 24, 24, 24, 24, -1, 15, 24, 24, 24, 24, 24, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, -1, -1, -1, -1, -1, -1, 12, -1, 13, -1, 14, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, 15, -1, 16, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 10, 11, -1, -1, -1, -1, -1, -1, 12, -1, 13, -1, 14, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, 22, -1, 15, -1, 16, -1, 17, -1, 18, -1, 1, 2, 3, 4, 5, 6, 7, 8, 19, 20, 21, 9, 10, 11, 11, -1, -1, -1, -1, -1, 12, -1, 13, -1, 14, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, 23, -1, -1, -1, -1, 22, -1, 15, -1, 16, -1, 17, -1, 18, -1, 1, 2, 2, -1, -1, 2, 2, -1, 1, 2, 3, 9, 4, 4, -1, -1, 5, -1, 6, -1, 4, 4, -1, -1, -1, 10, -1, -1, 7, -1, 8, -1, 1, 2, 8, 3, 3, -1, 4, -1, 5, -1, 3, 3, -1, -1, -1, 9, -1, -1, 6, -1, 7, -1, 1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, -1, -1, -1, -1, -1, 12, -1, 13, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, 15, -1, 16, -1, 1, 3, 5, 2, -1, -1, -1, 4, 4, 3, 3, 3, -1, 4, 4, 3, 3, 3, -1, 7, -1, 8, 7, 7, -1, 8, 7, 7, -1, 8, 6, 7, 7, 7, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, -1, -1, -1, -1, -1, 12, -1, 13, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, 15, -1, 16, -1, 2, -1, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 1, -1, 15, 19, 1, 2, 3, 16, 4, 5, 6, 17, 21, 7, 23, 23, 23, 23, 23, 23, -1, -1, -1, 22, 16, 24, -1, 4, 4, -1, -1, 25, 23, 23, 23, 23, -1, -1, -1, 9, 9, 26, 26, 26, 26, -1, 10, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 8, 9, 9, 15, 15, 15, 15, -1, 22, 16, -1, 27, 29, 23, 23, 23, 23, 23, 23, -1, 18, 18, 28, 28, 28, 28, -1, 8, 18, 18, 19, 19, 19, 19, -1, 20, 20, 20, -1, 30, 23, 23, 23, 23, 23, -1, 10, -1, 23, 23, 23, 23, -1, 20, 20, 20, -1, 31, 23, 23, 23, 23, 23, -1, 9, 9, 26, 26, 26, 26, -1, 11, 23, 23, 23, 23, 23, -1, 18, 18, 28, 28, 28, 28, -1, 12, 23, 23, 23, 23, 23, -1, 32, 23, 23, 23, 23, 23, -1, 33, 23, 23, 23, 23, 23, -1, 13, 23, 23, 23, 23, 23, -1, 14, 23, 23, 23, 23, 23, -1, 1, 16, 21, 25, 2, 3, 27, 4, 18, 5, 6, 19, 24, 7, 8, 8, 26, 26, 26, 26, 26, 26, -1, -1, -1, -1, 31, 18, 33, -1, -1, 28, 26, 26, 26, 26, -1, -1, 8, 8, -1, -1, 10, 10, 35, 35, 35, 35, -1, 11, -1, 26, 26, 26, 26, -1, 26, 26, 26, 26, -1, 26, 26, 26, 26, -1, 26, 26, 26, 26, -1, 9, 10, 10, 16, 16, 16, 16, -1, 17, 17, 21, 21, 21, -1, 31, 18, -1, 30, 32, 26, 26, 26, 26, 26, 26, -1, 20, 20, 37, 37, 37, 37, -1, 17, 17, 21, 21, 21, -1, 39, 29, 29, -1, 23, 23, 23, -1, 34, 26, 26, 26, 26, 26, -1, 9, 20, 20, 25, 25, 25, 25, -1, 26, 26, 26, 26, -1, 29, -1, 36, 26, 26, 26, 26, 26, -1, 39, 29, 29, -1, 12, 26, 26, 26, 26, 26, -1, 11, -1, 13, 26, 26, 26, 26, 26, -1, 23, 23, 23, -1, 38, 26, 26, 26, 26, 26, -1, 10, 10, 35, 35, 35, 35, -1, 40, 26, 26, 26, 26, 26, -1, 20, 20, 37, 37, 37, 37, -1, 14, 26, 26, 26, 26, 26, -1, 39, 22, 29, 29, 29, -1, 15, 26, 26, 26, 26, 26, -1, 4, 6, 1, 1, -1, 1, 1, -1, -1, 3, 3, 7, 7, 7, 7, -1, 2, 3, 3, 4, 4, 4, 4, -1, 5, 5, 8, 8, 8, 8, -1, 2, 5, 5, 6, 6, 6, 6, -1, 3, 3, 7, 7, 7, 7, -1, 5, 5, 8, 8, 8, 8, -1, 1, 45, 50, 54, 2, 3, 4, 5, 6, 7, 8, 9, 10, 47, 11, 12, 13, 14, 15, 16, 48, 53, 55, 57, 59, 61, 63, 90, 65, 17, 18, 19, 20, 20, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, 56, 24, -1, 58, 47, 60, -1, 25, -1, -1, 26, -1, -1, -1, 68, 88, 67, 67, 67, 67, 67, 67, -1, -1, -1, -1, 20, 20, -1, -1, 22, 22, 62, 62, 62, 62, -1, -1, -1, -1, -1, 67, 67, 67, 67, -1, 91, 67, 67, 67, 67, 67, -1, 29, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 67, 67, 67, 67, -1, 21, 22, 22, 45, 45, 45, 45, -1, 46, 46, 50, 50, 50, -1, 58, 47, -1, 69, 67, 67, 67, 67, 67, -1, 49, 49, 64, 64, 64, 64, -1, 46, 46, 50, 50, 50, -1, 66, 56, 56, -1, 52, 52, 52, -1, 89, 70, 95, 67, 67, 67, 67, 67, 67, -1, 21, 49, 49, 54, 54, 54, 54, -1, 71, 67, 67, 67, 67, 67, -1, 66, 56, 56, -1, 27, 72, 28, 67, 67, 67, 67, 67, 67, 67, -1, 29, -1, 73, 74, 67, 67, 67, 67, 67, 67, -1, 52, 52, 52, -1, 75, 67, 67, 67, 67, 67, -1, 22, 22, 62, 62, 62, 62, -1, 76, 67, 67, 67, 67, 67, -1, 49, 49, 64, 64, 64, 64, -1, 78, 67, 67, 67, 67, 67, -1, 66, 51, 56, 56, 56, -1, 67, 67, 67, 67, -1, 79, 67, 67, 67, 67, -1, 81, 67, 67, 67, 67, 67, -1, 30, 67, 67, 67, 67, 67, -1, 84, 67, 67, 67, 67, 67, -1, 93, 67, 67, 67, 67, 67, -1, 31, 67, 67, 67, 67, 67, -1, 32, 67, 67, 67, 67, 67, -1, 101, 67, 67, 67, 67, 67, -1, 85, 67, 67, 67, 67, 67, -1, 94, 67, 67, 67, 67, 67, -1, 96, 67, 67, 67, 67, 67, -1, 86, 67, 67, 67, 67, 67, -1, 98, 67, 67, 67, 67, 67, -1, 109, 67, 67, 67, 67, 67, -1, 100, 67, 67, 67, 67, 67, -1, 104, 67, 67, 67, 67, 67, -1, 92, 67, 67, 67, 67, 67, -1, 34, 67, 67, 67, 67, 67, -1, 36, 67, 67, 67, 67, 67, -1, 99, 67, 67, 67, 67, 67, -1, 80, 67, 67, 67, 67, 67, -1, 82, 67, 67, 67, 67, 67, -1, 77, 67, 67, 67, 67, 67, -1, 33, 67, 67, 67, 67, 67, -1, 102, 67, 67, 67, 67, -1, 97, 67, 67, 67, 67, 67, -1, 35, 67, 67, 67, 67, 67, -1, 83, 67, 67, 67, 67, 67, -1, 105, 67, 67, 67, 67, 67, -1, 108, 67, 67, 67, 67, 67, -1, 37, 67, 67, 67, 67, 67, -1, 106, 67, 67, 67, 67, 67, -1, 38, 67, 67, 67, 67, 67, -1, 107, 67, 67, 67, 67, 67, -1, 42, 67, 67, 67, 67, 67, -1, 41, 67, 67, 67, 67, 67, -1, 87, 67, 67, 67, 67, 67, -1, 40, 67, 67, 67, 67, 67, -1, 44, 67, 67, 67, 67, 67, -1, 39, 67, 67, 67, 67, 67, -1, 43, 67, 67, 67, 67, 67, -1, 103, 67, 67, 67, 67, 67, -1, 15, 19, 1, 2, 3, 16, 4, 5, 17, 21, 6, 7, 7, 23, 23, 23, 23, 23, 23, -1, -1, -1, 22, 16, 24, -1, -1, 25, 23, 23, 23, 23, -1, -1, 7, 7, -1, -1, 9, 9, 26, 26, 26, 26, -1, 10, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 23, 23, 23, 23, -1, 8, 9, 9, 15, 15, 15, 15, -1, 22, 16, -1, 27, 29, 23, 23, 23, 23, 23, 23, -1, 18, 18, 28, 28, 28, 28, -1, 8, 18, 18, 19, 19, 19, 19, -1, 20, 20, 20, -1, 30, 23, 23, 23, 23, 23, -1, 10, -1, 23, 23, 23, 23, -1, 20, 20, 20, -1, 31, 23, 23, 23, 23, 23, -1, 9, 9, 26, 26, 26, 26, -1, 11, 23, 23, 23, 23, 23, -1, 18, 18, 28, 28, 28, 28, -1, 12, 23, 23, 23, 23, 23, -1, 32, 23, 23, 23, 23, 23, -1, 33, 23, 23, 23, 23, 23, -1, 13, 23, 23, 23, 23, 23, -1, 14, 23, 23, 23, 23, 23, -1, 3, 4, -1, -1, -1, 1, -1, 5, -1, 6, -1, 7, -1, 8, -1, 2, -1, 1, -1, -1, 1, 47, 52, 56, 2, 3, 4, 5, 6, 7, 8, 9, 10, 49, 11, 12, 13, 14, 15, 50, 92, 55, 57, 59, 61, 63, 65, 67, 94, 69, 16, 17, 18, 19, 19, 70, 70, 70, 70, 70, 70, 70, 70, 70, -1, -1, -1, -1, -1, -1, -1, 22, -1, 23, -1, 58, 24, -1, 60, 49, 62, -1, 25, -1, 26, -1, -1, -1, 71, 70, 70, 70, 70, 70, -1, -1, -1, -1, 19, 19, -1, -1, 21, 21, 64, 64, 64, 64, -1, -1, -1, -1, -1, -1, 70, 70, 70, 70, -1, 95, 70, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 30, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 20, 21, 21, 47, 47, 47, 47, -1, 48, 48, 52, 52, 52, -1, 60, 49, -1, 72, 99, 70, 70, 70, 70, 70, 70, -1, 51, 51, 66, 66, 66, 66, -1, 48, 48, 52, 52, 52, -1, 68, 58, 58, -1, 54, 54, 54, -1, 93, 74, 105, 70, 70, 70, 70, 70, 70, -1, 20, 51, 51, 56, 56, 56, 56, -1, 75, 70, 70, 70, 70, 70, -1, 68, 58, 58, -1, 27, 76, 28, 70, 70, 70, 70, 70, 70, 70, -1, 30, -1, 77, 78, 70, 70, 70, 70, 70, 70, -1, 54, 54, 54, -1, 29, 70, 70, 70, 70, 70, -1, 21, 21, 64, 64, 64, 64, -1, 79, 70, 70, 70, 70, 70, -1, 51, 51, 66, 66, 66, 66, -1, 80, 70, 70, 70, 70, 70, -1, 68, 53, 58, 58, 58, -1, 82, 70, 70, 70, 70, 70, -1, 70, 70, 70, 70, -1, 31, 70, 70, 70, 70, 70, -1, 83, 70, 70, 70, 70, -1, 85, 70, 70, 70, 70, 70, -1, 32, 70, 70, 70, 70, 70, -1, 88, 70, 70, 70, 70, 70, -1, 97, 70, 70, 70, 70, 70, -1, 33, 70, 70, 70, 70, 70, -1, 34, 70, 70, 70, 70, 70, -1, 110, 70, 70, 70, 70, 70, -1, 89, 70, 70, 70, 70, 70, -1, 98, 70, 70, 70, 70, 70, -1, 100, 70, 70, 70, 70, 70, -1, 90, 70, 70, 70, 70, 70, -1, 102, 70, 70, 70, 70, 70, -1, 114, 70, 70, 70, 70, 70, -1, 104, 70, 70, 70, 70, 70, -1, 108, 70, 70, 70, 70, 70, -1, 96, 70, 70, 70, 70, 70, -1, 36, 70, 70, 70, 70, 70, -1, 38, 70, 70, 70, 70, 70, -1, 103, 70, 70, 70, 70, 70, -1, 73, 70, 70, 70, 70, 70, -1, 86, 70, 70, 70, 70, 70, -1, 81, 70, 70, 70, 70, 70, -1, 35, 70, 70, 70, 70, 70, -1, 106, 70, 70, 70, 70, -1, 101, 70, 70, 70, 70, 70, -1, 37, 70, 70, 70, 70, 70, -1, 84, 70, 70, 70, 70, 70, -1, 109, 70, 70, 70, 70, 70, -1, 113, 70, 70, 70, 70, 70, -1, 39, 70, 70, 70, 70, 70, -1, 112, 70, 70, 70, 70, 70, -1, 40, 70, 70, 70, 70, 70, -1, 87, 70, 70, 70, 70, 70, -1, 44, 70, 70, 70, 70, 70, -1, 43, 70, 70, 70, 70, 70, -1, 91, 70, 70, 70, 70, 70, -1, 42, 70, 70, 70, 70, 70, -1, 111, 70, 70, 70, 70, 70, -1, 41, 70, 70, 70, 70, 70, -1, 46, 70, 70, 70, 70, 70, -1, 45, 70, 70, 70, 70, 70, -1, 107, 70, 70, 70, 70, 70, -1, 27, 31, 1, 2, 3, 28, 4, 5, 29, 33, 35, 37, 39, 41, 72, 42, 6, 7, 7, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, -1, -1, -1, 34, 28, 36, -1, -1, 44, 45, 43, 43, 43, 43, 43, 43, -1, -1, 7, 7, -1, -1, 9, 9, 38, 38, 38, 38, -1, 43, 43, 43, 43, -1, 11, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 8, 9, 9, 27, 27, 27, 27, -1, 34, 28, -1, 46, 47, 43, 43, 43, 43, 43, 43, -1, 30, 30, 40, 40, 40, 40, -1, 8, 30, 30, 31, 31, 31, 31, -1, 32, 32, 32, -1, 71, 48, 74, 43, 43, 43, 43, 43, 43, -1, 11, -1, 49, 43, 43, 43, 43, 43, -1, 32, 32, 32, -1, 10, 50, 43, 43, 43, 43, 43, 43, -1, 9, 9, 38, 38, 38, 38, -1, 51, 52, 43, 43, 43, 43, 43, 43, -1, 30, 30, 40, 40, 40, 40, -1, 53, 43, 43, 43, 43, 43, -1, 55, 43, 43, 43, 43, 43, -1, 43, 43, 43, 43, -1, 56, 43, 43, 43, 43, -1, 76, 43, 43, 43, 43, 43, -1, 57, 58, 43, 43, 43, 43, 43, 43, -1, 59, 43, 43, 43, 43, 43, -1, 12, 43, 43, 43, 43, 43, -1, 61, 43, 43, 43, 43, 43, -1, 75, 43, 43, 43, 43, 43, -1, 13, 43, 43, 43, 43, 43, -1, 14, 43, 43, 43, 43, 43, -1, 80, 43, 43, 43, 43, 43, -1, 62, 43, 43, 43, 43, 43, -1, 78, 43, 43, 43, 43, 43, -1, 63, 43, 43, 43, 43, 43, -1, 15, 43, 43, 43, 43, 43, -1, 16, 43, 43, 43, 43, 43, -1, 65, 43, 43, 43, 43, 43, -1, 67, 43, 43, 43, 43, 43, -1, 73, 43, 43, 43, 43, 43, -1, 17, 43, 43, 43, 43, 43, -1, 18, 43, 43, 43, 43, 43, -1, 19, 43, 43, 43, 43, 43, -1, 20, 43, 43, 43, 43, 43, -1, 21, 43, 43, 43, 43, 43, -1, 77, 43, 43, 43, 43, 43, -1, 22, 43, 43, 43, 43, 43, -1, 23, 43, 43, 43, 43, 43, -1, 25, 43, 43, 43, 43, 43, -1, 82, 43, 43, 43, 43, 43, -1, 54, 43, 43, 43, 43, 43, -1, 83, 43, 43, 43, 43, -1, 60, 43, 43, 43, 43, 43, -1, 79, 43, 43, 43, 43, 43, -1, 64, 43, 43, 43, 43, 43, -1, 81, 43, 43, 43, 43, 43, -1, 69, 43, 43, 43, 43, 43, -1, 70, 43, 43, 43, 43, 43, -1, 68, 43, 43, 43, 43, 43, -1, 84, 43, 43, 43, 43, 43, -1, 66, 43, 43, 43, 43, 43, -1, 24, 43, 43, 43, 43, 43, -1, 26, 43, 43, 43, 43, 43, -1, 25, 29, 1, 2, 3, 26, 4, 5, 27, 31, 33, 35, 37, 39, 66, 40, 6, 7, 7, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, 32, 26, 34, -1, -1, 42, 64, 41, 41, 41, 41, 41, 41, -1, -1, 7, 7, -1, -1, 9, 9, 36, 36, 36, 36, -1, 41, 41, 41, 41, -1, 11, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 8, 9, 9, 25, 25, 25, 25, -1, 32, 26, -1, 43, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 8, 28, 28, 29, 29, 29, 29, -1, 30, 30, 30, -1, 65, 44, 72, 41, 41, 41, 41, 41, 41, -1, 11, -1, 45, 41, 41, 41, 41, 41, -1, 30, 30, 30, -1, 10, 46, 41, 41, 41, 41, 41, 41, -1, 9, 9, 36, 36, 36, 36, -1, 47, 48, 41, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 49, 41, 41, 41, 41, 41, -1, 51, 41, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 52, 41, 41, 41, 41, -1, 53, 41, 41, 41, 41, 41, -1, 12, 41, 41, 41, 41, 41, -1, 55, 41, 41, 41, 41, 41, -1, 68, 41, 41, 41, 41, 41, -1, 13, 41, 41, 41, 41, 41, -1, 14, 41, 41, 41, 41, 41, -1, 77, 41, 41, 41, 41, 41, -1, 56, 41, 41, 41, 41, 41, -1, 73, 41, 41, 41, 41, 41, -1, 57, 41, 41, 41, 41, 41, -1, 69, 41, 41, 41, 41, 41, -1, 60, 41, 41, 41, 41, 41, -1, 67, 41, 41, 41, 41, 41, -1, 15, 41, 41, 41, 41, 41, -1, 16, 41, 41, 41, 41, 41, -1, 17, 41, 41, 41, 41, 41, -1, 18, 41, 41, 41, 41, 41, -1, 63, 41, 41, 41, 41, 41, -1, 19, 41, 41, 41, 41, 41, -1, 20, 41, 41, 41, 41, 41, -1, 75, 41, 41, 41, 41, 41, -1, 70, 41, 41, 41, 41, 41, -1, 76, 41, 41, 41, 41, 41, -1, 50, 41, 41, 41, 41, 41, -1, 78, 41, 41, 41, 41, -1, 74, 41, 41, 41, 41, 41, -1, 85, 41, 41, 41, 41, 41, -1, 58, 41, 41, 41, 41, 41, -1, 22, 41, 41, 41, 41, 41, -1, 54, 41, 41, 41, 41, 41, -1, 62, 41, 41, 41, 41, 41, -1, 71, 41, 41, 41, 41, 41, -1, 79, 41, 41, 41, 41, 41, -1, 59, 41, 41, 41, 41, 41, -1, 61, 41, 41, 41, 41, 41, -1, 21, 41, 41, 41, 41, 41, -1, 23, 41, 41, 41, 41, 41, -1, 24, 41, 41, 41, 41, 41, -1, 80, 41, 41, 41, 41, 41, -1, 81, 41, 41, 41, 41, 41, -1, 82, 41, 41, 41, 41, 41, -1, 83, 41, 41, 41, 41, 41, -1, 84, 41, 41, 41, 41, 41, -1, 1, 2, 2, 3, 3, 3, -1, -1, 2, 2, -1, 3, 3, 3, 3, -1, 25, 29, 1, 2, 3, 26, 4, 5, 27, 31, 33, 35, 37, 39, 67, 40, 6, 7, 7, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, 32, 26, 34, -1, -1, 42, 65, 41, 41, 41, 41, 41, 41, -1, -1, 7, 7, -1, -1, 9, 9, 36, 36, 36, 36, -1, 41, 41, 41, 41, -1, 11, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 8, 9, 9, 25, 25, 25, 25, -1, 32, 26, -1, 43, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 8, 28, 28, 29, 29, 29, 29, -1, 30, 30, 30, -1, 66, 44, 72, 41, 41, 41, 41, 41, 41, -1, 11, -1, 45, 41, 41, 41, 41, 41, -1, 30, 30, 30, -1, 10, 46, 41, 41, 41, 41, 41, 41, -1, 9, 9, 36, 36, 36, 36, -1, 47, 48, 41, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 49, 41, 41, 41, 41, 41, -1, 51, 41, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 52, 41, 41, 41, 41, -1, 53, 41, 41, 41, 41, 41, -1, 12, 41, 41, 41, 41, 41, -1, 55, 41, 41, 41, 41, 41, -1, 69, 41, 41, 41, 41, 41, -1, 13, 41, 41, 41, 41, 41, -1, 14, 41, 41, 41, 41, 41, -1, 77, 41, 41, 41, 41, 41, -1, 56, 41, 41, 41, 41, 41, -1, 73, 41, 41, 41, 41, 41, -1, 57, 41, 41, 41, 41, 41, -1, 82, 41, 41, 41, 41, 41, -1, 60, 41, 41, 41, 41, 41, -1, 68, 41, 41, 41, 41, 41, -1, 15, 41, 41, 41, 41, 41, -1, 16, 41, 41, 41, 41, 41, -1, 17, 41, 41, 41, 41, 41, -1, 18, 41, 41, 41, 41, 41, -1, 63, 41, 41, 41, 41, 41, -1, 19, 41, 41, 41, 41, 41, -1, 20, 41, 41, 41, 41, 41, -1, 75, 41, 41, 41, 41, 41, -1, 23, 41, 41, 41, 41, 41, -1, 70, 41, 41, 41, 41, 41, -1, 76, 41, 41, 41, 41, 41, -1, 50, 41, 41, 41, 41, 41, -1, 78, 41, 41, 41, 41, -1, 74, 41, 41, 41, 41, 41, -1, 58, 41, 41, 41, 41, 41, -1, 22, 41, 41, 41, 41, 41, -1, 54, 41, 41, 41, 41, 41, -1, 62, 41, 41, 41, 41, 41, -1, 71, 41, 41, 41, 41, 41, -1, 79, 41, 41, 41, 41, 41, -1, 59, 41, 41, 41, 41, 41, -1, 61, 41, 41, 41, 41, 41, -1, 21, 41, 41, 41, 41, 41, -1, 24, 41, 41, 41, 41, 41, -1, 64, 41, 41, 41, 41, 41, -1, 80, 41, 41, 41, 41, 41, -1, 81, 41, 41, 41, 41, 41, -1, 6, 9, 1, 7, 2, -1, 11, 7, 12, -1, -1, -1, 4, 4, 13, 13, 13, 13, -1, 5, -1, 3, 4, 4, 6, 6, 6, 6, -1, 11, 7, -1, 8, 8, 14, 14, 14, 14, -1, 3, 8, 8, 9, 9, 9, 9, -1, 10, 10, 10, -1, 5, -1, 10, 10, 10, -1, 4, 4, 13, 13, 13, 13, -1, 8, 8, 14, 14, 14, 14, -1, 1, 3, 5, 2, 2, -1, -1, 2, 2, -1, 4, 4, 3, 3, 3, -1, 4, 4, 3, 3, 3, -1, 7, -1, 8, 7, 7, -1, 8, 7, 7, -1, 8, 6, 7, 7, 7, -1, 1, 2, 3, 10, 4, 5, 5, -1, -1, 6, -1, 7, -1, -1, 5, 5, -1, -1, -1, 11, -1, -1, 8, -1, 9, -1, 3, 5, -1, -1, 2, 2, 6, 6, 6, 6, -1, 1, 2, 2, 3, 3, 3, 3, -1, 4, 4, 7, 7, 7, 7, -1, 1, 4, 4, 5, 5, 5, 5, -1, 2, 2, 6, 6, 6, 6, -1, 4, 4, 7, 7, 7, 7, -1, 8, 1, 2, 9, -1, 4, -1, 5, -1, -1, -1, -1, 10, -1, -1, 3, -1, 6, -1, 7, -1, 4, -1, -1, -1, -1, 5, 6, -1, 7, 10, -1, 8, -1, 1, -1, 9, -1, 3, -1, 2, -1, 1, 5, 6, 2, 2, -1, -1, 2, 2, -1, -1, -1, 7, -1, 8, -1, 9, -1, 10, -1, 11, -1, 3, -1, 4, -1, 2, -1, -1, 3, -1, 4, -1, 5, -1, 10, -1, 7, -1, 8, -1, 9, -1, 11, -1, 6, -1, 1, -1, 1, 2, -1, -1, -1, 1, 2, 3, 3, 4, 4, 4, -1, -1, -1, 3, 3, -1, 4, 4, 4, 4, -1, 3, 1, 1, -1, 1, 1, -1, -1, 2, -1, 2, -1, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 1, -1, 10, 13, 1, 2, 3, 11, 4, 5, 5, 6, 6, 6, -1, -1, -1, 15, 11, 16, -1, -1, 5, 5, -1, 6, 6, 6, 6, -1, -1, 8, 8, 17, 17, 17, 17, -1, 9, -1, 7, 8, 8, 10, 10, 10, 10, -1, 15, 11, -1, 12, 12, 18, 18, 18, 18, -1, 7, 12, 12, 13, 13, 13, 13, -1, 14, 14, 14, -1, 9, -1, 14, 14, 14, -1, 8, 8, 17, 17, 17, 17, -1, 12, 12, 18, 18, 18, 18, -1, 25, 29, 1, 2, 3, 26, 4, 5, 27, 31, 33, 35, 37, 39, 68, 40, 6, 7, 7, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, 32, 26, 34, -1, -1, 42, 66, 41, 41, 41, 41, 41, 41, -1, -1, 7, 7, -1, -1, 9, 9, 36, 36, 36, 36, -1, 41, 41, 41, 41, -1, 11, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 8, 9, 9, 25, 25, 25, 25, -1, 32, 26, -1, 43, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 8, 28, 28, 29, 29, 29, 29, -1, 30, 30, 30, -1, 67, 44, 75, 41, 41, 41, 41, 41, 41, -1, 11, -1, 45, 41, 41, 41, 41, 41, -1, 30, 30, 30, -1, 10, 46, 41, 41, 41, 41, 41, 41, -1, 9, 9, 36, 36, 36, 36, -1, 47, 48, 41, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 49, 41, 41, 41, 41, 41, -1, 51, 41, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 52, 41, 41, 41, 41, -1, 53, 41, 41, 41, 41, 41, -1, 12, 41, 41, 41, 41, 41, -1, 55, 41, 41, 41, 41, 41, -1, 72, 41, 41, 41, 41, 41, -1, 13, 41, 41, 41, 41, 41, -1, 14, 41, 41, 41, 41, 41, -1, 80, 41, 41, 41, 41, 41, -1, 56, 41, 41, 41, 41, 41, -1, 76, 41, 41, 41, 41, 41, -1, 57, 41, 41, 41, 41, 41, -1, 59, 41, 41, 41, 41, 41, -1, 61, 41, 41, 41, 41, 41, -1, 70, 41, 41, 41, 41, 41, -1, 15, 41, 41, 41, 41, 41, -1, 16, 41, 41, 41, 41, 41, -1, 17, 41, 41, 41, 41, 41, -1, 64, 41, 41, 41, 41, 41, -1, 18, 41, 41, 41, 41, 41, -1, 65, 41, 41, 41, 41, 41, -1, 19, 41, 41, 41, 41, 41, -1, 20, 41, 41, 41, 41, 41, -1, 69, 41, 41, 41, 41, 41, -1, 78, 41, 41, 41, 41, 41, -1, 73, 41, 41, 41, 41, 41, -1, 79, 41, 41, 41, 41, 41, -1, 50, 41, 41, 41, 41, 41, -1, 82, 41, 41, 41, 41, 41, -1, 81, 41, 41, 41, 41, -1, 24, 41, 41, 41, 41, 41, -1, 77, 41, 41, 41, 41, 41, -1, 58, 41, 41, 41, 41, 41, -1, 22, 41, 41, 41, 41, 41, -1, 54, 41, 41, 41, 41, 41, -1, 63, 41, 41, 41, 41, 41, -1, 74, 41, 41, 41, 41, 41, -1, 83, 41, 41, 41, 41, 41, -1, 60, 41, 41, 41, 41, 41, -1, 62, 41, 41, 41, 41, 41, -1, 21, 41, 41, 41, 41, 41, -1, 71, 41, 41, 41, 41, 41, -1, 23, 41, 41, 41, 41, 41, -1, 31, 35, 1, 2, 3, 32, 4, 5, 6, 7, 33, 37, 39, 41, 43, 45, 73, 46, 8, 9, 9, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, -1, -1, -1, 38, 32, 40, -1, 12, -1, 13, -1, -1, 48, 71, 47, 47, 47, 47, 47, 47, -1, -1, 9, 9, -1, -1, 11, 11, 42, 42, 42, 42, -1, -1, -1, 47, 47, 47, 47, -1, 62, 47, 47, 47, 47, 47, -1, 16, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 10, 11, 11, 31, 31, 31, 31, -1, 38, 32, -1, 49, 47, 47, 47, 47, 47, -1, 34, 34, 44, 44, 44, 44, -1, 10, 34, 34, 35, 35, 35, 35, -1, 36, 36, 36, -1, 72, 50, 78, 47, 47, 47, 47, 47, 47, -1, 16, -1, 51, 47, 47, 47, 47, 47, -1, 36, 36, 36, -1, 14, 52, 15, 47, 47, 47, 47, 47, 47, 47, -1, 11, 11, 42, 42, 42, 42, -1, 53, 54, 47, 47, 47, 47, 47, 47, -1, 34, 34, 44, 44, 44, 44, -1, 55, 47, 47, 47, 47, 47, -1, 57, 47, 47, 47, 47, 47, -1, 47, 47, 47, 47, -1, 58, 47, 47, 47, 47, -1, 59, 47, 47, 47, 47, 47, -1, 17, 47, 47, 47, 47, 47, -1, 61, 47, 47, 47, 47, 47, -1, 75, 47, 47, 47, 47, 47, -1, 18, 47, 47, 47, 47, 47, -1, 19, 47, 47, 47, 47, 47, -1, 83, 47, 47, 47, 47, 47, -1, 63, 47, 47, 47, 47, 47, -1, 79, 47, 47, 47, 47, 47, -1, 64, 47, 47, 47, 47, 47, -1, 87, 47, 47, 47, 47, 47, -1, 67, 47, 47, 47, 47, 47, -1, 74, 47, 47, 47, 47, 47, -1, 20, 47, 47, 47, 47, 47, -1, 21, 47, 47, 47, 47, 47, -1, 22, 47, 47, 47, 47, 47, -1, 23, 47, 47, 47, 47, 47, -1, 24, 47, 47, 47, 47, 47, -1, 70, 47, 47, 47, 47, 47, -1, 25, 47, 47, 47, 47, 47, -1, 26, 47, 47, 47, 47, 47, -1, 81, 47, 47, 47, 47, 47, -1, 76, 47, 47, 47, 47, 47, -1, 82, 47, 47, 47, 47, 47, -1, 56, 47, 47, 47, 47, 47, -1, 84, 47, 47, 47, 47, -1, 80, 47, 47, 47, 47, 47, -1, 65, 47, 47, 47, 47, 47, -1, 29, 47, 47, 47, 47, 47, -1, 60, 47, 47, 47, 47, 47, -1, 69, 47, 47, 47, 47, 47, -1, 77, 47, 47, 47, 47, 47, -1, 86, 47, 47, 47, 47, 47, -1, 66, 47, 47, 47, 47, 47, -1, 68, 47, 47, 47, 47, 47, -1, 28, 47, 47, 47, 47, 47, -1, 27, 47, 47, 47, 47, 47, -1, 30, 47, 47, 47, 47, 47, -1, 85, 47, 47, 47, 47, 47, -1, 1, 26, 31, 35, 2, 3, 37, 4, 28, 5, 6, 29, 34, 36, 38, 40, 42, 74, 44, 7, 8, 8, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, -1, -1, -1, -1, 41, 28, 43, -1, -1, 48, 72, 46, 46, 46, 46, 46, 46, -1, -1, 8, 8, -1, -1, 10, 10, 45, 45, 45, 45, -1, 46, 46, 46, 46, -1, 12, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 46, 46, 46, 46, -1, 9, 10, 10, 26, 26, 26, 26, -1, 27, 27, 31, 31, 31, -1, 41, 28, -1, 50, 46, 46, 46, 46, 46, -1, 30, 30, 47, 47, 47, 47, -1, 27, 27, 31, 31, 31, -1, 49, 39, 39, -1, 33, 33, 33, -1, 73, 51, 79, 46, 46, 46, 46, 46, 46, -1, 9, 30, 30, 35, 35, 35, 35, -1, 52, 46, 46, 46, 46, 46, -1, 39, -1, 11, 53, 46, 46, 46, 46, 46, 46, -1, 49, 39, 39, -1, 54, 55, 46, 46, 46, 46, 46, 46, -1, 12, -1, 56, 46, 46, 46, 46, 46, -1, 33, 33, 33, -1, 58, 46, 46, 46, 46, 46, -1, 10, 10, 45, 45, 45, 45, -1, 46, 46, 46, 46, -1, 30, 30, 47, 47, 47, 47, -1, 59, 46, 46, 46, 46, -1, 49, 32, 39, 39, 39, -1, 60, 46, 46, 46, 46, 46, -1, 13, 46, 46, 46, 46, 46, -1, 62, 46, 46, 46, 46, 46, -1, 76, 46, 46, 46, 46, 46, -1, 14, 46, 46, 46, 46, 46, -1, 15, 46, 46, 46, 46, 46, -1, 84, 46, 46, 46, 46, 46, -1, 63, 46, 46, 46, 46, 46, -1, 80, 46, 46, 46, 46, 46, -1, 64, 46, 46, 46, 46, 46, -1, 66, 46, 46, 46, 46, 46, -1, 68, 46, 46, 46, 46, 46, -1, 75, 46, 46, 46, 46, 46, -1, 16, 46, 46, 46, 46, 46, -1, 17, 46, 46, 46, 46, 46, -1, 18, 46, 46, 46, 46, 46, -1, 19, 46, 46, 46, 46, 46, -1, 20, 46, 46, 46, 46, 46, -1, 78, 46, 46, 46, 46, 46, -1, 21, 46, 46, 46, 46, 46, -1, 22, 46, 46, 46, 46, 46, -1, 24, 46, 46, 46, 46, 46, -1, 77, 46, 46, 46, 46, 46, -1, 83, 46, 46, 46, 46, 46, -1, 57, 46, 46, 46, 46, 46, -1, 85, 46, 46, 46, 46, -1, 81, 46, 46, 46, 46, 46, -1, 65, 46, 46, 46, 46, 46, -1, 82, 46, 46, 46, 46, 46, -1, 61, 46, 46, 46, 46, 46, -1, 70, 46, 46, 46, 46, 46, -1, 71, 46, 46, 46, 46, 46, -1, 86, 46, 46, 46, 46, 46, -1, 67, 46, 46, 46, 46, 46, -1, 69, 46, 46, 46, 46, 46, -1, 23, 46, 46, 46, 46, 46, -1, 25, 46, 46, 46, 46, 46, -1, 25, 29, 1, 2, 3, 26, 4, 5, 27, 31, 33, 35, 37, 39, 67, 40, 6, 7, 7, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, 32, 26, 34, -1, -1, 42, 65, 41, 41, 41, 41, 41, 41, -1, -1, 7, 7, -1, -1, 9, 9, 36, 36, 36, 36, -1, 41, 41, 41, 41, -1, 11, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 8, 9, 9, 25, 25, 25, 25, -1, 32, 26, -1, 43, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 8, 28, 28, 29, 29, 29, 29, -1, 30, 30, 30, -1, 66, 44, 72, 41, 41, 41, 41, 41, 41, -1, 11, -1, 45, 41, 41, 41, 41, 41, -1, 30, 30, 30, -1, 10, 46, 41, 41, 41, 41, 41, 41, -1, 9, 9, 36, 36, 36, 36, -1, 47, 48, 41, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 49, 41, 41, 41, 41, 41, -1, 51, 41, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 52, 41, 41, 41, 41, -1, 53, 41, 41, 41, 41, 41, -1, 12, 41, 41, 41, 41, 41, -1, 55, 41, 41, 41, 41, 41, -1, 69, 41, 41, 41, 41, 41, -1, 13, 41, 41, 41, 41, 41, -1, 14, 41, 41, 41, 41, 41, -1, 77, 41, 41, 41, 41, 41, -1, 56, 41, 41, 41, 41, 41, -1, 73, 41, 41, 41, 41, 41, -1, 57, 41, 41, 41, 41, 41, -1, 59, 41, 41, 41, 41, 41, -1, 61, 41, 41, 41, 41, 41, -1, 68, 41, 41, 41, 41, 41, -1, 15, 41, 41, 41, 41, 41, -1, 16, 41, 41, 41, 41, 41, -1, 17, 41, 41, 41, 41, 41, -1, 18, 41, 41, 41, 41, 41, -1, 19, 41, 41, 41, 41, 41, -1, 71, 41, 41, 41, 41, 41, -1, 20, 41, 41, 41, 41, 41, -1, 21, 41, 41, 41, 41, 41, -1, 23, 41, 41, 41, 41, 41, -1, 70, 41, 41, 41, 41, 41, -1, 76, 41, 41, 41, 41, 41, -1, 50, 41, 41, 41, 41, 41, -1, 78, 41, 41, 41, 41, -1, 74, 41, 41, 41, 41, 41, -1, 58, 41, 41, 41, 41, 41, -1, 75, 41, 41, 41, 41, 41, -1, 54, 41, 41, 41, 41, 41, -1, 63, 41, 41, 41, 41, 41, -1, 64, 41, 41, 41, 41, 41, -1, 79, 41, 41, 41, 41, 41, -1, 60, 41, 41, 41, 41, 41, -1, 62, 41, 41, 41, 41, 41, -1, 22, 41, 41, 41, 41, 41, -1, 24, 41, 41, 41, 41, 41, -1, 1, 1, 2, 2, 2, -1, 1, 1, -1, 2, 2, 2, 2, -1, 1, 2, 3, 3, -1, -1, -1, 3, 3, -1, 1, 2, 3, 4, 5, 6, 7, 8, 8, -1, -1, -1, -1, -1, 9, -1, -1, -1, 8, 8, -1, -1, 12, 15, 1, 2, 3, 4, 13, 5, 6, 7, 7, 8, 8, 8, -1, -1, -1, -1, 17, 13, 18, -1, -1, -1, 7, 7, -1, 8, 8, 8, 8, -1, -1, 10, 10, 19, 19, 19, 19, -1, 11, -1, 9, 10, 10, 12, 12, 12, 12, -1, 17, 13, -1, 14, 14, 20, 20, 20, 20, -1, 9, 14, 14, 15, 15, 15, 15, -1, 16, 16, 16, -1, 11, -1, 16, 16, 16, -1, 10, 10, 19, 19, 19, 19, -1, 14, 14, 20, 20, 20, 20, -1, 9, 12, 1, 2, 3, 10, 4, 5, 5, 5, -1, -1, -1, 14, 10, 15, -1, -1, 5, 5, 5, 5, -1, -1, 7, 7, 16, 16, 16, 16, -1, 8, -1, 6, 7, 7, 9, 9, 9, 9, -1, 14, 10, -1, 11, 11, 17, 17, 17, 17, -1, 6, 11, 11, 12, 12, 12, 12, -1, 13, 13, 13, -1, 8, -1, 13, 13, 13, -1, 7, 7, 16, 16, 16, 16, -1, 11, 11, 17, 17, 17, 17, -1, 2, -1, -1, 3, -1, 4, -1, 8, -1, 6, -1, 7, -1, 9, -1, 5, -1, 1, -1, 32, 36, 1, 2, 3, 33, 4, 5, 6, 7, 34, 38, 40, 42, 44, 46, 47, 72, 48, 8, 9, 9, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, -1, -1, -1, 39, 33, 41, -1, 12, -1, 13, -1, -1, 50, 70, 49, 49, 49, 49, 49, 49, -1, -1, 9, 9, -1, -1, 11, 11, 43, 43, 43, 43, -1, -1, -1, 49, 49, 49, 49, -1, 73, 49, 49, 49, 49, 49, -1, 16, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 10, 11, 11, 32, 32, 32, 32, -1, 39, 33, -1, 51, 49, 49, 49, 49, 49, -1, 35, 35, 45, 45, 45, 45, -1, 10, 35, 35, 36, 36, 36, 36, -1, 37, 37, 37, -1, 71, 52, 77, 49, 49, 49, 49, 49, 49, -1, 16, -1, 53, 49, 49, 49, 49, 49, -1, 37, 37, 37, -1, 14, 54, 15, 49, 49, 49, 49, 49, 49, 49, -1, 11, 11, 43, 43, 43, 43, -1, 55, 56, 49, 49, 49, 49, 49, 49, -1, 35, 35, 45, 45, 45, 45, -1, 57, 49, 49, 49, 49, 49, -1, 58, 49, 49, 49, 49, 49, -1, 60, 49, 49, 49, 49, 49, -1, 49, 49, 49, 49, -1, 61, 49, 49, 49, 49, -1, 63, 49, 49, 49, 49, 49, -1, 17, 49, 49, 49, 49, 49, -1, 66, 49, 49, 49, 49, 49, -1, 75, 49, 49, 49, 49, 49, -1, 18, 49, 49, 49, 49, 49, -1, 19, 49, 49, 49, 49, 49, -1, 83, 49, 49, 49, 49, 49, -1, 67, 49, 49, 49, 49, 49, -1, 76, 49, 49, 49, 49, 49, -1, 78, 49, 49, 49, 49, 49, -1, 68, 49, 49, 49, 49, 49, -1, 80, 49, 49, 49, 49, 49, -1, 91, 49, 49, 49, 49, 49, -1, 82, 49, 49, 49, 49, 49, -1, 86, 49, 49, 49, 49, 49, -1, 74, 49, 49, 49, 49, 49, -1, 21, 49, 49, 49, 49, 49, -1, 23, 49, 49, 49, 49, 49, -1, 81, 49, 49, 49, 49, 49, -1, 62, 49, 49, 49, 49, 49, -1, 64, 49, 49, 49, 49, 49, -1, 59, 49, 49, 49, 49, 49, -1, 20, 49, 49, 49, 49, 49, -1, 84, 49, 49, 49, 49, -1, 79, 49, 49, 49, 49, 49, -1, 22, 49, 49, 49, 49, 49, -1, 65, 49, 49, 49, 49, 49, -1, 87, 49, 49, 49, 49, 49, -1, 90, 49, 49, 49, 49, 49, -1, 24, 49, 49, 49, 49, 49, -1, 88, 49, 49, 49, 49, 49, -1, 25, 49, 49, 49, 49, 49, -1, 89, 49, 49, 49, 49, 49, -1, 29, 49, 49, 49, 49, 49, -1, 28, 49, 49, 49, 49, 49, -1, 69, 49, 49, 49, 49, 49, -1, 27, 49, 49, 49, 49, 49, -1, 31, 49, 49, 49, 49, 49, -1, 26, 49, 49, 49, 49, 49, -1, 30, 49, 49, 49, 49, 49, -1, 85, 49, 49, 49, 49, 49, -1, 2, -1, -1, 3, -1, 4, -1, 5, -1, 6, -1, 1, -1, 2, -1, -1, 3, -1, 4, -1, 5, -1, 1, -1, 1, 4, 5, -1, -1, -1, -1, 6, -1, 2, -1, 3, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 9, 9, -1, -1, 1, 2, 3, 4, 5, 6, -1, -1, -1, -1, -1, 7, -1, -1, -1, 1, 5, 7, 9, 10, 2, 2, -1, -1, 2, 2, -1, -1, -1, 6, 6, 5, 5, 5, -1, 6, 6, 5, 5, 5, -1, 11, -1, 14, 11, 11, -1, 12, -1, 13, -1, 14, 11, 11, -1, 15, -1, 16, -1, 14, 8, 11, 11, 11, -1, 17, -1, 18, -1, 19, -1, 22, -1, 20, -1, 21, -1, 4, -1, 3, -1, 25, 29, 1, 2, 3, 26, 4, 5, 27, 31, 33, 35, 37, 39, 66, 40, 6, 7, 7, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, -1, 32, 26, 34, -1, -1, 42, 64, 41, 41, 41, 41, 41, 41, -1, -1, 7, 7, -1, -1, 9, 9, 36, 36, 36, 36, -1, 41, 41, 41, 41, -1, 11, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 8, 9, 9, 25, 25, 25, 25, -1, 32, 26, -1, 43, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 8, 28, 28, 29, 29, 29, 29, -1, 30, 30, 30, -1, 65, 44, 71, 41, 41, 41, 41, 41, 41, -1, 11, -1, 45, 41, 41, 41, 41, 41, -1, 30, 30, 30, -1, 10, 46, 41, 41, 41, 41, 41, 41, -1, 9, 9, 36, 36, 36, 36, -1, 47, 48, 41, 41, 41, 41, 41, 41, -1, 28, 28, 38, 38, 38, 38, -1, 49, 41, 41, 41, 41, 41, -1, 51, 41, 41, 41, 41, 41, -1, 41, 41, 41, 41, -1, 52, 41, 41, 41, 41, -1, 53, 41, 41, 41, 41, 41, -1, 12, 41, 41, 41, 41, 41, -1, 55, 41, 41, 41, 41, 41, -1, 68, 41, 41, 41, 41, 41, -1, 13, 41, 41, 41, 41, 41, -1, 14, 41, 41, 41, 41, 41, -1, 76, 41, 41, 41, 41, 41, -1, 56, 41, 41, 41, 41, 41, -1, 72, 41, 41, 41, 41, 41, -1, 57, 41, 41, 41, 41, 41, -1, 80, 41, 41, 41, 41, 41, -1, 60, 41, 41, 41, 41, 41, -1, 67, 41, 41, 41, 41, 41, -1, 15, 41, 41, 41, 41, 41, -1, 16, 41, 41, 41, 41, 41, -1, 17, 41, 41, 41, 41, 41, -1, 18, 41, 41, 41, 41, 41, -1, 63, 41, 41, 41, 41, 41, -1, 19, 41, 41, 41, 41, 41, -1, 20, 41, 41, 41, 41, 41, -1, 74, 41, 41, 41, 41, 41, -1, 69, 41, 41, 41, 41, 41, -1, 75, 41, 41, 41, 41, 41, -1, 50, 41, 41, 41, 41, 41, -1, 77, 41, 41, 41, 41, -1, 73, 41, 41, 41, 41, 41, -1, 58, 41, 41, 41, 41, 41, -1, 23, 41, 41, 41, 41, 41, -1, 54, 41, 41, 41, 41, 41, -1, 62, 41, 41, 41, 41, 41, -1, 70, 41, 41, 41, 41, 41, -1, 79, 41, 41, 41, 41, 41, -1, 59, 41, 41, 41, 41, 41, -1, 61, 41, 41, 41, 41, 41, -1, 22, 41, 41, 41, 41, 41, -1, 21, 41, 41, 41, 41, 41, -1, 24, 41, 41, 41, 41, 41, -1, 78, 41, 41, 41, 41, 41, -1
_dfa_accept_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 98 ; itemsCnt
_dfa_accept_0 Variant_t VARIANT_ARRAY, 0, _dfa_accept_0_buffer
_dfa_accept_1 Variant_t VARIANT_ARRAY, 0, _dfa_accept_1_buffer
_dfa_accept_2 Variant_t VARIANT_ARRAY, 0, _dfa_accept_2_buffer
_dfa_accept_3 Variant_t VARIANT_ARRAY, 0, _dfa_accept_3_buffer
_dfa_accept_4 Variant_t VARIANT_ARRAY, 0, _dfa_accept_4_buffer
_dfa_accept_5 Variant_t VARIANT_ARRAY, 0, _dfa_accept_5_buffer
_dfa_accept_6 Variant_t VARIANT_ARRAY, 0, _dfa_accept_6_buffer
_dfa_accept_7 Variant_t VARIANT_ARRAY, 0, _dfa_accept_7_buffer
_dfa_accept_8 Variant_t VARIANT_ARRAY, 0, _dfa_accept_8_buffer
_dfa_accept_9 Variant_t VARIANT_ARRAY, 0, _dfa_accept_9_buffer
_dfa_accept_10 Variant_t VARIANT_ARRAY, 0, _dfa_accept_10_buffer
_dfa_accept_11 Variant_t VARIANT_ARRAY, 0, _dfa_accept_11_buffer
_dfa_accept_12 Variant_t VARIANT_ARRAY, 0, _dfa_accept_12_buffer
_dfa_accept_13 Variant_t VARIANT_ARRAY, 0, _dfa_accept_13_buffer
_dfa_accept_14 Variant_t VARIANT_ARRAY, 0, _dfa_accept_14_buffer
_dfa_accept_15 Variant_t VARIANT_ARRAY, 0, _dfa_accept_15_buffer
_dfa_accept_16 Variant_t VARIANT_ARRAY, 0, _dfa_accept_16_buffer
_dfa_accept_17 Variant_t VARIANT_ARRAY, 0, _dfa_accept_17_buffer
_dfa_accept_18 Variant_t VARIANT_ARRAY, 0, _dfa_accept_18_buffer
_dfa_accept_19 Variant_t VARIANT_ARRAY, 0, _dfa_accept_19_buffer
_dfa_accept_20 Variant_t VARIANT_ARRAY, 0, _dfa_accept_20_buffer
_dfa_accept_21 Variant_t VARIANT_ARRAY, 0, _dfa_accept_21_buffer
_dfa_accept_22 Variant_t VARIANT_ARRAY, 0, _dfa_accept_22_buffer
_dfa_accept_23 Variant_t VARIANT_ARRAY, 0, _dfa_accept_23_buffer
_dfa_accept_24 Variant_t VARIANT_ARRAY, 0, _dfa_accept_24_buffer
_dfa_accept_25 Variant_t VARIANT_ARRAY, 0, _dfa_accept_25_buffer
_dfa_accept_26 Variant_t VARIANT_ARRAY, 0, _dfa_accept_26_buffer
_dfa_accept_27 Variant_t VARIANT_ARRAY, 0, _dfa_accept_27_buffer
_dfa_accept_28 Variant_t VARIANT_ARRAY, 0, _dfa_accept_28_buffer
_dfa_accept_29 Variant_t VARIANT_ARRAY, 0, _dfa_accept_29_buffer
_dfa_accept_30 Variant_t VARIANT_ARRAY, 0, _dfa_accept_30_buffer
_dfa_accept_31 Variant_t VARIANT_ARRAY, 0, _dfa_accept_31_buffer
_dfa_accept_32 Variant_t VARIANT_ARRAY, 0, _dfa_accept_32_buffer
_dfa_accept_33 Variant_t VARIANT_ARRAY, 0, _dfa_accept_33_buffer
_dfa_accept_34 Variant_t VARIANT_ARRAY, 0, _dfa_accept_34_buffer
_dfa_accept_35 Variant_t VARIANT_ARRAY, 0, _dfa_accept_35_buffer
_dfa_accept_36 Variant_t VARIANT_ARRAY, 0, _dfa_accept_36_buffer
_dfa_accept_37 Variant_t VARIANT_ARRAY, 0, _dfa_accept_37_buffer
_dfa_accept_38 Variant_t VARIANT_ARRAY, 0, _dfa_accept_38_buffer
_dfa_accept_39 Variant_t VARIANT_ARRAY, 0, _dfa_accept_39_buffer
_dfa_accept_40 Variant_t VARIANT_ARRAY, 0, _dfa_accept_40_buffer
_dfa_accept_41 Variant_t VARIANT_ARRAY, 0, _dfa_accept_41_buffer
_dfa_accept_42 Variant_t VARIANT_ARRAY, 0, _dfa_accept_42_buffer
_dfa_accept_43 Variant_t VARIANT_ARRAY, 0, _dfa_accept_43_buffer
_dfa_accept_44 Variant_t VARIANT_ARRAY, 0, _dfa_accept_44_buffer
_dfa_accept_45 Variant_t VARIANT_ARRAY, 0, _dfa_accept_45_buffer
_dfa_accept_46 Variant_t VARIANT_ARRAY, 0, _dfa_accept_46_buffer
_dfa_accept_47 Variant_t VARIANT_ARRAY, 0, _dfa_accept_47_buffer
_dfa_accept_48 Variant_t VARIANT_ARRAY, 0, _dfa_accept_48_buffer
_dfa_accept_49 Variant_t VARIANT_ARRAY, 0, _dfa_accept_49_buffer
_dfa_accept_50 Variant_t VARIANT_ARRAY, 0, _dfa_accept_50_buffer
_dfa_accept_51 Variant_t VARIANT_ARRAY, 0, _dfa_accept_51_buffer
_dfa_accept_52 Variant_t VARIANT_ARRAY, 0, _dfa_accept_52_buffer
_dfa_accept_53 Variant_t VARIANT_ARRAY, 0, _dfa_accept_53_buffer
_dfa_accept_54 Variant_t VARIANT_ARRAY, 0, _dfa_accept_54_buffer
_dfa_accept_55 Variant_t VARIANT_ARRAY, 0, _dfa_accept_55_buffer
_dfa_accept_56 Variant_t VARIANT_ARRAY, 0, _dfa_accept_56_buffer
_dfa_accept_57 Variant_t VARIANT_ARRAY, 0, _dfa_accept_57_buffer
_dfa_accept_58 Variant_t VARIANT_ARRAY, 0, _dfa_accept_58_buffer
_dfa_accept_59 Variant_t VARIANT_ARRAY, 0, _dfa_accept_59_buffer
_dfa_accept_60 Variant_t VARIANT_ARRAY, 0, _dfa_accept_60_buffer
_dfa_accept_61 Variant_t VARIANT_ARRAY, 0, _dfa_accept_61_buffer
_dfa_accept_62 Variant_t VARIANT_ARRAY, 0, _dfa_accept_62_buffer
_dfa_accept_63 Variant_t VARIANT_ARRAY, 0, _dfa_accept_63_buffer
_dfa_accept_64 Variant_t VARIANT_ARRAY, 0, _dfa_accept_64_buffer
_dfa_accept_65 Variant_t VARIANT_ARRAY, 0, _dfa_accept_65_buffer
_dfa_accept_66 Variant_t VARIANT_ARRAY, 0, _dfa_accept_66_buffer
_dfa_accept_67 Variant_t VARIANT_ARRAY, 0, _dfa_accept_67_buffer
_dfa_accept_68 Variant_t VARIANT_ARRAY, 0, _dfa_accept_68_buffer
_dfa_accept_69 Variant_t VARIANT_ARRAY, 0, _dfa_accept_69_buffer
_dfa_accept_70 Variant_t VARIANT_ARRAY, 0, _dfa_accept_70_buffer
_dfa_accept_71 Variant_t VARIANT_ARRAY, 0, _dfa_accept_71_buffer
_dfa_accept_72 Variant_t VARIANT_ARRAY, 0, _dfa_accept_72_buffer
_dfa_accept_73 Variant_t VARIANT_ARRAY, 0, _dfa_accept_73_buffer
_dfa_accept_74 Variant_t VARIANT_ARRAY, 0, _dfa_accept_74_buffer
_dfa_accept_75 Variant_t VARIANT_ARRAY, 0, _dfa_accept_75_buffer
_dfa_accept_76 Variant_t VARIANT_ARRAY, 0, _dfa_accept_76_buffer
_dfa_accept_77 Variant_t VARIANT_ARRAY, 0, _dfa_accept_77_buffer
_dfa_accept_78 Variant_t VARIANT_ARRAY, 0, _dfa_accept_78_buffer
_dfa_accept_79 Variant_t VARIANT_ARRAY, 0, _dfa_accept_79_buffer
_dfa_accept_80 Variant_t VARIANT_ARRAY, 0, _dfa_accept_80_buffer
_dfa_accept_81 Variant_t VARIANT_ARRAY, 0, _dfa_accept_81_buffer
_dfa_accept_82 Variant_t VARIANT_ARRAY, 0, _dfa_accept_82_buffer
_dfa_accept_83 Variant_t VARIANT_ARRAY, 0, _dfa_accept_83_buffer
_dfa_accept_84 Variant_t VARIANT_ARRAY, 0, _dfa_accept_84_buffer
_dfa_accept_85 Variant_t VARIANT_ARRAY, 0, _dfa_accept_85_buffer
_dfa_accept_86 Variant_t VARIANT_ARRAY, 0, _dfa_accept_86_buffer
_dfa_accept_87 Variant_t VARIANT_ARRAY, 0, _dfa_accept_87_buffer
_dfa_accept_88 Variant_t VARIANT_ARRAY, 0, _dfa_accept_88_buffer
_dfa_accept_89 Variant_t VARIANT_ARRAY, 0, _dfa_accept_89_buffer
_dfa_accept_90 Variant_t VARIANT_ARRAY, 0, _dfa_accept_90_buffer
_dfa_accept_91 Variant_t VARIANT_ARRAY, 0, _dfa_accept_91_buffer
_dfa_accept_92 Variant_t VARIANT_ARRAY, 0, _dfa_accept_92_buffer
_dfa_accept_93 Variant_t VARIANT_ARRAY, 0, _dfa_accept_93_buffer
_dfa_accept_94 Variant_t VARIANT_ARRAY, 0, _dfa_accept_94_buffer
_dfa_accept_95 Variant_t VARIANT_ARRAY, 0, _dfa_accept_95_buffer
_dfa_accept_96 Variant_t VARIANT_ARRAY, 0, _dfa_accept_96_buffer
_dfa_accept_97 Variant_t VARIANT_ARRAY, 0, _dfa_accept_97_buffer
_symbolsGreedy_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 204 ; itemsCnt
db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
_productions_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 750 ; itemsCnt
dw 100, 2, 203, 0, 2, 200, 0, 1, 200, 0, 1, 199, 0, 0, 199, 101, 1, 202, 0, 2, 201, 0, 1, 201, 205, 1, 198, 152, 1, 198, 0, 1, 198, 0, 1, 198, 102, 1, 198, 103, 1, 198, 150, 1, 198, 160, 1, 198, 153, 1, 198, 161, 1, 198, 162, 1, 198, 163, 1, 198, 164, 1, 198, 165, 1, 198, 0, 2, 196, 0, 2, 196, 0, 2, 196, 0, 6, 196, 0, 6, 196, 0, 3, 197, 0, 4, 197, 0, 4, 197, 0, 3, 176, 0, 5, 176, 0, 4, 176, 0, 6, 176, 152, 4, 195, 0, 1, 173, 0, 0, 173, 0, 5, 193, 0, 4, 175, 0, 1, 172, 0, 0, 172, 0, 2, 175, 0, 1, 175, 0, 1, 175, 0, 3, 183, 0, 1, 183, 0, 3, 174, 0, 4, 174, 0, 2, 174, 0, 2, 174, 0, 1, 174, 0, 1, 174, 0, 5, 171, 0, 6, 171, 0, 2, 171, 0, 2, 171, 0, 3, 171, 0, 1, 171, 4, 1, 170, 0, 3, 168, 0, 4, 168, 0, 2, 168, 0, 2, 168, 0, 1, 168, 0, 1, 168, 152, 5, 166, 152, 5, 165, 0, 2, 164, 0, 4, 164, 0, 4, 192, 0, 1, 162, 0, 1, 162, 0, 2, 161, 0, 1, 161, 0, 1, 160, 0, 0, 160, 106, 6, 194, 104, 5, 163, 107, 5, 159, 201, 1, 158, 0, 1, 182, 0, 1, 182, 0, 1, 182, 0, 1, 182, 0, 1, 182, 0, 1, 182, 0, 1, 182, 350, 3, 182, 302, 3, 182, 303, 3, 182, 304, 3, 182, 305, 3, 182, 308, 3, 182, 301, 2, 182, 0, 3, 182, 0, 1, 156, 502, 2, 156, 400, 3, 156, 401, 3, 156, 404, 3, 156, 405, 3, 156, 402, 3, 156, 403, 3, 156, 0, 1, 155, 0, 3, 155, 0, 3, 155, 500, 3, 155, 501, 3, 155, 500, 4, 153, 0, 1, 152, 0, 1, 152, 501, 4, 153, 0, 1, 151, 0, 1, 151, 0, 1, 150, 0, 1, 150, 0, 3, 150, 0, 2, 191, 150, 2, 148, 0, 4, 149, 0, 6, 149, 0, 4, 149, 0, 9, 190, 0, 1, 146, 0, 0, 146, 1, 1, 147, 0, 2, 147, 0, 7, 188, 0, 7, 187, 0, 7, 185, 0, 9, 186, 0, 9, 184, 0, 5, 189, 203, 4, 157, 203, 4, 157, 204, 4, 157, 204, 3, 157, 0, 1, 180, 0, 1, 180, 0, 1, 181, 0, 1, 181, 0, 1, 181, 0, 1, 181, 0, 1, 181, 0, 1, 181, 0, 1, 181, 0, 1, 181, 0, 1, 181, 0, 1, 181, 9, 3, 143, 10, 3, 142, 0, 1, 141, 0, 0, 141, 9, 1, 178, 0, 3, 140, 20, 1, 145, 201, 1, 179, 4, 1, 144, 0, 3, 167, 0, 3, 167, 0, 3, 167, 0, 3, 167, 0, 3, 167, 0, 3, 167, 0, 2, 167, 0, 3, 167, 0, 1, 167, 0, 1, 167, 0, 1, 167, 0, 1, 167, 0, 1, 167, 1, 1, 177, 3, 1, 177, 4, 1, 177, 0, 1, 139, 0, 1, 138, 0, 1, 169, 0, 1, 169, 5, 1, 154, 5, 1, 154, 0, 1, 137, 0, 1, 136, 0, 2, 135, 0, 1, 135, 0, 1, 134, 0, 0, 134, 0, 2, 133, 0, 2, 132, 0, 2, 131, 0, 2, 130, 0, 2, 129, 0, 2, 128, 0, 2, 127, 0, 2, 126, 0, 2, 125, 0, 2, 124, 0, 2, 123, 0, 2, 122, 0, 2, 121, 0, 2, 120, 0, 2, 119, 0, 2, 118, 0, 2, 117, 0, 2, 116, 0, 2, 115, 0, 2, 114, 0, 2, 113, 0, 2, 112, 0, 2, 111, 0, 2, 110, 0, 2, 109, 0, 2, 108, 0, 2, 107, 0, 2, 106, 0, 2, 105, 0, 2, 104, 0, 2, 103, 0, 2, 102, 0, 2, 101, 0, 2, 100, 0, 2, 99, 0, 2, 98, 0, 2, 97, 0, 2, 96, 0, 2, 95, 0, 2, 94, 0, 2, 93, 0, 2, 92, 0, 2, 91, 0, 2, 90, 0, 2, 89, 0, 2, 88, 0, 2, 87, 0, 2, 86, 0, 2, 85, 0, 2, 84, 0, 2, 83, 0, 2, 82, 0, 2, 81, 0, 2, 80, 0, 2, 79, 0, 2, 78, 0, 2, 77, 0, 2, 76, 0, 2, 75, 0, 2, 74, 0, 2, 73, 0, 2, 72, 0, 2, 71, 0, 2, 70
__literal1_bufferBytes StringHead_t 6
 db  "parent" , 0
__literal2_bufferBytes StringHead_t 5
 db  "child" , 0
__literal3_bufferBytes StringHead_t 4
 db  "prev" , 0
__literal4_bufferBytes StringHead_t 4
 db  "next" , 0
__literal5_bufferBytes StringHead_t 4
 db  "emit" , 0
__literal6_bufferBytes StringHead_t 5
 db  "token" , 0
__literal7_bufferBytes StringHead_t 2
 db  "id" , 0
__literal8_bufferBytes StringHead_t 0
 db  "" , 0
__literal9_bufferBytes StringHead_t 2
 db  ".." , 0
__literal10_bufferBytes StringHead_t 34
 db  "----------------------------------" , 0
__literal11_bufferBytes StringHead_t 21
 db  " Abstract Syntax Tree" , 0
__literal12_bufferBytes StringHead_t 4
 db  "name" , 0
__literal13_bufferBytes StringHead_t 6
 db  "params" , 0
__literal14_bufferBytes StringHead_t 10
 db  "parameters" , 0
__literal15_bufferBytes StringHead_t 2
 db  "rv" , 0
__literal16_bufferBytes StringHead_t 8
 db  "baseName" , 0
__literal17_bufferBytes StringHead_t 4
 db  "this" , 0
__literal18_bufferBytes StringHead_t 6
 db  "opcode" , 0
__literal19_bufferBytes StringHead_t 5
 db  "value" , 0
__literal20_bufferBytes StringHead_t 4
 db  "line" , 0
__literal21_bufferBytes StringHead_t 6
 db  "column" , 0
__literal22_bufferBytes StringHead_t 8
 db  "filePath" , 0
__literal23_bufferBytes StringHead_t 8
 db  "children" , 0
__literal24_bufferBytes StringHead_t 12
 db  "constantsMap" , 0
__literal25_bufferBytes StringHead_t 1
 db  ":" , 0
__literal26_bufferBytes StringHead_t 9
 db  ": error: " , 0
__literal27_bufferBytes StringHead_t 16
 db  "going to parse [" , 0
__literal28_bufferBytes StringHead_t 7
 db  "] bytes" , 0
__literal29_bufferBytes StringHead_t 29
 db  "falling into main parser loop" , 0
__literal30_bufferBytes StringHead_t 30
 db  "------------------------------" , 0
__literal31_bufferBytes StringHead_t 13
 db  "MASTER ITER #" , 0
__literal32_bufferBytes StringHead_t 15
 db  "starting lex..." , 0
__literal33_bufferBytes StringHead_t 15
 db  "lex done: sym=[" , 0
__literal34_bufferBytes StringHead_t 1
 db  "]" , 0
__literal35_bufferBytes StringHead_t 17
 db  "got symbol: sym=[" , 0
__literal36_bufferBytes StringHead_t 7
 db  ", len=[" , 0
__literal37_bufferBytes StringHead_t 16
 db  "got action: rv=[" , 0
__literal38_bufferBytes StringHead_t 8
 db  "], act=[" , 0
__literal39_bufferBytes StringHead_t 8
 db  "], idx=[" , 0
__literal40_bufferBytes StringHead_t 12
 db  "syntax error" , 0
__literal41_bufferBytes StringHead_t 17
 db  "going to shift..." , 0
__literal42_bufferBytes StringHead_t 7
 db  "shifted" , 0
__literal43_bufferBytes StringHead_t 13
 db  "REDUCE ITER #" , 0
__literal44_bufferBytes StringHead_t 1
 db  "." , 0
__literal45_bufferBytes StringHead_t 5
 db  "print" , 0
__literal46_bufferBytes StringHead_t 6
 db  "global" , 0
__literal47_bufferBytes StringHead_t 6
 db  "import" , 0
__literal48_bufferBytes StringHead_t 27
 db  "__mold_arrayInsertAfterLast" , 0
__literal49_bufferBytes StringHead_t 28
 db  "__mold_arrayInsertBeforeLast" , 0
__literal50_bufferBytes StringHead_t 9
 db  "undefined" , 0
__literal51_bufferBytes StringHead_t 29
 db  "redeclaration of a constant '" , 0
__literal52_bufferBytes StringHead_t 1
 db  "'" , 0
__literal53_bufferBytes StringHead_t 4
 db  "read" , 0
__literal54_bufferBytes StringHead_t 5
 db  "write" , 0
__literal55_bufferBytes StringHead_t 20
 db  "__this_placeholder__" , 0
__literal56_bufferBytes StringHead_t 56
 db  "only constant values can be inserted into constant array" , 0
__literal57_bufferBytes StringHead_t 19
 db  "unterminated string" , 0
__literal58_bufferBytes StringHead_t 19
 db  "goal symbol? (lhs=[" , 0
__literal59_bufferBytes StringHead_t 9
 db  "], goal=[" , 0
__literal60_bufferBytes StringHead_t 13
 db  "], stackIdx=[" , 0
__literal61_bufferBytes StringHead_t 2
 db  "])" , 0
__literal62_bufferBytes StringHead_t 7
 db  "reduced" , 0
__literal63_bufferBytes StringHead_t 23
 db  "END CONDITION: reduce=[" , 0
__literal64_bufferBytes StringHead_t 12
 db  "], goalIdx=[" , 0
__literal65_bufferBytes StringHead_t 18
 db  "MAX ITERS reached!" , 0
AST_DataTypeNames_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
AST_DataTypeNames_0 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_0_buffer
AST_DataTypeNames_1 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_1_buffer
AST_DataTypeNames_2 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_2_buffer
AST_DataTypeNames_3 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_3_buffer
AST_DataTypeNames_4 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_4_buffer
AST_DataTypeNames_5 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_5_buffer
AST_DataTypeNames_6 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_6_buffer
AST_DataTypeNames_7 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_7_buffer
AST_DataTypeNames_8 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_8_buffer
AST_DataTypeNames_9 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_9_buffer
AST_DataTypeNames_10 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_10_buffer
AST_DataTypeForMIR_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
AST_DataTypeForMIR_0 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_0_buffer
AST_DataTypeForMIR_1 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_1_buffer
AST_DataTypeForMIR_2 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_2_buffer
AST_DataTypeForMIR_3 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_3_buffer
AST_DataTypeForMIR_4 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_4_buffer
AST_DataTypeForMIR_5 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_5_buffer
AST_DataTypeForMIR_6 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_6_buffer
AST_DataTypeForMIR_7 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_7_buffer
AST_DataTypeForMIR_8 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_8_buffer
AST_DataTypeForMIR_9 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_9_buffer
AST_DataTypeForMIR_10 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_10_buffer
__literal66_bufferBytes StringHead_t 7
 db  "PROGRAM" , 0
__literal67_bufferBytes StringHead_t 5
 db  "BLOCK" , 0
__literal68_bufferBytes StringHead_t 8
 db  "FUNCTION" , 0
__literal69_bufferBytes StringHead_t 5
 db  "CLASS" , 0
__literal70_bufferBytes StringHead_t 6
 db  "METHOD" , 0
__literal71_bufferBytes StringHead_t 2
 db  "IF" , 0
__literal72_bufferBytes StringHead_t 3
 db  "FOR" , 0
__literal73_bufferBytes StringHead_t 5
 db  "WHILE" , 0
__literal74_bufferBytes StringHead_t 4
 db  "CALL" , 0
__literal75_bufferBytes StringHead_t 18
 db  "REFERENCE_BY_INDEX" , 0
__literal76_bufferBytes StringHead_t 16
 db  "REFERENCE_BY_KEY" , 0
__literal77_bufferBytes StringHead_t 7
 db  "INTEGER" , 0
__literal78_bufferBytes StringHead_t 6
 db  "STRING" , 0
__literal79_bufferBytes StringHead_t 5
 db  "FLOAT" , 0
__literal80_bufferBytes StringHead_t 6
 db  "DOUBLE" , 0
__literal81_bufferBytes StringHead_t 4
 db  "BOOL" , 0
__literal82_bufferBytes StringHead_t 5
 db  "ARRAY" , 0
__literal83_bufferBytes StringHead_t 3
 db  "MAP" , 0
__literal84_bufferBytes StringHead_t 9
 db  "UNDEFINED" , 0
__literal85_bufferBytes StringHead_t 8
 db  "BOOL_AND" , 0
__literal86_bufferBytes StringHead_t 7
 db  "BOOL_OR" , 0
__literal87_bufferBytes StringHead_t 3
 db  "NEG" , 0
__literal88_bufferBytes StringHead_t 3
 db  "ADD" , 0
__literal89_bufferBytes StringHead_t 11
 db  "STRING_JOIN" , 0
__literal90_bufferBytes StringHead_t 3
 db  "SUB" , 0
__literal91_bufferBytes StringHead_t 3
 db  "MUL" , 0
__literal92_bufferBytes StringHead_t 3
 db  "DIV" , 0
__literal93_bufferBytes StringHead_t 4
 db  "IDIV" , 0
__literal94_bufferBytes StringHead_t 6
 db  "CMP_EQ" , 0
__literal95_bufferBytes StringHead_t 6
 db  "CMP_NE" , 0
__literal96_bufferBytes StringHead_t 6
 db  "CMP_LT" , 0
__literal97_bufferBytes StringHead_t 6
 db  "CMP_LE" , 0
__literal98_bufferBytes StringHead_t 6
 db  "CMP_GT" , 0
__literal99_bufferBytes StringHead_t 6
 db  "CMP_GE" , 0
__literal100_bufferBytes StringHead_t 17
 db  "DECLARE_OR_ASSIGN" , 0
__literal101_bufferBytes StringHead_t 8
 db  "VARIABLE" , 0
__literal102_bufferBytes StringHead_t 3
 db  "NOP" , 0
__literal103_bufferBytes StringHead_t 9
 db  "TYPE_CAST" , 0
__literal104_bufferBytes StringHead_t 8
 db  "CALL_NEW" , 0
__literal105_bufferBytes StringHead_t 5
 db  "VCALL" , 0
__literal106_bufferBytes StringHead_t 10
 db  "[UNKNOWN: " , 0
__literal107_bufferBytes StringHead_t 2
 db  "&i" , 0
__literal108_bufferBytes StringHead_t 2
 db  "&s" , 0
__literal109_bufferBytes StringHead_t 1
 db  "i" , 0
__literal110_bufferBytes StringHead_t 1
 db  "s" , 0
__literal111_bufferBytes StringHead_t 1
 db  "f" , 0
__literal112_bufferBytes StringHead_t 1
 db  "b" , 0
__literal113_bufferBytes StringHead_t 1
 db  "a" , 0
__literal114_bufferBytes StringHead_t 1
 db  "m" , 0
__literal115_bufferBytes StringHead_t 3
 db  "and" , 0
__literal116_bufferBytes StringHead_t 2
 db  "or" , 0
__literal117_bufferBytes StringHead_t 1
 db  "-" , 0
__literal118_bufferBytes StringHead_t 1
 db  "+" , 0
__literal119_bufferBytes StringHead_t 1
 db  "~" , 0
__literal120_bufferBytes StringHead_t 1
 db  "*" , 0
__literal121_bufferBytes StringHead_t 1
 db  "/" , 0
__literal122_bufferBytes StringHead_t 2
 db  "//" , 0
__literal123_bufferBytes StringHead_t 2
 db  "eq" , 0
__literal124_bufferBytes StringHead_t 2
 db  "ne" , 0
__literal125_bufferBytes StringHead_t 2
 db  "lt" , 0
__literal126_bufferBytes StringHead_t 2
 db  "le" , 0
__literal127_bufferBytes StringHead_t 2
 db  "gt" , 0
__literal128_bufferBytes StringHead_t 2
 db  "ge" , 0
__literal129_bufferBytes StringHead_t 1
 db  "v" , 0
__literal130_bufferBytes StringHead_t 4
 db  "call" , 0
__literal131_bufferBytes StringHead_t 3
 db  "new" , 0
__literal132_bufferBytes StringHead_t 5
 db  "vcall" , 0
__literal133_bufferBytes StringHead_t 5
 db  "block" , 0
__literal134_bufferBytes StringHead_t 1
 db  "=" , 0
__literal135_bufferBytes StringHead_t 3
 db  "for" , 0
__literal136_bufferBytes StringHead_t 5
 db  "while" , 0
__literal137_bufferBytes StringHead_t 2
 db  "if" , 0
__literal138_bufferBytes StringHead_t 5
 db  "for_v" , 0
__literal139_bufferBytes StringHead_t 5
 db  "for_k" , 0
__literal140_bufferBytes StringHead_t 5
 db  "for_i" , 0
__literal141_bufferBytes StringHead_t 6
 db  "for_iv" , 0
__literal142_bufferBytes StringHead_t 6
 db  "for_kv" , 0
__literal143_bufferBytes StringHead_t 4
 db  "cast" , 0
__literal144_bufferBytes StringHead_t 3
 db  "nop" , 0
__literal145_bufferBytes StringHead_t 5
 db  "error" , 0
__literal146_bufferBytes StringHead_t 25
 db  "error: unhandled opcode: " , 0
__literal147_bufferBytes StringHead_t 46
 db  "error: unhandled opcode in AST_InvertBoolean: " , 0
__literal148_bufferBytes StringHead_t 5
 db  "array" , 0
__literal149_bufferBytes StringHead_t 3
 db  "map" , 0
__literal150_bufferBytes StringHead_t 14
 db  "__mold_syscall" , 0
__literal151_bufferBytes StringHead_t 9
 db  "sysCallId" , 0
__literal152_bufferBytes StringHead_t 4
 db  "hash" , 0
__literal153_bufferBytes StringHead_t 1
 db  "@" , 0
__literal154_bufferBytes StringHead_t 11
 db  "storedValue" , 0
__literal155_bufferBytes StringHead_t 1
 db  "," , 0
__literal156_bufferBytes StringHead_t 5
 db  "cast," , 0
__literal157_bufferBytes StringHead_t 11
 db  "astDataType" , 0
__literal158_bufferBytes StringHead_t 7
 db  "variant" , 0
__literal159_bufferBytes StringHead_t 18
 db  "_cachedAstDataType" , 0
__literal160_bufferBytes StringHead_t 7
 db  "integer" , 0
__literal161_bufferBytes StringHead_t 10
 db  "symbolInfo" , 0
__literal162_bufferBytes StringHead_t 7
 db  "astType" , 0
__literal163_bufferBytes StringHead_t 57
 db  "error: unset AST data type at AST_GetDataType() at node #" , 0
__literal164_bufferBytes StringHead_t 7
 db  "[error]" , 0
__literal165_bufferBytes StringHead_t 5
 db  "local" , 0
__literal166_bufferBytes StringHead_t 5
 db  "param" , 0
__literal167_bufferBytes StringHead_t 5
 db  "const" , 0
__literal168_bufferBytes StringHead_t 5
 db  "label" , 0
__literal169_bufferBytes StringHead_t 8
 db  "function" , 0
__literal170_bufferBytes StringHead_t 5
 db  "class" , 0
__literal171_bufferBytes StringHead_t 6
 db  "method" , 0
__literal172_bufferBytes StringHead_t 18
 db  "Created new object" , 0
__literal173_bufferBytes StringHead_t 3
 db  "app" , 0
__literal174_bufferBytes StringHead_t 7
 db  "deepIdx" , 0
__literal175_bufferBytes StringHead_t 7
 db  "deepMax" , 0
__literal176_bufferBytes StringHead_t 9
 db  "loopLevel" , 0
__literal177_bufferBytes StringHead_t 9
 db  "procLevel" , 0
__literal178_bufferBytes StringHead_t 8
 db  "literals" , 0
__literal179_bufferBytes StringHead_t 14
 db  "poolOfTempVars" , 0
__literal180_bufferBytes StringHead_t 5
 db  "int32" , 0
__literal181_bufferBytes StringHead_t 3
 db  "cnt" , 0
__literal182_bufferBytes StringHead_t 4
 db  "pool" , 0
__literal183_bufferBytes StringHead_t 5
 db  "int64" , 0
__literal184_bufferBytes StringHead_t 7
 db  "float64" , 0
__literal185_bufferBytes StringHead_t 6
 db  "bool32" , 0
__literal186_bufferBytes StringHead_t 6
 db  "string" , 0
__literal187_bufferBytes StringHead_t 7
 db  "symbols" , 0
__literal188_bufferBytes StringHead_t 15
 db  "[ SymbolTable ]" , 0
__literal189_bufferBytes StringHead_t 18
 db  "redeclaration of '" , 0
__literal190_bufferBytes StringHead_t 9
 db  "writeHits" , 0
__literal191_bufferBytes StringHead_t 8
 db  "readHits" , 0
__literal192_bufferBytes StringHead_t 4
 db  "kind" , 0
__literal193_bufferBytes StringHead_t 32
 db  "' was not declared in this scope" , 0
__literal194_bufferBytes StringHead_t 11
 db  "Enter scope" , 0
__literal195_bufferBytes StringHead_t 10
 db  "too deep (" , 0
__literal196_bufferBytes StringHead_t 1
 db  ")" , 0
__literal197_bufferBytes StringHead_t 12
 db  "functionName" , 0
__literal198_bufferBytes StringHead_t 11
 db  "Leave scope" , 0
__literal199_bufferBytes StringHead_t 21
 db  "unmatched scope leave" , 0
__literal200_bufferBytes StringHead_t 5
 db  "proto" , 0
__literal201_bufferBytes StringHead_t 19
 db  "' is not a function" , 0
__literal202_bufferBytes StringHead_t 10
 db  "classProto" , 0
__literal203_bufferBytes StringHead_t 10
 db  "function '" , 0
__literal204_bufferBytes StringHead_t 19
 db  "' requires exactly " , 0
__literal205_bufferBytes StringHead_t 17
 db  " parameters, but " , 0
__literal206_bufferBytes StringHead_t 12
 db  " were passed" , 0
__literal207_bufferBytes StringHead_t 16
 db  "' is not a class" , 0
__literal208_bufferBytes StringHead_t 43
 db  "attemp to declare local within global table" , 0
__literal209_bufferBytes StringHead_t 37
 db  "global directive used in global space" , 0
__literal210_bufferBytes StringHead_t 32
 db  "conflicting declaration 'global " , 0
__literal211_bufferBytes StringHead_t 9
 db  "__literal" , 0
__literal212_bufferBytes StringHead_t 7
 db  "__const" , 0
__literal213_bufferBytes StringHead_t 4
 db  "node" , 0
__literal214_bufferBytes StringHead_t 17
 db  "attemp to assign " , 0
__literal215_bufferBytes StringHead_t 4
 db  " to " , 0
__literal216_bufferBytes StringHead_t 17
 db  "Assign AST type [" , 0
__literal217_bufferBytes StringHead_t 15
 db  "] to variable [" , 0
__literal218_bufferBytes StringHead_t 42
 db  "Ignored ineffective AST type change from [" , 0
__literal219_bufferBytes StringHead_t 6
 db  "] to [" , 0
__literal220_bufferBytes StringHead_t 16
 db  "] for variable [" , 0
__literal221_bufferBytes StringHead_t 4
 db  "type" , 0
__literal222_bufferBytes StringHead_t 23
 db  "Removed unused symbol [" , 0
__literal223_bufferBytes StringHead_t 1
 db  "l" , 0
__literal224_bufferBytes StringHead_t 10
 db  "__jmptable" , 0
__literal225_bufferBytes StringHead_t 6
 db  "labels" , 0
__literal226_bufferBytes StringHead_t 14
 db  "Get temp var [" , 0
__literal227_bufferBytes StringHead_t 13
 db  "] from pool (" , 0
__literal228_bufferBytes StringHead_t 3
 db  "tmp" , 0
__literal229_bufferBytes StringHead_t 6
 db  "isTemp" , 0
__literal230_bufferBytes StringHead_t 24
 db  "Allocated new temp var [" , 0
__literal231_bufferBytes StringHead_t 3
 db  "] (" , 0
__literal232_bufferBytes StringHead_t 18
 db  "Release temp var [" , 0
__literal233_bufferBytes StringHead_t 11
 db  "] to pool (" , 0
__literal234_bufferBytes StringHead_t 15
 db  "importedModules" , 0
__literal235_bufferBytes StringHead_t 6
 db  "parser" , 0
__literal236_bufferBytes StringHead_t 18
 db  "Resolving module [" , 0
__literal237_bufferBytes StringHead_t 4
 db  "]..." , 0
__literal238_bufferBytes StringHead_t 23
 db  "[ ASTSymbolsCollector ]" , 0
__literal239_bufferBytes StringHead_t 11
 db  "symbolTable" , 0
__literal240_bufferBytes StringHead_t 37
 db  "error: string type cannot be modified" , 0
__literal241_bufferBytes StringHead_t 6
 db  "vtable" , 0
__literal242_bufferBytes StringHead_t 8
 db  "fullName" , 0
__literal243_bufferBytes StringHead_t 2
 db  "__" , 0
__literal244_bufferBytes StringHead_t 1
 db  "_" , 0
__literal245_bufferBytes StringHead_t 1
 db  "$" , 0
__literal246_bufferBytes StringHead_t 9
 db  "className" , 0
__literal247_bufferBytes StringHead_t 10
 db  "baseMethod" , 0
__literal248_bufferBytes StringHead_t 12
 db  "isOverloaded" , 0
__literal249_bufferBytes StringHead_t 18
 db  "propertyClassNames" , 0
__literal250_bufferBytes StringHead_t 30
 db  "error: unset return variable '" , 0
__literal251_bufferBytes StringHead_t 6
 db  "' in '" , 0
__literal252_bufferBytes StringHead_t 10
 db  "' function" , 0
__literal253_bufferBytes StringHead_t 4
 db  "argv" , 0
__literal254_bufferBytes StringHead_t 4
 db  "argc" , 0
__literal255_bufferBytes StringHead_t 51
 db  "Class mismatch while assigning new object at node #" , 0
__literal256_bufferBytes StringHead_t 8
 db  "error: ", 34, "" , 0
__literal257_bufferBytes StringHead_t 39
 db  "", 34, " is already defined in another context" , 0
__literal258_bufferBytes StringHead_t 14
 db  "usedAsIterator" , 0
__literal259_bufferBytes StringHead_t 5
 db  "super" , 0
__literal260_bufferBytes StringHead_t 7
 db  "builtIn" , 0
__literal261_bufferBytes StringHead_t 11
 db  "isRecursive" , 0
__literal262_bufferBytes StringHead_t 33
 db  "Recursive call detected at node #" , 0
__literal263_bufferBytes StringHead_t 2
 db  " (" , 0
__literal264_bufferBytes StringHead_t 55
 db  "error: only block or program nodes can own symbol table" , 0
__literal265_bufferBytes StringHead_t 16
 db  "[ ASTEvaluator ]" , 0
__literal266_bufferBytes StringHead_t 8
 db  "__parent" , 0
__literal267_bufferBytes StringHead_t 15
 db  "error: method ", 34, "" , 0
__literal268_bufferBytes StringHead_t 21
 db  "", 34, " has no return value" , 0
__literal269_bufferBytes StringHead_t 28
 db  "error: array or map expected" , 0
__literal270_bufferBytes StringHead_t 15
 db  "FileOpenForRead" , 0
__literal271_bufferBytes StringHead_t 16
 db  "FileOpenForWrite" , 0
__literal272_bufferBytes StringHead_t 17
 db  "FileOpenForCreate" , 0
__literal273_bufferBytes StringHead_t 9
 db  "FileClose" , 0
__literal274_bufferBytes StringHead_t 12
 db  "FileReadInt8" , 0
__literal275_bufferBytes StringHead_t 13
 db  "FileReadInt16" , 0
__literal276_bufferBytes StringHead_t 13
 db  "FileReadInt32" , 0
__literal277_bufferBytes StringHead_t 13
 db  "FileReadInt64" , 0
__literal278_bufferBytes StringHead_t 15
 db  "FileReadFloat32" , 0
__literal279_bufferBytes StringHead_t 15
 db  "FileReadFloat64" , 0
__literal280_bufferBytes StringHead_t 13
 db  "FileReadBool8" , 0
__literal281_bufferBytes StringHead_t 14
 db  "FileReadBool16" , 0
__literal282_bufferBytes StringHead_t 14
 db  "FileReadBool32" , 0
__literal283_bufferBytes StringHead_t 14
 db  "FileReadBool64" , 0
__literal284_bufferBytes StringHead_t 12
 db  "FileReadChar" , 0
__literal285_bufferBytes StringHead_t 13
 db  "FileWriteInt8" , 0
__literal286_bufferBytes StringHead_t 13
 db  "FileWriteChar" , 0
__literal287_bufferBytes StringHead_t 14
 db  "FileWriteInt16" , 0
__literal288_bufferBytes StringHead_t 14
 db  "FileWriteInt32" , 0
__literal289_bufferBytes StringHead_t 14
 db  "FileWriteInt64" , 0
__literal290_bufferBytes StringHead_t 16
 db  "FileWriteFloat64" , 0
__literal291_bufferBytes StringHead_t 8
 db  "FileLoad" , 0
__literal292_bufferBytes StringHead_t 3
 db  "ord" , 0
__literal293_bufferBytes StringHead_t 3
 db  "asc" , 0
__literal294_bufferBytes StringHead_t 12
 db  "ParseInteger" , 0
__literal295_bufferBytes StringHead_t 10
 db  "ParseFloat" , 0
__literal296_bufferBytes StringHead_t 6
 db  "bitand" , 0
__literal297_bufferBytes StringHead_t 5
 db  "bitor" , 0
__literal298_bufferBytes StringHead_t 6
 db  "bitxor" , 0
__literal299_bufferBytes StringHead_t 6
 db  "bitnot" , 0
__literal300_bufferBytes StringHead_t 4
 db  "exit" , 0
__literal301_bufferBytes StringHead_t 3
 db  "die" , 0
__literal302_bufferBytes StringHead_t 3
 db  "str" , 0
__literal303_bufferBytes StringHead_t 3
 db  "len" , 0
__literal304_bufferBytes StringHead_t 6
 db  "typeof" , 0
__literal305_bufferBytes StringHead_t 23
 db  "__mold_printToStdOutput" , 0
__literal306_bufferBytes StringHead_t 14
 db  "__mold_warning" , 0
__literal307_bufferBytes StringHead_t 29
 db  "__mold_arrayInsertBeforeFirst" , 0
__literal308_bufferBytes StringHead_t 19
 db  "[ ASTPreprocessor ]" , 0
__literal309_bufferBytes StringHead_t 7
 db  "defined" , 0
__literal310_bufferBytes StringHead_t 9
 db  "built-in " , 0
__literal311_bufferBytes StringHead_t 27
 db  " function requires exactly " , 0
__literal312_bufferBytes StringHead_t 19
 db  " parameter(s), but " , 0
__literal313_bufferBytes StringHead_t 5
 db  "@last" , 0
__literal314_bufferBytes StringHead_t 8
 db  "@last..." , 0
__literal315_bufferBytes StringHead_t 10
 db  "@last DONE" , 0
__literal316_bufferBytes StringHead_t 17
 db  "unknown selector " , 0
__literal317_bufferBytes StringHead_t 7
 db  "globals" , 0
__literal318_bufferBytes StringHead_t 22
 db  "[ ASTConstantFolding ]" , 0
__literal319_bufferBytes StringHead_t 10
 db  "Set node #" , 0
__literal320_bufferBytes StringHead_t 9
 db  " to imm ", 34, "" , 0
__literal321_bufferBytes StringHead_t 3
 db  "", 34, " (" , 0
__literal322_bufferBytes StringHead_t 7
 db  "boolean" , 0
__literal323_bufferBytes StringHead_t 5
 db  "float" , 0
__literal324_bufferBytes StringHead_t 45
 db  "error: unhandled result in constant folding: " , 0
__literal325_bufferBytes StringHead_t 11
 db  "_undefined_" , 0
__literal326_bufferBytes StringHead_t 1
 db  " " , 0
__literal327_bufferBytes StringHead_t 6
 db  "nextId" , 0
__literal328_bufferBytes StringHead_t 5
 db  "__cse" , 0
__literal329_bufferBytes StringHead_t 19
 db  "[ ASTOptimizerCSE ]" , 0
__literal330_bufferBytes StringHead_t 29
 db  "Useless self-assign at node #" , 0
__literal331_bufferBytes StringHead_t 26
 db  "Expression found at node #" , 0
__literal332_bufferBytes StringHead_t 3
 db  ", (" , 0
__literal333_bufferBytes StringHead_t 32
 db  "Common subexpression at nodes (#" , 0
__literal334_bufferBytes StringHead_t 3
 db  ", #" , 0
__literal335_bufferBytes StringHead_t 3
 db  ") (" , 0
__literal336_bufferBytes StringHead_t 32
 db  "error: cse found, but not emited" , 0
__literal337_bufferBytes StringHead_t 30
 db  "[ ASTOptimizerDeadCodeRemove ]" , 0
__literal338_bufferBytes StringHead_t 13
 db  "Remove node #" , 0
__literal339_bufferBytes StringHead_t 16
 db  "Replacing node #" , 0
__literal340_bufferBytes StringHead_t 5
 db  " by #" , 0
__literal341_bufferBytes StringHead_t 71
 db  "error: unset symbol table at ASTOptimizerDeadCodeRemove::_processNode()" , 0
__literal342_bufferBytes StringHead_t 63
 db  "error: unset node at ASTOptimizerDeadCodeRemove::_processNode()" , 0
__literal343_bufferBytes StringHead_t 24
 db  "Empty for loop at node #" , 0
__literal344_bufferBytes StringHead_t 26
 db  "Empty while loop at node #" , 0
__literal345_bufferBytes StringHead_t 24
 db  "While false {} at node #" , 0
__literal346_bufferBytes StringHead_t 24
 db  "Remove empty else node #" , 0
__literal347_bufferBytes StringHead_t 27
 db  "Remove empty if body node #" , 0
__literal348_bufferBytes StringHead_t 29
 db  "Invert condition at if node #" , 0
__literal349_bufferBytes StringHead_t 18
 db  "Empty if at node #" , 0
__literal350_bufferBytes StringHead_t 23
 db  "if true {...} at node #" , 0
__literal351_bufferBytes StringHead_t 35
 db  "if false {...} else {...} at node #" , 0
__literal352_bufferBytes StringHead_t 24
 db  "if false {...} at node #" , 0
__literal353_bufferBytes StringHead_t 14
 db  "hasSideEffects" , 0
__literal354_bufferBytes StringHead_t 24
 db  "Useless assign at node #" , 0
__literal355_bufferBytes StringHead_t 34
 db  "Reduced nested type cast at node #" , 0
__literal356_bufferBytes StringHead_t 21
 db  "[ ASTOptimizerVCall ]" , 0
__literal357_bufferBytes StringHead_t 15
 db  "Skipped vcall [" , 0
__literal358_bufferBytes StringHead_t 11
 db  "] at node #" , 0
__literal359_bufferBytes StringHead_t 15
 db  "Changed vcall [" , 0
__literal360_bufferBytes StringHead_t 28
 db  "] to ordinary call at node #" , 0
__literal361_bufferBytes StringHead_t 18
 db  "[ ASTOptimizerIf ]" , 0
__literal362_bufferBytes StringHead_t 13
 db  "arrayOfValues" , 0
__literal363_bufferBytes StringHead_t 8
 db  "valueMin" , 0
__literal364_bufferBytes StringHead_t 8
 db  "valueMax" , 0
__literal365_bufferBytes StringHead_t 16
 db  "symbolsCollector" , 0
__literal366_bufferBytes StringHead_t 22
 db  "[ ASTOptimizerInline ]" , 0
__literal367_bufferBytes StringHead_t 32
 db  "Skipped recursive call at node #" , 0
__literal368_bufferBytes StringHead_t 8
 db  "__inline" , 0
__literal369_bufferBytes StringHead_t 22
 db  "Inject function body (" , 0
__literal370_bufferBytes StringHead_t 11
 db  ") at node #" , 0
__literal371_bufferBytes StringHead_t 15
 db  "[ ASTTypeCast ]" , 0
__literal372_bufferBytes StringHead_t 45
 db  "Type mismatch at arithmetic expression node #" , 0
__literal373_bufferBytes StringHead_t 4
 db  " vs " , 0
__literal374_bufferBytes StringHead_t 4
 db  "code" , 0
__literal375_bufferBytes StringHead_t 7
 db  "codeCnt" , 0
__literal376_bufferBytes StringHead_t 9
 db  "labelsCnt" , 0
__literal377_bufferBytes StringHead_t 9
 db  "targetIps" , 0
__literal378_bufferBytes StringHead_t 12
 db  "targetIpsCnt" , 0
__literal379_bufferBytes StringHead_t 10
 db  "procedures" , 0
__literal380_bufferBytes StringHead_t 13
 db  "proceduresCnt" , 0
__literal381_bufferBytes StringHead_t 6
 db  "tmpMax" , 0
__literal382_bufferBytes StringHead_t 8
 db  "localMax" , 0
__literal383_bufferBytes StringHead_t 9
 db  "globalMax" , 0
__literal384_bufferBytes StringHead_t 8
 db  "classMap" , 0
__literal385_bufferBytes StringHead_t 9
 db  "classList" , 0
__literal386_bufferBytes StringHead_t 12
 db  "classListCnt" , 0
__literal387_bufferBytes StringHead_t 10
 db  "methodsMap" , 0
__literal388_bufferBytes StringHead_t 11
 db  "methodsList" , 0
__literal389_bufferBytes StringHead_t 14
 db  "methodsListCnt" , 0
__literal390_bufferBytes StringHead_t 8
 db  "comments" , 0
__literal391_bufferBytes StringHead_t 11
 db  "commentsCnt" , 0
__literal392_bufferBytes StringHead_t 14
 db  "unresolvedJmps" , 0
__literal393_bufferBytes StringHead_t 17
 db  "unresolvedJmpsCnt" , 0
__literal394_bufferBytes StringHead_t 9
 db  "startAddr" , 0
__literal395_bufferBytes StringHead_t 9
 db  "paramsCnt" , 0
__literal396_bufferBytes StringHead_t 7
 db  "endAddr" , 0
__literal397_bufferBytes StringHead_t 9
 db  "localsCnt" , 0
__literal398_bufferBytes StringHead_t 8
 db  "tempsCnt" , 0
__literal399_bufferBytes StringHead_t 29
 db  "error: jmp to undefined label" , 0
__literal400_bufferBytes StringHead_t 25
 db  "error: invalid label id '" , 0
__literal401_bufferBytes StringHead_t 17
 db  "error: label id '" , 0
__literal402_bufferBytes StringHead_t 19
 db  "' is already emited" , 0
__literal403_bufferBytes StringHead_t 27
 db  "astOptimizerConstantFolding" , 0
__literal404_bufferBytes StringHead_t 19
 db  "astSymbolsCollector" , 0
__literal405_bufferBytes StringHead_t 12
 db  "astEvaluator" , 0
__literal406_bufferBytes StringHead_t 15
 db  "astPreprocessor" , 0
__literal407_bufferBytes StringHead_t 15
 db  "astOptimizerCSE" , 0
__literal408_bufferBytes StringHead_t 26
 db  "astOptimizerDeadCodeRemove" , 0
__literal409_bufferBytes StringHead_t 17
 db  "astOptimizerVCall" , 0
__literal410_bufferBytes StringHead_t 14
 db  "astOptimizerIf" , 0
__literal411_bufferBytes StringHead_t 18
 db  "astOptimizerInline" , 0
__literal412_bufferBytes StringHead_t 11
 db  "astTypeCast" , 0
__literal413_bufferBytes StringHead_t 17
 db  "astModuleResolver" , 0
__literal414_bufferBytes StringHead_t 13
 db  "Ready to work" , 0
__literal415_bufferBytes StringHead_t 6
 db  "logCtx" , 0
__literal416_bufferBytes StringHead_t 11
 db  "[ AppMold ]" , 0
__literal417_bufferBytes StringHead_t 1
 db  "(" , 0
__literal418_bufferBytes StringHead_t 2
 db  "  " , 0
__literal419_bufferBytes StringHead_t 2
 db  ", " , 0
__literal420_bufferBytes StringHead_t 1
 db  "[" , 0
__literal421_bufferBytes StringHead_t 2
 db  "{}" , 0
__literal422_bufferBytes StringHead_t 5
 db  "[map]" , 0
__literal423_bufferBytes StringHead_t 6
 db  " const" , 0
__literal424_bufferBytes StringHead_t 6
 db  "class " , 0
__literal425_bufferBytes StringHead_t 8
 db  "endclass" , 0
__literal426_bufferBytes StringHead_t 7
 db  "method " , 0
__literal427_bufferBytes StringHead_t 9
 db  "function " , 0
__literal428_bufferBytes StringHead_t 3
 db  " ->" , 0
__literal429_bufferBytes StringHead_t 9
 db  "endmethod" , 0
__literal430_bufferBytes StringHead_t 11
 db  "endfunction" , 0
__literal431_bufferBytes StringHead_t 4
 db  "new " , 0
__literal432_bufferBytes StringHead_t 3
 db  "if " , 0
__literal433_bufferBytes StringHead_t 4
 db  "else" , 0
__literal434_bufferBytes StringHead_t 5
 db  "endif" , 0
__literal435_bufferBytes StringHead_t 7
 db  "switch " , 0
__literal436_bufferBytes StringHead_t 7
 db  "  when " , 0
__literal437_bufferBytes StringHead_t 11
 db  "  otherwise" , 0
__literal438_bufferBytes StringHead_t 4
 db  "    " , 0
__literal439_bufferBytes StringHead_t 9
 db  "endswitch" , 0
__literal440_bufferBytes StringHead_t 5
 db  "conv_" , 0
__literal441_bufferBytes StringHead_t 4
 db  "_to_" , 0
__literal442_bufferBytes StringHead_t 6
 db  "while " , 0
__literal443_bufferBytes StringHead_t 8
 db  "endwhile" , 0
__literal444_bufferBytes StringHead_t 4
 db  "for " , 0
__literal445_bufferBytes StringHead_t 4
 db  " in " , 0
__literal446_bufferBytes StringHead_t 4
 db  " .. " , 0
__literal447_bufferBytes StringHead_t 4
 db  " by " , 0
__literal448_bufferBytes StringHead_t 6
 db  "endfor" , 0
__literal449_bufferBytes StringHead_t 11
 db  "for values " , 0
__literal450_bufferBytes StringHead_t 1
 db  "{" , 0
__literal451_bufferBytes StringHead_t 1
 db  "}" , 0
__literal452_bufferBytes StringHead_t 3
 db  " = " , 0
__literal453_bufferBytes StringHead_t 2
 db  "- " , 0
__literal454_bufferBytes StringHead_t 2
 db  "is" , 0
__literal455_bufferBytes StringHead_t 4
 db  "isnt" , 0
__literal456_bufferBytes StringHead_t 1
 db  ">" , 0
__literal457_bufferBytes StringHead_t 2
 db  ">=" , 0
__literal458_bufferBytes StringHead_t 1
 db  "<" , 0
__literal459_bufferBytes StringHead_t 2
 db  "<=" , 0
__literal460_bufferBytes StringHead_t 6
 db  "_index" , 0
__literal461_bufferBytes StringHead_t 18
 db  "<table border=", 34, "1", 34, ">" , 0
__literal462_bufferBytes StringHead_t 136
 db  "<tr><th>var</th><th>write</th><th>read</th><th>init value</th><th>kind</th><th>data type</th><th>loop level</th><th>class name</th></tr>" , 0
__literal463_bufferBytes StringHead_t 1
 db  "", 34, "" , 0
__literal464_bufferBytes StringHead_t 4
 db  "<tr>" , 0
__literal465_bufferBytes StringHead_t 4
 db  "<td>" , 0
__literal466_bufferBytes StringHead_t 5
 db  "</td>" , 0
__literal467_bufferBytes StringHead_t 10
 db  "<td>-</td>" , 0
__literal468_bufferBytes StringHead_t 5
 db  "</tr>" , 0
__literal469_bufferBytes StringHead_t 8
 db  "</table>" , 0
__literal470_bufferBytes StringHead_t 33
 db  "<table style=", 34, "border: solid 1px", 34, ">" , 0
__literal471_bufferBytes StringHead_t 9
 db  "<tr><td>#" , 0
__literal472_bufferBytes StringHead_t 3
 db  "<b>" , 0
__literal473_bufferBytes StringHead_t 14
 db  "</b></td></tr>" , 0
__literal474_bufferBytes StringHead_t 18
 db  "<tr><td><small><i>" , 0
__literal475_bufferBytes StringHead_t 22
 db  "</i></small></td></tr>" , 0
__literal476_bufferBytes StringHead_t 49
 db  "<tr><td><small>has side effects</small></td></tr>" , 0
__literal477_bufferBytes StringHead_t 8
 db  "<tr><td>" , 0
__literal478_bufferBytes StringHead_t 10
 db  "</td></tr>" , 0
__literal479_bufferBytes StringHead_t 6
 db  "' <i>(" , 0
__literal480_bufferBytes StringHead_t 5
 db  ")</i>" , 0
__literal481_bufferBytes StringHead_t 12
 db  "<tr><td><i>(" , 0
__literal482_bufferBytes StringHead_t 15
 db  ")</i></td></tr>" , 0
__literal483_bufferBytes StringHead_t 12
 db  "<tr><td><hr>" , 0
__literal484_bufferBytes StringHead_t 4
 db  "<br>" , 0
__literal485_bufferBytes StringHead_t 1
 db  "?" , 0
__literal486_bufferBytes StringHead_t 12
 db  "<html><body>" , 0
__literal487_bufferBytes StringHead_t 14
 db  "</body></html>" , 0
__literal488_bufferBytes StringHead_t 17
 db  "currentClassProto" , 0
__literal489_bufferBytes StringHead_t 20
 db  "currentFunctionProto" , 0
__literal490_bufferBytes StringHead_t 19
 db  "symbolTableForTemps" , 0
__literal491_bufferBytes StringHead_t 17
 db  "[ ASTTranslator ]" , 0
__literal492_bufferBytes StringHead_t 31
 db  "_loadArgsVector not implemented" , 0
__literal493_bufferBytes StringHead_t 34
 db  "_callLoadArgsCount not implemented" , 0
__literal494_bufferBytes StringHead_t 26
 db  "_syscall() not implemented" , 0
__literal495_bufferBytes StringHead_t 28
 db  "_loadArray() not implemented" , 0
__literal496_bufferBytes StringHead_t 26
 db  "_loadMap() not implemented" , 0
__literal497_bufferBytes StringHead_t 26
 db  "_loadImm() not implemented" , 0
__literal498_bufferBytes StringHead_t 35
 db  "_loadImmAsVariant() not implemented" , 0
__literal499_bufferBytes StringHead_t 31
 db  "_loadVariable() not implemented" , 0
__literal500_bufferBytes StringHead_t 23
 db  "_call() not implemented" , 0
__literal501_bufferBytes StringHead_t 31
 db  "_invokeMethod() not implemented" , 0
__literal502_bufferBytes StringHead_t 28
 db  "_callPrint() not implemented" , 0
__literal503_bufferBytes StringHead_t 22
 db  "_neg() not implemented" , 0
__literal504_bufferBytes StringHead_t 22
 db  "_add() not implemented" , 0
__literal505_bufferBytes StringHead_t 29
 db  "_stringJoin() not implemented" , 0
__literal506_bufferBytes StringHead_t 22
 db  "_sub() not implemented" , 0
__literal507_bufferBytes StringHead_t 22
 db  "_mul() not implemented" , 0
__literal508_bufferBytes StringHead_t 22
 db  "_div() not implemented" , 0
__literal509_bufferBytes StringHead_t 23
 db  "_idiv() not implemented" , 0
__literal510_bufferBytes StringHead_t 28
 db  "_compareEQ() not implemented" , 0
__literal511_bufferBytes StringHead_t 29
 db  "_compareNEQ() not implemented" , 0
__literal512_bufferBytes StringHead_t 28
 db  "_compareLT() not implemented" , 0
__literal513_bufferBytes StringHead_t 28
 db  "_compareLE() not implemented" , 0
__literal514_bufferBytes StringHead_t 28
 db  "_compareGT() not implemented" , 0
__literal515_bufferBytes StringHead_t 28
 db  "_compareGE() not implemented" , 0
__literal516_bufferBytes StringHead_t 26
 db  "_boolAnd() not implemented" , 0
__literal517_bufferBytes StringHead_t 25
 db  "_boolOr() not implemented" , 0
__literal518_bufferBytes StringHead_t 32
 db  "_loadFromIndex() not implemented" , 0
__literal519_bufferBytes StringHead_t 30
 db  "_loadFromKey() not implemented" , 0
__literal520_bufferBytes StringHead_t 31
 db  "_storeAtIndex() not implemented" , 0
__literal521_bufferBytes StringHead_t 29
 db  "_storeAtKey() not implemented" , 0
__literal522_bufferBytes StringHead_t 38
 db  "_storeAtIndexAndDrop() not implemented" , 0
__literal523_bufferBytes StringHead_t 36
 db  "_storeAtKeyAndDrop() not implemented" , 0
__literal524_bufferBytes StringHead_t 31
 db  "_createObject() not implemented" , 0
__literal525_bufferBytes StringHead_t 29
 db  "_convert() is not implemented" , 0
__literal526_bufferBytes StringHead_t 35
 db  "error: type conflict for variable ", 34, "" , 0
__literal527_bufferBytes StringHead_t 7
 db  "error: " , 0
__literal528_bufferBytes StringHead_t 18
 db  "Emitting function " , 0
__literal529_bufferBytes StringHead_t 3
 db  "..." , 0
__literal530_bufferBytes StringHead_t 17
 db  "Function emited: " , 0
__literal531_bufferBytes StringHead_t 21
 db  "Going to emit globals" , 0
__literal532_bufferBytes StringHead_t 15
 db  "Globals emmited" , 0
__literal533_bufferBytes StringHead_t 29
 db  "super called outside of class" , 0
__literal534_bufferBytes StringHead_t 11
 db  "constructor" , 0
__literal535_bufferBytes StringHead_t 35
 db  "super called outside of constructor" , 0
__literal536_bufferBytes StringHead_t 18
 db  " has no base class" , 0
__literal537_bufferBytes StringHead_t 28
 db  " has no constructor declared" , 0
__literal538_bufferBytes StringHead_t 34
 db  "base constructor requires exactly " , 0
__literal539_bufferBytes StringHead_t 11
 db  "__mold_this" , 0
__literal540_bufferBytes StringHead_t 13
 db  "isConstructor" , 0
__literal541_bufferBytes StringHead_t 48
 db  "ASTTranslator::_getMethodProto() not implemented" , 0
__literal542_bufferBytes StringHead_t 49
 db  "ASTTranslator::_declareVariable() not implemented" , 0
__literal543_bufferBytes StringHead_t 25
 db  "_assign() not implemented" , 0
__literal544_bufferBytes StringHead_t 15
 db  "_evaluateNode: " , 0
__literal545_bufferBytes StringHead_t 12
 db  "isTranslated" , 0
__literal546_bufferBytes StringHead_t 13
 db  "error: node #" , 0
__literal547_bufferBytes StringHead_t 29
 db  " is already translated (eval)" , 0
__literal548_bufferBytes StringHead_t 7
 db  "tempVar" , 0
__literal549_bufferBytes StringHead_t 30
 db  "error: unexpected rvalue node " , 0
__literal550_bufferBytes StringHead_t 38
 db  "_evaluateNodeBoolAnd() not implemented" , 0
__literal551_bufferBytes StringHead_t 37
 db  "_evaluateNodeBoolOr() not implemented" , 0
__literal552_bufferBytes StringHead_t 33
 db  "_executeNodeFor() not implemented" , 0
__literal553_bufferBytes StringHead_t 35
 db  "_executeNodeWhile() not implemented" , 0
__literal554_bufferBytes StringHead_t 32
 db  "_executeNodeIf() not implemented" , 0
__literal555_bufferBytes StringHead_t 22
 db  "switch not implemented" , 0
__literal556_bufferBytes StringHead_t 14
 db  "_executeNode: " , 0
__literal557_bufferBytes StringHead_t 22
 db  " is already translated" , 0
__literal558_bufferBytes StringHead_t 5
 db  "start" , 0
__literal559_bufferBytes StringHead_t 21
 db  "duplicateOnFirstWrite" , 0
__literal560_bufferBytes StringHead_t 30
 db  "error: unexpected lvalue node " , 0
__literal561_bufferBytes StringHead_t 37
 db  "global directive expects string, but " , 0
__literal562_bufferBytes StringHead_t 7
 db  " passed" , 0
__literal563_bufferBytes StringHead_t 15
 db  "unknown opcode " , 0
__literal564_bufferBytes StringHead_t 24
 db  "unexpected symbol kind '" , 0
__literal565_bufferBytes StringHead_t 3
 db  "' (" , 0
__literal566_bufferBytes StringHead_t 7
 db  "labelId" , 0
__literal567_bufferBytes StringHead_t 29
 db  "Going to emit function body ", 34, "" , 0
__literal568_bufferBytes StringHead_t 3
 db  "ptr" , 0
__literal569_bufferBytes StringHead_t 47
 db  "-----------------------------------------------" , 0
__literal570_bufferBytes StringHead_t 21
 db  "Function body emmited" , 0
__literal571_bufferBytes StringHead_t 4
 db  "data" , 0
__literal572_bufferBytes StringHead_t 4
 db  "size" , 0
__literal573_bufferBytes StringHead_t 21
 db  "error: stack is empty" , 0
__literal574_bufferBytes StringHead_t 28
 db  "error: peek from empty stack" , 0
__literal575_bufferBytes StringHead_t 12
 db  "error: peek " , 0
__literal576_bufferBytes StringHead_t 16
 db  " item, but only " , 0
__literal577_bufferBytes StringHead_t 10
 db  " available" , 0
__literal578_bufferBytes StringHead_t 5
 db  "stack" , 0
__literal579_bufferBytes StringHead_t 12
 db  "outputObject" , 0
__literal580_bufferBytes StringHead_t 20
 db  "arrayOfCalledMethods" , 0
__literal581_bufferBytes StringHead_t 18
 db  "mapOfCalledMethods" , 0
__literal582_bufferBytes StringHead_t 13
 db  "methodEmitted" , 0
__literal583_bufferBytes StringHead_t 7
 db  "comment" , 0
__literal584_bufferBytes StringHead_t 3
 db  "jmp" , 0
__literal585_bufferBytes StringHead_t 12
 db  "jmp_by_table" , 0
__literal586_bufferBytes StringHead_t 4
 db  "move" , 0
__literal587_bufferBytes StringHead_t 4
 db  "proc" , 0
__literal588_bufferBytes StringHead_t 10
 db  "init_frame" , 0
__literal589_bufferBytes StringHead_t 4
 db  "endp" , 0
__literal590_bufferBytes StringHead_t 3
 db  "ret" , 0
__literal591_bufferBytes StringHead_t 3
 db  "neg" , 0
__literal592_bufferBytes StringHead_t 3
 db  "add" , 0
__literal593_bufferBytes StringHead_t 11
 db  "string_join" , 0
__literal594_bufferBytes StringHead_t 3
 db  "sub" , 0
__literal595_bufferBytes StringHead_t 3
 db  "mul" , 0
__literal596_bufferBytes StringHead_t 3
 db  "div" , 0
__literal597_bufferBytes StringHead_t 4
 db  "idiv" , 0
__literal598_bufferBytes StringHead_t 12
 db  "create_array" , 0
__literal599_bufferBytes StringHead_t 10
 db  "create_map" , 0
__literal600_bufferBytes StringHead_t 10
 db  "load_int32" , 0
__literal601_bufferBytes StringHead_t 21
 db  "conv_int64_to_variant" , 0
__literal602_bufferBytes StringHead_t 12
 db  "load_float64" , 0
__literal603_bufferBytes StringHead_t 11
 db  "load_bool32" , 0
__literal604_bufferBytes StringHead_t 27
 db  "error: unhandled imm type: " , 0
__literal605_bufferBytes StringHead_t 21
 db  "conv_int32_to_variant" , 0
__literal606_bufferBytes StringHead_t 23
 db  "conv_float64_to_variant" , 0
__literal607_bufferBytes StringHead_t 22
 db  "conv_bool32_to_variant" , 0
__literal608_bufferBytes StringHead_t 6
 db  "cmp_eq" , 0
__literal609_bufferBytes StringHead_t 6
 db  "cmp_ne" , 0
__literal610_bufferBytes StringHead_t 6
 db  "cmp_lt" , 0
__literal611_bufferBytes StringHead_t 6
 db  "cmp_le" , 0
__literal612_bufferBytes StringHead_t 6
 db  "cmp_gt" , 0
__literal613_bufferBytes StringHead_t 6
 db  "cmp_ge" , 0
__literal614_bufferBytes StringHead_t 7
 db  "syscall" , 0
__literal615_bufferBytes StringHead_t 26
 db  "print_array_of_variants_ln" , 0
__literal616_bufferBytes StringHead_t 17
 db  "<print:unused_rv>" , 0
__literal617_bufferBytes StringHead_t 10
 db  "load_index" , 0
__literal618_bufferBytes StringHead_t 8
 db  "load_key" , 0
__literal619_bufferBytes StringHead_t 11
 db  "store_index" , 0
__literal620_bufferBytes StringHead_t 9
 db  "store_key" , 0
__literal621_bufferBytes StringHead_t 53
 db  "error: missing classProto in MIR_OPCODE_CREATE_OBJECT" , 0
__literal622_bufferBytes StringHead_t 13
 db  "create_object" , 0
__literal623_bufferBytes StringHead_t 12
 db  "jmp_if_false" , 0
__literal624_bufferBytes StringHead_t 11
 db  "jmp_if_true" , 0
__literal625_bufferBytes StringHead_t 9
 db  "jmp_if_ge" , 0
__literal626_bufferBytes StringHead_t 29
 db  "-----------------------------" , 0
__literal627_bufferBytes StringHead_t 16
 db  "BEGIN: for keys " , 0
__literal628_bufferBytes StringHead_t 8
 db  " values " , 0
__literal629_bufferBytes StringHead_t 9
 db  "inner_ret" , 0
__literal630_bufferBytes StringHead_t 10
 db  "__TrashBin" , 0
__literal631_bufferBytes StringHead_t 24
 db  "__MOLD_ForDriver_Generic" , 0
__literal632_bufferBytes StringHead_t 14
 db  "END: for keys " , 0
__literal633_bufferBytes StringHead_t 12
 db  "defaultLabel" , 0
__literal634_bufferBytes StringHead_t 9
 db  "jmp_if_lt" , 0
__literal635_bufferBytes StringHead_t 9
 db  "jmp_if_gt" , 0
__literal636_bufferBytes StringHead_t 11
 db  "entry point" , 0
__literal637_bufferBytes StringHead_t 29
 db  "error: object has no method '" , 0
__literal638_bufferBytes StringHead_t 6
 db  "buffer" , 0
__literal639_bufferBytes StringHead_t 16
 db  "bufferingEnabled" , 0
__literal640_bufferBytes StringHead_t 50
 db  "error: _replaceLastItem() called without buffering" , 0
__literal641_bufferBytes StringHead_t 5
 db  "quads" , 0
__literal642_bufferBytes StringHead_t 12
 db  "currentFrame" , 0
__literal643_bufferBytes StringHead_t 5
 db  "    ;" , 0
__literal644_bufferBytes StringHead_t 3
 db  "var" , 0
__literal645_bufferBytes StringHead_t 1
 db  "W" , 0
__literal646_bufferBytes StringHead_t 1
 db  "R" , 0
__literal647_bufferBytes StringHead_t 9
 db  "data type" , 0
__literal648_bufferBytes StringHead_t 10
 db  "----------" , 0
__literal649_bufferBytes StringHead_t 4
 db  "----" , 0
__literal650_bufferBytes StringHead_t 9
 db  "---------" , 0
__literal651_bufferBytes StringHead_t 8
 db  "--------" , 0
__literal652_bufferBytes StringHead_t 14
 db  "    init_frame" , 0
__literal653_bufferBytes StringHead_t 1
 db  ";" , 0
__literal654_bufferBytes StringHead_t 3
 db  "   " , 0
__literal655_bufferBytes StringHead_t 17
 db  "isProfilerEnabled" , 0
__literal656_bufferBytes StringHead_t 6
 db  "  lea " , 0
__literal657_bufferBytes StringHead_t 3
 db  ", [" , 0
__literal658_bufferBytes StringHead_t 6
 db  "  push" , 0
__literal659_bufferBytes StringHead_t 5
 db  "  pop" , 0
__literal660_bufferBytes StringHead_t 6
 db  "  mov " , 0
__literal661_bufferBytes StringHead_t 7
 db  "  call " , 0
__literal662_bufferBytes StringHead_t 3
 db  "rcx" , 0
__literal663_bufferBytes StringHead_t 3
 db  "rdx" , 0
__literal664_bufferBytes StringHead_t 2
 db  "r8" , 0
__literal665_bufferBytes StringHead_t 12
 db  "  lea rcx, [" , 0
__literal666_bufferBytes StringHead_t 12
 db  "  lea rdx, [" , 0
__literal667_bufferBytes StringHead_t 25
 db  "  call __MOLD_VariantMove" , 0
__literal668_bufferBytes StringHead_t 13
 db  "  lea  rcx, [" , 0
__literal669_bufferBytes StringHead_t 28
 db  "  call __MOLD_VariantDestroy" , 0
__literal670_bufferBytes StringHead_t 2
 db  "r9" , 0
__literal671_bufferBytes StringHead_t 3
 db  "rax" , 0
__literal672_bufferBytes StringHead_t 29
 db  "Variant_t VARIANT_INTEGER, 0," , 0
__literal673_bufferBytes StringHead_t 28
 db  "Variant_t VARIANT_DOUBLE, 0," , 0
__literal674_bufferBytes StringHead_t 28
 db  "Variant_t VARIANT_STRING, 0," , 0
__literal675_bufferBytes StringHead_t 7
 db  "_buffer" , 0
__literal676_bufferBytes StringHead_t 27
 db  "Variant_t VARIANT_ARRAY, 0," , 0
__literal677_bufferBytes StringHead_t 1
 db  "1" , 0
__literal678_bufferBytes StringHead_t 1
 db  "0" , 0
__literal679_bufferBytes StringHead_t 29
 db  "Variant_t VARIANT_BOOLEAN, 0," , 0
__literal680_bufferBytes StringHead_t 38
 db  "Variant_t [error: unhandled type], ???" , 0
__literal681_bufferBytes StringHead_t 12
 db  "_bufferBytes" , 0
__literal682_bufferBytes StringHead_t 8
 db  "Buffer_t" , 0
__literal683_bufferBytes StringHead_t 8
 db  ", -1, 0," , 0
__literal684_bufferBytes StringHead_t 8
 db  "", 34, ", 34, ", 34, "" , 0
__literal685_bufferBytes StringHead_t 12
 db  "StringHead_t" , 0
__literal686_bufferBytes StringHead_t 4
 db  " db " , 0
__literal687_bufferBytes StringHead_t 3
 db  ", 0" , 0
__literal688_bufferBytes StringHead_t 2
 db  "db" , 0
__literal689_bufferBytes StringHead_t 15
 db  "VARIANT_INTEGER" , 0
__literal690_bufferBytes StringHead_t 2
 db  "dq" , 0
__literal691_bufferBytes StringHead_t 2
 db  "dd" , 0
__literal692_bufferBytes StringHead_t 2
 db  "dw" , 0
__literal693_bufferBytes StringHead_t 12
 db  "; inner type" , 0
__literal694_bufferBytes StringHead_t 13
 db  " ; inner size" , 0
__literal695_bufferBytes StringHead_t 21
 db  "db ?, ?, ? ; reserved" , 0
__literal696_bufferBytes StringHead_t 10
 db  "; itemsCnt" , 0
__literal697_bufferBytes StringHead_t 13
 db  "  mov dword [" , 0
__literal698_bufferBytes StringHead_t 4
 db  "], 0" , 0
__literal699_bufferBytes StringHead_t 18
 db  "  mov rcx, qword [" , 0
__literal700_bufferBytes StringHead_t 18
 db  "  cmp rcx, qword [" , 0
__literal701_bufferBytes StringHead_t 5
 db  "  set" , 0
__literal702_bufferBytes StringHead_t 6
 db  "byte [" , 0
__literal703_bufferBytes StringHead_t 18
 db  "  mov ecx, dword [" , 0
__literal704_bufferBytes StringHead_t 18
 db  "  cmp ecx, dword [" , 0
__literal705_bufferBytes StringHead_t 14
 db  "  xor eax, eax" , 0
__literal706_bufferBytes StringHead_t 16
 db  "  movq   xmm0, [" , 0
__literal707_bufferBytes StringHead_t 16
 db  "  comisd xmm0, [" , 0
__literal708_bufferBytes StringHead_t 2
 db  "al" , 0
__literal709_bufferBytes StringHead_t 6
 db  "], eax" , 0
__literal710_bufferBytes StringHead_t 18
 db  "  mov rax, qword [" , 0
__literal711_bufferBytes StringHead_t 18
 db  "  cmp rax, qword [" , 0
__literal712_bufferBytes StringHead_t 3
 db  "  j" , 0
__literal713_bufferBytes StringHead_t 13
 db  "  cmp dword [" , 0
__literal714_bufferBytes StringHead_t 2
 db  "]," , 0
__literal715_bufferBytes StringHead_t 18
 db  "  mov eax, dword [" , 0
__literal716_bufferBytes StringHead_t 18
 db  "  cmp eax, dword [" , 0
__literal717_bufferBytes StringHead_t 23
 db  "format PE64 console 5.0" , 0
__literal718_bufferBytes StringHead_t 17
 db  "entry __MOLD_Main" , 0
__literal719_bufferBytes StringHead_t 20
 db  "include 'win64a.inc'" , 0
__literal720_bufferBytes StringHead_t 80
 db  "; ------------------------------------------------------------------------------" , 0
__literal721_bufferBytes StringHead_t 46
 db  ";                                 Code section" , 0
__literal722_bufferBytes StringHead_t 40
 db  "section '.text' code readable executable" , 0
__literal723_bufferBytes StringHead_t 30
 db  "stack 1024*1024*4, 1024*1024*4" , 0
__literal724_bufferBytes StringHead_t 21
 db  "include 'Variant.asm'" , 0
__literal725_bufferBytes StringHead_t 1
 db  "c" , 0
__literal726_bufferBytes StringHead_t 5
 db  "  nop" , 0
__literal727_bufferBytes StringHead_t 12
 db  "move_variant" , 0
__literal728_bufferBytes StringHead_t 11
 db  "move_string" , 0
__literal729_bufferBytes StringHead_t 22
 db  "conv_string_to_variant" , 0
__literal730_bufferBytes StringHead_t 10
 db  "move_int32" , 0
__literal731_bufferBytes StringHead_t 11
 db  "move_bool32" , 0
__literal732_bufferBytes StringHead_t 10
 db  "move_int64" , 0
__literal733_bufferBytes StringHead_t 12
 db  "move_float64" , 0
__literal734_bufferBytes StringHead_t 13
 db  "  mov qword [" , 0
__literal735_bufferBytes StringHead_t 6
 db  "], rax" , 0
__literal736_bufferBytes StringHead_t 12
 db  "typeof_int64" , 0
__literal737_bufferBytes StringHead_t 12
 db  "typeof_int32" , 0
__literal738_bufferBytes StringHead_t 30
 db  "  movdqu xmm0, [StringInteger]" , 0
__literal739_bufferBytes StringHead_t 10
 db  "  movdqu [" , 0
__literal740_bufferBytes StringHead_t 7
 db  "], xmm0" , 0
__literal741_bufferBytes StringHead_t 14
 db  "typeof_float64" , 0
__literal742_bufferBytes StringHead_t 28
 db  "  movdqu xmm0, [StringFloat]" , 0
__literal743_bufferBytes StringHead_t 13
 db  "typeof_bool32" , 0
__literal744_bufferBytes StringHead_t 30
 db  "  movdqu xmm0, [StringBoolean]" , 0
__literal745_bufferBytes StringHead_t 9
 db  "neg_int64" , 0
__literal746_bufferBytes StringHead_t 9
 db  "  neg rax" , 0
__literal747_bufferBytes StringHead_t 9
 db  "add_int64" , 0
__literal748_bufferBytes StringHead_t 18
 db  "  add rax, qword [" , 0
__literal749_bufferBytes StringHead_t 9
 db  "sub_int64" , 0
__literal750_bufferBytes StringHead_t 18
 db  "  sub rax, qword [" , 0
__literal751_bufferBytes StringHead_t 9
 db  "mul_int64" , 0
__literal752_bufferBytes StringHead_t 19
 db  "  imul rcx, qword [" , 0
__literal753_bufferBytes StringHead_t 6
 db  "], rcx" , 0
__literal754_bufferBytes StringHead_t 9
 db  "div_int64" , 0
__literal755_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm0, qword [" , 0
__literal756_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm1, qword [" , 0
__literal757_bufferBytes StringHead_t 22
 db  "  divsd     xmm0, xmm1" , 0
__literal758_bufferBytes StringHead_t 19
 db  "  movq      qword [" , 0
__literal759_bufferBytes StringHead_t 10
 db  "idiv_int64" , 0
__literal760_bufferBytes StringHead_t 19
 db  "  mov  rax, qword [" , 0
__literal761_bufferBytes StringHead_t 19
 db  "  mov  rcx, qword [" , 0
__literal762_bufferBytes StringHead_t 5
 db  "  cqo" , 0
__literal763_bufferBytes StringHead_t 10
 db  "  idiv rcx" , 0
__literal764_bufferBytes StringHead_t 14
 db  "  mov  qword [" , 0
__literal765_bufferBytes StringHead_t 12
 db  "cmp_eq_int64" , 0
__literal766_bufferBytes StringHead_t 1
 db  "z" , 0
__literal767_bufferBytes StringHead_t 12
 db  "cmp_ne_int64" , 0
__literal768_bufferBytes StringHead_t 2
 db  "nz" , 0
__literal769_bufferBytes StringHead_t 12
 db  "cmp_lt_int64" , 0
__literal770_bufferBytes StringHead_t 12
 db  "cmp_le_int64" , 0
__literal771_bufferBytes StringHead_t 12
 db  "cmp_gt_int64" , 0
__literal772_bufferBytes StringHead_t 1
 db  "g" , 0
__literal773_bufferBytes StringHead_t 12
 db  "cmp_ge_int64" , 0
__literal774_bufferBytes StringHead_t 9
 db  "neg_int32" , 0
__literal775_bufferBytes StringHead_t 9
 db  "  neg eax" , 0
__literal776_bufferBytes StringHead_t 9
 db  "add_int32" , 0
__literal777_bufferBytes StringHead_t 18
 db  "  add eax, dword [" , 0
__literal778_bufferBytes StringHead_t 9
 db  "sub_int32" , 0
__literal779_bufferBytes StringHead_t 18
 db  "  sub eax, dword [" , 0
__literal780_bufferBytes StringHead_t 9
 db  "mul_int32" , 0
__literal781_bufferBytes StringHead_t 19
 db  "  imul ecx, dword [" , 0
__literal782_bufferBytes StringHead_t 6
 db  "], ecx" , 0
__literal783_bufferBytes StringHead_t 9
 db  "div_int32" , 0
__literal784_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm0, dword [" , 0
__literal785_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm1, dword [" , 0
__literal786_bufferBytes StringHead_t 10
 db  "idiv_int32" , 0
__literal787_bufferBytes StringHead_t 19
 db  "  mov  eax, dword [" , 0
__literal788_bufferBytes StringHead_t 19
 db  "  mov  ecx, dword [" , 0
__literal789_bufferBytes StringHead_t 5
 db  "  cdq" , 0
__literal790_bufferBytes StringHead_t 10
 db  "  idiv ecx" , 0
__literal791_bufferBytes StringHead_t 14
 db  "  mov  dword [" , 0
__literal792_bufferBytes StringHead_t 12
 db  "cmp_eq_int32" , 0
__literal793_bufferBytes StringHead_t 12
 db  "cmp_ne_int32" , 0
__literal794_bufferBytes StringHead_t 12
 db  "cmp_lt_int32" , 0
__literal795_bufferBytes StringHead_t 12
 db  "cmp_le_int32" , 0
__literal796_bufferBytes StringHead_t 12
 db  "cmp_gt_int32" , 0
__literal797_bufferBytes StringHead_t 12
 db  "cmp_ge_int32" , 0
__literal798_bufferBytes StringHead_t 11
 db  "neg_float64" , 0
__literal799_bufferBytes StringHead_t 29
 db  "  xor rax, 0x8000000000000000" , 0
__literal800_bufferBytes StringHead_t 11
 db  "add_float64" , 0
__literal801_bufferBytes StringHead_t 15
 db  "  movq  xmm0, [" , 0
__literal802_bufferBytes StringHead_t 21
 db  "  addsd xmm0, qword [" , 0
__literal803_bufferBytes StringHead_t 15
 db  "  movq  qword [" , 0
__literal804_bufferBytes StringHead_t 11
 db  "sub_float64" , 0
__literal805_bufferBytes StringHead_t 21
 db  "  subsd xmm0, qword [" , 0
__literal806_bufferBytes StringHead_t 11
 db  "mul_float64" , 0
__literal807_bufferBytes StringHead_t 21
 db  "  mulsd xmm0, qword [" , 0
__literal808_bufferBytes StringHead_t 11
 db  "div_float64" , 0
__literal809_bufferBytes StringHead_t 21
 db  "  divsd xmm0, qword [" , 0
__literal810_bufferBytes StringHead_t 12
 db  "idiv_float64" , 0
__literal811_bufferBytes StringHead_t 25
 db  "  movq      xmm0, qword [" , 0
__literal812_bufferBytes StringHead_t 25
 db  "  movq      xmm1, qword [" , 0
__literal813_bufferBytes StringHead_t 21
 db  "  cvttsd2si rax, xmm0" , 0
__literal814_bufferBytes StringHead_t 19
 db  "  mov       qword [" , 0
__literal815_bufferBytes StringHead_t 14
 db  "cmp_eq_float64" , 0
__literal816_bufferBytes StringHead_t 14
 db  "cmp_ne_float64" , 0
__literal817_bufferBytes StringHead_t 14
 db  "cmp_lt_float64" , 0
__literal818_bufferBytes StringHead_t 14
 db  "cmp_le_float64" , 0
__literal819_bufferBytes StringHead_t 2
 db  "be" , 0
__literal820_bufferBytes StringHead_t 14
 db  "cmp_gt_float64" , 0
__literal821_bufferBytes StringHead_t 14
 db  "cmp_ge_float64" , 0
__literal822_bufferBytes StringHead_t 11
 db  "neg_variant" , 0
__literal823_bufferBytes StringHead_t 17
 db  "__MOLD_VariantNeg" , 0
__literal824_bufferBytes StringHead_t 11
 db  "add_variant" , 0
__literal825_bufferBytes StringHead_t 10
 db  "add_string" , 0
__literal826_bufferBytes StringHead_t 17
 db  "__MOLD_VariantAdd" , 0
__literal827_bufferBytes StringHead_t 11
 db  "sub_variant" , 0
__literal828_bufferBytes StringHead_t 17
 db  "__MOLD_VariantSub" , 0
__literal829_bufferBytes StringHead_t 11
 db  "mul_variant" , 0
__literal830_bufferBytes StringHead_t 17
 db  "__MOLD_VariantMul" , 0
__literal831_bufferBytes StringHead_t 11
 db  "div_variant" , 0
__literal832_bufferBytes StringHead_t 17
 db  "__MOLD_VariantDiv" , 0
__literal833_bufferBytes StringHead_t 12
 db  "idiv_variant" , 0
__literal834_bufferBytes StringHead_t 26
 db  "__MOLD_VariantDivAsInteger" , 0
__literal835_bufferBytes StringHead_t 14
 db  "cmp_eq_variant" , 0
__literal836_bufferBytes StringHead_t 13
 db  "cmp_eq_string" , 0
__literal837_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareEQ" , 0
__literal838_bufferBytes StringHead_t 14
 db  "cmp_ne_variant" , 0
__literal839_bufferBytes StringHead_t 13
 db  "cmp_ne_string" , 0
__literal840_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareNE" , 0
__literal841_bufferBytes StringHead_t 14
 db  "cmp_lt_variant" , 0
__literal842_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareLT" , 0
__literal843_bufferBytes StringHead_t 14
 db  "cmp_le_variant" , 0
__literal844_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareLE" , 0
__literal845_bufferBytes StringHead_t 14
 db  "cmp_gt_variant" , 0
__literal846_bufferBytes StringHead_t 14
 db  "cmp_ge_variant" , 0
__literal847_bufferBytes StringHead_t 24
 db  "__MOLD_VariantStringJoin" , 0
__literal848_bufferBytes StringHead_t 20
 db  "jmp_by_table_variant" , 0
__literal849_bufferBytes StringHead_t 12
 db  "  mov rax, [" , 0
__literal850_bufferBytes StringHead_t 18
 db  "+ Variant_t.value]" , 0
__literal851_bufferBytes StringHead_t 13
 db  "  jmp qword [" , 0
__literal852_bufferBytes StringHead_t 10
 db  "+ rax * 8]" , 0
__literal853_bufferBytes StringHead_t 18
 db  "jmp_by_table_int32" , 0
__literal854_bufferBytes StringHead_t 17
 db  "jmp_if_eq_variant" , 0
__literal855_bufferBytes StringHead_t 20
 db  "  lea r8, [rsp + 16]" , 0
__literal856_bufferBytes StringHead_t 30
 db  "  call __MOLD_VariantCompareEQ" , 0
__literal857_bufferBytes StringHead_t 43
 db  "  cmp dword [rsp + 16 + Variant_t.value], 0" , 0
__literal858_bufferBytes StringHead_t 5
 db  "  jnz" , 0
__literal859_bufferBytes StringHead_t 17
 db  "jmp_if_ne_variant" , 0
__literal860_bufferBytes StringHead_t 30
 db  "  call __MOLD_VariantCompareNE" , 0
__literal861_bufferBytes StringHead_t 17
 db  "jmp_if_lt_variant" , 0
__literal862_bufferBytes StringHead_t 30
 db  "  call __MOLD_VariantCompareLT" , 0
__literal863_bufferBytes StringHead_t 17
 db  "jmp_if_le_variant" , 0
__literal864_bufferBytes StringHead_t 30
 db  "  call __MOLD_VariantCompareLE" , 0
__literal865_bufferBytes StringHead_t 17
 db  "jmp_if_gt_variant" , 0
__literal866_bufferBytes StringHead_t 17
 db  "jmp_if_ge_variant" , 0
__literal867_bufferBytes StringHead_t 10
 db  "load_int64" , 0
__literal868_bufferBytes StringHead_t 10
 db  "  mov rax," , 0
__literal869_bufferBytes StringHead_t 15
 db  "  db 0x48, 0xb8" , 0
__literal870_bufferBytes StringHead_t 4
 db  "  dq" , 0
__literal871_bufferBytes StringHead_t 15
 db  "jmp_if_eq_int64" , 0
__literal872_bufferBytes StringHead_t 15
 db  "jmp_if_ne_int64" , 0
__literal873_bufferBytes StringHead_t 15
 db  "jmp_if_lt_int64" , 0
__literal874_bufferBytes StringHead_t 15
 db  "jmp_if_le_int64" , 0
__literal875_bufferBytes StringHead_t 15
 db  "jmp_if_gt_int64" , 0
__literal876_bufferBytes StringHead_t 15
 db  "jmp_if_ge_int64" , 0
__literal877_bufferBytes StringHead_t 15
 db  "jmp_if_eq_int32" , 0
__literal878_bufferBytes StringHead_t 15
 db  "jmp_if_ne_int32" , 0
__literal879_bufferBytes StringHead_t 15
 db  "jmp_if_lt_int32" , 0
__literal880_bufferBytes StringHead_t 15
 db  "jmp_if_le_int32" , 0
__literal881_bufferBytes StringHead_t 15
 db  "jmp_if_gt_int32" , 0
__literal882_bufferBytes StringHead_t 15
 db  "jmp_if_ge_int32" , 0
__literal883_bufferBytes StringHead_t 18
 db  "jmp_if_true_bool32" , 0
__literal884_bufferBytes StringHead_t 19
 db  "jmp_if_false_bool32" , 0
__literal885_bufferBytes StringHead_t 4
 db  "  jz" , 0
__literal886_bufferBytes StringHead_t 16
 db  "jmp_if_eq_bool32" , 0
__literal887_bufferBytes StringHead_t 16
 db  "  xor   eax, eax" , 0
__literal888_bufferBytes StringHead_t 15
 db  "  or    dword [" , 0
__literal889_bufferBytes StringHead_t 10
 db  "  setnz cl" , 0
__literal890_bufferBytes StringHead_t 10
 db  "  setz  al" , 0
__literal891_bufferBytes StringHead_t 14
 db  "  xor   al, cl" , 0
__literal892_bufferBytes StringHead_t 16
 db  "jmp_if_ne_bool32" , 0
__literal893_bufferBytes StringHead_t 15
 db  "  xor  eax, eax" , 0
__literal894_bufferBytes StringHead_t 14
 db  "  or   dword [" , 0
__literal895_bufferBytes StringHead_t 9
 db  "  setz cl" , 0
__literal896_bufferBytes StringHead_t 9
 db  "  setz al" , 0
__literal897_bufferBytes StringHead_t 13
 db  "  xor  al, cl" , 0
__literal898_bufferBytes StringHead_t 13
 db  "cmp_eq_bool32" , 0
__literal899_bufferBytes StringHead_t 15
 db  "  mov   dword [" , 0
__literal900_bufferBytes StringHead_t 13
 db  "cmp_ne_bool32" , 0
__literal901_bufferBytes StringHead_t 17
 db  "jmp_if_eq_float64" , 0
__literal902_bufferBytes StringHead_t 17
 db  "jmp_if_ne_float64" , 0
__literal903_bufferBytes StringHead_t 17
 db  "jmp_if_lt_float64" , 0
__literal904_bufferBytes StringHead_t 4
 db  "  jb" , 0
__literal905_bufferBytes StringHead_t 17
 db  "jmp_if_le_float64" , 0
__literal906_bufferBytes StringHead_t 5
 db  "  jbe" , 0
__literal907_bufferBytes StringHead_t 17
 db  "jmp_if_gt_float64" , 0
__literal908_bufferBytes StringHead_t 4
 db  "  ja" , 0
__literal909_bufferBytes StringHead_t 17
 db  "jmp_if_ge_float64" , 0
__literal910_bufferBytes StringHead_t 5
 db  "  jae" , 0
__literal911_bufferBytes StringHead_t 21
 db  "__MOLD_PrintVariantLn" , 0
__literal912_bufferBytes StringHead_t 29
 db  "__MOLD_PrintArrayOfVariantsLn" , 0
__literal913_bufferBytes StringHead_t 10
 db  "  add rsp," , 0
__literal914_bufferBytes StringHead_t 9
 db  "str_int64" , 0
__literal915_bufferBytes StringHead_t 11
 db  "  mov r9, [" , 0
__literal916_bufferBytes StringHead_t 27
 db  "  mov r10d, VARIANT_INTEGER" , 0
__literal917_bufferBytes StringHead_t 45
 db  "  call __MOLD_VariantConvertPrimitiveToString" , 0
__literal918_bufferBytes StringHead_t 9
 db  "str_int32" , 0
__literal919_bufferBytes StringHead_t 12
 db  "  mov r9d, [" , 0
__literal920_bufferBytes StringHead_t 11
 db  "str_float64" , 0
__literal921_bufferBytes StringHead_t 26
 db  "  mov r10d, VARIANT_DOUBLE" , 0
__literal922_bufferBytes StringHead_t 10
 db  "str_bool32" , 0
__literal923_bufferBytes StringHead_t 18
 db  "  mov r9d, dword [" , 0
__literal924_bufferBytes StringHead_t 42
 db  "  call __MOLD_VariantConvertBool64ToString" , 0
__literal925_bufferBytes StringHead_t 3
 db  "rdi" , 0
__literal926_bufferBytes StringHead_t 22
 db  "[rdi + Variant_t.type]" , 0
__literal927_bufferBytes StringHead_t 17
 db  "VARIANT_UNDEFINED" , 0
__literal928_bufferBytes StringHead_t 11
 db  "  mov eax, " , 0
__literal929_bufferBytes StringHead_t 14
 db  "__MOLD_SysCall" , 0
__literal930_bufferBytes StringHead_t 13
 db  "  lea  rdi, [" , 0
__literal931_bufferBytes StringHead_t 47
 db  "  mov [rdi + Variant_t.type], VARIANT_UNDEFINED" , 0
__literal932_bufferBytes StringHead_t 35
 db  "  mov  rax, [rcx + Variant_t.value]" , 0
__literal933_bufferBytes StringHead_t 37
 db  "  mov  rax, [rax + Buffer_t.bytesPtr]" , 0
__literal934_bufferBytes StringHead_t 35
 db  "  mov  rax, [rax + Object_t.vtable]" , 0
__literal935_bufferBytes StringHead_t 22
 db  "  call qword [rax + 8*" , 0
__literal936_bufferBytes StringHead_t 20
 db  "  lea  rdx, [vtable_" , 0
__literal937_bufferBytes StringHead_t 33
 db  "  call __MOLD_VariantObjectCreate" , 0
__literal938_bufferBytes StringHead_t 21
 db  "conv_int32_to_float64" , 0
__literal939_bufferBytes StringHead_t 24
 db  "  cvtsi2sd xmm0, dword [" , 0
__literal940_bufferBytes StringHead_t 8
 db  "  movq [" , 0
__literal941_bufferBytes StringHead_t 21
 db  "conv_int64_to_float64" , 0
__literal942_bufferBytes StringHead_t 24
 db  "  cvtsi2sd xmm0, qword [" , 0
__literal943_bufferBytes StringHead_t 7
 db  "  mov [" , 0
__literal944_bufferBytes StringHead_t 34
 db  "+ Variant_t.type], VARIANT_INTEGER" , 0
__literal945_bufferBytes StringHead_t 19
 db  "+ Variant_t.value]," , 0
__literal946_bufferBytes StringHead_t 21
 db  "  movsxd rax, dword [" , 0
__literal947_bufferBytes StringHead_t 23
 db  "+ Variant_t.value], rax" , 0
__literal948_bufferBytes StringHead_t 33
 db  "+ Variant_t.type], VARIANT_DOUBLE" , 0
__literal949_bufferBytes StringHead_t 21
 db  "conv_float64_to_int32" , 0
__literal950_bufferBytes StringHead_t 49
 db  "error: convert imm float64 to int32 not supported" , 0
__literal951_bufferBytes StringHead_t 18
 db  "  cvttsd2si eax, [" , 0
__literal952_bufferBytes StringHead_t 21
 db  "conv_float64_to_int64" , 0
__literal953_bufferBytes StringHead_t 49
 db  "error: convert imm float64 to int64 not supported" , 0
__literal954_bufferBytes StringHead_t 18
 db  "  cvttsd2si rax, [" , 0
__literal955_bufferBytes StringHead_t 12
 db  "  mov eax, 1" , 0
__literal956_bufferBytes StringHead_t 12
 db  "  mov eax, 0" , 0
__literal957_bufferBytes StringHead_t 34
 db  "+ Variant_t.type], VARIANT_BOOLEAN" , 0
__literal958_bufferBytes StringHead_t 22
 db  "conv_variant_to_bool32" , 0
__literal959_bufferBytes StringHead_t 21
 db  "conv_variant_to_int32" , 0
__literal960_bufferBytes StringHead_t 21
 db  "conv_variant_to_int64" , 0
__literal961_bufferBytes StringHead_t 23
 db  "conv_variant_to_float64" , 0
__literal962_bufferBytes StringHead_t 19
 db  "jmp_if_true_variant" , 0
__literal963_bufferBytes StringHead_t 8
 db  "  cmp  [" , 0
__literal964_bufferBytes StringHead_t 22
 db  " + Variant_t.value], 0" , 0
__literal965_bufferBytes StringHead_t 6
 db  "  jnz " , 0
__literal966_bufferBytes StringHead_t 20
 db  "jmp_if_false_variant" , 0
__literal967_bufferBytes StringHead_t 6
 db  "  jz  " , 0
__literal968_bufferBytes StringHead_t 23
 db  "jmp_if_variant_ge_int64" , 0
__literal969_bufferBytes StringHead_t 20
 db  " + Variant_t.value]," , 0
__literal970_bufferBytes StringHead_t 6
 db  "  jge " , 0
__literal971_bufferBytes StringHead_t 5
 db  "  ret" , 0
__literal972_bufferBytes StringHead_t 15
 db  "  ; clean frame" , 0
__literal973_bufferBytes StringHead_t 15
 db  "  ; -----------" , 0
__literal974_bufferBytes StringHead_t 25
 db  "  ; Skipped loop iterator" , 0
__literal975_bufferBytes StringHead_t 23
 db  "  ; leave profiler code" , 0
__literal976_bufferBytes StringHead_t 23
 db  "  ; -------------------" , 0
__literal977_bufferBytes StringHead_t 12
 db  "  push   rdx" , 0
__literal978_bufferBytes StringHead_t 7
 db  "  rdtsc" , 0
__literal979_bufferBytes StringHead_t 16
 db  "  shl    rdx, 32" , 0
__literal980_bufferBytes StringHead_t 17
 db  "  add    rdx, rax" , 0
__literal981_bufferBytes StringHead_t 39
 db  "  add    qword [__profilerCounterEntry_" , 0
__literal982_bufferBytes StringHead_t 6
 db  "], rdx" , 0
__literal983_bufferBytes StringHead_t 12
 db  "  pop    rdx" , 0
__literal984_bufferBytes StringHead_t 25
 db  "  ; print profiler result" , 0
__literal985_bufferBytes StringHead_t 25
 db  "  ; ---------------------" , 0
__literal986_bufferBytes StringHead_t 35
 db  "  lea  rcx, [__profilerCounterData]" , 0
__literal987_bufferBytes StringHead_t 31
 db  "  call __MOLD_PrintProfilerData" , 0
__literal988_bufferBytes StringHead_t 11
 db  "  add  rsp," , 0
__literal989_bufferBytes StringHead_t 10
 db  "  pop  rbp" , 0
__literal990_bufferBytes StringHead_t 23
 db  "  ; enter profiler code" , 0
__literal991_bufferBytes StringHead_t 39
 db  "  sub    qword [__profilerCounterEntry_" , 0
__literal992_bufferBytes StringHead_t 9
 db  "  restore" , 0
__literal993_bufferBytes StringHead_t 14
 db  "  ; init frame" , 0
__literal994_bufferBytes StringHead_t 14
 db  "  ; ----------" , 0
__literal995_bufferBytes StringHead_t 54
 db  "error: unhandled operand type while setting up frame: " , 0
__literal996_bufferBytes StringHead_t 9
 db  "EQU rbp -" , 0
__literal997_bufferBytes StringHead_t 5
 db  "bytes" , 0
__literal998_bufferBytes StringHead_t 7
 db  "EQU rdi" , 0
__literal999_bufferBytes StringHead_t 10
 db  "  push rbp" , 0
__literal1000_bufferBytes StringHead_t 15
 db  "  mov  rbp, rsp" , 0
__literal1001_bufferBytes StringHead_t 11
 db  "  sub  rsp," , 0
__literal1002_bufferBytes StringHead_t 4
 db  "item" , 0
__literal1003_bufferBytes StringHead_t 37
 db  " + Variant_t.type], VARIANT_UNDEFINED" , 0
__literal1004_bufferBytes StringHead_t 13
 db  "  movdqu xmm0" , 0
__literal1005_bufferBytes StringHead_t 29
 db  "  mov    rax, [rbp + 16 + 8 *" , 0
__literal1006_bufferBytes StringHead_t 7
 db  ", [rax]" , 0
__literal1007_bufferBytes StringHead_t 6
 db  "  or [" , 0
__literal1008_bufferBytes StringHead_t 59
 db  " + Variant_t.flags ], VARIANT_FLAG_DUPLICATE_ON_FIRST_WRITE" , 0
__literal1009_bufferBytes StringHead_t 26
 db  "  ; skipped unused param [" , 0
__literal1010_bufferBytes StringHead_t 8
 db  "  ; code" , 0
__literal1011_bufferBytes StringHead_t 8
 db  "  ; ----" , 0
__literal1012_bufferBytes StringHead_t 25
 db  "__MOLD_VariantArrayCreate" , 0
__literal1013_bufferBytes StringHead_t 23
 db  "__MOLD_VariantMapCreate" , 0
__literal1014_bufferBytes StringHead_t 19
 db  "store_index_variant" , 0
__literal1015_bufferBytes StringHead_t 26
 db  "__MOLD_VariantStoreAtIndex" , 0
__literal1016_bufferBytes StringHead_t 16
 db  "store_key_string" , 0
__literal1017_bufferBytes StringHead_t 17
 db  "store_key_variant" , 0
__literal1018_bufferBytes StringHead_t 24
 db  "__MOLD_VariantStoreAtKey" , 0
__literal1019_bufferBytes StringHead_t 17
 db  "store_index_int32" , 0
__literal1020_bufferBytes StringHead_t 32
 db  "__MOLD_VariantStoreAtIndex_int32" , 0
__literal1021_bufferBytes StringHead_t 18
 db  "load_index_variant" , 0
__literal1022_bufferBytes StringHead_t 27
 db  "__MOLD_VariantLoadFromIndex" , 0
__literal1023_bufferBytes StringHead_t 16
 db  "load_index_int32" , 0
__literal1024_bufferBytes StringHead_t 33
 db  "__MOLD_VariantLoadFromIndex_int32" , 0
__literal1025_bufferBytes StringHead_t 16
 db  "load_key_variant" , 0
__literal1026_bufferBytes StringHead_t 25
 db  "__MOLD_VariantLoadFromKey" , 0
__literal1027_bufferBytes StringHead_t 5
 db  "  jmp" , 0
__literal1028_bufferBytes StringHead_t 25
 db  "error: unhandled opcode ", 34, "" , 0
__literal1029_bufferBytes StringHead_t 17
 db  "endOfCodeSection:" , 0
__literal1030_bufferBytes StringHead_t 46
 db  ";                                 Data section" , 0
__literal1031_bufferBytes StringHead_t 39
 db  "section '.data' data readable writeable" , 0
__literal1032_bufferBytes StringHead_t 24
 db  "include 'CommonData.asm'" , 0
__literal1033_bufferBytes StringHead_t 13
 db  "; Global vars" , 0
__literal1034_bufferBytes StringHead_t 13
 db  "; -----------" , 0
__literal1035_bufferBytes StringHead_t 18
 db  " Variant_t 0, 0, 0" , 0
__literal1036_bufferBytes StringHead_t 5
 db  " dq 0" , 0
__literal1037_bufferBytes StringHead_t 5
 db  " dd 0" , 0
__literal1038_bufferBytes StringHead_t 30
 db  "error: unhandled global type: " , 0
__literal1039_bufferBytes StringHead_t 55
 db  ";                     Constant (read-only) data section" , 0
__literal1040_bufferBytes StringHead_t 30
 db  "section '.rdata' data readable" , 0
__literal1041_bufferBytes StringHead_t 11
 db  "; Constants" , 0
__literal1042_bufferBytes StringHead_t 11
 db  "; ---------" , 0
__literal1043_bufferBytes StringHead_t 4
 db  "db ?" , 0
__literal1044_bufferBytes StringHead_t 6
 db  "; iter" , 0
__literal1045_bufferBytes StringHead_t 13
 db  "; Jump tables" , 0
__literal1046_bufferBytes StringHead_t 5
 db  "  dq " , 0
__literal1047_bufferBytes StringHead_t 9
 db  "; vtables" , 0
__literal1048_bufferBytes StringHead_t 9
 db  "; -------" , 0
__literal1049_bufferBytes StringHead_t 7
 db  "vtable_" , 0
__literal1050_bufferBytes StringHead_t 23
 db  "__MOLD_NullMethodCalled" , 0
__literal1051_bufferBytes StringHead_t 47
 db  ";                               Imports section" , 0
__literal1052_bufferBytes StringHead_t 47
 db  "section '.idata' import data readable writeable" , 0
__literal1053_bufferBytes StringHead_t 29
 db  "  include 'CommonImports.asm'" , 0
__literal1054_bufferBytes StringHead_t 46
 db  ";                                Debug section" , 0
__literal1055_bufferBytes StringHead_t 30
 db  "section '.debug' data readable" , 0
__literal1056_bufferBytes StringHead_t 12
 db  "SymbolTable:" , 0
__literal1057_bufferBytes StringHead_t 7
 db  "dq 0, 0" , 0
__literal1058_bufferBytes StringHead_t 31
 db  "include 'SymbolTableCommon.asm'" , 0
__literal1059_bufferBytes StringHead_t 3
 db  "dq " , 0
__literal1060_bufferBytes StringHead_t 5
 db  "name_" , 0
__literal1061_bufferBytes StringHead_t 42
 db  "dq endOfCodeSection, name_endOfCodeSection" , 0
__literal1062_bufferBytes StringHead_t 15
 db  "SymbolTableEnd:" , 0
__literal1063_bufferBytes StringHead_t 17
 db  "SymbolTableNames:" , 0
__literal1064_bufferBytes StringHead_t 36
 db  "include 'SymbolTableCommonNames.asm'" , 0
__literal1065_bufferBytes StringHead_t 4
 db  "', 0" , 0
__literal1066_bufferBytes StringHead_t 49
 db  "name_endOfCodeSection db 'out of code section', 0" , 0
__literal1067_bufferBytes StringHead_t 46
 db  ";                              Profile section" , 0
__literal1068_bufferBytes StringHead_t 42
 db  "section '.profile' data readable writeable" , 0
__literal1069_bufferBytes StringHead_t 22
 db  "__profilerCounterData:" , 0
__literal1070_bufferBytes StringHead_t 23
 db  "__profilerCounterEntry_" , 0
__literal1071_bufferBytes StringHead_t 6
 db  " dq 0," , 0
__literal1072_bufferBytes StringHead_t 10
 db  "lastOpcode" , 0
__literal1073_bufferBytes StringHead_t 7
 db  "lastDst" , 0
__literal1074_bufferBytes StringHead_t 18
 db  "cmpXxJmpIfFalseMap" , 0
__literal1075_bufferBytes StringHead_t 9
 db  "jmp_if_ne" , 0
__literal1076_bufferBytes StringHead_t 9
 db  "jmp_if_eq" , 0
__literal1077_bufferBytes StringHead_t 9
 db  "jmp_if_le" , 0
__literal1078_bufferBytes StringHead_t 17
 db  "cmpXxJmpIfTrueMap" , 0
__literal1079_bufferBytes StringHead_t 8
 db  "lastSrc1" , 0
__literal1080_bufferBytes StringHead_t 8
 db  "lastSrc2" , 0
__literal1081_bufferBytes StringHead_t 7
 db  "codeObj" , 0
__literal1082_bufferBytes StringHead_t 13
 db  "__mold_vtable" , 0
__literal1083_bufferBytes StringHead_t 44
 db  "error: unsupported number of syscall params:" , 0
__literal1084_bufferBytes StringHead_t 16
 db  "unknown opcode '" , 0
__literal1085_bufferBytes StringHead_t 13
 db  "load.string '" , 0
__literal1086_bufferBytes StringHead_t 13
 db  "load.string ", 34, "" , 0
__literal1087_bufferBytes StringHead_t 13
 db  "load.boolean " , 0
__literal1088_bufferBytes StringHead_t 13
 db  "load.integer " , 0
__literal1089_bufferBytes StringHead_t 11
 db  "load.float " , 0
__literal1090_bufferBytes StringHead_t 25
 db  "error: unhandled imm type" , 0
__literal1091_bufferBytes StringHead_t 10
 db  "load.array" , 0
__literal1092_bufferBytes StringHead_t 8
 db  "load.map" , 0
__literal1093_bufferBytes StringHead_t 11
 db  "string.join" , 0
__literal1094_bufferBytes StringHead_t 6
 db  "cmp.eq" , 0
__literal1095_bufferBytes StringHead_t 7
 db  "cmp.neq" , 0
__literal1096_bufferBytes StringHead_t 6
 db  "cmp.lt" , 0
__literal1097_bufferBytes StringHead_t 6
 db  "cmp.le" , 0
__literal1098_bufferBytes StringHead_t 6
 db  "cmp.gt" , 0
__literal1099_bufferBytes StringHead_t 6
 db  "cmp.ge" , 0
__literal1100_bufferBytes StringHead_t 6
 db  "print " , 0
__literal1101_bufferBytes StringHead_t 11
 db  "load.local " , 0
__literal1102_bufferBytes StringHead_t 13
 db  "load.by.index" , 0
__literal1103_bufferBytes StringHead_t 11
 db  "load.by.key" , 0
__literal1104_bufferBytes StringHead_t 11
 db  "load.param " , 0
__literal1105_bufferBytes StringHead_t 12
 db  "load.global " , 0
__literal1106_bufferBytes StringHead_t 11
 db  "load.retval" , 0
__literal1107_bufferBytes StringHead_t 12
 db  "store.local " , 0
__literal1108_bufferBytes StringHead_t 12
 db  "store.param " , 0
__literal1109_bufferBytes StringHead_t 13
 db  "store.global " , 0
__literal1110_bufferBytes StringHead_t 12
 db  "store.retval" , 0
__literal1111_bufferBytes StringHead_t 14
 db  "store.by.index" , 0
__literal1112_bufferBytes StringHead_t 12
 db  "store.by.key" , 0
__literal1113_bufferBytes StringHead_t 4
 db  "jmp " , 0
__literal1114_bufferBytes StringHead_t 12
 db  "jmp.if.true " , 0
__literal1115_bufferBytes StringHead_t 13
 db  "jmp.if.false " , 0
__literal1116_bufferBytes StringHead_t 5
 db  "call " , 0
__literal1117_bufferBytes StringHead_t 11
 db  "init.frame " , 0
__literal1118_bufferBytes StringHead_t 4
 db  "ret " , 0
__literal1119_bufferBytes StringHead_t 9
 db  "inner.ret" , 0
__literal1120_bufferBytes StringHead_t 4
 db  "drop" , 0
__literal1121_bufferBytes StringHead_t 6
 db  "dropn " , 0
__literal1122_bufferBytes StringHead_t 3
 db  "dup" , 0
__literal1123_bufferBytes StringHead_t 4
 db  "over" , 0
__literal1124_bufferBytes StringHead_t 6
 db  "vcall " , 0
__literal1125_bufferBytes StringHead_t 14
 db  "create.object " , 0
__literal1126_bufferBytes StringHead_t 9
 db  "move.back" , 0
__literal1127_bufferBytes StringHead_t 9
 db  "load.argc" , 0
__literal1128_bufferBytes StringHead_t 9
 db  "load.argv" , 0
__literal1129_bufferBytes StringHead_t 9
 db  "for.each " , 0
__literal1130_bufferBytes StringHead_t 10
 db  "0.2.200708" , 0
__literal1131_bufferBytes StringHead_t 12
 db  "Mold version" , 0
__literal1132_bufferBytes StringHead_t 6
 db  "Usage:" , 0
__literal1133_bufferBytes StringHead_t 62
 db  "  mold [-c] [--asm] [--mir0] [--mir] [--profiler] <input.mold>" , 0
__literal1134_bufferBytes StringHead_t 11
 db  "interpreter" , 0
__literal1135_bufferBytes StringHead_t 2
 db  "-c" , 0
__literal1136_bufferBytes StringHead_t 8
 db  "compiler" , 0
__literal1137_bufferBytes StringHead_t 41
 db  "Error: compiler mode not implemented yet." , 0
__literal1138_bufferBytes StringHead_t 47
 db  "Try --asm option and assemble result on by own." , 0
__literal1139_bufferBytes StringHead_t 5
 db  "--asm" , 0
__literal1140_bufferBytes StringHead_t 3
 db  "asm" , 0
__literal1141_bufferBytes StringHead_t 6
 db  "--mir0" , 0
__literal1142_bufferBytes StringHead_t 4
 db  "mir0" , 0
__literal1143_bufferBytes StringHead_t 5
 db  "--mir" , 0
__literal1144_bufferBytes StringHead_t 6
 db  "--mir1" , 0
__literal1145_bufferBytes StringHead_t 4
 db  "mir1" , 0
__literal1146_bufferBytes StringHead_t 5
 db  "--ast" , 0
__literal1147_bufferBytes StringHead_t 3
 db  "ast" , 0
__literal1148_bufferBytes StringHead_t 9
 db  "--astjson" , 0
__literal1149_bufferBytes StringHead_t 7
 db  "astjson" , 0
__literal1150_bufferBytes StringHead_t 15
 db  "--prettyPrinter" , 0
__literal1151_bufferBytes StringHead_t 13
 db  "prettyPrinter" , 0
__literal1152_bufferBytes StringHead_t 14
 db  "--debug-parser" , 0
__literal1153_bufferBytes StringHead_t 7
 db  "--debug" , 0
__literal1154_bufferBytes StringHead_t 3
 db  "-O0" , 0
__literal1155_bufferBytes StringHead_t 3
 db  "-O1" , 0
__literal1156_bufferBytes StringHead_t 3
 db  "-O2" , 0
__literal1157_bufferBytes StringHead_t 3
 db  "-O3" , 0
__literal1158_bufferBytes StringHead_t 10
 db  "--profiler" , 0
__literal1159_bufferBytes StringHead_t 25
 db  "Creating parser object..." , 0
__literal1160_bufferBytes StringHead_t 17
 db  "Parsing source..." , 0
__literal1161_bufferBytes StringHead_t 17
 db  "Converting AST..." , 0
__literal1162_bufferBytes StringHead_t 20
 db  "Resolving imports..." , 0
__literal1163_bufferBytes StringHead_t 20
 db  "Preprocessing AST..." , 0
__literal1164_bufferBytes StringHead_t 24
 db  "Building symbol table..." , 0
__literal1165_bufferBytes StringHead_t 17
 db  "Optimizing AST..." , 0
__literal1166_bufferBytes StringHead_t 23
 db  "Evaluating AST nodes..." , 0
__literal1167_bufferBytes StringHead_t 21
 db  "VCall optimization..." , 0
__literal1168_bufferBytes StringHead_t 44
 db  "Inline optimization... (TEMPORARY DISABLED!)" , 0
__literal1169_bufferBytes StringHead_t 19
 db  "Constant folding..." , 0
__literal1170_bufferBytes StringHead_t 49
 db  "If optimization... (TEMPORARY DISABLED FOR MIR0!)" , 0
__literal1171_bufferBytes StringHead_t 18
 db  "If optimization..." , 0
__literal1172_bufferBytes StringHead_t 24
 db  "Dead code elimination..." , 0
__literal1173_bufferBytes StringHead_t 41
 db  "Common subexpression elimination (CSE)..." , 0
__literal1174_bufferBytes StringHead_t 27
 db  "error: optimization level #" , 0
__literal1175_bufferBytes StringHead_t 23
 db  " is not implemented yet" , 0
__literal1176_bufferBytes StringHead_t 26
 db  "Translating AST to MIR0..." , 0
__literal1177_bufferBytes StringHead_t 23
 db  "Loading MIR0 into VM..." , 0
__literal1178_bufferBytes StringHead_t 15
 db  "Dumping code..." , 0
__literal1179_bufferBytes StringHead_t 13
 db  "Running VM..." , 0
__literal1180_bufferBytes StringHead_t 12
 db  "Type cast..." , 0
__literal1181_bufferBytes StringHead_t 18
 db  "Translating AST..." , 0
__literal1182_bufferBytes StringHead_t 22
 db  "Generating x64 code..." , 0
__const1398_bufferBytes StringHead_t 2
 db  "70" , 0
__const1421_bufferBytes StringHead_t 3
 db  "249" , 0
__const5231_bufferBytes StringHead_t 1
 db  "1" , 0
__const5232_bufferBytes StringHead_t 1
 db  "0" , 0
; iter 3
_act_0_buffer Buffer_t 64 , -1, 0, _act_0_bufferBytes
_act_1_buffer Buffer_t 1120 , -1, 0, _act_1_bufferBytes
_act_2_buffer Buffer_t 64 , -1, 0, _act_2_bufferBytes
_act_3_buffer Buffer_t 64 , -1, 0, _act_3_bufferBytes
_act_4_buffer Buffer_t 64 , -1, 0, _act_4_bufferBytes
_act_5_buffer Buffer_t 64 , -1, 0, _act_5_bufferBytes
_act_6_buffer Buffer_t 64 , -1, 0, _act_6_bufferBytes
_act_7_buffer Buffer_t 64 , -1, 0, _act_7_bufferBytes
_act_8_buffer Buffer_t 64 , -1, 0, _act_8_bufferBytes
_act_9_buffer Buffer_t 64 , -1, 0, _act_9_bufferBytes
_act_10_buffer Buffer_t 1120 , -1, 0, _act_10_bufferBytes
_act_11_buffer Buffer_t 64 , -1, 0, _act_11_bufferBytes
_act_12_buffer Buffer_t 64 , -1, 0, _act_12_bufferBytes
_act_13_buffer Buffer_t 64 , -1, 0, _act_13_bufferBytes
_act_14_buffer Buffer_t 64 , -1, 0, _act_14_bufferBytes
_act_15_buffer Buffer_t 64 , -1, 0, _act_15_bufferBytes
_act_16_buffer Buffer_t 64 , -1, 0, _act_16_bufferBytes
_act_17_buffer Buffer_t 64 , -1, 0, _act_17_bufferBytes
_act_18_buffer Buffer_t 64 , -1, 0, _act_18_bufferBytes
_act_19_buffer Buffer_t 64 , -1, 0, _act_19_bufferBytes
_act_20_buffer Buffer_t 64 , -1, 0, _act_20_bufferBytes
_act_21_buffer Buffer_t 16 , -1, 0, _act_21_bufferBytes
_act_22_buffer Buffer_t 64 , -1, 0, _act_22_bufferBytes
_act_23_buffer Buffer_t 448 , -1, 0, _act_23_bufferBytes
_act_24_buffer Buffer_t 64 , -1, 0, _act_24_bufferBytes
_act_25_buffer Buffer_t 304 , -1, 0, _act_25_bufferBytes
_act_26_buffer Buffer_t 64 , -1, 0, _act_26_bufferBytes
_act_27_buffer Buffer_t 64 , -1, 0, _act_27_bufferBytes
_act_28_buffer Buffer_t 64 , -1, 0, _act_28_bufferBytes
_act_29_buffer Buffer_t 64 , -1, 0, _act_29_bufferBytes
_act_30_buffer Buffer_t 64 , -1, 0, _act_30_bufferBytes
_act_31_buffer Buffer_t 64 , -1, 0, _act_31_bufferBytes
_act_32_buffer Buffer_t 64 , -1, 0, _act_32_bufferBytes
_act_33_buffer Buffer_t 16 , -1, 0, _act_33_bufferBytes
_act_34_buffer Buffer_t 64 , -1, 0, _act_34_bufferBytes
_act_35_buffer Buffer_t 112 , -1, 0, _act_35_bufferBytes
_act_36_buffer Buffer_t 64 , -1, 0, _act_36_bufferBytes
_act_37_buffer Buffer_t 64 , -1, 0, _act_37_bufferBytes
_act_38_buffer Buffer_t 64 , -1, 0, _act_38_bufferBytes
_act_39_buffer Buffer_t 112 , -1, 0, _act_39_bufferBytes
_act_40_buffer Buffer_t 64 , -1, 0, _act_40_bufferBytes
_act_41_buffer Buffer_t 640 , -1, 0, _act_41_bufferBytes
_act_42_buffer Buffer_t 160 , -1, 0, _act_42_bufferBytes
_act_43_buffer Buffer_t 688 , -1, 0, _act_43_bufferBytes
_act_44_buffer Buffer_t 208 , -1, 0, _act_44_bufferBytes
_act_45_buffer Buffer_t 64 , -1, 0, _act_45_bufferBytes
_act_46_buffer Buffer_t 640 , -1, 0, _act_46_bufferBytes
_act_47_buffer Buffer_t 64 , -1, 0, _act_47_bufferBytes
_act_48_buffer Buffer_t 64 , -1, 0, _act_48_bufferBytes
_act_49_buffer Buffer_t 640 , -1, 0, _act_49_bufferBytes
_act_50_buffer Buffer_t 640 , -1, 0, _act_50_bufferBytes
_act_51_buffer Buffer_t 64 , -1, 0, _act_51_bufferBytes
_act_52_buffer Buffer_t 640 , -1, 0, _act_52_bufferBytes
_act_53_buffer Buffer_t 640 , -1, 0, _act_53_bufferBytes
_act_54_buffer Buffer_t 640 , -1, 0, _act_54_bufferBytes
_act_55_buffer Buffer_t 640 , -1, 0, _act_55_bufferBytes
_act_56_buffer Buffer_t 64 , -1, 0, _act_56_bufferBytes
_act_57_buffer Buffer_t 64 , -1, 0, _act_57_bufferBytes
_act_58_buffer Buffer_t 640 , -1, 0, _act_58_bufferBytes
_act_59_buffer Buffer_t 64 , -1, 0, _act_59_bufferBytes
_act_60_buffer Buffer_t 64 , -1, 0, _act_60_bufferBytes
_act_61_buffer Buffer_t 64 , -1, 0, _act_61_bufferBytes
_act_62_buffer Buffer_t 64 , -1, 0, _act_62_bufferBytes
_act_63_buffer Buffer_t 64 , -1, 0, _act_63_bufferBytes
_act_64_buffer Buffer_t 64 , -1, 0, _act_64_bufferBytes
_act_65_buffer Buffer_t 640 , -1, 0, _act_65_bufferBytes
_act_66_buffer Buffer_t 784 , -1, 0, _act_66_bufferBytes
_act_67_buffer Buffer_t 640 , -1, 0, _act_67_bufferBytes
_act_68_buffer Buffer_t 640 , -1, 0, _act_68_bufferBytes
_act_69_buffer Buffer_t 64 , -1, 0, _act_69_bufferBytes
_act_70_buffer Buffer_t 640 , -1, 0, _act_70_bufferBytes
_act_71_buffer Buffer_t 640 , -1, 0, _act_71_bufferBytes
_act_72_buffer Buffer_t 640 , -1, 0, _act_72_bufferBytes
_act_73_buffer Buffer_t 640 , -1, 0, _act_73_bufferBytes
_act_74_buffer Buffer_t 64 , -1, 0, _act_74_bufferBytes
_act_75_buffer Buffer_t 64 , -1, 0, _act_75_bufferBytes
_act_76_buffer Buffer_t 64 , -1, 0, _act_76_bufferBytes
_act_77_buffer Buffer_t 64 , -1, 0, _act_77_bufferBytes
_act_78_buffer Buffer_t 64 , -1, 0, _act_78_bufferBytes
_act_79_buffer Buffer_t 64 , -1, 0, _act_79_bufferBytes
_act_80_buffer Buffer_t 640 , -1, 0, _act_80_bufferBytes
_act_81_buffer Buffer_t 640 , -1, 0, _act_81_bufferBytes
_act_82_buffer Buffer_t 640 , -1, 0, _act_82_bufferBytes
_act_83_buffer Buffer_t 640 , -1, 0, _act_83_bufferBytes
_act_84_buffer Buffer_t 640 , -1, 0, _act_84_bufferBytes
_act_85_buffer Buffer_t 640 , -1, 0, _act_85_bufferBytes
_act_86_buffer Buffer_t 64 , -1, 0, _act_86_bufferBytes
_act_87_buffer Buffer_t 112 , -1, 0, _act_87_bufferBytes
_act_88_buffer Buffer_t 64 , -1, 0, _act_88_bufferBytes
_act_89_buffer Buffer_t 64 , -1, 0, _act_89_bufferBytes
_act_90_buffer Buffer_t 160 , -1, 0, _act_90_bufferBytes
_act_91_buffer Buffer_t 160 , -1, 0, _act_91_bufferBytes
_act_92_buffer Buffer_t 16 , -1, 0, _act_92_bufferBytes
_act_93_buffer Buffer_t 16 , -1, 0, _act_93_bufferBytes
_act_94_buffer Buffer_t 16 , -1, 0, _act_94_bufferBytes
_act_95_buffer Buffer_t 448 , -1, 0, _act_95_bufferBytes
_act_96_buffer Buffer_t 16 , -1, 0, _act_96_bufferBytes
_act_97_buffer Buffer_t 736 , -1, 0, _act_97_bufferBytes
_act_98_buffer Buffer_t 64 , -1, 0, _act_98_bufferBytes
_act_99_buffer Buffer_t 112 , -1, 0, _act_99_bufferBytes
_act_100_buffer Buffer_t 64 , -1, 0, _act_100_bufferBytes
_act_101_buffer Buffer_t 160 , -1, 0, _act_101_bufferBytes
_act_102_buffer Buffer_t 112 , -1, 0, _act_102_bufferBytes
_act_103_buffer Buffer_t 304 , -1, 0, _act_103_bufferBytes
_act_104_buffer Buffer_t 64 , -1, 0, _act_104_bufferBytes
_act_105_buffer Buffer_t 688 , -1, 0, _act_105_bufferBytes
_act_106_buffer Buffer_t 64 , -1, 0, _act_106_bufferBytes
_act_107_buffer Buffer_t 64 , -1, 0, _act_107_bufferBytes
_act_108_buffer Buffer_t 64 , -1, 0, _act_108_bufferBytes
_act_109_buffer Buffer_t 64 , -1, 0, _act_109_bufferBytes
_act_110_buffer Buffer_t 64 , -1, 0, _act_110_bufferBytes
_act_111_buffer Buffer_t 64 , -1, 0, _act_111_bufferBytes
_act_112_buffer Buffer_t 64 , -1, 0, _act_112_bufferBytes
_act_113_buffer Buffer_t 352 , -1, 0, _act_113_bufferBytes
_act_114_buffer Buffer_t 64 , -1, 0, _act_114_bufferBytes
_act_115_buffer Buffer_t 688 , -1, 0, _act_115_bufferBytes
_act_116_buffer Buffer_t 496 , -1, 0, _act_116_bufferBytes
_act_117_buffer Buffer_t 64 , -1, 0, _act_117_bufferBytes
_act_118_buffer Buffer_t 160 , -1, 0, _act_118_bufferBytes
_act_119_buffer Buffer_t 64 , -1, 0, _act_119_bufferBytes
_act_120_buffer Buffer_t 160 , -1, 0, _act_120_bufferBytes
_act_121_buffer Buffer_t 64 , -1, 0, _act_121_bufferBytes
_act_122_buffer Buffer_t 640 , -1, 0, _act_122_bufferBytes
_act_123_buffer Buffer_t 64 , -1, 0, _act_123_bufferBytes
_act_124_buffer Buffer_t 64 , -1, 0, _act_124_bufferBytes
_act_125_buffer Buffer_t 64 , -1, 0, _act_125_bufferBytes
_act_126_buffer Buffer_t 304 , -1, 0, _act_126_bufferBytes
_act_127_buffer Buffer_t 64 , -1, 0, _act_127_bufferBytes
_act_128_buffer Buffer_t 64 , -1, 0, _act_128_bufferBytes
_act_129_buffer Buffer_t 64 , -1, 0, _act_129_bufferBytes
_act_130_buffer Buffer_t 64 , -1, 0, _act_130_bufferBytes
_act_131_buffer Buffer_t 304 , -1, 0, _act_131_bufferBytes
_act_132_buffer Buffer_t 496 , -1, 0, _act_132_bufferBytes
_act_133_buffer Buffer_t 64 , -1, 0, _act_133_bufferBytes
_act_134_buffer Buffer_t 64 , -1, 0, _act_134_bufferBytes
_act_135_buffer Buffer_t 496 , -1, 0, _act_135_bufferBytes
_act_136_buffer Buffer_t 64 , -1, 0, _act_136_bufferBytes
_act_137_buffer Buffer_t 64 , -1, 0, _act_137_bufferBytes
_act_138_buffer Buffer_t 64 , -1, 0, _act_138_bufferBytes
_act_139_buffer Buffer_t 64 , -1, 0, _act_139_bufferBytes
_act_140_buffer Buffer_t 352 , -1, 0, _act_140_bufferBytes
_act_141_buffer Buffer_t 208 , -1, 0, _act_141_bufferBytes
_act_142_buffer Buffer_t 64 , -1, 0, _act_142_bufferBytes
_act_143_buffer Buffer_t 448 , -1, 0, _act_143_bufferBytes
_act_144_buffer Buffer_t 208 , -1, 0, _act_144_bufferBytes
_act_145_buffer Buffer_t 208 , -1, 0, _act_145_bufferBytes
_act_146_buffer Buffer_t 352 , -1, 0, _act_146_bufferBytes
_act_147_buffer Buffer_t 304 , -1, 0, _act_147_bufferBytes
_act_148_buffer Buffer_t 64 , -1, 0, _act_148_bufferBytes
_act_149_buffer Buffer_t 64 , -1, 0, _act_149_bufferBytes
_act_150_buffer Buffer_t 64 , -1, 0, _act_150_bufferBytes
_act_151_buffer Buffer_t 64 , -1, 0, _act_151_bufferBytes
_act_152_buffer Buffer_t 64 , -1, 0, _act_152_bufferBytes
_act_153_buffer Buffer_t 688 , -1, 0, _act_153_bufferBytes
_act_154_buffer Buffer_t 112 , -1, 0, _act_154_bufferBytes
_act_155_buffer Buffer_t 64 , -1, 0, _act_155_bufferBytes
_act_156_buffer Buffer_t 64 , -1, 0, _act_156_bufferBytes
_act_157_buffer Buffer_t 64 , -1, 0, _act_157_bufferBytes
_act_158_buffer Buffer_t 16 , -1, 0, _act_158_bufferBytes
_act_159_buffer Buffer_t 640 , -1, 0, _act_159_bufferBytes
_act_160_buffer Buffer_t 16 , -1, 0, _act_160_bufferBytes
_act_161_buffer Buffer_t 688 , -1, 0, _act_161_bufferBytes
_act_162_buffer Buffer_t 64 , -1, 0, _act_162_bufferBytes
_act_163_buffer Buffer_t 640 , -1, 0, _act_163_bufferBytes
_act_164_buffer Buffer_t 64 , -1, 0, _act_164_bufferBytes
_act_165_buffer Buffer_t 160 , -1, 0, _act_165_bufferBytes
_act_166_buffer Buffer_t 64 , -1, 0, _act_166_bufferBytes
_act_167_buffer Buffer_t 112 , -1, 0, _act_167_bufferBytes
_act_168_buffer Buffer_t 688 , -1, 0, _act_168_bufferBytes
_act_169_buffer Buffer_t 64 , -1, 0, _act_169_bufferBytes
_act_170_buffer Buffer_t 112 , -1, 0, _act_170_bufferBytes
_act_171_buffer Buffer_t 64 , -1, 0, _act_171_bufferBytes
_act_172_buffer Buffer_t 640 , -1, 0, _act_172_bufferBytes
_act_173_buffer Buffer_t 112 , -1, 0, _act_173_bufferBytes
_act_174_buffer Buffer_t 64 , -1, 0, _act_174_bufferBytes
_act_175_buffer Buffer_t 112 , -1, 0, _act_175_bufferBytes
_act_176_buffer Buffer_t 64 , -1, 0, _act_176_bufferBytes
_act_177_buffer Buffer_t 64 , -1, 0, _act_177_bufferBytes
_act_178_buffer Buffer_t 64 , -1, 0, _act_178_bufferBytes
_act_179_buffer Buffer_t 64 , -1, 0, _act_179_bufferBytes
_act_180_buffer Buffer_t 1120 , -1, 0, _act_180_bufferBytes
_act_181_buffer Buffer_t 160 , -1, 0, _act_181_bufferBytes
_act_182_buffer Buffer_t 64 , -1, 0, _act_182_bufferBytes
_act_183_buffer Buffer_t 1120 , -1, 0, _act_183_bufferBytes
_act_184_buffer Buffer_t 160 , -1, 0, _act_184_bufferBytes
_act_185_buffer Buffer_t 640 , -1, 0, _act_185_bufferBytes
_act_186_buffer Buffer_t 1120 , -1, 0, _act_186_bufferBytes
_act_187_buffer Buffer_t 256 , -1, 0, _act_187_bufferBytes
_act_188_buffer Buffer_t 64 , -1, 0, _act_188_bufferBytes
_act_189_buffer Buffer_t 64 , -1, 0, _act_189_bufferBytes
_act_190_buffer Buffer_t 688 , -1, 0, _act_190_bufferBytes
_act_191_buffer Buffer_t 64 , -1, 0, _act_191_bufferBytes
_act_192_buffer Buffer_t 64 , -1, 0, _act_192_bufferBytes
_act_193_buffer Buffer_t 64 , -1, 0, _act_193_bufferBytes
_act_194_buffer Buffer_t 304 , -1, 0, _act_194_bufferBytes
_act_195_buffer Buffer_t 64 , -1, 0, _act_195_bufferBytes
_act_196_buffer Buffer_t 112 , -1, 0, _act_196_bufferBytes
_act_197_buffer Buffer_t 304 , -1, 0, _act_197_bufferBytes
_act_198_buffer Buffer_t 640 , -1, 0, _act_198_bufferBytes
_act_199_buffer Buffer_t 352 , -1, 0, _act_199_bufferBytes
_act_200_buffer Buffer_t 640 , -1, 0, _act_200_bufferBytes
_act_201_buffer Buffer_t 64 , -1, 0, _act_201_bufferBytes
_act_202_buffer Buffer_t 640 , -1, 0, _act_202_bufferBytes
_act_203_buffer Buffer_t 640 , -1, 0, _act_203_bufferBytes
_act_204_buffer Buffer_t 64 , -1, 0, _act_204_bufferBytes
_act_205_buffer Buffer_t 160 , -1, 0, _act_205_bufferBytes
_act_206_buffer Buffer_t 208 , -1, 0, _act_206_bufferBytes
_act_207_buffer Buffer_t 208 , -1, 0, _act_207_bufferBytes
_act_208_buffer Buffer_t 64 , -1, 0, _act_208_bufferBytes
_act_209_buffer Buffer_t 112 , -1, 0, _act_209_bufferBytes
_act_210_buffer Buffer_t 112 , -1, 0, _act_210_bufferBytes
_act_211_buffer Buffer_t 64 , -1, 0, _act_211_bufferBytes
_act_212_buffer Buffer_t 304 , -1, 0, _act_212_bufferBytes
_act_213_buffer Buffer_t 64 , -1, 0, _act_213_bufferBytes
_act_214_buffer Buffer_t 448 , -1, 0, _act_214_bufferBytes
_act_215_buffer Buffer_t 640 , -1, 0, _act_215_bufferBytes
_act_216_buffer Buffer_t 640 , -1, 0, _act_216_bufferBytes
_act_217_buffer Buffer_t 64 , -1, 0, _act_217_bufferBytes
_act_218_buffer Buffer_t 1120 , -1, 0, _act_218_bufferBytes
_act_219_buffer Buffer_t 640 , -1, 0, _act_219_bufferBytes
_act_220_buffer Buffer_t 64 , -1, 0, _act_220_bufferBytes
_act_221_buffer Buffer_t 304 , -1, 0, _act_221_bufferBytes
_act_222_buffer Buffer_t 64 , -1, 0, _act_222_bufferBytes
_act_223_buffer Buffer_t 640 , -1, 0, _act_223_bufferBytes
_act_224_buffer Buffer_t 1408 , -1, 0, _act_224_bufferBytes
_act_225_buffer Buffer_t 64 , -1, 0, _act_225_bufferBytes
_act_226_buffer Buffer_t 1408 , -1, 0, _act_226_bufferBytes
_act_227_buffer Buffer_t 1408 , -1, 0, _act_227_bufferBytes
_act_228_buffer Buffer_t 64 , -1, 0, _act_228_bufferBytes
_act_229_buffer Buffer_t 64 , -1, 0, _act_229_bufferBytes
_act_230_buffer Buffer_t 64 , -1, 0, _act_230_bufferBytes
_act_231_buffer Buffer_t 64 , -1, 0, _act_231_bufferBytes
_act_232_buffer Buffer_t 1120 , -1, 0, _act_232_bufferBytes
_act_233_buffer Buffer_t 640 , -1, 0, _act_233_bufferBytes
_act_234_buffer Buffer_t 160 , -1, 0, _act_234_bufferBytes
_act_235_buffer Buffer_t 160 , -1, 0, _act_235_bufferBytes
_act_236_buffer Buffer_t 64 , -1, 0, _act_236_bufferBytes
_act_237_buffer Buffer_t 64 , -1, 0, _act_237_bufferBytes
_act_238_buffer Buffer_t 64 , -1, 0, _act_238_bufferBytes
_act_239_buffer Buffer_t 64 , -1, 0, _act_239_bufferBytes
_act_240_buffer Buffer_t 64 , -1, 0, _act_240_bufferBytes
_act_241_buffer Buffer_t 64 , -1, 0, _act_241_bufferBytes
_act_242_buffer Buffer_t 64 , -1, 0, _act_242_bufferBytes
_act_243_buffer Buffer_t 160 , -1, 0, _act_243_bufferBytes
_act_244_buffer Buffer_t 304 , -1, 0, _act_244_bufferBytes
_act_245_buffer Buffer_t 448 , -1, 0, _act_245_bufferBytes
_act_246_buffer Buffer_t 400 , -1, 0, _act_246_bufferBytes
_act_247_buffer Buffer_t 400 , -1, 0, _act_247_bufferBytes
_act_248_buffer Buffer_t 304 , -1, 0, _act_248_bufferBytes
_act_249_buffer Buffer_t 304 , -1, 0, _act_249_bufferBytes
_act_250_buffer Buffer_t 64 , -1, 0, _act_250_bufferBytes
_act_251_buffer Buffer_t 304 , -1, 0, _act_251_bufferBytes
_act_252_buffer Buffer_t 640 , -1, 0, _act_252_bufferBytes
_act_253_buffer Buffer_t 400 , -1, 0, _act_253_bufferBytes
_act_254_buffer Buffer_t 64 , -1, 0, _act_254_bufferBytes
_act_255_buffer Buffer_t 640 , -1, 0, _act_255_bufferBytes
_act_256_buffer Buffer_t 64 , -1, 0, _act_256_bufferBytes
_act_257_buffer Buffer_t 64 , -1, 0, _act_257_bufferBytes
_act_258_buffer Buffer_t 640 , -1, 0, _act_258_bufferBytes
_act_259_buffer Buffer_t 64 , -1, 0, _act_259_bufferBytes
_act_260_buffer Buffer_t 112 , -1, 0, _act_260_bufferBytes
_act_261_buffer Buffer_t 112 , -1, 0, _act_261_bufferBytes
_act_262_buffer Buffer_t 64 , -1, 0, _act_262_bufferBytes
_act_263_buffer Buffer_t 64 , -1, 0, _act_263_bufferBytes
_act_264_buffer Buffer_t 448 , -1, 0, _act_264_bufferBytes
_act_265_buffer Buffer_t 400 , -1, 0, _act_265_bufferBytes
_act_266_buffer Buffer_t 400 , -1, 0, _act_266_bufferBytes
_act_267_buffer Buffer_t 400 , -1, 0, _act_267_bufferBytes
_act_268_buffer Buffer_t 400 , -1, 0, _act_268_bufferBytes
_act_269_buffer Buffer_t 400 , -1, 0, _act_269_bufferBytes
_act_270_buffer Buffer_t 400 , -1, 0, _act_270_bufferBytes
_act_271_buffer Buffer_t 112 , -1, 0, _act_271_bufferBytes
_act_272_buffer Buffer_t 208 , -1, 0, _act_272_bufferBytes
_act_273_buffer Buffer_t 352 , -1, 0, _act_273_bufferBytes
_act_274_buffer Buffer_t 64 , -1, 0, _act_274_bufferBytes
_act_275_buffer Buffer_t 304 , -1, 0, _act_275_bufferBytes
_act_276_buffer Buffer_t 1120 , -1, 0, _act_276_bufferBytes
_act_277_buffer Buffer_t 64 , -1, 0, _act_277_bufferBytes
_act_278_buffer Buffer_t 640 , -1, 0, _act_278_bufferBytes
_act_279_buffer Buffer_t 64 , -1, 0, _act_279_bufferBytes
_act_280_buffer Buffer_t 1408 , -1, 0, _act_280_bufferBytes
_act_281_buffer Buffer_t 1408 , -1, 0, _act_281_bufferBytes
_act_282_buffer Buffer_t 304 , -1, 0, _act_282_bufferBytes
_act_283_buffer Buffer_t 400 , -1, 0, _act_283_bufferBytes
_act_284_buffer Buffer_t 208 , -1, 0, _act_284_bufferBytes
_act_285_buffer Buffer_t 64 , -1, 0, _act_285_bufferBytes
_act_286_buffer Buffer_t 304 , -1, 0, _act_286_bufferBytes
_act_287_buffer Buffer_t 64 , -1, 0, _act_287_bufferBytes
_act_288_buffer Buffer_t 64 , -1, 0, _act_288_bufferBytes
_act_289_buffer Buffer_t 208 , -1, 0, _act_289_bufferBytes
_act_290_buffer Buffer_t 64 , -1, 0, _act_290_bufferBytes
_act_291_buffer Buffer_t 304 , -1, 0, _act_291_bufferBytes
_act_292_buffer Buffer_t 64 , -1, 0, _act_292_bufferBytes
_act_293_buffer Buffer_t 64 , -1, 0, _act_293_bufferBytes
_act_294_buffer Buffer_t 304 , -1, 0, _act_294_bufferBytes
_go_0_buffer Buffer_t 160 , -1, 0, _go_0_bufferBytes
_go_1_buffer Buffer_t 2944 , -1, 0, _go_1_bufferBytes
_go_2_buffer Buffer_t 64 , -1, 0, _go_2_bufferBytes
_go_3_buffer Buffer_t 160 , -1, 0, _go_3_bufferBytes
_go_4_buffer Buffer_t 160 , -1, 0, _go_4_bufferBytes
_go_5_buffer Buffer_t 160 , -1, 0, _go_5_bufferBytes
_go_6_buffer Buffer_t 160 , -1, 0, _go_6_bufferBytes
_go_7_buffer Buffer_t 160 , -1, 0, _go_7_bufferBytes
_go_8_buffer Buffer_t 160 , -1, 0, _go_8_bufferBytes
_go_9_buffer Buffer_t 160 , -1, 0, _go_9_bufferBytes
_go_10_buffer Buffer_t 2752 , -1, 0, _go_10_bufferBytes
_go_11_buffer Buffer_t 64 , -1, 0, _go_11_bufferBytes
_go_12_buffer Buffer_t 16 , -1, 0, _go_12_bufferBytes
_go_13_buffer Buffer_t 16 , -1, 0, _go_13_bufferBytes
_go_14_buffer Buffer_t 160 , -1, 0, _go_14_bufferBytes
_go_15_buffer Buffer_t 160 , -1, 0, _go_15_bufferBytes
_go_16_buffer Buffer_t 160 , -1, 0, _go_16_bufferBytes
_go_17_buffer Buffer_t 16 , -1, 0, _go_17_bufferBytes
_go_18_buffer Buffer_t 160 , -1, 0, _go_18_bufferBytes
_go_19_buffer Buffer_t 16 , -1, 0, _go_19_bufferBytes
_go_20_buffer Buffer_t 64 , -1, 0, _go_20_bufferBytes
_go_21_buffer Buffer_t 16 , -1, 0, _go_21_bufferBytes
_go_22_buffer Buffer_t 160 , -1, 0, _go_22_bufferBytes
_go_23_buffer Buffer_t 448 , -1, 0, _go_23_bufferBytes
_go_24_buffer Buffer_t 160 , -1, 0, _go_24_bufferBytes
_go_25_buffer Buffer_t 304 , -1, 0, _go_25_bufferBytes
_go_26_buffer Buffer_t 160 , -1, 0, _go_26_bufferBytes
_go_27_buffer Buffer_t 160 , -1, 0, _go_27_bufferBytes
_go_28_buffer Buffer_t 160 , -1, 0, _go_28_bufferBytes
_go_29_buffer Buffer_t 64 , -1, 0, _go_29_bufferBytes
_go_30_buffer Buffer_t 16 , -1, 0, _go_30_bufferBytes
_go_31_buffer Buffer_t 160 , -1, 0, _go_31_bufferBytes
_go_32_buffer Buffer_t 64 , -1, 0, _go_32_bufferBytes
_go_33_buffer Buffer_t 16 , -1, 0, _go_33_bufferBytes
_go_34_buffer Buffer_t 160 , -1, 0, _go_34_bufferBytes
_go_35_buffer Buffer_t 112 , -1, 0, _go_35_bufferBytes
_go_36_buffer Buffer_t 160 , -1, 0, _go_36_bufferBytes
_go_37_buffer Buffer_t 160 , -1, 0, _go_37_bufferBytes
_go_38_buffer Buffer_t 160 , -1, 0, _go_38_bufferBytes
_go_39_buffer Buffer_t 16 , -1, 0, _go_39_bufferBytes
_go_40_buffer Buffer_t 160 , -1, 0, _go_40_bufferBytes
_go_41_buffer Buffer_t 1504 , -1, 0, _go_41_bufferBytes
_go_42_buffer Buffer_t 400 , -1, 0, _go_42_bufferBytes
_go_43_buffer Buffer_t 1648 , -1, 0, _go_43_bufferBytes
_go_44_buffer Buffer_t 256 , -1, 0, _go_44_bufferBytes
_go_45_buffer Buffer_t 160 , -1, 0, _go_45_bufferBytes
_go_46_buffer Buffer_t 1504 , -1, 0, _go_46_bufferBytes
_go_47_buffer Buffer_t 64 , -1, 0, _go_47_bufferBytes
_go_48_buffer Buffer_t 64 , -1, 0, _go_48_bufferBytes
_go_49_buffer Buffer_t 1504 , -1, 0, _go_49_bufferBytes
_go_50_buffer Buffer_t 1600 , -1, 0, _go_50_bufferBytes
_go_51_buffer Buffer_t 112 , -1, 0, _go_51_bufferBytes
_go_52_buffer Buffer_t 1552 , -1, 0, _go_52_bufferBytes
_go_53_buffer Buffer_t 1552 , -1, 0, _go_53_bufferBytes
_go_54_buffer Buffer_t 1552 , -1, 0, _go_54_bufferBytes
_go_55_buffer Buffer_t 1552 , -1, 0, _go_55_bufferBytes
_go_56_buffer Buffer_t 112 , -1, 0, _go_56_bufferBytes
_go_57_buffer Buffer_t 160 , -1, 0, _go_57_bufferBytes
_go_58_buffer Buffer_t 1504 , -1, 0, _go_58_bufferBytes
_go_59_buffer Buffer_t 160 , -1, 0, _go_59_bufferBytes
_go_60_buffer Buffer_t 160 , -1, 0, _go_60_bufferBytes
_go_61_buffer Buffer_t 160 , -1, 0, _go_61_bufferBytes
_go_62_buffer Buffer_t 160 , -1, 0, _go_62_bufferBytes
_go_63_buffer Buffer_t 160 , -1, 0, _go_63_bufferBytes
_go_64_buffer Buffer_t 160 , -1, 0, _go_64_bufferBytes
_go_65_buffer Buffer_t 1504 , -1, 0, _go_65_bufferBytes
_go_66_buffer Buffer_t 1696 , -1, 0, _go_66_bufferBytes
_go_67_buffer Buffer_t 1504 , -1, 0, _go_67_bufferBytes
_go_68_buffer Buffer_t 1504 , -1, 0, _go_68_bufferBytes
_go_69_buffer Buffer_t 112 , -1, 0, _go_69_bufferBytes
_go_70_buffer Buffer_t 1504 , -1, 0, _go_70_bufferBytes
_go_71_buffer Buffer_t 1504 , -1, 0, _go_71_bufferBytes
_go_72_buffer Buffer_t 1504 , -1, 0, _go_72_bufferBytes
_go_73_buffer Buffer_t 1504 , -1, 0, _go_73_bufferBytes
_go_74_buffer Buffer_t 160 , -1, 0, _go_74_bufferBytes
_go_75_buffer Buffer_t 160 , -1, 0, _go_75_bufferBytes
_go_76_buffer Buffer_t 160 , -1, 0, _go_76_bufferBytes
_go_77_buffer Buffer_t 160 , -1, 0, _go_77_bufferBytes
_go_78_buffer Buffer_t 160 , -1, 0, _go_78_bufferBytes
_go_79_buffer Buffer_t 160 , -1, 0, _go_79_bufferBytes
_go_80_buffer Buffer_t 1504 , -1, 0, _go_80_bufferBytes
_go_81_buffer Buffer_t 1504 , -1, 0, _go_81_bufferBytes
_go_82_buffer Buffer_t 1504 , -1, 0, _go_82_bufferBytes
_go_83_buffer Buffer_t 1504 , -1, 0, _go_83_bufferBytes
_go_84_buffer Buffer_t 1504 , -1, 0, _go_84_bufferBytes
_go_85_buffer Buffer_t 1504 , -1, 0, _go_85_bufferBytes
_go_86_buffer Buffer_t 64 , -1, 0, _go_86_bufferBytes
_go_87_buffer Buffer_t 304 , -1, 0, _go_87_bufferBytes
_go_88_buffer Buffer_t 160 , -1, 0, _go_88_bufferBytes
_go_89_buffer Buffer_t 160 , -1, 0, _go_89_bufferBytes
_go_90_buffer Buffer_t 256 , -1, 0, _go_90_bufferBytes
_go_91_buffer Buffer_t 256 , -1, 0, _go_91_bufferBytes
_go_92_buffer Buffer_t 16 , -1, 0, _go_92_bufferBytes
_go_93_buffer Buffer_t 16 , -1, 0, _go_93_bufferBytes
_go_94_buffer Buffer_t 16 , -1, 0, _go_94_bufferBytes
_go_95_buffer Buffer_t 448 , -1, 0, _go_95_bufferBytes
_go_96_buffer Buffer_t 16 , -1, 0, _go_96_bufferBytes
_go_97_buffer Buffer_t 16 , -1, 0, _go_97_bufferBytes
_go_98_buffer Buffer_t 64 , -1, 0, _go_98_bufferBytes
_go_99_buffer Buffer_t 112 , -1, 0, _go_99_bufferBytes
_go_100_buffer Buffer_t 64 , -1, 0, _go_100_bufferBytes
_go_101_buffer Buffer_t 352 , -1, 0, _go_101_bufferBytes
_go_102_buffer Buffer_t 112 , -1, 0, _go_102_bufferBytes
_go_103_buffer Buffer_t 304 , -1, 0, _go_103_bufferBytes
_go_104_buffer Buffer_t 64 , -1, 0, _go_104_bufferBytes
_go_105_buffer Buffer_t 1600 , -1, 0, _go_105_bufferBytes
_go_106_buffer Buffer_t 64 , -1, 0, _go_106_bufferBytes
_go_107_buffer Buffer_t 160 , -1, 0, _go_107_bufferBytes
_go_108_buffer Buffer_t 160 , -1, 0, _go_108_bufferBytes
_go_109_buffer Buffer_t 160 , -1, 0, _go_109_bufferBytes
_go_110_buffer Buffer_t 112 , -1, 0, _go_110_bufferBytes
_go_111_buffer Buffer_t 112 , -1, 0, _go_111_bufferBytes
_go_112_buffer Buffer_t 112 , -1, 0, _go_112_bufferBytes
_go_113_buffer Buffer_t 448 , -1, 0, _go_113_bufferBytes
_go_114_buffer Buffer_t 64 , -1, 0, _go_114_bufferBytes
_go_115_buffer Buffer_t 1648 , -1, 0, _go_115_bufferBytes
_go_116_buffer Buffer_t 496 , -1, 0, _go_116_bufferBytes
_go_117_buffer Buffer_t 64 , -1, 0, _go_117_bufferBytes
_go_118_buffer Buffer_t 160 , -1, 0, _go_118_bufferBytes
_go_119_buffer Buffer_t 16 , -1, 0, _go_119_bufferBytes
_go_120_buffer Buffer_t 112 , -1, 0, _go_120_bufferBytes
_go_121_buffer Buffer_t 64 , -1, 0, _go_121_bufferBytes
_go_122_buffer Buffer_t 1552 , -1, 0, _go_122_bufferBytes
_go_123_buffer Buffer_t 64 , -1, 0, _go_123_bufferBytes
_go_124_buffer Buffer_t 64 , -1, 0, _go_124_bufferBytes
_go_125_buffer Buffer_t 64 , -1, 0, _go_125_bufferBytes
_go_126_buffer Buffer_t 304 , -1, 0, _go_126_bufferBytes
_go_127_buffer Buffer_t 64 , -1, 0, _go_127_bufferBytes
_go_128_buffer Buffer_t 64 , -1, 0, _go_128_bufferBytes
_go_129_buffer Buffer_t 64 , -1, 0, _go_129_bufferBytes
_go_130_buffer Buffer_t 64 , -1, 0, _go_130_bufferBytes
_go_131_buffer Buffer_t 304 , -1, 0, _go_131_bufferBytes
_go_132_buffer Buffer_t 496 , -1, 0, _go_132_bufferBytes
_go_133_buffer Buffer_t 160 , -1, 0, _go_133_bufferBytes
_go_134_buffer Buffer_t 160 , -1, 0, _go_134_bufferBytes
_go_135_buffer Buffer_t 496 , -1, 0, _go_135_bufferBytes
_go_136_buffer Buffer_t 160 , -1, 0, _go_136_bufferBytes
_go_137_buffer Buffer_t 64 , -1, 0, _go_137_bufferBytes
_go_138_buffer Buffer_t 64 , -1, 0, _go_138_bufferBytes
_go_139_buffer Buffer_t 64 , -1, 0, _go_139_bufferBytes
_go_140_buffer Buffer_t 448 , -1, 0, _go_140_bufferBytes
_go_141_buffer Buffer_t 448 , -1, 0, _go_141_bufferBytes
_go_142_buffer Buffer_t 64 , -1, 0, _go_142_bufferBytes
_go_143_buffer Buffer_t 448 , -1, 0, _go_143_bufferBytes
_go_144_buffer Buffer_t 448 , -1, 0, _go_144_bufferBytes
_go_145_buffer Buffer_t 448 , -1, 0, _go_145_bufferBytes
_go_146_buffer Buffer_t 448 , -1, 0, _go_146_bufferBytes
_go_147_buffer Buffer_t 304 , -1, 0, _go_147_bufferBytes
_go_148_buffer Buffer_t 304 , -1, 0, _go_148_bufferBytes
_go_149_buffer Buffer_t 304 , -1, 0, _go_149_bufferBytes
_go_150_buffer Buffer_t 304 , -1, 0, _go_150_bufferBytes
_go_151_buffer Buffer_t 304 , -1, 0, _go_151_bufferBytes
_go_152_buffer Buffer_t 304 , -1, 0, _go_152_bufferBytes
_go_153_buffer Buffer_t 1648 , -1, 0, _go_153_bufferBytes
_go_154_buffer Buffer_t 208 , -1, 0, _go_154_bufferBytes
_go_155_buffer Buffer_t 160 , -1, 0, _go_155_bufferBytes
_go_156_buffer Buffer_t 64 , -1, 0, _go_156_bufferBytes
_go_157_buffer Buffer_t 112 , -1, 0, _go_157_bufferBytes
_go_158_buffer Buffer_t 112 , -1, 0, _go_158_bufferBytes
_go_159_buffer Buffer_t 1504 , -1, 0, _go_159_bufferBytes
_go_160_buffer Buffer_t 112 , -1, 0, _go_160_bufferBytes
_go_161_buffer Buffer_t 1600 , -1, 0, _go_161_bufferBytes
_go_162_buffer Buffer_t 160 , -1, 0, _go_162_bufferBytes
_go_163_buffer Buffer_t 1504 , -1, 0, _go_163_bufferBytes
_go_164_buffer Buffer_t 160 , -1, 0, _go_164_bufferBytes
_go_165_buffer Buffer_t 304 , -1, 0, _go_165_bufferBytes
_go_166_buffer Buffer_t 160 , -1, 0, _go_166_bufferBytes
_go_167_buffer Buffer_t 112 , -1, 0, _go_167_bufferBytes
_go_168_buffer Buffer_t 1552 , -1, 0, _go_168_bufferBytes
_go_169_buffer Buffer_t 160 , -1, 0, _go_169_bufferBytes
_go_170_buffer Buffer_t 112 , -1, 0, _go_170_bufferBytes
_go_171_buffer Buffer_t 160 , -1, 0, _go_171_bufferBytes
_go_172_buffer Buffer_t 1504 , -1, 0, _go_172_bufferBytes
_go_173_buffer Buffer_t 112 , -1, 0, _go_173_bufferBytes
_go_174_buffer Buffer_t 64 , -1, 0, _go_174_bufferBytes
_go_175_buffer Buffer_t 112 , -1, 0, _go_175_bufferBytes
_go_176_buffer Buffer_t 160 , -1, 0, _go_176_bufferBytes
_go_177_buffer Buffer_t 64 , -1, 0, _go_177_bufferBytes
_go_178_buffer Buffer_t 64 , -1, 0, _go_178_bufferBytes
_go_179_buffer Buffer_t 160 , -1, 0, _go_179_bufferBytes
_go_180_buffer Buffer_t 2896 , -1, 0, _go_180_bufferBytes
_go_181_buffer Buffer_t 160 , -1, 0, _go_181_bufferBytes
_go_182_buffer Buffer_t 64 , -1, 0, _go_182_bufferBytes
_go_183_buffer Buffer_t 2896 , -1, 0, _go_183_bufferBytes
_go_184_buffer Buffer_t 208 , -1, 0, _go_184_bufferBytes
_go_185_buffer Buffer_t 1504 , -1, 0, _go_185_bufferBytes
_go_186_buffer Buffer_t 2896 , -1, 0, _go_186_bufferBytes
_go_187_buffer Buffer_t 592 , -1, 0, _go_187_bufferBytes
_go_188_buffer Buffer_t 64 , -1, 0, _go_188_bufferBytes
_go_189_buffer Buffer_t 64 , -1, 0, _go_189_bufferBytes
_go_190_buffer Buffer_t 1648 , -1, 0, _go_190_bufferBytes
_go_191_buffer Buffer_t 64 , -1, 0, _go_191_bufferBytes
_go_192_buffer Buffer_t 160 , -1, 0, _go_192_bufferBytes
_go_193_buffer Buffer_t 64 , -1, 0, _go_193_bufferBytes
_go_194_buffer Buffer_t 304 , -1, 0, _go_194_bufferBytes
_go_195_buffer Buffer_t 64 , -1, 0, _go_195_bufferBytes
_go_196_buffer Buffer_t 256 , -1, 0, _go_196_bufferBytes
_go_197_buffer Buffer_t 304 , -1, 0, _go_197_bufferBytes
_go_198_buffer Buffer_t 1504 , -1, 0, _go_198_bufferBytes
_go_199_buffer Buffer_t 352 , -1, 0, _go_199_bufferBytes
_go_200_buffer Buffer_t 1504 , -1, 0, _go_200_bufferBytes
_go_201_buffer Buffer_t 112 , -1, 0, _go_201_bufferBytes
_go_202_buffer Buffer_t 1504 , -1, 0, _go_202_bufferBytes
_go_203_buffer Buffer_t 1504 , -1, 0, _go_203_bufferBytes
_go_204_buffer Buffer_t 112 , -1, 0, _go_204_bufferBytes
_go_205_buffer Buffer_t 208 , -1, 0, _go_205_bufferBytes
_go_206_buffer Buffer_t 304 , -1, 0, _go_206_bufferBytes
_go_207_buffer Buffer_t 304 , -1, 0, _go_207_bufferBytes
_go_208_buffer Buffer_t 64 , -1, 0, _go_208_bufferBytes
_go_209_buffer Buffer_t 112 , -1, 0, _go_209_bufferBytes
_go_210_buffer Buffer_t 160 , -1, 0, _go_210_bufferBytes
_go_211_buffer Buffer_t 64 , -1, 0, _go_211_bufferBytes
_go_212_buffer Buffer_t 304 , -1, 0, _go_212_bufferBytes
_go_213_buffer Buffer_t 64 , -1, 0, _go_213_bufferBytes
_go_214_buffer Buffer_t 784 , -1, 0, _go_214_bufferBytes
_go_215_buffer Buffer_t 1504 , -1, 0, _go_215_bufferBytes
_go_216_buffer Buffer_t 1504 , -1, 0, _go_216_bufferBytes
_go_217_buffer Buffer_t 64 , -1, 0, _go_217_bufferBytes
_go_218_buffer Buffer_t 2896 , -1, 0, _go_218_bufferBytes
_go_219_buffer Buffer_t 1504 , -1, 0, _go_219_bufferBytes
_go_220_buffer Buffer_t 64 , -1, 0, _go_220_bufferBytes
_go_221_buffer Buffer_t 304 , -1, 0, _go_221_bufferBytes
_go_222_buffer Buffer_t 160 , -1, 0, _go_222_bufferBytes
_go_223_buffer Buffer_t 1504 , -1, 0, _go_223_bufferBytes
_go_224_buffer Buffer_t 3184 , -1, 0, _go_224_bufferBytes
_go_225_buffer Buffer_t 64 , -1, 0, _go_225_bufferBytes
_go_226_buffer Buffer_t 3184 , -1, 0, _go_226_bufferBytes
_go_227_buffer Buffer_t 3184 , -1, 0, _go_227_bufferBytes
_go_228_buffer Buffer_t 64 , -1, 0, _go_228_bufferBytes
_go_229_buffer Buffer_t 160 , -1, 0, _go_229_bufferBytes
_go_230_buffer Buffer_t 160 , -1, 0, _go_230_bufferBytes
_go_231_buffer Buffer_t 160 , -1, 0, _go_231_bufferBytes
_go_232_buffer Buffer_t 2896 , -1, 0, _go_232_bufferBytes
_go_233_buffer Buffer_t 1600 , -1, 0, _go_233_bufferBytes
_go_234_buffer Buffer_t 352 , -1, 0, _go_234_bufferBytes
_go_235_buffer Buffer_t 352 , -1, 0, _go_235_bufferBytes
_go_236_buffer Buffer_t 160 , -1, 0, _go_236_bufferBytes
_go_237_buffer Buffer_t 112 , -1, 0, _go_237_bufferBytes
_go_238_buffer Buffer_t 64 , -1, 0, _go_238_bufferBytes
_go_239_buffer Buffer_t 64 , -1, 0, _go_239_bufferBytes
_go_240_buffer Buffer_t 160 , -1, 0, _go_240_bufferBytes
_go_241_buffer Buffer_t 64 , -1, 0, _go_241_bufferBytes
_go_242_buffer Buffer_t 160 , -1, 0, _go_242_bufferBytes
_go_243_buffer Buffer_t 160 , -1, 0, _go_243_bufferBytes
_go_244_buffer Buffer_t 304 , -1, 0, _go_244_bufferBytes
_go_245_buffer Buffer_t 784 , -1, 0, _go_245_bufferBytes
_go_246_buffer Buffer_t 688 , -1, 0, _go_246_bufferBytes
_go_247_buffer Buffer_t 688 , -1, 0, _go_247_bufferBytes
_go_248_buffer Buffer_t 304 , -1, 0, _go_248_bufferBytes
_go_249_buffer Buffer_t 304 , -1, 0, _go_249_bufferBytes
_go_250_buffer Buffer_t 64 , -1, 0, _go_250_bufferBytes
_go_251_buffer Buffer_t 304 , -1, 0, _go_251_bufferBytes
_go_252_buffer Buffer_t 1504 , -1, 0, _go_252_bufferBytes
_go_253_buffer Buffer_t 496 , -1, 0, _go_253_bufferBytes
_go_254_buffer Buffer_t 64 , -1, 0, _go_254_bufferBytes
_go_255_buffer Buffer_t 1504 , -1, 0, _go_255_bufferBytes
_go_256_buffer Buffer_t 64 , -1, 0, _go_256_bufferBytes
_go_257_buffer Buffer_t 64 , -1, 0, _go_257_bufferBytes
_go_258_buffer Buffer_t 1504 , -1, 0, _go_258_bufferBytes
_go_259_buffer Buffer_t 64 , -1, 0, _go_259_bufferBytes
_go_260_buffer Buffer_t 112 , -1, 0, _go_260_bufferBytes
_go_261_buffer Buffer_t 112 , -1, 0, _go_261_bufferBytes
_go_262_buffer Buffer_t 64 , -1, 0, _go_262_bufferBytes
_go_263_buffer Buffer_t 64 , -1, 0, _go_263_bufferBytes
_go_264_buffer Buffer_t 736 , -1, 0, _go_264_bufferBytes
_go_265_buffer Buffer_t 688 , -1, 0, _go_265_bufferBytes
_go_266_buffer Buffer_t 688 , -1, 0, _go_266_bufferBytes
_go_267_buffer Buffer_t 688 , -1, 0, _go_267_bufferBytes
_go_268_buffer Buffer_t 688 , -1, 0, _go_268_bufferBytes
_go_269_buffer Buffer_t 688 , -1, 0, _go_269_bufferBytes
_go_270_buffer Buffer_t 688 , -1, 0, _go_270_bufferBytes
_go_271_buffer Buffer_t 112 , -1, 0, _go_271_bufferBytes
_go_272_buffer Buffer_t 304 , -1, 0, _go_272_bufferBytes
_go_273_buffer Buffer_t 352 , -1, 0, _go_273_bufferBytes
_go_274_buffer Buffer_t 160 , -1, 0, _go_274_bufferBytes
_go_275_buffer Buffer_t 304 , -1, 0, _go_275_bufferBytes
_go_276_buffer Buffer_t 2896 , -1, 0, _go_276_bufferBytes
_go_277_buffer Buffer_t 160 , -1, 0, _go_277_bufferBytes
_go_278_buffer Buffer_t 1504 , -1, 0, _go_278_bufferBytes
_go_279_buffer Buffer_t 160 , -1, 0, _go_279_bufferBytes
_go_280_buffer Buffer_t 3184 , -1, 0, _go_280_bufferBytes
_go_281_buffer Buffer_t 3184 , -1, 0, _go_281_bufferBytes
_go_282_buffer Buffer_t 304 , -1, 0, _go_282_bufferBytes
_go_283_buffer Buffer_t 688 , -1, 0, _go_283_bufferBytes
_go_284_buffer Buffer_t 304 , -1, 0, _go_284_bufferBytes
_go_285_buffer Buffer_t 304 , -1, 0, _go_285_bufferBytes
_go_286_buffer Buffer_t 304 , -1, 0, _go_286_bufferBytes
_go_287_buffer Buffer_t 304 , -1, 0, _go_287_bufferBytes
_go_288_buffer Buffer_t 304 , -1, 0, _go_288_bufferBytes
_go_289_buffer Buffer_t 304 , -1, 0, _go_289_bufferBytes
_go_290_buffer Buffer_t 64 , -1, 0, _go_290_bufferBytes
_go_291_buffer Buffer_t 304 , -1, 0, _go_291_bufferBytes
_go_292_buffer Buffer_t 64 , -1, 0, _go_292_bufferBytes
_go_293_buffer Buffer_t 64 , -1, 0, _go_293_bufferBytes
_go_294_buffer Buffer_t 304 , -1, 0, _go_294_bufferBytes
_dfa_idx_0_buffer Buffer_t 1312 , -1, 0, _dfa_idx_0_bufferBytes
_dfa_idx_1_buffer Buffer_t 1200 , -1, 0, _dfa_idx_1_bufferBytes
_dfa_idx_2_buffer Buffer_t 3152 , -1, 0, _dfa_idx_2_bufferBytes
_dfa_idx_3_buffer Buffer_t 2048 , -1, 0, _dfa_idx_3_bufferBytes
_dfa_idx_4_buffer Buffer_t 1968 , -1, 0, _dfa_idx_4_bufferBytes
_dfa_idx_5_buffer Buffer_t 1760 , -1, 0, _dfa_idx_5_bufferBytes
_dfa_idx_6_buffer Buffer_t 1744 , -1, 0, _dfa_idx_6_bufferBytes
_dfa_idx_7_buffer Buffer_t 640 , -1, 0, _dfa_idx_7_bufferBytes
_dfa_idx_8_buffer Buffer_t 1696 , -1, 0, _dfa_idx_8_bufferBytes
_dfa_idx_9_buffer Buffer_t 32 , -1, 0, _dfa_idx_9_bufferBytes
_dfa_idx_10_buffer Buffer_t 304 , -1, 0, _dfa_idx_10_bufferBytes
_dfa_idx_11_buffer Buffer_t 144 , -1, 0, _dfa_idx_11_bufferBytes
_dfa_idx_12_buffer Buffer_t 1024 , -1, 0, _dfa_idx_12_bufferBytes
_dfa_idx_13_buffer Buffer_t 304 , -1, 0, _dfa_idx_13_bufferBytes
_dfa_idx_14_buffer Buffer_t 32 , -1, 0, _dfa_idx_14_bufferBytes
_dfa_idx_15_buffer Buffer_t 1648 , -1, 0, _dfa_idx_15_bufferBytes
_dfa_idx_16_buffer Buffer_t 288 , -1, 0, _dfa_idx_16_bufferBytes
_dfa_idx_17_buffer Buffer_t 144 , -1, 0, _dfa_idx_17_bufferBytes
_dfa_idx_18_buffer Buffer_t 672 , -1, 0, _dfa_idx_18_bufferBytes
_dfa_idx_19_buffer Buffer_t 32 , -1, 0, _dfa_idx_19_bufferBytes
_dfa_idx_20_buffer Buffer_t 416 , -1, 0, _dfa_idx_20_bufferBytes
_dfa_idx_21_buffer Buffer_t 1728 , -1, 0, _dfa_idx_21_bufferBytes
_dfa_idx_22_buffer Buffer_t 672 , -1, 0, _dfa_idx_22_bufferBytes
_dfa_idx_23_buffer Buffer_t 1824 , -1, 0, _dfa_idx_23_bufferBytes
_dfa_idx_24_buffer Buffer_t 528 , -1, 0, _dfa_idx_24_bufferBytes
_dfa_idx_25_buffer Buffer_t 160 , -1, 0, _dfa_idx_25_bufferBytes
_dfa_idx_26_buffer Buffer_t 560 , -1, 0, _dfa_idx_26_bufferBytes
_dfa_idx_27_buffer Buffer_t 304 , -1, 0, _dfa_idx_27_bufferBytes
_dfa_idx_28_buffer Buffer_t 1664 , -1, 0, _dfa_idx_28_bufferBytes
_dfa_idx_29_buffer Buffer_t 880 , -1, 0, _dfa_idx_29_bufferBytes
_dfa_idx_30_buffer Buffer_t 32 , -1, 0, _dfa_idx_30_bufferBytes
_dfa_idx_31_buffer Buffer_t 256 , -1, 0, _dfa_idx_31_bufferBytes
_dfa_idx_32_buffer Buffer_t 304 , -1, 0, _dfa_idx_32_bufferBytes
_dfa_idx_33_buffer Buffer_t 176 , -1, 0, _dfa_idx_33_bufferBytes
_dfa_idx_34_buffer Buffer_t 32 , -1, 0, _dfa_idx_34_bufferBytes
_dfa_idx_35_buffer Buffer_t 64 , -1, 0, _dfa_idx_35_bufferBytes
_dfa_idx_36_buffer Buffer_t 32 , -1, 0, _dfa_idx_36_bufferBytes
_dfa_idx_37_buffer Buffer_t 176 , -1, 0, _dfa_idx_37_bufferBytes
_dfa_idx_38_buffer Buffer_t 80 , -1, 0, _dfa_idx_38_bufferBytes
_dfa_idx_39_buffer Buffer_t 208 , -1, 0, _dfa_idx_39_bufferBytes
_dfa_idx_40_buffer Buffer_t 32 , -1, 0, _dfa_idx_40_bufferBytes
_dfa_idx_41_buffer Buffer_t 592 , -1, 0, _dfa_idx_41_bufferBytes
_dfa_idx_42_buffer Buffer_t 48 , -1, 0, _dfa_idx_42_bufferBytes
_dfa_idx_43_buffer Buffer_t 144 , -1, 0, _dfa_idx_43_bufferBytes
_dfa_idx_44_buffer Buffer_t 560 , -1, 0, _dfa_idx_44_bufferBytes
_dfa_idx_45_buffer Buffer_t 304 , -1, 0, _dfa_idx_45_bufferBytes
_dfa_idx_46_buffer Buffer_t 384 , -1, 0, _dfa_idx_46_bufferBytes
_dfa_idx_47_buffer Buffer_t 384 , -1, 0, _dfa_idx_47_bufferBytes
_dfa_idx_48_buffer Buffer_t 48 , -1, 0, _dfa_idx_48_bufferBytes
_dfa_idx_49_buffer Buffer_t 176 , -1, 0, _dfa_idx_49_bufferBytes
_dfa_idx_50_buffer Buffer_t 160 , -1, 0, _dfa_idx_50_bufferBytes
_dfa_idx_51_buffer Buffer_t 304 , -1, 0, _dfa_idx_51_bufferBytes
_dfa_idx_52_buffer Buffer_t 144 , -1, 0, _dfa_idx_52_bufferBytes
_dfa_idx_53_buffer Buffer_t 304 , -1, 0, _dfa_idx_53_bufferBytes
_dfa_idx_54_buffer Buffer_t 144 , -1, 0, _dfa_idx_54_bufferBytes
_dfa_idx_55_buffer Buffer_t 544 , -1, 0, _dfa_idx_55_bufferBytes
_dfa_idx_56_buffer Buffer_t 656 , -1, 0, _dfa_idx_56_bufferBytes
_dfa_idx_57_buffer Buffer_t 144 , -1, 0, _dfa_idx_57_bufferBytes
_dfa_idx_58_buffer Buffer_t 1760 , -1, 0, _dfa_idx_58_bufferBytes
_dfa_idx_59_buffer Buffer_t 544 , -1, 0, _dfa_idx_59_bufferBytes
_dfa_idx_60_buffer Buffer_t 144 , -1, 0, _dfa_idx_60_bufferBytes
_dfa_idx_61_buffer Buffer_t 32 , -1, 0, _dfa_idx_61_bufferBytes
_dfa_idx_62_buffer Buffer_t 1840 , -1, 0, _dfa_idx_62_bufferBytes
_dfa_idx_63_buffer Buffer_t 1360 , -1, 0, _dfa_idx_63_bufferBytes
_dfa_idx_64_buffer Buffer_t 1376 , -1, 0, _dfa_idx_64_bufferBytes
_dfa_idx_65_buffer Buffer_t 64 , -1, 0, _dfa_idx_65_bufferBytes
_dfa_idx_66_buffer Buffer_t 1328 , -1, 0, _dfa_idx_66_bufferBytes
_dfa_idx_67_buffer Buffer_t 240 , -1, 0, _dfa_idx_67_bufferBytes
_dfa_idx_68_buffer Buffer_t 144 , -1, 0, _dfa_idx_68_bufferBytes
_dfa_idx_69_buffer Buffer_t 192 , -1, 0, _dfa_idx_69_bufferBytes
_dfa_idx_70_buffer Buffer_t 128 , -1, 0, _dfa_idx_70_bufferBytes
_dfa_idx_71_buffer Buffer_t 176 , -1, 0, _dfa_idx_71_bufferBytes
_dfa_idx_72_buffer Buffer_t 176 , -1, 0, _dfa_idx_72_bufferBytes
_dfa_idx_73_buffer Buffer_t 192 , -1, 0, _dfa_idx_73_bufferBytes
_dfa_idx_74_buffer Buffer_t 192 , -1, 0, _dfa_idx_74_bufferBytes
_dfa_idx_75_buffer Buffer_t 48 , -1, 0, _dfa_idx_75_bufferBytes
_dfa_idx_76_buffer Buffer_t 80 , -1, 0, _dfa_idx_76_bufferBytes
_dfa_idx_77_buffer Buffer_t 64 , -1, 0, _dfa_idx_77_bufferBytes
_dfa_idx_78_buffer Buffer_t 144 , -1, 0, _dfa_idx_78_bufferBytes
_dfa_idx_79_buffer Buffer_t 304 , -1, 0, _dfa_idx_79_bufferBytes
_dfa_idx_80_buffer Buffer_t 1344 , -1, 0, _dfa_idx_80_bufferBytes
_dfa_idx_81_buffer Buffer_t 1408 , -1, 0, _dfa_idx_81_bufferBytes
_dfa_idx_82_buffer Buffer_t 1392 , -1, 0, _dfa_idx_82_bufferBytes
_dfa_idx_83_buffer Buffer_t 1280 , -1, 0, _dfa_idx_83_bufferBytes
_dfa_idx_84_buffer Buffer_t 48 , -1, 0, _dfa_idx_84_bufferBytes
_dfa_idx_85_buffer Buffer_t 64 , -1, 0, _dfa_idx_85_bufferBytes
_dfa_idx_86_buffer Buffer_t 160 , -1, 0, _dfa_idx_86_bufferBytes
_dfa_idx_87_buffer Buffer_t 336 , -1, 0, _dfa_idx_87_bufferBytes
_dfa_idx_88_buffer Buffer_t 288 , -1, 0, _dfa_idx_88_bufferBytes
_dfa_idx_89_buffer Buffer_t 160 , -1, 0, _dfa_idx_89_bufferBytes
_dfa_idx_90_buffer Buffer_t 1472 , -1, 0, _dfa_idx_90_bufferBytes
_dfa_idx_91_buffer Buffer_t 112 , -1, 0, _dfa_idx_91_bufferBytes
_dfa_idx_92_buffer Buffer_t 96 , -1, 0, _dfa_idx_92_bufferBytes
_dfa_idx_93_buffer Buffer_t 112 , -1, 0, _dfa_idx_93_bufferBytes
_dfa_idx_94_buffer Buffer_t 176 , -1, 0, _dfa_idx_94_bufferBytes
_dfa_idx_95_buffer Buffer_t 128 , -1, 0, _dfa_idx_95_bufferBytes
_dfa_idx_96_buffer Buffer_t 368 , -1, 0, _dfa_idx_96_bufferBytes
_dfa_idx_97_buffer Buffer_t 1296 , -1, 0, _dfa_idx_97_bufferBytes
_dfa_accept_0_buffer Buffer_t 1312 , -1, 0, _dfa_accept_0_bufferBytes
_dfa_accept_1_buffer Buffer_t 1200 , -1, 0, _dfa_accept_1_bufferBytes
_dfa_accept_2_buffer Buffer_t 3152 , -1, 0, _dfa_accept_2_bufferBytes
_dfa_accept_3_buffer Buffer_t 2048 , -1, 0, _dfa_accept_3_bufferBytes
_dfa_accept_4_buffer Buffer_t 1968 , -1, 0, _dfa_accept_4_bufferBytes
_dfa_accept_5_buffer Buffer_t 1760 , -1, 0, _dfa_accept_5_bufferBytes
_dfa_accept_6_buffer Buffer_t 1744 , -1, 0, _dfa_accept_6_bufferBytes
_dfa_accept_7_buffer Buffer_t 640 , -1, 0, _dfa_accept_7_bufferBytes
_dfa_accept_8_buffer Buffer_t 1696 , -1, 0, _dfa_accept_8_bufferBytes
_dfa_accept_9_buffer Buffer_t 32 , -1, 0, _dfa_accept_9_bufferBytes
_dfa_accept_10_buffer Buffer_t 304 , -1, 0, _dfa_accept_10_bufferBytes
_dfa_accept_11_buffer Buffer_t 144 , -1, 0, _dfa_accept_11_bufferBytes
_dfa_accept_12_buffer Buffer_t 1024 , -1, 0, _dfa_accept_12_bufferBytes
_dfa_accept_13_buffer Buffer_t 304 , -1, 0, _dfa_accept_13_bufferBytes
_dfa_accept_14_buffer Buffer_t 32 , -1, 0, _dfa_accept_14_bufferBytes
_dfa_accept_15_buffer Buffer_t 1648 , -1, 0, _dfa_accept_15_bufferBytes
_dfa_accept_16_buffer Buffer_t 288 , -1, 0, _dfa_accept_16_bufferBytes
_dfa_accept_17_buffer Buffer_t 144 , -1, 0, _dfa_accept_17_bufferBytes
_dfa_accept_18_buffer Buffer_t 672 , -1, 0, _dfa_accept_18_bufferBytes
_dfa_accept_19_buffer Buffer_t 32 , -1, 0, _dfa_accept_19_bufferBytes
_dfa_accept_20_buffer Buffer_t 416 , -1, 0, _dfa_accept_20_bufferBytes
_dfa_accept_21_buffer Buffer_t 1728 , -1, 0, _dfa_accept_21_bufferBytes
_dfa_accept_22_buffer Buffer_t 672 , -1, 0, _dfa_accept_22_bufferBytes
_dfa_accept_23_buffer Buffer_t 1824 , -1, 0, _dfa_accept_23_bufferBytes
_dfa_accept_24_buffer Buffer_t 528 , -1, 0, _dfa_accept_24_bufferBytes
_dfa_accept_25_buffer Buffer_t 160 , -1, 0, _dfa_accept_25_bufferBytes
_dfa_accept_26_buffer Buffer_t 560 , -1, 0, _dfa_accept_26_bufferBytes
_dfa_accept_27_buffer Buffer_t 304 , -1, 0, _dfa_accept_27_bufferBytes
_dfa_accept_28_buffer Buffer_t 1664 , -1, 0, _dfa_accept_28_bufferBytes
_dfa_accept_29_buffer Buffer_t 880 , -1, 0, _dfa_accept_29_bufferBytes
_dfa_accept_30_buffer Buffer_t 32 , -1, 0, _dfa_accept_30_bufferBytes
_dfa_accept_31_buffer Buffer_t 256 , -1, 0, _dfa_accept_31_bufferBytes
_dfa_accept_32_buffer Buffer_t 304 , -1, 0, _dfa_accept_32_bufferBytes
_dfa_accept_33_buffer Buffer_t 176 , -1, 0, _dfa_accept_33_bufferBytes
_dfa_accept_34_buffer Buffer_t 32 , -1, 0, _dfa_accept_34_bufferBytes
_dfa_accept_35_buffer Buffer_t 64 , -1, 0, _dfa_accept_35_bufferBytes
_dfa_accept_36_buffer Buffer_t 32 , -1, 0, _dfa_accept_36_bufferBytes
_dfa_accept_37_buffer Buffer_t 176 , -1, 0, _dfa_accept_37_bufferBytes
_dfa_accept_38_buffer Buffer_t 80 , -1, 0, _dfa_accept_38_bufferBytes
_dfa_accept_39_buffer Buffer_t 208 , -1, 0, _dfa_accept_39_bufferBytes
_dfa_accept_40_buffer Buffer_t 32 , -1, 0, _dfa_accept_40_bufferBytes
_dfa_accept_41_buffer Buffer_t 592 , -1, 0, _dfa_accept_41_bufferBytes
_dfa_accept_42_buffer Buffer_t 48 , -1, 0, _dfa_accept_42_bufferBytes
_dfa_accept_43_buffer Buffer_t 144 , -1, 0, _dfa_accept_43_bufferBytes
_dfa_accept_44_buffer Buffer_t 560 , -1, 0, _dfa_accept_44_bufferBytes
_dfa_accept_45_buffer Buffer_t 304 , -1, 0, _dfa_accept_45_bufferBytes
_dfa_accept_46_buffer Buffer_t 384 , -1, 0, _dfa_accept_46_bufferBytes
_dfa_accept_47_buffer Buffer_t 384 , -1, 0, _dfa_accept_47_bufferBytes
_dfa_accept_48_buffer Buffer_t 48 , -1, 0, _dfa_accept_48_bufferBytes
_dfa_accept_49_buffer Buffer_t 176 , -1, 0, _dfa_accept_49_bufferBytes
_dfa_accept_50_buffer Buffer_t 160 , -1, 0, _dfa_accept_50_bufferBytes
_dfa_accept_51_buffer Buffer_t 304 , -1, 0, _dfa_accept_51_bufferBytes
_dfa_accept_52_buffer Buffer_t 144 , -1, 0, _dfa_accept_52_bufferBytes
_dfa_accept_53_buffer Buffer_t 304 , -1, 0, _dfa_accept_53_bufferBytes
_dfa_accept_54_buffer Buffer_t 144 , -1, 0, _dfa_accept_54_bufferBytes
_dfa_accept_55_buffer Buffer_t 544 , -1, 0, _dfa_accept_55_bufferBytes
_dfa_accept_56_buffer Buffer_t 656 , -1, 0, _dfa_accept_56_bufferBytes
_dfa_accept_57_buffer Buffer_t 144 , -1, 0, _dfa_accept_57_bufferBytes
_dfa_accept_58_buffer Buffer_t 1760 , -1, 0, _dfa_accept_58_bufferBytes
_dfa_accept_59_buffer Buffer_t 544 , -1, 0, _dfa_accept_59_bufferBytes
_dfa_accept_60_buffer Buffer_t 144 , -1, 0, _dfa_accept_60_bufferBytes
_dfa_accept_61_buffer Buffer_t 32 , -1, 0, _dfa_accept_61_bufferBytes
_dfa_accept_62_buffer Buffer_t 1840 , -1, 0, _dfa_accept_62_bufferBytes
_dfa_accept_63_buffer Buffer_t 1360 , -1, 0, _dfa_accept_63_bufferBytes
_dfa_accept_64_buffer Buffer_t 1376 , -1, 0, _dfa_accept_64_bufferBytes
_dfa_accept_65_buffer Buffer_t 64 , -1, 0, _dfa_accept_65_bufferBytes
_dfa_accept_66_buffer Buffer_t 1328 , -1, 0, _dfa_accept_66_bufferBytes
_dfa_accept_67_buffer Buffer_t 240 , -1, 0, _dfa_accept_67_bufferBytes
_dfa_accept_68_buffer Buffer_t 144 , -1, 0, _dfa_accept_68_bufferBytes
_dfa_accept_69_buffer Buffer_t 192 , -1, 0, _dfa_accept_69_bufferBytes
_dfa_accept_70_buffer Buffer_t 128 , -1, 0, _dfa_accept_70_bufferBytes
_dfa_accept_71_buffer Buffer_t 176 , -1, 0, _dfa_accept_71_bufferBytes
_dfa_accept_72_buffer Buffer_t 176 , -1, 0, _dfa_accept_72_bufferBytes
_dfa_accept_73_buffer Buffer_t 192 , -1, 0, _dfa_accept_73_bufferBytes
_dfa_accept_74_buffer Buffer_t 192 , -1, 0, _dfa_accept_74_bufferBytes
_dfa_accept_75_buffer Buffer_t 48 , -1, 0, _dfa_accept_75_bufferBytes
_dfa_accept_76_buffer Buffer_t 80 , -1, 0, _dfa_accept_76_bufferBytes
_dfa_accept_77_buffer Buffer_t 64 , -1, 0, _dfa_accept_77_bufferBytes
_dfa_accept_78_buffer Buffer_t 144 , -1, 0, _dfa_accept_78_bufferBytes
_dfa_accept_79_buffer Buffer_t 304 , -1, 0, _dfa_accept_79_bufferBytes
_dfa_accept_80_buffer Buffer_t 1344 , -1, 0, _dfa_accept_80_bufferBytes
_dfa_accept_81_buffer Buffer_t 1408 , -1, 0, _dfa_accept_81_bufferBytes
_dfa_accept_82_buffer Buffer_t 1392 , -1, 0, _dfa_accept_82_bufferBytes
_dfa_accept_83_buffer Buffer_t 1280 , -1, 0, _dfa_accept_83_bufferBytes
_dfa_accept_84_buffer Buffer_t 48 , -1, 0, _dfa_accept_84_bufferBytes
_dfa_accept_85_buffer Buffer_t 64 , -1, 0, _dfa_accept_85_bufferBytes
_dfa_accept_86_buffer Buffer_t 160 , -1, 0, _dfa_accept_86_bufferBytes
_dfa_accept_87_buffer Buffer_t 336 , -1, 0, _dfa_accept_87_bufferBytes
_dfa_accept_88_buffer Buffer_t 288 , -1, 0, _dfa_accept_88_bufferBytes
_dfa_accept_89_buffer Buffer_t 160 , -1, 0, _dfa_accept_89_bufferBytes
_dfa_accept_90_buffer Buffer_t 1472 , -1, 0, _dfa_accept_90_bufferBytes
_dfa_accept_91_buffer Buffer_t 112 , -1, 0, _dfa_accept_91_bufferBytes
_dfa_accept_92_buffer Buffer_t 96 , -1, 0, _dfa_accept_92_bufferBytes
_dfa_accept_93_buffer Buffer_t 112 , -1, 0, _dfa_accept_93_bufferBytes
_dfa_accept_94_buffer Buffer_t 176 , -1, 0, _dfa_accept_94_bufferBytes
_dfa_accept_95_buffer Buffer_t 128 , -1, 0, _dfa_accept_95_bufferBytes
_dfa_accept_96_buffer Buffer_t 368 , -1, 0, _dfa_accept_96_bufferBytes
_dfa_accept_97_buffer Buffer_t 1296 , -1, 0, _dfa_accept_97_bufferBytes
AST_DataTypeNames_0_buffer Buffer_t 2 , -1, 0, AST_DataTypeNames_0_bufferBytes
AST_DataTypeNames_1_buffer Buffer_t 8 , -1, 0, AST_DataTypeNames_1_bufferBytes
AST_DataTypeNames_2_buffer Buffer_t 6 , -1, 0, AST_DataTypeNames_2_bufferBytes
AST_DataTypeNames_3_buffer Buffer_t 6 , -1, 0, AST_DataTypeNames_3_bufferBytes
AST_DataTypeNames_4_buffer Buffer_t 7 , -1, 0, AST_DataTypeNames_4_bufferBytes
AST_DataTypeNames_5_buffer Buffer_t 8 , -1, 0, AST_DataTypeNames_5_bufferBytes
AST_DataTypeNames_6_buffer Buffer_t 7 , -1, 0, AST_DataTypeNames_6_bufferBytes
AST_DataTypeNames_7_buffer Buffer_t 5 , -1, 0, AST_DataTypeNames_7_bufferBytes
AST_DataTypeNames_8_buffer Buffer_t 10 , -1, 0, AST_DataTypeNames_8_bufferBytes
AST_DataTypeNames_9_buffer Buffer_t 6 , -1, 0, AST_DataTypeNames_9_bufferBytes
AST_DataTypeNames_10_buffer Buffer_t 4 , -1, 0, AST_DataTypeNames_10_bufferBytes
AST_DataTypeForMIR_0_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_0_bufferBytes
AST_DataTypeForMIR_1_buffer Buffer_t 6 , -1, 0, AST_DataTypeForMIR_1_bufferBytes
AST_DataTypeForMIR_2_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_2_bufferBytes
AST_DataTypeForMIR_3_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_3_bufferBytes
AST_DataTypeForMIR_4_buffer Buffer_t 7 , -1, 0, AST_DataTypeForMIR_4_bufferBytes
AST_DataTypeForMIR_5_buffer Buffer_t 7 , -1, 0, AST_DataTypeForMIR_5_bufferBytes
AST_DataTypeForMIR_6_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_6_bufferBytes
AST_DataTypeForMIR_7_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_7_bufferBytes
AST_DataTypeForMIR_8_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_8_bufferBytes
AST_DataTypeForMIR_9_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_9_bufferBytes
AST_DataTypeForMIR_10_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_10_bufferBytes
; iter 4
_act_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_1_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_3_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_4_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_5_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_6_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_7_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_8_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_9_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_10_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_11_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 2, 3
_act_12_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 0, 3, 0
_act_13_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 1, 10
_act_14_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_15_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_16_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_17_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 69, 1, 137
_act_18_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_19_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 1, 11
_act_20_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 69, 2, 57
_act_21_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_21_0 Variant_t VARIANT_INTEGER, 0, 0
_act_22_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 9, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_25_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_26_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_27_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_28_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_29_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_30_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 69, 1, 138
_act_31_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_32_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 2, 3
_act_33_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_33_0 Variant_t VARIANT_INTEGER, 0, 0
_act_34_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_35_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 38, 2, 88, 39, 2, 89
_act_36_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_37_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_38_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_39_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 39, 1, 103, 38, 1, 103
_act_40_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_41_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_42_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 51, 2, 3, 48, 2, 5, 47, 2, 6
_act_43_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
db 14, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_44_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 50, 2, 4, 25, 2, 107, 5, 2, 108, 6, 2, 109
_act_45_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_46_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_47_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_48_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 60, 2, 26
_act_49_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_50_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_51_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_52_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_53_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_54_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_55_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_56_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_57_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_58_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_59_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_60_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_61_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_62_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_63_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_64_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_65_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_66_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 49 ; itemsCnt
dw 16, 50, 2, 4, 49, 2, 133, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 33, 2, 134, 32, 2, 136, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_67_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_68_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_69_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_70_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_71_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_72_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_73_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_74_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_75_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_76_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_77_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_78_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_79_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_80_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_81_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_82_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_83_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_84_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_85_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_86_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 60, 2, 26
_act_87_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 51, 2, 3, 19, 2, 155
_act_88_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_89_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_90_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 60, 2, 26, 1, 2, 40, 2, 2, 45
_act_91_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 60, 2, 26, 1, 2, 40, 2, 2, 45
_act_92_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_92_0 Variant_t VARIANT_INTEGER, 0, 0
_act_93_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_93_0 Variant_t VARIANT_INTEGER, 0, 0
_act_94_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_94_0 Variant_t VARIANT_INTEGER, 0, 0
_act_95_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 9, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_96_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_96_0 Variant_t VARIANT_INTEGER, 0, 0
_act_97_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
db 15, 43, 1, 85, 42, 1, 85, 16, 1, 85, 41, 1, 85, 63, 1, 85, 40, 1, 85, 55, 1, 85, 68, 1, 85, 67, 1, 85, 66, 1, 85, 65, 1, 85, 44, 1, 85, 62, 1, 85, 54, 1, 85, 56, 1, 85
_act_98_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 57, 2, 162
_act_99_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 51, 2, 3, 58, 2, 164
_act_100_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 53, 2, 166
_act_101_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 51, 2, 3, 48, 2, 5, 47, 2, 6
_act_102_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 51, 2, 3, 58, 2, 164
_act_103_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_104_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 61, 2, 169
_act_105_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
db 14, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_106_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 10, 2, 171
_act_107_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_108_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_109_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_110_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_111_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_112_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_113_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
db 7, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_114_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 21, 2, 176
_act_115_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
db 14, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_116_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 10, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 59, 2, 179, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_117_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 59, 2, 179
_act_118_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 38, 2, 88, 39, 2, 89, 59, 2, 179
_act_119_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 1, 114
_act_120_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 38, 2, 88, 39, 2, 89, 51, 1, 115
_act_121_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 2, 3
_act_122_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_123_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 2, 3
_act_124_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 60, 2, 26
_act_125_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 58, 2, 164
_act_126_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_127_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 2, 3
_act_128_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 58, 2, 164
_act_129_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 58, 2, 164
_act_130_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 69, 2, 57
_act_131_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_132_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 10, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 56, 2, 63, 55, 2, 64, 53, 2, 166, 54, 2, 38
_act_133_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_134_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_135_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 10, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 61, 2, 169, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_136_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_137_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 61, 2, 169
_act_138_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 61, 2, 169
_act_139_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 61, 2, 169
_act_140_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
db 7, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_141_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_142_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 60, 2, 26
_act_143_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 9, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_144_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_145_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_146_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
db 7, 66, 2, 60, 65, 2, 61, 44, 2, 62, 62, 2, 16, 56, 2, 63, 55, 2, 64, 54, 2, 38
_act_147_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_148_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 16, 2, 79
_act_149_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 16, 2, 79
_act_150_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 16, 2, 79
_act_151_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 16, 2, 79
_act_152_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 16, 2, 79
_act_153_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
db 14, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_154_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 51, 2, 3, 19, 2, 155
_act_155_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_156_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 20, 2, 192
_act_157_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_158_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_158_0 Variant_t VARIANT_INTEGER, 0, 0
_act_159_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_160_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_act_160_0 Variant_t VARIANT_INTEGER, 0, 0
_act_161_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 50, 2, 4, 49, 2, 133, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_162_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_163_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_164_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_165_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 51, 2, 3, 48, 2, 5, 47, 2, 6
_act_166_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_167_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 51, 2, 3, 58, 2, 164
_act_168_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
db 14, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_169_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_170_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 51, 2, 3, 58, 2, 164
_act_171_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_172_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_173_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 25, 2, 107, 10, 2, 171
_act_174_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 10, 2, 171
_act_175_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 25, 2, 107, 10, 2, 171
_act_176_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_177_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_178_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 59, 2, 179
_act_179_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_180_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_181_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 38, 2, 88, 39, 2, 89, 59, 2, 179
_act_182_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 59, 2, 179
_act_183_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_184_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 51, 2, 3, 50, 2, 4, 59, 2, 179
_act_185_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_186_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_187_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
db 5, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 62, 2, 16
_act_188_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 69, 2, 57
_act_189_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 69, 2, 57
_act_190_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
db 14, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_191_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 59, 2, 179
_act_192_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_193_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 2, 3
_act_194_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_195_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 57, 2, 162
_act_196_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 48, 2, 5, 47, 2, 6
_act_197_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_198_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_199_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 7, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 9, 2, 222, 16, 2, 79
_act_200_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_201_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_202_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_203_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_204_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_205_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 13, 2, 229, 12, 2, 230, 14, 2, 231
_act_206_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 51, 2, 3, 60, 2, 26, 1, 2, 40, 2, 2, 45
_act_207_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 51, 2, 3, 60, 2, 26, 1, 2, 40, 2, 2, 45
_act_208_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 28, 2, 236
_act_209_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 59, 2, 179, 58, 2, 164
_act_210_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 51, 2, 3, 50, 2, 4
_act_211_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 30, 2, 240
_act_212_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_213_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 3, 2, 242
_act_214_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 9, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_215_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_216_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_217_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 59, 2, 179
_act_218_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_219_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_220_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 57, 2, 162
_act_221_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_222_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_223_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_224_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 88 ; itemsCnt
db 29, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 16, 2, 79, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_225_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 10, 2, 171
_act_226_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 88 ; itemsCnt
db 29, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 16, 2, 79, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_227_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 88 ; itemsCnt
db 29, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 16, 2, 79, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_228_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 10, 2, 171
_act_229_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_230_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_231_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_232_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_233_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_234_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 60, 2, 26, 1, 2, 40, 2, 2, 45
_act_235_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 60, 2, 26, 1, 2, 40, 2, 2, 45
_act_236_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_237_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 51, 2, 3
_act_238_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 30, 2, 240
_act_239_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 58, 2, 164
_act_240_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_241_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_242_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_243_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 51, 2, 3, 61, 2, 169, 58, 2, 164
_act_244_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 55, 2, 64
_act_245_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 9, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_246_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_247_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_248_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_249_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_250_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 18, 2, 274
_act_251_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_252_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_253_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
dw 8, 51, 2, 3, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 7, 2, 277, 16, 2, 79
_act_254_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 8, 2, 279
_act_255_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_256_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 8, 2, 279
_act_257_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 8, 2, 279
_act_258_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_259_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 13, 2, 229
_act_260_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 38, 2, 88, 39, 2, 89
_act_261_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 38, 2, 88, 39, 2, 89
_act_262_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_263_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 50, 2, 4
_act_264_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 9, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_265_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_266_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_267_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_268_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_269_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_270_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_271_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 51, 2, 3, 58, 2, 164
_act_272_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 66, 2, 60, 65, 2, 61, 44, 2, 62, 55, 2, 64
_act_273_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 7, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 59, 2, 179, 55, 2, 64
_act_274_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_275_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_276_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 70 ; itemsCnt
db 23, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_277_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_278_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 13, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 37, 2, 14, 62, 2, 16, 60, 2, 26, 17, 2, 28, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_279_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 52, 3, 181
_act_280_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 88 ; itemsCnt
db 29, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 16, 2, 79, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_281_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 88 ; itemsCnt
db 29, 51, 2, 3, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 37, 2, 14, 31, 2, 15, 62, 2, 16, 35, 2, 18, 36, 2, 22, 34, 2, 24, 60, 2, 26, 22, 2, 27, 17, 2, 28, 29, 2, 31, 11, 2, 34, 15, 2, 36, 16, 2, 79, 4, 2, 37, 54, 2, 38, 1, 2, 40, 2, 2, 45
_act_282_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 55, 2, 64
_act_283_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
db 8, 50, 2, 4, 48, 2, 5, 47, 2, 6, 46, 2, 7, 45, 2, 8, 67, 2, 9, 62, 2, 16, 60, 2, 26
_act_284_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 66, 2, 60, 65, 2, 61, 44, 2, 62, 55, 2, 64
_act_285_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 55, 2, 64
_act_286_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 55, 2, 64
_act_287_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 55, 2, 64
_act_288_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 55, 2, 64
_act_289_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 4, 66, 2, 60, 65, 2, 61, 44, 2, 62, 55, 2, 64
_act_290_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 8, 2, 279
_act_291_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 43, 2, 74, 42, 2, 75, 63, 2, 76, 40, 2, 77, 41, 2, 78, 16, 2, 79
_act_292_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 8, 2, 279
_act_293_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 8, 2, 279
_act_294_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 68, 2, 59, 67, 2, 9, 66, 2, 60, 65, 2, 61, 44, 2, 62, 55, 2, 64
_go_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 2, 1, 136, 3, 183, 135, 2, 2
_go_1_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 184 ; itemsCnt
dw 61, 200, 2, 10, 201, 3, 2, 199, 3, 5, 203, 3, 249, 198, 2, 11, 202, 2, 12, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 136, 3, 182
_go_3_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 186, 136, 3, 183, 135, 2, 2
_go_4_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 211, 136, 3, 183, 135, 2, 2
_go_5_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 205, 136, 3, 183, 135, 2, 2
_go_6_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 206, 136, 3, 183, 135, 2, 2
_go_7_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 209, 136, 3, 183, 135, 2, 2
_go_8_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 210, 136, 3, 183, 135, 2, 2
_go_9_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 219, 136, 3, 183, 135, 2, 2
_go_10_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 172 ; itemsCnt
dw 57, 201, 3, 1, 198, 2, 11, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_11_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 133, 3, 6
_go_12_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_12_0 Variant_t VARIANT_INTEGER, 0, 0
_go_13_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_13_0 Variant_t VARIANT_INTEGER, 0, 0
_go_14_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 192, 136, 3, 183, 135, 2, 2
_go_15_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 248, 136, 3, 183, 135, 2, 2
_go_16_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 207, 136, 3, 183, 135, 2, 2
_go_17_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_17_0 Variant_t VARIANT_INTEGER, 0, 0
_go_18_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 243, 136, 3, 183, 135, 2, 2
_go_19_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_19_0 Variant_t VARIANT_INTEGER, 0, 0
_go_20_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 73, 2, 58
_go_21_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_21_0 Variant_t VARIANT_INTEGER, 0, 0
_go_22_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 242, 136, 3, 183, 135, 2, 2
_go_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 9, 118, 2, 65, 112, 2, 66, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 244, 136, 3, 183, 135, 2, 2
_go_25_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_26_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 212, 136, 3, 183, 135, 2, 2
_go_27_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 238, 136, 3, 183, 135, 2, 2
_go_28_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 214, 136, 3, 183, 135, 2, 2
_go_29_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 108, 2, 86
_go_30_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_30_0 Variant_t VARIANT_INTEGER, 0, 0
_go_31_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 240, 136, 3, 183, 135, 2, 2
_go_32_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 133, 2, 87
_go_33_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_33_0 Variant_t VARIANT_INTEGER, 0, 0
_go_34_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 187, 136, 3, 183, 135, 2, 2
_go_35_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 96, 2, 90, 95, 2, 91
_go_36_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 230, 136, 3, 183, 135, 2, 2
_go_37_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 226, 136, 3, 183, 135, 2, 2
_go_38_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 201, 136, 3, 183, 135, 2, 2
_go_39_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_39_0 Variant_t VARIANT_INTEGER, 0, 0
_go_40_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 200, 136, 3, 183, 135, 2, 2
_go_41_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 97, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_42_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
dw 8, 169, 3, 58, 170, 2, 98, 171, 2, 99, 141, 2, 100, 114, 3, 176, 113, 3, 180, 137, 3, 177, 133, 2, 101
_go_43_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
dw 34, 195, 2, 92, 179, 2, 93, 174, 2, 102, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 103, 173, 2, 104, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 133, 2, 105, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_44_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 5, 179, 2, 106, 131, 2, 110, 130, 2, 111, 108, 3, 156, 94, 2, 112
_go_45_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 199, 136, 3, 183, 135, 2, 2
_go_46_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 113, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_47_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 108, 2, 114
_go_48_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 107, 2, 115
_go_49_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 116, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 117, 143, 3, 146, 155, 2, 118, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_50_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 100 ; itemsCnt
dw 33, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 119, 143, 3, 146, 155, 2, 120, 150, 2, 121, 142, 3, 147, 149, 3, 117, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 122, 105, 3, 79
_go_51_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 176, 2, 123, 108, 2, 124
_go_52_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 97 ; itemsCnt
dw 32, 195, 2, 92, 179, 2, 93, 183, 2, 125, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 126, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_53_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 97 ; itemsCnt
dw 32, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 119, 143, 3, 146, 155, 2, 120, 150, 2, 127, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 122, 105, 3, 79
_go_54_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 97 ; itemsCnt
dw 32, 195, 2, 92, 179, 2, 93, 183, 2, 128, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 126, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_55_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 97 ; itemsCnt
dw 32, 195, 2, 92, 179, 2, 93, 183, 2, 129, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 126, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_56_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 179, 2, 130, 108, 3, 156
_go_57_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 246, 136, 3, 183, 135, 2, 2
_go_58_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 131, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_59_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 218, 136, 3, 183, 135, 2, 2
_go_60_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 220, 136, 3, 183, 135, 2, 2
_go_61_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 221, 136, 3, 183, 135, 2, 2
_go_62_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 222, 136, 3, 183, 135, 2, 2
_go_63_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 215, 136, 3, 183, 135, 2, 2
_go_64_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 217, 136, 3, 183, 135, 2, 2
_go_65_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 132, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_66_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 106 ; itemsCnt
dw 35, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 135, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 145, 2, 137, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79, 103, 3, 155, 74, 2, 138, 72, 2, 139
_go_67_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 140, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_68_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 141, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_69_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 144, 3, 136, 108, 2, 142
_go_70_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 143, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_71_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 144, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_72_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 145, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_73_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 146, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_74_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 193, 136, 3, 183, 135, 2, 2
_go_75_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 194, 136, 3, 183, 135, 2, 2
_go_76_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 197, 136, 3, 183, 135, 2, 2
_go_77_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 198, 136, 3, 183, 135, 2, 2
_go_78_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 196, 136, 3, 183, 135, 2, 2
_go_79_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 195, 136, 3, 183, 135, 2, 2
_go_80_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 147, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_81_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 148, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_82_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 149, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_83_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 150, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_84_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 151, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_85_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 152, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_86_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 107, 2, 153
_go_87_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 161, 2, 154, 162, 3, 73, 163, 3, 70, 160, 2, 156, 133, 3, 71, 84, 2, 157
_go_88_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 224, 136, 3, 183, 135, 2, 2
_go_89_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 223, 136, 3, 183, 135, 2, 2
_go_90_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 5, 155, 2, 158, 154, 3, 103, 120, 3, 178, 119, 3, 179, 107, 2, 159
_go_91_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 5, 155, 2, 160, 154, 3, 103, 120, 3, 178, 119, 3, 179, 107, 2, 159
_go_92_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_92_0 Variant_t VARIANT_INTEGER, 0, 0
_go_93_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_93_0 Variant_t VARIANT_INTEGER, 0, 0
_go_94_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_94_0 Variant_t VARIANT_INTEGER, 0, 0
_go_95_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_96_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_96_0 Variant_t VARIANT_INTEGER, 0, 0
_go_97_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_97_0 Variant_t VARIANT_INTEGER, 0, 0
_go_98_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 115, 2, 163
_go_99_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 116, 2, 165, 133, 3, 54
_go_100_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 117, 3, 150
_go_101_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 7, 169, 3, 58, 170, 2, 98, 171, 2, 167, 114, 3, 176, 113, 3, 180, 137, 3, 177, 133, 2, 101
_go_102_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 116, 2, 168, 133, 3, 49
_go_103_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_104_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 111, 3, 149
_go_105_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 100 ; itemsCnt
dw 33, 195, 2, 92, 179, 2, 93, 174, 2, 170, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 103, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 133, 2, 105, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_106_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 129, 2, 172
_go_107_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 189, 136, 3, 183, 135, 2, 2
_go_108_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 188, 136, 3, 183, 135, 2, 2
_go_109_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 225, 136, 3, 183, 135, 2, 2
_go_110_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 179, 2, 173, 108, 3, 156
_go_111_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 179, 2, 174, 108, 3, 156
_go_112_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 179, 2, 175, 108, 3, 156
_go_113_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_114_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 80, 2, 177
_go_115_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
dw 34, 195, 2, 92, 179, 2, 93, 174, 2, 102, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 103, 173, 2, 178, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 133, 2, 105, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_116_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 10, 118, 2, 65, 112, 2, 161, 100, 2, 67, 106, 3, 94, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_117_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 106, 3, 104
_go_118_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 3, 106, 3, 105, 96, 2, 90, 95, 2, 91
_go_119_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
_go_119_0 Variant_t VARIANT_INTEGER, 0, 0
_go_120_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 96, 2, 90, 95, 2, 91
_go_121_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 133, 2, 180
_go_122_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 97 ; itemsCnt
dw 32, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 116, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 117, 143, 3, 146, 155, 2, 181, 142, 3, 147, 154, 2, 39, 153, 2, 182, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_123_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 133, 2, 183
_go_124_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 107, 2, 184
_go_125_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 116, 2, 185
_go_126_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_127_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 133, 2, 186
_go_128_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 116, 2, 185
_go_129_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 116, 2, 185
_go_130_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 73, 2, 187
_go_131_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_132_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 10, 117, 3, 135, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_133_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 216, 136, 3, 183, 135, 2, 2
_go_134_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 245, 136, 3, 183, 135, 2, 2
_go_135_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 10, 118, 2, 65, 112, 2, 161, 111, 3, 133, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_136_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 247, 136, 3, 183, 135, 2, 2
_go_137_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 111, 3, 134
_go_138_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 111, 2, 188
_go_139_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 111, 2, 189
_go_140_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_141_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_142_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 107, 2, 190
_go_143_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_144_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_145_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_146_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 9, 118, 2, 65, 112, 2, 161, 100, 2, 67, 99, 2, 68, 104, 2, 69, 102, 2, 70, 98, 2, 71, 97, 2, 72, 101, 2, 73
_go_147_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_148_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_149_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_150_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_151_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_152_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_153_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
dw 34, 195, 2, 92, 179, 2, 93, 174, 2, 102, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 103, 173, 2, 191, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 133, 2, 105, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_154_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 4, 162, 3, 72, 163, 3, 70, 133, 3, 71, 84, 2, 157
_go_155_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 235, 136, 3, 183, 135, 2, 2
_go_156_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 85, 3, 69
_go_157_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 176, 2, 193, 108, 2, 124
_go_158_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 96, 2, 90, 95, 2, 91
_go_159_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 117, 143, 3, 146, 155, 2, 118, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_160_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 2, 96, 2, 90, 95, 2, 91
_go_161_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 100 ; itemsCnt
dw 33, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 135, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 145, 2, 137, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79, 103, 3, 155
_go_162_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 204, 136, 3, 183, 135, 2, 2
_go_163_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 194, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_164_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 203, 136, 3, 183, 135, 2, 2
_go_165_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 169, 3, 58, 170, 2, 195, 114, 3, 176, 113, 3, 180, 137, 3, 177, 133, 2, 196
_go_166_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 202, 136, 3, 183, 135, 2, 2
_go_167_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 116, 2, 165, 133, 3, 54
_go_168_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 97 ; itemsCnt
dw 32, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 197, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 133, 2, 198, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_169_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 208, 136, 3, 183, 135, 2, 2
_go_170_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 116, 2, 168, 133, 3, 49
_go_171_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 190, 136, 3, 183, 135, 2, 2
_go_172_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 199, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_173_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 129, 2, 200, 130, 2, 201
_go_174_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 129, 2, 202
_go_175_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 129, 2, 203, 130, 2, 204
_go_176_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 239, 136, 3, 183, 135, 2, 2
_go_177_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 108, 3, 68
_go_178_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 106, 3, 34
_go_179_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 213, 136, 3, 183, 135, 2, 2
_go_180_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 181 ; itemsCnt
dw 60, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 205, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_181_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 106, 3, 105, 96, 2, 206, 95, 2, 207
_go_182_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 106, 3, 116
_go_183_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 181 ; itemsCnt
dw 60, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 208, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_184_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 4, 175, 2, 209, 133, 2, 210, 108, 3, 42, 106, 2, 211
_go_185_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 212, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_186_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 181 ; itemsCnt
dw 60, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 213, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_187_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 37 ; itemsCnt
dw 12, 177, 3, 29, 178, 3, 28, 169, 3, 173, 140, 3, 153, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 172, 137, 3, 177, 112, 2, 214, 139, 3, 171, 109, 3, 174
_go_188_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 73, 2, 215
_go_189_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 73, 2, 216
_go_190_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
dw 34, 195, 2, 92, 179, 2, 93, 174, 2, 102, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 103, 173, 2, 217, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 133, 2, 105, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_191_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 106, 3, 78
_go_192_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 234, 136, 3, 183, 135, 2, 2
_go_193_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 133, 2, 218
_go_194_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_195_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 115, 2, 219
_go_196_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 5, 169, 3, 58, 170, 2, 220, 114, 3, 176, 113, 3, 180, 137, 3, 177
_go_197_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_198_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 221, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_199_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 7, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85, 91, 2, 223
_go_200_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 224, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_201_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 179, 2, 225, 108, 3, 156
_go_202_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 226, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_203_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 227, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_204_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 179, 2, 228, 108, 3, 156
_go_205_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 4, 148, 3, 121, 87, 2, 232, 88, 3, 119, 86, 2, 233
_go_206_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 155, 2, 158, 154, 3, 103, 120, 3, 178, 133, 2, 234, 119, 3, 179, 107, 2, 159
_go_207_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 155, 2, 160, 154, 3, 103, 120, 3, 178, 133, 2, 235, 119, 3, 179, 107, 2, 159
_go_208_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 78, 3, 37
_go_209_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 116, 2, 237, 106, 2, 238
_go_210_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 175, 2, 239, 133, 2, 210, 108, 3, 42
_go_211_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 82, 2, 241
_go_212_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_213_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 92, 3, 132
_go_214_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 49 ; itemsCnt
dw 16, 168, 2, 243, 169, 3, 168, 167, 2, 244, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 133, 2, 245, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_215_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 248, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_216_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 249, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_217_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 106, 3, 76
_go_218_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 181 ; itemsCnt
dw 60, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 250, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_219_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 251, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_220_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 115, 2, 252
_go_221_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_222_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 228, 136, 3, 183, 135, 2, 2
_go_223_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 253, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_224_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 199 ; itemsCnt
dw 66, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 254, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 124, 2, 80, 121, 2, 81, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 123, 2, 82, 137, 3, 177, 120, 3, 178, 122, 2, 83, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 125, 2, 84, 126, 2, 85, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_225_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 129, 2, 255
_go_226_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 199 ; itemsCnt
dw 66, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 256, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 124, 2, 80, 121, 2, 81, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 123, 2, 82, 137, 3, 177, 120, 3, 178, 122, 2, 83, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 125, 2, 84, 126, 2, 85, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_227_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 199 ; itemsCnt
dw 66, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 257, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 124, 2, 80, 121, 2, 81, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 123, 2, 82, 137, 3, 177, 120, 3, 178, 122, 2, 83, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 125, 2, 84, 126, 2, 85, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_228_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 129, 2, 258
_go_229_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 231, 136, 3, 183, 135, 2, 2
_go_230_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 232, 136, 3, 183, 135, 2, 2
_go_231_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 233, 136, 3, 183, 135, 2, 2
_go_232_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 181 ; itemsCnt
dw 60, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 259, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_233_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 100 ; itemsCnt
dw 33, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 25, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 119, 143, 3, 146, 155, 2, 120, 150, 2, 121, 142, 3, 147, 149, 3, 118, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 122, 105, 3, 79
_go_234_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 7, 152, 3, 108, 155, 2, 260, 154, 3, 103, 153, 3, 110, 120, 3, 178, 119, 3, 179, 107, 2, 159
_go_235_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 7, 155, 2, 261, 151, 3, 111, 154, 3, 103, 153, 3, 113, 120, 3, 178, 119, 3, 179, 107, 2, 159
_go_236_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 241, 136, 3, 183, 135, 2, 2
_go_237_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 172, 2, 262, 133, 3, 39
_go_238_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 82, 2, 263
_go_239_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 116, 2, 237
_go_240_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 237, 136, 3, 183, 135, 2, 2
_go_241_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 108, 3, 31
_go_242_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 227, 136, 3, 183, 135, 2, 2
_go_243_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 116, 2, 264, 111, 3, 154, 133, 3, 61
_go_244_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_245_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 49 ; itemsCnt
dw 16, 168, 2, 271, 169, 3, 168, 167, 2, 244, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 133, 2, 245, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_246_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 272, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_247_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 273, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_248_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_249_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_250_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 83, 3, 77
_go_251_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_252_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 275, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_253_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 10, 146, 2, 276, 147, 3, 123, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 133, 3, 125, 125, 2, 84, 126, 2, 85, 90, 2, 278
_go_254_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 128, 3, 129
_go_255_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 280, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_256_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 128, 3, 127
_go_257_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 128, 3, 128
_go_258_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 281, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_259_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 88, 3, 120
_go_260_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 96, 2, 206, 95, 2, 207
_go_261_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 96, 2, 206, 95, 2, 207
_go_262_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 108, 3, 38
_go_263_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 1, 108, 3, 33
_go_264_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dw 15, 169, 3, 168, 167, 2, 282, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 133, 2, 283, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_265_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 284, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_266_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 285, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_267_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 286, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_268_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 287, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_269_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 288, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_270_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 289, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_271_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 2, 116, 2, 264, 133, 3, 61
_go_272_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_273_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 7, 100, 2, 265, 106, 3, 165, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_274_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 236, 136, 3, 183, 135, 2, 2
_go_275_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_276_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 181 ; itemsCnt
dw 60, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 290, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_277_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 229, 136, 3, 183, 135, 2, 2
_go_278_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 94 ; itemsCnt
dw 31, 195, 2, 92, 179, 2, 93, 194, 2, 94, 177, 2, 21, 182, 2, 95, 181, 2, 291, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 96, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 137, 3, 177, 120, 3, 178, 118, 2, 42, 112, 2, 43, 139, 3, 171, 119, 3, 179, 109, 3, 174, 100, 2, 46, 108, 2, 48, 107, 2, 49, 105, 3, 79
_go_279_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 3, 134, 3, 191, 136, 3, 183, 135, 2, 2
_go_280_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 199 ; itemsCnt
dw 66, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 292, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 124, 2, 80, 121, 2, 81, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 123, 2, 82, 137, 3, 177, 120, 3, 178, 122, 2, 83, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 125, 2, 84, 126, 2, 85, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_281_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 199 ; itemsCnt
dw 66, 200, 2, 10, 201, 3, 2, 199, 3, 5, 198, 2, 11, 202, 2, 293, 196, 3, 9, 197, 3, 8, 195, 2, 13, 193, 3, 12, 184, 3, 21, 189, 3, 16, 190, 3, 15, 188, 3, 17, 179, 2, 17, 194, 2, 19, 180, 2, 20, 177, 2, 21, 191, 3, 14, 182, 2, 23, 186, 3, 19, 187, 3, 18, 181, 2, 25, 185, 3, 20, 192, 3, 13, 159, 3, 142, 169, 3, 173, 158, 2, 29, 157, 2, 30, 164, 2, 32, 156, 2, 33, 143, 3, 146, 155, 2, 35, 142, 3, 147, 154, 2, 39, 124, 2, 80, 121, 2, 81, 114, 3, 176, 113, 3, 180, 127, 2, 41, 110, 3, 175, 138, 3, 172, 123, 2, 82, 137, 3, 177, 120, 3, 178, 122, 2, 83, 118, 2, 42, 112, 2, 43, 132, 2, 44, 139, 3, 171, 133, 3, 7, 119, 3, 179, 125, 2, 84, 126, 2, 85, 109, 3, 174, 100, 2, 46, 81, 2, 47, 108, 2, 48, 107, 2, 49, 89, 2, 50, 79, 2, 51, 77, 2, 52, 105, 3, 79, 93, 2, 53, 76, 2, 54, 75, 2, 55, 71, 2, 56
_go_282_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_283_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 14, 169, 3, 168, 167, 2, 294, 140, 3, 169, 114, 3, 176, 113, 3, 180, 110, 3, 175, 138, 3, 167, 137, 3, 177, 112, 2, 214, 139, 3, 166, 109, 3, 174, 100, 2, 246, 108, 3, 170, 107, 2, 247
_go_284_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_285_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_286_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_287_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_288_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_289_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_go_290_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 128, 3, 122
_go_291_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 6, 124, 2, 80, 121, 2, 81, 123, 2, 82, 122, 2, 83, 125, 2, 84, 126, 2, 85
_go_292_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 128, 3, 131
_go_293_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 1, 128, 3, 130
_go_294_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 6, 100, 2, 265, 99, 2, 266, 102, 2, 267, 98, 2, 268, 97, 2, 269, 101, 2, 270
_dfa_idx_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 82 ; itemsCnt
dw 0, 64, 66, 68, 70, 78, 80, 98, 100, 106, 108, 122, 132, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 246, 256, 272, 284, 290, 310, 324, 336, 344, 352, 366, 382, 400, 404, 422, 430, 444, 448, 462, 470, 480, 494, 506, 520, 534, 546, 560, 574, 588, 602, 616, 630, 644, 658, 672, 686, 700, 714, 728, 742, 756, 770, 784, 798, 812, 826, 840, 852, 866, 880, 894, 908, 922, 936, 950, 964, 978, 992
_dfa_idx_1_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 75 ; itemsCnt
dw 1006, 1064, 1066, 1068, 1076, 1078, 1096, 1098, 1104, 1106, 1120, 1130, 1134, 1144, 1154, 1164, 1174, 1184, 1194, 1204, 1214, 1224, 1234, 1244, 1254, 1270, 1276, 1296, 1310, 1326, 1334, 1348, 1352, 1370, 1378, 1396, 1410, 1424, 1438, 1452, 1462, 1474, 1488, 1502, 1516, 1530, 1544, 1558, 1572, 1586, 1600, 1614, 1628, 1642, 1656, 1670, 1684, 1698, 1712, 1726, 1740, 1754, 1768, 1782, 1794, 1808, 1822, 1836, 1850, 1864, 1878, 1892, 1906, 1920, 1934
_dfa_idx_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 197 ; itemsCnt
dw 1948, 2052, 2054, 2056, 2058, 2060, 2062, 2064, 2068, 2072, 2078, 2086, 2088, 2092, 2094, 2098, 2108, 2110, 2112, 2126, 2128, 2130, 2132, 2138, 2140, 2154, 2156, 2158, 2160, 2162, 2164, 2174, 2188, 2202, 2212, 2216, 2226, 2236, 2246, 2256, 2266, 2276, 2286, 2296, 2306, 2316, 2326, 2336, 2346, 2356, 2366, 2376, 2386, 2396, 2406, 2416, 2426, 2436, 2446, 2456, 2466, 2476, 2486, 2492, 2502, 2508, 2524, 2536, 2542, 2552, 2570, 2584, 2596, 2604, 2612, 2622, 2644, 2660, 2666, 2686, 2694, 2704, 2718, 2722, 2732, 2756, 2764, 2774, 2788, 2802, 2812, 2830, 2844, 2854, 2868, 2880, 2890, 2904, 2912, 2926, 2936, 2948, 2958, 2972, 2982, 2996, 3008, 3026, 3040, 3054, 3068, 3082, 3096, 3110, 3124, 3138, 3152, 3166, 3180, 3194, 3208, 3238, 3252, 3266, 3280, 3294, 3308, 3322, 3336, 3350, 3368, 3382, 3396, 3410, 3424, 3438, 3452, 3462, 3472, 3486, 3500, 3510, 3524, 3538, 3552, 3566, 3580, 3594, 3608, 3618, 3628, 3642, 3656, 3670, 3684, 3698, 3712, 3726, 3740, 3754, 3768, 3782, 3796, 3810, 3824, 3838, 3852, 3866, 3880, 3894, 3908, 3922, 3936, 3950, 3964, 3978, 3992, 4006, 4020, 4034, 4048, 4058, 4072, 4082, 4094, 4106, 4120, 4134, 4148, 4162, 4176, 4190, 4204, 4218, 4232, 4246, 4260
_dfa_idx_3_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 128 ; itemsCnt
dw 4274, 4350, 4352, 4354, 4356, 4358, 4360, 4368, 4370, 4372, 4390, 4392, 4394, 4400, 4402, 4416, 4426, 4430, 4440, 4450, 4460, 4470, 4480, 4490, 4500, 4510, 4520, 4530, 4540, 4550, 4560, 4570, 4580, 4590, 4600, 4610, 4620, 4630, 4640, 4656, 4668, 4674, 4692, 4706, 4718, 4726, 4734, 4754, 4770, 4784, 4788, 4806, 4814, 4828, 4832, 4850, 4858, 4872, 4886, 4900, 4914, 4924, 4936, 4948, 4962, 4980, 4994, 5008, 5022, 5036, 5050, 5064, 5078, 5092, 5106, 5120, 5134, 5148, 5178, 5192, 5206, 5220, 5234, 5248, 5266, 5280, 5294, 5308, 5322, 5336, 5350, 5364, 5378, 5390, 5404, 5418, 5432, 5446, 5460, 5474, 5488, 5502, 5516, 5530, 5544, 5558, 5572, 5586, 5600, 5614, 5628, 5642, 5656, 5670, 5684, 5698, 5712, 5726, 5738, 5752, 5766, 5780, 5794, 5808, 5822, 5836, 5850, 5864
_dfa_idx_4_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 123 ; itemsCnt
dw 5878, 5970, 5972, 5974, 5976, 5978, 5980, 5982, 5984, 5988, 5994, 6002, 6006, 6008, 6012, 6014, 6016, 6034, 6036, 6038, 6040, 6046, 6048, 6062, 6064, 6066, 6068, 6070, 6080, 6090, 6104, 6108, 6118, 6128, 6138, 6148, 6158, 6168, 6178, 6188, 6198, 6208, 6218, 6228, 6238, 6248, 6258, 6268, 6278, 6294, 6306, 6312, 6330, 6344, 6356, 6364, 6372, 6392, 6408, 6422, 6430, 6454, 6458, 6476, 6484, 6498, 6512, 6526, 6540, 6552, 6564, 6578, 6588, 6600, 6614, 6628, 6642, 6656, 6670, 6684, 6698, 6712, 6726, 6740, 6754, 6768, 6782, 6796, 6810, 6824, 6838, 6852, 6866, 6880, 6894, 6908, 6922, 6936, 6950, 6964, 6978, 6992, 7006, 7020, 7034, 7048, 7062, 7076, 7090, 7104, 7118, 7132, 7146, 7160, 7174, 7188, 7202, 7216, 7230, 7244, 7258, 7270, 7284
_dfa_idx_5_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 110 ; itemsCnt
dw 7298, 7388, 7390, 7392, 7394, 7396, 7398, 7400, 7402, 7406, 7412, 7420, 7422, 7426, 7430, 7432, 7434, 7452, 7454, 7456, 7458, 7464, 7466, 7480, 7482, 7484, 7486, 7488, 7498, 7512, 7516, 7526, 7536, 7546, 7556, 7566, 7576, 7586, 7596, 7606, 7616, 7626, 7636, 7646, 7656, 7666, 7682, 7694, 7700, 7714, 7728, 7740, 7748, 7756, 7776, 7792, 7806, 7814, 7836, 7840, 7858, 7866, 7880, 7894, 7908, 7922, 7936, 7948, 7958, 7970, 7984, 7998, 8012, 8026, 8040, 8054, 8068, 8082, 8096, 8110, 8124, 8138, 8152, 8166, 8180, 8194, 8208, 8222, 8236, 8250, 8264, 8278, 8292, 8304, 8318, 8332, 8346, 8360, 8374, 8388, 8402, 8416, 8430, 8444, 8458, 8472, 8486, 8500, 8514, 8528
_dfa_idx_6_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 109 ; itemsCnt
dw 8542, 8630, 8632, 8634, 8636, 8638, 8640, 8642, 8644, 8648, 8654, 8662, 8666, 8670, 8672, 8674, 8692, 8694, 8696, 8698, 8704, 8706, 8720, 8722, 8724, 8726, 8728, 8738, 8752, 8756, 8766, 8776, 8786, 8796, 8806, 8816, 8826, 8836, 8846, 8856, 8866, 8876, 8886, 8896, 8906, 8922, 8934, 8940, 8954, 8968, 8980, 8988, 8996, 9016, 9032, 9046, 9054, 9076, 9080, 9098, 9106, 9120, 9134, 9148, 9162, 9176, 9188, 9198, 9210, 9224, 9238, 9252, 9266, 9280, 9294, 9308, 9322, 9336, 9350, 9364, 9378, 9392, 9406, 9420, 9434, 9448, 9462, 9476, 9490, 9504, 9518, 9532, 9544, 9558, 9572, 9586, 9600, 9614, 9628, 9642, 9656, 9670, 9684, 9698, 9712, 9726, 9740, 9754, 9768
_dfa_idx_7_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
dw 9782, 9824, 9826, 9828, 9830, 9838, 9840, 9852, 9854, 9856, 9870, 9874, 9884, 9894, 9904, 9914, 9930, 9942, 9948, 9966, 9980, 9992, 10000, 10008, 10022, 10038, 10048, 10052, 10066, 10074, 10088, 10092, 10106, 10114, 10128, 10142, 10156, 10170, 10184, 10196
_dfa_idx_8_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 106 ; itemsCnt
dw 10210, 10270, 10272, 10274, 10282, 10284, 10302, 10304, 10310, 10312, 10326, 10336, 10340, 10350, 10360, 10370, 10380, 10390, 10400, 10410, 10420, 10430, 10440, 10450, 10460, 10470, 10480, 10490, 10500, 10510, 10520, 10530, 10546, 10552, 10570, 10584, 10600, 10608, 10628, 10632, 10646, 10654, 10672, 10686, 10704, 10718, 10732, 10746, 10756, 10768, 10782, 10800, 10814, 10828, 10842, 10856, 10870, 10884, 10898, 10912, 10926, 10940, 10954, 10968, 10994, 11008, 11022, 11036, 11050, 11064, 11082, 11096, 11110, 11124, 11138, 11152, 11166, 11180, 11194, 11208, 11222, 11236, 11248, 11262, 11276, 11290, 11304, 11318, 11332, 11346, 11360, 11374, 11388, 11402, 11416, 11430, 11444, 11458, 11472, 11486, 11500, 11514, 11528, 11542, 11556, 11570
_dfa_idx_9_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 11584, 11590
_dfa_idx_10_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 11596, 11624, 11626, 11628, 11630, 11632, 11636, 11640, 11644, 11646, 11648, 11650, 11656, 11658, 11660, 11662, 11666, 11668, 11672
_dfa_idx_11_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 11676, 11690, 11692, 11702, 11714, 11726, 11730, 11738, 11746
_dfa_idx_12_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 64 ; itemsCnt
dw 11758, 11808, 11810, 11812, 11814, 11822, 11832, 11834, 11836, 11848, 11850, 11856, 11858, 11872, 11876, 11886, 11896, 11906, 11916, 11922, 11928, 11944, 11956, 11962, 11972, 11990, 12004, 12016, 12024, 12032, 12042, 12056, 12072, 12078, 12088, 12092, 12102, 12116, 12124, 12134, 12148, 12152, 12162, 12176, 12184, 12194, 12208, 12222, 12232, 12246, 12260, 12270, 12284, 12296, 12304, 12318, 12328, 12338, 12348, 12358, 12368, 12378, 12388, 12398
_dfa_idx_13_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 12408, 12434, 12436, 12438, 12440, 12442, 12446, 12450, 12452, 12456, 12458, 12460, 12462, 12464, 12466, 12468, 12472, 12474, 12478
_dfa_idx_14_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 12482, 12486
_dfa_idx_15_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
dw 12488, 12572, 12574, 12576, 12578, 12580, 12582, 12584, 12588, 12592, 12600, 12604, 12608, 12610, 12612, 12630, 12632, 12634, 12636, 12642, 12644, 12658, 12660, 12662, 12664, 12666, 12676, 12690, 12694, 12704, 12714, 12724, 12734, 12744, 12754, 12764, 12774, 12784, 12794, 12804, 12814, 12824, 12834, 12844, 12860, 12866, 12880, 12894, 12910, 12918, 12938, 12942, 12956, 12964, 12986, 13000, 13018, 13032, 13046, 13060, 13074, 13084, 13096, 13110, 13124, 13138, 13152, 13166, 13180, 13194, 13208, 13222, 13236, 13250, 13264, 13278, 13292, 13306, 13320, 13334, 13348, 13362, 13376, 13390, 13404, 13418, 13430, 13444, 13458, 13472, 13486, 13500, 13514, 13528, 13542, 13556, 13570, 13584, 13598, 13612, 13626, 13640, 13654
_dfa_idx_16_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 18 ; itemsCnt
dw 13668, 13692, 13694, 13696, 13698, 13700, 13704, 13708, 13712, 13714, 13716, 13718, 13720, 13722, 13724, 13728, 13730, 13734
_dfa_idx_17_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 13738, 13746, 13750, 13754, 13756, 13758, 13762, 13764, 13768
_dfa_idx_18_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 42 ; itemsCnt
dw 13772, 13820, 13822, 13824, 13826, 13828, 13836, 13838, 13850, 13852, 13858, 13860, 13874, 13878, 13888, 13898, 13908, 13918, 13934, 13946, 13952, 13970, 13984, 13996, 14004, 14012, 14026, 14042, 14052, 14056, 14070, 14078, 14092, 14096, 14110, 14118, 14132, 14146, 14160, 14174, 14188, 14200
_dfa_idx_19_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 14214, 14222
_dfa_idx_20_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 26 ; itemsCnt
dw 14232, 14258, 14260, 14274, 14284, 14294, 14304, 14316, 14328, 14342, 14346, 14354, 14366, 14374, 14384, 14396, 14410, 14424, 14438, 14452, 14466, 14480, 14494, 14508, 14522, 14536
_dfa_idx_21_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 108 ; itemsCnt
dw 14550, 14636, 14638, 14640, 14642, 14644, 14646, 14648, 14652, 14656, 14664, 14668, 14672, 14674, 14676, 14690, 14692, 14694, 14696, 14702, 14704, 14718, 14720, 14722, 14724, 14726, 14736, 14750, 14760, 14764, 14774, 14784, 14794, 14804, 14814, 14824, 14834, 14844, 14854, 14864, 14874, 14884, 14894, 14904, 14914, 14924, 14940, 14946, 14964, 14978, 14994, 15002, 15022, 15026, 15040, 15048, 15070, 15084, 15102, 15116, 15130, 15144, 15158, 15172, 15182, 15196, 15208, 15222, 15236, 15250, 15264, 15278, 15292, 15306, 15320, 15334, 15348, 15362, 15376, 15390, 15404, 15418, 15432, 15446, 15460, 15474, 15488, 15502, 15516, 15530, 15542, 15556, 15570, 15584, 15598, 15612, 15626, 15640, 15654, 15668, 15682, 15696, 15710, 15724, 15738, 15752, 15766, 15780
_dfa_idx_22_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 42 ; itemsCnt
dw 15794, 15842, 15844, 15846, 15848, 15856, 15858, 15870, 15872, 15874, 15880, 15882, 15896, 15900, 15910, 15920, 15930, 15940, 15956, 15968, 15974, 15992, 16006, 16018, 16026, 16034, 16048, 16064, 16074, 16078, 16092, 16100, 16114, 16118, 16132, 16140, 16154, 16168, 16182, 16196, 16210, 16222
_dfa_idx_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 114 ; itemsCnt
dw 16236, 16326, 16328, 16330, 16332, 16334, 16336, 16338, 16340, 16344, 16350, 16358, 16362, 16366, 16368, 16370, 16384, 16386, 16388, 16390, 16396, 16398, 16412, 16414, 16416, 16418, 16420, 16430, 16444, 16454, 16458, 16468, 16478, 16488, 16498, 16508, 16518, 16528, 16538, 16548, 16558, 16568, 16578, 16588, 16598, 16608, 16618, 16634, 16646, 16652, 16670, 16684, 16696, 16704, 16712, 16732, 16748, 16762, 16770, 16792, 16796, 16814, 16822, 16836, 16850, 16864, 16878, 16892, 16904, 16918, 16928, 16942, 16954, 16968, 16982, 16996, 17010, 17024, 17038, 17052, 17066, 17080, 17094, 17108, 17122, 17136, 17150, 17164, 17178, 17192, 17206, 17220, 17234, 17248, 17262, 17276, 17288, 17302, 17316, 17330, 17344, 17358, 17372, 17386, 17400, 17414, 17428, 17442, 17456, 17470, 17484, 17498, 17512, 17526
_dfa_idx_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 33 ; itemsCnt
dw 17540, 17576, 17578, 17580, 17588, 17590, 17602, 17604, 17606, 17620, 17624, 17634, 17644, 17654, 17664, 17680, 17686, 17704, 17718, 17734, 17742, 17756, 17760, 17770, 17778, 17792, 17806, 17820, 17834, 17848, 17862, 17876, 17890
_dfa_idx_25_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 17904, 17916, 17918, 17924, 17926, 17940, 17956, 17970, 17986, 18000
_dfa_idx_26_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 35 ; itemsCnt
dw 18014, 18056, 18058, 18060, 18068, 18070, 18072, 18084, 18086, 18092, 18094, 18108, 18112, 18122, 18132, 18142, 18152, 18168, 18174, 18192, 18206, 18222, 18230, 18244, 18248, 18258, 18266, 18280, 18294, 18308, 18322, 18336, 18350, 18364, 18378
_dfa_idx_27_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 18392, 18412, 18426, 18436, 18446, 18456, 18470, 18482, 18492, 18506, 18520, 18534, 18548, 18562, 18576, 18590, 18604, 18618, 18632
_dfa_idx_28_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 104 ; itemsCnt
dw 18646, 18732, 18734, 18736, 18738, 18740, 18742, 18744, 18748, 18752, 18760, 18764, 18766, 18770, 18772, 18774, 18792, 18794, 18796, 18798, 18804, 18806, 18820, 18822, 18824, 18826, 18828, 18838, 18852, 18856, 18866, 18876, 18886, 18896, 18906, 18916, 18926, 18936, 18946, 18956, 18966, 18976, 18986, 18996, 19006, 19022, 19028, 19042, 19056, 19072, 19080, 19100, 19104, 19118, 19126, 19148, 19162, 19180, 19194, 19208, 19222, 19236, 19246, 19258, 19272, 19286, 19300, 19314, 19328, 19342, 19356, 19370, 19384, 19398, 19412, 19426, 19440, 19454, 19468, 19482, 19496, 19510, 19524, 19538, 19552, 19566, 19580, 19592, 19606, 19620, 19634, 19648, 19662, 19676, 19690, 19704, 19718, 19732, 19746, 19760, 19774, 19788, 19802, 19816
_dfa_idx_29_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 19830, 19868, 19870, 19872, 19880, 19890, 19892, 19904, 19906, 19908, 19922, 19926, 19936, 19946, 19956, 19966, 19972, 19978, 19994, 20000, 20010, 20028, 20042, 20058, 20066, 20076, 20090, 20094, 20100, 20110, 20118, 20128, 20142, 20156, 20166, 20180, 20194, 20204, 20218, 20228, 20242, 20252, 20266, 20276, 20290, 20298, 20312, 20322, 20332, 20342, 20352, 20362, 20372, 20382, 20392
_dfa_idx_30_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 20402, 20406
_dfa_idx_31_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 20408, 20418, 20424, 20426, 20428, 20432, 20436, 20440, 20444, 20448, 20452, 20456, 20460, 20464, 20468, 20472
_dfa_idx_32_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 20476, 20494, 20496, 20498, 20504, 20506, 20508, 20520, 20532, 20536, 20544, 20548, 20552, 20560, 20564, 20568, 20580, 20584, 20588
_dfa_idx_33_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
dw 20592, 20600, 20602, 20604, 20606, 20610, 20614, 20618, 20622, 20626, 20630
_dfa_idx_34_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 20634, 20638
_dfa_idx_35_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 20640, 20650, 20652, 20654
_dfa_idx_36_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 20660, 20664
_dfa_idx_37_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
dw 20666, 20680, 20682, 20684, 20690, 20692, 20706, 20722, 20736, 20752, 20766
_dfa_idx_38_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 5 ; itemsCnt
dw 20780, 20792, 20794, 20796, 20798
_dfa_idx_39_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 20804, 20822, 20824, 20826, 20830, 20834, 20836, 20842, 20844, 20846, 20850, 20852, 20856
_dfa_idx_40_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 20860, 20864
_dfa_idx_41_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 37 ; itemsCnt
dw 20866, 20912, 20914, 20916, 20918, 20920, 20928, 20930, 20932, 20944, 20946, 20952, 20954, 20968, 20972, 20982, 20992, 21002, 21012, 21028, 21034, 21052, 21066, 21082, 21090, 21104, 21108, 21118, 21126, 21140, 21154, 21168, 21182, 21196, 21210, 21224, 21238
_dfa_idx_42_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
dw 21252, 21256, 21258
_dfa_idx_43_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 21262, 21270, 21276, 21278, 21282, 21286, 21290, 21294, 21298
_dfa_idx_44_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 35 ; itemsCnt
dw 21302, 21344, 21346, 21348, 21350, 21358, 21360, 21372, 21374, 21380, 21382, 21396, 21400, 21410, 21420, 21430, 21440, 21456, 21462, 21480, 21494, 21510, 21518, 21532, 21536, 21546, 21554, 21568, 21582, 21596, 21610, 21624, 21638, 21652, 21666
_dfa_idx_45_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 21680, 21706, 21708, 21710, 21712, 21714, 21716, 21720, 21724, 21728, 21730, 21732, 21734, 21736, 21738, 21740, 21744, 21746, 21750
_dfa_idx_46_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 24 ; itemsCnt
dw 21754, 21784, 21786, 21788, 21790, 21792, 21794, 21798, 21802, 21806, 21808, 21810, 21812, 21814, 21816, 21818, 21822, 21824, 21826, 21828, 21832, 21836, 21840, 21844
_dfa_idx_47_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 24 ; itemsCnt
dw 21848, 21880, 21882, 21884, 21886, 21888, 21892, 21896, 21900, 21902, 21904, 21906, 21912, 21914, 21916, 21918, 21922, 21924, 21926, 21928, 21932, 21936, 21940, 21944
_dfa_idx_48_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
dw 21948, 21956, 21958
_dfa_idx_49_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
dw 21964, 21978, 21980, 21984, 21988, 21994, 21996, 21998, 22002, 22004, 22008
_dfa_idx_50_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 22012, 22024, 22028, 22032, 22038, 22040, 22042, 22046, 22048, 22052
_dfa_idx_51_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 22056, 22082, 22084, 22086, 22088, 22090, 22094, 22098, 22102, 22104, 22106, 22108, 22110, 22112, 22114, 22116, 22120, 22122, 22126
_dfa_idx_52_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 22130, 22140, 22142, 22144, 22156, 22168, 22172, 22180, 22188
_dfa_idx_53_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 22200, 22226, 22228, 22230, 22232, 22234, 22238, 22242, 22246, 22248, 22250, 22252, 22254, 22256, 22258, 22260, 22264, 22266, 22270
_dfa_idx_54_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 22274, 22278, 22280, 22284, 22288, 22292, 22296, 22300, 22304
_dfa_idx_55_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 34 ; itemsCnt
dw 22308, 22346, 22348, 22350, 22358, 22364, 22366, 22378, 22380, 22382, 22396, 22400, 22410, 22420, 22430, 22440, 22456, 22462, 22480, 22494, 22510, 22518, 22532, 22536, 22546, 22554, 22568, 22582, 22596, 22610, 22624, 22638, 22652, 22666
_dfa_idx_56_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 41 ; itemsCnt
dw 22680, 22726, 22728, 22730, 22732, 22740, 22742, 22754, 22756, 22762, 22764, 22778, 22782, 22792, 22802, 22812, 22822, 22838, 22850, 22856, 22874, 22888, 22900, 22908, 22916, 22930, 22946, 22956, 22960, 22974, 22982, 22996, 23000, 23014, 23022, 23036, 23050, 23064, 23078, 23092, 23104
_dfa_idx_57_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 23118, 23128, 23134, 23136, 23150, 23166, 23180, 23196, 23210
_dfa_idx_58_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 110 ; itemsCnt
dw 23224, 23314, 23316, 23318, 23320, 23322, 23324, 23326, 23328, 23332, 23338, 23346, 23350, 23352, 23356, 23358, 23360, 23378, 23380, 23382, 23384, 23390, 23392, 23406, 23408, 23410, 23412, 23414, 23424, 23438, 23442, 23452, 23462, 23472, 23482, 23492, 23502, 23512, 23522, 23532, 23542, 23552, 23562, 23572, 23582, 23592, 23608, 23620, 23626, 23640, 23654, 23666, 23674, 23682, 23702, 23718, 23732, 23740, 23762, 23766, 23784, 23792, 23806, 23820, 23834, 23848, 23862, 23874, 23884, 23896, 23910, 23924, 23938, 23952, 23966, 23980, 23994, 24008, 24022, 24036, 24050, 24064, 24078, 24092, 24106, 24120, 24134, 24148, 24162, 24176, 24190, 24204, 24218, 24230, 24244, 24258, 24272, 24286, 24300, 24314, 24328, 24342, 24356, 24370, 24384, 24398, 24412, 24426, 24440, 24454
_dfa_idx_59_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 34 ; itemsCnt
dw 24468, 24508, 24510, 24512, 24520, 24522, 24534, 24536, 24542, 24544, 24558, 24562, 24572, 24582, 24592, 24602, 24618, 24624, 24642, 24656, 24672, 24680, 24694, 24698, 24708, 24716, 24730, 24744, 24758, 24772, 24786, 24800, 24814, 24828
_dfa_idx_60_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 24842, 24848, 24850, 24852, 24856, 24860, 24864, 24868, 24872
_dfa_idx_61_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
dw 24876, 24880
_dfa_idx_62_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 115 ; itemsCnt
dw 24882, 24972, 24974, 24976, 24978, 24980, 24982, 24984, 24988, 24992, 24998, 25006, 25010, 25014, 25016, 25018, 25032, 25034, 25036, 25038, 25044, 25046, 25060, 25062, 25064, 25066, 25068, 25070, 25080, 25094, 25104, 25108, 25118, 25128, 25138, 25148, 25158, 25168, 25178, 25188, 25198, 25208, 25218, 25228, 25238, 25248, 25258, 25268, 25284, 25296, 25302, 25320, 25334, 25346, 25354, 25362, 25382, 25398, 25412, 25420, 25442, 25446, 25464, 25472, 25486, 25500, 25514, 25528, 25542, 25554, 25568, 25578, 25592, 25604, 25618, 25632, 25646, 25660, 25674, 25688, 25702, 25716, 25730, 25744, 25758, 25772, 25786, 25800, 25814, 25828, 25842, 25856, 25870, 25884, 25898, 25912, 25926, 25938, 25952, 25966, 25980, 25994, 26008, 26022, 26036, 26050, 26064, 26078, 26092, 26106, 26120, 26134, 26148, 26162, 26176
_dfa_idx_63_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 85 ; itemsCnt
dw 26190, 26250, 26252, 26254, 26262, 26264, 26282, 26284, 26290, 26292, 26306, 26316, 26320, 26330, 26340, 26350, 26360, 26370, 26380, 26390, 26400, 26410, 26420, 26430, 26440, 26450, 26460, 26470, 26486, 26492, 26510, 26524, 26540, 26548, 26568, 26572, 26586, 26594, 26612, 26626, 26644, 26658, 26672, 26686, 26696, 26708, 26722, 26740, 26754, 26768, 26782, 26796, 26810, 26824, 26838, 26852, 26866, 26880, 26894, 26908, 26922, 26936, 26950, 26964, 26978, 26992, 27006, 27020, 27034, 27048, 27062, 27076, 27090, 27104, 27116, 27130, 27144, 27158, 27172, 27186, 27200, 27214, 27228, 27242, 27256
_dfa_idx_64_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 86 ; itemsCnt
dw 27270, 27330, 27332, 27334, 27342, 27344, 27362, 27364, 27370, 27372, 27386, 27396, 27400, 27410, 27420, 27430, 27440, 27450, 27460, 27470, 27480, 27490, 27500, 27510, 27520, 27530, 27546, 27552, 27566, 27580, 27596, 27604, 27624, 27628, 27642, 27650, 27668, 27682, 27700, 27714, 27728, 27742, 27752, 27764, 27778, 27792, 27806, 27820, 27834, 27848, 27862, 27876, 27890, 27904, 27918, 27932, 27946, 27960, 27974, 27988, 28002, 28016, 28030, 28044, 28058, 28072, 28086, 28100, 28112, 28126, 28140, 28154, 28168, 28182, 28196, 28210, 28224, 28238, 28252, 28266, 28280, 28294, 28308, 28322, 28336, 28350
_dfa_idx_65_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 28364, 28378, 28380, 28386
_dfa_idx_66_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 83 ; itemsCnt
dw 28396, 28456, 28458, 28460, 28468, 28470, 28488, 28490, 28496, 28498, 28512, 28522, 28526, 28536, 28546, 28556, 28566, 28576, 28586, 28596, 28606, 28616, 28626, 28636, 28646, 28656, 28672, 28678, 28692, 28706, 28722, 28730, 28750, 28754, 28768, 28776, 28794, 28808, 28826, 28840, 28854, 28868, 28878, 28890, 28904, 28918, 28932, 28946, 28960, 28974, 28988, 29002, 29016, 29030, 29044, 29058, 29072, 29086, 29100, 29114, 29128, 29142, 29156, 29170, 29184, 29198, 29212, 29226, 29240, 29252, 29266, 29280, 29294, 29308, 29322, 29336, 29350, 29364, 29378, 29392, 29406, 29420, 29434
_dfa_idx_67_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 15 ; itemsCnt
dw 29448, 29460, 29468, 29470, 29472, 29486, 29490, 29506, 29512, 29526, 29542, 29550, 29554, 29562, 29576
_dfa_idx_68_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 29590, 29602, 29604, 29610, 29622, 29634, 29638, 29646, 29654
_dfa_idx_69_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 12 ; itemsCnt
dw 29666, 29682, 29684, 29688, 29692, 29694, 29700, 29702, 29704, 29708, 29710, 29714
_dfa_idx_70_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
dw 29718, 29724, 29726, 29740, 29756, 29770, 29786, 29800
_dfa_idx_71_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
dw 29814, 29824, 29828, 29832, 29834, 29836, 29838, 29842, 29844, 29848, 29852
_dfa_idx_72_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
dw 29856, 29860, 29862, 29864, 29866, 29872, 29878, 29882, 29886, 29890, 29894
_dfa_idx_73_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 12 ; itemsCnt
dw 29898, 29910, 29912, 29918, 29920, 29922, 29926, 29930, 29934, 29938, 29942, 29946
_dfa_idx_74_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 12 ; itemsCnt
dw 29950, 29954, 29956, 29960, 29964, 29968, 29972, 29976, 29980, 29984, 29988, 29992
_dfa_idx_75_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
dw 29996, 30002, 30004
_dfa_idx_76_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 5 ; itemsCnt
dw 30006, 30022, 30024, 30026, 30032
_dfa_idx_77_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 30042, 30050, 30056, 30058
_dfa_idx_78_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
dw 30062, 30066, 30068, 30072, 30076, 30080, 30084, 30088, 30092
_dfa_idx_79_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 30096, 30122, 30124, 30126, 30134, 30136, 30142, 30152, 30154, 30168, 30172, 30188, 30194, 30208, 30224, 30232, 30236, 30244, 30258
_dfa_idx_80_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 84 ; itemsCnt
dw 30272, 30332, 30334, 30336, 30344, 30346, 30364, 30366, 30372, 30374, 30388, 30398, 30402, 30412, 30422, 30432, 30442, 30452, 30462, 30472, 30482, 30492, 30502, 30512, 30522, 30532, 30548, 30554, 30568, 30582, 30598, 30606, 30626, 30630, 30644, 30652, 30670, 30684, 30702, 30716, 30730, 30744, 30754, 30766, 30780, 30794, 30808, 30822, 30836, 30850, 30864, 30878, 30892, 30906, 30920, 30934, 30948, 30962, 30976, 30990, 31004, 31018, 31032, 31046, 31060, 31074, 31088, 31102, 31116, 31130, 31144, 31156, 31170, 31184, 31198, 31212, 31226, 31240, 31254, 31268, 31282, 31296, 31310, 31324
_dfa_idx_81_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 88 ; itemsCnt
dw 31338, 31402, 31404, 31406, 31414, 31418, 31422, 31424, 31442, 31444, 31450, 31452, 31466, 31468, 31470, 31480, 31494, 31498, 31508, 31518, 31528, 31538, 31548, 31558, 31568, 31578, 31588, 31598, 31608, 31618, 31628, 31638, 31654, 31660, 31674, 31688, 31704, 31712, 31732, 31736, 31750, 31758, 31780, 31794, 31812, 31826, 31840, 31854, 31864, 31876, 31890, 31904, 31918, 31932, 31946, 31960, 31974, 31988, 32002, 32016, 32030, 32044, 32058, 32072, 32086, 32100, 32114, 32128, 32142, 32156, 32170, 32184, 32198, 32212, 32226, 32238, 32252, 32266, 32280, 32294, 32308, 32322, 32336, 32350, 32364, 32378, 32392, 32406
_dfa_idx_82_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 87 ; itemsCnt
dd 32420, 32486, 32488, 32490, 32492, 32500, 32502, 32520, 32522, 32528, 32530, 32544, 32554, 32558, 32568, 32578, 32588, 32598, 32608, 32618, 32628, 32638, 32648, 32658, 32668, 32678, 32688, 32704, 32716, 32722, 32736, 32750, 32762, 32770, 32778, 32798, 32814, 32828, 32832, 32850, 32858, 32876, 32880, 32894, 32902, 32916, 32930, 32940, 32954, 32966, 32978, 32992, 33006, 33020, 33034, 33048, 33062, 33076, 33090, 33104, 33118, 33132, 33146, 33160, 33174, 33188, 33202, 33216, 33230, 33244, 33258, 33272, 33286, 33300, 33314, 33328, 33340, 33354, 33368, 33382, 33396, 33410, 33424, 33438, 33452, 33466, 33480
_dfa_idx_83_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 80 ; itemsCnt
dd 33494, 33554, 33556, 33558, 33566, 33568, 33586, 33588, 33594, 33596, 33610, 33620, 33624, 33634, 33644, 33654, 33664, 33674, 33684, 33694, 33704, 33714, 33724, 33734, 33744, 33754, 33770, 33776, 33790, 33804, 33820, 33828, 33848, 33852, 33866, 33874, 33892, 33906, 33924, 33938, 33952, 33966, 33976, 33988, 34002, 34016, 34030, 34044, 34058, 34072, 34086, 34100, 34114, 34128, 34142, 34156, 34170, 34184, 34198, 34212, 34226, 34240, 34254, 34268, 34282, 34296, 34310, 34324, 34338, 34350, 34364, 34378, 34392, 34406, 34420, 34434, 34448, 34462, 34476, 34490
_dfa_idx_84_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
dd 34504, 34516, 34522
_dfa_idx_85_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dd 34532, 34542, 34544, 34546
_dfa_idx_86_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dd 34552, 34572, 34574, 34576, 34578, 34580, 34584, 34586, 34588, 34594
_dfa_idx_87_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 21 ; itemsCnt
dd 34596, 34626, 34628, 34630, 34632, 34640, 34642, 34644, 34650, 34660, 34662, 34676, 34680, 34696, 34702, 34716, 34732, 34740, 34744, 34752, 34766
_dfa_idx_88_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 18 ; itemsCnt
dd 34780, 34802, 34804, 34806, 34814, 34816, 34826, 34828, 34842, 34846, 34862, 34868, 34882, 34898, 34906, 34910, 34918, 34932
_dfa_idx_89_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dd 34946, 34950, 34952, 34956, 34960, 34964, 34968, 34972, 34976, 34980
_dfa_idx_90_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 92 ; itemsCnt
dd 34984, 35050, 35052, 35054, 35062, 35066, 35070, 35072, 35090, 35092, 35098, 35100, 35114, 35116, 35118, 35128, 35142, 35146, 35156, 35166, 35176, 35186, 35196, 35206, 35216, 35226, 35236, 35246, 35256, 35266, 35276, 35286, 35296, 35312, 35318, 35332, 35346, 35362, 35370, 35390, 35394, 35408, 35416, 35438, 35452, 35470, 35484, 35498, 35512, 35526, 35536, 35548, 35562, 35576, 35590, 35604, 35618, 35632, 35646, 35660, 35674, 35688, 35702, 35716, 35730, 35744, 35758, 35772, 35786, 35800, 35814, 35828, 35842, 35856, 35870, 35882, 35896, 35910, 35924, 35938, 35952, 35966, 35980, 35994, 36008, 36022, 36036, 36050, 36064, 36078, 36092, 36106
_dfa_idx_91_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dd 36120, 36124, 36126, 36130, 36134, 36138, 36142
_dfa_idx_92_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
dd 36146, 36150, 36152, 36156, 36160, 36164
_dfa_idx_93_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dd 36168, 36176, 36178, 36180, 36182, 36186, 36190
_dfa_idx_94_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
dd 36194, 36216, 36218, 36220, 36222, 36224, 36226, 36230, 36232, 36234, 36240
_dfa_idx_95_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
dd 36242, 36256, 36258, 36260, 36262, 36264, 36268, 36270
_dfa_idx_96_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 23 ; itemsCnt
dd 36272, 36288, 36290, 36296, 36298, 36300, 36312, 36324, 36328, 36336, 36340, 36344, 36352, 36356, 36360, 36372, 36376, 36380, 36384, 36388, 36392, 36396, 36400
_dfa_idx_97_bufferBytes dd VARIANT_INTEGER ; inner type
db 2  ; inner size
db ?, ?, ? ; reserved
dq 81 ; itemsCnt
dd 36404, 36464, 36466, 36468, 36476, 36478, 36496, 36498, 36504, 36506, 36520, 36530, 36534, 36544, 36554, 36564, 36574, 36584, 36594, 36604, 36614, 36624, 36634, 36644, 36654, 36664, 36680, 36686, 36700, 36714, 36730, 36738, 36758, 36762, 36776, 36784, 36802, 36816, 36834, 36848, 36862, 36876, 36886, 36898, 36912, 36926, 36940, 36954, 36968, 36982, 36996, 37010, 37024, 37038, 37052, 37066, 37080, 37094, 37108, 37122, 37136, 37150, 37164, 37178, 37192, 37206, 37220, 37234, 37246, 37260, 37274, 37288, 37302, 37316, 37330, 37344, 37358, 37372, 37386, 37400, 37414
_dfa_accept_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 82 ; itemsCnt
db 0, 53, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 2, 37, 5, 36, 35, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_1_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 75 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 2, 37, 5, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 197 ; itemsCnt
db 0, 53, 61, 60, 67, 69, 59, 68, 57, 66, 46, 58, 17, 70, 64, 50, 63, 62, 51, 55, 54, 56, 52, 49, 48, 31, 10, 45, 42, 41, 16, 11, 44, 39, 47, 40, 12, 18, 38, 15, 13, 43, 7, 8, 3, 23, 32, 14, 2, 37, 5, 9, 36, 35, 20, 26, 22, 6, 21, 4, 30, 19, 34, 29, 33, 0, 53, 46, 50, 51, 48, 0, 53, 46, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 50, 51, 50, 51, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 50, 50, 51, 51, 50, 51, 51, 51, 51, 51, 51, 51, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 50, 51, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_3_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 128 ; itemsCnt
db 0, 53, 61, 60, 59, 68, 46, 63, 62, 51, 55, 54, 52, 49, 48, 16, 47, 12, 18, 38, 15, 13, 3, 23, 32, 14, 2, 37, 5, 9, 36, 35, 20, 21, 4, 30, 19, 29, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_4_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 123 ; itemsCnt
db 0, 53, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 70, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 11, 44, 47, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 26, 22, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_5_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 110 ; itemsCnt
db 0, 53, 61, 60, 67, 69, 59, 68, 57, 66, 46, 58, 17, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 44, 47, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_6_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 109 ; itemsCnt
db 0, 53, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 44, 47, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_7_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 40 ; itemsCnt
db 0, 53, 61, 68, 46, 63, 51, 55, 49, 48, 47, 18, 38, 3, 2, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51
_dfa_accept_8_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 106 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 15, 13, 3, 23, 32, 14, 2, 37, 5, 9, 36, 35, 4, 30, 19, 29, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_9_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 52
_dfa_accept_10_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 67, 69, 68, 57, 66, 17, 64, 63, 55, 56, 52, 45, 42, 41, 44, 43, 0, 0
_dfa_accept_11_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 53, 51, 0, 53, 0, 53, 0, 0
_dfa_accept_12_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 64 ; itemsCnt
db 0, 53, 61, 68, 46, 50, 63, 62, 51, 55, 52, 49, 48, 47, 18, 38, 3, 2, 34, 33, 0, 53, 46, 50, 51, 48, 0, 53, 46, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50
_dfa_accept_13_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 67, 69, 68, 57, 66, 17, 70, 64, 63, 55, 56, 45, 42, 41, 44, 43, 0, 0
_dfa_accept_14_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 70
_dfa_accept_15_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
db 0, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 44, 47, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_16_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 18 ; itemsCnt
db 0, 67, 69, 68, 57, 66, 17, 64, 63, 55, 56, 45, 42, 41, 44, 43, 0, 0
_dfa_accept_17_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 17, 64, 42, 41, 44, 43, 0, 0
_dfa_accept_18_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 42 ; itemsCnt
db 0, 53, 61, 60, 68, 46, 63, 51, 55, 52, 49, 48, 47, 18, 38, 3, 2, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51
_dfa_accept_19_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 51
_dfa_accept_20_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 26 ; itemsCnt
db 0, 53, 51, 7, 26, 6, 0, 53, 51, 0, 53, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_21_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 108 ; itemsCnt
db 0, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 44, 39, 47, 40, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_22_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 42 ; itemsCnt
db 0, 53, 61, 68, 46, 63, 51, 55, 54, 52, 49, 48, 47, 18, 38, 3, 2, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51
_dfa_accept_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 114 ; itemsCnt
db 0, 53, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 44, 39, 47, 40, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 33 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 49, 48, 47, 18, 38, 3, 2, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51
_dfa_accept_25_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 0, 54, 52, 49, 48, 0, 48, 0, 0, 0
_dfa_accept_26_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 35 ; itemsCnt
db 0, 61, 68, 46, 63, 62, 51, 55, 52, 49, 48, 47, 18, 38, 3, 2, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51
_dfa_accept_27_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 51, 7, 26, 6, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_28_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 104 ; itemsCnt
db 0, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 70, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 44, 47, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_29_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
db 0, 61, 68, 46, 50, 63, 51, 55, 49, 48, 47, 18, 38, 3, 2, 34, 33, 0, 46, 50, 51, 48, 0, 46, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 0, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50
_dfa_accept_30_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 61
_dfa_accept_31_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
db 0, 52, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_32_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 53, 61, 52, 3, 2, 0, 53, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_33_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
db 0, 61, 3, 2, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_34_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 58
_dfa_accept_35_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 0, 59, 54, 52
_dfa_accept_36_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 54
_dfa_accept_37_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
db 0, 59, 54, 52, 49, 48, 0, 48, 0, 0, 0
_dfa_accept_38_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 5 ; itemsCnt
db 0, 60, 59, 62, 52
_dfa_accept_39_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 0, 60, 59, 17, 64, 62, 52, 42, 41, 44, 43, 0, 0
_dfa_accept_40_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 62
_dfa_accept_41_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 37 ; itemsCnt
db 0, 61, 60, 59, 68, 46, 63, 62, 51, 55, 52, 49, 48, 47, 18, 38, 3, 2, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51
_dfa_accept_42_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
db 0, 11, 0
_dfa_accept_43_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 52, 22, 0, 0, 0, 0, 0, 0
_dfa_accept_44_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 35 ; itemsCnt
db 0, 61, 60, 68, 46, 63, 51, 55, 52, 49, 48, 47, 18, 38, 3, 2, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51
_dfa_accept_45_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 60, 67, 69, 68, 57, 66, 17, 64, 63, 55, 56, 45, 42, 41, 44, 43, 0, 0
_dfa_accept_46_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 24 ; itemsCnt
db 0, 60, 67, 69, 68, 57, 66, 17, 64, 63, 55, 56, 45, 42, 41, 44, 39, 40, 43, 0, 0, 0, 0, 0
_dfa_accept_47_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 24 ; itemsCnt
db 0, 67, 69, 68, 57, 66, 17, 64, 63, 55, 56, 52, 45, 42, 41, 44, 39, 40, 43, 0, 0, 0, 0, 0
_dfa_accept_48_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
db 0, 59, 52
_dfa_accept_49_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
db 0, 59, 17, 64, 52, 42, 41, 44, 43, 0, 0
_dfa_accept_50_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 0, 17, 64, 52, 42, 41, 44, 43, 0, 0
_dfa_accept_51_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 67, 69, 68, 57, 66, 17, 64, 63, 55, 54, 56, 45, 42, 41, 44, 43, 0, 0
_dfa_accept_52_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 53, 62, 0, 53, 0, 53, 0, 0
_dfa_accept_53_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 67, 69, 68, 57, 66, 17, 64, 63, 62, 55, 56, 45, 42, 41, 44, 43, 0, 0
_dfa_accept_54_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 21, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_55_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 34 ; itemsCnt
db 0, 61, 68, 46, 50, 63, 51, 55, 49, 48, 47, 18, 38, 3, 2, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51
_dfa_accept_56_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 41 ; itemsCnt
db 0, 53, 61, 68, 46, 63, 51, 55, 52, 49, 48, 47, 18, 38, 3, 2, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51
_dfa_accept_57_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 52, 49, 48, 0, 48, 0, 0, 0
_dfa_accept_58_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 110 ; itemsCnt
db 0, 53, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 70, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 10, 45, 42, 41, 16, 44, 47, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_59_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 34 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 47, 18, 38, 3, 2, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51
_dfa_accept_60_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 11, 26, 0, 0, 0, 0, 0, 0
_dfa_accept_61_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 2 ; itemsCnt
db 0, 60
_dfa_accept_62_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 115 ; itemsCnt
db 0, 53, 61, 60, 67, 69, 59, 68, 57, 66, 46, 17, 64, 63, 62, 51, 55, 54, 56, 52, 49, 48, 31, 10, 45, 42, 41, 16, 44, 39, 47, 40, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_63_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 85 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 15, 13, 3, 23, 32, 14, 2, 37, 5, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_64_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 86 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 2, 37, 5, 36, 35, 30, 29, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_65_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 0, 60, 52, 51
_dfa_accept_66_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 83 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 2, 37, 5, 36, 35, 4, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_67_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 15 ; itemsCnt
db 0, 46, 63, 49, 48, 47, 0, 46, 48, 0, 46, 0, 0, 0, 0
_dfa_accept_68_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 53, 52, 0, 53, 0, 53, 0, 0
_dfa_accept_69_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 12 ; itemsCnt
db 0, 59, 17, 64, 54, 52, 42, 41, 44, 43, 0, 0
_dfa_accept_70_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
db 0, 49, 48, 0, 48, 0, 0, 0
_dfa_accept_71_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
db 0, 17, 64, 10, 42, 41, 44, 43, 0, 0, 0
_dfa_accept_72_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
db 0, 15, 13, 14, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_73_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 12 ; itemsCnt
db 0, 61, 52, 3, 2, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_74_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 12 ; itemsCnt
db 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_75_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
db 0, 60, 59
_dfa_accept_76_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 5 ; itemsCnt
db 0, 60, 59, 52, 51
_dfa_accept_77_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 0, 52, 31, 0
_dfa_accept_78_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 9 ; itemsCnt
db 0, 4, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_79_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 0, 61, 68, 46, 63, 52, 51, 49, 48, 47, 0, 46, 48, 0, 46, 0, 0, 0, 0
_dfa_accept_80_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 84 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 2, 37, 5, 36, 35, 30, 19, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_81_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 88 ; itemsCnt
db 0, 61, 68, 46, 17, 64, 63, 51, 55, 52, 49, 48, 42, 41, 16, 44, 47, 12, 18, 38, 43, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_82_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 87 ; itemsCnt
db 0, 53, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 14, 2, 37, 5, 36, 35, 30, 0, 53, 46, 51, 48, 0, 53, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_83_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 80 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 14, 2, 37, 5, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_84_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 3 ; itemsCnt
db 0, 52, 51
_dfa_accept_85_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 0, 59, 62, 52
_dfa_accept_86_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 0, 67, 69, 59, 68, 66, 62, 56, 52, 45
_dfa_accept_87_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 21 ; itemsCnt
db 0, 61, 59, 68, 46, 63, 62, 52, 51, 49, 48, 47, 0, 46, 48, 0, 46, 0, 0, 0, 0
_dfa_accept_88_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 18 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 49, 48, 47, 0, 46, 48, 0, 46, 0, 0, 0, 0
_dfa_accept_89_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 0, 19, 0, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_90_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 92 ; itemsCnt
db 0, 61, 68, 46, 17, 64, 63, 51, 55, 52, 49, 48, 42, 41, 16, 44, 47, 12, 18, 38, 43, 8, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
_dfa_accept_91_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 0, 9, 0, 0, 0, 0, 0
_dfa_accept_92_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 6 ; itemsCnt
db 0, 14, 0, 0, 0, 0
_dfa_accept_93_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 0, 60, 39, 40, 0, 0, 0
_dfa_accept_94_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
db 0, 60, 67, 69, 59, 68, 66, 62, 56, 52, 45
_dfa_accept_95_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 8 ; itemsCnt
db 0, 60, 67, 69, 68, 66, 56, 45
_dfa_accept_96_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 23 ; itemsCnt
db 0, 53, 52, 20, 21, 0, 53, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
_dfa_accept_97_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 81 ; itemsCnt
db 0, 61, 68, 46, 63, 51, 55, 52, 49, 48, 16, 47, 12, 18, 38, 3, 23, 32, 2, 37, 5, 9, 36, 35, 30, 0, 46, 51, 48, 0, 46, 51, 0, 51, 0, 51, 0, 51, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51
AST_DataTypeNames_0_bufferBytes StringHead_t 1
 db  "-" , 0
AST_DataTypeNames_1_bufferBytes StringHead_t 7
 db  "integer" , 0
AST_DataTypeNames_2_bufferBytes StringHead_t 5
 db  "float" , 0
AST_DataTypeNames_3_bufferBytes StringHead_t 5
 db  "float" , 0
AST_DataTypeNames_4_bufferBytes StringHead_t 6
 db  "string" , 0
AST_DataTypeNames_5_bufferBytes StringHead_t 7
 db  "boolean" , 0
AST_DataTypeNames_6_bufferBytes StringHead_t 6
 db  "object" , 0
AST_DataTypeNames_7_bufferBytes StringHead_t 4
 db  "null" , 0
AST_DataTypeNames_8_bufferBytes StringHead_t 9
 db  "undefined" , 0
AST_DataTypeNames_9_bufferBytes StringHead_t 5
 db  "array" , 0
AST_DataTypeNames_10_bufferBytes StringHead_t 3
 db  "map" , 0
AST_DataTypeForMIR_0_bufferBytes StringHead_t 7
 db  "[error]" , 0
AST_DataTypeForMIR_1_bufferBytes StringHead_t 5
 db  "int32" , 0
AST_DataTypeForMIR_2_bufferBytes StringHead_t 7
 db  "float32" , 0
AST_DataTypeForMIR_3_bufferBytes StringHead_t 7
 db  "float64" , 0
AST_DataTypeForMIR_4_bufferBytes StringHead_t 6
 db  "string" , 0
AST_DataTypeForMIR_5_bufferBytes StringHead_t 6
 db  "bool32" , 0
AST_DataTypeForMIR_6_bufferBytes StringHead_t 7
 db  "variant" , 0
AST_DataTypeForMIR_7_bufferBytes StringHead_t 7
 db  "[error]" , 0
AST_DataTypeForMIR_8_bufferBytes StringHead_t 7
 db  "[error]" , 0
AST_DataTypeForMIR_9_bufferBytes StringHead_t 7
 db  "variant" , 0
AST_DataTypeForMIR_10_bufferBytes StringHead_t 7
 db  "variant" , 0
; iter 5
; iter 6
; iter 7
; iter 8
; iter 9
; iter 10
; iter 11
; iter 12
; iter 13
; iter 14
; iter 15

; Jump tables
; -----------
__jmptable1330:
  dq  l1331 ; 0
  dq  l1331 ; 1
  dq  l1332 ; 2
  dq  l1332 ; 3
  dq  l1329 ; 4
  dq  l1333 ; 5
  dq  l1331 ; 6
  dq  l1332 ; 7
  dq  l1332 ; 8
  dq  l1332 ; 9
  dq  l1332 ; 10
  dq  l1332 ; 11
  dq  l1332 ; 12
  dq  l1332 ; 13
  dq  l1332 ; 14
  dq  l1332 ; 15
  dq  l1332 ; 16
  dq  l1332 ; 17
  dq  l1332 ; 18
  dq  l1332 ; 19
  dq  l1332 ; 20
  dq  l1332 ; 21
  dq  l1334 ; 22
  dq  l1335 ; 23
  dq  l1336 ; 24
  dq  l1337 ; 25
  dq  l1338 ; 26
  dq  l1339 ; 27
  dq  l1328 ; 28
  dq  l1340 ; 29
  dq  l1343 ; 30
  dq  l1344 ; 31
  dq  l1345 ; 32
  dq  l1346 ; 33
  dq  l1347 ; 34
  dq  l1332 ; 35
  dq  l1329 ; 36
  dq  l1347 ; 37
  dq  l1348 ; 38
  dq  l1332 ; 39
  dq  l1329 ; 40
  dq  l1332 ; 41
  dq  l1349 ; 42
  dq  l1332 ; 43
  dq  l1339 ; 44
  dq  l1332 ; 45
  dq  l1339 ; 46
  dq  l1347 ; 47
  dq  l1331 ; 48
  dq  l1331 ; 49
  dq  l1332 ; 50
  dq  l1332 ; 51
  dq  l1350 ; 52
  dq  l1351 ; 53
  dq  l1331 ; 54
  dq  l1331 ; 55
  dq  l1339 ; 56
  dq  l1332 ; 57
  dq  l1332 ; 58
  dq  l1352 ; 59
  dq  l1348 ; 60
  dq  l1331 ; 61
  dq  l1332 ; 62
  dq  l1353 ; 63
  dq  l1332 ; 64
  dq  l1354 ; 65
  dq  l1355 ; 66
  dq  l1356 ; 67
  dq  l1357 ; 68
  dq  l1347 ; 69
  dq  l1332 ; 70
  dq  l1332 ; 71
  dq  l1331 ; 72
  dq  l1332 ; 73
  dq  l1332 ; 74
  dq  l1329 ; 75
  dq  l1347 ; 76
  dq  l1347 ; 77
  dq  l1347 ; 78
  dq  l1358 ; 79
  dq  l1332 ; 80
  dq  l1332 ; 81
  dq  l1332 ; 82
  dq  l1332 ; 83
  dq  l1332 ; 84
  dq  l1332 ; 85
  dq  l1332 ; 86
  dq  l1339 ; 87
  dq  l1339 ; 88
  dq  l1339 ; 89
  dq  l1339 ; 90
  dq  l1339 ; 91
  dq  l1339 ; 92
  dq  l1331 ; 93
  dq  l1339 ; 94
  dq  l1332 ; 95
  dq  l1328 ; 96
  dq  l1339 ; 97
  dq  l1339 ; 98
  dq  l1339 ; 99
  dq  l1339 ; 100
  dq  l1339 ; 101
  dq  l1339 ; 102
  dq  l1332 ; 103
  dq  l1331 ; 104
  dq  l1331 ; 105
  dq  l1339 ; 106
  dq  l1339 ; 107
  dq  l1347 ; 108
  dq  l1332 ; 109
  dq  l1332 ; 110
  dq  l1347 ; 111
  dq  l1332 ; 112
  dq  l1332 ; 113
  dq  l1332 ; 114
  dq  l1332 ; 115
  dq  l1331 ; 116
  dq  l1328 ; 117
  dq  l1328 ; 118
  dq  l1347 ; 119
  dq  l1351 ; 120
  dq  l1347 ; 121
  dq  l1328 ; 122
  dq  l1332 ; 123
  dq  l1329 ; 124
  dq  l1359 ; 125
  dq  l1328 ; 126
  dq  l1328 ; 127
  dq  l1328 ; 128
  dq  l1328 ; 129
  dq  l1328 ; 130
  dq  l1328 ; 131
  dq  l1328 ; 132
  dq  l1347 ; 133
  dq  l1347 ; 134
  dq  l1347 ; 135
  dq  l1339 ; 136
  dq  l1332 ; 137
  dq  l1332 ; 138
  dq  l1332 ; 139
  dq  l1332 ; 140
  dq  l1332 ; 141
  dq  l1332 ; 142
  dq  l1332 ; 143
  dq  l1332 ; 144
  dq  l1332 ; 145
  dq  l1332 ; 146
  dq  l1332 ; 147
  dq  l1332 ; 148
  dq  l1339 ; 149
  dq  l1339 ; 150
  dq  l1332 ; 151
  dq  l1329 ; 152
  dq  l1332 ; 153
  dq  l1331 ; 154
  dq  l1332 ; 155
  dq  l1332 ; 156
  dq  l1332 ; 157
  dq  l1360 ; 158
  dq  l1361 ; 159
  dq  l1362 ; 160
  dq  l1363 ; 161
  dq  l1364 ; 162
  dq  l1365 ; 163
  dq  l1366 ; 164
  dq  l1331 ; 165
  dq  l1332 ; 166
  dq  l1332 ; 167
  dq  l1332 ; 168
  dq  l1332 ; 169
  dq  l1367 ; 170
  dq  l1332 ; 171
  dq  l1332 ; 172
  dq  l1332 ; 173
  dq  l1370 ; 174
  dq  l1371 ; 175
  dq  l1372 ; 176
  dq  l1332 ; 177
  dq  l1377 ; 178
  dq  l1378 ; 179
  dq  l1379 ; 180
  dq  l1329 ; 181
  dq  l1329 ; 182
  dq  l1329 ; 183
  dq  l1329 ; 184
  dq  l1329 ; 185
  dq  l1331 ; 186
  dq  l1328 ; 187
  dq  l1328 ; 188
  dq  l1328 ; 189
  dq  l1328 ; 190
  dq  l1328 ; 191
  dq  l1328 ; 192
  dq  l1328 ; 193
  dq  l1328 ; 194
  dq  l1328 ; 195
  dq  l1328 ; 196
  dq  l1331 ; 197
  dq  l1328 ; 198
  dq  l1328 ; 199
  dq  l1328 ; 200
  dq  l1331 ; 201
  dq  l1331 ; 202
  dq  l1331 ; 203
  dq  l1331 ; 204
  dq  l1331 ; 205
  dq  l1331 ; 206
  dq  l1331 ; 207
  dq  l1331 ; 208
  dq  l1331 ; 209
  dq  l1331 ; 210
  dq  l1331 ; 211
  dq  l1331 ; 212
  dq  l1331 ; 213
  dq  l1328 ; 214
  dq  l1331 ; 215
  dq  l1331 ; 216
  dq  l1331 ; 217
  dq  l1331 ; 218
  dq  l1331 ; 219
  dq  l1331 ; 220
  dq  l1331 ; 221
  dq  l1328 ; 222
  dq  l1328 ; 223
  dq  l1328 ; 224
  dq  l1328 ; 225
  dq  l1328 ; 226
  dq  l1328 ; 227
  dq  l1328 ; 228
  dq  l1328 ; 229
  dq  l1328 ; 230
  dq  l1328 ; 231
  dq  l1328 ; 232
  dq  l1328 ; 233
  dq  l1328 ; 234
  dq  l1328 ; 235
  dq  l1328 ; 236
  dq  l1328 ; 237
  dq  l1328 ; 238
  dq  l1328 ; 239
  dq  l1328 ; 240
  dq  l1328 ; 241
  dq  l1328 ; 242
  dq  l1328 ; 243
  dq  l1328 ; 244
  dq  l1328 ; 245
  dq  l1331 ; 246
  dq  l1328 ; 247
  dq  l1328 ; 248
  dq  l1331 ; 249
__jmptable1438:
  dq  l1437 ; 0
  dq  l1450 ; 1
  dq  l1452 ; 2
  dq  l1453 ; 3
  dq  l1451 ; 4
  dq  l1454 ; 5
  dq  l1437 ; 6
  dq  l1437 ; 7
  dq  l1457 ; 8
  dq  l1455 ; 9
  dq  l1456 ; 10
  dq  l1437 ; 11
  dq  l1437 ; 12
  dq  l1437 ; 13
  dq  l1437 ; 14
  dq  l1437 ; 15
  dq  l1437 ; 16
  dq  l1437 ; 17
  dq  l1437 ; 18
  dq  l1437 ; 19
  dq  l1437 ; 20
  dq  l1437 ; 21
  dq  l1437 ; 22
  dq  l1437 ; 23
  dq  l1437 ; 24
  dq  l1437 ; 25
  dq  l1437 ; 26
  dq  l1437 ; 27
  dq  l1437 ; 28
  dq  l1437 ; 29
  dq  l1437 ; 30
  dq  l1437 ; 31
  dq  l1437 ; 32
  dq  l1437 ; 33
  dq  l1437 ; 34
  dq  l1437 ; 35
  dq  l1437 ; 36
  dq  l1437 ; 37
  dq  l1437 ; 38
  dq  l1437 ; 39
  dq  l1437 ; 40
  dq  l1437 ; 41
  dq  l1437 ; 42
  dq  l1437 ; 43
  dq  l1437 ; 44
  dq  l1437 ; 45
  dq  l1437 ; 46
  dq  l1437 ; 47
  dq  l1437 ; 48
  dq  l1437 ; 49
  dq  l1437 ; 50
  dq  l1437 ; 51
  dq  l1437 ; 52
  dq  l1437 ; 53
  dq  l1437 ; 54
  dq  l1437 ; 55
  dq  l1437 ; 56
  dq  l1437 ; 57
  dq  l1437 ; 58
  dq  l1437 ; 59
  dq  l1437 ; 60
  dq  l1437 ; 61
  dq  l1437 ; 62
  dq  l1437 ; 63
  dq  l1437 ; 64
  dq  l1437 ; 65
  dq  l1437 ; 66
  dq  l1437 ; 67
  dq  l1437 ; 68
  dq  l1437 ; 69
  dq  l1437 ; 70
  dq  l1437 ; 71
  dq  l1437 ; 72
  dq  l1437 ; 73
  dq  l1437 ; 74
  dq  l1437 ; 75
  dq  l1437 ; 76
  dq  l1437 ; 77
  dq  l1437 ; 78
  dq  l1437 ; 79
  dq  l1437 ; 80
  dq  l1437 ; 81
  dq  l1437 ; 82
  dq  l1437 ; 83
  dq  l1437 ; 84
  dq  l1437 ; 85
  dq  l1437 ; 86
  dq  l1437 ; 87
  dq  l1437 ; 88
  dq  l1437 ; 89
  dq  l1437 ; 90
  dq  l1437 ; 91
  dq  l1437 ; 92
  dq  l1437 ; 93
  dq  l1437 ; 94
  dq  l1437 ; 95
  dq  l1437 ; 96
  dq  l1437 ; 97
  dq  l1437 ; 98
  dq  l1437 ; 99
  dq  l1439 ; 100
  dq  l1440 ; 101
  dq  l1441 ; 102
  dq  l1442 ; 103
  dq  l1443 ; 104
  dq  l1437 ; 105
  dq  l1478 ; 106
  dq  l1477 ; 107
  dq  l1437 ; 108
  dq  l1437 ; 109
  dq  l1437 ; 110
  dq  l1437 ; 111
  dq  l1437 ; 112
  dq  l1437 ; 113
  dq  l1437 ; 114
  dq  l1437 ; 115
  dq  l1437 ; 116
  dq  l1437 ; 117
  dq  l1437 ; 118
  dq  l1437 ; 119
  dq  l1437 ; 120
  dq  l1437 ; 121
  dq  l1437 ; 122
  dq  l1437 ; 123
  dq  l1437 ; 124
  dq  l1437 ; 125
  dq  l1437 ; 126
  dq  l1437 ; 127
  dq  l1437 ; 128
  dq  l1437 ; 129
  dq  l1437 ; 130
  dq  l1437 ; 131
  dq  l1437 ; 132
  dq  l1437 ; 133
  dq  l1437 ; 134
  dq  l1437 ; 135
  dq  l1437 ; 136
  dq  l1437 ; 137
  dq  l1437 ; 138
  dq  l1437 ; 139
  dq  l1437 ; 140
  dq  l1437 ; 141
  dq  l1437 ; 142
  dq  l1437 ; 143
  dq  l1437 ; 144
  dq  l1437 ; 145
  dq  l1437 ; 146
  dq  l1437 ; 147
  dq  l1437 ; 148
  dq  l1437 ; 149
  dq  l1444 ; 150
  dq  l1437 ; 151
  dq  l1447 ; 152
  dq  l1446 ; 153
  dq  l1437 ; 154
  dq  l1437 ; 155
  dq  l1437 ; 156
  dq  l1437 ; 157
  dq  l1437 ; 158
  dq  l1437 ; 159
  dq  l1445 ; 160
  dq  l1437 ; 161
  dq  l1437 ; 162
  dq  l1437 ; 163
  dq  l1437 ; 164
  dq  l1437 ; 165
  dq  l1437 ; 166
  dq  l1437 ; 167
  dq  l1437 ; 168
  dq  l1437 ; 169
  dq  l1437 ; 170
  dq  l1437 ; 171
  dq  l1437 ; 172
  dq  l1437 ; 173
  dq  l1437 ; 174
  dq  l1437 ; 175
  dq  l1437 ; 176
  dq  l1437 ; 177
  dq  l1437 ; 178
  dq  l1437 ; 179
  dq  l1437 ; 180
  dq  l1437 ; 181
  dq  l1437 ; 182
  dq  l1437 ; 183
  dq  l1437 ; 184
  dq  l1437 ; 185
  dq  l1437 ; 186
  dq  l1437 ; 187
  dq  l1437 ; 188
  dq  l1437 ; 189
  dq  l1437 ; 190
  dq  l1437 ; 191
  dq  l1437 ; 192
  dq  l1437 ; 193
  dq  l1437 ; 194
  dq  l1437 ; 195
  dq  l1437 ; 196
  dq  l1437 ; 197
  dq  l1437 ; 198
  dq  l1437 ; 199
  dq  l1437 ; 200
  dq  l1474 ; 201
  dq  l1437 ; 202
  dq  l1448 ; 203
  dq  l1449 ; 204
  dq  l1473 ; 205
  dq  l1437 ; 206
  dq  l1437 ; 207
  dq  l1437 ; 208
  dq  l1437 ; 209
  dq  l1437 ; 210
  dq  l1437 ; 211
  dq  l1437 ; 212
  dq  l1437 ; 213
  dq  l1437 ; 214
  dq  l1437 ; 215
  dq  l1437 ; 216
  dq  l1437 ; 217
  dq  l1437 ; 218
  dq  l1437 ; 219
  dq  l1437 ; 220
  dq  l1437 ; 221
  dq  l1437 ; 222
  dq  l1437 ; 223
  dq  l1437 ; 224
  dq  l1437 ; 225
  dq  l1437 ; 226
  dq  l1437 ; 227
  dq  l1437 ; 228
  dq  l1437 ; 229
  dq  l1437 ; 230
  dq  l1437 ; 231
  dq  l1437 ; 232
  dq  l1437 ; 233
  dq  l1437 ; 234
  dq  l1437 ; 235
  dq  l1437 ; 236
  dq  l1437 ; 237
  dq  l1437 ; 238
  dq  l1437 ; 239
  dq  l1437 ; 240
  dq  l1437 ; 241
  dq  l1437 ; 242
  dq  l1437 ; 243
  dq  l1437 ; 244
  dq  l1437 ; 245
  dq  l1437 ; 246
  dq  l1437 ; 247
  dq  l1437 ; 248
  dq  l1437 ; 249
  dq  l1437 ; 250
  dq  l1437 ; 251
  dq  l1437 ; 252
  dq  l1437 ; 253
  dq  l1437 ; 254
  dq  l1437 ; 255
  dq  l1437 ; 256
  dq  l1437 ; 257
  dq  l1437 ; 258
  dq  l1437 ; 259
  dq  l1437 ; 260
  dq  l1437 ; 261
  dq  l1437 ; 262
  dq  l1437 ; 263
  dq  l1437 ; 264
  dq  l1437 ; 265
  dq  l1437 ; 266
  dq  l1437 ; 267
  dq  l1437 ; 268
  dq  l1437 ; 269
  dq  l1437 ; 270
  dq  l1437 ; 271
  dq  l1437 ; 272
  dq  l1437 ; 273
  dq  l1437 ; 274
  dq  l1437 ; 275
  dq  l1437 ; 276
  dq  l1437 ; 277
  dq  l1437 ; 278
  dq  l1437 ; 279
  dq  l1437 ; 280
  dq  l1437 ; 281
  dq  l1437 ; 282
  dq  l1437 ; 283
  dq  l1437 ; 284
  dq  l1437 ; 285
  dq  l1437 ; 286
  dq  l1437 ; 287
  dq  l1437 ; 288
  dq  l1437 ; 289
  dq  l1437 ; 290
  dq  l1437 ; 291
  dq  l1437 ; 292
  dq  l1437 ; 293
  dq  l1437 ; 294
  dq  l1437 ; 295
  dq  l1437 ; 296
  dq  l1437 ; 297
  dq  l1437 ; 298
  dq  l1437 ; 299
  dq  l1437 ; 300
  dq  l1460 ; 301
  dq  l1461 ; 302
  dq  l1463 ; 303
  dq  l1464 ; 304
  dq  l1465 ; 305
  dq  l1437 ; 306
  dq  l1437 ; 307
  dq  l1466 ; 308
  dq  l1437 ; 309
  dq  l1437 ; 310
  dq  l1437 ; 311
  dq  l1437 ; 312
  dq  l1437 ; 313
  dq  l1437 ; 314
  dq  l1437 ; 315
  dq  l1437 ; 316
  dq  l1437 ; 317
  dq  l1437 ; 318
  dq  l1437 ; 319
  dq  l1437 ; 320
  dq  l1437 ; 321
  dq  l1437 ; 322
  dq  l1437 ; 323
  dq  l1437 ; 324
  dq  l1437 ; 325
  dq  l1437 ; 326
  dq  l1437 ; 327
  dq  l1437 ; 328
  dq  l1437 ; 329
  dq  l1437 ; 330
  dq  l1437 ; 331
  dq  l1437 ; 332
  dq  l1437 ; 333
  dq  l1437 ; 334
  dq  l1437 ; 335
  dq  l1437 ; 336
  dq  l1437 ; 337
  dq  l1437 ; 338
  dq  l1437 ; 339
  dq  l1437 ; 340
  dq  l1437 ; 341
  dq  l1437 ; 342
  dq  l1437 ; 343
  dq  l1437 ; 344
  dq  l1437 ; 345
  dq  l1437 ; 346
  dq  l1437 ; 347
  dq  l1437 ; 348
  dq  l1437 ; 349
  dq  l1462 ; 350
  dq  l1437 ; 351
  dq  l1437 ; 352
  dq  l1437 ; 353
  dq  l1437 ; 354
  dq  l1437 ; 355
  dq  l1437 ; 356
  dq  l1437 ; 357
  dq  l1437 ; 358
  dq  l1437 ; 359
  dq  l1437 ; 360
  dq  l1437 ; 361
  dq  l1437 ; 362
  dq  l1437 ; 363
  dq  l1437 ; 364
  dq  l1437 ; 365
  dq  l1437 ; 366
  dq  l1437 ; 367
  dq  l1437 ; 368
  dq  l1437 ; 369
  dq  l1437 ; 370
  dq  l1437 ; 371
  dq  l1437 ; 372
  dq  l1437 ; 373
  dq  l1437 ; 374
  dq  l1437 ; 375
  dq  l1437 ; 376
  dq  l1437 ; 377
  dq  l1437 ; 378
  dq  l1437 ; 379
  dq  l1437 ; 380
  dq  l1437 ; 381
  dq  l1437 ; 382
  dq  l1437 ; 383
  dq  l1437 ; 384
  dq  l1437 ; 385
  dq  l1437 ; 386
  dq  l1437 ; 387
  dq  l1437 ; 388
  dq  l1437 ; 389
  dq  l1437 ; 390
  dq  l1437 ; 391
  dq  l1437 ; 392
  dq  l1437 ; 393
  dq  l1437 ; 394
  dq  l1437 ; 395
  dq  l1437 ; 396
  dq  l1437 ; 397
  dq  l1437 ; 398
  dq  l1437 ; 399
  dq  l1467 ; 400
  dq  l1468 ; 401
  dq  l1471 ; 402
  dq  l1472 ; 403
  dq  l1469 ; 404
  dq  l1470 ; 405
  dq  l1437 ; 406
  dq  l1437 ; 407
  dq  l1437 ; 408
  dq  l1437 ; 409
  dq  l1437 ; 410
  dq  l1437 ; 411
  dq  l1437 ; 412
  dq  l1437 ; 413
  dq  l1437 ; 414
  dq  l1437 ; 415
  dq  l1437 ; 416
  dq  l1437 ; 417
  dq  l1437 ; 418
  dq  l1437 ; 419
  dq  l1437 ; 420
  dq  l1437 ; 421
  dq  l1437 ; 422
  dq  l1437 ; 423
  dq  l1437 ; 424
  dq  l1437 ; 425
  dq  l1437 ; 426
  dq  l1437 ; 427
  dq  l1437 ; 428
  dq  l1437 ; 429
  dq  l1437 ; 430
  dq  l1437 ; 431
  dq  l1437 ; 432
  dq  l1437 ; 433
  dq  l1437 ; 434
  dq  l1437 ; 435
  dq  l1437 ; 436
  dq  l1437 ; 437
  dq  l1437 ; 438
  dq  l1437 ; 439
  dq  l1437 ; 440
  dq  l1437 ; 441
  dq  l1437 ; 442
  dq  l1437 ; 443
  dq  l1437 ; 444
  dq  l1437 ; 445
  dq  l1437 ; 446
  dq  l1437 ; 447
  dq  l1437 ; 448
  dq  l1437 ; 449
  dq  l1437 ; 450
  dq  l1437 ; 451
  dq  l1437 ; 452
  dq  l1437 ; 453
  dq  l1437 ; 454
  dq  l1437 ; 455
  dq  l1437 ; 456
  dq  l1437 ; 457
  dq  l1437 ; 458
  dq  l1437 ; 459
  dq  l1437 ; 460
  dq  l1437 ; 461
  dq  l1437 ; 462
  dq  l1437 ; 463
  dq  l1437 ; 464
  dq  l1437 ; 465
  dq  l1437 ; 466
  dq  l1437 ; 467
  dq  l1437 ; 468
  dq  l1437 ; 469
  dq  l1437 ; 470
  dq  l1437 ; 471
  dq  l1437 ; 472
  dq  l1437 ; 473
  dq  l1437 ; 474
  dq  l1437 ; 475
  dq  l1437 ; 476
  dq  l1437 ; 477
  dq  l1437 ; 478
  dq  l1437 ; 479
  dq  l1437 ; 480
  dq  l1437 ; 481
  dq  l1437 ; 482
  dq  l1437 ; 483
  dq  l1437 ; 484
  dq  l1437 ; 485
  dq  l1437 ; 486
  dq  l1437 ; 487
  dq  l1437 ; 488
  dq  l1437 ; 489
  dq  l1437 ; 490
  dq  l1437 ; 491
  dq  l1437 ; 492
  dq  l1437 ; 493
  dq  l1437 ; 494
  dq  l1437 ; 495
  dq  l1437 ; 496
  dq  l1437 ; 497
  dq  l1437 ; 498
  dq  l1437 ; 499
  dq  l1458 ; 500
  dq  l1459 ; 501
  dq  l1437 ; 502
  dq  l1437 ; 503
  dq  l1437 ; 504
  dq  l1437 ; 505
  dq  l1437 ; 506
  dq  l1437 ; 507
  dq  l1437 ; 508
  dq  l1437 ; 509
  dq  l1437 ; 510
  dq  l1437 ; 511
  dq  l1437 ; 512
  dq  l1437 ; 513
  dq  l1437 ; 514
  dq  l1437 ; 515
  dq  l1437 ; 516
  dq  l1437 ; 517
  dq  l1437 ; 518
  dq  l1437 ; 519
  dq  l1437 ; 520
  dq  l1437 ; 521
  dq  l1437 ; 522
  dq  l1437 ; 523
  dq  l1437 ; 524
  dq  l1437 ; 525
  dq  l1437 ; 526
  dq  l1437 ; 527
  dq  l1437 ; 528
  dq  l1437 ; 529
  dq  l1437 ; 530
  dq  l1437 ; 531
  dq  l1437 ; 532
  dq  l1437 ; 533
  dq  l1437 ; 534
  dq  l1437 ; 535
  dq  l1437 ; 536
  dq  l1437 ; 537
  dq  l1437 ; 538
  dq  l1437 ; 539
  dq  l1437 ; 540
  dq  l1437 ; 541
  dq  l1437 ; 542
  dq  l1437 ; 543
  dq  l1437 ; 544
  dq  l1437 ; 545
  dq  l1437 ; 546
  dq  l1437 ; 547
  dq  l1437 ; 548
  dq  l1437 ; 549
  dq  l1437 ; 550
  dq  l1437 ; 551
  dq  l1437 ; 552
  dq  l1437 ; 553
  dq  l1437 ; 554
  dq  l1437 ; 555
  dq  l1437 ; 556
  dq  l1437 ; 557
  dq  l1437 ; 558
  dq  l1437 ; 559
  dq  l1437 ; 560
  dq  l1437 ; 561
  dq  l1437 ; 562
  dq  l1437 ; 563
  dq  l1437 ; 564
  dq  l1437 ; 565
  dq  l1437 ; 566
  dq  l1437 ; 567
  dq  l1437 ; 568
  dq  l1437 ; 569
  dq  l1437 ; 570
  dq  l1437 ; 571
  dq  l1437 ; 572
  dq  l1437 ; 573
  dq  l1437 ; 574
  dq  l1437 ; 575
  dq  l1437 ; 576
  dq  l1437 ; 577
  dq  l1437 ; 578
  dq  l1437 ; 579
  dq  l1437 ; 580
  dq  l1437 ; 581
  dq  l1437 ; 582
  dq  l1437 ; 583
  dq  l1437 ; 584
  dq  l1437 ; 585
  dq  l1437 ; 586
  dq  l1437 ; 587
  dq  l1437 ; 588
  dq  l1437 ; 589
  dq  l1437 ; 590
  dq  l1437 ; 591
  dq  l1437 ; 592
  dq  l1437 ; 593
  dq  l1437 ; 594
  dq  l1437 ; 595
  dq  l1437 ; 596
  dq  l1437 ; 597
  dq  l1437 ; 598
  dq  l1437 ; 599
  dq  l1476 ; 600
  dq  l1437 ; 601
  dq  l1437 ; 602
  dq  l1437 ; 603
  dq  l1437 ; 604
  dq  l1437 ; 605
  dq  l1437 ; 606
  dq  l1437 ; 607
  dq  l1437 ; 608
  dq  l1437 ; 609
  dq  l1437 ; 610
  dq  l1437 ; 611
  dq  l1437 ; 612
  dq  l1437 ; 613
  dq  l1437 ; 614
  dq  l1437 ; 615
  dq  l1437 ; 616
  dq  l1437 ; 617
  dq  l1437 ; 618
  dq  l1437 ; 619
  dq  l1437 ; 620
  dq  l1437 ; 621
  dq  l1437 ; 622
  dq  l1437 ; 623
  dq  l1437 ; 624
  dq  l1437 ; 625
  dq  l1437 ; 626
  dq  l1437 ; 627
  dq  l1437 ; 628
  dq  l1437 ; 629
  dq  l1437 ; 630
  dq  l1437 ; 631
  dq  l1437 ; 632
  dq  l1437 ; 633
  dq  l1437 ; 634
  dq  l1437 ; 635
  dq  l1437 ; 636
  dq  l1437 ; 637
  dq  l1437 ; 638
  dq  l1437 ; 639
  dq  l1437 ; 640
  dq  l1437 ; 641
  dq  l1437 ; 642
  dq  l1437 ; 643
  dq  l1437 ; 644
  dq  l1437 ; 645
  dq  l1437 ; 646
  dq  l1437 ; 647
  dq  l1437 ; 648
  dq  l1437 ; 649
  dq  l1437 ; 650
  dq  l1437 ; 651
  dq  l1437 ; 652
  dq  l1437 ; 653
  dq  l1437 ; 654
  dq  l1437 ; 655
  dq  l1437 ; 656
  dq  l1437 ; 657
  dq  l1437 ; 658
  dq  l1437 ; 659
  dq  l1437 ; 660
  dq  l1437 ; 661
  dq  l1437 ; 662
  dq  l1437 ; 663
  dq  l1437 ; 664
  dq  l1437 ; 665
  dq  l1437 ; 666
  dq  l1437 ; 667
  dq  l1437 ; 668
  dq  l1437 ; 669
  dq  l1437 ; 670
  dq  l1437 ; 671
  dq  l1437 ; 672
  dq  l1437 ; 673
  dq  l1437 ; 674
  dq  l1437 ; 675
  dq  l1437 ; 676
  dq  l1437 ; 677
  dq  l1437 ; 678
  dq  l1437 ; 679
  dq  l1437 ; 680
  dq  l1437 ; 681
  dq  l1437 ; 682
  dq  l1437 ; 683
  dq  l1437 ; 684
  dq  l1437 ; 685
  dq  l1437 ; 686
  dq  l1437 ; 687
  dq  l1437 ; 688
  dq  l1437 ; 689
  dq  l1437 ; 690
  dq  l1437 ; 691
  dq  l1437 ; 692
  dq  l1437 ; 693
  dq  l1437 ; 694
  dq  l1437 ; 695
  dq  l1437 ; 696
  dq  l1437 ; 697
  dq  l1437 ; 698
  dq  l1437 ; 699
  dq  l1437 ; 700
  dq  l1437 ; 701
  dq  l1437 ; 702
  dq  l1437 ; 703
  dq  l1437 ; 704
  dq  l1437 ; 705
  dq  l1437 ; 706
  dq  l1437 ; 707
  dq  l1437 ; 708
  dq  l1437 ; 709
  dq  l1437 ; 710
  dq  l1437 ; 711
  dq  l1437 ; 712
  dq  l1437 ; 713
  dq  l1437 ; 714
  dq  l1437 ; 715
  dq  l1437 ; 716
  dq  l1437 ; 717
  dq  l1437 ; 718
  dq  l1437 ; 719
  dq  l1437 ; 720
  dq  l1437 ; 721
  dq  l1437 ; 722
  dq  l1437 ; 723
  dq  l1437 ; 724
  dq  l1437 ; 725
  dq  l1437 ; 726
  dq  l1437 ; 727
  dq  l1437 ; 728
  dq  l1437 ; 729
  dq  l1437 ; 730
  dq  l1437 ; 731
  dq  l1437 ; 732
  dq  l1437 ; 733
  dq  l1437 ; 734
  dq  l1437 ; 735
  dq  l1437 ; 736
  dq  l1437 ; 737
  dq  l1437 ; 738
  dq  l1437 ; 739
  dq  l1437 ; 740
  dq  l1437 ; 741
  dq  l1437 ; 742
  dq  l1437 ; 743
  dq  l1437 ; 744
  dq  l1437 ; 745
  dq  l1437 ; 746
  dq  l1437 ; 747
  dq  l1437 ; 748
  dq  l1437 ; 749
  dq  l1437 ; 750
  dq  l1437 ; 751
  dq  l1437 ; 752
  dq  l1437 ; 753
  dq  l1437 ; 754
  dq  l1437 ; 755
  dq  l1437 ; 756
  dq  l1437 ; 757
  dq  l1437 ; 758
  dq  l1437 ; 759
  dq  l1437 ; 760
  dq  l1437 ; 761
  dq  l1437 ; 762
  dq  l1437 ; 763
  dq  l1437 ; 764
  dq  l1437 ; 765
  dq  l1437 ; 766
  dq  l1437 ; 767
  dq  l1437 ; 768
  dq  l1437 ; 769
  dq  l1437 ; 770
  dq  l1437 ; 771
  dq  l1437 ; 772
  dq  l1437 ; 773
  dq  l1437 ; 774
  dq  l1437 ; 775
  dq  l1437 ; 776
  dq  l1437 ; 777
  dq  l1437 ; 778
  dq  l1437 ; 779
  dq  l1437 ; 780
  dq  l1437 ; 781
  dq  l1437 ; 782
  dq  l1437 ; 783
  dq  l1437 ; 784
  dq  l1437 ; 785
  dq  l1437 ; 786
  dq  l1437 ; 787
  dq  l1437 ; 788
  dq  l1437 ; 789
  dq  l1437 ; 790
  dq  l1437 ; 791
  dq  l1437 ; 792
  dq  l1437 ; 793
  dq  l1437 ; 794
  dq  l1437 ; 795
  dq  l1437 ; 796
  dq  l1437 ; 797
  dq  l1437 ; 798
  dq  l1437 ; 799
  dq  l1437 ; 800
  dq  l1437 ; 801
  dq  l1437 ; 802
  dq  l1437 ; 803
  dq  l1437 ; 804
  dq  l1437 ; 805
  dq  l1437 ; 806
  dq  l1437 ; 807
  dq  l1437 ; 808
  dq  l1437 ; 809
  dq  l1437 ; 810
  dq  l1437 ; 811
  dq  l1437 ; 812
  dq  l1437 ; 813
  dq  l1437 ; 814
  dq  l1437 ; 815
  dq  l1437 ; 816
  dq  l1437 ; 817
  dq  l1437 ; 818
  dq  l1437 ; 819
  dq  l1437 ; 820
  dq  l1437 ; 821
  dq  l1437 ; 822
  dq  l1437 ; 823
  dq  l1437 ; 824
  dq  l1437 ; 825
  dq  l1437 ; 826
  dq  l1437 ; 827
  dq  l1437 ; 828
  dq  l1437 ; 829
  dq  l1437 ; 830
  dq  l1437 ; 831
  dq  l1437 ; 832
  dq  l1437 ; 833
  dq  l1437 ; 834
  dq  l1437 ; 835
  dq  l1437 ; 836
  dq  l1437 ; 837
  dq  l1437 ; 838
  dq  l1437 ; 839
  dq  l1437 ; 840
  dq  l1437 ; 841
  dq  l1437 ; 842
  dq  l1437 ; 843
  dq  l1437 ; 844
  dq  l1437 ; 845
  dq  l1437 ; 846
  dq  l1437 ; 847
  dq  l1437 ; 848
  dq  l1437 ; 849
  dq  l1437 ; 850
  dq  l1437 ; 851
  dq  l1437 ; 852
  dq  l1437 ; 853
  dq  l1437 ; 854
  dq  l1437 ; 855
  dq  l1437 ; 856
  dq  l1437 ; 857
  dq  l1437 ; 858
  dq  l1437 ; 859
  dq  l1437 ; 860
  dq  l1437 ; 861
  dq  l1437 ; 862
  dq  l1437 ; 863
  dq  l1437 ; 864
  dq  l1437 ; 865
  dq  l1437 ; 866
  dq  l1437 ; 867
  dq  l1437 ; 868
  dq  l1437 ; 869
  dq  l1437 ; 870
  dq  l1437 ; 871
  dq  l1437 ; 872
  dq  l1437 ; 873
  dq  l1437 ; 874
  dq  l1437 ; 875
  dq  l1437 ; 876
  dq  l1437 ; 877
  dq  l1437 ; 878
  dq  l1437 ; 879
  dq  l1437 ; 880
  dq  l1437 ; 881
  dq  l1437 ; 882
  dq  l1437 ; 883
  dq  l1437 ; 884
  dq  l1437 ; 885
  dq  l1437 ; 886
  dq  l1437 ; 887
  dq  l1437 ; 888
  dq  l1437 ; 889
  dq  l1437 ; 890
  dq  l1437 ; 891
  dq  l1437 ; 892
  dq  l1437 ; 893
  dq  l1437 ; 894
  dq  l1437 ; 895
  dq  l1437 ; 896
  dq  l1437 ; 897
  dq  l1437 ; 898
  dq  l1437 ; 899
  dq  l1437 ; 900
  dq  l1437 ; 901
  dq  l1437 ; 902
  dq  l1437 ; 903
  dq  l1437 ; 904
  dq  l1437 ; 905
  dq  l1437 ; 906
  dq  l1437 ; 907
  dq  l1437 ; 908
  dq  l1437 ; 909
  dq  l1437 ; 910
  dq  l1437 ; 911
  dq  l1437 ; 912
  dq  l1437 ; 913
  dq  l1437 ; 914
  dq  l1437 ; 915
  dq  l1437 ; 916
  dq  l1437 ; 917
  dq  l1437 ; 918
  dq  l1437 ; 919
  dq  l1437 ; 920
  dq  l1437 ; 921
  dq  l1437 ; 922
  dq  l1437 ; 923
  dq  l1437 ; 924
  dq  l1437 ; 925
  dq  l1437 ; 926
  dq  l1437 ; 927
  dq  l1437 ; 928
  dq  l1437 ; 929
  dq  l1437 ; 930
  dq  l1437 ; 931
  dq  l1437 ; 932
  dq  l1437 ; 933
  dq  l1437 ; 934
  dq  l1437 ; 935
  dq  l1437 ; 936
  dq  l1437 ; 937
  dq  l1437 ; 938
  dq  l1437 ; 939
  dq  l1437 ; 940
  dq  l1437 ; 941
  dq  l1437 ; 942
  dq  l1437 ; 943
  dq  l1437 ; 944
  dq  l1437 ; 945
  dq  l1437 ; 946
  dq  l1437 ; 947
  dq  l1437 ; 948
  dq  l1437 ; 949
  dq  l1437 ; 950
  dq  l1437 ; 951
  dq  l1437 ; 952
  dq  l1437 ; 953
  dq  l1437 ; 954
  dq  l1437 ; 955
  dq  l1437 ; 956
  dq  l1437 ; 957
  dq  l1437 ; 958
  dq  l1437 ; 959
  dq  l1437 ; 960
  dq  l1437 ; 961
  dq  l1437 ; 962
  dq  l1437 ; 963
  dq  l1437 ; 964
  dq  l1437 ; 965
  dq  l1437 ; 966
  dq  l1437 ; 967
  dq  l1437 ; 968
  dq  l1437 ; 969
  dq  l1437 ; 970
  dq  l1437 ; 971
  dq  l1437 ; 972
  dq  l1437 ; 973
  dq  l1437 ; 974
  dq  l1437 ; 975
  dq  l1437 ; 976
  dq  l1437 ; 977
  dq  l1437 ; 978
  dq  l1437 ; 979
  dq  l1437 ; 980
  dq  l1437 ; 981
  dq  l1437 ; 982
  dq  l1437 ; 983
  dq  l1437 ; 984
  dq  l1437 ; 985
  dq  l1437 ; 986
  dq  l1437 ; 987
  dq  l1437 ; 988
  dq  l1437 ; 989
  dq  l1437 ; 990
  dq  l1437 ; 991
  dq  l1437 ; 992
  dq  l1437 ; 993
  dq  l1437 ; 994
  dq  l1437 ; 995
  dq  l1437 ; 996
  dq  l1437 ; 997
  dq  l1437 ; 998
  dq  l1475 ; 999
__jmptable1485:
  dq  l1484 ; 0
  dq  l1488 ; 1
  dq  l1490 ; 2
  dq  l1490 ; 3
  dq  l1489 ; 4
  dq  l1491 ; 5
  dq  l1484 ; 6
  dq  l1484 ; 7
  dq  l1484 ; 8
  dq  l1492 ; 9
  dq  l1493 ; 10
  dq  l1484 ; 11
  dq  l1484 ; 12
  dq  l1484 ; 13
  dq  l1484 ; 14
  dq  l1484 ; 15
  dq  l1484 ; 16
  dq  l1484 ; 17
  dq  l1484 ; 18
  dq  l1484 ; 19
  dq  l1484 ; 20
  dq  l1484 ; 21
  dq  l1484 ; 22
  dq  l1484 ; 23
  dq  l1484 ; 24
  dq  l1484 ; 25
  dq  l1484 ; 26
  dq  l1484 ; 27
  dq  l1484 ; 28
  dq  l1484 ; 29
  dq  l1484 ; 30
  dq  l1484 ; 31
  dq  l1484 ; 32
  dq  l1484 ; 33
  dq  l1484 ; 34
  dq  l1484 ; 35
  dq  l1484 ; 36
  dq  l1484 ; 37
  dq  l1484 ; 38
  dq  l1484 ; 39
  dq  l1484 ; 40
  dq  l1484 ; 41
  dq  l1484 ; 42
  dq  l1484 ; 43
  dq  l1484 ; 44
  dq  l1484 ; 45
  dq  l1484 ; 46
  dq  l1484 ; 47
  dq  l1484 ; 48
  dq  l1484 ; 49
  dq  l1484 ; 50
  dq  l1484 ; 51
  dq  l1484 ; 52
  dq  l1484 ; 53
  dq  l1484 ; 54
  dq  l1484 ; 55
  dq  l1484 ; 56
  dq  l1484 ; 57
  dq  l1484 ; 58
  dq  l1484 ; 59
  dq  l1484 ; 60
  dq  l1484 ; 61
  dq  l1484 ; 62
  dq  l1484 ; 63
  dq  l1484 ; 64
  dq  l1484 ; 65
  dq  l1484 ; 66
  dq  l1484 ; 67
  dq  l1484 ; 68
  dq  l1484 ; 69
  dq  l1484 ; 70
  dq  l1484 ; 71
  dq  l1484 ; 72
  dq  l1484 ; 73
  dq  l1484 ; 74
  dq  l1484 ; 75
  dq  l1484 ; 76
  dq  l1484 ; 77
  dq  l1484 ; 78
  dq  l1484 ; 79
  dq  l1484 ; 80
  dq  l1484 ; 81
  dq  l1484 ; 82
  dq  l1484 ; 83
  dq  l1484 ; 84
  dq  l1484 ; 85
  dq  l1484 ; 86
  dq  l1484 ; 87
  dq  l1484 ; 88
  dq  l1484 ; 89
  dq  l1484 ; 90
  dq  l1484 ; 91
  dq  l1484 ; 92
  dq  l1484 ; 93
  dq  l1484 ; 94
  dq  l1484 ; 95
  dq  l1484 ; 96
  dq  l1484 ; 97
  dq  l1484 ; 98
  dq  l1484 ; 99
  dq  l1484 ; 100
  dq  l1512 ; 101
  dq  l1484 ; 102
  dq  l1484 ; 103
  dq  l1484 ; 104
  dq  l1484 ; 105
  dq  l1511 ; 106
  dq  l1510 ; 107
  dq  l1484 ; 108
  dq  l1484 ; 109
  dq  l1484 ; 110
  dq  l1484 ; 111
  dq  l1484 ; 112
  dq  l1484 ; 113
  dq  l1484 ; 114
  dq  l1484 ; 115
  dq  l1484 ; 116
  dq  l1484 ; 117
  dq  l1484 ; 118
  dq  l1484 ; 119
  dq  l1484 ; 120
  dq  l1484 ; 121
  dq  l1484 ; 122
  dq  l1484 ; 123
  dq  l1484 ; 124
  dq  l1484 ; 125
  dq  l1484 ; 126
  dq  l1484 ; 127
  dq  l1484 ; 128
  dq  l1484 ; 129
  dq  l1484 ; 130
  dq  l1484 ; 131
  dq  l1484 ; 132
  dq  l1484 ; 133
  dq  l1484 ; 134
  dq  l1484 ; 135
  dq  l1484 ; 136
  dq  l1484 ; 137
  dq  l1484 ; 138
  dq  l1484 ; 139
  dq  l1484 ; 140
  dq  l1484 ; 141
  dq  l1484 ; 142
  dq  l1484 ; 143
  dq  l1484 ; 144
  dq  l1484 ; 145
  dq  l1484 ; 146
  dq  l1484 ; 147
  dq  l1484 ; 148
  dq  l1484 ; 149
  dq  l1516 ; 150
  dq  l1484 ; 151
  dq  l1509 ; 152
  dq  l1515 ; 153
  dq  l1484 ; 154
  dq  l1484 ; 155
  dq  l1484 ; 156
  dq  l1484 ; 157
  dq  l1484 ; 158
  dq  l1484 ; 159
  dq  l1514 ; 160
  dq  l1517 ; 161
  dq  l1518 ; 162
  dq  l1521 ; 163
  dq  l1519 ; 164
  dq  l1520 ; 165
  dq  l1484 ; 166
  dq  l1484 ; 167
  dq  l1484 ; 168
  dq  l1484 ; 169
  dq  l1484 ; 170
  dq  l1484 ; 171
  dq  l1484 ; 172
  dq  l1484 ; 173
  dq  l1484 ; 174
  dq  l1484 ; 175
  dq  l1484 ; 176
  dq  l1484 ; 177
  dq  l1484 ; 178
  dq  l1484 ; 179
  dq  l1484 ; 180
  dq  l1484 ; 181
  dq  l1484 ; 182
  dq  l1484 ; 183
  dq  l1484 ; 184
  dq  l1484 ; 185
  dq  l1484 ; 186
  dq  l1484 ; 187
  dq  l1484 ; 188
  dq  l1484 ; 189
  dq  l1484 ; 190
  dq  l1484 ; 191
  dq  l1484 ; 192
  dq  l1484 ; 193
  dq  l1484 ; 194
  dq  l1484 ; 195
  dq  l1484 ; 196
  dq  l1484 ; 197
  dq  l1484 ; 198
  dq  l1484 ; 199
  dq  l1484 ; 200
  dq  l1508 ; 201
  dq  l1484 ; 202
  dq  l1486 ; 203
  dq  l1487 ; 204
  dq  l1513 ; 205
  dq  l1484 ; 206
  dq  l1484 ; 207
  dq  l1484 ; 208
  dq  l1484 ; 209
  dq  l1484 ; 210
  dq  l1484 ; 211
  dq  l1484 ; 212
  dq  l1484 ; 213
  dq  l1484 ; 214
  dq  l1484 ; 215
  dq  l1484 ; 216
  dq  l1484 ; 217
  dq  l1484 ; 218
  dq  l1484 ; 219
  dq  l1484 ; 220
  dq  l1484 ; 221
  dq  l1484 ; 222
  dq  l1484 ; 223
  dq  l1484 ; 224
  dq  l1484 ; 225
  dq  l1484 ; 226
  dq  l1484 ; 227
  dq  l1484 ; 228
  dq  l1484 ; 229
  dq  l1484 ; 230
  dq  l1484 ; 231
  dq  l1484 ; 232
  dq  l1484 ; 233
  dq  l1484 ; 234
  dq  l1484 ; 235
  dq  l1484 ; 236
  dq  l1484 ; 237
  dq  l1484 ; 238
  dq  l1484 ; 239
  dq  l1484 ; 240
  dq  l1484 ; 241
  dq  l1484 ; 242
  dq  l1484 ; 243
  dq  l1484 ; 244
  dq  l1484 ; 245
  dq  l1484 ; 246
  dq  l1484 ; 247
  dq  l1484 ; 248
  dq  l1484 ; 249
  dq  l1484 ; 250
  dq  l1484 ; 251
  dq  l1484 ; 252
  dq  l1484 ; 253
  dq  l1484 ; 254
  dq  l1484 ; 255
  dq  l1484 ; 256
  dq  l1484 ; 257
  dq  l1484 ; 258
  dq  l1484 ; 259
  dq  l1484 ; 260
  dq  l1484 ; 261
  dq  l1484 ; 262
  dq  l1484 ; 263
  dq  l1484 ; 264
  dq  l1484 ; 265
  dq  l1484 ; 266
  dq  l1484 ; 267
  dq  l1484 ; 268
  dq  l1484 ; 269
  dq  l1484 ; 270
  dq  l1484 ; 271
  dq  l1484 ; 272
  dq  l1484 ; 273
  dq  l1484 ; 274
  dq  l1484 ; 275
  dq  l1484 ; 276
  dq  l1484 ; 277
  dq  l1484 ; 278
  dq  l1484 ; 279
  dq  l1484 ; 280
  dq  l1484 ; 281
  dq  l1484 ; 282
  dq  l1484 ; 283
  dq  l1484 ; 284
  dq  l1484 ; 285
  dq  l1484 ; 286
  dq  l1484 ; 287
  dq  l1484 ; 288
  dq  l1484 ; 289
  dq  l1484 ; 290
  dq  l1484 ; 291
  dq  l1484 ; 292
  dq  l1484 ; 293
  dq  l1484 ; 294
  dq  l1484 ; 295
  dq  l1484 ; 296
  dq  l1484 ; 297
  dq  l1484 ; 298
  dq  l1484 ; 299
  dq  l1484 ; 300
  dq  l1496 ; 301
  dq  l1497 ; 302
  dq  l1496 ; 303
  dq  l1499 ; 304
  dq  l1500 ; 305
  dq  l1484 ; 306
  dq  l1484 ; 307
  dq  l1501 ; 308
  dq  l1484 ; 309
  dq  l1484 ; 310
  dq  l1484 ; 311
  dq  l1484 ; 312
  dq  l1484 ; 313
  dq  l1484 ; 314
  dq  l1484 ; 315
  dq  l1484 ; 316
  dq  l1484 ; 317
  dq  l1484 ; 318
  dq  l1484 ; 319
  dq  l1484 ; 320
  dq  l1484 ; 321
  dq  l1484 ; 322
  dq  l1484 ; 323
  dq  l1484 ; 324
  dq  l1484 ; 325
  dq  l1484 ; 326
  dq  l1484 ; 327
  dq  l1484 ; 328
  dq  l1484 ; 329
  dq  l1484 ; 330
  dq  l1484 ; 331
  dq  l1484 ; 332
  dq  l1484 ; 333
  dq  l1484 ; 334
  dq  l1484 ; 335
  dq  l1484 ; 336
  dq  l1484 ; 337
  dq  l1484 ; 338
  dq  l1484 ; 339
  dq  l1484 ; 340
  dq  l1484 ; 341
  dq  l1484 ; 342
  dq  l1484 ; 343
  dq  l1484 ; 344
  dq  l1484 ; 345
  dq  l1484 ; 346
  dq  l1484 ; 347
  dq  l1484 ; 348
  dq  l1484 ; 349
  dq  l1498 ; 350
  dq  l1484 ; 351
  dq  l1484 ; 352
  dq  l1484 ; 353
  dq  l1484 ; 354
  dq  l1484 ; 355
  dq  l1484 ; 356
  dq  l1484 ; 357
  dq  l1484 ; 358
  dq  l1484 ; 359
  dq  l1484 ; 360
  dq  l1484 ; 361
  dq  l1484 ; 362
  dq  l1484 ; 363
  dq  l1484 ; 364
  dq  l1484 ; 365
  dq  l1484 ; 366
  dq  l1484 ; 367
  dq  l1484 ; 368
  dq  l1484 ; 369
  dq  l1484 ; 370
  dq  l1484 ; 371
  dq  l1484 ; 372
  dq  l1484 ; 373
  dq  l1484 ; 374
  dq  l1484 ; 375
  dq  l1484 ; 376
  dq  l1484 ; 377
  dq  l1484 ; 378
  dq  l1484 ; 379
  dq  l1484 ; 380
  dq  l1484 ; 381
  dq  l1484 ; 382
  dq  l1484 ; 383
  dq  l1484 ; 384
  dq  l1484 ; 385
  dq  l1484 ; 386
  dq  l1484 ; 387
  dq  l1484 ; 388
  dq  l1484 ; 389
  dq  l1484 ; 390
  dq  l1484 ; 391
  dq  l1484 ; 392
  dq  l1484 ; 393
  dq  l1484 ; 394
  dq  l1484 ; 395
  dq  l1484 ; 396
  dq  l1484 ; 397
  dq  l1484 ; 398
  dq  l1484 ; 399
  dq  l1502 ; 400
  dq  l1503 ; 401
  dq  l1506 ; 402
  dq  l1507 ; 403
  dq  l1504 ; 404
  dq  l1505 ; 405
  dq  l1484 ; 406
  dq  l1484 ; 407
  dq  l1484 ; 408
  dq  l1484 ; 409
  dq  l1484 ; 410
  dq  l1484 ; 411
  dq  l1484 ; 412
  dq  l1484 ; 413
  dq  l1484 ; 414
  dq  l1484 ; 415
  dq  l1484 ; 416
  dq  l1484 ; 417
  dq  l1484 ; 418
  dq  l1484 ; 419
  dq  l1484 ; 420
  dq  l1484 ; 421
  dq  l1484 ; 422
  dq  l1484 ; 423
  dq  l1484 ; 424
  dq  l1484 ; 425
  dq  l1484 ; 426
  dq  l1484 ; 427
  dq  l1484 ; 428
  dq  l1484 ; 429
  dq  l1484 ; 430
  dq  l1484 ; 431
  dq  l1484 ; 432
  dq  l1484 ; 433
  dq  l1484 ; 434
  dq  l1484 ; 435
  dq  l1484 ; 436
  dq  l1484 ; 437
  dq  l1484 ; 438
  dq  l1484 ; 439
  dq  l1484 ; 440
  dq  l1484 ; 441
  dq  l1484 ; 442
  dq  l1484 ; 443
  dq  l1484 ; 444
  dq  l1484 ; 445
  dq  l1484 ; 446
  dq  l1484 ; 447
  dq  l1484 ; 448
  dq  l1484 ; 449
  dq  l1484 ; 450
  dq  l1484 ; 451
  dq  l1484 ; 452
  dq  l1484 ; 453
  dq  l1484 ; 454
  dq  l1484 ; 455
  dq  l1484 ; 456
  dq  l1484 ; 457
  dq  l1484 ; 458
  dq  l1484 ; 459
  dq  l1484 ; 460
  dq  l1484 ; 461
  dq  l1484 ; 462
  dq  l1484 ; 463
  dq  l1484 ; 464
  dq  l1484 ; 465
  dq  l1484 ; 466
  dq  l1484 ; 467
  dq  l1484 ; 468
  dq  l1484 ; 469
  dq  l1484 ; 470
  dq  l1484 ; 471
  dq  l1484 ; 472
  dq  l1484 ; 473
  dq  l1484 ; 474
  dq  l1484 ; 475
  dq  l1484 ; 476
  dq  l1484 ; 477
  dq  l1484 ; 478
  dq  l1484 ; 479
  dq  l1484 ; 480
  dq  l1484 ; 481
  dq  l1484 ; 482
  dq  l1484 ; 483
  dq  l1484 ; 484
  dq  l1484 ; 485
  dq  l1484 ; 486
  dq  l1484 ; 487
  dq  l1484 ; 488
  dq  l1484 ; 489
  dq  l1484 ; 490
  dq  l1484 ; 491
  dq  l1484 ; 492
  dq  l1484 ; 493
  dq  l1484 ; 494
  dq  l1484 ; 495
  dq  l1484 ; 496
  dq  l1484 ; 497
  dq  l1484 ; 498
  dq  l1484 ; 499
  dq  l1494 ; 500
  dq  l1495 ; 501
  dq  l1484 ; 502
  dq  l1484 ; 503
  dq  l1484 ; 504
  dq  l1484 ; 505
  dq  l1484 ; 506
  dq  l1484 ; 507
  dq  l1484 ; 508
  dq  l1484 ; 509
  dq  l1484 ; 510
  dq  l1484 ; 511
  dq  l1484 ; 512
  dq  l1484 ; 513
  dq  l1484 ; 514
  dq  l1484 ; 515
  dq  l1484 ; 516
  dq  l1484 ; 517
  dq  l1484 ; 518
  dq  l1484 ; 519
  dq  l1484 ; 520
  dq  l1484 ; 521
  dq  l1484 ; 522
  dq  l1484 ; 523
  dq  l1484 ; 524
  dq  l1484 ; 525
  dq  l1484 ; 526
  dq  l1484 ; 527
  dq  l1484 ; 528
  dq  l1484 ; 529
  dq  l1484 ; 530
  dq  l1484 ; 531
  dq  l1484 ; 532
  dq  l1484 ; 533
  dq  l1484 ; 534
  dq  l1484 ; 535
  dq  l1484 ; 536
  dq  l1484 ; 537
  dq  l1484 ; 538
  dq  l1484 ; 539
  dq  l1484 ; 540
  dq  l1484 ; 541
  dq  l1484 ; 542
  dq  l1484 ; 543
  dq  l1484 ; 544
  dq  l1484 ; 545
  dq  l1484 ; 546
  dq  l1484 ; 547
  dq  l1484 ; 548
  dq  l1484 ; 549
  dq  l1484 ; 550
  dq  l1484 ; 551
  dq  l1484 ; 552
  dq  l1484 ; 553
  dq  l1484 ; 554
  dq  l1484 ; 555
  dq  l1484 ; 556
  dq  l1484 ; 557
  dq  l1484 ; 558
  dq  l1484 ; 559
  dq  l1484 ; 560
  dq  l1484 ; 561
  dq  l1484 ; 562
  dq  l1484 ; 563
  dq  l1484 ; 564
  dq  l1484 ; 565
  dq  l1484 ; 566
  dq  l1484 ; 567
  dq  l1484 ; 568
  dq  l1484 ; 569
  dq  l1484 ; 570
  dq  l1484 ; 571
  dq  l1484 ; 572
  dq  l1484 ; 573
  dq  l1484 ; 574
  dq  l1484 ; 575
  dq  l1484 ; 576
  dq  l1484 ; 577
  dq  l1484 ; 578
  dq  l1484 ; 579
  dq  l1484 ; 580
  dq  l1484 ; 581
  dq  l1484 ; 582
  dq  l1484 ; 583
  dq  l1484 ; 584
  dq  l1484 ; 585
  dq  l1484 ; 586
  dq  l1484 ; 587
  dq  l1484 ; 588
  dq  l1484 ; 589
  dq  l1484 ; 590
  dq  l1484 ; 591
  dq  l1484 ; 592
  dq  l1484 ; 593
  dq  l1484 ; 594
  dq  l1484 ; 595
  dq  l1484 ; 596
  dq  l1484 ; 597
  dq  l1484 ; 598
  dq  l1484 ; 599
  dq  l1522 ; 600
  dq  l1484 ; 601
  dq  l1484 ; 602
  dq  l1484 ; 603
  dq  l1484 ; 604
  dq  l1484 ; 605
  dq  l1484 ; 606
  dq  l1484 ; 607
  dq  l1484 ; 608
  dq  l1484 ; 609
  dq  l1484 ; 610
  dq  l1484 ; 611
  dq  l1484 ; 612
  dq  l1484 ; 613
  dq  l1484 ; 614
  dq  l1484 ; 615
  dq  l1484 ; 616
  dq  l1484 ; 617
  dq  l1484 ; 618
  dq  l1484 ; 619
  dq  l1484 ; 620
  dq  l1484 ; 621
  dq  l1484 ; 622
  dq  l1484 ; 623
  dq  l1484 ; 624
  dq  l1484 ; 625
  dq  l1484 ; 626
  dq  l1484 ; 627
  dq  l1484 ; 628
  dq  l1484 ; 629
  dq  l1484 ; 630
  dq  l1484 ; 631
  dq  l1484 ; 632
  dq  l1484 ; 633
  dq  l1484 ; 634
  dq  l1484 ; 635
  dq  l1484 ; 636
  dq  l1484 ; 637
  dq  l1484 ; 638
  dq  l1484 ; 639
  dq  l1484 ; 640
  dq  l1484 ; 641
  dq  l1484 ; 642
  dq  l1484 ; 643
  dq  l1484 ; 644
  dq  l1484 ; 645
  dq  l1484 ; 646
  dq  l1484 ; 647
  dq  l1484 ; 648
  dq  l1484 ; 649
  dq  l1484 ; 650
  dq  l1484 ; 651
  dq  l1484 ; 652
  dq  l1484 ; 653
  dq  l1484 ; 654
  dq  l1484 ; 655
  dq  l1484 ; 656
  dq  l1484 ; 657
  dq  l1484 ; 658
  dq  l1484 ; 659
  dq  l1484 ; 660
  dq  l1484 ; 661
  dq  l1484 ; 662
  dq  l1484 ; 663
  dq  l1484 ; 664
  dq  l1484 ; 665
  dq  l1484 ; 666
  dq  l1484 ; 667
  dq  l1484 ; 668
  dq  l1484 ; 669
  dq  l1484 ; 670
  dq  l1484 ; 671
  dq  l1484 ; 672
  dq  l1484 ; 673
  dq  l1484 ; 674
  dq  l1484 ; 675
  dq  l1484 ; 676
  dq  l1484 ; 677
  dq  l1484 ; 678
  dq  l1484 ; 679
  dq  l1484 ; 680
  dq  l1484 ; 681
  dq  l1484 ; 682
  dq  l1484 ; 683
  dq  l1484 ; 684
  dq  l1484 ; 685
  dq  l1484 ; 686
  dq  l1484 ; 687
  dq  l1484 ; 688
  dq  l1484 ; 689
  dq  l1484 ; 690
  dq  l1484 ; 691
  dq  l1484 ; 692
  dq  l1484 ; 693
  dq  l1484 ; 694
  dq  l1484 ; 695
  dq  l1484 ; 696
  dq  l1484 ; 697
  dq  l1484 ; 698
  dq  l1484 ; 699
  dq  l1484 ; 700
  dq  l1484 ; 701
  dq  l1484 ; 702
  dq  l1484 ; 703
  dq  l1484 ; 704
  dq  l1484 ; 705
  dq  l1484 ; 706
  dq  l1484 ; 707
  dq  l1484 ; 708
  dq  l1484 ; 709
  dq  l1484 ; 710
  dq  l1484 ; 711
  dq  l1484 ; 712
  dq  l1484 ; 713
  dq  l1484 ; 714
  dq  l1484 ; 715
  dq  l1484 ; 716
  dq  l1484 ; 717
  dq  l1484 ; 718
  dq  l1484 ; 719
  dq  l1484 ; 720
  dq  l1484 ; 721
  dq  l1484 ; 722
  dq  l1484 ; 723
  dq  l1484 ; 724
  dq  l1484 ; 725
  dq  l1484 ; 726
  dq  l1484 ; 727
  dq  l1484 ; 728
  dq  l1484 ; 729
  dq  l1484 ; 730
  dq  l1484 ; 731
  dq  l1484 ; 732
  dq  l1484 ; 733
  dq  l1484 ; 734
  dq  l1484 ; 735
  dq  l1484 ; 736
  dq  l1484 ; 737
  dq  l1484 ; 738
  dq  l1484 ; 739
  dq  l1484 ; 740
  dq  l1484 ; 741
  dq  l1484 ; 742
  dq  l1484 ; 743
  dq  l1484 ; 744
  dq  l1484 ; 745
  dq  l1484 ; 746
  dq  l1484 ; 747
  dq  l1484 ; 748
  dq  l1484 ; 749
  dq  l1484 ; 750
  dq  l1484 ; 751
  dq  l1484 ; 752
  dq  l1484 ; 753
  dq  l1484 ; 754
  dq  l1484 ; 755
  dq  l1484 ; 756
  dq  l1484 ; 757
  dq  l1484 ; 758
  dq  l1484 ; 759
  dq  l1484 ; 760
  dq  l1484 ; 761
  dq  l1484 ; 762
  dq  l1484 ; 763
  dq  l1484 ; 764
  dq  l1484 ; 765
  dq  l1484 ; 766
  dq  l1484 ; 767
  dq  l1484 ; 768
  dq  l1484 ; 769
  dq  l1484 ; 770
  dq  l1484 ; 771
  dq  l1484 ; 772
  dq  l1484 ; 773
  dq  l1484 ; 774
  dq  l1484 ; 775
  dq  l1484 ; 776
  dq  l1484 ; 777
  dq  l1484 ; 778
  dq  l1484 ; 779
  dq  l1484 ; 780
  dq  l1484 ; 781
  dq  l1484 ; 782
  dq  l1484 ; 783
  dq  l1484 ; 784
  dq  l1484 ; 785
  dq  l1484 ; 786
  dq  l1484 ; 787
  dq  l1484 ; 788
  dq  l1484 ; 789
  dq  l1484 ; 790
  dq  l1484 ; 791
  dq  l1484 ; 792
  dq  l1484 ; 793
  dq  l1484 ; 794
  dq  l1484 ; 795
  dq  l1484 ; 796
  dq  l1484 ; 797
  dq  l1484 ; 798
  dq  l1484 ; 799
  dq  l1484 ; 800
  dq  l1484 ; 801
  dq  l1484 ; 802
  dq  l1484 ; 803
  dq  l1484 ; 804
  dq  l1484 ; 805
  dq  l1484 ; 806
  dq  l1484 ; 807
  dq  l1484 ; 808
  dq  l1484 ; 809
  dq  l1484 ; 810
  dq  l1484 ; 811
  dq  l1484 ; 812
  dq  l1484 ; 813
  dq  l1484 ; 814
  dq  l1484 ; 815
  dq  l1484 ; 816
  dq  l1484 ; 817
  dq  l1484 ; 818
  dq  l1484 ; 819
  dq  l1484 ; 820
  dq  l1484 ; 821
  dq  l1484 ; 822
  dq  l1484 ; 823
  dq  l1484 ; 824
  dq  l1484 ; 825
  dq  l1484 ; 826
  dq  l1484 ; 827
  dq  l1484 ; 828
  dq  l1484 ; 829
  dq  l1484 ; 830
  dq  l1484 ; 831
  dq  l1484 ; 832
  dq  l1484 ; 833
  dq  l1484 ; 834
  dq  l1484 ; 835
  dq  l1484 ; 836
  dq  l1484 ; 837
  dq  l1484 ; 838
  dq  l1484 ; 839
  dq  l1484 ; 840
  dq  l1484 ; 841
  dq  l1484 ; 842
  dq  l1484 ; 843
  dq  l1484 ; 844
  dq  l1484 ; 845
  dq  l1484 ; 846
  dq  l1484 ; 847
  dq  l1484 ; 848
  dq  l1484 ; 849
  dq  l1484 ; 850
  dq  l1484 ; 851
  dq  l1484 ; 852
  dq  l1484 ; 853
  dq  l1484 ; 854
  dq  l1484 ; 855
  dq  l1484 ; 856
  dq  l1484 ; 857
  dq  l1484 ; 858
  dq  l1484 ; 859
  dq  l1484 ; 860
  dq  l1484 ; 861
  dq  l1484 ; 862
  dq  l1484 ; 863
  dq  l1484 ; 864
  dq  l1484 ; 865
  dq  l1484 ; 866
  dq  l1484 ; 867
  dq  l1484 ; 868
  dq  l1484 ; 869
  dq  l1484 ; 870
  dq  l1484 ; 871
  dq  l1484 ; 872
  dq  l1484 ; 873
  dq  l1484 ; 874
  dq  l1484 ; 875
  dq  l1484 ; 876
  dq  l1484 ; 877
  dq  l1484 ; 878
  dq  l1484 ; 879
  dq  l1484 ; 880
  dq  l1484 ; 881
  dq  l1484 ; 882
  dq  l1484 ; 883
  dq  l1484 ; 884
  dq  l1484 ; 885
  dq  l1484 ; 886
  dq  l1484 ; 887
  dq  l1484 ; 888
  dq  l1484 ; 889
  dq  l1484 ; 890
  dq  l1484 ; 891
  dq  l1484 ; 892
  dq  l1484 ; 893
  dq  l1484 ; 894
  dq  l1484 ; 895
  dq  l1484 ; 896
  dq  l1484 ; 897
  dq  l1484 ; 898
  dq  l1484 ; 899
  dq  l1484 ; 900
  dq  l1484 ; 901
  dq  l1484 ; 902
  dq  l1484 ; 903
  dq  l1484 ; 904
  dq  l1484 ; 905
  dq  l1484 ; 906
  dq  l1484 ; 907
  dq  l1484 ; 908
  dq  l1484 ; 909
  dq  l1484 ; 910
  dq  l1484 ; 911
  dq  l1484 ; 912
  dq  l1484 ; 913
  dq  l1484 ; 914
  dq  l1484 ; 915
  dq  l1484 ; 916
  dq  l1484 ; 917
  dq  l1484 ; 918
  dq  l1484 ; 919
  dq  l1484 ; 920
  dq  l1484 ; 921
  dq  l1484 ; 922
  dq  l1484 ; 923
  dq  l1484 ; 924
  dq  l1484 ; 925
  dq  l1484 ; 926
  dq  l1484 ; 927
  dq  l1484 ; 928
  dq  l1484 ; 929
  dq  l1484 ; 930
  dq  l1484 ; 931
  dq  l1484 ; 932
  dq  l1484 ; 933
  dq  l1484 ; 934
  dq  l1484 ; 935
  dq  l1484 ; 936
  dq  l1484 ; 937
  dq  l1484 ; 938
  dq  l1484 ; 939
  dq  l1484 ; 940
  dq  l1484 ; 941
  dq  l1484 ; 942
  dq  l1484 ; 943
  dq  l1484 ; 944
  dq  l1484 ; 945
  dq  l1484 ; 946
  dq  l1484 ; 947
  dq  l1484 ; 948
  dq  l1484 ; 949
  dq  l1484 ; 950
  dq  l1484 ; 951
  dq  l1484 ; 952
  dq  l1484 ; 953
  dq  l1484 ; 954
  dq  l1484 ; 955
  dq  l1484 ; 956
  dq  l1484 ; 957
  dq  l1484 ; 958
  dq  l1484 ; 959
  dq  l1484 ; 960
  dq  l1484 ; 961
  dq  l1484 ; 962
  dq  l1484 ; 963
  dq  l1484 ; 964
  dq  l1484 ; 965
  dq  l1484 ; 966
  dq  l1484 ; 967
  dq  l1484 ; 968
  dq  l1484 ; 969
  dq  l1484 ; 970
  dq  l1484 ; 971
  dq  l1484 ; 972
  dq  l1484 ; 973
  dq  l1484 ; 974
  dq  l1484 ; 975
  dq  l1484 ; 976
  dq  l1484 ; 977
  dq  l1484 ; 978
  dq  l1484 ; 979
  dq  l1484 ; 980
  dq  l1484 ; 981
  dq  l1484 ; 982
  dq  l1484 ; 983
  dq  l1484 ; 984
  dq  l1484 ; 985
  dq  l1484 ; 986
  dq  l1484 ; 987
  dq  l1484 ; 988
  dq  l1484 ; 989
  dq  l1484 ; 990
  dq  l1484 ; 991
  dq  l1484 ; 992
  dq  l1484 ; 993
  dq  l1484 ; 994
  dq  l1484 ; 995
  dq  l1484 ; 996
  dq  l1484 ; 997
  dq  l1484 ; 998
  dq  l1523 ; 999
__jmptable1725:
  dq  l1724 ; 0
  dq  l1724 ; 1
  dq  l1724 ; 2
  dq  l1724 ; 3
  dq  l1724 ; 4
  dq  l1724 ; 5
  dq  l1724 ; 6
  dq  l1724 ; 7
  dq  l1724 ; 8
  dq  l1724 ; 9
  dq  l1724 ; 10
  dq  l1724 ; 11
  dq  l1724 ; 12
  dq  l1724 ; 13
  dq  l1724 ; 14
  dq  l1724 ; 15
  dq  l1724 ; 16
  dq  l1724 ; 17
  dq  l1724 ; 18
  dq  l1724 ; 19
  dq  l1724 ; 20
  dq  l1724 ; 21
  dq  l1724 ; 22
  dq  l1724 ; 23
  dq  l1724 ; 24
  dq  l1724 ; 25
  dq  l1724 ; 26
  dq  l1724 ; 27
  dq  l1724 ; 28
  dq  l1724 ; 29
  dq  l1724 ; 30
  dq  l1724 ; 31
  dq  l1724 ; 32
  dq  l1724 ; 33
  dq  l1724 ; 34
  dq  l1724 ; 35
  dq  l1724 ; 36
  dq  l1724 ; 37
  dq  l1724 ; 38
  dq  l1724 ; 39
  dq  l1724 ; 40
  dq  l1724 ; 41
  dq  l1724 ; 42
  dq  l1724 ; 43
  dq  l1724 ; 44
  dq  l1724 ; 45
  dq  l1724 ; 46
  dq  l1724 ; 47
  dq  l1724 ; 48
  dq  l1724 ; 49
  dq  l1724 ; 50
  dq  l1724 ; 51
  dq  l1724 ; 52
  dq  l1724 ; 53
  dq  l1724 ; 54
  dq  l1724 ; 55
  dq  l1724 ; 56
  dq  l1724 ; 57
  dq  l1724 ; 58
  dq  l1724 ; 59
  dq  l1724 ; 60
  dq  l1724 ; 61
  dq  l1724 ; 62
  dq  l1724 ; 63
  dq  l1724 ; 64
  dq  l1724 ; 65
  dq  l1724 ; 66
  dq  l1724 ; 67
  dq  l1724 ; 68
  dq  l1724 ; 69
  dq  l1724 ; 70
  dq  l1724 ; 71
  dq  l1724 ; 72
  dq  l1724 ; 73
  dq  l1724 ; 74
  dq  l1724 ; 75
  dq  l1724 ; 76
  dq  l1724 ; 77
  dq  l1724 ; 78
  dq  l1724 ; 79
  dq  l1724 ; 80
  dq  l1724 ; 81
  dq  l1724 ; 82
  dq  l1724 ; 83
  dq  l1724 ; 84
  dq  l1724 ; 85
  dq  l1724 ; 86
  dq  l1724 ; 87
  dq  l1724 ; 88
  dq  l1724 ; 89
  dq  l1724 ; 90
  dq  l1724 ; 91
  dq  l1724 ; 92
  dq  l1724 ; 93
  dq  l1724 ; 94
  dq  l1724 ; 95
  dq  l1724 ; 96
  dq  l1724 ; 97
  dq  l1724 ; 98
  dq  l1724 ; 99
  dq  l1724 ; 100
  dq  l1724 ; 101
  dq  l1724 ; 102
  dq  l1724 ; 103
  dq  l1724 ; 104
  dq  l1724 ; 105
  dq  l1724 ; 106
  dq  l1731 ; 107
  dq  l1724 ; 108
  dq  l1724 ; 109
  dq  l1724 ; 110
  dq  l1724 ; 111
  dq  l1724 ; 112
  dq  l1724 ; 113
  dq  l1724 ; 114
  dq  l1724 ; 115
  dq  l1724 ; 116
  dq  l1724 ; 117
  dq  l1724 ; 118
  dq  l1724 ; 119
  dq  l1724 ; 120
  dq  l1724 ; 121
  dq  l1724 ; 122
  dq  l1724 ; 123
  dq  l1724 ; 124
  dq  l1724 ; 125
  dq  l1724 ; 126
  dq  l1724 ; 127
  dq  l1724 ; 128
  dq  l1724 ; 129
  dq  l1724 ; 130
  dq  l1724 ; 131
  dq  l1724 ; 132
  dq  l1724 ; 133
  dq  l1724 ; 134
  dq  l1724 ; 135
  dq  l1724 ; 136
  dq  l1724 ; 137
  dq  l1724 ; 138
  dq  l1724 ; 139
  dq  l1724 ; 140
  dq  l1724 ; 141
  dq  l1724 ; 142
  dq  l1724 ; 143
  dq  l1724 ; 144
  dq  l1724 ; 145
  dq  l1724 ; 146
  dq  l1724 ; 147
  dq  l1724 ; 148
  dq  l1724 ; 149
  dq  l1724 ; 150
  dq  l1724 ; 151
  dq  l1723 ; 152
  dq  l1724 ; 153
  dq  l1724 ; 154
  dq  l1724 ; 155
  dq  l1724 ; 156
  dq  l1724 ; 157
  dq  l1724 ; 158
  dq  l1724 ; 159
  dq  l1724 ; 160
  dq  l1724 ; 161
  dq  l1724 ; 162
  dq  l1724 ; 163
  dq  l1724 ; 164
  dq  l1724 ; 165
  dq  l1724 ; 166
  dq  l1724 ; 167
  dq  l1724 ; 168
  dq  l1724 ; 169
  dq  l1724 ; 170
  dq  l1724 ; 171
  dq  l1724 ; 172
  dq  l1724 ; 173
  dq  l1724 ; 174
  dq  l1724 ; 175
  dq  l1724 ; 176
  dq  l1724 ; 177
  dq  l1724 ; 178
  dq  l1724 ; 179
  dq  l1724 ; 180
  dq  l1724 ; 181
  dq  l1724 ; 182
  dq  l1724 ; 183
  dq  l1724 ; 184
  dq  l1724 ; 185
  dq  l1724 ; 186
  dq  l1724 ; 187
  dq  l1724 ; 188
  dq  l1724 ; 189
  dq  l1724 ; 190
  dq  l1724 ; 191
  dq  l1724 ; 192
  dq  l1724 ; 193
  dq  l1724 ; 194
  dq  l1724 ; 195
  dq  l1724 ; 196
  dq  l1724 ; 197
  dq  l1724 ; 198
  dq  l1724 ; 199
  dq  l1724 ; 200
  dq  l1726 ; 201
  dq  l1724 ; 202
  dq  l1724 ; 203
  dq  l1724 ; 204
  dq  l1724 ; 205
  dq  l1724 ; 206
  dq  l1724 ; 207
  dq  l1724 ; 208
  dq  l1724 ; 209
  dq  l1724 ; 210
  dq  l1724 ; 211
  dq  l1724 ; 212
  dq  l1724 ; 213
  dq  l1724 ; 214
  dq  l1724 ; 215
  dq  l1724 ; 216
  dq  l1724 ; 217
  dq  l1724 ; 218
  dq  l1724 ; 219
  dq  l1724 ; 220
  dq  l1724 ; 221
  dq  l1724 ; 222
  dq  l1724 ; 223
  dq  l1724 ; 224
  dq  l1724 ; 225
  dq  l1724 ; 226
  dq  l1724 ; 227
  dq  l1724 ; 228
  dq  l1724 ; 229
  dq  l1724 ; 230
  dq  l1724 ; 231
  dq  l1724 ; 232
  dq  l1724 ; 233
  dq  l1724 ; 234
  dq  l1724 ; 235
  dq  l1724 ; 236
  dq  l1724 ; 237
  dq  l1724 ; 238
  dq  l1724 ; 239
  dq  l1724 ; 240
  dq  l1724 ; 241
  dq  l1724 ; 242
  dq  l1724 ; 243
  dq  l1724 ; 244
  dq  l1724 ; 245
  dq  l1724 ; 246
  dq  l1724 ; 247
  dq  l1724 ; 248
  dq  l1724 ; 249
  dq  l1724 ; 250
  dq  l1724 ; 251
  dq  l1724 ; 252
  dq  l1724 ; 253
  dq  l1724 ; 254
  dq  l1724 ; 255
  dq  l1724 ; 256
  dq  l1724 ; 257
  dq  l1724 ; 258
  dq  l1724 ; 259
  dq  l1724 ; 260
  dq  l1724 ; 261
  dq  l1724 ; 262
  dq  l1724 ; 263
  dq  l1724 ; 264
  dq  l1724 ; 265
  dq  l1724 ; 266
  dq  l1724 ; 267
  dq  l1724 ; 268
  dq  l1724 ; 269
  dq  l1724 ; 270
  dq  l1724 ; 271
  dq  l1724 ; 272
  dq  l1724 ; 273
  dq  l1724 ; 274
  dq  l1724 ; 275
  dq  l1724 ; 276
  dq  l1724 ; 277
  dq  l1724 ; 278
  dq  l1724 ; 279
  dq  l1724 ; 280
  dq  l1724 ; 281
  dq  l1724 ; 282
  dq  l1724 ; 283
  dq  l1724 ; 284
  dq  l1724 ; 285
  dq  l1724 ; 286
  dq  l1724 ; 287
  dq  l1724 ; 288
  dq  l1724 ; 289
  dq  l1724 ; 290
  dq  l1724 ; 291
  dq  l1724 ; 292
  dq  l1724 ; 293
  dq  l1724 ; 294
  dq  l1724 ; 295
  dq  l1724 ; 296
  dq  l1724 ; 297
  dq  l1724 ; 298
  dq  l1724 ; 299
  dq  l1724 ; 300
  dq  l1724 ; 301
  dq  l1724 ; 302
  dq  l1724 ; 303
  dq  l1724 ; 304
  dq  l1724 ; 305
  dq  l1724 ; 306
  dq  l1724 ; 307
  dq  l1724 ; 308
  dq  l1724 ; 309
  dq  l1724 ; 310
  dq  l1724 ; 311
  dq  l1724 ; 312
  dq  l1724 ; 313
  dq  l1724 ; 314
  dq  l1724 ; 315
  dq  l1724 ; 316
  dq  l1724 ; 317
  dq  l1724 ; 318
  dq  l1724 ; 319
  dq  l1724 ; 320
  dq  l1724 ; 321
  dq  l1724 ; 322
  dq  l1724 ; 323
  dq  l1724 ; 324
  dq  l1724 ; 325
  dq  l1724 ; 326
  dq  l1724 ; 327
  dq  l1724 ; 328
  dq  l1724 ; 329
  dq  l1724 ; 330
  dq  l1724 ; 331
  dq  l1724 ; 332
  dq  l1724 ; 333
  dq  l1724 ; 334
  dq  l1724 ; 335
  dq  l1724 ; 336
  dq  l1724 ; 337
  dq  l1724 ; 338
  dq  l1724 ; 339
  dq  l1724 ; 340
  dq  l1724 ; 341
  dq  l1724 ; 342
  dq  l1724 ; 343
  dq  l1724 ; 344
  dq  l1724 ; 345
  dq  l1724 ; 346
  dq  l1724 ; 347
  dq  l1724 ; 348
  dq  l1724 ; 349
  dq  l1724 ; 350
  dq  l1724 ; 351
  dq  l1724 ; 352
  dq  l1724 ; 353
  dq  l1724 ; 354
  dq  l1724 ; 355
  dq  l1724 ; 356
  dq  l1724 ; 357
  dq  l1724 ; 358
  dq  l1724 ; 359
  dq  l1724 ; 360
  dq  l1724 ; 361
  dq  l1724 ; 362
  dq  l1724 ; 363
  dq  l1724 ; 364
  dq  l1724 ; 365
  dq  l1724 ; 366
  dq  l1724 ; 367
  dq  l1724 ; 368
  dq  l1724 ; 369
  dq  l1724 ; 370
  dq  l1724 ; 371
  dq  l1724 ; 372
  dq  l1724 ; 373
  dq  l1724 ; 374
  dq  l1724 ; 375
  dq  l1724 ; 376
  dq  l1724 ; 377
  dq  l1724 ; 378
  dq  l1724 ; 379
  dq  l1724 ; 380
  dq  l1724 ; 381
  dq  l1724 ; 382
  dq  l1724 ; 383
  dq  l1724 ; 384
  dq  l1724 ; 385
  dq  l1724 ; 386
  dq  l1724 ; 387
  dq  l1724 ; 388
  dq  l1724 ; 389
  dq  l1724 ; 390
  dq  l1724 ; 391
  dq  l1724 ; 392
  dq  l1724 ; 393
  dq  l1724 ; 394
  dq  l1724 ; 395
  dq  l1724 ; 396
  dq  l1724 ; 397
  dq  l1724 ; 398
  dq  l1724 ; 399
  dq  l1724 ; 400
  dq  l1724 ; 401
  dq  l1724 ; 402
  dq  l1724 ; 403
  dq  l1724 ; 404
  dq  l1724 ; 405
  dq  l1724 ; 406
  dq  l1724 ; 407
  dq  l1724 ; 408
  dq  l1724 ; 409
  dq  l1724 ; 410
  dq  l1724 ; 411
  dq  l1724 ; 412
  dq  l1724 ; 413
  dq  l1724 ; 414
  dq  l1724 ; 415
  dq  l1724 ; 416
  dq  l1724 ; 417
  dq  l1724 ; 418
  dq  l1724 ; 419
  dq  l1724 ; 420
  dq  l1724 ; 421
  dq  l1724 ; 422
  dq  l1724 ; 423
  dq  l1724 ; 424
  dq  l1724 ; 425
  dq  l1724 ; 426
  dq  l1724 ; 427
  dq  l1724 ; 428
  dq  l1724 ; 429
  dq  l1724 ; 430
  dq  l1724 ; 431
  dq  l1724 ; 432
  dq  l1724 ; 433
  dq  l1724 ; 434
  dq  l1724 ; 435
  dq  l1724 ; 436
  dq  l1724 ; 437
  dq  l1724 ; 438
  dq  l1724 ; 439
  dq  l1724 ; 440
  dq  l1724 ; 441
  dq  l1724 ; 442
  dq  l1724 ; 443
  dq  l1724 ; 444
  dq  l1724 ; 445
  dq  l1724 ; 446
  dq  l1724 ; 447
  dq  l1724 ; 448
  dq  l1724 ; 449
  dq  l1724 ; 450
  dq  l1724 ; 451
  dq  l1724 ; 452
  dq  l1724 ; 453
  dq  l1724 ; 454
  dq  l1724 ; 455
  dq  l1724 ; 456
  dq  l1724 ; 457
  dq  l1724 ; 458
  dq  l1724 ; 459
  dq  l1724 ; 460
  dq  l1724 ; 461
  dq  l1724 ; 462
  dq  l1724 ; 463
  dq  l1724 ; 464
  dq  l1724 ; 465
  dq  l1724 ; 466
  dq  l1724 ; 467
  dq  l1724 ; 468
  dq  l1724 ; 469
  dq  l1724 ; 470
  dq  l1724 ; 471
  dq  l1724 ; 472
  dq  l1724 ; 473
  dq  l1724 ; 474
  dq  l1724 ; 475
  dq  l1724 ; 476
  dq  l1724 ; 477
  dq  l1724 ; 478
  dq  l1724 ; 479
  dq  l1724 ; 480
  dq  l1724 ; 481
  dq  l1724 ; 482
  dq  l1724 ; 483
  dq  l1724 ; 484
  dq  l1724 ; 485
  dq  l1724 ; 486
  dq  l1724 ; 487
  dq  l1724 ; 488
  dq  l1724 ; 489
  dq  l1724 ; 490
  dq  l1724 ; 491
  dq  l1724 ; 492
  dq  l1724 ; 493
  dq  l1724 ; 494
  dq  l1724 ; 495
  dq  l1724 ; 496
  dq  l1724 ; 497
  dq  l1724 ; 498
  dq  l1724 ; 499
  dq  l1724 ; 500
  dq  l1724 ; 501
  dq  l1724 ; 502
  dq  l1724 ; 503
  dq  l1724 ; 504
  dq  l1724 ; 505
  dq  l1724 ; 506
  dq  l1724 ; 507
  dq  l1724 ; 508
  dq  l1724 ; 509
  dq  l1724 ; 510
  dq  l1724 ; 511
  dq  l1724 ; 512
  dq  l1724 ; 513
  dq  l1724 ; 514
  dq  l1724 ; 515
  dq  l1724 ; 516
  dq  l1724 ; 517
  dq  l1724 ; 518
  dq  l1724 ; 519
  dq  l1724 ; 520
  dq  l1724 ; 521
  dq  l1724 ; 522
  dq  l1724 ; 523
  dq  l1724 ; 524
  dq  l1724 ; 525
  dq  l1724 ; 526
  dq  l1724 ; 527
  dq  l1724 ; 528
  dq  l1724 ; 529
  dq  l1724 ; 530
  dq  l1724 ; 531
  dq  l1724 ; 532
  dq  l1724 ; 533
  dq  l1724 ; 534
  dq  l1724 ; 535
  dq  l1724 ; 536
  dq  l1724 ; 537
  dq  l1724 ; 538
  dq  l1724 ; 539
  dq  l1724 ; 540
  dq  l1724 ; 541
  dq  l1724 ; 542
  dq  l1724 ; 543
  dq  l1724 ; 544
  dq  l1724 ; 545
  dq  l1724 ; 546
  dq  l1724 ; 547
  dq  l1724 ; 548
  dq  l1724 ; 549
  dq  l1724 ; 550
  dq  l1724 ; 551
  dq  l1724 ; 552
  dq  l1724 ; 553
  dq  l1724 ; 554
  dq  l1724 ; 555
  dq  l1724 ; 556
  dq  l1724 ; 557
  dq  l1724 ; 558
  dq  l1724 ; 559
  dq  l1724 ; 560
  dq  l1724 ; 561
  dq  l1724 ; 562
  dq  l1724 ; 563
  dq  l1724 ; 564
  dq  l1724 ; 565
  dq  l1724 ; 566
  dq  l1724 ; 567
  dq  l1724 ; 568
  dq  l1724 ; 569
  dq  l1724 ; 570
  dq  l1724 ; 571
  dq  l1724 ; 572
  dq  l1724 ; 573
  dq  l1724 ; 574
  dq  l1724 ; 575
  dq  l1724 ; 576
  dq  l1724 ; 577
  dq  l1724 ; 578
  dq  l1724 ; 579
  dq  l1724 ; 580
  dq  l1724 ; 581
  dq  l1724 ; 582
  dq  l1724 ; 583
  dq  l1724 ; 584
  dq  l1724 ; 585
  dq  l1724 ; 586
  dq  l1724 ; 587
  dq  l1724 ; 588
  dq  l1724 ; 589
  dq  l1724 ; 590
  dq  l1724 ; 591
  dq  l1724 ; 592
  dq  l1724 ; 593
  dq  l1724 ; 594
  dq  l1724 ; 595
  dq  l1724 ; 596
  dq  l1724 ; 597
  dq  l1724 ; 598
  dq  l1724 ; 599
  dq  l1730 ; 600
__jmptable2198:
  dq  l2197 ; 0
  dq  l2197 ; 1
  dq  l2197 ; 2
  dq  l2197 ; 3
  dq  l2202 ; 4
  dq  l2197 ; 5
  dq  l2197 ; 6
  dq  l2197 ; 7
  dq  l2197 ; 8
  dq  l2197 ; 9
  dq  l2197 ; 10
  dq  l2197 ; 11
  dq  l2197 ; 12
  dq  l2197 ; 13
  dq  l2197 ; 14
  dq  l2197 ; 15
  dq  l2197 ; 16
  dq  l2197 ; 17
  dq  l2197 ; 18
  dq  l2197 ; 19
  dq  l2197 ; 20
  dq  l2197 ; 21
  dq  l2197 ; 22
  dq  l2197 ; 23
  dq  l2197 ; 24
  dq  l2197 ; 25
  dq  l2197 ; 26
  dq  l2197 ; 27
  dq  l2197 ; 28
  dq  l2197 ; 29
  dq  l2197 ; 30
  dq  l2197 ; 31
  dq  l2197 ; 32
  dq  l2197 ; 33
  dq  l2197 ; 34
  dq  l2197 ; 35
  dq  l2197 ; 36
  dq  l2197 ; 37
  dq  l2197 ; 38
  dq  l2197 ; 39
  dq  l2197 ; 40
  dq  l2197 ; 41
  dq  l2197 ; 42
  dq  l2197 ; 43
  dq  l2197 ; 44
  dq  l2197 ; 45
  dq  l2197 ; 46
  dq  l2197 ; 47
  dq  l2197 ; 48
  dq  l2197 ; 49
  dq  l2197 ; 50
  dq  l2197 ; 51
  dq  l2197 ; 52
  dq  l2197 ; 53
  dq  l2197 ; 54
  dq  l2197 ; 55
  dq  l2197 ; 56
  dq  l2197 ; 57
  dq  l2197 ; 58
  dq  l2197 ; 59
  dq  l2197 ; 60
  dq  l2197 ; 61
  dq  l2197 ; 62
  dq  l2197 ; 63
  dq  l2197 ; 64
  dq  l2197 ; 65
  dq  l2197 ; 66
  dq  l2197 ; 67
  dq  l2197 ; 68
  dq  l2197 ; 69
  dq  l2197 ; 70
  dq  l2197 ; 71
  dq  l2197 ; 72
  dq  l2197 ; 73
  dq  l2197 ; 74
  dq  l2197 ; 75
  dq  l2197 ; 76
  dq  l2197 ; 77
  dq  l2197 ; 78
  dq  l2197 ; 79
  dq  l2197 ; 80
  dq  l2197 ; 81
  dq  l2197 ; 82
  dq  l2197 ; 83
  dq  l2197 ; 84
  dq  l2197 ; 85
  dq  l2197 ; 86
  dq  l2197 ; 87
  dq  l2197 ; 88
  dq  l2197 ; 89
  dq  l2197 ; 90
  dq  l2197 ; 91
  dq  l2197 ; 92
  dq  l2197 ; 93
  dq  l2197 ; 94
  dq  l2197 ; 95
  dq  l2197 ; 96
  dq  l2197 ; 97
  dq  l2197 ; 98
  dq  l2197 ; 99
  dq  l2199 ; 100
  dq  l2197 ; 101
  dq  l2197 ; 102
  dq  l2206 ; 103
__jmptable2993:
  dq  l2992 ; 0
  dq  l2992 ; 1
  dq  l2992 ; 2
  dq  l2992 ; 3
  dq  l2992 ; 4
  dq  l2992 ; 5
  dq  l2992 ; 6
  dq  l2992 ; 7
  dq  l2992 ; 8
  dq  l2992 ; 9
  dq  l2992 ; 10
  dq  l2992 ; 11
  dq  l2992 ; 12
  dq  l2992 ; 13
  dq  l2992 ; 14
  dq  l2992 ; 15
  dq  l2992 ; 16
  dq  l2992 ; 17
  dq  l2992 ; 18
  dq  l2992 ; 19
  dq  l2992 ; 20
  dq  l2992 ; 21
  dq  l2992 ; 22
  dq  l2992 ; 23
  dq  l2992 ; 24
  dq  l2992 ; 25
  dq  l2992 ; 26
  dq  l2992 ; 27
  dq  l2992 ; 28
  dq  l2992 ; 29
  dq  l2992 ; 30
  dq  l2992 ; 31
  dq  l2992 ; 32
  dq  l2992 ; 33
  dq  l2992 ; 34
  dq  l2992 ; 35
  dq  l2992 ; 36
  dq  l2992 ; 37
  dq  l2992 ; 38
  dq  l2992 ; 39
  dq  l2992 ; 40
  dq  l2992 ; 41
  dq  l2992 ; 42
  dq  l2992 ; 43
  dq  l2992 ; 44
  dq  l2992 ; 45
  dq  l2992 ; 46
  dq  l2992 ; 47
  dq  l2992 ; 48
  dq  l2992 ; 49
  dq  l2992 ; 50
  dq  l2992 ; 51
  dq  l2992 ; 52
  dq  l2992 ; 53
  dq  l2992 ; 54
  dq  l2992 ; 55
  dq  l2992 ; 56
  dq  l2992 ; 57
  dq  l2992 ; 58
  dq  l2992 ; 59
  dq  l2992 ; 60
  dq  l2992 ; 61
  dq  l2992 ; 62
  dq  l2992 ; 63
  dq  l2992 ; 64
  dq  l2992 ; 65
  dq  l2992 ; 66
  dq  l2992 ; 67
  dq  l2992 ; 68
  dq  l2992 ; 69
  dq  l2992 ; 70
  dq  l2992 ; 71
  dq  l2992 ; 72
  dq  l2992 ; 73
  dq  l2992 ; 74
  dq  l2992 ; 75
  dq  l2992 ; 76
  dq  l2992 ; 77
  dq  l2992 ; 78
  dq  l2992 ; 79
  dq  l2992 ; 80
  dq  l2992 ; 81
  dq  l2992 ; 82
  dq  l2992 ; 83
  dq  l2992 ; 84
  dq  l2992 ; 85
  dq  l2992 ; 86
  dq  l2992 ; 87
  dq  l2992 ; 88
  dq  l2992 ; 89
  dq  l2992 ; 90
  dq  l2992 ; 91
  dq  l2992 ; 92
  dq  l2992 ; 93
  dq  l2992 ; 94
  dq  l2992 ; 95
  dq  l2992 ; 96
  dq  l2992 ; 97
  dq  l2992 ; 98
  dq  l2992 ; 99
  dq  l2992 ; 100
  dq  l2992 ; 101
  dq  l3034 ; 102
  dq  l2992 ; 103
  dq  l2992 ; 104
  dq  l2992 ; 105
  dq  l2992 ; 106
  dq  l2992 ; 107
  dq  l2992 ; 108
  dq  l2992 ; 109
  dq  l2992 ; 110
  dq  l2992 ; 111
  dq  l2992 ; 112
  dq  l2992 ; 113
  dq  l2992 ; 114
  dq  l2992 ; 115
  dq  l2992 ; 116
  dq  l2992 ; 117
  dq  l2992 ; 118
  dq  l2992 ; 119
  dq  l2992 ; 120
  dq  l2992 ; 121
  dq  l2992 ; 122
  dq  l2992 ; 123
  dq  l2992 ; 124
  dq  l2992 ; 125
  dq  l2992 ; 126
  dq  l2992 ; 127
  dq  l2992 ; 128
  dq  l2992 ; 129
  dq  l2992 ; 130
  dq  l2992 ; 131
  dq  l2992 ; 132
  dq  l2992 ; 133
  dq  l2992 ; 134
  dq  l2992 ; 135
  dq  l2992 ; 136
  dq  l2992 ; 137
  dq  l2992 ; 138
  dq  l2992 ; 139
  dq  l2992 ; 140
  dq  l2992 ; 141
  dq  l2992 ; 142
  dq  l2992 ; 143
  dq  l2992 ; 144
  dq  l2992 ; 145
  dq  l2992 ; 146
  dq  l2992 ; 147
  dq  l2992 ; 148
  dq  l2992 ; 149
  dq  l3003 ; 150
  dq  l2992 ; 151
  dq  l2992 ; 152
  dq  l2994 ; 153
  dq  l2992 ; 154
  dq  l2992 ; 155
  dq  l2992 ; 156
  dq  l2992 ; 157
  dq  l2992 ; 158
  dq  l2992 ; 159
  dq  l2992 ; 160
  dq  l2992 ; 161
  dq  l2992 ; 162
  dq  l2992 ; 163
  dq  l2992 ; 164
  dq  l2992 ; 165
  dq  l2992 ; 166
  dq  l2992 ; 167
  dq  l2992 ; 168
  dq  l2992 ; 169
  dq  l2992 ; 170
  dq  l2992 ; 171
  dq  l2992 ; 172
  dq  l2992 ; 173
  dq  l2992 ; 174
  dq  l2992 ; 175
  dq  l2992 ; 176
  dq  l2992 ; 177
  dq  l2992 ; 178
  dq  l2992 ; 179
  dq  l2992 ; 180
  dq  l2992 ; 181
  dq  l2992 ; 182
  dq  l2992 ; 183
  dq  l2992 ; 184
  dq  l2992 ; 185
  dq  l2992 ; 186
  dq  l2992 ; 187
  dq  l2992 ; 188
  dq  l2992 ; 189
  dq  l2992 ; 190
  dq  l2992 ; 191
  dq  l2992 ; 192
  dq  l2992 ; 193
  dq  l2992 ; 194
  dq  l2992 ; 195
  dq  l2992 ; 196
  dq  l2992 ; 197
  dq  l2992 ; 198
  dq  l2992 ; 199
  dq  l2992 ; 200
  dq  l2992 ; 201
  dq  l2992 ; 202
  dq  l2992 ; 203
  dq  l2992 ; 204
  dq  l3024 ; 205

; vtables
; -------
vtable_AST:
  dq __AST_constructor$3 ; constructor
  dq __AST__printInternal$3 ; _printInternal
  dq __AST_print$1 ; print
  dq __AST__convertInternal$3 ; _convertInternal
  dq __AST_convert$1 ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_Parser:
  dq __Parser_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __Parser__handleError$4 ; _handleError
  dq __Parser__parseInternal$2 ; _parseInternal
  dq __Parser_parseFile$2 ; parseFile
  dq __Parser_parseText$2 ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_SymbolTable:
  dq __SymbolTable_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __SymbolTable__debug$2 ; _debug
  dq __SymbolTable__error$2 ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __SymbolTable_getDeep$1 ; getDeep
  dq __SymbolTable_exportSymbols$1 ; exportSymbols
  dq __SymbolTable_insert$3 ; insert
  dq __SymbolTable_remove$2 ; remove
  dq __SymbolTable_importExternalVariable$2 ; importExternalVariable
  dq __SymbolTable_insertGlobal$3 ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __SymbolTable__lookupInternal$2 ; _lookupInternal
  dq __SymbolTable_lookup$2 ; lookup
  dq __SymbolTable_lookupForRead$2 ; lookupForRead
  dq __SymbolTable_lookupForCall$2 ; lookupForCall
  dq __SymbolTable_lookupForWrite$2 ; lookupForWrite
  dq __SymbolTable_lookupForReadAndWrite$2 ; lookupForReadAndWrite
  dq __SymbolTable_lookupForWriteOrInsert$2 ; lookupForWriteOrInsert
  dq __SymbolTable_lookupGlobal$2 ; lookupGlobal
  dq __SymbolTable_decreaseReadHits$2 ; decreaseReadHits
  dq __SymbolTable_decreaseWriteHits$2 ; decreaseWriteHits
  dq __SymbolTable_isset$2 ; isset
  dq __SymbolTable_enterScope$1 ; enterScope
  dq __SymbolTable_enterScopeForLoop$1 ; enterScopeForLoop
  dq __SymbolTable_enterScopeForProcedure$2 ; enterScopeForProcedure
  dq __SymbolTable_leaveScope$1 ; leaveScope
  dq __SymbolTable_insertFunction$3 ; insertFunction
  dq __SymbolTable_lookupFunction$3 ; lookupFunction
  dq __SymbolTable_getCurrentFunctionName$1 ; getCurrentFunctionName
  dq __SymbolTable_insertClass$3 ; insertClass
  dq __SymbolTable_lookupClass$2 ; lookupClass
  dq __SymbolTable_insertLocal$2 ; insertLocal
  dq __SymbolTable_importGlobal$2 ; importGlobal
  dq __SymbolTable_insertParam$3 ; insertParam
  dq __SymbolTable_insertRetVal$2 ; insertRetVal
  dq __SymbolTable_insertConst$3 ; insertConst
  dq __SymbolTable_insertLiteral$2 ; insertLiteral
  dq __SymbolTable_createConstFromValue$2 ; createConstFromValue
  dq __SymbolTable_assignValue$3 ; assignValue
  dq __SymbolTable_assignNode$3 ; assignNode
  dq __SymbolTable_assignType$3 ; assignType
  dq __SymbolTable_assignMirType$3 ; assignMirType
  dq __SymbolTable_removeUnusedSymbols$1 ; removeUnusedSymbols
  dq __SymbolTable_createLabel$1 ; createLabel
  dq __SymbolTable_insertJmpTable$2 ; insertJmpTable
  dq __SymbolTable_getTempVar$2 ; getTempVar
  dq __SymbolTable_getTempVarForWrite$2 ; getTempVarForWrite
  dq __SymbolTable_getTempVarForReadAndWrite$2 ; getTempVarForReadAndWrite
  dq __SymbolTable_releaseTempVar$2 ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTModuleResolver:
  dq __ASTModuleResolver_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __ASTModuleResolver_resolveImports$2 ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTSymbolsCollector:
  dq __ASTSymbolsCollector_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTSymbolsCollector__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __ASTSymbolsCollector__collectSymbolsFromLeftNode$3 ; _collectSymbolsFromLeftNode
  dq __ASTSymbolsCollector__collectSymbolsFromRightNode$3 ; _collectSymbolsFromRightNode
  dq __ASTSymbolsCollector__updateVariableSymbolInfo$4 ; _updateVariableSymbolInfo
  dq __ASTSymbolsCollector__collectSymbols$4 ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __ASTSymbolsCollector_buildSymbolTable$2 ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTEvaluator:
  dq __ASTEvaluator_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTEvaluator__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __ASTEvaluator__assignValue$4 ; _assignValue
  dq __ASTEvaluator__getValue$3 ; _getValue
  dq __ASTEvaluator__mergeValues$3 ; _mergeValues
  dq __ASTEvaluator__processConditionalNode$3 ; _processConditionalNode
  dq __ASTEvaluator__processTwoAlternativeNodes$4 ; _processTwoAlternativeNodes
  dq __ASTEvaluator__getArrayOfValueNodes$2 ; _getArrayOfValueNodes
  dq __ASTEvaluator__processNode$3 ; _processNode
  dq __ASTEvaluator_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTPreprocessor:
  dq __ASTPreprocessor_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTPreprocessor__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __ASTPreprocessor__processNode$2 ; _processNode
  dq __ASTPreprocessor_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTOptimizerConstantFolding:
  dq __ASTOptimizerConstantFolding_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTOptimizerConstantFolding__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __ASTOptimizerConstantFolding_processNode$2 ; processNode
  dq __ASTOptimizerConstantFolding__setToImm$3 ; _setToImm
  dq __ASTOptimizerConstantFolding__processNodeArray$2 ; _processNodeArray
  dq __ASTOptimizerConstantFolding__processNodeMap$2 ; _processNodeMap
  dq __ASTOptimizerConstantFolding_processNodeUntilNotChanged$2 ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTOptimizerCSE:
  dq __ASTOptimizerCSE_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTOptimizerCSE__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __ASTOptimizerCSE__processNode$4 ; _processNode
  dq __ASTOptimizerCSE_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __ASTOptimizerCSE__getNextId$1 ; _getNextId
  dq __ASTOptimizerCSE__createNodeVariable$1 ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTOptimizerDeadCodeRemove:
  dq __ASTOptimizerDeadCodeRemove_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTOptimizerDeadCodeRemove__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __ASTOptimizerDeadCodeRemove__processNode$3 ; _processNode
  dq __ASTOptimizerDeadCodeRemove_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __ASTOptimizerDeadCodeRemove__removeNode$2 ; _removeNode
  dq __ASTOptimizerDeadCodeRemove__moveNode$3 ; _moveNode
  dq __ASTOptimizerDeadCodeRemove__processChildNodes$3 ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTOptimizerVCall:
  dq __ASTOptimizerVCall_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTOptimizerVCall__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __ASTOptimizerVCall__processNode$2 ; _processNode
  dq __ASTOptimizerVCall_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTOptimizerIf:
  dq __ASTOptimizerIf_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTOptimizerIf__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __ASTOptimizerIf__processNode$2 ; _processNode
  dq __ASTOptimizerIf_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTOptimizerInline:
  dq __ASTOptimizerInline_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTOptimizerInline__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __ASTOptimizerInline__processNode$3 ; _processNode
  dq __ASTOptimizerInline_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __ASTOptimizerInline__resolveParamsForInline$4 ; _resolveParamsForInline
  dq __ASTOptimizerInline__injectParamInit$5 ; _injectParamInit
  dq __ASTOptimizerInline__injectFunctionBody$4 ; _injectFunctionBody
  dq __ASTOptimizerInline__processNode_injectInlineFunctions$4 ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTTypeCast:
  dq __ASTTypeCast_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTTypeCast__debug$2 ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __ASTTypeCast__processNode$2 ; _processNode
  dq __ASTTypeCast_processNode$2 ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_MIRCode:
  dq __MIRCode_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MIRCode_createLabel$1 ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MIRCode_beginProc$5 ; beginProc
  dq __MIRCode_endProc$1 ; endProc
  dq __MIRCode_resolveLabel$2 ; resolveLabel
  dq __MIRCode__resolveJmps$1 ; _resolveJmps
  dq __MIRCode_comment$2 ; comment
  dq __MIRCode_push0$2 ; push0
  dq __MIRCode_push1$3 ; push1
  dq __MIRCode_push2$4 ; push2
  dq __MIRCode_push3$5 ; push3
  dq __MIRCode_nop$1 ; nop
  dq __MIRCode_neg$1 ; neg
  dq __MIRCode_add$1 ; add
  dq __MIRCode_sub$1 ; sub
  dq __MIRCode_mul$1 ; mul
  dq __MIRCode_div$1 ; div
  dq __MIRCode_idiv$1 ; idiv
  dq __MIRCode_stringJoin$1 ; stringJoin
  dq __MIRCode_loadArray$1 ; loadArray
  dq __MIRCode_loadMap$1 ; loadMap
  dq __MIRCode_loadImm$2 ; loadImm
  dq __MIRCode_cmpEQ$1 ; cmpEQ
  dq __MIRCode_cmpNEQ$1 ; cmpNEQ
  dq __MIRCode_cmpGT$1 ; cmpGT
  dq __MIRCode_cmpGE$1 ; cmpGE
  dq __MIRCode_cmpLT$1 ; cmpLT
  dq __MIRCode_cmpLE$1 ; cmpLE
  dq __MIRCode_loadLocal$2 ; loadLocal
  dq __MIRCode_loadParamN$2 ; loadParamN
  dq __MIRCode_loadGlobal$2 ; loadGlobal
  dq __MIRCode_loadRetVal$1 ; loadRetVal
  dq __MIRCode_loadFromIndex$1 ; loadFromIndex
  dq __MIRCode_loadFromKey$1 ; loadFromKey
  dq __MIRCode_allocateLocalId$1 ; allocateLocalId
  dq __MIRCode_storeLocal$2 ; storeLocal
  dq __MIRCode_storeParamN$2 ; storeParamN
  dq __MIRCode_storeGlobal$2 ; storeGlobal
  dq __MIRCode_storeRetVal$1 ; storeRetVal
  dq __MIRCode_storeAtIndex$1 ; storeAtIndex
  dq __MIRCode_storeAtKey$1 ; storeAtKey
  dq __MIRCode_moveBack$1 ; moveBack
  dq __MIRCode_drop$1 ; drop
  dq __MIRCode_dropN$2 ; dropN
  dq __MIRCode_dup$1 ; dup
  dq __MIRCode_over$1 ; over
  dq __MIRCode_loadArgc$1 ; loadArgc
  dq __MIRCode_loadArgv$1 ; loadArgv
  dq __MIRCode_createObject$2 ; createObject
  dq __MIRCode__jmpInternal$3 ; _jmpInternal
  dq __MIRCode_jmp$2 ; jmp
  dq __MIRCode_jmpIfTrue$2 ; jmpIfTrue
  dq __MIRCode_jmpIfFalse$2 ; jmpIfFalse
  dq __MIRCode_ret$2 ; ret
  dq __MIRCode_innerRet$1 ; innerRet
  dq __MIRCode_call$2 ; call
  dq __MIRCode_vcall$3 ; vcall
  dq __MIRCode_callPrint$2 ; callPrint
  dq __MIRCode_initFrame$2 ; initFrame
  dq __MIRCode_emitLabel$2 ; emitLabel
  dq __MIRCode_createAndEmitLabel$1 ; createAndEmitLabel
  dq __MIRCode_createMethod$2 ; createMethod
  dq __MIRCode_createClass$2 ; createClass
  dq __MIRCode_getClassProtoById$2 ; getClassProtoById
  dq __MIRCode_retValGuard$3 ; retValGuard
  dq __MIRCode_forEach$4 ; forEach
  dq __MIRCode_syscall$3 ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_AppMold:
  dq __AppMold_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __AppMold_logError$2 ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __AppMold_getSymbolTable$1 ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __AppMold_logDebug$2 ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __AppMold_setLogContext$2 ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __AppMold_getAstSymbolsCollector$1 ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __AppMold_clearLogContext$1 ; clearLogContext
  dq __AppMold_getMir1Code$1 ; getMir1Code
  dq __AppMold_getAstOptimizerConstantFolding$1 ; getAstOptimizerConstantFolding
  dq __AppMold_getAstPreprocessor$1 ; getAstPreprocessor
  dq __AppMold_getAstEvaluator$1 ; getAstEvaluator
  dq __AppMold_getAstOptimizerCSE$1 ; getAstOptimizerCSE
  dq __AppMold_getAstOptimizerDeadCodeRemove$1 ; getAstOptimizerDeadCodeRemove
  dq __AppMold_getAstOptimizerVCall$1 ; getAstOptimizerVCall
  dq __AppMold_getAstOptimizerIf$1 ; getAstOptimizerIf
  dq __AppMold_getAstOptimizerInline$1 ; getAstOptimizerInline
  dq __AppMold_getAstModuleResolver$1 ; getAstModuleResolver
  dq __AppMold_getAstTypeCast$1 ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTPrinterText:
  dq __MOLD_NullMethodCalled ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __ASTPrinterText__printNode_twoArgsOp$3 ; _printNode_twoArgsOp
  dq __ASTPrinterText__printNode_codeBlock$3 ; _printNode_codeBlock
  dq __ASTPrinterText__printNode_paramsList$4 ; _printNode_paramsList
  dq __ASTPrinterText__printNode$3 ; _printNode
  dq __ASTPrinterText_printNode$2 ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTPrinterHtml:
  dq __MOLD_NullMethodCalled ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __ASTPrinterHtml__printNode$2 ; _printNode
  dq __ASTPrinterHtml_printNode$2 ; printNode
  dq __ASTPrinterHtml__printSymbolTable$2 ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTTranslator:
  dq __ASTTranslator_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTTranslator__debug$2 ; _debug
  dq __ASTTranslator__error$2 ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __ASTTranslator__loadArgsVector$2 ; _loadArgsVector
  dq __ASTTranslator__loadArgsCount$2 ; _loadArgsCount
  dq __ASTTranslator__syscall$5 ; _syscall
  dq __ASTTranslator__loadArray$2 ; _loadArray
  dq __ASTTranslator__loadMap$2 ; _loadMap
  dq __ASTTranslator__loadImm$3 ; _loadImm
  dq __ASTTranslator__loadImmAsVariant$3 ; _loadImmAsVariant
  dq __ASTTranslator__loadVariable$2 ; _loadVariable
  dq __ASTTranslator__call$5 ; _call
  dq __ASTTranslator__invokeMethod$4 ; _invokeMethod
  dq __ASTTranslator__callPrint$3 ; _callPrint
  dq __ASTTranslator__neg$3 ; _neg
  dq __ASTTranslator__add$4 ; _add
  dq __ASTTranslator__stringJoin$4 ; _stringJoin
  dq __ASTTranslator__sub$4 ; _sub
  dq __ASTTranslator__mul$4 ; _mul
  dq __ASTTranslator__div$4 ; _div
  dq __ASTTranslator__idiv$4 ; _idiv
  dq __ASTTranslator__compareEQ$4 ; _compareEQ
  dq __ASTTranslator__compareNEQ$4 ; _compareNEQ
  dq __ASTTranslator__compareLT$4 ; _compareLT
  dq __ASTTranslator__compareLE$4 ; _compareLE
  dq __ASTTranslator__compareGT$4 ; _compareGT
  dq __ASTTranslator__compareGE$4 ; _compareGE
  dq __ASTTranslator__boolAnd$4 ; _boolAnd
  dq __ASTTranslator__boolOr$4 ; _boolOr
  dq __ASTTranslator__loadFromIndex$4 ; _loadFromIndex
  dq __ASTTranslator__loadFromKey$4 ; _loadFromKey
  dq __ASTTranslator__storeAtIndex$4 ; _storeAtIndex
  dq __ASTTranslator__storeAtKey$4 ; _storeAtKey
  dq __ASTTranslator__storeAtIndexAndDrop$4 ; _storeAtIndexAndDrop
  dq __ASTTranslator__storeAtKeyAndDrop$4 ; _storeAtKeyAndDrop
  dq __ASTTranslator__createObject$3 ; _createObject
  dq __ASTTranslator__convert$5 ; _convert
  dq __ASTTranslator__dropRetVal$1 ; _dropRetVal
  dq __ASTTranslator__declareFunction$3 ; _declareFunction
  dq __ASTTranslator__declareClass$3 ; _declareClass
  dq __ASTTranslator__emitFunctionBody$3 ; _emitFunctionBody
  dq __ASTTranslator__declareExternalFunction$3 ; _declareExternalFunction
  dq __ASTTranslator__getTempVar$2 ; _getTempVar
  dq __ASTTranslator__releaseTempVar$2 ; _releaseTempVar
  dq __ASTTranslator__enterScope$2 ; _enterScope
  dq __ASTTranslator__leaveScope$1 ; _leaveScope
  dq __ASTTranslator__verifyNumberOfParameters$4 ; _verifyNumberOfParameters
  dq __ASTTranslator__emitFunction$2 ; _emitFunction
  dq __ASTTranslator__emitGlobals$1 ; _emitGlobals
  dq __ASTTranslator__callSuper$4 ; _callSuper
  dq __ASTTranslator__getClassProto$2 ; _getClassProto
  dq __ASTTranslator__getMethodProto$4 ; _getMethodProto
  dq __ASTTranslator__isset$2 ; _isset
  dq __ASTTranslator__importGlobal$2 ; _importGlobal
  dq __ASTTranslator__declareVariableIfNotSet$2 ; _declareVariableIfNotSet
  dq __ASTTranslator__declareAndAssign$3 ; _declareAndAssign
  dq __ASTTranslator__assign$3 ; _assign
  dq __ASTTranslator__declareVariable$2 ; _declareVariable
  dq __ASTTranslator__evaluateNode$2 ; _evaluateNode
  dq __ASTTranslator__evaluateNodeLazyBoolAnd$4 ; _evaluateNodeLazyBoolAnd
  dq __ASTTranslator__evaluateNodeLazyBoolOr$4 ; _evaluateNodeLazyBoolOr
  dq __ASTTranslator__evaluateNodeCall$3 ; _evaluateNodeCall
  dq __ASTTranslator__evaluateNodeInvokeMethod$3 ; _evaluateNodeInvokeMethod
  dq __ASTTranslator__executeNodeFor$6 ; _executeNodeFor
  dq __ASTTranslator__executeNodeWhile$3 ; _executeNodeWhile
  dq __ASTTranslator__executeNodeIf$4 ; _executeNodeIf
  dq __ASTTranslator__executeNodeSwitch$2 ; _executeNodeSwitch
  dq __ASTTranslator__executeNode$2 ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __ASTTranslator_run$2 ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTTranslatorMIR0:
  dq __ASTTranslatorMIR0_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTTranslator__debug$2 ; _debug
  dq __ASTTranslator__error$2 ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __ASTTranslatorMIR0__loadArgsVector$1 ; _loadArgsVector
  dq __ASTTranslatorMIR0__loadArgsCount$1 ; _loadArgsCount
  dq __ASTTranslatorMIR0__syscall$5 ; _syscall
  dq __ASTTranslatorMIR0__loadArray$2 ; _loadArray
  dq __ASTTranslatorMIR0__loadMap$2 ; _loadMap
  dq __ASTTranslatorMIR0__loadImm$3 ; _loadImm
  dq __ASTTranslatorMIR0__loadImmAsVariant$3 ; _loadImmAsVariant
  dq __ASTTranslatorMIR0__loadVariable$2 ; _loadVariable
  dq __ASTTranslatorMIR0__call$5 ; _call
  dq __ASTTranslatorMIR0__invokeMethod$5 ; _invokeMethod
  dq __ASTTranslatorMIR0__callPrint$3 ; _callPrint
  dq __ASTTranslatorMIR0__neg$3 ; _neg
  dq __ASTTranslatorMIR0__add$4 ; _add
  dq __ASTTranslatorMIR0__stringJoin$4 ; _stringJoin
  dq __ASTTranslatorMIR0__sub$4 ; _sub
  dq __ASTTranslatorMIR0__mul$4 ; _mul
  dq __ASTTranslatorMIR0__div$4 ; _div
  dq __ASTTranslatorMIR0__idiv$4 ; _idiv
  dq __ASTTranslatorMIR0__compareEQ$4 ; _compareEQ
  dq __ASTTranslatorMIR0__compareNEQ$4 ; _compareNEQ
  dq __ASTTranslatorMIR0__compareLT$4 ; _compareLT
  dq __ASTTranslatorMIR0__compareLE$4 ; _compareLE
  dq __ASTTranslatorMIR0__compareGT$4 ; _compareGT
  dq __ASTTranslatorMIR0__compareGE$4 ; _compareGE
  dq __ASTTranslator__boolAnd$4 ; _boolAnd
  dq __ASTTranslator__boolOr$4 ; _boolOr
  dq __ASTTranslatorMIR0__loadFromIndex$4 ; _loadFromIndex
  dq __ASTTranslatorMIR0__loadFromKey$4 ; _loadFromKey
  dq __ASTTranslatorMIR0__storeAtIndex$4 ; _storeAtIndex
  dq __ASTTranslatorMIR0__storeAtKey$4 ; _storeAtKey
  dq __ASTTranslatorMIR0__storeAtIndexAndDrop$4 ; _storeAtIndexAndDrop
  dq __ASTTranslatorMIR0__storeAtKeyAndDrop$4 ; _storeAtKeyAndDrop
  dq __ASTTranslatorMIR0__createObject$3 ; _createObject
  dq __ASTTranslatorMIR0__convert$5 ; _convert
  dq __ASTTranslatorMIR0__dropRetVal$1 ; _dropRetVal
  dq __ASTTranslatorMIR0__declareFunction$3 ; _declareFunction
  dq __ASTTranslatorMIR0__declareClass$3 ; _declareClass
  dq __ASTTranslatorMIR0__emitFunctionBody$3 ; _emitFunctionBody
  dq __ASTTranslator__declareExternalFunction$3 ; _declareExternalFunction
  dq __ASTTranslator__getTempVar$2 ; _getTempVar
  dq __ASTTranslator__releaseTempVar$2 ; _releaseTempVar
  dq __ASTTranslator__enterScope$2 ; _enterScope
  dq __ASTTranslator__leaveScope$1 ; _leaveScope
  dq __ASTTranslator__verifyNumberOfParameters$4 ; _verifyNumberOfParameters
  dq __ASTTranslator__emitFunction$2 ; _emitFunction
  dq __ASTTranslator__emitGlobals$1 ; _emitGlobals
  dq __ASTTranslator__callSuper$4 ; _callSuper
  dq __ASTTranslator__getClassProto$2 ; _getClassProto
  dq __ASTTranslator__getMethodProto$4 ; _getMethodProto
  dq __ASTTranslator__isset$2 ; _isset
  dq __ASTTranslator__importGlobal$2 ; _importGlobal
  dq __ASTTranslator__declareVariableIfNotSet$2 ; _declareVariableIfNotSet
  dq __ASTTranslator__declareAndAssign$3 ; _declareAndAssign
  dq __ASTTranslatorMIR0__assign$3 ; _assign
  dq __ASTTranslator__declareVariable$2 ; _declareVariable
  dq __ASTTranslator__evaluateNode$2 ; _evaluateNode
  dq __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$4 ; _evaluateNodeLazyBoolAnd
  dq __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$4 ; _evaluateNodeLazyBoolOr
  dq __ASTTranslator__evaluateNodeCall$3 ; _evaluateNodeCall
  dq __ASTTranslator__evaluateNodeInvokeMethod$3 ; _evaluateNodeInvokeMethod
  dq __ASTTranslatorMIR0__executeNodeFor$6 ; _executeNodeFor
  dq __ASTTranslatorMIR0__executeNodeWhile$3 ; _executeNodeWhile
  dq __ASTTranslatorMIR0__executeNodeIf$4 ; _executeNodeIf
  dq __ASTTranslator__executeNodeSwitch$2 ; _executeNodeSwitch
  dq __ASTTranslator__executeNode$2 ; _executeNode
  dq __ASTTranslatorMIR0__executeNodeForEach$5 ; _executeNodeForEach
  dq __ASTTranslatorMIR0_run$2 ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_Stack:
  dq __Stack_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __Stack_dup$1 ; dup
  dq __Stack_over$1 ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __Stack_getItems$1 ; getItems
  dq __Stack_push$2 ; push
  dq __Stack_pop$1 ; pop
  dq __Stack_eat$1 ; eat
  dq __Stack_eatN$2 ; eatN
  dq __Stack_setByAbsoluteIdx$3 ; setByAbsoluteIdx
  dq __Stack_getByAbsoluteIdx$2 ; getByAbsoluteIdx
  dq __Stack_peek$1 ; peek
  dq __Stack_peekN$2 ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_ASTTranslatorMIR1:
  dq __ASTTranslatorMIR1_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __ASTTranslator__debug$2 ; _debug
  dq __ASTTranslator__error$2 ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __ASTTranslatorMIR1_emitLabel$2 ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __ASTTranslatorMIR1__loadArgsVector$1 ; _loadArgsVector
  dq __ASTTranslatorMIR1__loadArgsCount$1 ; _loadArgsCount
  dq __ASTTranslatorMIR1__syscall$5 ; _syscall
  dq __ASTTranslatorMIR1__loadArray$2 ; _loadArray
  dq __ASTTranslatorMIR1__loadMap$2 ; _loadMap
  dq __ASTTranslatorMIR1__loadImm$3 ; _loadImm
  dq __ASTTranslatorMIR1__loadImmAsVariant$3 ; _loadImmAsVariant
  dq __ASTTranslatorMIR1__loadVariable$2 ; _loadVariable
  dq __ASTTranslatorMIR1__call$5 ; _call
  dq __ASTTranslatorMIR1__invokeMethod$5 ; _invokeMethod
  dq __ASTTranslatorMIR1__callPrint$3 ; _callPrint
  dq __ASTTranslatorMIR1__neg$3 ; _neg
  dq __ASTTranslatorMIR1__add$4 ; _add
  dq __ASTTranslatorMIR1__stringJoin$4 ; _stringJoin
  dq __ASTTranslatorMIR1__sub$4 ; _sub
  dq __ASTTranslatorMIR1__mul$4 ; _mul
  dq __ASTTranslatorMIR1__div$4 ; _div
  dq __ASTTranslatorMIR1__idiv$4 ; _idiv
  dq __ASTTranslatorMIR1__compareEQ$4 ; _compareEQ
  dq __ASTTranslatorMIR1__compareNEQ$4 ; _compareNEQ
  dq __ASTTranslatorMIR1__compareLT$4 ; _compareLT
  dq __ASTTranslatorMIR1__compareLE$4 ; _compareLE
  dq __ASTTranslatorMIR1__compareGT$4 ; _compareGT
  dq __ASTTranslatorMIR1__compareGE$4 ; _compareGE
  dq __ASTTranslator__boolAnd$4 ; _boolAnd
  dq __ASTTranslator__boolOr$4 ; _boolOr
  dq __ASTTranslatorMIR1__loadFromIndex$4 ; _loadFromIndex
  dq __ASTTranslatorMIR1__loadFromKey$4 ; _loadFromKey
  dq __ASTTranslatorMIR1__storeAtIndex$4 ; _storeAtIndex
  dq __ASTTranslatorMIR1__storeAtKey$4 ; _storeAtKey
  dq __ASTTranslatorMIR1__storeAtIndexAndDrop$4 ; _storeAtIndexAndDrop
  dq __ASTTranslatorMIR1__storeAtKeyAndDrop$4 ; _storeAtKeyAndDrop
  dq __ASTTranslatorMIR1__createObject$3 ; _createObject
  dq __ASTTranslatorMIR1__convert$5 ; _convert
  dq __ASTTranslatorMIR1__dropRetVal$1 ; _dropRetVal
  dq __ASTTranslatorMIR1__declareFunction$3 ; _declareFunction
  dq __ASTTranslatorMIR1__declareClass$3 ; _declareClass
  dq __ASTTranslatorMIR1__emitFunctionBody$3 ; _emitFunctionBody
  dq __ASTTranslator__declareExternalFunction$3 ; _declareExternalFunction
  dq __ASTTranslator__getTempVar$2 ; _getTempVar
  dq __ASTTranslator__releaseTempVar$2 ; _releaseTempVar
  dq __ASTTranslator__enterScope$2 ; _enterScope
  dq __ASTTranslator__leaveScope$1 ; _leaveScope
  dq __ASTTranslator__verifyNumberOfParameters$4 ; _verifyNumberOfParameters
  dq __ASTTranslator__emitFunction$2 ; _emitFunction
  dq __ASTTranslator__emitGlobals$1 ; _emitGlobals
  dq __ASTTranslator__callSuper$4 ; _callSuper
  dq __ASTTranslator__getClassProto$2 ; _getClassProto
  dq __ASTTranslator__getMethodProto$4 ; _getMethodProto
  dq __ASTTranslator__isset$2 ; _isset
  dq __ASTTranslator__importGlobal$2 ; _importGlobal
  dq __ASTTranslator__declareVariableIfNotSet$2 ; _declareVariableIfNotSet
  dq __ASTTranslator__declareAndAssign$3 ; _declareAndAssign
  dq __ASTTranslatorMIR1__assign$3 ; _assign
  dq __ASTTranslator__declareVariable$2 ; _declareVariable
  dq __ASTTranslator__evaluateNode$2 ; _evaluateNode
  dq __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$4 ; _evaluateNodeLazyBoolAnd
  dq __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$4 ; _evaluateNodeLazyBoolOr
  dq __ASTTranslator__evaluateNodeCall$3 ; _evaluateNodeCall
  dq __ASTTranslator__evaluateNodeInvokeMethod$3 ; _evaluateNodeInvokeMethod
  dq __ASTTranslatorMIR1__executeNodeFor$6 ; _executeNodeFor
  dq __ASTTranslatorMIR1__executeNodeWhile$3 ; _executeNodeWhile
  dq __ASTTranslatorMIR1__executeNodeIf$4 ; _executeNodeIf
  dq __ASTTranslatorMIR1__executeNodeSwitch$2 ; _executeNodeSwitch
  dq __ASTTranslator__executeNode$2 ; _executeNode
  dq __ASTTranslatorMIR1__executeNodeForEach$5 ; _executeNodeForEach
  dq __ASTTranslatorMIR1_run$2 ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __ASTTranslatorMIR1_push$2 ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __ASTTranslatorMIR1__emitOneItem$2 ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __ASTTranslatorMIR1_emitZeroArgsOpcode$2 ; emitZeroArgsOpcode
  dq __ASTTranslatorMIR1_emitTargetOnlyOpcode$3 ; emitTargetOnlyOpcode
  dq __ASTTranslatorMIR1_emitOneArgOpcode$4 ; emitOneArgOpcode
  dq __ASTTranslatorMIR1_emitTwoArgsOpcode$5 ; emitTwoArgsOpcode
  dq __ASTTranslatorMIR1_emitComment$2 ; emitComment
  dq __ASTTranslatorMIR1_emitJmp$2 ; emitJmp
  dq __ASTTranslatorMIR1_emitJmpByTable$3 ; emitJmpByTable
  dq __ASTTranslatorMIR1_emitMoveVariantOpcode$3 ; emitMoveVariantOpcode
  dq __ASTTranslatorMIR1_popForRead$1 ; popForRead
  dq __ASTTranslatorMIR1_popForWrite$1 ; popForWrite
  dq __ASTTranslatorMIR1_popOneArgAndEmitOpcode$3 ; popOneArgAndEmitOpcode
  dq __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3 ; popTwoArgsAndEmitOpcode
  dq __ASTTranslatorMIR1_popParametersBeforeCall$2 ; popParametersBeforeCall
  dq __ASTTranslatorMIR1_emitProcBegin$2 ; emitProcBegin
  dq __ASTTranslatorMIR1_emitProcEnd$1 ; emitProcEnd
  dq __ASTTranslatorMIR1_emitRet$1 ; emitRet
  dq __ASTTranslatorMIR1_emitMoveBackVariant$1 ; emitMoveBackVariant
  dq __ASTTranslatorMIR1_connectTo$2 ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_PipeAbstract:
  dq __PipeAbstract_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __PipeAbstract__emitOneItem$2 ; _emitOneItem
  dq __PipeAbstract_processOneItem$2 ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __PipeAbstract_connectTo$2 ; connectTo
  dq __PipeAbstract__replaceLastItem$2 ; _replaceLastItem
  dq __PipeAbstract_processArrayOfItems$2 ; processArrayOfItems
  dq __PipeAbstract_flush$1 ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_MIRQuadCollector:
  dq __MIRQuadCollector_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __PipeAbstract__emitOneItem$2 ; _emitOneItem
  dq __MIRQuadCollector_processOneItem$2 ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __PipeAbstract_connectTo$2 ; connectTo
  dq __PipeAbstract__replaceLastItem$2 ; _replaceLastItem
  dq __PipeAbstract_processArrayOfItems$2 ; processArrayOfItems
  dq __PipeAbstract_flush$1 ; flush
  dq __MIRQuadCollector__pad$3 ; _pad
  dq __MIRQuadCollector_getQuads$1 ; getQuads
  dq __MIRQuadCollector__printSymbolInfoRow$6 ; _printSymbolInfoRow
  dq __MIRQuadCollector__dumpFrameInfo$2 ; _dumpFrameInfo
  dq __MIRQuadCollector_printQuads$1 ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_CodeGeneratorX64:
  dq __CodeGeneratorX64_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __CodeGeneratorX64_call$2 ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __CodeGeneratorX64_run$2 ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __CodeGeneratorX64_push$2 ; push
  dq __CodeGeneratorX64_pop$2 ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __CodeGeneratorX64_lea$3 ; lea
  dq __CodeGeneratorX64_mov$3 ; mov
  dq __CodeGeneratorX64_call1$3 ; call1
  dq __CodeGeneratorX64_call2$4 ; call2
  dq __CodeGeneratorX64_call3$5 ; call3
  dq __CodeGeneratorX64_call3AndDestroy$5 ; call3AndDestroy
  dq __CodeGeneratorX64_variantMove$3 ; variantMove
  dq __CodeGeneratorX64_variantDestroy$2 ; variantDestroy
  dq __CodeGeneratorX64_pushParametersBeforeCall$2 ; pushParametersBeforeCall
  dq __CodeGeneratorX64_emitConstant$5 ; emitConstant
  dq __CodeGeneratorX64_emitStringBufferHead$5 ; emitStringBufferHead
  dq __CodeGeneratorX64_emitStringBufferContent$5 ; emitStringBufferContent
  dq __CodeGeneratorX64_emitArrayBufferHead$5 ; emitArrayBufferHead
  dq __CodeGeneratorX64_emitArrayBufferContent$5 ; emitArrayBufferContent
  dq __CodeGeneratorX64__cmp_cc_int64$5 ; _cmp_cc_int64
  dq __CodeGeneratorX64__cmp_cc_int32$5 ; _cmp_cc_int32
  dq __CodeGeneratorX64__cmp_cc_float64$5 ; _cmp_cc_float64
  dq __CodeGeneratorX64__jmp_if_cc_int64$5 ; _jmp_if_cc_int64
  dq __CodeGeneratorX64__jmp_if_cc_int32$5 ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_MIRQuadOptimizer:
  dq __MIRQuadOptimizer_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __PipeAbstract__emitOneItem$2 ; _emitOneItem
  dq __MIRQuadOptimizer_processOneItem$2 ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __PipeAbstract_connectTo$2 ; connectTo
  dq __PipeAbstract__replaceLastItem$2 ; _replaceLastItem
  dq __PipeAbstract_processArrayOfItems$2 ; processArrayOfItems
  dq __PipeAbstract_flush$1 ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MIRQuadOptimizer__decreaseReadAndWriteHits$2 ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_VMachineStackObject:
  dq __VMachineStackObject_constructor$2 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __MOLD_NullMethodCalled ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __MOLD_NullMethodCalled ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __MOLD_NullMethodCalled ; loadCode
  dq __MOLD_NullMethodCalled ; dumpCode

vtable_VMachineStack:
  dq __VMachineStack_constructor$1 ; constructor
  dq __MOLD_NullMethodCalled ; _printInternal
  dq __MOLD_NullMethodCalled ; print
  dq __MOLD_NullMethodCalled ; _convertInternal
  dq __MOLD_NullMethodCalled ; convert
  dq __MOLD_NullMethodCalled ; _handleError
  dq __MOLD_NullMethodCalled ; _parseInternal
  dq __MOLD_NullMethodCalled ; parseFile
  dq __MOLD_NullMethodCalled ; parseText
  dq __MOLD_NullMethodCalled ; _debug
  dq __MOLD_NullMethodCalled ; _error
  dq __MOLD_NullMethodCalled ; logError
  dq __MOLD_NullMethodCalled ; getDeep
  dq __MOLD_NullMethodCalled ; exportSymbols
  dq __MOLD_NullMethodCalled ; insert
  dq __MOLD_NullMethodCalled ; remove
  dq __MOLD_NullMethodCalled ; importExternalVariable
  dq __MOLD_NullMethodCalled ; insertGlobal
  dq __MOLD_NullMethodCalled ; getSymbolTable
  dq __MOLD_NullMethodCalled ; _lookupInternal
  dq __MOLD_NullMethodCalled ; lookup
  dq __MOLD_NullMethodCalled ; lookupForRead
  dq __MOLD_NullMethodCalled ; lookupForCall
  dq __MOLD_NullMethodCalled ; lookupForWrite
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert
  dq __MOLD_NullMethodCalled ; lookupGlobal
  dq __MOLD_NullMethodCalled ; decreaseReadHits
  dq __MOLD_NullMethodCalled ; decreaseWriteHits
  dq __MOLD_NullMethodCalled ; isset
  dq __MOLD_NullMethodCalled ; enterScope
  dq __MOLD_NullMethodCalled ; enterScopeForLoop
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure
  dq __MOLD_NullMethodCalled ; leaveScope
  dq __MOLD_NullMethodCalled ; insertFunction
  dq __MOLD_NullMethodCalled ; lookupFunction
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName
  dq __MOLD_NullMethodCalled ; insertClass
  dq __MOLD_NullMethodCalled ; lookupClass
  dq __MOLD_NullMethodCalled ; insertLocal
  dq __MOLD_NullMethodCalled ; importGlobal
  dq __MOLD_NullMethodCalled ; insertParam
  dq __MOLD_NullMethodCalled ; insertRetVal
  dq __MOLD_NullMethodCalled ; insertConst
  dq __MOLD_NullMethodCalled ; insertLiteral
  dq __MOLD_NullMethodCalled ; createConstFromValue
  dq __MOLD_NullMethodCalled ; assignValue
  dq __MOLD_NullMethodCalled ; assignNode
  dq __MOLD_NullMethodCalled ; assignType
  dq __MOLD_NullMethodCalled ; assignMirType
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols
  dq __MOLD_NullMethodCalled ; createLabel
  dq __MOLD_NullMethodCalled ; insertJmpTable
  dq __MOLD_NullMethodCalled ; getTempVar
  dq __MOLD_NullMethodCalled ; getTempVarForWrite
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite
  dq __MOLD_NullMethodCalled ; releaseTempVar
  dq __MOLD_NullMethodCalled ; resolveImports
  dq __MOLD_NullMethodCalled ; logDebug
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromLeftNode
  dq __MOLD_NullMethodCalled ; _collectSymbolsFromRightNode
  dq __MOLD_NullMethodCalled ; _updateVariableSymbolInfo
  dq __MOLD_NullMethodCalled ; _collectSymbols
  dq __MOLD_NullMethodCalled ; setLogContext
  dq __MOLD_NullMethodCalled ; buildSymbolTable
  dq __MOLD_NullMethodCalled ; _assignValue
  dq __MOLD_NullMethodCalled ; _getValue
  dq __MOLD_NullMethodCalled ; _mergeValues
  dq __MOLD_NullMethodCalled ; _processConditionalNode
  dq __MOLD_NullMethodCalled ; _processTwoAlternativeNodes
  dq __MOLD_NullMethodCalled ; _getArrayOfValueNodes
  dq __MOLD_NullMethodCalled ; _processNode
  dq __MOLD_NullMethodCalled ; processNode
  dq __MOLD_NullMethodCalled ; _setToImm
  dq __MOLD_NullMethodCalled ; _processNodeArray
  dq __MOLD_NullMethodCalled ; _processNodeMap
  dq __MOLD_NullMethodCalled ; processNodeUntilNotChanged
  dq __MOLD_NullMethodCalled ; _getNextId
  dq __MOLD_NullMethodCalled ; _createNodeVariable
  dq __MOLD_NullMethodCalled ; _removeNode
  dq __MOLD_NullMethodCalled ; _moveNode
  dq __MOLD_NullMethodCalled ; _processChildNodes
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector
  dq __MOLD_NullMethodCalled ; _resolveParamsForInline
  dq __MOLD_NullMethodCalled ; _injectParamInit
  dq __MOLD_NullMethodCalled ; _injectFunctionBody
  dq __MOLD_NullMethodCalled ; _processNode_injectInlineFunctions
  dq __MOLD_NullMethodCalled ; beginProc
  dq __MOLD_NullMethodCalled ; endProc
  dq __MOLD_NullMethodCalled ; resolveLabel
  dq __MOLD_NullMethodCalled ; _resolveJmps
  dq __MOLD_NullMethodCalled ; comment
  dq __MOLD_NullMethodCalled ; push0
  dq __MOLD_NullMethodCalled ; push1
  dq __MOLD_NullMethodCalled ; push2
  dq __MOLD_NullMethodCalled ; push3
  dq __MOLD_NullMethodCalled ; nop
  dq __MOLD_NullMethodCalled ; neg
  dq __MOLD_NullMethodCalled ; add
  dq __MOLD_NullMethodCalled ; sub
  dq __MOLD_NullMethodCalled ; mul
  dq __MOLD_NullMethodCalled ; div
  dq __MOLD_NullMethodCalled ; idiv
  dq __MOLD_NullMethodCalled ; stringJoin
  dq __MOLD_NullMethodCalled ; loadArray
  dq __MOLD_NullMethodCalled ; loadMap
  dq __MOLD_NullMethodCalled ; loadImm
  dq __MOLD_NullMethodCalled ; cmpEQ
  dq __MOLD_NullMethodCalled ; cmpNEQ
  dq __MOLD_NullMethodCalled ; cmpGT
  dq __MOLD_NullMethodCalled ; cmpGE
  dq __MOLD_NullMethodCalled ; cmpLT
  dq __MOLD_NullMethodCalled ; cmpLE
  dq __MOLD_NullMethodCalled ; loadLocal
  dq __MOLD_NullMethodCalled ; loadParamN
  dq __MOLD_NullMethodCalled ; loadGlobal
  dq __MOLD_NullMethodCalled ; loadRetVal
  dq __MOLD_NullMethodCalled ; loadFromIndex
  dq __MOLD_NullMethodCalled ; loadFromKey
  dq __MOLD_NullMethodCalled ; allocateLocalId
  dq __MOLD_NullMethodCalled ; storeLocal
  dq __MOLD_NullMethodCalled ; storeParamN
  dq __MOLD_NullMethodCalled ; storeGlobal
  dq __MOLD_NullMethodCalled ; storeRetVal
  dq __MOLD_NullMethodCalled ; storeAtIndex
  dq __MOLD_NullMethodCalled ; storeAtKey
  dq __MOLD_NullMethodCalled ; moveBack
  dq __MOLD_NullMethodCalled ; drop
  dq __MOLD_NullMethodCalled ; dropN
  dq __MOLD_NullMethodCalled ; dup
  dq __MOLD_NullMethodCalled ; over
  dq __MOLD_NullMethodCalled ; loadArgc
  dq __MOLD_NullMethodCalled ; loadArgv
  dq __MOLD_NullMethodCalled ; createObject
  dq __MOLD_NullMethodCalled ; _jmpInternal
  dq __MOLD_NullMethodCalled ; jmp
  dq __MOLD_NullMethodCalled ; jmpIfTrue
  dq __MOLD_NullMethodCalled ; jmpIfFalse
  dq __MOLD_NullMethodCalled ; ret
  dq __MOLD_NullMethodCalled ; innerRet
  dq __MOLD_NullMethodCalled ; call
  dq __MOLD_NullMethodCalled ; vcall
  dq __MOLD_NullMethodCalled ; callPrint
  dq __MOLD_NullMethodCalled ; initFrame
  dq __MOLD_NullMethodCalled ; emitLabel
  dq __MOLD_NullMethodCalled ; createAndEmitLabel
  dq __MOLD_NullMethodCalled ; createMethod
  dq __MOLD_NullMethodCalled ; createClass
  dq __MOLD_NullMethodCalled ; getClassProtoById
  dq __MOLD_NullMethodCalled ; retValGuard
  dq __MOLD_NullMethodCalled ; forEach
  dq __MOLD_NullMethodCalled ; syscall
  dq __MOLD_NullMethodCalled ; clearLogContext
  dq __MOLD_NullMethodCalled ; getMir1Code
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding
  dq __MOLD_NullMethodCalled ; getAstPreprocessor
  dq __MOLD_NullMethodCalled ; getAstEvaluator
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf
  dq __MOLD_NullMethodCalled ; getAstOptimizerInline
  dq __MOLD_NullMethodCalled ; getAstModuleResolver
  dq __MOLD_NullMethodCalled ; getAstTypeCast
  dq __MOLD_NullMethodCalled ; _printNode_twoArgsOp
  dq __MOLD_NullMethodCalled ; _printNode_codeBlock
  dq __MOLD_NullMethodCalled ; _printNode_paramsList
  dq __MOLD_NullMethodCalled ; _printNode
  dq __MOLD_NullMethodCalled ; printNode
  dq __MOLD_NullMethodCalled ; _printSymbolTable
  dq __MOLD_NullMethodCalled ; _loadArgsVector
  dq __MOLD_NullMethodCalled ; _loadArgsCount
  dq __MOLD_NullMethodCalled ; _syscall
  dq __MOLD_NullMethodCalled ; _loadArray
  dq __MOLD_NullMethodCalled ; _loadMap
  dq __MOLD_NullMethodCalled ; _loadImm
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant
  dq __MOLD_NullMethodCalled ; _loadVariable
  dq __VMachineStack__call$2 ; _call
  dq __MOLD_NullMethodCalled ; _invokeMethod
  dq __MOLD_NullMethodCalled ; _callPrint
  dq __MOLD_NullMethodCalled ; _neg
  dq __MOLD_NullMethodCalled ; _add
  dq __MOLD_NullMethodCalled ; _stringJoin
  dq __MOLD_NullMethodCalled ; _sub
  dq __MOLD_NullMethodCalled ; _mul
  dq __MOLD_NullMethodCalled ; _div
  dq __MOLD_NullMethodCalled ; _idiv
  dq __MOLD_NullMethodCalled ; _compareEQ
  dq __MOLD_NullMethodCalled ; _compareNEQ
  dq __MOLD_NullMethodCalled ; _compareLT
  dq __MOLD_NullMethodCalled ; _compareLE
  dq __MOLD_NullMethodCalled ; _compareGT
  dq __MOLD_NullMethodCalled ; _compareGE
  dq __MOLD_NullMethodCalled ; _boolAnd
  dq __MOLD_NullMethodCalled ; _boolOr
  dq __MOLD_NullMethodCalled ; _loadFromIndex
  dq __MOLD_NullMethodCalled ; _loadFromKey
  dq __MOLD_NullMethodCalled ; _storeAtIndex
  dq __MOLD_NullMethodCalled ; _storeAtKey
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop
  dq __MOLD_NullMethodCalled ; _createObject
  dq __MOLD_NullMethodCalled ; _convert
  dq __MOLD_NullMethodCalled ; _dropRetVal
  dq __MOLD_NullMethodCalled ; _declareFunction
  dq __MOLD_NullMethodCalled ; _declareClass
  dq __MOLD_NullMethodCalled ; _emitFunctionBody
  dq __MOLD_NullMethodCalled ; _declareExternalFunction
  dq __MOLD_NullMethodCalled ; _getTempVar
  dq __MOLD_NullMethodCalled ; _releaseTempVar
  dq __MOLD_NullMethodCalled ; _enterScope
  dq __MOLD_NullMethodCalled ; _leaveScope
  dq __MOLD_NullMethodCalled ; _verifyNumberOfParameters
  dq __MOLD_NullMethodCalled ; _emitFunction
  dq __MOLD_NullMethodCalled ; _emitGlobals
  dq __MOLD_NullMethodCalled ; _callSuper
  dq __MOLD_NullMethodCalled ; _getClassProto
  dq __MOLD_NullMethodCalled ; _getMethodProto
  dq __MOLD_NullMethodCalled ; _isset
  dq __MOLD_NullMethodCalled ; _importGlobal
  dq __MOLD_NullMethodCalled ; _declareVariableIfNotSet
  dq __MOLD_NullMethodCalled ; _declareAndAssign
  dq __MOLD_NullMethodCalled ; _assign
  dq __MOLD_NullMethodCalled ; _declareVariable
  dq __MOLD_NullMethodCalled ; _evaluateNode
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr
  dq __MOLD_NullMethodCalled ; _evaluateNodeCall
  dq __MOLD_NullMethodCalled ; _evaluateNodeInvokeMethod
  dq __MOLD_NullMethodCalled ; _executeNodeFor
  dq __MOLD_NullMethodCalled ; _executeNodeWhile
  dq __MOLD_NullMethodCalled ; _executeNodeIf
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch
  dq __MOLD_NullMethodCalled ; _executeNode
  dq __MOLD_NullMethodCalled ; _executeNodeForEach
  dq __VMachineStack_run$1 ; run
  dq __MOLD_NullMethodCalled ; getItems
  dq __MOLD_NullMethodCalled ; push
  dq __MOLD_NullMethodCalled ; pop
  dq __MOLD_NullMethodCalled ; eat
  dq __MOLD_NullMethodCalled ; eatN
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx
  dq __MOLD_NullMethodCalled ; peek
  dq __MOLD_NullMethodCalled ; peekN
  dq __MOLD_NullMethodCalled ; _emitOneItem
  dq __MOLD_NullMethodCalled ; processOneItem
  dq __MOLD_NullMethodCalled ; emitZeroArgsOpcode
  dq __MOLD_NullMethodCalled ; emitTargetOnlyOpcode
  dq __MOLD_NullMethodCalled ; emitOneArgOpcode
  dq __MOLD_NullMethodCalled ; emitTwoArgsOpcode
  dq __MOLD_NullMethodCalled ; emitComment
  dq __MOLD_NullMethodCalled ; emitJmp
  dq __MOLD_NullMethodCalled ; emitJmpByTable
  dq __MOLD_NullMethodCalled ; emitMoveVariantOpcode
  dq __MOLD_NullMethodCalled ; popForRead
  dq __MOLD_NullMethodCalled ; popForWrite
  dq __MOLD_NullMethodCalled ; popOneArgAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popTwoArgsAndEmitOpcode
  dq __MOLD_NullMethodCalled ; popParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitProcBegin
  dq __MOLD_NullMethodCalled ; emitProcEnd
  dq __MOLD_NullMethodCalled ; emitRet
  dq __MOLD_NullMethodCalled ; emitMoveBackVariant
  dq __MOLD_NullMethodCalled ; connectTo
  dq __MOLD_NullMethodCalled ; _replaceLastItem
  dq __MOLD_NullMethodCalled ; processArrayOfItems
  dq __MOLD_NullMethodCalled ; flush
  dq __MOLD_NullMethodCalled ; _pad
  dq __MOLD_NullMethodCalled ; getQuads
  dq __MOLD_NullMethodCalled ; _printSymbolInfoRow
  dq __MOLD_NullMethodCalled ; _dumpFrameInfo
  dq __MOLD_NullMethodCalled ; printQuads
  dq __MOLD_NullMethodCalled ; lea
  dq __MOLD_NullMethodCalled ; mov
  dq __MOLD_NullMethodCalled ; call1
  dq __MOLD_NullMethodCalled ; call2
  dq __MOLD_NullMethodCalled ; call3
  dq __MOLD_NullMethodCalled ; call3AndDestroy
  dq __MOLD_NullMethodCalled ; variantMove
  dq __MOLD_NullMethodCalled ; variantDestroy
  dq __MOLD_NullMethodCalled ; pushParametersBeforeCall
  dq __MOLD_NullMethodCalled ; emitConstant
  dq __MOLD_NullMethodCalled ; emitStringBufferHead
  dq __MOLD_NullMethodCalled ; emitStringBufferContent
  dq __MOLD_NullMethodCalled ; emitArrayBufferHead
  dq __MOLD_NullMethodCalled ; emitArrayBufferContent
  dq __MOLD_NullMethodCalled ; _cmp_cc_int64
  dq __MOLD_NullMethodCalled ; _cmp_cc_int32
  dq __MOLD_NullMethodCalled ; _cmp_cc_float64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int64
  dq __MOLD_NullMethodCalled ; _jmp_if_cc_int32
  dq __MOLD_NullMethodCalled ; _decreaseReadAndWriteHits
  dq __VMachineStack_loadCode$2 ; loadCode
  dq __VMachineStack_dumpCode$1 ; dumpCode

; ------------------------------------------------------------------------------
;                               Imports section
; ------------------------------------------------------------------------------
section '.idata' import data readable writeable
  include 'CommonImports.asm'

; ------------------------------------------------------------------------------
;                                Debug section
; ------------------------------------------------------------------------------
section '.debug' data readable
SymbolTable:
dq 0, 0
include 'SymbolTableCommon.asm'
dq  debug , name_debug
dq  __AST_constructor$3 , name___AST_constructor$3
dq  __AST__printInternal$3 , name___AST__printInternal$3
dq  __AST_print$1 , name___AST_print$1
dq  __AST__convertInternal$3 , name___AST__convertInternal$3
dq  __AST_convert$1 , name___AST_convert$1
dq  __Parser_constructor$1 , name___Parser_constructor$1
dq  __Parser__handleError$4 , name___Parser__handleError$4
dq  __Parser__parseInternal$2 , name___Parser__parseInternal$2
dq  __Parser_parseFile$2 , name___Parser_parseFile$2
dq  __Parser_parseText$2 , name___Parser_parseText$2
dq  AST_GetNextId , name_AST_GetNextId
dq  AST_CreateNodeInteger , name_AST_CreateNodeInteger
dq  AST_GetOpcodeAsText , name_AST_GetOpcodeAsText
dq  AST_GetOpcodeAsShortText , name_AST_GetOpcodeAsShortText
dq  AST_InvertBoolean , name_AST_InvertBoolean
dq  AST_IsVar , name_AST_IsVar
dq  AST_IsImm , name_AST_IsImm
dq  AST_IsPrimitiveImm , name_AST_IsPrimitiveImm
dq  AST_IsImmWithValue , name_AST_IsImmWithValue
dq  AST_IsEmpty , name_AST_IsEmpty
dq  AST_IsImmOrVar , name_AST_IsImmOrVar
dq  AST_HasSideEffects , name_AST_HasSideEffects
dq  AST_HashInternal , name_AST_HashInternal
dq  AST_Hash , name_AST_Hash
dq  AST_HashForCodeComparison , name_AST_HashForCodeComparison
dq  AST_IsDataNode , name_AST_IsDataNode
dq  AST_ConvertDataTypeToText , name_AST_ConvertDataTypeToText
dq  AST_ConvertDataTypeToMIR , name_AST_ConvertDataTypeToMIR
dq  AST_GetDataType , name_AST_GetDataType
dq  AST_TypeCast , name_AST_TypeCast
dq  AST_GetTopNodeInBlock , name_AST_GetTopNodeInBlock
dq  AST_GetParentBlock , name_AST_GetParentBlock
dq  AST_IsOkAsBox , name_AST_IsOkAsBox
dq  AST_CloneNode , name_AST_CloneNode
dq  SymbolTable_GetNextId , name_SymbolTable_GetNextId
dq  __SymbolTable_constructor$2 , name___SymbolTable_constructor$2
dq  __SymbolTable__debug$2 , name___SymbolTable__debug$2
dq  __SymbolTable__error$2 , name___SymbolTable__error$2
dq  __SymbolTable_getDeep$1 , name___SymbolTable_getDeep$1
dq  __SymbolTable_exportSymbols$1 , name___SymbolTable_exportSymbols$1
dq  __SymbolTable_insert$3 , name___SymbolTable_insert$3
dq  __SymbolTable_remove$2 , name___SymbolTable_remove$2
dq  __SymbolTable_importExternalVariable$2 , name___SymbolTable_importExternalVariable$2
dq  __SymbolTable_insertGlobal$3 , name___SymbolTable_insertGlobal$3
dq  __SymbolTable__lookupInternal$2 , name___SymbolTable__lookupInternal$2
dq  __SymbolTable_lookup$2 , name___SymbolTable_lookup$2
dq  __SymbolTable_lookupForRead$2 , name___SymbolTable_lookupForRead$2
dq  __SymbolTable_lookupForCall$2 , name___SymbolTable_lookupForCall$2
dq  __SymbolTable_lookupForWrite$2 , name___SymbolTable_lookupForWrite$2
dq  __SymbolTable_lookupForReadAndWrite$2 , name___SymbolTable_lookupForReadAndWrite$2
dq  __SymbolTable_lookupForWriteOrInsert$2 , name___SymbolTable_lookupForWriteOrInsert$2
dq  __SymbolTable_lookupGlobal$2 , name___SymbolTable_lookupGlobal$2
dq  __SymbolTable_decreaseReadHits$2 , name___SymbolTable_decreaseReadHits$2
dq  __SymbolTable_decreaseWriteHits$2 , name___SymbolTable_decreaseWriteHits$2
dq  __SymbolTable_isset$2 , name___SymbolTable_isset$2
dq  __SymbolTable_enterScope$1 , name___SymbolTable_enterScope$1
dq  __SymbolTable_enterScopeForLoop$1 , name___SymbolTable_enterScopeForLoop$1
dq  __SymbolTable_enterScopeForProcedure$2 , name___SymbolTable_enterScopeForProcedure$2
dq  __SymbolTable_leaveScope$1 , name___SymbolTable_leaveScope$1
dq  __SymbolTable_insertFunction$3 , name___SymbolTable_insertFunction$3
dq  __SymbolTable_lookupFunction$3 , name___SymbolTable_lookupFunction$3
dq  __SymbolTable_getCurrentFunctionName$1 , name___SymbolTable_getCurrentFunctionName$1
dq  __SymbolTable_insertClass$3 , name___SymbolTable_insertClass$3
dq  __SymbolTable_lookupClass$2 , name___SymbolTable_lookupClass$2
dq  __SymbolTable_insertLocal$2 , name___SymbolTable_insertLocal$2
dq  __SymbolTable_importGlobal$2 , name___SymbolTable_importGlobal$2
dq  __SymbolTable_insertParam$3 , name___SymbolTable_insertParam$3
dq  __SymbolTable_insertRetVal$2 , name___SymbolTable_insertRetVal$2
dq  __SymbolTable_insertConst$3 , name___SymbolTable_insertConst$3
dq  __SymbolTable_insertLiteral$2 , name___SymbolTable_insertLiteral$2
dq  __SymbolTable_createConstFromValue$2 , name___SymbolTable_createConstFromValue$2
dq  __SymbolTable_assignValue$3 , name___SymbolTable_assignValue$3
dq  __SymbolTable_assignNode$3 , name___SymbolTable_assignNode$3
dq  __SymbolTable_assignType$3 , name___SymbolTable_assignType$3
dq  __SymbolTable_assignMirType$3 , name___SymbolTable_assignMirType$3
dq  __SymbolTable_removeUnusedSymbols$1 , name___SymbolTable_removeUnusedSymbols$1
dq  __SymbolTable_createLabel$1 , name___SymbolTable_createLabel$1
dq  __SymbolTable_insertJmpTable$2 , name___SymbolTable_insertJmpTable$2
dq  __SymbolTable_getTempVar$2 , name___SymbolTable_getTempVar$2
dq  __SymbolTable_getTempVarForWrite$2 , name___SymbolTable_getTempVarForWrite$2
dq  __SymbolTable_getTempVarForReadAndWrite$2 , name___SymbolTable_getTempVarForReadAndWrite$2
dq  __SymbolTable_releaseTempVar$2 , name___SymbolTable_releaseTempVar$2
dq  __ASTModuleResolver_constructor$2 , name___ASTModuleResolver_constructor$2
dq  __ASTModuleResolver_resolveImports$2 , name___ASTModuleResolver_resolveImports$2
dq  __ASTSymbolsCollector_constructor$2 , name___ASTSymbolsCollector_constructor$2
dq  __ASTSymbolsCollector__debug$2 , name___ASTSymbolsCollector__debug$2
dq  __ASTSymbolsCollector__collectSymbolsFromLeftNode$3 , name___ASTSymbolsCollector__collectSymbolsFromLeftNode$3
dq  __ASTSymbolsCollector__collectSymbolsFromRightNode$3 , name___ASTSymbolsCollector__collectSymbolsFromRightNode$3
dq  __ASTSymbolsCollector__updateVariableSymbolInfo$4 , name___ASTSymbolsCollector__updateVariableSymbolInfo$4
dq  __ASTSymbolsCollector__collectSymbols$4 , name___ASTSymbolsCollector__collectSymbols$4
dq  __ASTSymbolsCollector_buildSymbolTable$2 , name___ASTSymbolsCollector_buildSymbolTable$2
dq  __ASTEvaluator_constructor$2 , name___ASTEvaluator_constructor$2
dq  __ASTEvaluator__debug$2 , name___ASTEvaluator__debug$2
dq  __ASTEvaluator__assignValue$4 , name___ASTEvaluator__assignValue$4
dq  __ASTEvaluator__getValue$3 , name___ASTEvaluator__getValue$3
dq  __ASTEvaluator__mergeValues$3 , name___ASTEvaluator__mergeValues$3
dq  __ASTEvaluator__processConditionalNode$3 , name___ASTEvaluator__processConditionalNode$3
dq  __ASTEvaluator__processTwoAlternativeNodes$4 , name___ASTEvaluator__processTwoAlternativeNodes$4
dq  __ASTEvaluator__getArrayOfValueNodes$2 , name___ASTEvaluator__getArrayOfValueNodes$2
dq  __ASTEvaluator__processNode$3 , name___ASTEvaluator__processNode$3
dq  __ASTEvaluator_processNode$2 , name___ASTEvaluator_processNode$2
dq  __ASTPreprocessor_constructor$2 , name___ASTPreprocessor_constructor$2
dq  __ASTPreprocessor__debug$2 , name___ASTPreprocessor__debug$2
dq  __ASTPreprocessor__processNode$2 , name___ASTPreprocessor__processNode$2
dq  __ASTPreprocessor_processNode$2 , name___ASTPreprocessor_processNode$2
dq  __ASTOptimizerConstantFolding_constructor$2 , name___ASTOptimizerConstantFolding_constructor$2
dq  __ASTOptimizerConstantFolding__debug$2 , name___ASTOptimizerConstantFolding__debug$2
dq  __ASTOptimizerConstantFolding__setToImm$3 , name___ASTOptimizerConstantFolding__setToImm$3
dq  __ASTOptimizerConstantFolding__processNodeArray$2 , name___ASTOptimizerConstantFolding__processNodeArray$2
dq  __ASTOptimizerConstantFolding__processNodeMap$2 , name___ASTOptimizerConstantFolding__processNodeMap$2
dq  __ASTOptimizerConstantFolding_processNode$2 , name___ASTOptimizerConstantFolding_processNode$2
dq  __ASTOptimizerConstantFolding_processNodeUntilNotChanged$2 , name___ASTOptimizerConstantFolding_processNodeUntilNotChanged$2
dq  __ASTOptimizerCSE_constructor$2 , name___ASTOptimizerCSE_constructor$2
dq  __ASTOptimizerCSE__getNextId$1 , name___ASTOptimizerCSE__getNextId$1
dq  __ASTOptimizerCSE__createNodeVariable$1 , name___ASTOptimizerCSE__createNodeVariable$1
dq  __ASTOptimizerCSE__debug$2 , name___ASTOptimizerCSE__debug$2
dq  __ASTOptimizerCSE__processNode$4 , name___ASTOptimizerCSE__processNode$4
dq  __ASTOptimizerCSE_processNode$2 , name___ASTOptimizerCSE_processNode$2
dq  __ASTOptimizerDeadCodeRemove_constructor$2 , name___ASTOptimizerDeadCodeRemove_constructor$2
dq  __ASTOptimizerDeadCodeRemove__debug$2 , name___ASTOptimizerDeadCodeRemove__debug$2
dq  __ASTOptimizerDeadCodeRemove__removeNode$2 , name___ASTOptimizerDeadCodeRemove__removeNode$2
dq  __ASTOptimizerDeadCodeRemove__moveNode$3 , name___ASTOptimizerDeadCodeRemove__moveNode$3
dq  __ASTOptimizerDeadCodeRemove__processChildNodes$3 , name___ASTOptimizerDeadCodeRemove__processChildNodes$3
dq  __ASTOptimizerDeadCodeRemove__processNode$3 , name___ASTOptimizerDeadCodeRemove__processNode$3
dq  __ASTOptimizerDeadCodeRemove_processNode$2 , name___ASTOptimizerDeadCodeRemove_processNode$2
dq  __ASTOptimizerVCall_constructor$2 , name___ASTOptimizerVCall_constructor$2
dq  __ASTOptimizerVCall__debug$2 , name___ASTOptimizerVCall__debug$2
dq  __ASTOptimizerVCall__processNode$2 , name___ASTOptimizerVCall__processNode$2
dq  __ASTOptimizerVCall_processNode$2 , name___ASTOptimizerVCall_processNode$2
dq  __ASTOptimizerIf_constructor$2 , name___ASTOptimizerIf_constructor$2
dq  __ASTOptimizerIf__debug$2 , name___ASTOptimizerIf__debug$2
dq  __ASTOptimizerIf__processNode$2 , name___ASTOptimizerIf__processNode$2
dq  __ASTOptimizerIf_processNode$2 , name___ASTOptimizerIf_processNode$2
dq  __ASTOptimizerInline_constructor$2 , name___ASTOptimizerInline_constructor$2
dq  __ASTOptimizerInline__debug$2 , name___ASTOptimizerInline__debug$2
dq  __ASTOptimizerInline__resolveParamsForInline$4 , name___ASTOptimizerInline__resolveParamsForInline$4
dq  __ASTOptimizerInline__injectParamInit$5 , name___ASTOptimizerInline__injectParamInit$5
dq  __ASTOptimizerInline__injectFunctionBody$4 , name___ASTOptimizerInline__injectFunctionBody$4
dq  __ASTOptimizerInline__processNode_injectInlineFunctions$4 , name___ASTOptimizerInline__processNode_injectInlineFunctions$4
dq  __ASTOptimizerInline__processNode$3 , name___ASTOptimizerInline__processNode$3
dq  __ASTOptimizerInline_processNode$2 , name___ASTOptimizerInline_processNode$2
dq  __ASTTypeCast_constructor$2 , name___ASTTypeCast_constructor$2
dq  __ASTTypeCast__debug$2 , name___ASTTypeCast__debug$2
dq  __ASTTypeCast__processNode$2 , name___ASTTypeCast__processNode$2
dq  __ASTTypeCast_processNode$2 , name___ASTTypeCast_processNode$2
dq  __MIRCode_constructor$1 , name___MIRCode_constructor$1
dq  __MIRCode_beginProc$5 , name___MIRCode_beginProc$5
dq  __MIRCode_endProc$1 , name___MIRCode_endProc$1
dq  __MIRCode_resolveLabel$2 , name___MIRCode_resolveLabel$2
dq  __MIRCode__resolveJmps$1 , name___MIRCode__resolveJmps$1
dq  __MIRCode_comment$2 , name___MIRCode_comment$2
dq  __MIRCode_push0$2 , name___MIRCode_push0$2
dq  __MIRCode_push1$3 , name___MIRCode_push1$3
dq  __MIRCode_push2$4 , name___MIRCode_push2$4
dq  __MIRCode_push3$5 , name___MIRCode_push3$5
dq  __MIRCode_nop$1 , name___MIRCode_nop$1
dq  __MIRCode_neg$1 , name___MIRCode_neg$1
dq  __MIRCode_add$1 , name___MIRCode_add$1
dq  __MIRCode_sub$1 , name___MIRCode_sub$1
dq  __MIRCode_mul$1 , name___MIRCode_mul$1
dq  __MIRCode_div$1 , name___MIRCode_div$1
dq  __MIRCode_idiv$1 , name___MIRCode_idiv$1
dq  __MIRCode_stringJoin$1 , name___MIRCode_stringJoin$1
dq  __MIRCode_loadArray$1 , name___MIRCode_loadArray$1
dq  __MIRCode_loadMap$1 , name___MIRCode_loadMap$1
dq  __MIRCode_loadImm$2 , name___MIRCode_loadImm$2
dq  __MIRCode_cmpEQ$1 , name___MIRCode_cmpEQ$1
dq  __MIRCode_cmpNEQ$1 , name___MIRCode_cmpNEQ$1
dq  __MIRCode_cmpGT$1 , name___MIRCode_cmpGT$1
dq  __MIRCode_cmpGE$1 , name___MIRCode_cmpGE$1
dq  __MIRCode_cmpLT$1 , name___MIRCode_cmpLT$1
dq  __MIRCode_cmpLE$1 , name___MIRCode_cmpLE$1
dq  __MIRCode_loadLocal$2 , name___MIRCode_loadLocal$2
dq  __MIRCode_loadParamN$2 , name___MIRCode_loadParamN$2
dq  __MIRCode_loadGlobal$2 , name___MIRCode_loadGlobal$2
dq  __MIRCode_loadRetVal$1 , name___MIRCode_loadRetVal$1
dq  __MIRCode_loadFromIndex$1 , name___MIRCode_loadFromIndex$1
dq  __MIRCode_loadFromKey$1 , name___MIRCode_loadFromKey$1
dq  __MIRCode_allocateLocalId$1 , name___MIRCode_allocateLocalId$1
dq  __MIRCode_storeLocal$2 , name___MIRCode_storeLocal$2
dq  __MIRCode_storeParamN$2 , name___MIRCode_storeParamN$2
dq  __MIRCode_storeGlobal$2 , name___MIRCode_storeGlobal$2
dq  __MIRCode_storeRetVal$1 , name___MIRCode_storeRetVal$1
dq  __MIRCode_storeAtIndex$1 , name___MIRCode_storeAtIndex$1
dq  __MIRCode_storeAtKey$1 , name___MIRCode_storeAtKey$1
dq  __MIRCode_moveBack$1 , name___MIRCode_moveBack$1
dq  __MIRCode_drop$1 , name___MIRCode_drop$1
dq  __MIRCode_dropN$2 , name___MIRCode_dropN$2
dq  __MIRCode_dup$1 , name___MIRCode_dup$1
dq  __MIRCode_over$1 , name___MIRCode_over$1
dq  __MIRCode_loadArgc$1 , name___MIRCode_loadArgc$1
dq  __MIRCode_loadArgv$1 , name___MIRCode_loadArgv$1
dq  __MIRCode_createObject$2 , name___MIRCode_createObject$2
dq  __MIRCode__jmpInternal$3 , name___MIRCode__jmpInternal$3
dq  __MIRCode_jmp$2 , name___MIRCode_jmp$2
dq  __MIRCode_jmpIfTrue$2 , name___MIRCode_jmpIfTrue$2
dq  __MIRCode_jmpIfFalse$2 , name___MIRCode_jmpIfFalse$2
dq  __MIRCode_ret$2 , name___MIRCode_ret$2
dq  __MIRCode_innerRet$1 , name___MIRCode_innerRet$1
dq  __MIRCode_call$2 , name___MIRCode_call$2
dq  __MIRCode_vcall$3 , name___MIRCode_vcall$3
dq  __MIRCode_callPrint$2 , name___MIRCode_callPrint$2
dq  __MIRCode_initFrame$2 , name___MIRCode_initFrame$2
dq  __MIRCode_createLabel$1 , name___MIRCode_createLabel$1
dq  __MIRCode_emitLabel$2 , name___MIRCode_emitLabel$2
dq  __MIRCode_createAndEmitLabel$1 , name___MIRCode_createAndEmitLabel$1
dq  __MIRCode_createMethod$2 , name___MIRCode_createMethod$2
dq  __MIRCode_createClass$2 , name___MIRCode_createClass$2
dq  __MIRCode_getClassProtoById$2 , name___MIRCode_getClassProtoById$2
dq  __MIRCode_retValGuard$3 , name___MIRCode_retValGuard$3
dq  __MIRCode_forEach$4 , name___MIRCode_forEach$4
dq  __MIRCode_syscall$3 , name___MIRCode_syscall$3
dq  __AppMold_constructor$1 , name___AppMold_constructor$1
dq  __AppMold_clearLogContext$1 , name___AppMold_clearLogContext$1
dq  __AppMold_setLogContext$2 , name___AppMold_setLogContext$2
dq  __AppMold_logDebug$2 , name___AppMold_logDebug$2
dq  __AppMold_logError$2 , name___AppMold_logError$2
dq  __AppMold_getMir1Code$1 , name___AppMold_getMir1Code$1
dq  __AppMold_getSymbolTable$1 , name___AppMold_getSymbolTable$1
dq  __AppMold_getAstSymbolsCollector$1 , name___AppMold_getAstSymbolsCollector$1
dq  __AppMold_getAstOptimizerConstantFolding$1 , name___AppMold_getAstOptimizerConstantFolding$1
dq  __AppMold_getAstPreprocessor$1 , name___AppMold_getAstPreprocessor$1
dq  __AppMold_getAstEvaluator$1 , name___AppMold_getAstEvaluator$1
dq  __AppMold_getAstOptimizerCSE$1 , name___AppMold_getAstOptimizerCSE$1
dq  __AppMold_getAstOptimizerDeadCodeRemove$1 , name___AppMold_getAstOptimizerDeadCodeRemove$1
dq  __AppMold_getAstOptimizerVCall$1 , name___AppMold_getAstOptimizerVCall$1
dq  __AppMold_getAstOptimizerIf$1 , name___AppMold_getAstOptimizerIf$1
dq  __AppMold_getAstOptimizerInline$1 , name___AppMold_getAstOptimizerInline$1
dq  __AppMold_getAstModuleResolver$1 , name___AppMold_getAstModuleResolver$1
dq  __AppMold_getAstTypeCast$1 , name___AppMold_getAstTypeCast$1
dq  __ASTPrinterText__printNode_twoArgsOp$3 , name___ASTPrinterText__printNode_twoArgsOp$3
dq  __ASTPrinterText__printNode_codeBlock$3 , name___ASTPrinterText__printNode_codeBlock$3
dq  __ASTPrinterText__printNode_paramsList$4 , name___ASTPrinterText__printNode_paramsList$4
dq  __ASTPrinterText__printNode$3 , name___ASTPrinterText__printNode$3
dq  __ASTPrinterText_printNode$2 , name___ASTPrinterText_printNode$2
dq  __ASTPrinterHtml__printSymbolTable$2 , name___ASTPrinterHtml__printSymbolTable$2
dq  __ASTPrinterHtml__printNode$2 , name___ASTPrinterHtml__printNode$2
dq  __ASTPrinterHtml_printNode$2 , name___ASTPrinterHtml_printNode$2
dq  __ASTTranslator_constructor$2 , name___ASTTranslator_constructor$2
dq  __ASTTranslator__debug$2 , name___ASTTranslator__debug$2
dq  __ASTTranslator__error$2 , name___ASTTranslator__error$2
dq  __ASTTranslator__loadArgsVector$2 , name___ASTTranslator__loadArgsVector$2
dq  __ASTTranslator__loadArgsCount$2 , name___ASTTranslator__loadArgsCount$2
dq  __ASTTranslator__syscall$5 , name___ASTTranslator__syscall$5
dq  __ASTTranslator__loadArray$2 , name___ASTTranslator__loadArray$2
dq  __ASTTranslator__loadMap$2 , name___ASTTranslator__loadMap$2
dq  __ASTTranslator__loadImm$3 , name___ASTTranslator__loadImm$3
dq  __ASTTranslator__loadImmAsVariant$3 , name___ASTTranslator__loadImmAsVariant$3
dq  __ASTTranslator__loadVariable$2 , name___ASTTranslator__loadVariable$2
dq  __ASTTranslator__call$5 , name___ASTTranslator__call$5
dq  __ASTTranslator__invokeMethod$4 , name___ASTTranslator__invokeMethod$4
dq  __ASTTranslator__callPrint$3 , name___ASTTranslator__callPrint$3
dq  __ASTTranslator__neg$3 , name___ASTTranslator__neg$3
dq  __ASTTranslator__add$4 , name___ASTTranslator__add$4
dq  __ASTTranslator__stringJoin$4 , name___ASTTranslator__stringJoin$4
dq  __ASTTranslator__sub$4 , name___ASTTranslator__sub$4
dq  __ASTTranslator__mul$4 , name___ASTTranslator__mul$4
dq  __ASTTranslator__div$4 , name___ASTTranslator__div$4
dq  __ASTTranslator__idiv$4 , name___ASTTranslator__idiv$4
dq  __ASTTranslator__compareEQ$4 , name___ASTTranslator__compareEQ$4
dq  __ASTTranslator__compareNEQ$4 , name___ASTTranslator__compareNEQ$4
dq  __ASTTranslator__compareLT$4 , name___ASTTranslator__compareLT$4
dq  __ASTTranslator__compareLE$4 , name___ASTTranslator__compareLE$4
dq  __ASTTranslator__compareGT$4 , name___ASTTranslator__compareGT$4
dq  __ASTTranslator__compareGE$4 , name___ASTTranslator__compareGE$4
dq  __ASTTranslator__boolAnd$4 , name___ASTTranslator__boolAnd$4
dq  __ASTTranslator__boolOr$4 , name___ASTTranslator__boolOr$4
dq  __ASTTranslator__loadFromIndex$4 , name___ASTTranslator__loadFromIndex$4
dq  __ASTTranslator__loadFromKey$4 , name___ASTTranslator__loadFromKey$4
dq  __ASTTranslator__storeAtIndex$4 , name___ASTTranslator__storeAtIndex$4
dq  __ASTTranslator__storeAtKey$4 , name___ASTTranslator__storeAtKey$4
dq  __ASTTranslator__storeAtIndexAndDrop$4 , name___ASTTranslator__storeAtIndexAndDrop$4
dq  __ASTTranslator__storeAtKeyAndDrop$4 , name___ASTTranslator__storeAtKeyAndDrop$4
dq  __ASTTranslator__createObject$3 , name___ASTTranslator__createObject$3
dq  __ASTTranslator__convert$5 , name___ASTTranslator__convert$5
dq  __ASTTranslator__dropRetVal$1 , name___ASTTranslator__dropRetVal$1
dq  __ASTTranslator__declareFunction$3 , name___ASTTranslator__declareFunction$3
dq  __ASTTranslator__declareClass$3 , name___ASTTranslator__declareClass$3
dq  __ASTTranslator__emitFunctionBody$3 , name___ASTTranslator__emitFunctionBody$3
dq  __ASTTranslator__declareExternalFunction$3 , name___ASTTranslator__declareExternalFunction$3
dq  __ASTTranslator__getTempVar$2 , name___ASTTranslator__getTempVar$2
dq  __ASTTranslator__releaseTempVar$2 , name___ASTTranslator__releaseTempVar$2
dq  __ASTTranslator__enterScope$2 , name___ASTTranslator__enterScope$2
dq  __ASTTranslator__leaveScope$1 , name___ASTTranslator__leaveScope$1
dq  __ASTTranslator__verifyNumberOfParameters$4 , name___ASTTranslator__verifyNumberOfParameters$4
dq  __ASTTranslator__emitFunction$2 , name___ASTTranslator__emitFunction$2
dq  __ASTTranslator__emitGlobals$1 , name___ASTTranslator__emitGlobals$1
dq  __ASTTranslator__callSuper$4 , name___ASTTranslator__callSuper$4
dq  __ASTTranslator__getClassProto$2 , name___ASTTranslator__getClassProto$2
dq  __ASTTranslator__getMethodProto$4 , name___ASTTranslator__getMethodProto$4
dq  __ASTTranslator__isset$2 , name___ASTTranslator__isset$2
dq  __ASTTranslator__importGlobal$2 , name___ASTTranslator__importGlobal$2
dq  __ASTTranslator__declareVariableIfNotSet$2 , name___ASTTranslator__declareVariableIfNotSet$2
dq  __ASTTranslator__declareAndAssign$3 , name___ASTTranslator__declareAndAssign$3
dq  __ASTTranslator__declareVariable$2 , name___ASTTranslator__declareVariable$2
dq  __ASTTranslator__assign$3 , name___ASTTranslator__assign$3
dq  __ASTTranslator__evaluateNode$2 , name___ASTTranslator__evaluateNode$2
dq  __ASTTranslator__evaluateNodeCall$3 , name___ASTTranslator__evaluateNodeCall$3
dq  __ASTTranslator__evaluateNodeInvokeMethod$3 , name___ASTTranslator__evaluateNodeInvokeMethod$3
dq  __ASTTranslator__evaluateNodeLazyBoolAnd$4 , name___ASTTranslator__evaluateNodeLazyBoolAnd$4
dq  __ASTTranslator__evaluateNodeLazyBoolOr$4 , name___ASTTranslator__evaluateNodeLazyBoolOr$4
dq  __ASTTranslator__executeNodeFor$6 , name___ASTTranslator__executeNodeFor$6
dq  __ASTTranslator__executeNodeWhile$3 , name___ASTTranslator__executeNodeWhile$3
dq  __ASTTranslator__executeNodeIf$4 , name___ASTTranslator__executeNodeIf$4
dq  __ASTTranslator__executeNodeSwitch$2 , name___ASTTranslator__executeNodeSwitch$2
dq  __ASTTranslator__executeNode$2 , name___ASTTranslator__executeNode$2
dq  __ASTTranslator_run$2 , name___ASTTranslator_run$2
dq  __ASTTranslatorMIR0_constructor$2 , name___ASTTranslatorMIR0_constructor$2
dq  __ASTTranslatorMIR0__loadArgsVector$1 , name___ASTTranslatorMIR0__loadArgsVector$1
dq  __ASTTranslatorMIR0__loadArgsCount$1 , name___ASTTranslatorMIR0__loadArgsCount$1
dq  __ASTTranslatorMIR0__neg$3 , name___ASTTranslatorMIR0__neg$3
dq  __ASTTranslatorMIR0__add$4 , name___ASTTranslatorMIR0__add$4
dq  __ASTTranslatorMIR0__stringJoin$4 , name___ASTTranslatorMIR0__stringJoin$4
dq  __ASTTranslatorMIR0__sub$4 , name___ASTTranslatorMIR0__sub$4
dq  __ASTTranslatorMIR0__mul$4 , name___ASTTranslatorMIR0__mul$4
dq  __ASTTranslatorMIR0__div$4 , name___ASTTranslatorMIR0__div$4
dq  __ASTTranslatorMIR0__idiv$4 , name___ASTTranslatorMIR0__idiv$4
dq  __ASTTranslatorMIR0__loadArray$2 , name___ASTTranslatorMIR0__loadArray$2
dq  __ASTTranslatorMIR0__loadMap$2 , name___ASTTranslatorMIR0__loadMap$2
dq  __ASTTranslatorMIR0__loadImm$3 , name___ASTTranslatorMIR0__loadImm$3
dq  __ASTTranslatorMIR0__loadImmAsVariant$3 , name___ASTTranslatorMIR0__loadImmAsVariant$3
dq  __ASTTranslatorMIR0__convert$5 , name___ASTTranslatorMIR0__convert$5
dq  __ASTTranslatorMIR0__compareEQ$4 , name___ASTTranslatorMIR0__compareEQ$4
dq  __ASTTranslatorMIR0__compareNEQ$4 , name___ASTTranslatorMIR0__compareNEQ$4
dq  __ASTTranslatorMIR0__compareLT$4 , name___ASTTranslatorMIR0__compareLT$4
dq  __ASTTranslatorMIR0__compareLE$4 , name___ASTTranslatorMIR0__compareLE$4
dq  __ASTTranslatorMIR0__compareGT$4 , name___ASTTranslatorMIR0__compareGT$4
dq  __ASTTranslatorMIR0__compareGE$4 , name___ASTTranslatorMIR0__compareGE$4
dq  __ASTTranslatorMIR0__loadVariable$2 , name___ASTTranslatorMIR0__loadVariable$2
dq  __ASTTranslatorMIR0__assign$3 , name___ASTTranslatorMIR0__assign$3
dq  __ASTTranslatorMIR0__syscall$5 , name___ASTTranslatorMIR0__syscall$5
dq  __ASTTranslatorMIR0__call$5 , name___ASTTranslatorMIR0__call$5
dq  __ASTTranslatorMIR0__callPrint$3 , name___ASTTranslatorMIR0__callPrint$3
dq  __ASTTranslatorMIR0__loadFromIndex$4 , name___ASTTranslatorMIR0__loadFromIndex$4
dq  __ASTTranslatorMIR0__loadFromKey$4 , name___ASTTranslatorMIR0__loadFromKey$4
dq  __ASTTranslatorMIR0__storeAtIndex$4 , name___ASTTranslatorMIR0__storeAtIndex$4
dq  __ASTTranslatorMIR0__storeAtKey$4 , name___ASTTranslatorMIR0__storeAtKey$4
dq  __ASTTranslatorMIR0__storeAtIndexAndDrop$4 , name___ASTTranslatorMIR0__storeAtIndexAndDrop$4
dq  __ASTTranslatorMIR0__storeAtKeyAndDrop$4 , name___ASTTranslatorMIR0__storeAtKeyAndDrop$4
dq  __ASTTranslatorMIR0__createObject$3 , name___ASTTranslatorMIR0__createObject$3
dq  __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$4 , name___ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$4
dq  __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$4 , name___ASTTranslatorMIR0__evaluateNodeLazyBoolOr$4
dq  __ASTTranslatorMIR0__invokeMethod$5 , name___ASTTranslatorMIR0__invokeMethod$5
dq  __ASTTranslatorMIR0__executeNodeFor$6 , name___ASTTranslatorMIR0__executeNodeFor$6
dq  __ASTTranslatorMIR0__executeNodeForEach$5 , name___ASTTranslatorMIR0__executeNodeForEach$5
dq  __ASTTranslatorMIR0__executeNodeWhile$3 , name___ASTTranslatorMIR0__executeNodeWhile$3
dq  __ASTTranslatorMIR0__executeNodeIf$4 , name___ASTTranslatorMIR0__executeNodeIf$4
dq  __ASTTranslatorMIR0__declareFunction$3 , name___ASTTranslatorMIR0__declareFunction$3
dq  __ASTTranslatorMIR0__declareClass$3 , name___ASTTranslatorMIR0__declareClass$3
dq  __ASTTranslatorMIR0__emitFunctionBody$3 , name___ASTTranslatorMIR0__emitFunctionBody$3
dq  __ASTTranslatorMIR0__dropRetVal$1 , name___ASTTranslatorMIR0__dropRetVal$1
dq  __ASTTranslatorMIR0_run$2 , name___ASTTranslatorMIR0_run$2
dq  __Stack_constructor$1 , name___Stack_constructor$1
dq  __Stack_getItems$1 , name___Stack_getItems$1
dq  __Stack_push$2 , name___Stack_push$2
dq  __Stack_pop$1 , name___Stack_pop$1
dq  __Stack_over$1 , name___Stack_over$1
dq  __Stack_dup$1 , name___Stack_dup$1
dq  __Stack_eat$1 , name___Stack_eat$1
dq  __Stack_eatN$2 , name___Stack_eatN$2
dq  __Stack_setByAbsoluteIdx$3 , name___Stack_setByAbsoluteIdx$3
dq  __Stack_getByAbsoluteIdx$2 , name___Stack_getByAbsoluteIdx$2
dq  __Stack_peek$1 , name___Stack_peek$1
dq  __Stack_peekN$2 , name___Stack_peekN$2
dq  __ASTTranslatorMIR1_constructor$2 , name___ASTTranslatorMIR1_constructor$2
dq  __ASTTranslatorMIR1__emitOneItem$2 , name___ASTTranslatorMIR1__emitOneItem$2
dq  __ASTTranslatorMIR1_emitZeroArgsOpcode$2 , name___ASTTranslatorMIR1_emitZeroArgsOpcode$2
dq  __ASTTranslatorMIR1_emitTargetOnlyOpcode$3 , name___ASTTranslatorMIR1_emitTargetOnlyOpcode$3
dq  __ASTTranslatorMIR1_emitOneArgOpcode$4 , name___ASTTranslatorMIR1_emitOneArgOpcode$4
dq  __ASTTranslatorMIR1_emitTwoArgsOpcode$5 , name___ASTTranslatorMIR1_emitTwoArgsOpcode$5
dq  __ASTTranslatorMIR1_emitComment$2 , name___ASTTranslatorMIR1_emitComment$2
dq  __ASTTranslatorMIR1_emitLabel$2 , name___ASTTranslatorMIR1_emitLabel$2
dq  __ASTTranslatorMIR1_emitJmp$2 , name___ASTTranslatorMIR1_emitJmp$2
dq  __ASTTranslatorMIR1_emitJmpByTable$3 , name___ASTTranslatorMIR1_emitJmpByTable$3
dq  __ASTTranslatorMIR1_emitMoveVariantOpcode$3 , name___ASTTranslatorMIR1_emitMoveVariantOpcode$3
dq  __ASTTranslatorMIR1_popForRead$1 , name___ASTTranslatorMIR1_popForRead$1
dq  __ASTTranslatorMIR1_popForWrite$1 , name___ASTTranslatorMIR1_popForWrite$1
dq  __ASTTranslatorMIR1_push$2 , name___ASTTranslatorMIR1_push$2
dq  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$3 , name___ASTTranslatorMIR1_popOneArgAndEmitOpcode$3
dq  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3 , name___ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3
dq  __ASTTranslatorMIR1_popParametersBeforeCall$2 , name___ASTTranslatorMIR1_popParametersBeforeCall$2
dq  __ASTTranslatorMIR1_emitProcBegin$2 , name___ASTTranslatorMIR1_emitProcBegin$2
dq  __ASTTranslatorMIR1_emitProcEnd$1 , name___ASTTranslatorMIR1_emitProcEnd$1
dq  __ASTTranslatorMIR1_emitRet$1 , name___ASTTranslatorMIR1_emitRet$1
dq  __ASTTranslatorMIR1_emitMoveBackVariant$1 , name___ASTTranslatorMIR1_emitMoveBackVariant$1
dq  __ASTTranslatorMIR1__loadArgsVector$1 , name___ASTTranslatorMIR1__loadArgsVector$1
dq  __ASTTranslatorMIR1__loadArgsCount$1 , name___ASTTranslatorMIR1__loadArgsCount$1
dq  __ASTTranslatorMIR1__neg$3 , name___ASTTranslatorMIR1__neg$3
dq  __ASTTranslatorMIR1__add$4 , name___ASTTranslatorMIR1__add$4
dq  __ASTTranslatorMIR1__stringJoin$4 , name___ASTTranslatorMIR1__stringJoin$4
dq  __ASTTranslatorMIR1__sub$4 , name___ASTTranslatorMIR1__sub$4
dq  __ASTTranslatorMIR1__mul$4 , name___ASTTranslatorMIR1__mul$4
dq  __ASTTranslatorMIR1__div$4 , name___ASTTranslatorMIR1__div$4
dq  __ASTTranslatorMIR1__idiv$4 , name___ASTTranslatorMIR1__idiv$4
dq  __ASTTranslatorMIR1__loadArray$2 , name___ASTTranslatorMIR1__loadArray$2
dq  __ASTTranslatorMIR1__loadMap$2 , name___ASTTranslatorMIR1__loadMap$2
dq  __ASTTranslatorMIR1__loadImm$3 , name___ASTTranslatorMIR1__loadImm$3
dq  __ASTTranslatorMIR1__loadImmAsVariant$3 , name___ASTTranslatorMIR1__loadImmAsVariant$3
dq  __ASTTranslatorMIR1__convert$5 , name___ASTTranslatorMIR1__convert$5
dq  __ASTTranslatorMIR1__compareEQ$4 , name___ASTTranslatorMIR1__compareEQ$4
dq  __ASTTranslatorMIR1__compareNEQ$4 , name___ASTTranslatorMIR1__compareNEQ$4
dq  __ASTTranslatorMIR1__compareLT$4 , name___ASTTranslatorMIR1__compareLT$4
dq  __ASTTranslatorMIR1__compareLE$4 , name___ASTTranslatorMIR1__compareLE$4
dq  __ASTTranslatorMIR1__compareGT$4 , name___ASTTranslatorMIR1__compareGT$4
dq  __ASTTranslatorMIR1__compareGE$4 , name___ASTTranslatorMIR1__compareGE$4
dq  __ASTTranslatorMIR1__loadVariable$2 , name___ASTTranslatorMIR1__loadVariable$2
dq  __ASTTranslatorMIR1__assign$3 , name___ASTTranslatorMIR1__assign$3
dq  __ASTTranslatorMIR1__call$5 , name___ASTTranslatorMIR1__call$5
dq  __ASTTranslatorMIR1__syscall$5 , name___ASTTranslatorMIR1__syscall$5
dq  __ASTTranslatorMIR1__callPrint$3 , name___ASTTranslatorMIR1__callPrint$3
dq  __ASTTranslatorMIR1__loadFromIndex$4 , name___ASTTranslatorMIR1__loadFromIndex$4
dq  __ASTTranslatorMIR1__loadFromKey$4 , name___ASTTranslatorMIR1__loadFromKey$4
dq  __ASTTranslatorMIR1__storeAtIndex$4 , name___ASTTranslatorMIR1__storeAtIndex$4
dq  __ASTTranslatorMIR1__storeAtKey$4 , name___ASTTranslatorMIR1__storeAtKey$4
dq  __ASTTranslatorMIR1__storeAtIndexAndDrop$4 , name___ASTTranslatorMIR1__storeAtIndexAndDrop$4
dq  __ASTTranslatorMIR1__storeAtKeyAndDrop$4 , name___ASTTranslatorMIR1__storeAtKeyAndDrop$4
dq  __ASTTranslatorMIR1__createObject$3 , name___ASTTranslatorMIR1__createObject$3
dq  __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$4 , name___ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$4
dq  __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$4 , name___ASTTranslatorMIR1__evaluateNodeLazyBoolOr$4
dq  __ASTTranslatorMIR1__invokeMethod$5 , name___ASTTranslatorMIR1__invokeMethod$5
dq  __ASTTranslatorMIR1__executeNodeFor$6 , name___ASTTranslatorMIR1__executeNodeFor$6
dq  __ASTTranslatorMIR1__executeNodeForEach$5 , name___ASTTranslatorMIR1__executeNodeForEach$5
dq  __ASTTranslatorMIR1__executeNodeWhile$3 , name___ASTTranslatorMIR1__executeNodeWhile$3
dq  __ASTTranslatorMIR1__executeNodeIf$4 , name___ASTTranslatorMIR1__executeNodeIf$4
dq  __ASTTranslatorMIR1__executeNodeSwitch$2 , name___ASTTranslatorMIR1__executeNodeSwitch$2
dq  __ASTTranslatorMIR1__declareFunction$3 , name___ASTTranslatorMIR1__declareFunction$3
dq  __ASTTranslatorMIR1__declareClass$3 , name___ASTTranslatorMIR1__declareClass$3
dq  __ASTTranslatorMIR1__emitFunctionBody$3 , name___ASTTranslatorMIR1__emitFunctionBody$3
dq  __ASTTranslatorMIR1__dropRetVal$1 , name___ASTTranslatorMIR1__dropRetVal$1
dq  __ASTTranslatorMIR1_run$2 , name___ASTTranslatorMIR1_run$2
dq  __ASTTranslatorMIR1_connectTo$2 , name___ASTTranslatorMIR1_connectTo$2
dq  __PipeAbstract_constructor$1 , name___PipeAbstract_constructor$1
dq  __PipeAbstract__emitOneItem$2 , name___PipeAbstract__emitOneItem$2
dq  __PipeAbstract__replaceLastItem$2 , name___PipeAbstract__replaceLastItem$2
dq  __PipeAbstract_connectTo$2 , name___PipeAbstract_connectTo$2
dq  __PipeAbstract_processOneItem$2 , name___PipeAbstract_processOneItem$2
dq  __PipeAbstract_processArrayOfItems$2 , name___PipeAbstract_processArrayOfItems$2
dq  __PipeAbstract_flush$1 , name___PipeAbstract_flush$1
dq  __MIRQuadCollector_constructor$1 , name___MIRQuadCollector_constructor$1
dq  __MIRQuadCollector__pad$3 , name___MIRQuadCollector__pad$3
dq  __MIRQuadCollector_processOneItem$2 , name___MIRQuadCollector_processOneItem$2
dq  __MIRQuadCollector_getQuads$1 , name___MIRQuadCollector_getQuads$1
dq  __MIRQuadCollector__printSymbolInfoRow$6 , name___MIRQuadCollector__printSymbolInfoRow$6
dq  __MIRQuadCollector__dumpFrameInfo$2 , name___MIRQuadCollector__dumpFrameInfo$2
dq  __MIRQuadCollector_printQuads$1 , name___MIRQuadCollector_printQuads$1
dq  __CodeGeneratorX64_constructor$1 , name___CodeGeneratorX64_constructor$1
dq  __CodeGeneratorX64_lea$3 , name___CodeGeneratorX64_lea$3
dq  __CodeGeneratorX64_push$2 , name___CodeGeneratorX64_push$2
dq  __CodeGeneratorX64_pop$2 , name___CodeGeneratorX64_pop$2
dq  __CodeGeneratorX64_mov$3 , name___CodeGeneratorX64_mov$3
dq  __CodeGeneratorX64_call$2 , name___CodeGeneratorX64_call$2
dq  __CodeGeneratorX64_call1$3 , name___CodeGeneratorX64_call1$3
dq  __CodeGeneratorX64_call2$4 , name___CodeGeneratorX64_call2$4
dq  __CodeGeneratorX64_call3$5 , name___CodeGeneratorX64_call3$5
dq  __CodeGeneratorX64_call3AndDestroy$5 , name___CodeGeneratorX64_call3AndDestroy$5
dq  __CodeGeneratorX64_variantMove$3 , name___CodeGeneratorX64_variantMove$3
dq  __CodeGeneratorX64_variantDestroy$2 , name___CodeGeneratorX64_variantDestroy$2
dq  __CodeGeneratorX64_pushParametersBeforeCall$2 , name___CodeGeneratorX64_pushParametersBeforeCall$2
dq  __CodeGeneratorX64_emitConstant$5 , name___CodeGeneratorX64_emitConstant$5
dq  __CodeGeneratorX64_emitStringBufferHead$5 , name___CodeGeneratorX64_emitStringBufferHead$5
dq  __CodeGeneratorX64_emitStringBufferContent$5 , name___CodeGeneratorX64_emitStringBufferContent$5
dq  __CodeGeneratorX64_emitArrayBufferHead$5 , name___CodeGeneratorX64_emitArrayBufferHead$5
dq  __CodeGeneratorX64_emitArrayBufferContent$5 , name___CodeGeneratorX64_emitArrayBufferContent$5
dq  __CodeGeneratorX64__cmp_cc_int64$5 , name___CodeGeneratorX64__cmp_cc_int64$5
dq  __CodeGeneratorX64__cmp_cc_int32$5 , name___CodeGeneratorX64__cmp_cc_int32$5
dq  __CodeGeneratorX64__cmp_cc_float64$5 , name___CodeGeneratorX64__cmp_cc_float64$5
dq  __CodeGeneratorX64__jmp_if_cc_int64$5 , name___CodeGeneratorX64__jmp_if_cc_int64$5
dq  __CodeGeneratorX64__jmp_if_cc_int32$5 , name___CodeGeneratorX64__jmp_if_cc_int32$5
dq  __CodeGeneratorX64_run$2 , name___CodeGeneratorX64_run$2
dq  __MIRQuadOptimizer_constructor$1 , name___MIRQuadOptimizer_constructor$1
dq  __MIRQuadOptimizer__decreaseReadAndWriteHits$2 , name___MIRQuadOptimizer__decreaseReadAndWriteHits$2
dq  __MIRQuadOptimizer_processOneItem$2 , name___MIRQuadOptimizer_processOneItem$2
dq  __VMachineStackObject_constructor$2 , name___VMachineStackObject_constructor$2
dq  __VMachineStack_constructor$1 , name___VMachineStack_constructor$1
dq  __VMachineStack_loadCode$2 , name___VMachineStack_loadCode$2
dq  __VMachineStack__call$2 , name___VMachineStack__call$2
dq  __VMachineStack_run$1 , name___VMachineStack_run$1
dq  __VMachineStack_dumpCode$1 , name___VMachineStack_dumpCode$1
dq  BadUsageError , name_BadUsageError
dq  start , name_start
dq endOfCodeSection, name_endOfCodeSection
SymbolTableEnd:
dq 0, 0

SymbolTableNames:
include 'SymbolTableCommonNames.asm'
name_debug db 'debug', 0
name___AST_constructor$3 db '__AST_constructor$3', 0
name___AST__printInternal$3 db '__AST__printInternal$3', 0
name___AST_print$1 db '__AST_print$1', 0
name___AST__convertInternal$3 db '__AST__convertInternal$3', 0
name___AST_convert$1 db '__AST_convert$1', 0
name___Parser_constructor$1 db '__Parser_constructor$1', 0
name___Parser__handleError$4 db '__Parser__handleError$4', 0
name___Parser__parseInternal$2 db '__Parser__parseInternal$2', 0
name___Parser_parseFile$2 db '__Parser_parseFile$2', 0
name___Parser_parseText$2 db '__Parser_parseText$2', 0
name_AST_GetNextId db 'AST_GetNextId', 0
name_AST_CreateNodeInteger db 'AST_CreateNodeInteger', 0
name_AST_GetOpcodeAsText db 'AST_GetOpcodeAsText', 0
name_AST_GetOpcodeAsShortText db 'AST_GetOpcodeAsShortText', 0
name_AST_InvertBoolean db 'AST_InvertBoolean', 0
name_AST_IsVar db 'AST_IsVar', 0
name_AST_IsImm db 'AST_IsImm', 0
name_AST_IsPrimitiveImm db 'AST_IsPrimitiveImm', 0
name_AST_IsImmWithValue db 'AST_IsImmWithValue', 0
name_AST_IsEmpty db 'AST_IsEmpty', 0
name_AST_IsImmOrVar db 'AST_IsImmOrVar', 0
name_AST_HasSideEffects db 'AST_HasSideEffects', 0
name_AST_HashInternal db 'AST_HashInternal', 0
name_AST_Hash db 'AST_Hash', 0
name_AST_HashForCodeComparison db 'AST_HashForCodeComparison', 0
name_AST_IsDataNode db 'AST_IsDataNode', 0
name_AST_ConvertDataTypeToText db 'AST_ConvertDataTypeToText', 0
name_AST_ConvertDataTypeToMIR db 'AST_ConvertDataTypeToMIR', 0
name_AST_GetDataType db 'AST_GetDataType', 0
name_AST_TypeCast db 'AST_TypeCast', 0
name_AST_GetTopNodeInBlock db 'AST_GetTopNodeInBlock', 0
name_AST_GetParentBlock db 'AST_GetParentBlock', 0
name_AST_IsOkAsBox db 'AST_IsOkAsBox', 0
name_AST_CloneNode db 'AST_CloneNode', 0
name_SymbolTable_GetNextId db 'SymbolTable_GetNextId', 0
name___SymbolTable_constructor$2 db '__SymbolTable_constructor$2', 0
name___SymbolTable__debug$2 db '__SymbolTable__debug$2', 0
name___SymbolTable__error$2 db '__SymbolTable__error$2', 0
name___SymbolTable_getDeep$1 db '__SymbolTable_getDeep$1', 0
name___SymbolTable_exportSymbols$1 db '__SymbolTable_exportSymbols$1', 0
name___SymbolTable_insert$3 db '__SymbolTable_insert$3', 0
name___SymbolTable_remove$2 db '__SymbolTable_remove$2', 0
name___SymbolTable_importExternalVariable$2 db '__SymbolTable_importExternalVariable$2', 0
name___SymbolTable_insertGlobal$3 db '__SymbolTable_insertGlobal$3', 0
name___SymbolTable__lookupInternal$2 db '__SymbolTable__lookupInternal$2', 0
name___SymbolTable_lookup$2 db '__SymbolTable_lookup$2', 0
name___SymbolTable_lookupForRead$2 db '__SymbolTable_lookupForRead$2', 0
name___SymbolTable_lookupForCall$2 db '__SymbolTable_lookupForCall$2', 0
name___SymbolTable_lookupForWrite$2 db '__SymbolTable_lookupForWrite$2', 0
name___SymbolTable_lookupForReadAndWrite$2 db '__SymbolTable_lookupForReadAndWrite$2', 0
name___SymbolTable_lookupForWriteOrInsert$2 db '__SymbolTable_lookupForWriteOrInsert$2', 0
name___SymbolTable_lookupGlobal$2 db '__SymbolTable_lookupGlobal$2', 0
name___SymbolTable_decreaseReadHits$2 db '__SymbolTable_decreaseReadHits$2', 0
name___SymbolTable_decreaseWriteHits$2 db '__SymbolTable_decreaseWriteHits$2', 0
name___SymbolTable_isset$2 db '__SymbolTable_isset$2', 0
name___SymbolTable_enterScope$1 db '__SymbolTable_enterScope$1', 0
name___SymbolTable_enterScopeForLoop$1 db '__SymbolTable_enterScopeForLoop$1', 0
name___SymbolTable_enterScopeForProcedure$2 db '__SymbolTable_enterScopeForProcedure$2', 0
name___SymbolTable_leaveScope$1 db '__SymbolTable_leaveScope$1', 0
name___SymbolTable_insertFunction$3 db '__SymbolTable_insertFunction$3', 0
name___SymbolTable_lookupFunction$3 db '__SymbolTable_lookupFunction$3', 0
name___SymbolTable_getCurrentFunctionName$1 db '__SymbolTable_getCurrentFunctionName$1', 0
name___SymbolTable_insertClass$3 db '__SymbolTable_insertClass$3', 0
name___SymbolTable_lookupClass$2 db '__SymbolTable_lookupClass$2', 0
name___SymbolTable_insertLocal$2 db '__SymbolTable_insertLocal$2', 0
name___SymbolTable_importGlobal$2 db '__SymbolTable_importGlobal$2', 0
name___SymbolTable_insertParam$3 db '__SymbolTable_insertParam$3', 0
name___SymbolTable_insertRetVal$2 db '__SymbolTable_insertRetVal$2', 0
name___SymbolTable_insertConst$3 db '__SymbolTable_insertConst$3', 0
name___SymbolTable_insertLiteral$2 db '__SymbolTable_insertLiteral$2', 0
name___SymbolTable_createConstFromValue$2 db '__SymbolTable_createConstFromValue$2', 0
name___SymbolTable_assignValue$3 db '__SymbolTable_assignValue$3', 0
name___SymbolTable_assignNode$3 db '__SymbolTable_assignNode$3', 0
name___SymbolTable_assignType$3 db '__SymbolTable_assignType$3', 0
name___SymbolTable_assignMirType$3 db '__SymbolTable_assignMirType$3', 0
name___SymbolTable_removeUnusedSymbols$1 db '__SymbolTable_removeUnusedSymbols$1', 0
name___SymbolTable_createLabel$1 db '__SymbolTable_createLabel$1', 0
name___SymbolTable_insertJmpTable$2 db '__SymbolTable_insertJmpTable$2', 0
name___SymbolTable_getTempVar$2 db '__SymbolTable_getTempVar$2', 0
name___SymbolTable_getTempVarForWrite$2 db '__SymbolTable_getTempVarForWrite$2', 0
name___SymbolTable_getTempVarForReadAndWrite$2 db '__SymbolTable_getTempVarForReadAndWrite$2', 0
name___SymbolTable_releaseTempVar$2 db '__SymbolTable_releaseTempVar$2', 0
name___ASTModuleResolver_constructor$2 db '__ASTModuleResolver_constructor$2', 0
name___ASTModuleResolver_resolveImports$2 db '__ASTModuleResolver_resolveImports$2', 0
name___ASTSymbolsCollector_constructor$2 db '__ASTSymbolsCollector_constructor$2', 0
name___ASTSymbolsCollector__debug$2 db '__ASTSymbolsCollector__debug$2', 0
name___ASTSymbolsCollector__collectSymbolsFromLeftNode$3 db '__ASTSymbolsCollector__collectSymbolsFromLeftNode$3', 0
name___ASTSymbolsCollector__collectSymbolsFromRightNode$3 db '__ASTSymbolsCollector__collectSymbolsFromRightNode$3', 0
name___ASTSymbolsCollector__updateVariableSymbolInfo$4 db '__ASTSymbolsCollector__updateVariableSymbolInfo$4', 0
name___ASTSymbolsCollector__collectSymbols$4 db '__ASTSymbolsCollector__collectSymbols$4', 0
name___ASTSymbolsCollector_buildSymbolTable$2 db '__ASTSymbolsCollector_buildSymbolTable$2', 0
name___ASTEvaluator_constructor$2 db '__ASTEvaluator_constructor$2', 0
name___ASTEvaluator__debug$2 db '__ASTEvaluator__debug$2', 0
name___ASTEvaluator__assignValue$4 db '__ASTEvaluator__assignValue$4', 0
name___ASTEvaluator__getValue$3 db '__ASTEvaluator__getValue$3', 0
name___ASTEvaluator__mergeValues$3 db '__ASTEvaluator__mergeValues$3', 0
name___ASTEvaluator__processConditionalNode$3 db '__ASTEvaluator__processConditionalNode$3', 0
name___ASTEvaluator__processTwoAlternativeNodes$4 db '__ASTEvaluator__processTwoAlternativeNodes$4', 0
name___ASTEvaluator__getArrayOfValueNodes$2 db '__ASTEvaluator__getArrayOfValueNodes$2', 0
name___ASTEvaluator__processNode$3 db '__ASTEvaluator__processNode$3', 0
name___ASTEvaluator_processNode$2 db '__ASTEvaluator_processNode$2', 0
name___ASTPreprocessor_constructor$2 db '__ASTPreprocessor_constructor$2', 0
name___ASTPreprocessor__debug$2 db '__ASTPreprocessor__debug$2', 0
name___ASTPreprocessor__processNode$2 db '__ASTPreprocessor__processNode$2', 0
name___ASTPreprocessor_processNode$2 db '__ASTPreprocessor_processNode$2', 0
name___ASTOptimizerConstantFolding_constructor$2 db '__ASTOptimizerConstantFolding_constructor$2', 0
name___ASTOptimizerConstantFolding__debug$2 db '__ASTOptimizerConstantFolding__debug$2', 0
name___ASTOptimizerConstantFolding__setToImm$3 db '__ASTOptimizerConstantFolding__setToImm$3', 0
name___ASTOptimizerConstantFolding__processNodeArray$2 db '__ASTOptimizerConstantFolding__processNodeArray$2', 0
name___ASTOptimizerConstantFolding__processNodeMap$2 db '__ASTOptimizerConstantFolding__processNodeMap$2', 0
name___ASTOptimizerConstantFolding_processNode$2 db '__ASTOptimizerConstantFolding_processNode$2', 0
name___ASTOptimizerConstantFolding_processNodeUntilNotChanged$2 db '__ASTOptimizerConstantFolding_processNodeUntilNotChanged$2', 0
name___ASTOptimizerCSE_constructor$2 db '__ASTOptimizerCSE_constructor$2', 0
name___ASTOptimizerCSE__getNextId$1 db '__ASTOptimizerCSE__getNextId$1', 0
name___ASTOptimizerCSE__createNodeVariable$1 db '__ASTOptimizerCSE__createNodeVariable$1', 0
name___ASTOptimizerCSE__debug$2 db '__ASTOptimizerCSE__debug$2', 0
name___ASTOptimizerCSE__processNode$4 db '__ASTOptimizerCSE__processNode$4', 0
name___ASTOptimizerCSE_processNode$2 db '__ASTOptimizerCSE_processNode$2', 0
name___ASTOptimizerDeadCodeRemove_constructor$2 db '__ASTOptimizerDeadCodeRemove_constructor$2', 0
name___ASTOptimizerDeadCodeRemove__debug$2 db '__ASTOptimizerDeadCodeRemove__debug$2', 0
name___ASTOptimizerDeadCodeRemove__removeNode$2 db '__ASTOptimizerDeadCodeRemove__removeNode$2', 0
name___ASTOptimizerDeadCodeRemove__moveNode$3 db '__ASTOptimizerDeadCodeRemove__moveNode$3', 0
name___ASTOptimizerDeadCodeRemove__processChildNodes$3 db '__ASTOptimizerDeadCodeRemove__processChildNodes$3', 0
name___ASTOptimizerDeadCodeRemove__processNode$3 db '__ASTOptimizerDeadCodeRemove__processNode$3', 0
name___ASTOptimizerDeadCodeRemove_processNode$2 db '__ASTOptimizerDeadCodeRemove_processNode$2', 0
name___ASTOptimizerVCall_constructor$2 db '__ASTOptimizerVCall_constructor$2', 0
name___ASTOptimizerVCall__debug$2 db '__ASTOptimizerVCall__debug$2', 0
name___ASTOptimizerVCall__processNode$2 db '__ASTOptimizerVCall__processNode$2', 0
name___ASTOptimizerVCall_processNode$2 db '__ASTOptimizerVCall_processNode$2', 0
name___ASTOptimizerIf_constructor$2 db '__ASTOptimizerIf_constructor$2', 0
name___ASTOptimizerIf__debug$2 db '__ASTOptimizerIf__debug$2', 0
name___ASTOptimizerIf__processNode$2 db '__ASTOptimizerIf__processNode$2', 0
name___ASTOptimizerIf_processNode$2 db '__ASTOptimizerIf_processNode$2', 0
name___ASTOptimizerInline_constructor$2 db '__ASTOptimizerInline_constructor$2', 0
name___ASTOptimizerInline__debug$2 db '__ASTOptimizerInline__debug$2', 0
name___ASTOptimizerInline__resolveParamsForInline$4 db '__ASTOptimizerInline__resolveParamsForInline$4', 0
name___ASTOptimizerInline__injectParamInit$5 db '__ASTOptimizerInline__injectParamInit$5', 0
name___ASTOptimizerInline__injectFunctionBody$4 db '__ASTOptimizerInline__injectFunctionBody$4', 0
name___ASTOptimizerInline__processNode_injectInlineFunctions$4 db '__ASTOptimizerInline__processNode_injectInlineFunctions$4', 0
name___ASTOptimizerInline__processNode$3 db '__ASTOptimizerInline__processNode$3', 0
name___ASTOptimizerInline_processNode$2 db '__ASTOptimizerInline_processNode$2', 0
name___ASTTypeCast_constructor$2 db '__ASTTypeCast_constructor$2', 0
name___ASTTypeCast__debug$2 db '__ASTTypeCast__debug$2', 0
name___ASTTypeCast__processNode$2 db '__ASTTypeCast__processNode$2', 0
name___ASTTypeCast_processNode$2 db '__ASTTypeCast_processNode$2', 0
name___MIRCode_constructor$1 db '__MIRCode_constructor$1', 0
name___MIRCode_beginProc$5 db '__MIRCode_beginProc$5', 0
name___MIRCode_endProc$1 db '__MIRCode_endProc$1', 0
name___MIRCode_resolveLabel$2 db '__MIRCode_resolveLabel$2', 0
name___MIRCode__resolveJmps$1 db '__MIRCode__resolveJmps$1', 0
name___MIRCode_comment$2 db '__MIRCode_comment$2', 0
name___MIRCode_push0$2 db '__MIRCode_push0$2', 0
name___MIRCode_push1$3 db '__MIRCode_push1$3', 0
name___MIRCode_push2$4 db '__MIRCode_push2$4', 0
name___MIRCode_push3$5 db '__MIRCode_push3$5', 0
name___MIRCode_nop$1 db '__MIRCode_nop$1', 0
name___MIRCode_neg$1 db '__MIRCode_neg$1', 0
name___MIRCode_add$1 db '__MIRCode_add$1', 0
name___MIRCode_sub$1 db '__MIRCode_sub$1', 0
name___MIRCode_mul$1 db '__MIRCode_mul$1', 0
name___MIRCode_div$1 db '__MIRCode_div$1', 0
name___MIRCode_idiv$1 db '__MIRCode_idiv$1', 0
name___MIRCode_stringJoin$1 db '__MIRCode_stringJoin$1', 0
name___MIRCode_loadArray$1 db '__MIRCode_loadArray$1', 0
name___MIRCode_loadMap$1 db '__MIRCode_loadMap$1', 0
name___MIRCode_loadImm$2 db '__MIRCode_loadImm$2', 0
name___MIRCode_cmpEQ$1 db '__MIRCode_cmpEQ$1', 0
name___MIRCode_cmpNEQ$1 db '__MIRCode_cmpNEQ$1', 0
name___MIRCode_cmpGT$1 db '__MIRCode_cmpGT$1', 0
name___MIRCode_cmpGE$1 db '__MIRCode_cmpGE$1', 0
name___MIRCode_cmpLT$1 db '__MIRCode_cmpLT$1', 0
name___MIRCode_cmpLE$1 db '__MIRCode_cmpLE$1', 0
name___MIRCode_loadLocal$2 db '__MIRCode_loadLocal$2', 0
name___MIRCode_loadParamN$2 db '__MIRCode_loadParamN$2', 0
name___MIRCode_loadGlobal$2 db '__MIRCode_loadGlobal$2', 0
name___MIRCode_loadRetVal$1 db '__MIRCode_loadRetVal$1', 0
name___MIRCode_loadFromIndex$1 db '__MIRCode_loadFromIndex$1', 0
name___MIRCode_loadFromKey$1 db '__MIRCode_loadFromKey$1', 0
name___MIRCode_allocateLocalId$1 db '__MIRCode_allocateLocalId$1', 0
name___MIRCode_storeLocal$2 db '__MIRCode_storeLocal$2', 0
name___MIRCode_storeParamN$2 db '__MIRCode_storeParamN$2', 0
name___MIRCode_storeGlobal$2 db '__MIRCode_storeGlobal$2', 0
name___MIRCode_storeRetVal$1 db '__MIRCode_storeRetVal$1', 0
name___MIRCode_storeAtIndex$1 db '__MIRCode_storeAtIndex$1', 0
name___MIRCode_storeAtKey$1 db '__MIRCode_storeAtKey$1', 0
name___MIRCode_moveBack$1 db '__MIRCode_moveBack$1', 0
name___MIRCode_drop$1 db '__MIRCode_drop$1', 0
name___MIRCode_dropN$2 db '__MIRCode_dropN$2', 0
name___MIRCode_dup$1 db '__MIRCode_dup$1', 0
name___MIRCode_over$1 db '__MIRCode_over$1', 0
name___MIRCode_loadArgc$1 db '__MIRCode_loadArgc$1', 0
name___MIRCode_loadArgv$1 db '__MIRCode_loadArgv$1', 0
name___MIRCode_createObject$2 db '__MIRCode_createObject$2', 0
name___MIRCode__jmpInternal$3 db '__MIRCode__jmpInternal$3', 0
name___MIRCode_jmp$2 db '__MIRCode_jmp$2', 0
name___MIRCode_jmpIfTrue$2 db '__MIRCode_jmpIfTrue$2', 0
name___MIRCode_jmpIfFalse$2 db '__MIRCode_jmpIfFalse$2', 0
name___MIRCode_ret$2 db '__MIRCode_ret$2', 0
name___MIRCode_innerRet$1 db '__MIRCode_innerRet$1', 0
name___MIRCode_call$2 db '__MIRCode_call$2', 0
name___MIRCode_vcall$3 db '__MIRCode_vcall$3', 0
name___MIRCode_callPrint$2 db '__MIRCode_callPrint$2', 0
name___MIRCode_initFrame$2 db '__MIRCode_initFrame$2', 0
name___MIRCode_createLabel$1 db '__MIRCode_createLabel$1', 0
name___MIRCode_emitLabel$2 db '__MIRCode_emitLabel$2', 0
name___MIRCode_createAndEmitLabel$1 db '__MIRCode_createAndEmitLabel$1', 0
name___MIRCode_createMethod$2 db '__MIRCode_createMethod$2', 0
name___MIRCode_createClass$2 db '__MIRCode_createClass$2', 0
name___MIRCode_getClassProtoById$2 db '__MIRCode_getClassProtoById$2', 0
name___MIRCode_retValGuard$3 db '__MIRCode_retValGuard$3', 0
name___MIRCode_forEach$4 db '__MIRCode_forEach$4', 0
name___MIRCode_syscall$3 db '__MIRCode_syscall$3', 0
name___AppMold_constructor$1 db '__AppMold_constructor$1', 0
name___AppMold_clearLogContext$1 db '__AppMold_clearLogContext$1', 0
name___AppMold_setLogContext$2 db '__AppMold_setLogContext$2', 0
name___AppMold_logDebug$2 db '__AppMold_logDebug$2', 0
name___AppMold_logError$2 db '__AppMold_logError$2', 0
name___AppMold_getMir1Code$1 db '__AppMold_getMir1Code$1', 0
name___AppMold_getSymbolTable$1 db '__AppMold_getSymbolTable$1', 0
name___AppMold_getAstSymbolsCollector$1 db '__AppMold_getAstSymbolsCollector$1', 0
name___AppMold_getAstOptimizerConstantFolding$1 db '__AppMold_getAstOptimizerConstantFolding$1', 0
name___AppMold_getAstPreprocessor$1 db '__AppMold_getAstPreprocessor$1', 0
name___AppMold_getAstEvaluator$1 db '__AppMold_getAstEvaluator$1', 0
name___AppMold_getAstOptimizerCSE$1 db '__AppMold_getAstOptimizerCSE$1', 0
name___AppMold_getAstOptimizerDeadCodeRemove$1 db '__AppMold_getAstOptimizerDeadCodeRemove$1', 0
name___AppMold_getAstOptimizerVCall$1 db '__AppMold_getAstOptimizerVCall$1', 0
name___AppMold_getAstOptimizerIf$1 db '__AppMold_getAstOptimizerIf$1', 0
name___AppMold_getAstOptimizerInline$1 db '__AppMold_getAstOptimizerInline$1', 0
name___AppMold_getAstModuleResolver$1 db '__AppMold_getAstModuleResolver$1', 0
name___AppMold_getAstTypeCast$1 db '__AppMold_getAstTypeCast$1', 0
name___ASTPrinterText__printNode_twoArgsOp$3 db '__ASTPrinterText__printNode_twoArgsOp$3', 0
name___ASTPrinterText__printNode_codeBlock$3 db '__ASTPrinterText__printNode_codeBlock$3', 0
name___ASTPrinterText__printNode_paramsList$4 db '__ASTPrinterText__printNode_paramsList$4', 0
name___ASTPrinterText__printNode$3 db '__ASTPrinterText__printNode$3', 0
name___ASTPrinterText_printNode$2 db '__ASTPrinterText_printNode$2', 0
name___ASTPrinterHtml__printSymbolTable$2 db '__ASTPrinterHtml__printSymbolTable$2', 0
name___ASTPrinterHtml__printNode$2 db '__ASTPrinterHtml__printNode$2', 0
name___ASTPrinterHtml_printNode$2 db '__ASTPrinterHtml_printNode$2', 0
name___ASTTranslator_constructor$2 db '__ASTTranslator_constructor$2', 0
name___ASTTranslator__debug$2 db '__ASTTranslator__debug$2', 0
name___ASTTranslator__error$2 db '__ASTTranslator__error$2', 0
name___ASTTranslator__loadArgsVector$2 db '__ASTTranslator__loadArgsVector$2', 0
name___ASTTranslator__loadArgsCount$2 db '__ASTTranslator__loadArgsCount$2', 0
name___ASTTranslator__syscall$5 db '__ASTTranslator__syscall$5', 0
name___ASTTranslator__loadArray$2 db '__ASTTranslator__loadArray$2', 0
name___ASTTranslator__loadMap$2 db '__ASTTranslator__loadMap$2', 0
name___ASTTranslator__loadImm$3 db '__ASTTranslator__loadImm$3', 0
name___ASTTranslator__loadImmAsVariant$3 db '__ASTTranslator__loadImmAsVariant$3', 0
name___ASTTranslator__loadVariable$2 db '__ASTTranslator__loadVariable$2', 0
name___ASTTranslator__call$5 db '__ASTTranslator__call$5', 0
name___ASTTranslator__invokeMethod$4 db '__ASTTranslator__invokeMethod$4', 0
name___ASTTranslator__callPrint$3 db '__ASTTranslator__callPrint$3', 0
name___ASTTranslator__neg$3 db '__ASTTranslator__neg$3', 0
name___ASTTranslator__add$4 db '__ASTTranslator__add$4', 0
name___ASTTranslator__stringJoin$4 db '__ASTTranslator__stringJoin$4', 0
name___ASTTranslator__sub$4 db '__ASTTranslator__sub$4', 0
name___ASTTranslator__mul$4 db '__ASTTranslator__mul$4', 0
name___ASTTranslator__div$4 db '__ASTTranslator__div$4', 0
name___ASTTranslator__idiv$4 db '__ASTTranslator__idiv$4', 0
name___ASTTranslator__compareEQ$4 db '__ASTTranslator__compareEQ$4', 0
name___ASTTranslator__compareNEQ$4 db '__ASTTranslator__compareNEQ$4', 0
name___ASTTranslator__compareLT$4 db '__ASTTranslator__compareLT$4', 0
name___ASTTranslator__compareLE$4 db '__ASTTranslator__compareLE$4', 0
name___ASTTranslator__compareGT$4 db '__ASTTranslator__compareGT$4', 0
name___ASTTranslator__compareGE$4 db '__ASTTranslator__compareGE$4', 0
name___ASTTranslator__boolAnd$4 db '__ASTTranslator__boolAnd$4', 0
name___ASTTranslator__boolOr$4 db '__ASTTranslator__boolOr$4', 0
name___ASTTranslator__loadFromIndex$4 db '__ASTTranslator__loadFromIndex$4', 0
name___ASTTranslator__loadFromKey$4 db '__ASTTranslator__loadFromKey$4', 0
name___ASTTranslator__storeAtIndex$4 db '__ASTTranslator__storeAtIndex$4', 0
name___ASTTranslator__storeAtKey$4 db '__ASTTranslator__storeAtKey$4', 0
name___ASTTranslator__storeAtIndexAndDrop$4 db '__ASTTranslator__storeAtIndexAndDrop$4', 0
name___ASTTranslator__storeAtKeyAndDrop$4 db '__ASTTranslator__storeAtKeyAndDrop$4', 0
name___ASTTranslator__createObject$3 db '__ASTTranslator__createObject$3', 0
name___ASTTranslator__convert$5 db '__ASTTranslator__convert$5', 0
name___ASTTranslator__dropRetVal$1 db '__ASTTranslator__dropRetVal$1', 0
name___ASTTranslator__declareFunction$3 db '__ASTTranslator__declareFunction$3', 0
name___ASTTranslator__declareClass$3 db '__ASTTranslator__declareClass$3', 0
name___ASTTranslator__emitFunctionBody$3 db '__ASTTranslator__emitFunctionBody$3', 0
name___ASTTranslator__declareExternalFunction$3 db '__ASTTranslator__declareExternalFunction$3', 0
name___ASTTranslator__getTempVar$2 db '__ASTTranslator__getTempVar$2', 0
name___ASTTranslator__releaseTempVar$2 db '__ASTTranslator__releaseTempVar$2', 0
name___ASTTranslator__enterScope$2 db '__ASTTranslator__enterScope$2', 0
name___ASTTranslator__leaveScope$1 db '__ASTTranslator__leaveScope$1', 0
name___ASTTranslator__verifyNumberOfParameters$4 db '__ASTTranslator__verifyNumberOfParameters$4', 0
name___ASTTranslator__emitFunction$2 db '__ASTTranslator__emitFunction$2', 0
name___ASTTranslator__emitGlobals$1 db '__ASTTranslator__emitGlobals$1', 0
name___ASTTranslator__callSuper$4 db '__ASTTranslator__callSuper$4', 0
name___ASTTranslator__getClassProto$2 db '__ASTTranslator__getClassProto$2', 0
name___ASTTranslator__getMethodProto$4 db '__ASTTranslator__getMethodProto$4', 0
name___ASTTranslator__isset$2 db '__ASTTranslator__isset$2', 0
name___ASTTranslator__importGlobal$2 db '__ASTTranslator__importGlobal$2', 0
name___ASTTranslator__declareVariableIfNotSet$2 db '__ASTTranslator__declareVariableIfNotSet$2', 0
name___ASTTranslator__declareAndAssign$3 db '__ASTTranslator__declareAndAssign$3', 0
name___ASTTranslator__declareVariable$2 db '__ASTTranslator__declareVariable$2', 0
name___ASTTranslator__assign$3 db '__ASTTranslator__assign$3', 0
name___ASTTranslator__evaluateNode$2 db '__ASTTranslator__evaluateNode$2', 0
name___ASTTranslator__evaluateNodeCall$3 db '__ASTTranslator__evaluateNodeCall$3', 0
name___ASTTranslator__evaluateNodeInvokeMethod$3 db '__ASTTranslator__evaluateNodeInvokeMethod$3', 0
name___ASTTranslator__evaluateNodeLazyBoolAnd$4 db '__ASTTranslator__evaluateNodeLazyBoolAnd$4', 0
name___ASTTranslator__evaluateNodeLazyBoolOr$4 db '__ASTTranslator__evaluateNodeLazyBoolOr$4', 0
name___ASTTranslator__executeNodeFor$6 db '__ASTTranslator__executeNodeFor$6', 0
name___ASTTranslator__executeNodeWhile$3 db '__ASTTranslator__executeNodeWhile$3', 0
name___ASTTranslator__executeNodeIf$4 db '__ASTTranslator__executeNodeIf$4', 0
name___ASTTranslator__executeNodeSwitch$2 db '__ASTTranslator__executeNodeSwitch$2', 0
name___ASTTranslator__executeNode$2 db '__ASTTranslator__executeNode$2', 0
name___ASTTranslator_run$2 db '__ASTTranslator_run$2', 0
name___ASTTranslatorMIR0_constructor$2 db '__ASTTranslatorMIR0_constructor$2', 0
name___ASTTranslatorMIR0__loadArgsVector$1 db '__ASTTranslatorMIR0__loadArgsVector$1', 0
name___ASTTranslatorMIR0__loadArgsCount$1 db '__ASTTranslatorMIR0__loadArgsCount$1', 0
name___ASTTranslatorMIR0__neg$3 db '__ASTTranslatorMIR0__neg$3', 0
name___ASTTranslatorMIR0__add$4 db '__ASTTranslatorMIR0__add$4', 0
name___ASTTranslatorMIR0__stringJoin$4 db '__ASTTranslatorMIR0__stringJoin$4', 0
name___ASTTranslatorMIR0__sub$4 db '__ASTTranslatorMIR0__sub$4', 0
name___ASTTranslatorMIR0__mul$4 db '__ASTTranslatorMIR0__mul$4', 0
name___ASTTranslatorMIR0__div$4 db '__ASTTranslatorMIR0__div$4', 0
name___ASTTranslatorMIR0__idiv$4 db '__ASTTranslatorMIR0__idiv$4', 0
name___ASTTranslatorMIR0__loadArray$2 db '__ASTTranslatorMIR0__loadArray$2', 0
name___ASTTranslatorMIR0__loadMap$2 db '__ASTTranslatorMIR0__loadMap$2', 0
name___ASTTranslatorMIR0__loadImm$3 db '__ASTTranslatorMIR0__loadImm$3', 0
name___ASTTranslatorMIR0__loadImmAsVariant$3 db '__ASTTranslatorMIR0__loadImmAsVariant$3', 0
name___ASTTranslatorMIR0__convert$5 db '__ASTTranslatorMIR0__convert$5', 0
name___ASTTranslatorMIR0__compareEQ$4 db '__ASTTranslatorMIR0__compareEQ$4', 0
name___ASTTranslatorMIR0__compareNEQ$4 db '__ASTTranslatorMIR0__compareNEQ$4', 0
name___ASTTranslatorMIR0__compareLT$4 db '__ASTTranslatorMIR0__compareLT$4', 0
name___ASTTranslatorMIR0__compareLE$4 db '__ASTTranslatorMIR0__compareLE$4', 0
name___ASTTranslatorMIR0__compareGT$4 db '__ASTTranslatorMIR0__compareGT$4', 0
name___ASTTranslatorMIR0__compareGE$4 db '__ASTTranslatorMIR0__compareGE$4', 0
name___ASTTranslatorMIR0__loadVariable$2 db '__ASTTranslatorMIR0__loadVariable$2', 0
name___ASTTranslatorMIR0__assign$3 db '__ASTTranslatorMIR0__assign$3', 0
name___ASTTranslatorMIR0__syscall$5 db '__ASTTranslatorMIR0__syscall$5', 0
name___ASTTranslatorMIR0__call$5 db '__ASTTranslatorMIR0__call$5', 0
name___ASTTranslatorMIR0__callPrint$3 db '__ASTTranslatorMIR0__callPrint$3', 0
name___ASTTranslatorMIR0__loadFromIndex$4 db '__ASTTranslatorMIR0__loadFromIndex$4', 0
name___ASTTranslatorMIR0__loadFromKey$4 db '__ASTTranslatorMIR0__loadFromKey$4', 0
name___ASTTranslatorMIR0__storeAtIndex$4 db '__ASTTranslatorMIR0__storeAtIndex$4', 0
name___ASTTranslatorMIR0__storeAtKey$4 db '__ASTTranslatorMIR0__storeAtKey$4', 0
name___ASTTranslatorMIR0__storeAtIndexAndDrop$4 db '__ASTTranslatorMIR0__storeAtIndexAndDrop$4', 0
name___ASTTranslatorMIR0__storeAtKeyAndDrop$4 db '__ASTTranslatorMIR0__storeAtKeyAndDrop$4', 0
name___ASTTranslatorMIR0__createObject$3 db '__ASTTranslatorMIR0__createObject$3', 0
name___ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$4 db '__ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$4', 0
name___ASTTranslatorMIR0__evaluateNodeLazyBoolOr$4 db '__ASTTranslatorMIR0__evaluateNodeLazyBoolOr$4', 0
name___ASTTranslatorMIR0__invokeMethod$5 db '__ASTTranslatorMIR0__invokeMethod$5', 0
name___ASTTranslatorMIR0__executeNodeFor$6 db '__ASTTranslatorMIR0__executeNodeFor$6', 0
name___ASTTranslatorMIR0__executeNodeForEach$5 db '__ASTTranslatorMIR0__executeNodeForEach$5', 0
name___ASTTranslatorMIR0__executeNodeWhile$3 db '__ASTTranslatorMIR0__executeNodeWhile$3', 0
name___ASTTranslatorMIR0__executeNodeIf$4 db '__ASTTranslatorMIR0__executeNodeIf$4', 0
name___ASTTranslatorMIR0__declareFunction$3 db '__ASTTranslatorMIR0__declareFunction$3', 0
name___ASTTranslatorMIR0__declareClass$3 db '__ASTTranslatorMIR0__declareClass$3', 0
name___ASTTranslatorMIR0__emitFunctionBody$3 db '__ASTTranslatorMIR0__emitFunctionBody$3', 0
name___ASTTranslatorMIR0__dropRetVal$1 db '__ASTTranslatorMIR0__dropRetVal$1', 0
name___ASTTranslatorMIR0_run$2 db '__ASTTranslatorMIR0_run$2', 0
name___Stack_constructor$1 db '__Stack_constructor$1', 0
name___Stack_getItems$1 db '__Stack_getItems$1', 0
name___Stack_push$2 db '__Stack_push$2', 0
name___Stack_pop$1 db '__Stack_pop$1', 0
name___Stack_over$1 db '__Stack_over$1', 0
name___Stack_dup$1 db '__Stack_dup$1', 0
name___Stack_eat$1 db '__Stack_eat$1', 0
name___Stack_eatN$2 db '__Stack_eatN$2', 0
name___Stack_setByAbsoluteIdx$3 db '__Stack_setByAbsoluteIdx$3', 0
name___Stack_getByAbsoluteIdx$2 db '__Stack_getByAbsoluteIdx$2', 0
name___Stack_peek$1 db '__Stack_peek$1', 0
name___Stack_peekN$2 db '__Stack_peekN$2', 0
name___ASTTranslatorMIR1_constructor$2 db '__ASTTranslatorMIR1_constructor$2', 0
name___ASTTranslatorMIR1__emitOneItem$2 db '__ASTTranslatorMIR1__emitOneItem$2', 0
name___ASTTranslatorMIR1_emitZeroArgsOpcode$2 db '__ASTTranslatorMIR1_emitZeroArgsOpcode$2', 0
name___ASTTranslatorMIR1_emitTargetOnlyOpcode$3 db '__ASTTranslatorMIR1_emitTargetOnlyOpcode$3', 0
name___ASTTranslatorMIR1_emitOneArgOpcode$4 db '__ASTTranslatorMIR1_emitOneArgOpcode$4', 0
name___ASTTranslatorMIR1_emitTwoArgsOpcode$5 db '__ASTTranslatorMIR1_emitTwoArgsOpcode$5', 0
name___ASTTranslatorMIR1_emitComment$2 db '__ASTTranslatorMIR1_emitComment$2', 0
name___ASTTranslatorMIR1_emitLabel$2 db '__ASTTranslatorMIR1_emitLabel$2', 0
name___ASTTranslatorMIR1_emitJmp$2 db '__ASTTranslatorMIR1_emitJmp$2', 0
name___ASTTranslatorMIR1_emitJmpByTable$3 db '__ASTTranslatorMIR1_emitJmpByTable$3', 0
name___ASTTranslatorMIR1_emitMoveVariantOpcode$3 db '__ASTTranslatorMIR1_emitMoveVariantOpcode$3', 0
name___ASTTranslatorMIR1_popForRead$1 db '__ASTTranslatorMIR1_popForRead$1', 0
name___ASTTranslatorMIR1_popForWrite$1 db '__ASTTranslatorMIR1_popForWrite$1', 0
name___ASTTranslatorMIR1_push$2 db '__ASTTranslatorMIR1_push$2', 0
name___ASTTranslatorMIR1_popOneArgAndEmitOpcode$3 db '__ASTTranslatorMIR1_popOneArgAndEmitOpcode$3', 0
name___ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3 db '__ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$3', 0
name___ASTTranslatorMIR1_popParametersBeforeCall$2 db '__ASTTranslatorMIR1_popParametersBeforeCall$2', 0
name___ASTTranslatorMIR1_emitProcBegin$2 db '__ASTTranslatorMIR1_emitProcBegin$2', 0
name___ASTTranslatorMIR1_emitProcEnd$1 db '__ASTTranslatorMIR1_emitProcEnd$1', 0
name___ASTTranslatorMIR1_emitRet$1 db '__ASTTranslatorMIR1_emitRet$1', 0
name___ASTTranslatorMIR1_emitMoveBackVariant$1 db '__ASTTranslatorMIR1_emitMoveBackVariant$1', 0
name___ASTTranslatorMIR1__loadArgsVector$1 db '__ASTTranslatorMIR1__loadArgsVector$1', 0
name___ASTTranslatorMIR1__loadArgsCount$1 db '__ASTTranslatorMIR1__loadArgsCount$1', 0
name___ASTTranslatorMIR1__neg$3 db '__ASTTranslatorMIR1__neg$3', 0
name___ASTTranslatorMIR1__add$4 db '__ASTTranslatorMIR1__add$4', 0
name___ASTTranslatorMIR1__stringJoin$4 db '__ASTTranslatorMIR1__stringJoin$4', 0
name___ASTTranslatorMIR1__sub$4 db '__ASTTranslatorMIR1__sub$4', 0
name___ASTTranslatorMIR1__mul$4 db '__ASTTranslatorMIR1__mul$4', 0
name___ASTTranslatorMIR1__div$4 db '__ASTTranslatorMIR1__div$4', 0
name___ASTTranslatorMIR1__idiv$4 db '__ASTTranslatorMIR1__idiv$4', 0
name___ASTTranslatorMIR1__loadArray$2 db '__ASTTranslatorMIR1__loadArray$2', 0
name___ASTTranslatorMIR1__loadMap$2 db '__ASTTranslatorMIR1__loadMap$2', 0
name___ASTTranslatorMIR1__loadImm$3 db '__ASTTranslatorMIR1__loadImm$3', 0
name___ASTTranslatorMIR1__loadImmAsVariant$3 db '__ASTTranslatorMIR1__loadImmAsVariant$3', 0
name___ASTTranslatorMIR1__convert$5 db '__ASTTranslatorMIR1__convert$5', 0
name___ASTTranslatorMIR1__compareEQ$4 db '__ASTTranslatorMIR1__compareEQ$4', 0
name___ASTTranslatorMIR1__compareNEQ$4 db '__ASTTranslatorMIR1__compareNEQ$4', 0
name___ASTTranslatorMIR1__compareLT$4 db '__ASTTranslatorMIR1__compareLT$4', 0
name___ASTTranslatorMIR1__compareLE$4 db '__ASTTranslatorMIR1__compareLE$4', 0
name___ASTTranslatorMIR1__compareGT$4 db '__ASTTranslatorMIR1__compareGT$4', 0
name___ASTTranslatorMIR1__compareGE$4 db '__ASTTranslatorMIR1__compareGE$4', 0
name___ASTTranslatorMIR1__loadVariable$2 db '__ASTTranslatorMIR1__loadVariable$2', 0
name___ASTTranslatorMIR1__assign$3 db '__ASTTranslatorMIR1__assign$3', 0
name___ASTTranslatorMIR1__call$5 db '__ASTTranslatorMIR1__call$5', 0
name___ASTTranslatorMIR1__syscall$5 db '__ASTTranslatorMIR1__syscall$5', 0
name___ASTTranslatorMIR1__callPrint$3 db '__ASTTranslatorMIR1__callPrint$3', 0
name___ASTTranslatorMIR1__loadFromIndex$4 db '__ASTTranslatorMIR1__loadFromIndex$4', 0
name___ASTTranslatorMIR1__loadFromKey$4 db '__ASTTranslatorMIR1__loadFromKey$4', 0
name___ASTTranslatorMIR1__storeAtIndex$4 db '__ASTTranslatorMIR1__storeAtIndex$4', 0
name___ASTTranslatorMIR1__storeAtKey$4 db '__ASTTranslatorMIR1__storeAtKey$4', 0
name___ASTTranslatorMIR1__storeAtIndexAndDrop$4 db '__ASTTranslatorMIR1__storeAtIndexAndDrop$4', 0
name___ASTTranslatorMIR1__storeAtKeyAndDrop$4 db '__ASTTranslatorMIR1__storeAtKeyAndDrop$4', 0
name___ASTTranslatorMIR1__createObject$3 db '__ASTTranslatorMIR1__createObject$3', 0
name___ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$4 db '__ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$4', 0
name___ASTTranslatorMIR1__evaluateNodeLazyBoolOr$4 db '__ASTTranslatorMIR1__evaluateNodeLazyBoolOr$4', 0
name___ASTTranslatorMIR1__invokeMethod$5 db '__ASTTranslatorMIR1__invokeMethod$5', 0
name___ASTTranslatorMIR1__executeNodeFor$6 db '__ASTTranslatorMIR1__executeNodeFor$6', 0
name___ASTTranslatorMIR1__executeNodeForEach$5 db '__ASTTranslatorMIR1__executeNodeForEach$5', 0
name___ASTTranslatorMIR1__executeNodeWhile$3 db '__ASTTranslatorMIR1__executeNodeWhile$3', 0
name___ASTTranslatorMIR1__executeNodeIf$4 db '__ASTTranslatorMIR1__executeNodeIf$4', 0
name___ASTTranslatorMIR1__executeNodeSwitch$2 db '__ASTTranslatorMIR1__executeNodeSwitch$2', 0
name___ASTTranslatorMIR1__declareFunction$3 db '__ASTTranslatorMIR1__declareFunction$3', 0
name___ASTTranslatorMIR1__declareClass$3 db '__ASTTranslatorMIR1__declareClass$3', 0
name___ASTTranslatorMIR1__emitFunctionBody$3 db '__ASTTranslatorMIR1__emitFunctionBody$3', 0
name___ASTTranslatorMIR1__dropRetVal$1 db '__ASTTranslatorMIR1__dropRetVal$1', 0
name___ASTTranslatorMIR1_run$2 db '__ASTTranslatorMIR1_run$2', 0
name___ASTTranslatorMIR1_connectTo$2 db '__ASTTranslatorMIR1_connectTo$2', 0
name___PipeAbstract_constructor$1 db '__PipeAbstract_constructor$1', 0
name___PipeAbstract__emitOneItem$2 db '__PipeAbstract__emitOneItem$2', 0
name___PipeAbstract__replaceLastItem$2 db '__PipeAbstract__replaceLastItem$2', 0
name___PipeAbstract_connectTo$2 db '__PipeAbstract_connectTo$2', 0
name___PipeAbstract_processOneItem$2 db '__PipeAbstract_processOneItem$2', 0
name___PipeAbstract_processArrayOfItems$2 db '__PipeAbstract_processArrayOfItems$2', 0
name___PipeAbstract_flush$1 db '__PipeAbstract_flush$1', 0
name___MIRQuadCollector_constructor$1 db '__MIRQuadCollector_constructor$1', 0
name___MIRQuadCollector__pad$3 db '__MIRQuadCollector__pad$3', 0
name___MIRQuadCollector_processOneItem$2 db '__MIRQuadCollector_processOneItem$2', 0
name___MIRQuadCollector_getQuads$1 db '__MIRQuadCollector_getQuads$1', 0
name___MIRQuadCollector__printSymbolInfoRow$6 db '__MIRQuadCollector__printSymbolInfoRow$6', 0
name___MIRQuadCollector__dumpFrameInfo$2 db '__MIRQuadCollector__dumpFrameInfo$2', 0
name___MIRQuadCollector_printQuads$1 db '__MIRQuadCollector_printQuads$1', 0
name___CodeGeneratorX64_constructor$1 db '__CodeGeneratorX64_constructor$1', 0
name___CodeGeneratorX64_lea$3 db '__CodeGeneratorX64_lea$3', 0
name___CodeGeneratorX64_push$2 db '__CodeGeneratorX64_push$2', 0
name___CodeGeneratorX64_pop$2 db '__CodeGeneratorX64_pop$2', 0
name___CodeGeneratorX64_mov$3 db '__CodeGeneratorX64_mov$3', 0
name___CodeGeneratorX64_call$2 db '__CodeGeneratorX64_call$2', 0
name___CodeGeneratorX64_call1$3 db '__CodeGeneratorX64_call1$3', 0
name___CodeGeneratorX64_call2$4 db '__CodeGeneratorX64_call2$4', 0
name___CodeGeneratorX64_call3$5 db '__CodeGeneratorX64_call3$5', 0
name___CodeGeneratorX64_call3AndDestroy$5 db '__CodeGeneratorX64_call3AndDestroy$5', 0
name___CodeGeneratorX64_variantMove$3 db '__CodeGeneratorX64_variantMove$3', 0
name___CodeGeneratorX64_variantDestroy$2 db '__CodeGeneratorX64_variantDestroy$2', 0
name___CodeGeneratorX64_pushParametersBeforeCall$2 db '__CodeGeneratorX64_pushParametersBeforeCall$2', 0
name___CodeGeneratorX64_emitConstant$5 db '__CodeGeneratorX64_emitConstant$5', 0
name___CodeGeneratorX64_emitStringBufferHead$5 db '__CodeGeneratorX64_emitStringBufferHead$5', 0
name___CodeGeneratorX64_emitStringBufferContent$5 db '__CodeGeneratorX64_emitStringBufferContent$5', 0
name___CodeGeneratorX64_emitArrayBufferHead$5 db '__CodeGeneratorX64_emitArrayBufferHead$5', 0
name___CodeGeneratorX64_emitArrayBufferContent$5 db '__CodeGeneratorX64_emitArrayBufferContent$5', 0
name___CodeGeneratorX64__cmp_cc_int64$5 db '__CodeGeneratorX64__cmp_cc_int64$5', 0
name___CodeGeneratorX64__cmp_cc_int32$5 db '__CodeGeneratorX64__cmp_cc_int32$5', 0
name___CodeGeneratorX64__cmp_cc_float64$5 db '__CodeGeneratorX64__cmp_cc_float64$5', 0
name___CodeGeneratorX64__jmp_if_cc_int64$5 db '__CodeGeneratorX64__jmp_if_cc_int64$5', 0
name___CodeGeneratorX64__jmp_if_cc_int32$5 db '__CodeGeneratorX64__jmp_if_cc_int32$5', 0
name___CodeGeneratorX64_run$2 db '__CodeGeneratorX64_run$2', 0
name___MIRQuadOptimizer_constructor$1 db '__MIRQuadOptimizer_constructor$1', 0
name___MIRQuadOptimizer__decreaseReadAndWriteHits$2 db '__MIRQuadOptimizer__decreaseReadAndWriteHits$2', 0
name___MIRQuadOptimizer_processOneItem$2 db '__MIRQuadOptimizer_processOneItem$2', 0
name___VMachineStackObject_constructor$2 db '__VMachineStackObject_constructor$2', 0
name___VMachineStack_constructor$1 db '__VMachineStack_constructor$1', 0
name___VMachineStack_loadCode$2 db '__VMachineStack_loadCode$2', 0
name___VMachineStack__call$2 db '__VMachineStack__call$2', 0
name___VMachineStack_run$1 db '__VMachineStack_run$1', 0
name___VMachineStack_dumpCode$1 db '__VMachineStack_dumpCode$1', 0
name_BadUsageError db 'BadUsageError', 0
name_start db 'start', 0
name_endOfCodeSection db 'out of code section', 0
